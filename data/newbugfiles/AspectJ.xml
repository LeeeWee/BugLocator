<?xml version="1.0" encoding="UTF-8"?>
<BugReportRepository product="">
  <bug id="3897" reportTime="2001-10-10 23:02:00">
    <summary>rename Package introduces compile errors if file dirty 1GF5PLL</summary>
    <description>AK 6/11/01 2:44:12 PM 1. junit 2. make a compilation unit in junit.extensions dirty put some spaces 3. Rename junit.extensions 4. finish 5. deselect all files in the 'save resources' dialog 6. compiler errors in the dirty file 7. also note that you cannot undo NOTES: AK 6/11/01 2:49:13 PM java model updates package declarations only in saved files we do warn the user against 'unpredicatble behavior' this is one example EG 7/12/01 11:28:23 AM only allow such refactorings on saved files AK 8/16/2001 10:48:59 AM fixed</description>
    <commit commitTime="2005-01-28 17:25:47" id="0e43ed55f5df9cf46de81683230a3c7ee898eab2"/>
    <fixedFiles>
      <file>ajde/src/org/aspectj/ajde/ui/swing/BuildOptionsPanel.java</file>
      <file>ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java</file>
    </fixedFiles>
  </bug>
  <bug id="4000" reportTime="2001-10-10 23:04:00">
    <summary>JavaRuntime: initializeVMInstalls not robust against multiple calls 1GFO0YG</summary>
    <description>TM 6/21/2001 12:06:20 SDK 125 1 in the startup of a plugin that contributes a IVMInstallType, call JavaRuntime.getVMInstallTypes 2 open the Installed JRE's preference page 3 now the initializeVMInstalls method on JavaRuntime is called 4 this executes the startup method 5 the getVMInstallTypes call from the startup method executes initializeVMInstalls again. 6 the initialization is executed twice, possibly overwriting results of the first initialization.</description>
    <commit commitTime="2004-11-18 16:00:19" id="9f1649a4d9717c8b7997a8d0063deaf693e680ec"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/JavaClass.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/util/ClassPath.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/Repository.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/util/SyntheticRepository.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/verifier/VerifierFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="15000" reportTime="2002-05-01 10:41:00">
    <summary>Evaluation instruction resource bundle keys contain the = char</summary>
    <description>Some of the keys in the evaluation instruction resource bundle contain the character '='. When these keys are read, they are truncated prematurely. For example: EqualEqualOperator._==___operator_1='==\' operator</description>
    <commit commitTime="2006-02-15 09:15:34" id="5a10ce0be395d8086b8fdd6dcb29f87c11626e5a"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/LocalVariableTable.java</file>
    </fixedFiles>
  </bug>
  <bug id="28919" reportTime="2002-12-30 16:40:00">
    <summary>waever tries to weave into native methods ...</summary>
    <description>If you don't find the exception below in a bug, please add a new bug To make the bug a priority, please include a test program that can reproduce this exception. bad non-abstract method with no code: private native int nativeMessagePumpInitialize on public class plc.comm.pvi.PviCom$LinkEventHandlerImpl bad non-abstract method with no code: private native int nativeMessagePumpInitialize on public class plc.comm.pvi.PviCom$LinkEventHandlerImpl java.lang.RuntimeException: bad non-abstract method with no code: private native int nativeMessagePumpInitialize on public class plc.comm.pvi.PviCom$LinkEventHandlerImpl at org.aspectj.weaver.bcel.LazyMethodGen.&amp;lt;init&amp;gt; Unknown Source at org.aspectj.weaver.bcel.LazyClassGen.&amp;lt;init&amp;gt; Unknown Source at org.aspectj.weaver.bcel.BcelObjectType.getLazyClassGen Unknown Source at org.aspectj.weaver.bcel.BcelWeaver.weave Unknown Source at org.aspectj.weaver.bcel.BcelWeaver.weave Unknown Source at org.aspectj.ajdt.internal.core.builder.AjBuildManager.weaveAndGenerateClassFiles Unknown Source at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild Unknown Source at org.aspectj.ajdt.ajc.AjdtCommand.runCommand Unknown Source at org.aspectj.tools.ajc.Main.run Unknown Source at org.aspectj.tools.ajc.Main.runMain Unknown Source at org.aspectj.tools.ajc.Main.main Unknown Source</description>
    <commit commitTime="2003-01-14 20:02:43" id="27817202657a92778479de5063097086b511385b"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="28974" reportTime="2003-01-03 10:28:00">
    <summary>Compiler error when introducing a "final" field</summary>
    <description>The aspect below fails to compile with 1.1b2, producing the compilation error: -------------------- $ ajc com/ibm/amc/*.java com/ibm/amc/ejb/*.java d:/eclipse/runtime-workspace-ajsamples/Mock EJBs/com/ibm/amc/DemoBeanEJB.java:1: Cannot assign a value to the final field com.ibm.amc.DemoBean.ajc$interField$co m_ibm_amc$verbose !! no source information available !! 1 error --------------------------- package com.ibm.amc; import com.ibm.amc.ejb.SessionBean; /** * @author colyer * * To change this generated comment edit the template variable "typecomment": * Window&amp;gt;Preferences&amp;gt;Java&amp;gt;Templates. * To enable and disable the creation of type comments go to * Window&amp;gt;Preferences&amp;gt;Java&amp;gt;Code Generation. */ public aspect DemoBeanEJB { declare parents: DemoBean implements SessionBean; // THIS NEXT LINE IS THE CULPRIT static final boolean DemoBean.verbose = true; private transient String DemoBean.ctx; public void DemoBean.ejbActivate { if verbose { System.out.println "ejbActivate Called" ; } } } ------------------- Making the inter-type declaration non-final solves the problem...</description>
    <commit commitTime="2003-01-14 19:31:02" id="99a873c3070bea836e8cd4bd33c610fb41efa2c6"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/AjcMemberMaker.java</file>
    </fixedFiles>
  </bug>
  <bug id="29186" reportTime="2003-01-08 21:22:00">
    <summary>ajc -emacssym chokes on pointcut that includes an intertype method</summary>
    <description>This works fine without -emacssym, but dies with it: aspect Foo { before : call void foo { } void Bar.bar { foo ; } } class Bar { void foo { } } munger: before: persingleton Foo &amp;amp;&amp;amp; call ExactTypePattern void foo -&amp;gt;void Foo.ajc$before$Foo$f on method-call void Bar.foo trouble in: public class Foo extends java.lang.Object: TypeMungers: [ BcelTypeMunger ResolvedTypeMunger Method, void Bar.bar ] public static final Foo ajc$perSingletonInstance static void &amp;lt;clinit&amp;gt; : INVOKESTATIC Foo.ajc$clinit V line 1 staticinitialization void Foo.&amp;lt;clinit&amp;gt; | RETURN staticinitialization void Foo.&amp;lt;clinit&amp;gt; end static void &amp;lt;clinit&amp;gt; void &amp;lt;init&amp;gt; : ALOAD_0 // Foo this line 1 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V constructor-execution void Foo.&amp;lt;init&amp;gt; | RETURN constructor-execution void Foo.&amp;lt;init&amp;gt; end void &amp;lt;init&amp;gt; public void ajc$before$Foo$f AdviceAttribute before, call ExactTypePattern void foo , 0, 15 : advice-execution void Foo.ajc$before$Foo$f | RETURN line 2 advice-execution void Foo.ajc$before$Foo$f end public void ajc$before$Foo$f public static void ajc$interMethod$Foo$Bar$bar Bar EffectiveSignatureAttribute void Bar.bar , method-execution : method-execution void Bar.bar | ALOAD_0 // Bar arg0 line 3 | method-call void Bar.foo | | GETSTATIC Foo.ajc$perSingletonInstance LFoo; | | INVOKEVIRTUAL Foo.ajc$before$Foo$f V | | INVOKEVIRTUAL Bar.foo V | method-call void Bar.foo | RETURN method-execution void Bar.bar end public static void ajc$interMethod$Foo$Bar$bar Bar public static void ajc$interMethodDispatch1$Foo$Bar$bar Bar EffectiveSignatureAttribute void Bar.bar , method-call : ALOAD_0 // Bar arg0 INVOKEVIRTUAL Bar.ajc$interMethodDispatch2$$bar V RETURN end public static void ajc$interMethodDispatch1$Foo$Bar$bar Bar public static Foo aspectOf org.aspectj.weaver.AjAttribute$AjSynthetic@f8f7db : GETSTATIC Foo.ajc$perSingletonInstance LFoo; ARETURN end public static Foo aspectOf public static boolean hasAspect org.aspectj.weaver.AjAttribute$AjSynthetic@5856a5 : GETSTATIC Foo.ajc$perSingletonInstance LFoo; IFNULL L0 ICONST_1 IRETURN L0: ICONST_0 IRETURN end public static boolean hasAspect private static void ajc$clinit org.aspectj.weaver.AjAttribute$AjSynthetic@c39a20 : NEW Foo DUP INVOKESPECIAL Foo.&amp;lt;init&amp;gt; V PUTSTATIC Foo.ajc$perSingletonInstance LFoo; RETURN end private static void ajc$clinit end public class Foo Exception thrown from AspectJ 1.1b2 This might be logged as a bug already -- see the bug database at http://dev.eclipse.org product: AspectJ, component: compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug To make the bug a priority, please include a test program that can reproduce this exception. null java.lang.NullPointerException at org.aspectj.weaver.AsmAdaptor.findOrCreateBodyNode Unknown Source at org.aspectj.weaver.AsmAdaptor.getNode Unknown Source at org.aspectj.weaver.AsmAdaptor.noteMunger Unknown Source at org.aspectj.weaver.Shadow.implementMungers Unknown Source at org.aspectj.weaver.Shadow.implement Unknown Source at org.aspectj.weaver.bcel.BcelClassWeaver.implement Unknown Source at org.aspectj.weaver.bcel.BcelClassWeaver.weave Unknown Source at org.aspectj.weaver.bcel.BcelClassWeaver.weave Unknown Source at org.aspectj.weaver.bcel.BcelWeaver.weave Unknown Source at org.aspectj.weaver.bcel.BcelWeaver.weave Unknown Source at org.aspectj.ajdt.internal.core.builder.AjBuildManager.weaveAndGenerateClassFiles Unknown Source at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild Unknown Source at org.aspectj.ajdt.ajc.AjdtCommand.runCommand Unknown Source at org.aspectj.tools.ajc.Main.run Unknown Source at org.aspectj.tools.ajc.Main.runMain Unknown Source at org.aspectj.tools.ajc.Main.main Unknown Source 1 fail|abort</description>
    <commit commitTime="2003-01-14 21:36:18" id="c1260e6b26b78f0f431b778cd8f22d3493e97f3f"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/Lint.java</file>
      <file>weaver/src/org/aspectj/weaver/Shadow.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedTypeX.java</file>
      <file>asm/src/org/aspectj/asm/StructureModel.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmBuilder.java</file>
      <file>weaver/src/org/aspectj/weaver/AsmAdaptor.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="29665" reportTime="2003-01-16 15:18:00">
    <summary>Inconsistant stack height</summary>
    <description>Using AspectJ1.1b4 running the following program crashes it with this message: "Inconsistent stack height 0 != 2". While reducing my original program to the minimum example below I had also stack height 0 != 1, but I guess that is related, so I didn't reproduce it mail me if this you need this, too . mport java.lang.reflect.Method; public class StackError { public static void main String args[] {} void assertTrue String msg, boolean b {} public void testEqualsNull { StackError one = new StackError ; StackError two = new StackError ; assertTrue "equal", one.equals two ; // does not work boolean yes = one.equals two ; // works } public boolean equals Object other { return true; } } aspect EqualsContract { pointcut equalsCall Object thisOne, Object otherOne : target Object+ &amp;amp;&amp;amp; target thisOne &amp;amp;&amp;amp; call public boolean equals Object+ &amp;amp;&amp;amp; args otherOne &amp;amp;&amp;amp; !within EqualsContract ; boolean around Object thisOne, Object otherOne : equalsCall thisOne, otherOne { boolean result = proceed thisOne, otherOne ; Class cls = thisOne.getClass ; String name = cls.getName ; boolean hasHashCode = false; try { Method m = cls.getDeclaredMethod "hashCode", null ; String lookFor = "public int " + name + ".hashCode "; hasHashCode = lookFor.equals m.toString ; } catch NoSuchMethodException nsme {} return result; } } The program does not crash if you comment out the line indicated with the "does not work" comment. Note the line below that comment "works" does work.</description>
    <commit commitTime="2003-04-22 21:58:02" id="6c9118bfa40d75467085d23a3b0d103199e137b2"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="29684" reportTime="2003-01-16 23:40:00">
    <summary>Incremental: Commenting out conflict yeilds NullPointerException</summary>
    <description>Compiling the following two files in package member_conflict with ajc -Xlint -incremental -sourceroots member_conflict yeilds a well-formed error. Files: ---- public class SomeClass { public String toString { return "from SomeClass"; } } public aspect Conflicter { public String SomeClass.toString { return "from Conflicter"; } public static void main String[] args { int i = 0; } } However, modifying Conflicter so that it reads: public aspect Conflicter { // public String SomeClass.toString { // return "from Conflicter"; // } public static void main String[] args { int i = 0; } } saving the file and invoking the incremental compilation yeilds a NullPointerException full output below . C:\aopbook_tech\aop7&amp;gt;ajc -Xlint -incremental -sourceroots member_conflict inter-type declaration from member_conflict.Conflicter conflicts with existing member: java.lang.String member_conflict. SomeClass.toString inter-type declaration from member_conflict.Conflicter conflicts with existing member: java.lang.String member_conflict. SomeClass.toString 2 errors press enter to recompile q to quit : Exception thrown from AspectJ 1.1beta4 This might be logged as a bug already -- see the bug database at http://dev.eclipse.org product: AspectJ, component: compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug To make the bug a priority, please include a test program that can reproduce this exception. null java.lang.NullPointerException at org.eclipse.jdt.internal.core.builder.State.copyFrom State.java:60 at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.&amp;lt;init&amp;gt; IncrementalImageBuilder.java:41 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$IncrementalBuilder.&amp;lt;init&amp;gt; AjBuildManager.java:661 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.getIncrementalBuilder AjBuildManager.java:127 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:159 at org.aspectj.ajdt.ajc.AjdtCommand.repeatCommand AjdtCommand.java:90 at org.aspectj.tools.ajc.Main.run Main.java:203 at org.aspectj.tools.ajc.Main.runMain Main.java:138 at org.aspectj.tools.ajc.Main.main Main.java:58 1 fail|abort, 2 errors</description>
    <commit commitTime="2003-01-22 00:50:14" id="5731eaec26015751b6f4195878e7d62ae8118094"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="29689" reportTime="2003-01-17 02:22:00">
    <summary>Declare precedence should not allow multiple * patterns</summary>
    <description>The following precedence declaration is ambigous and should not be allowed: public aspect Coordinator { declare precedence : *, Tracing, *; } To see why, examine the following example. Two aspects declare before advice on doSomething . Should Notification come before or after Tracing? --- public class SomeObject { public static void main String[] args { new SomeObject .doSomething ; } public void doSomething { System.out.println "Finally doing something." ; } } public aspect Tracing { before : call void doSomething { System.out.println "Tracing: logging call." ; } } public aspect Notification { before : call void doSomething { System.out.println "Notification:" + " Sending update somewhere." ; } } ---</description>
    <commit commitTime="2003-01-21 19:01:43" id="d2b603683edc8747eebdb4d106c205dd9433da9f"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java</file>
    </fixedFiles>
  </bug>
  <bug id="29691" reportTime="2003-01-17 03:36:00">
    <summary>Static inner aspects cannot reference user defined pointcuts</summary>
    <description>Compiling: package cantfind; public class SomeObject { public static void main String[] args { } public static aspect Referencer{ pointcut mainCall : call void main .. ; pointcut myMainCall : mainCall ; } } with: C:\aopbook_tech\aop7&amp;gt;ajc -Xlint -sourceroots cantfind yields: can't find referenced pointcut 1 error Commenting out the myMainCall declaration fixes the error.</description>
    <commit commitTime="2003-01-21 18:32:30" id="4dfb3f2ad89c38a46521698484667f4b6fe3085a"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="29693" reportTime="2003-01-17 03:53:00">
    <summary>Use of within with declare soft yeilds VerifyError 1.1b4</summary>
    <description>Test files: ------- package soft; import java.io.*; public aspect Soften { declare soft : IOException : within Thrower ; } package soft; import java.io.*; public class Thrower { static void foo throws IOException { throw new IOException ; } public static void main String[] args throws Exception{ foo ; } } ------ Output: C:\aopbook_tech\aop7&amp;gt;ajc -Xlint -sourceroots soft &amp;amp;&amp;amp; java soft.Thrower Exception in thread "main" java.lang.VerifyError: class: soft/Thrower, method: &amp;lt;init&amp;gt; signature: V Illegal exception table range</description>
    <commit commitTime="2003-01-21 18:43:04" id="b5bb16f1f0011e41454f60b2707420769dcd1ebc"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="29769" reportTime="2003-01-19 11:42:00">
    <summary>Ajde does not support new AspectJ 1.1 compiler options</summary>
    <description>The org.aspectj.ajde.BuildOptionsAdapter interface does not yet support the new AspectJ 1.1 compiler options. These need to be added to the interface, any old or renamed options deprecated, and then the correct processing needs to happen within Ajde to pass these options to the compiler. This enhancement is needed by the various IDE projects for there AspectJ 1.1 support.</description>
    <commit commitTime="2003-01-25 01:25:30" id="85a827a7f269a18a0c80802811bbc2aa3766c2e4"/>
    <fixedFiles>
      <file>ajde/src/org/aspectj/ajde/ProjectPropertiesAdapter.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/StructureModelTest.java</file>
      <file>ajbrowser/src/org/aspectj/tools/ajbrowser/BrowserProperties.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/BuildOptionsTest.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java</file>
      <file>ajde/src/org/aspectj/ajde/BuildOptionsAdapter.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/StructureModelRegressionTest.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/ui/StructureViewManagerTest.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/internal/AjcBuildOptions.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/AjdeTests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>ajde/testdata/examples/figures-coverage/figures/Figure.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/NullIdeProperties.java</file>
      <file>ajde/src/org/aspectj/ajde/internal/AspectJBuildManager.java</file>
      <file>ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/NullIdeManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="29934" reportTime="2003-01-21 20:13:00">
    <summary>runtime NullPointerException when applying around advice to other around advice</summary>
    <description>When the program below is run, it produces a NullPointerException... java.lang.NullPointerException at A2.ajc$around$A2$3b6proceed CflowCycles.java at A2.ajc$around$A2$3b6_aroundBody3 CflowCycles.java:35 at Target.run CflowCycles.java:24 at CflowCycles.run_aroundBody4 CflowCycles.java:8 at CflowCycles.main_aroundBody6 CflowCycles.java:24 at CflowCycles.main CflowCycles.java:24 --- in new/CflowCycles.java and in ajcTestsFailing.xml import org.aspectj.testing.Tester; /** @testcase cflow cycles in advice from different aspects */ public class CflowCycles { public static void main String args[] { Tester.expectEvent "target A1" ; Tester.expectEvent "target A2" ; new Target .run ; Tester.checkAllEventsIgnoreDups ; } } class Target { public void run { } } aspect A1 { pointcut TargetRunFlow // ok if no cflow: within Target &amp;amp;&amp;amp; execution * * .. &amp;amp;&amp;amp; !within A1+ ; : !within A1+ &amp;amp;&amp;amp; !preinitialization new .. &amp;amp;&amp;amp; !initialization new .. //cflow within Target &amp;amp;&amp;amp; execution * * .. &amp;amp;&amp;amp; !within A1+ ; Object around : TargetRunFlow { Tester.event "target A1" ; return proceed ; } // ok if in the same class } aspect A2 { pointcut TargetRun : within Target &amp;amp;&amp;amp; execution * * .. &amp;amp;&amp;amp; !within A2+ ; ; Object around : TargetRun { Tester.event "target A2" ; return proceed ; } }</description>
    <commit commitTime="2003-03-12 00:48:57" id="0fb5f693794e571ab693813cbc80578b2bc7b470"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="29959" reportTime="2003-01-22 07:10:00">
    <summary>super call in intertype method declaration body causes VerifyError</summary>
    <description>AspectJ Compiler 1.1beta4 This program: aspect Foo { void A.foo { } void B.foo { super.foo ; } } class A { } class B extends A { } class Main { public static void main String[] args { new B ; } } causes this error at runtime: Exception in thread "main" java.lang.VerifyError: class: B, method: ajc$superDispatch$B$foo signature: V Illegal use of nonvirtual function call at Main.main Foo.java:11 Note that foo is never even called; the error happens at load time when the new B expression causes class B to be loaded. There's no error if either one of the foo methods is declared in its class directly. This is kind of a showstopper... --Doug</description>
    <commit commitTime="2003-02-13 21:00:35" id="3e2801ad504e8f6b3fa7b50a42bf2706994e1727"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/SuperFixerVisitor.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeMethodBinding.java</file>
      <file>org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeConstructorDeclaration.java</file>
      <file>org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java</file>
      <file>org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java</file>
      <file>org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java</file>
    </fixedFiles>
  </bug>
  <bug id="30168" reportTime="2003-01-24 07:25:00">
    <summary>Error with certain combination of advice</summary>
    <description>This program causes the java VM to crash. It is a minimal example -- if you remove anything in the aspects it works. 1. PROGRAM CODE package test; import org.aspectj.lang.*; import org.aspectj.lang.reflect.*; public class Test3 { public static void main String[] args throws Exception { Test3 a = new Test3 ; a.foo -3 ; } public void foo int i { this.x=i; } int x; } aspect Log { pointcut assign Object newval, Object targ : set * test..* &amp;amp;&amp;amp; args newval &amp;amp;&amp;amp; target targ ; before Object newval, Object targ : assign newval,targ { Signature sign = thisJoinPoint.getSignature ; System.out.println targ.toString + "." + sign.getName + ":=" + newval ; } /* } // Different error message if you divide into two aspects aspect Tracing { */ pointcut tracedCall : call * test..* .. /* &amp;amp;&amp;amp; !within Tracing */ &amp;amp;&amp;amp; !within Log ; after returning Object o : tracedCall { // Works if you comment out either of these two lines thisJoinPoint.getSignature ; System.out.println thisJoinPoint ; } } 2. RESULTS ON SOLARIS [erik@oden test] java test.Test3 test.Test3@b8df17.x :=-3 Unexpected Signal : 11 occurred at PC=0xFA415A00 Function=[Unknown.] Library= N/A NOTE: We are unable to locate the function name symbol for the error just occurred. Please refer to release documentation for possible reason and solutions. Current Java thread: Dynamic libraries: 0x10000 java 0xff350000 /usr/lib/libthread.so.1 0xff390000 /usr/lib/libdl.so.1 0xff200000 /usr/lib/libc.so.1 0xff330000 /usr/platform/SUNW,Ultra-250/lib/libc_psr.so.1 0xfe000000 /usr/j2se/jre/lib/sparc/client/libjvm.so 0xff2e0000 /usr/lib/libCrun.so.1 0xff1e0000 /usr/lib/libsocket.so.1 0xff100000 /usr/lib/libnsl.so.1 0xff0d0000 /usr/lib/libm.so.1 0xff310000 /usr/lib/libw.so.1 0xff0b0000 /usr/lib/libmp.so.2 0xff080000 /usr/j2se/jre/lib/sparc/native_threads/libhpi.so 0xff050000 /usr/j2se/jre/lib/sparc/libverify.so 0xff020000 /usr/j2se/jre/lib/sparc/libjava.so 0xfe7e0000 /usr/j2se/jre/lib/sparc/libzip.so 0xfe5b0000 /usr/lib/locale/sv_SE/sv_SE.so.2 Local Time = Fri Jan 24 13:38:29 2003 Elapsed Time = 2 # # HotSpot Virtual Machine Error : 11 # Error ID : 4F530E43505002D3 01 # Please report this error at # http://java.sun.com/cgi-bin/bugreport.cgi # # Java VM: Java HotSpot TM Client VM 1.4.0-b92 mixed mode # # An error report file has been saved as hs_err_pid15099.log. # Please refer to the file for further information. # Abort [erik@oden test] [erik@oden test] /usr/j2se.old/bin/java test.Test3 test.Test3@1afa3.x :=-3 Unexpected Signal : 11 occurred at PC=0x85c24 Function name= N/A Library= N/A NOTE: We are unable to locate the function name symbol for the error just occurred. Please refer to release documentation for possible reason and solutions. Current Java thread: Dynamic libraries: 0x10000 /usr/j2se.old/bin/../bin/sparc/native_threads/java 0xff350000 /usr/lib/libthread.so.1 0xff390000 /usr/lib/libdl.so.1 0xff200000 /usr/lib/libc.so.1 0xff330000 /usr/platform/SUNW,Ultra-250/lib/libc_psr.so.1 0xfe480000 /usr/j2se.old/jre/lib/sparc/client/libjvm.so 0xff2e0000 /usr/lib/libCrun.so.1 0xff1e0000 /usr/lib/libsocket.so.1 0xff100000 /usr/lib/libnsl.so.1 0xff0d0000 /usr/lib/libm.so.1 0xff310000 /usr/lib/libw.so.1 0xff0b0000 /usr/lib/libmp.so.2 0xff080000 /usr/j2se.old/jre/lib/sparc/native_threads/libhpi.so 0xff050000 /usr/j2se.old/jre/lib/sparc/libverify.so 0xfe440000 /usr/j2se.old/jre/lib/sparc/libjava.so 0xff020000 /usr/j2se.old/jre/lib/sparc/libzip.so 0xfe260000 /usr/lib/locale/sv_SE/sv_SE.so.2 Local Time = Fri Jan 24 13:39:20 2003 Elapsed Time = 2 # # HotSpot Virtual Machine Error : 11 # Error ID : 4F530E43505002C4 01 # Please report this error at # http://java.sun.com/cgi-bin/bugreport.cgi # # Java VM: Java HotSpot TM Client VM 1.3.1_02-b02 mixed mode # # An error report file has been saved as hs_err_pid15100.log. # Please refer to the file for further information. # Abort [erik@oden test] 3. RESULTS ON WINDOWS 2000 Results on Windows 2000 If I have copied it correctly &amp;gt;java -classpath ..\..\aspectj1.1\lib\aspectjrt.jar;. test.Test3 test.Test3@1a8c4e7.x :=-3 Exception in thread "main" java.lang.NullPointerException at test.Log.ajc$afterReturning$test_Log$30d Test3.java:37 at test.Test3.main Test3.java:8 &amp;gt;java -version java version "1.4.1_01" Java TM 2 Runtime Environment, Standard Edition build 1.4.1_01-b01 Java HotSpot TM Client VM build 1.4.1_01-b01, mixed mode java</description>
    <commit commitTime="2003-02-13 22:00:34" id="d15eb325fc77d9f1eb0ac9ec1f6886562d531105"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ThisJoinPointVisitor.java</file>
    </fixedFiles>
  </bug>
  <bug id="30439" reportTime="2003-01-28 16:20:00">
    <summary>spurious "circular dependency" error</summary>
    <description>AspectJ Compiler 1.1beta4 This program: aspect Foo { pointcut p1 : execution void f &amp;amp;&amp;amp; cflow execution void f1 ; pointcut p2 : execution void f &amp;amp;&amp;amp; cflow execution void f2 ; before : p1 { } after : p1 { } before : p2 { } after : p2 { } } class A { void f1 { f ; } void f2 { f ; } void f { } } results in these errors: circular dependency at method-execution void A.f circular dependency at method-execution void A.f circular dependency at method-execution void A.f circular dependency at method-execution void A.f 4 errors If I comment out any one of the four pieces of advice, all the errors go away. Also, assuming that there is a valid reason for printing this error sometimes, how come there's no line number? --Doug</description>
    <commit commitTime="2004-07-29 15:04:00" id="4feb835a5339c3f63d73fbd6db2fe307e1f08ed1"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/DeclareParents.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedTypeX.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/TypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/ClassPathManager.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/IfPointcut.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/BcweaverTests.java</file>
      <file>weaver/src/org/aspectj/weaver/NewConstructorTypeMunger.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
      <file>weaver/src/org/aspectj/weaver/Lint.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/DeclareSoft.java</file>
      <file>weaver/src/org/aspectj/weaver/Shadow.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java</file>
      <file>weaver/src/org/aspectj/weaver/Advice.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java</file>
      <file>weaver/src/org/aspectj/weaver/WeaverStateInfo.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/World.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="30663" reportTime="2003-01-30 15:48:00">
    <summary>lame error message: "negation doesn't allow binding"</summary>
    <description>AspectJ Compiler 1.1beta4 This program: public aspect Foo { pointcut p int i : call void f i ; } produces these error messages: negation doesn't allow binding formal unbound in pointcut 2 errors It should say something like "binding is only allowed in state-based pointcuts", and it should print the file and line number. --Doug</description>
    <commit commitTime="2003-04-27 23:31:06" id="7d144321837cac05cdbe2a30323d670dfcc9809a"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/TypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="31423" reportTime="2003-02-09 12:29:00">
    <summary>Pointcut adviceexecution does not work</summary>
    <description>Pointcut adviceexecution does not seem to pick advice execution join points in beta4. Here is a program that shows the problem: public class Test { public static void main String[] args { } } aspect Aspect1 { before : execution * Test.* .. { System.out.println "Reached " + thisJoinPoint ; } } aspect Aspect2 { before : adviceexecution &amp;amp;&amp;amp; !within Aspect2 { System.out.println "Reached " + thisJoinPoint ; } } F:\aop\bugs\1.1\b4\adviceexecution&amp;gt;ajc -version AspectJ Compiler 1.1beta4 F:\aop\bugs\1.1\b4\adviceexecution&amp;gt;ajc Test.java F:\aop\bugs\1.1\b4\adviceexecution&amp;gt;java Test Reached execution void Test.main String[]</description>
    <commit commitTime="2003-02-13 22:24:56" id="19c3e16d2212bdd41144da2150c8ef46b4a759a5"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java</file>
    </fixedFiles>
  </bug>
  <bug id="31460" reportTime="2003-02-10 10:35:00">
    <summary>Weaving class loader</summary>
    <description>Hi! As discussed on the mailing list a few days ago I implemented a weaving class loader to enable bytecode based weaving at class loading time. The class loader is based on the URLClassLoader and can be used like any other URLClassLoader. In addition to that you can add aspects to the weaving loader. These aspects got woven into each class that is loaded. The test cases for the class loader aren't implemented yet, I am still thinking about how to implement them. I will contribute them later, okay? -Martin</description>
    <commit commitTime="2004-04-02 12:03:40" id="33d8ee9eededcd1219a6cbd1d063af005d40a3f7"/>
    <fixedFiles>
      <file>weaver/testsrc/BcweaverModuleTests.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BcweaverJarMaker.java</file>
      <file>util/src/org/aspectj/util/FileUtil.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/BcweaverTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="32239" reportTime="2003-02-19 10:07:00">
    <summary>Dumps assembly code if Object[] used in args BcelRenderer.java:152</summary>
    <description>PROGRAM import org.aspectj.lang.*; import java.lang.reflect.*; import org.aspectj.lang.reflect.*; public class Test4 { public static void main String[] args throws Exception { Test4 t = new Test4 ; System.out.println t.foo "a" ; } String foo Object s { return "x"+s; } } aspect profile { // It's the [] that is offending the compiler Object around Object targ, Object[] x : call * * .. &amp;amp;&amp;amp; target targ &amp;amp;&amp;amp; !within profile &amp;amp;&amp;amp; args x { System.out.println "" + targ + "," + x ; return proceed targ,x ; } } RESULT OF COMPILATION [erik@oden test] ajc Test4.java trouble in: public class Test4 extends java.lang.Object: public void &amp;lt;init&amp;gt; : ALOAD_0 // Test4 this line 5 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V constructor-execution void Test4.&amp;lt;init&amp;gt; | RETURN constructor-execution void Test4.&amp;lt;init&amp;gt; end public void &amp;lt;init&amp;gt; public static void main String[] throws java.lang.Exception: method-execution void Test4.main java.lang.String[] | NEW Test4 line 7 | DUP | constructor-call void Test4.&amp;lt;init&amp;gt; | | INVOKESPECIAL Test4.&amp;lt;init&amp;gt; V | constructor-call void Test4.&amp;lt;init&amp;gt; | ASTORE_1 | field-get java.io.PrintStream java.lang.System.out | | GETSTATIC java.lang.System.out Ljava/io/PrintStream; line 8 | field-get java.io.PrintStream java.lang.System.out | ALOAD_1 // Test4 t | LDC "a" | ASTORE_2 | ASTORE_3 | method-call void java.io.PrintStream.println java.lang.String | | INVOKEVIRTUAL java.io.PrintStream.println Ljava/lang/String; V | method-call void java.io.PrintStream.println java.lang.String | RETURN line 9 method-execution void Test4.main java.lang.String[] end public static void main String[] throws java.lang.Exception String foo Object : method-execution java.lang.String Test4.foo java.lang.Object | NEW java.lang.StringBuffer line 11 | DUP | LDC "x" | constructor-call void java.lang.StringBuffer.&amp;lt;init&amp;gt; java.lang.String | | INVOKESPECIAL java.lang.StringBuffer.&amp;lt;init&amp;gt; Ljava/lang/String; V | constructor-call void java.lang.StringBuffer.&amp;lt;init&amp;gt; java.lang.String | ALOAD_1 // java.lang.Object s | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.Object | | INVOKEVIRTUAL java.lang.StringBuffer.append Ljava/lang/Object; Ljava/lang/StringBuffer; | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.Object | method-call java.lang.String java.lang.StringBuffer.toString | | INVOKEVIRTUAL java.lang.StringBuffer.toString Ljava/lang/String; | method-call java.lang.String java.lang.StringBuffer.toString | ARETURN method-execution java.lang.String Test4.foo java.lang.Object end String foo Object static final String foo_aroundBody0 Test4, Object : ALOAD_0 ALOAD_1 INVOKEVIRTUAL Test4.foo Ljava/lang/Object; Ljava/lang/String; line 8 ARETURN end static final String foo_aroundBody0 Test4, Object end public class Test4 Exception thrown from AspectJ 1.1beta4 This might be logged as a bug already -- see the bug database at http://dev.eclipse.org product: AspectJ, component: compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug To make the bug a priority, please include a test program that can reproduce this exception. org.apache.bcel.generic.ArrayType org.apache.bcel.generic.ArrayType java.lang.ClassCastException: org.apache.bcel.generic.ArrayType at org.aspectj.weaver.bcel.BcelRenderer.visit BcelRenderer.java:152 at org.aspectj.weaver.ast.Instanceof.accept Instanceof.java:29 at org.aspectj.weaver.bcel.BcelRenderer.recur BcelRenderer.java:128 at org.aspectj.weaver.bcel.BcelRenderer.renderTest BcelRenderer.java:94 at org.aspectj.weaver.bcel.BcelAdvice.getTestInstructions BcelAdvice.java:271 at org.aspectj.weaver.bcel.BcelShadow.weaveAroundInline BcelShadow.java:1199 at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:117 at org.aspectj.weaver.Shadow.implementMungers Shadow.java:306 at org.aspectj.weaver.Shadow.implement Shadow.java:278 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:917 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:244 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:35 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:312 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:264 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.weaveAndGenerateClassFiles AjBuildManager.java:351 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager. java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:54 at org.aspectj.tools.ajc.Main.run Main.java:199 at org.aspectj.tools.ajc.Main.runMain Main.java:138 at org.aspectj.tools.ajc.Main.main Main.java:58 1 fail|abort</description>
    <commit commitTime="2003-03-11 06:06:56" id="ae0ef30e2a9c8a4ef7ff59219b15b5109c956d22"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelRenderer.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/Utility.java</file>
    </fixedFiles>
  </bug>
  <bug id="32399" reportTime="2003-02-20 15:21:00">
    <summary>Incorrect binding of protected marker interfaces</summary>
    <description>The following test case fails to compile in AspectJ 1.1 beta 4, and works correctly in AspectJ 1.0. The only work around is to make interfaces public, which is a serious problem. file TransactionControl.aj default package : import sub.ObserverProtocol; aspect TransactionControl { void begin { CommitObserver.aspectOf .add this ; } static aspect CommitObserver extends ObserverProtocol { declare parents: TransactionControl implements Observer; } } file sub/ObserverProtocol.aj package sub; public abstract aspect ObserverProtocol { protected interface Observer { } public void add Observer o {} } Sample compilation: C:\devel&amp;gt;ajc sub\ObserverProtocol.aj TransactionControl.aj can't bind type name 'Observer' C:/devel/TransactionControl.aj:5: The method add sub.ObserverProtocol.Observer in the type sub.ObserverProtocol is not applicable for the arguments Transactio nControl CommitObserver.aspectOf .add this ; ^^^ 2 errors</description>
    <commit commitTime="2003-03-06 22:12:00" id="0a175d2d0330eb9843ad17c917bb2434faab59e7"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseScope.java</file>
      <file>tests/new/EachObjectInDeepPackage.java</file>
    </fixedFiles>
  </bug>
  <bug id="32421" reportTime="2003-02-20 17:33:00">
    <summary>can't resolve nested public interfaces</summary>
    <description>This may be caused by the bug as 32399 file TransactionTest.java: import sub.ExecutionMonitor; public class TransactionTest { static Transaction theTransaction; private void assertCommitted { theTransaction.getCount "method-execution", "commit" ; } static aspect MonitorTest { declare parents: Transaction implements ExecutionMonitor.MonitoredItem; } } class Transaction { } file sub/ExecutionMonitor.aj: package sub; public aspect ExecutionMonitor { public interface MonitoredItem { int getCount String eventType, String eventName ; } public int MonitoredItem.getCount String eventType, String eventName { return 0; } } sample compilation: C:\devel&amp;gt;ajc -1.4 TransactionTest.java sub\ExecutionMonitor.aj can't bind type name 'ExecutionMonitor$MonitoredItem' C:/devel/TransactionTest.java:7: The method getCount java.lang.String, java.lang .String is undefined for the type Transaction theTransaction.getCount "method-execution", "commit" ; ^^^^^^^^ 2 errors</description>
    <commit commitTime="2003-03-06 22:12:00" id="0a175d2d0330eb9843ad17c917bb2434faab59e7"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseScope.java</file>
      <file>tests/new/EachObjectInDeepPackage.java</file>
    </fixedFiles>
  </bug>
  <bug id="32463" reportTime="2003-02-21 05:59:00">
    <summary>ajc reports error when encountering static declaration of nested classes</summary>
    <description>Version: AspectJ Compiler 1.1beta4 The ajc compiler issues a spurious error message and exits with a negative error code when weaving code containing static declaration of a nested class. The compiler seem to write the classfiles correctly but the negative exit status causes problems when e.g. using the AjcCompilerAdapter in ant. To reproduce: 1 Extract the following two files into an empty directory: // File: A.aj: aspect A { pointcut withinTest : within Test ; pointcut callToHandleOrder : withinTest &amp;amp;&amp;amp; call * handleOrder .. ; Object around : callToHandleOrder { return "DUMMY inserted by ASPECT" ; } } // End of File A.aj // File : Test.java public class Test { // Commenting out the static declaration makes everything work OK static { class StaticNestedClass { } } public static void main String[] args { System.out.println new Test .handleOrder "test" ; } private String handleOrder String t { return t; } } // End of Test.java 2 Compile the files ajc -sourceroots . -verbose Output: ----- compiling c:/aspectj1.1/doc/examples/bug/./A.aj compiling c:/aspectj1.1/doc/examples/bug/./Test.java weaving might need to weave [UnwovenClassFile null, Test$1$StaticNestedClass , UnwovenClassFile null, A , UnwovenClassFile null, Test ] world=true wrote class file: c:\aspectj1.1\doc\examples\bug\A.class can't find type Test$1 wrote class file: c:\aspectj1.1\doc\examples\bug\Test$1$StaticNestedClass.class wrote class file: c:\aspectj1.1\doc\examples\bug\Test.class 1 error ------</description>
    <commit commitTime="2003-03-06 00:24:39" id="d1e5c0a57c5da220b8f7357550db84f1009dbe2e"/>
    <fixedFiles>
      <file>weaver/testsrc/org/aspectj/weaver/TypeXTestCase.java</file>
      <file>weaver/src/org/aspectj/weaver/TypeX.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedTypeX.java</file>
      <file>weaver/src/org/aspectj/weaver/NameMangler.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="33011" reportTime="2003-02-25 11:43:00">
    <summary>Start and End lines incorrectly generated for StructureNodes</summary>
    <description>The start line and end lines in the SourceLocation for ProgramElementNodes are broken: for example, for source files the start line is always "1" and so is the end line.</description>
    <commit commitTime="2003-02-25 17:04:13" id="c1a978da9f01913600c73fd0f60e51f901ea7655"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/StructureModel.java</file>
    </fixedFiles>
  </bug>
  <bug id="33474" reportTime="2003-02-27 14:03:00">
    <summary>bad source locations for declare error/warning</summary>
    <description>[Submitted on behalf of Adrian Colyer and Jim Hugunin] &amp;gt; ...- there's one thing in the weaver I &amp;gt; couldn't solve tonight Jim/Mik : org.aspectj.weaver.Checker.match .. is &amp;gt; called when checking whether a declare warning /error pointcut matches a &amp;gt; given shadow. If t does, a Message is created whose sourceLocation is &amp;gt; shadow.getSourceLocation . The implementation of getSourceLocation in &amp;gt; BcelShadow returns the unqualified file name rather than the qualified one &amp;gt; e.g "Point.java" rather than &amp;gt; "org.eclipse.ajdt.demo/src/figures/Point.java" which means that later on &amp;gt; eclipse can't find the resource the marker is supposed to be attached to. &amp;gt; I've patched it in AJDT by scanning the project for the first resource &amp;gt; that &amp;gt; ends in the given name and using that, which we will get away with for &amp;gt; many &amp;gt; projects. I couldn't find an easy way to fix it properly in the weaver. This is an issue with the weaver operating on bytecode, where the only information about the actual source file is the FILENAME attribute in the .class file which just contains the final unqualified portion of the name. I can think of three solutions to this: 1. Change the code for getSourceLocation to use the current package in order to produce a more complete filename, i.e. figures/Point.java instead of just Point.java. This should be a relatively straightforward and localized change and is the only solution that would help the case of weaving into .jar files. 2. Pass some additional information from the eclipse compiler phase to the bytecode weaver to let it know the actual source locations of files. This could give you the actual source file, but is a crosscutting change that would affect a lot of the system. 3. Handle declare error and warning in a special pass that performs weaving on the AST rather than the .class file. This is the only solution that will give you correct column information which can make these messages easier to understand, but it is a LOT of work. I'd recommend that you consider doing #1 in order to improve the quality of your hack in the short-term. I plan to look at #2 as part of a final clean-up of the incremental compilation code before the candidate1 release. I think that ultimately #3 is the right answer, but it would be a very large amount of work and could only happen post-1.1.</description>
    <commit commitTime="2003-03-27 15:43:01" id="989aaf7855fdb2e4f176d6e7b32a3bd0131ee515"/>
    <fixedFiles>
      <file>ajde/testsrc/org/aspectj/ajde/AjdeTests.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/AjdeTestCase.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/NullIdeTaskListManager.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/NullIdeManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="33635" reportTime="2003-03-02 20:01:00">
    <summary>Negation of if pointcut does not work</summary>
    <description>In "!if expression " the negation part is ignored. I am using beta4. How to reproduce: public class Test { public static void main String args[] { } } aspect NotIfBugAspect { before : execution * main .. &amp;amp;&amp;amp; !if true { System.out.println "NotIfBugAspect message" ; } } &amp;gt; ajc *.java &amp;gt; java Test NotIfBugAspect message If I change the pointcut in before advice to move negation inside if , everything works fine: aspect NotIfBugAspect { before : execution * main .. &amp;amp;&amp;amp; if !true { System.out.println "NotIfBugAspect message" ; } } &amp;gt; ajc *.java &amp;gt; java Test &amp;lt;no output&amp;gt;</description>
    <commit commitTime="2003-03-05 21:46:49" id="cb775240056309c20aac308be5ab2abd9696be84"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/IfPointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="34206" reportTime="2003-03-08 14:23:00">
    <summary>before :execution new .. does not throw NoAspectBoundException</summary>
    <description>Aspectj Compiler 1.1beta4 In the "Aspect Instantiation and Advice" section in README-11.html, it is said that an org.aspectj.lang.NoAspectBoundException will be thrown if a before advice captures all constructors executions including the aspect constructor . aspect Watchcall { pointcut myConstructor : execution new .. ; before : myConstructor { System.err.println "Entering Constructor" ; } } But adding a similar after advice to the same aspect will throw an obscure NoClassDefError instead, which gives no clues about what the error is.</description>
    <commit commitTime="2004-01-14 15:24:06" id="5834de97836ebcc056415736c17c46e8b1dfaf5a"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectClinit.java</file>
      <file>weaver/src/org/aspectj/weaver/AjcMemberMaker.java</file>
      <file>runtime/src/org/aspectj/lang/NoAspectBoundException.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java</file>
      <file>runtime/testsrc/RuntimeModuleTests.java</file>
      <file>weaver/src/org/aspectj/weaver/NameMangler.java</file>
      <file>tests/new/ConstructorExecInitFails.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="34820" reportTime="2003-03-12 10:36:00">
    <summary>ajc -aspectpath fails with NPE for cflow pointcuts</summary>
    <description>ajc version: AspectJ Compiler DEVELOPMENT CVS build 20030311 20:00 GMT+1 This is probably a regression bug since it does not appear in ajc 1.1b4 When using the ajc -aspectpath option, the compiler crashes with a NPE. This does not occur when compiling without the -aspectpath option. To reproduce: Extract the two files to en empty directory: // File: A.aj aspect A { pointcut withinTest : within Test ; pointcut callToHandleOrder : cflow withinTest &amp;amp;&amp;amp; call * *.handleOrder .. ; Object around : callToHandleOrder { return "test"; } // End of A.aj // File: Test.java public class Test { public static void main String[] args { System.out.println new Test .handleOrder "test" ; } private String handleOrder String t { return t; } } // End of Test.java 2. Verify that the "standard" compile option works: &amp;gt; ajc -sourceroots . No errors are generated 3.a Now try the -aspectpath options. I.e first put the A.aj in an aspect "read- only" jar and then weave in the jar. &amp;gt; ajc A.aj -outjar tmp.jar C:\aspectj1.1\doc\examples\bug\A.aj:5 no match for this type name: Test [Xlint:invalidAbsoluteTypeName] 1 warning &amp;gt; ajc Test.java -aspectpath tmp.jar java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeEclipseTypeMunger EclipseFactory.java:163 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishTypeMungers EclipseFactory.java:147 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindin gs AjLookupEnvironment.java:91 at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:312 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:326 at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile AbstractImageBuilder.java:232 at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile AbstractImageBuilder.java:171 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$BatchBuilder.run AjBuildManager.java:655 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:139 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:55 at org.aspectj.tools.ajc.Main.run Main.java:216 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 C:\aspectj1.1\doc\examples\bug\Test.java:0 Internal compiler error java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeEclipseTypeMunger EclipseFactory.java:163 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishTypeMungers EclipseFactory.java:147 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindin gs AjLookupEnvironment.java:91 at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:312 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:326 at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile AbstractImageBuilder.java:232 at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile AbstractImageBuilder.java:171 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$BatchBuilder.run AjBuildManager.java:655 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:139 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:55 at org.aspectj.tools.ajc.Main.run Main.java:216 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 !! no source information available !! Exception thrown from AspectJ DEVELOPMENT This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. null java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeEclipseTypeMunger EclipseFactory.java:163 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishTypeMungers EclipseFactory.java:147 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindin gs AjLookupEnvironment.java:91 at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:312 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:326 at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile AbstractImageBuilder.java:232 at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile AbstractImageBuilder.java:171 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$BatchBuilder.run AjBuildManager.java:655 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:139 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:55 at org.aspectj.tools.ajc.Main.run Main.java:216 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 1 fail|abort, 1 error Signal 127 ----------------------- Possible fix: The NullPointerException happens because concret.getMunger returns null just before calling EclipseTypeMunger.supportsKind. The following guard in the EclipseFactory.makeEclipseTypeMunger fixes the problem: public EclipseTypeMunger makeEclipseTypeMunger ConcreteTypeMunger concrete { if concrete instanceof EclipseTypeMunger return EclipseTypeMunger concrete; if concrete.getMunger == null { System.err.println "TODO per.hustad :" + this.getClass .getName + " concrete.getMunger returned null for " + concrete + " - will return null now!" ; return null; } if EclipseTypeMunger.supportsKind concrete.getMunger .getKind { return new EclipseTypeMunger this, concrete.getMunger , concrete.getAspectType , null ; } else { return null; } }</description>
    <commit commitTime="2003-03-12 19:52:13" id="db37189cebba13a30b7ccdabe70565caa7506c00"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseAdvice.java</file>
    </fixedFiles>
  </bug>
  <bug id="34858" reportTime="2003-03-12 14:50:00">
    <summary>Weaver crash</summary>
    <description>this test file Test.java crashes the weaver: public class Test { static aspect MockProcessing { pointcut testFlow final Thread thread : cflow execution void run &amp;amp;&amp;amp; this thread &amp;amp;&amp;amp; within Thread ; // the within is an optimization Object around : call * DummyConfiguration.createRootApplicationModule .. &amp;amp;&amp;amp; testFlow Thread { return null; } } } class Bar { void foo { DummyConfiguration.createRootApplicationModule ; } } class DummyConfiguration { static Object createRootApplicationModule { return null; } } prompt&amp;gt;ajc -d 11bin -1.4 Test.java Exception thrown from AspectJ 1.1rc1 This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. 0 0 java.lang.ArrayIndexOutOfBoundsException: 0 at org.aspectj.weaver.IntMap.get IntMap.java:109 at org.aspectj.weaver.patterns.CflowPointcut.concretize1 CflowPointcut.j ava:170 at org.aspectj.weaver.patterns.ReferencePointcut.concretize1 ReferencePo intcut.java:270 at org.aspectj.weaver.patterns.AndPointcut.concretize1 AndPointcut.java: 88 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:127 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:120 at org.aspectj.weaver.Advice.concretize Advice.java:207 at org.aspectj.weaver.CrosscuttingMembers.addShadowMunger CrosscuttingMe mbers.java:78 at org.aspectj.weaver.CrosscuttingMembers.addShadowMungers CrosscuttingM embers.java:72 at org.aspectj.weaver.ResolvedTypeX.collectCrosscuttingMembers ResolvedT ypeX.java:328 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect Crosscut tingMembersSet.java:54 at org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave BcelWeaver.java:16 4 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:214 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.weaveAndGenerat eClassFiles AjBuildManager.java:394 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:149 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:55 at org.aspectj.tools.ajc.Main.run Main.java:216 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 1 fail|abort</description>
    <commit commitTime="2003-03-12 23:07:08" id="7746fcb7e977c7a91bd70081a2197a999ec18ad3"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="34925" reportTime="2003-03-13 11:58:00">
    <summary>compiler crash on yesterday's rc1 build</summary>
    <description>These test files crash the compiler in fact if you just compile ConvertToUnchecked it crashes it : ConvertToUnchecked.java: import java.io.IOException; // example 3 aspect ConvertToUnchecked { // make all exceptions in an application unchecked; "soft" //declare soft: Exception &amp;amp;&amp;amp; !RuntimeException : within com.foo.app..* ; // convert IOExceptions in a package to PersistenceException pointcut module : within test.* ; // within com.foo.framework.persistence.* ; // convert exceptions // within test.* would work to allow an immediate catch, except for // the last statement in a try block // however, I suspect that would also generate inefficient code // even this might be inefficient: it needs to wrap every method body in a // try ... catch block after throwing IOException e : within test.* { throw new PersistenceException e ; } declare soft: IOException : module ; } // tested by: test.ConvertToUnchecked ---- PersistenceException.java public class PersistenceException extends Exception { public PersistenceException Throwable cause { super cause ; } } --- sample run: C:\ron\devel\articles\errorHandling&amp;gt;ajc -1.4 ConvertToUnchecked.java Persistence Exception.java java.lang.RuntimeException: unimplemented: throw new PersistenceException e at org.aspectj.ajdt.internal.compiler.lookup.EclipseShadow.makeShadow Ec lipseShadow.java:148 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeShadow E clipseFactory.java:292 at org.aspectj.ajdt.internal.compiler.problem.AjProblemReporter.unhandle dException AjProblemReporter.java:67 at org.eclipse.jdt.internal.compiler.flow.FlowContext.checkExceptionHand lers FlowContext.java:249 at org.eclipse.jdt.internal.compiler.ast.ThrowStatement.analyseCode Thro wStatement.java:35 at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.analy seCode AbstractMethodDeclaration.java:106 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode Typ eDeclaration.java:445 at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.anal yseCode CompilationUnitDeclaration.java:76 at org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:539 at org.aspectj.ajdt.internal.compiler.AjCompiler.process AjCompiler.java :65 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:340 at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile Ab stractImageBuilder.java:232 at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile Ab stractImageBuilder.java:171 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$BatchBuilder.ru n AjBuildManager.java:656 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:139 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:55 at org.aspectj.tools.ajc.Main.run Main.java:216 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 C:\ron\devel\articles\errorHandling\ConvertToUnchecked.java:0 Internal compiler error java.lang.RuntimeException: unimplemented: throw new PersistenceException e at org.aspectj.ajdt.internal.compiler.lookup.EclipseShadow.makeShadow Ec lipseShadow.java:148 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeShadow E clipseFactory.java:292 at org.aspectj.ajdt.internal.compiler.problem.AjProblemReporter.unhandle dException AjProblemReporter.java:67 at org.eclipse.jdt.internal.compiler.flow.FlowContext.checkExceptionHand lers FlowContext.java:249 at org.eclipse.jdt.internal.compiler.ast.ThrowStatement.analyseCode Thro wStatement.java:35 at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.analy seCode AbstractMethodDeclaration.java:106 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode Typ eDeclaration.java:445 at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.anal yseCode CompilationUnitDeclaration.java:76 at org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:539 at org.aspectj.ajdt.internal.compiler.AjCompiler.process AjCompiler.java :65 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:340 at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile Ab stractImageBuilder.java:232 at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile Ab stractImageBuilder.java:171 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$BatchBuilder.ru n AjBuildManager.java:656 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:139 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:55 at org.aspectj.tools.ajc.Main.run Main.java:216 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 !! no source information available !! ABORT Exception thrown from AspectJ 1.1rc1 This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. unimplemented: throw new PersistenceException e unimplemented: throw new PersistenceException e java.lang.RuntimeException: unimplemented: throw new PersistenceException e at org.aspectj.ajdt.internal.compiler.lookup.EclipseShadow.makeShadow Ec lipseShadow.java:148 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeShadow E clipseFactory.java:292 at org.aspectj.ajdt.internal.compiler.problem.AjProblemReporter.unhandle dException AjProblemReporter.java:67 at org.eclipse.jdt.internal.compiler.flow.FlowContext.checkExceptionHand lers FlowContext.java:249 at org.eclipse.jdt.internal.compiler.ast.ThrowStatement.analyseCode Thro wStatement.java:35 at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.analy seCode AbstractMethodDeclaration.java:106 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode Typ eDeclaration.java:445 at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.anal yseCode CompilationUnitDeclaration.java:76 at org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:539 at org.aspectj.ajdt.internal.compiler.AjCompiler.process AjCompiler.java :65 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:340 at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile Ab stractImageBuilder.java:232 at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile Ab stractImageBuilder.java:171 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$BatchBuilder.ru n AjBuildManager.java:656 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:139 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:55 at org.aspectj.tools.ajc.Main.run Main.java:216 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 1 fail|abort, 1 error</description>
    <commit commitTime="2003-03-13 19:16:53" id="56cc4f27afaf591f8cebb2450513cc6eb7d51299"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="34951" reportTime="2003-03-13 14:38:00">
    <summary>NPE compiling without aspectjrt.jar</summary>
    <description>Compiling spacewar without specifying aspectjrt.jar on the classpath causes a NPE. Expected an error message "aspectjrt.jar required". Steps to reproduce 1 install latest 2 cd doc/examples 3 java -jar ../../lib/aspectjtools.jar -verbose @spacewar/debug.lst RESULT:NPE in attached log</description>
    <commit commitTime="2003-04-27 23:29:27" id="f236927770b4c1029e4d108c3991870609555dfb"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BasicCommandTestCase.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="35593" reportTime="2003-03-24 14:03:00">
    <summary>Problem with priviliged aspects</summary>
    <description>I am writing an aspect with a pointcut before execution of a method in a non-public class in a different package. When I compile with aspectj1.1rc1 I get the following error message: &amp;gt; &amp;gt; TraceAspect.java:15 The type edu.gatech.Argument is not visible for the &amp;gt; argument t of the method ajc$before$TraceAspect$1b1 &amp;gt; before edu.gatech.Argument t : execution * * edu.gatech.Argument &amp;amp;&amp;amp; &amp;gt; args t { &amp;gt; ^^^^^^^^^^^^^^^^^^^ &amp;gt; &amp;gt; 1 error Source code used: ----------- TraceAspect.java import edu.gatech.*; privileged aspect TraceAspect { pointcut myTrace : within TraceAspect ; pointcut javaCode : within java..* || call * java..* .. ; // a point cut that matches any static method call. pointcut methodExec : call * * .. &amp;amp;&amp;amp; !javaCode &amp;amp;&amp;amp; !myTrace ; before edu.gatech.Argument t : execution * * edu.gatech.Argument &amp;amp;&amp;amp; args t { } } ----------- source code edu/gatech/Main.java package edu.gatech; class Argument { public int a; public String b; }; public class Main { public static void foo Argument t { } public static void main String []args { Argument t = new Argument ; foo t ; } } ---------------</description>
    <commit commitTime="2003-04-10 18:39:26" id="72b3c0a4539f77d1f287f790c1318d682613bdb5"/>
    <fixedFiles>
      <file>tests/new/privilegedAspects/driver/PrivilegedAspect.java</file>
    </fixedFiles>
  </bug>
  <bug id="36046" reportTime="2003-04-03 18:21:00">
    <summary>inter-type declaration bug with abstract classes</summary>
    <description>This error occurs when you do an inter-type declaration on an interface, use declare parents to make an abstract base class implement it, and then try to use the declared method , it fails. If you make the base class concrete, then this doesn't fail. The following code demonstrates the error. If you run java Driver you get: java.lang.AbstractMethodError: Derived.getExecutions Ljava/lang/String; I at Driver.main Driver.java:23 Exception in thread "main" public class Driver { public static void main String args[] { Derived generator = new Derived ; System.out.println generator.getExecutions "processEvents" ; } static aspect MonitorBase { declare parents: Base implements ExecutionMonitor.MonitoredItem; } } class Derived extends Base { public String getName { return null; } } abstract class Base { abstract public String getName ; } aspect ExecutionMonitor { /** marker interface to indicate the execution monitor should track calls and executions on this class. */ public interface MonitoredItem { int getExecutions String methodName ; } /** a Map of events to mutable integers */ public int MonitoredItem.getExecutions String methodName { return 0; } }</description>
    <commit commitTime="2003-04-10 22:20:14" id="808bae83b3d5f37de4b39a2380db2782919a5f8a"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="36071" reportTime="2003-04-04 09:58:00">
    <summary>ajc 1.1 rc1 should copy resources similar to java compiler</summary>
    <description>The ajc compiler does not copy resources non-java/aspect files from the source tree to the output. This means that we have to compile first with the aspectj nature disabled, then compile with aspects.</description>
    <commit commitTime="2003-08-06 21:17:57" id="5edccbfaeb8bb4dc5b34d553267365ae3c7eda41"/>
    <fixedFiles>
      <file>ajde/testsrc/org/aspectj/ajde/AjdeTests.java</file>
      <file>ajde/src/org/aspectj/ajde/ProjectPropertiesAdapter.java</file>
      <file>ajbrowser/src/org/aspectj/tools/ajbrowser/BrowserProperties.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/NullIdeProperties.java</file>
      <file>ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java</file>
      <file>ajbrowser/src/org/aspectj/tools/ajbrowser/CompilerMessagesPanel.java</file>
      <file>ajde/testdata/examples/coverage/ModelCoverage.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/CompilerMessagesCellRenderer.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/NullIdeManager.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/CompilerMessage.java</file>
    </fixedFiles>
  </bug>
  <bug id="36234" reportTime="2003-04-08 14:04:00">
    <summary>out of memory error when compiling</summary>
    <description>Getting an out of memory error when compiling with Ajc 1.1 RC1. I know this is not very descriptive, but maybe you can point me into a direction of getting more output. here some additional information though: Code base is medium size about 1500 classfiles I removed all my aspects and still receive the error. Running it from the command line: ajc -classpath whateveritis -sourceroots whateveritis -d whateveritis</description>
    <commit commitTime="2004-01-15 11:43:14" id="b3b1eecf938fdc9d0bd8f954bc05ec38763299fb"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java</file>
    </fixedFiles>
  </bug>
  <bug id="36329" reportTime="2003-04-10 04:08:00">
    <summary>The compiler crashes when using aspect libraries created without using -noweave</summary>
    <description>The compiler crashes when I don't use -noweave to create aspect libraries. Works fine with -noweave. Note, however, that iajc does not accept "noweave" attribute nor "Xnoweave" filing this part as a separate bug . F:\aspectj\bugs\1.1\rc1\noweave&amp;gt;ajc -outjar tracing.jar TraceAspect.java F:\aspectj\bugs\1.1\rc1\noweave&amp;gt;ajc -outjar test.jar Test.java F:\aspectj\bugs\1.1\rc1\noweave&amp;gt;ajc -injars test.jar;tracing.jar trouble in: public class TraceAspect extends java.lang.Object: private java.util.logging.Logger _logger public static final TraceAspect ajc$perSingletonInstance static void &amp;lt;clinit&amp;gt; : INVOKESTATIC TraceAspect.ajc$postClinit V line 4 RETURN end static void &amp;lt;clinit&amp;gt; public void &amp;lt;init&amp;gt; : ALOAD_0 // TraceAspect this line 4 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V ALOAD_0 // TraceAspect this line 5 LDC "trace" INVOKESTATIC java.util.logging.Logger.getLogger Ljava/lang/ String; Ljava/util/logging/Logger; PUTFIELD TraceAspect._logger Ljava/util/logging/Logger; RETURN line 4 end public void &amp;lt;init&amp;gt; public void ajc$before$TraceAspect$ef org.aspectj.lang.JoinPoint$StaticPart AdviceAttribute before, traceMethods , 4, 239 : ALOAD_1 // org.aspectj.lang.JoinPoint$StaticPart thisJoi nPointStaticPart line 11 INVOKEINTERFACE org.aspectj.lang.JoinPoint$StaticPart.getSig nature Lorg/aspectj/lang/Signature; ASTORE_2 ALOAD_0 // TraceAspect this line 12 GETFIELD TraceAspect._logger Ljava/util/logging/Logger; GETSTATIC java.util.logging.Level.INFO Ljava/util/logging/Le vel; ALOAD_2 // org.aspectj.lang.Signature sig INVOKEINTERFACE org.aspectj.lang.Signature.getDeclaringType Ljava/lang/Class; INVOKEVIRTUAL java.lang.Class.getName Ljava/lang/String; ALOAD_2 // org.aspectj.lang.Signature sig line 13 INVOKEINTERFACE org.aspectj.lang.Signature.getName Ljava/l ang/String; LDC "Entering" INVOKEVIRTUAL java.util.logging.Logger.logp Ljava/util/logg ing/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String; V line 12 RETURN line 14 end public void ajc$before$TraceAspect$ef org.aspectj.lang.JoinPoint$StaticPar t public static TraceAspect aspectOf org.aspectj.weaver.AjAttribute$AjSynth etic@bdb503 : GETSTATIC TraceAspect.ajc$perSingletonInstance LTraceAspect; DUP IFNULL L0 ARETURN L0: NEW org.aspectj.lang.NoAspectBoundException DUP INVOKESPECIAL org.aspectj.lang.NoAspectBoundException.&amp;lt;init&amp;gt; V ATHROW end public static TraceAspect aspectOf public static boolean hasAspect org.aspectj.weaver.AjAttribute$AjSyntheti c@119dc16 : GETSTATIC TraceAspect.ajc$perSingletonInstance LTraceAspect; IFNULL L0 ICONST_1 IRETURN L0: ICONST_0 IRETURN end public static boolean hasAspect private static void ajc$postClinit org.aspectj.weaver.AjAttribute$AjSynth etic@c05d3b : NEW TraceAspect DUP INVOKESPECIAL TraceAspect.&amp;lt;init&amp;gt; V PUTSTATIC TraceAspect.ajc$perSingletonInstance LTraceAspect; RETURN end private static void ajc$postClinit end public class TraceAspect ABORT Exception thrown from AspectJ 1.1rc1 This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. already woven: public class TraceAspect already woven: public class TraceAspect java.lang.RuntimeException: already woven: public class TraceAspect at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:23 9 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:76 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:321 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:302 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:254 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.weaveAndGenerat eClassFiles AjBuildManager.java:394 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:149 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:55 at org.aspectj.tools.ajc.Main.run Main.java:216 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 1 fail|abort =================== Now with -noweave ================== F:\aspectj\bugs\1.1\rc1\noweave&amp;gt;ajc -outjar tracing.jar -noweave TraceAspect.java F:\aspectj\bugs\1.1\rc1\noweave&amp;gt;ajc -outjar test.jar Test.java F:\aspectj\bugs\1.1\rc1\noweave&amp;gt;ajc -injars test.jar;tracing.jar F:\aspectj\bugs\1.1\rc1\noweave&amp;gt;java Test Apr 10, 2003 12:52:26 AM Test main INFO: Entering === TraceAspect.java === import java.util.logging.*; import org.aspectj.lang.*; public aspect TraceAspect { private Logger _logger = Logger.getLogger "trace" ; pointcut traceMethods : execution * *.* .. &amp;amp;&amp;amp; !within TraceAspect ; before : traceMethods { Signature sig = thisJoinPointStaticPart.getSignature ; _logger.logp Level.INFO, sig.getDeclaringType .getName , sig.getName , "Entering" ; } } === Test.java === public class Test { public static void main String[] args { } }</description>
    <commit commitTime="2003-04-27 23:31:06" id="7d144321837cac05cdbe2a30323d670dfcc9809a"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/TypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="36430" reportTime="2003-04-13 03:35:00">
    <summary>Support -Xreweavable option</summary>
    <description>Adding a RFE as Wes suggested... Wes' reply: There are some issues with the -Xnoweave option that we won't have the time to carefully resolve for 1.1, even though, as you suggest, there may be times when it would be useful. The workaround at present is to weave tracing into transactions when the transactions jar is compiled. e.g., -- do the build ajc @tracing.lst -outjar tracing.jar ajc @transactions.lst -aspectpath tracing.jar \ -outjar transactions.jar ajc @app.lst -aspectpath "tracing.jar;transactions.jar" \ -outjar app.jar -- build the jar mkdir final cd final jar xf ../tracing.jar jar xf ../transactions.jar jar xf ../app.jar # fixup manifest, etc? jar cf ../final.jar * What if you don't have the sources for the transactions.jar? This is a case of getting binary transactions aspects from a vendor who won't provide source and wanting to weave your tracing into it. I would hope that by the time that problem becomes prevalent, we will have a solution for it. If you'd like to keep this on the radar, please submit this discussion as an RFE for the compiler at http://dev.eclipse.org/bugs/enter_bug.cgi?product=AspectJ Thank you - Wes P.S. - Personally, I think this case &amp;gt; &amp;gt; ajc -injars app.jar;transaction.jar &amp;gt; -aspectpath transaction.jar;tracing.jar doesn't make sense. Things on the aspectpath are defined, whereas things in injars will be woven into and redefined. It's not clear from this command which variant the user expects when refering to a type in transactions.jar. Ramnivas Laddad wrote: &amp;gt; &amp;gt; Hello, &amp;gt; &amp;gt; I think I have a use case that cannot be implemented &amp;gt; at least elegantly, anyway without noweave/XnoWeave &amp;gt; option and thus I request to make it a regular option &amp;gt; instead of experimental -X . &amp;gt; &amp;gt; Basically, I want to have my tracing.jar &amp;gt; contains tracing aspect weave into transaction.jar &amp;gt; contains abstract transaction mangement aspects, &amp;gt; concrete policy enforcement aspects, and supporting &amp;gt; classes . Assume app.jar contain business classes &amp;gt; and interfaces. Each of the jar is created using &amp;gt; -ourjar but not -noweave or -XnoWeave . &amp;gt; &amp;gt; To build the final system I issue the following &amp;gt; command: &amp;gt; &amp;gt; ajc -injars app.jar;transaction.jar &amp;gt; -aspectpath transaction.jar;tracing.jar &amp;gt; &amp;gt; Now compiler gives me error due to multiply woven &amp;gt; classes and aspects in transaction.jar. &amp;gt; &amp;gt; Everything works fine if I create the original jar &amp;gt; files using -noweave. &amp;gt; &amp;gt; I could workaround by creating multiple jars, but &amp;gt; I hink -noweave is the right approach as &amp;gt; I really don't want to ship multiple jars that are &amp;gt; needed to implement a single concern and expect the &amp;gt; users to correctly specify jar files in -injars &amp;gt; and -aspectpath. &amp;gt; &amp;gt; -Ramnivas</description>
    <commit commitTime="2004-02-24 13:43:56" id="16a0abd70e5fe2538c32994de05f52b6bf939ef5"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java</file>
      <file>testing/src/org/aspectj/testing/harness/bridge/CompilerRun.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/AjdeTests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelCflowStackFieldAdder.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>weaver/src/org/aspectj/weaver/Shadow.java</file>
      <file>weaver/src/org/aspectj/weaver/Advice.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</file>
      <file>weaver/src/org/aspectj/weaver/WeaverStateInfo.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
      <file>weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java</file>
      <file>weaver/src/org/aspectj/weaver/CrosscuttingMembers.java</file>
    </fixedFiles>
  </bug>
  <bug id="36564" reportTime="2003-04-16 08:42:00">
    <summary>Internal compiler error</summary>
    <description>Eclipse: 2.1.0, 200302211557 AspectJ: 1.1.1 I get the following internal error when using "thisJoinPoint.getStaticPart " in around advice at a call joinpoit source below . Using just "thisJoinPoint" is fine. java.lang.NullPointerException at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode MessageSend.java:40 at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode MessageSend.java:44 at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.analyseCode AbstractMethodDeclaration.java:106 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode TypeDeclaration.java:445 at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.analyseCode CompilationUnitDeclaration.java:76 at org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:539 at org.aspectj.ajdt.internal.compiler.AjCompiler.process AjCompiler.java:65 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:340 at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile AbstractImageBuilder.java:232 at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile AbstractImageBuilder.java:171 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$BatchBuilder.run AjBuildManager.java:655 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:139 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:92 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:213 Exceptions.java AspectJ Bugs/src/compiler Source: package compiler; import java.io.*; /** * @author websterm * * To change this generated comment go to * Window&amp;gt;Preferences&amp;gt;Java&amp;gt;Code Generation&amp;gt;Code and Comments */ public class Test { public static void main String[] args throws Exception{ FileInputStream in = new FileInputStream "test" ; } } /* * Created on 14-Apr-03 * * To change this generated comment go to * Window&amp;gt;Preferences&amp;gt;Java&amp;gt;Code Generation&amp;gt;Code and Comments */ package compiler; import java.io.*; import org.aspectj.lang.*; /** * @author websterm * * To change this generated comment go to * Window&amp;gt;Preferences&amp;gt;Java&amp;gt;Code Generation&amp;gt;Code and Comments */ public aspect Exceptions { pointcut exceptionMethods : call * java.io.*.* .. throws IOException ; Object around throws IOException : exceptionMethods &amp;amp;&amp;amp; !within Exceptions { Object obj = proceed ; System.out.println thisJoinPoint.getStaticPart ; return obj; } }</description>
    <commit commitTime="2003-04-22 17:55:13" id="0a8dbdeed13fe79ddfd7a291e2b45b50b9a90579"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ThisJoinPointVisitor.java</file>
    </fixedFiles>
  </bug>
  <bug id="36803" reportTime="2003-04-23 12:56:00">
    <summary>BCException thrown by AspectJ 1.1rc1</summary>
    <description>[iajc] expected state: resolved got: concrete [iajc] expected state: resolved got: concrete [iajc] org.aspectj.weaver.BCException: expected state: resolved got: concrete [iajc] at org.aspectj.weaver.patterns.Pointcut.assertState Pointcut.java:236 [iajc] at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:126 [iajc] at org.aspectj.weaver.patterns.CflowPointcut.concretize1 CflowPointcut.java:143 [iajc] at org.aspectj.weaver.patterns.NotPointcut.concretize1 NotPointcut.java:94 [iajc] at org.aspectj.weaver.patterns.AndPointcut.concretize1 AndPointcut.java:88 [iajc] at org.aspectj.weaver.patterns.ReferencePointcut.concretize1 ReferencePointcut.java:270 [iajc] at org.aspectj.weaver.patterns.AndPointcut.concretize1 AndPointcut.java:88 [iajc] at org.aspectj.weaver.patterns.ReferencePointcut.concretize1 ReferencePointcut.java:270 [iajc] at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:127 [iajc] at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:120 [iajc] at org.aspectj.weaver.Advice.concretize Advice.java:207 [iajc] at org.aspectj.weaver.CrosscuttingMembers.addShadowMunger CrosscuttingMembers.java:78 [iajc] at org.aspectj.weaver.CrosscuttingMembers.addShadowMungers CrosscuttingMembers.java:72 [iajc] at org.aspectj.weaver.ResolvedTypeX.collectCrosscuttingMembers ResolvedTypeX.java:328 [iajc] at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect CrosscuttingMembersSet.java:54 [iajc] at org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave BcelWeaver.java:164 [iajc] at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:214 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.weaveAndGenerateClassFile s AjBuildManager.java:394 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:149 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:55 [iajc] at org.aspectj.tools.ajc.Main.run Main.java:216 [iajc] at org.aspectj.tools.ajc.Main.runMain Main.java:155 [iajc] at org.aspectj.tools.ant.taskdefs.AjcTask.execute AjcTask.java:646 [iajc] at org.apache.tools.ant.UnknownElement.execute UnknownElement.java:193 [iajc] at org.apache.tools.ant.Task.perform Task.java:341 [iajc] at org.apache.tools.ant.Target.execute Target.java:309 [iajc] at org.apache.tools.ant.Target.performTasks Target.java:336 [iajc] at org.apache.tools.ant.Project.executeTarget Project.java:1339 [iajc] at org.apache.tools.ant.Project.executeTargets Project.java:1255 [iajc] at org.apache.tools.ant.Main.runBuild Main.java:609 [iajc] at org.apache.tools.ant.Main.start Main.java:196 [iajc] at org.apache.tools.ant.Main.main Main.java:235</description>
    <commit commitTime="2003-04-25 18:11:33" id="1e502f504f2ad333ad5627d8e9d106315c38ecc0"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/Pointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="37152" reportTime="2003-05-01 17:05:00">
    <summary>java.lang.VerifyError:</summary>
    <description>whenever I want to run one of my testcases, the VM aborts with following exception: Failed to invoke suite :java.lang.VerifyError: class: org/schmidmeier/unittests/cache/TimeCacheTestsWorking, method: runTest signature: V Expecting to find integer on stack Classes:</description>
    <commit commitTime="2003-05-02 06:28:16" id="c5c5f44996f72d79a9c5731fb89e86f6b0ac7be8"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="37576" reportTime="2003-05-13 23:20:00">
    <summary>Ant task switches {boot}classpath entities in 1.1rc2</summary>
    <description>The AjcTask iajc task takes nested bootclasspath entities as classpath and vice-versa.</description>
    <commit commitTime="2003-05-14 03:36:34" id="99f5c14fb0df142b1e25361a7ff3951a5a6d4d5d"/>
    <fixedFiles>
      <file>taskdefs/testsrc/org/aspectj/tools/ant/taskdefs/AjcTaskTest.java</file>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="37739" reportTime="2003-05-15 21:20:00">
    <summary>Unexpected Xlint:unresolvableMember warning with withincode</summary>
    <description>The following code produces an Xlint:unresolvableMember warning: class A { A Class type {} A { this String.class ; } } class B { public void test { } public void test2 { test ; } } aspect C { void around : call void B.test &amp;amp;&amp;amp; withincode void B.test2 { proceed ; } } The warning text is: Warning.java:22 can not resolve this member: void A.&amp;lt;catch&amp;gt; java.lang.ClassNotFoundException [Xlint:unresolvableMember] Line 22 is the line in the aspect that says "withincode". If I comment out the aspect, the warning goes away. Also, if I comment out A's default constructor, it goes away. The "String.class" seems to have something to do with the warning. I can reproduce this with 1.1rc1 and 1.1rc2.</description>
    <commit commitTime="2003-05-19 18:06:04" id="2072ac11448e493e26ab7ff818ce26c6ef33c19c"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="38131" reportTime="2003-05-27 01:46:00">
    <summary>ajc needs -d . option while correctly compiling classes from subpackage</summary>
    <description>I am using 1.1rc1. This is a regression since rc1 and a deviation from javac. I am guessing this may have to do something with change in the underlying Eclipse compiler. Create a class in a subpackage such as: package subpackage; public class Test { public static void main String[] args { System.out.println "Hello" ; } } Then compile using following command: &amp;gt; ajc subpackage\Test.java You will see a directory "subpackage" created under the existing "subpackage" directory. The test.class is then put in subpackage\subpackage directory. This means running java command results in Exception in thread "main" java.lang.NoClassDefFoundError: subpackage/Test Running either of the following command fixes the problem: &amp;gt; ajc -d . subpackage\Test.java or &amp;gt; javac subpackage\Test.java No big deal, really. But it will be nice to have same behavior as javac.</description>
    <commit commitTime="2003-05-27 17:35:13" id="c509c6f751a553cc85d0210a408681f4f3ae05cb"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BasicCommandTestCase.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="38717" reportTime="2003-06-10 12:03:00">
    <summary>".lst" file parsing errors should include sourceline information</summary>
    <description>To check for this bug add an erroneous line to an ".lst" file and compile it with AJDE. The error message returned is project-specific. It should be specific to the ".lst" file in which the error originated i.e. the message needs a SourceLocation .</description>
    <commit commitTime="2003-07-30 17:29:44" id="a26cac9b4c36b9512003ac739d856c8082e5e17a"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/AjdtCommand.java</file>
    </fixedFiles>
  </bug>
  <bug id="38824" reportTime="2003-06-12 05:35:00">
    <summary>Anomalous handling of inter-type declarations to abstract base classes in aspectj 1.1</summary>
    <description>Version 1.1 of aspectj does not handle correctly inter-type declarations to abstract base classes. This appears when the following pattern is present in the code: Suppose there is an interface InterfaceA, another interface InterfaceB and a third interface InterfaceC extending InterfaceA and InterfaceB and containing some method declarations of its own. Suppose also there is an aspect AConcretisingAspect that contains inter-type declarations providing default implementations for all InterfaceC's methods both own and inherited . Now suppose we have a class hierarchy emanating from an abstract class BaseClass, and an aspect BaseClassAspect declaring that BaseClass implements InterfaceC: aspect BaseClassAspect { declare parents: BaseClass implements InterfaceC; } Unfortunately, during compilation iajc complains for each offspring of BaseClass that it does not implement any of the abstract methods of InterfaceA and InterfaceB but not of InterfaceC's own! . This does not happen when BaseClass is not abstract; and it does not occur in version 1.0.6 of aspectj.</description>
    <commit commitTime="2004-01-14 15:51:53" id="0071cb4d0f30fc95f335eb6df73ad09e92d662ed"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedTypeX.java</file>
    </fixedFiles>
  </bug>
  <bug id="39000" reportTime="2003-06-17 04:14:00">
    <summary>[incremental search] broken in I20030611</summary>
    <description>1. In any file, hit Ctrl+J for incremental search, or IS 2. Enter some characters 3. Enter some characters fast The search may or may not work, very often leaving the IS mode and annoyingly entering the characters into the document.</description>
    <commit commitTime="2006-02-15 09:15:34" id="5a10ce0be395d8086b8fdd6dcb29f87c11626e5a"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/LocalVariableTable.java</file>
    </fixedFiles>
  </bug>
  <bug id="39436" reportTime="2003-06-27 14:32:00">
    <summary>[Tasks] No summary shown in status line</summary>
    <description>build I20030625 The old tasks view showed a summary of the number of tasks, errors, warnings and infos in the status line. This is missing in the reworked view.</description>
    <commit commitTime="2003-08-21 16:02:53" id="d90acdcedd63f04b906b0efc5e249e93245f5618"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="39458" reportTime="2003-06-29 23:42:00">
    <summary>Compiler crash in ajc 1.1</summary>
    <description>Here is the compiler output. Source code below. --- C:\devel\test\entAJtutorial\test&amp;gt;ajc Processing.java C:\devel\test\entAJtutorial\test\Processing.java:17 this affected type is not ex posed to the weaver: java.lang.Void needed for privileged access [Xlint:typeNo tExposedToWeaver] java.lang.NullPointerException at org.eclipse.jdt.internal.compiler.lookup.SyntheticAccessMethodBinding .initializeConstructorAccessor SyntheticAccessMethodBinding.java:215 at org.eclipse.jdt.internal.compiler.lookup.SyntheticAccessMethodBinding .&amp;lt;init&amp;gt; SyntheticAccessMethodBinding.java:136 at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.addSynthet icMethod SourceTypeBinding.java:332 at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.manageSynt heticAccessIfNecessary AllocationExpression.java:200 at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.analyseCod e AllocationExpression.java:60 at org.eclipse.jdt.internal.compiler.ast.ReturnStatement.analyseCode Ret urnStatement.java:37 at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode Block.java:41 at org.eclipse.jdt.internal.compiler.ast.IfStatement.analyseCode IfState ment.java:84 at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode M ethodDeclaration.java:70 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyse Code TypeDeclaration.java:639 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode Typ eDeclaration.java:196 at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.anal yseCode CompilationUnitDeclaration.java:78 at org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:541 at org.aspectj.ajdt.internal.compiler.AjCompiler.process AjCompiler.java :65 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:338 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:372 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:133 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:78 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:106 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 C:\devel\test\entAJtutorial\test\Processing.java:0 Internal compiler error java.lang.NullPointerException at org.eclipse.jdt.internal.compiler.lookup.SyntheticAccessMethodBinding .initializeConstructorAccessor SyntheticAccessMethodBinding.java:215 at org.eclipse.jdt.internal.compiler.lookup.SyntheticAccessMethodBinding .&amp;lt;init&amp;gt; SyntheticAccessMethodBinding.java:136 at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.addSynthet icMethod SourceTypeBinding.java:332 at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.manageSynt heticAccessIfNecessary AllocationExpression.java:200 at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.analyseCod e AllocationExpression.java:60 at org.eclipse.jdt.internal.compiler.ast.ReturnStatement.analyseCode Ret urnStatement.java:37 at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode Block.java:41 at org.eclipse.jdt.internal.compiler.ast.IfStatement.analyseCode IfState ment.java:84 at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode M ethodDeclaration.java:70 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyse Code TypeDeclaration.java:639 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode Typ eDeclaration.java:196 at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.anal yseCode CompilationUnitDeclaration.java:78 at org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:541 at org.aspectj.ajdt.internal.compiler.AjCompiler.process AjCompiler.java :65 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:338 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:372 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:133 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:78 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:106 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 !! no source information available !! ABORT Exception thrown from AspectJ 1.1.0 This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. null java.lang.NullPointerException at org.eclipse.jdt.internal.compiler.lookup.SyntheticAccessMethodBinding .initializeConstructorAccessor SyntheticAccessMethodBinding.java:215 at org.eclipse.jdt.internal.compiler.lookup.SyntheticAccessMethodBinding .&amp;lt;init&amp;gt; SyntheticAccessMethodBinding.java:136 at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.addSynthet icMethod SourceTypeBinding.java:332 at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.manageSynt heticAccessIfNecessary AllocationExpression.java:200 at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.analyseCod e AllocationExpression.java:60 at org.eclipse.jdt.internal.compiler.ast.ReturnStatement.analyseCode Ret urnStatement.java:37 at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode Block.java:41 at org.eclipse.jdt.internal.compiler.ast.IfStatement.analyseCode IfState ment.java:84 at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode M ethodDeclaration.java:70 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyse Code TypeDeclaration.java:639 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode Typ eDeclaration.java:196 at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.anal yseCode CompilationUnitDeclaration.java:78 at org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:541 at org.aspectj.ajdt.internal.compiler.AjCompiler.process AjCompiler.java :65 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:338 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:372 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:133 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:78 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:106 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 1 fail|abort, 1 error, 1 warning Processing.java source: --- import org.aspectj.lang.*; import org.aspectj.lang.reflect.*; import java.lang.reflect.Method; public aspect Processing { Object around : call new .. { return proceed ; } Object around : call * * .. { MethodSignature sig = MethodSignature thisJoinPoint.getSignature ; Class returnType = sig.getReturnType ; if returnType == java.lang.Void.TYPE { return new java.lang.Void ; // this works if you make it null } } }</description>
    <commit commitTime="2003-07-02 23:12:18" id="ba41fae6547688e8714d01be27bc81dbbe850f55"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/PrivilegedHandler.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AdviceDeclaration.java</file>
    </fixedFiles>
  </bug>
  <bug id="39460" reportTime="2003-06-30 00:23:00">
    <summary>Missing import crashes compiler</summary>
    <description>Example source Processing.aj : import org.aspectj.lang.*; import org.aspectj.lang.reflect.*; import java.lang.reflect.Method; //import java.lang.reflect.InvocationTargetException; &amp;lt;- crash with this line commented out public aspect Processing { Object around : call * * .. &amp;amp;&amp;amp; !within ImposterProcessing+ { MethodSignature sig = MethodSignature thisJoinPoint.getSignature ; try { Method meth = ImposterProcessing.class.getMethod "dynamicThrow", new Class[] { Throwable.class } ; meth.invoke this, new Object[] { null } ; } catch InvocationTargetException e { throw new RuntimeException "framework error in throwing test exception ", e ; } catch IllegalAccessException e { throw new RuntimeException "framework error in throwing test exception ", e ; } return null; } } --- output: C:\devel\test\entAJtutorial\test&amp;gt;ajc Processing.aj java.lang.NullPointerException at org.eclipse.jdt.internal.compiler.ast.SingleTypeReference.getTypeBind ing SingleTypeReference.java:39 at org.aspectj.ajdt.internal.compiler.ast.AccessForInlineVisitor.endVisi t AccessForInlineVisitor.java:131 at org.eclipse.jdt.internal.compiler.ast.SingleTypeReference.traverse Si ngleTypeReference.java:59 at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.traverse A llocationExpression.java:283 at org.eclipse.jdt.internal.compiler.ast.ThrowStatement.traverse ThrowSt atement.java:76 at org.eclipse.jdt.internal.compiler.ast.Block.traverse Block.java:147 at org.eclipse.jdt.internal.compiler.ast.TryStatement.traverse TryStatem ent.java:528 at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse Meth odDeclaration.java:157 at org.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration.resolveState ments AdviceDeclaration.java:165 at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resol ve AbstractMethodDeclaration.java:317 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDec laration.java:804 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.resolve Aspe ctDeclaration.java:73 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDec laration.java:845 at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.reso lve CompilationUnitDeclaration.java:251 at org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:538 at org.aspectj.ajdt.internal.compiler.AjCompiler.process AjCompiler.java :65 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:338 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:372 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:133 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:78 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:106 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 C:\devel\test\entAJtutorial\test\Processing.aj:0 Internal compiler error java.lang.NullPointerException at org.eclipse.jdt.internal.compiler.ast.SingleTypeReference.getTypeBind ing SingleTypeReference.java:39 at org.aspectj.ajdt.internal.compiler.ast.AccessForInlineVisitor.endVisi t AccessForInlineVisitor.java:131 at org.eclipse.jdt.internal.compiler.ast.SingleTypeReference.traverse Si ngleTypeReference.java:59 at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.traverse A llocationExpression.java:283 at org.eclipse.jdt.internal.compiler.ast.ThrowStatement.traverse ThrowSt atement.java:76 at org.eclipse.jdt.internal.compiler.ast.Block.traverse Block.java:147 at org.eclipse.jdt.internal.compiler.ast.TryStatement.traverse TryStatem ent.java:528 at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse Meth odDeclaration.java:157 at org.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration.resolveState ments AdviceDeclaration.java:165 at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resol ve AbstractMethodDeclaration.java:317 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDec laration.java:804 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.resolve Aspe ctDeclaration.java:73 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDec laration.java:845 at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.reso lve CompilationUnitDeclaration.java:251 at org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:538 at org.aspectj.ajdt.internal.compiler.AjCompiler.process AjCompiler.java :65 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:338 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:372 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:133 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:78 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:106 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 !! no source information available !! C:\devel\test\entAJtutorial\test\Processing.aj:13 InvocationTargetException cann ot be resolved or is not a type } catch InvocationTargetException e { ^^^^^^^^^^^^^^^^^^^^^^^^^ ABORT Exception thrown from AspectJ 1.1.0 This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. null java.lang.NullPointerException at org.eclipse.jdt.internal.compiler.ast.SingleTypeReference.getTypeBind ing SingleTypeReference.java:39 at org.aspectj.ajdt.internal.compiler.ast.AccessForInlineVisitor.endVisi t AccessForInlineVisitor.java:131 at org.eclipse.jdt.internal.compiler.ast.SingleTypeReference.traverse Si ngleTypeReference.java:59 at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.traverse A llocationExpression.java:283 at org.eclipse.jdt.internal.compiler.ast.ThrowStatement.traverse ThrowSt atement.java:76 at org.eclipse.jdt.internal.compiler.ast.Block.traverse Block.java:147 at org.eclipse.jdt.internal.compiler.ast.TryStatement.traverse TryStatem ent.java:528 at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse Meth odDeclaration.java:157 at org.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration.resolveState ments AdviceDeclaration.java:165 at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resol ve AbstractMethodDeclaration.java:317 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDec laration.java:804 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.resolve Aspe ctDeclaration.java:73 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDec laration.java:845 at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.reso lve CompilationUnitDeclaration.java:251 at org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:538 at org.aspectj.ajdt.internal.compiler.AjCompiler.process AjCompiler.java :65 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:338 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:372 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:133 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:78 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:106 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 1 fail|abort, 2 errors</description>
    <commit commitTime="2003-07-02 23:12:18" id="ba41fae6547688e8714d01be27bc81dbbe850f55"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/PrivilegedHandler.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AdviceDeclaration.java</file>
    </fixedFiles>
  </bug>
  <bug id="39470" reportTime="2003-06-30 06:28:00">
    <summary>Repeating a compilation multiple times produces class files that vary in size</summary>
    <description>I've just started using AJC to compile a large project, each time I ran exactly the same compilation, the resultant jar of all my classes was a different size. With JAVAC, the resultant jar was always the same size. I can't quite work out what is causing it - When the size varies, it is always by a multiple of 7 bytes sometimes 7bytes sometimes 14bytes , I thought it was the order I passed them to the compiler, but now I've just seen it vary just by me repeating compilation with exactly the same command line. Here is a java file and an aspect that shows the problem: public class MyClass { public static void main String[] argv { int foo1 = 1; String foo2 = "2"; Integer foo3 = new Integer 3 ; String foo4 = "4"; callfoo foo1,foo2,foo3,foo4 ; } public static void callfoo int input1,String input2, Integer input3,String input4 { bar_1 input1 ; bar_2 input2 ; bar_1 input3.intValue ; bar_2 input4 ; } public static void bar_1 int i {} public static void bar_2 String s {} } And here is an aspect: public aspect Tracer { public pointcut rasScope : within * ; pointcut toStringMethod : execution * *.toString ; pointcut publicMethods : rasScope &amp;amp;&amp;amp; execution public * * .. &amp;amp;&amp;amp; !toStringMethod ; after returning: publicMethods { System.err.println thisJoinPointStaticPart.getSignature .toLongString ; } } 1 Erasing all class files and compiling with 'ajc Tracer.java MyClass.java' results in: MyClass.class 2196 bytes Tracer.class 1856 bytes 2 Now, erasing all class files and compiling with 'ajc Tracer.java MyClass.java' results in: MyClass.class 2196 bytes Tracer.class 1856 bytes So, they are the same size.. 3 Now, erasing all class files and compiling with 'ajc Tracer.java MyClass.java' results in: MyClass.class 2182 bytes Tracer.class 1856 bytes Class file now 14bytes smaller. I have decompiled the resultant classes and the difference appears to be the kind of debug information included in the classes, for example, the method signature from the original source: public static void callfoo int input1,String input2, Integer input3,String input4 { Comes out as this in some cases: public static void callfoo int arg0, String input2, Integer arg2, String arg3 { Or this in other cases: public static void callfoo int arg0, String input2, Integer arg2, String input4 { So, in the second case, the class file remembers the final parameter was called 'input4'. I'm concerned by this behaviour - I need to convince some groups to swap from using JAVAC to using AJC - and I'll have trouble if the size of the resultant binaries appears non-deterministic like this... I hope this isnt a dupe, I had a quick look in the buglist but couldnt find anything... Andy.</description>
    <commit commitTime="2003-08-05 06:19:38" id="137c47f0bdb7b7276ea3000a8d4d035f02b6eb68"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="39626" reportTime="2003-07-04 05:26:00">
    <summary>Compiler error when compiling a buggy class</summary>
    <description>I use AspectJ 1.1 from within eclipse. After some time of developing, I get following stack trace Wrapped in the eclipse gui , when I try to compile a java file with a huge amount of syntax errors, missing variables, and other problems. As soon as I have fixed these issues, I can comnpile normally as ever. Unfortunatly I can not provide any more detailed information because: this errors pops up randomly, disappears when the bug is fixed, I have neither the time nor the permission to create a more accurate sample java.lang.NullPointerException at java.lang.String.&amp;lt;init&amp;gt; String.java:214 at org.aspectj.ajdt.internal.core.builder.AsmBuilder.visit AsmBuilder.java:231 at org.aspectj.ajdt.internal.core.builder.AsmBuilder.visit AsmBuilder.java:259 at org.eclipse.jdt.internal.compiler.ast.AnonymousLocalTypeDeclaration.traverse AnonymousLocalTypeDeclaration.java:138 at org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.traverse QualifiedAllocationExpression.java:342 at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse MessageSend.java:299 at org.eclipse.jdt.internal.compiler.ast.Block.traverse Block.java:147 at org.eclipse.jdt.internal.compiler.ast.ForStatement.traverse ForStatement.java:347 at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse MethodDeclaration.java:157 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse TypeDeclaration.java:946 at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse CompilationUnitDeclaration.java:303 at org.aspectj.ajdt.internal.core.builder.AsmBuilder.internalBuild AsmBuilder.java:169 at org.aspectj.ajdt.internal.core.builder.AsmBuilder.build AsmBuilder.java:66 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishedCompilationUnit EclipseFactory.java:303 at org.aspectj.ajdt.internal.compiler.AjCompiler.process AjCompiler.java:67 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:338 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:372 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:133 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:78 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:164 LoadTest.java CrefoClient/src/com/dcbank/scoring/socketserver kind regards Arno Schmidmeier</description>
    <commit commitTime="2003-07-30 09:10:45" id="78869703a8bf08bfa4e8f19b26dcf877949b0ad2"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmBuilder.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AjdtBuilderTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="39842" reportTime="2003-07-09 19:31:00">
    <summary>allow use of an environment variable to set compiler arguments</summary>
    <description>I'm trying to create a special jsp compilation servlet in Tomcat 4.x that uses the aspectj compiler. I can plug in the compiler adapter, but I don't have control of the ant code they use to invoke the compiler, so I'd like to use an environment variable to do this apparently the only mechanism they do support . I'm doing this so I can pass an aspectpath in to weave aspects into the compiled jsp servlet.</description>
    <commit commitTime="2003-07-26 04:13:54" id="2502ee5106921a6947e3470d08e30a0734a4d805"/>
    <fixedFiles>
      <file>taskdefs/testsrc/org/aspectj/tools/ant/taskdefs/AjcTaskTest.java</file>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="39974" reportTime="2003-07-12 06:00:00">
    <summary>Some strange error when compiling the observer example with JBuilder7 integrated AJDE</summary>
    <description>When I compiled the observer/subject protocol example with JBuilder7 integrated AJDE,there was a strange internal error C:/JBuilder7/extras/aspectj-110/doc/examples/observer/Observer.java:0: Internal compiler error java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.lookup.EclipseWorld.makeResolvedMember Unknown Source at org.aspectj.ajdt.internal.core.builder.AsmBuilder.visit Unknown Source at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse Unknown Source at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse Unknown Source at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse Unknown Source at org.aspectj.ajdt.internal.core.builder.AsmBuilder.internalBuild Unknown Source at org.aspectj.ajdt.internal.core.builder.AsmBuilder.build Unknown Source at org.aspectj.ajdt.internal.compiler.lookup.EclipseWorld.finishedCompilationUnit Unknown Source at org.aspectj.ajdt.internal.compiler.AjCompiler.process Unknown Source at org.eclipse.jdt.internal.compiler.Compiler.compile Unknown Source at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile Unknown Source at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile Unknown Source at org.aspectj.ajdt.internal.core.builder.AjBuildManager$BatchBuilder.run Unknown Source at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild Unknown Source at org.aspectj.ajde.internal.CompilerAdapter.compile Unknown Source at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run Unknown Source I firstly fix it by changing the interface Subject and Observer like this: interface Observer { void update ;} interface Subject { Object getData ; } then it could compile successfully ,however,I immediately got another confusing.The compiler only made Display.java Observer.java Subject.java SubjectObserverProtocol.java and SubjectObserverProtocolImpl.java but ignoring the others.I don't know why,it seems to be a bug. Meanwhile, I use ajc command-line to compile this example ,it can get through without any exceptions.</description>
    <commit commitTime="2003-07-30 09:54:07" id="f5d31bac784ae2c0cccb6a990d1fc54e86df2dd1"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmBuilder.java</file>
    </fixedFiles>
  </bug>
  <bug id="39993" reportTime="2003-07-13 15:02:00">
    <summary>ajc stack trace on declaring hashcode method in aspect</summary>
    <description>From an email sent to the user's list 6/26/2003: ------------------------------------------ ajc 1.1 NPE when an aspect declares hashcode as follows: interface Identifiable { void setId Id id ; Id getId ; } aspect IdentifiableAspect { private Id Identifiable.id = null; public Id Identifiable.getId { return this.id; } public void Identifiable.setId Id id { this.id = id; } public int Identifiable.hashCode { return this.getId == null ? super.hashCode : this.getId .hashCode ; } } A workaround for callers the compiler controls is to replace the declaration with around advice: int around Identifiable i : target i &amp;amp;&amp;amp; call public int hashCode { return i.getId == null ? proceed i : i.getId .hashCode ; }</description>
    <commit commitTime="2003-07-22 20:57:17" id="026b2728aef846823419ebffceb57fe8161e3d15"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeDeclaration.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="40192" reportTime="2003-07-16 06:57:00">
    <summary>build cancel during weaving</summary>
    <description>The build can not be cancelled during the bytecode weaving stage.</description>
    <commit commitTime="2004-03-18 13:00:01" id="183fc23883289ae42854ce9afcf2d3b0d29b7599"/>
    <fixedFiles>
      <file>ajde/testsrc/org/aspectj/ajde/AjdeTests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverAdapter.java</file>
      <file>ajde/src/org/aspectj/ajde/internal/BuildNotifierAdapter.java</file>
      <file>bridge/src/org/aspectj/bridge/IProgressListener.java</file>
    </fixedFiles>
  </bug>
  <bug id="40194" reportTime="2003-07-16 07:00:00">
    <summary>error handling during build config parsing</summary>
    <description>Errors that happen during build configuration parsing are not properly reported to the user in the task list.</description>
    <commit commitTime="2003-07-30 17:20:29" id="89cd34df0631c3da14a80dd899ba23ffae31c327"/>
    <fixedFiles>
      <file>ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java</file>
    </fixedFiles>
  </bug>
  <bug id="40206" reportTime="2003-07-16 08:47:00">
    <summary>need common isAspectJSourceFile method</summary>
    <description>Checks for files ending in ".java" and ".aj" are scattered throughout the code. These should be replaced with a common API call.</description>
    <commit commitTime="2004-07-29 16:35:10" id="2ec27dacd9bb565c01e34c87521c622a20ae435f"/>
    <fixedFiles>
      <file>ajde/src/org/aspectj/ajde/ui/BuildConfigNode.java</file>
      <file>ajde/src/org/aspectj/ajde/internal/LstBuildConfigManager.java</file>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/Ajc10.java</file>
      <file>ajbrowser/src/org/aspectj/tools/ajbrowser/BrowserManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="40257" reportTime="2003-07-16 15:06:00">
    <summary>parsing of "../" paths in LST files is broken</summary>
    <description>Relative paths e.g. "../" are no longer parser properly in AJDE 1.1.0.</description>
    <commit commitTime="2003-08-07 08:10:01" id="acdf688ccc4d8b376141b2c8e28bc5d7b7612e90"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/CompilerMessagesCellRenderer.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/AjdtAjcTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="40380" reportTime="2003-07-17 11:08:00">
    <summary>AspectJ does not honour libraries defined via Project Properties</summary>
    <description>AJDT 1.1.3, Eclipse 2.1 To build a JDK 1.4. program under Eclipse using JDK 1.3 the appropriate build library should be selected in the Project Properties "Java Build Path". However AspectJ continues to use the JDK associated with Eclipse so errors result from using 1.4 APIs. The same will occur running Eclipse under 1.4 and compiling programs for 1.5 Testcase: 1. Run Eclipse under JDK 1.3 2. Create a Java project which uses a 1.4 JDK 3. Write a Java classes that uses 1.4 APIs e.g. public class TestStringBuffer { public static void main String[] args { new StringBuffer "Test" .indexOf "T" ; } } 4. Convert to AspectJ project</description>
    <commit commitTime="2003-07-23 17:23:22" id="d5ea336dac0b484629f6453afcc7b271446732d4"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/AjdtCommand.java</file>
      <file>ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java</file>
    </fixedFiles>
  </bug>
  <bug id="40534" reportTime="2003-07-20 12:16:00">
    <summary>Declare warning/error output - more detail required.</summary>
    <description>At present the declare warning and declare error functionality of the compiler provides no detailed information about what it is in the user code that has led to the generation of the compile-time warning or error. Consider the following test case... public class A { public static void main String[] args { A a = new A ; a.doSomething ; System.out.println "All done" ; } void doSomething { System.out.println "Doing something" ; } } // end of class A public aspect MyAspect { pointcut noDoing : call * *.doSomething .. ; declare warning : noDoing : "Don't do it!"; } When I compile these two files I get the following warning ... c:\src\A.java:16 Don't do it! ..which is great if all I want to know is where the offending code is. But not nearly enough if I want to know what it is on the line that is contravening the policy or policies that I have specified in my aspect. In the above example it would be even more useful if the warning message was something like ... c:\src\A.java:16 Don't do it! : calling method : void A.doSomething For large projects where there is an architectural imperative to reduce or completely remove coupling between certain components declare warning/error would be of far greater use if it could return more detailed info to say *why* not just *where* the desired enforcement rules have been broken.</description>
    <commit commitTime="2003-08-07 10:51:36" id="684c9c1c3dd084b43645f537774bea0b4a9c1222"/>
    <fixedFiles>
      <file>bridge/src/org/aspectj/bridge/IMessage.java</file>
      <file>bridge/src/org/aspectj/bridge/Message.java</file>
      <file>weaver/src/org/aspectj/weaver/Checker.java</file>
      <file>testing/src/org/aspectj/testing/xml/SoftMessage.java</file>
    </fixedFiles>
  </bug>
  <bug id="40771" reportTime="2003-07-25 10:47:00">
    <summary>ajde apis are unnecessariy coupled to swing</summary>
    <description>The AJDE APIs are coupled to javax.swing by org.aspectj.ajde.EditorManager. The EditorManager needs to be refactored, have swing specific parts moved to org.aspectj.ajde.ui.swing and org.aspectj.ajbrowser.</description>
    <commit commitTime="2003-07-25 15:07:57" id="bbd832b4800bc0d7c54d65b2d9d690316e97c6a6"/>
    <fixedFiles>
      <file>ajde/src/org/aspectj/ajde/ui/StructureModelUtil.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/PointcutWizard.java</file>
      <file>ajbrowser/src/org/aspectj/tools/ajbrowser/TopFrame.java</file>
      <file>ajde/testsrc/AjdeModuleTests.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/StructureViewPanel.java</file>
      <file>ajbrowser/src/org/aspectj/tools/ajbrowser/CompilerMessagesPanel.java</file>
      <file>ajbrowser/src/org/aspectj/tools/ajbrowser/BrowserManager.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/CompilerMessagesTest.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/AjdeUIManager.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/StructureViewManager.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/BrowserViewTreeListener.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/NullIdeManager.java</file>
      <file>ajde/src/org/aspectj/ajde/Ajde.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/BrowserViewManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="40774" reportTime="2003-07-25 10:56:00">
    <summary>task list icons don't show in ajbrowser</summary>
    <description>Messages show up, but icons differentiating errors and warning don't. Also check if something is wrong with org.aspectj.tools.ajbrowser.BrowserManagerTest.</description>
    <commit commitTime="2003-08-06 21:17:57" id="5edccbfaeb8bb4dc5b34d553267365ae3c7eda41"/>
    <fixedFiles>
      <file>ajde/testsrc/org/aspectj/ajde/AjdeTests.java</file>
      <file>ajde/src/org/aspectj/ajde/ProjectPropertiesAdapter.java</file>
      <file>ajbrowser/src/org/aspectj/tools/ajbrowser/BrowserProperties.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/NullIdeProperties.java</file>
      <file>ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java</file>
      <file>ajbrowser/src/org/aspectj/tools/ajbrowser/CompilerMessagesPanel.java</file>
      <file>ajde/testdata/examples/coverage/ModelCoverage.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/CompilerMessagesCellRenderer.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/NullIdeManager.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/CompilerMessage.java</file>
    </fixedFiles>
  </bug>
  <bug id="40807" reportTime="2003-07-25 23:53:00">
    <summary>AjcTask uses current dir as dest dir if unspecified</summary>
    <description>If the user does not specify the destination directory or output jar, then the taskdef uses the current working directory "." . By contrast, the command-line javac and ajc tools use the source directories. This breaks JSP compilation in Tomcat, which relies on the default behavior for the destination directory.</description>
    <commit commitTime="2003-07-26 04:13:54" id="2502ee5106921a6947e3470d08e30a0734a4d805"/>
    <fixedFiles>
      <file>taskdefs/testsrc/org/aspectj/tools/ant/taskdefs/AjcTaskTest.java</file>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="40824" reportTime="2003-07-28 05:55:00">
    <summary>asm treats "declare parents" as methods</summary>
    <description>"declare parents" member declarations report their kind as "method" instead of what they are.</description>
    <commit commitTime="2003-07-29 10:55:25" id="58e3cb226a2afa23134b75acecce617e5b16f781"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmBuilder.java</file>
    </fixedFiles>
  </bug>
  <bug id="40826" reportTime="2003-07-28 06:32:00">
    <summary>ajbrowser does not report errors properly</summary>
    <description>It seems to use command-line style output. This looks like the regression that was introduced with the change breaking NetBeans.</description>
    <commit commitTime="2003-08-06 21:17:57" id="5edccbfaeb8bb4dc5b34d553267365ae3c7eda41"/>
    <fixedFiles>
      <file>ajde/testsrc/org/aspectj/ajde/AjdeTests.java</file>
      <file>ajde/src/org/aspectj/ajde/ProjectPropertiesAdapter.java</file>
      <file>ajbrowser/src/org/aspectj/tools/ajbrowser/BrowserProperties.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/NullIdeProperties.java</file>
      <file>ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java</file>
      <file>ajbrowser/src/org/aspectj/tools/ajbrowser/CompilerMessagesPanel.java</file>
      <file>ajde/testdata/examples/coverage/ModelCoverage.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/CompilerMessagesCellRenderer.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/NullIdeManager.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/CompilerMessage.java</file>
    </fixedFiles>
  </bug>
  <bug id="40943" reportTime="2003-07-30 08:21:00">
    <summary>Binary weaving should copy non-Java resources from "-injars" to "-outjar"</summary>
    <description>Currently during a binary weave only .class files are wriiten to the -outjar. Unfortunately most non-trival Java programs also comprise properties files, messages, XML, images etc. These are not copied and programs are most likely to fail without them. This problem has been raised on the aspectj-users mailing list: " http://dev.eclipse.org/mhonarc/lists/aspectj-users/msg00101.html "</description>
    <commit commitTime="2003-08-06 21:17:57" id="5edccbfaeb8bb4dc5b34d553267365ae3c7eda41"/>
    <fixedFiles>
      <file>ajde/testsrc/org/aspectj/ajde/AjdeTests.java</file>
      <file>ajde/src/org/aspectj/ajde/ProjectPropertiesAdapter.java</file>
      <file>ajbrowser/src/org/aspectj/tools/ajbrowser/BrowserProperties.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/NullIdeProperties.java</file>
      <file>ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java</file>
      <file>ajbrowser/src/org/aspectj/tools/ajbrowser/CompilerMessagesPanel.java</file>
      <file>ajde/testdata/examples/coverage/ModelCoverage.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/CompilerMessagesCellRenderer.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/NullIdeManager.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/CompilerMessage.java</file>
    </fixedFiles>
  </bug>
  <bug id="41123" reportTime="2003-08-05 00:39:00">
    <summary>Weaving failure when using injars</summary>
    <description>Sample run that fails using injars: C:\devel\test\libraryWeave&amp;gt;ajc ajee\testing\ExecutionMonitor.aj C:\devel\test\libraryWeave&amp;gt;jar cf ajee.jar ajee\testing\*.class C:\devel\test\libraryWeave&amp;gt;ajc -injars ajee.jar model\BusObj.java model\MonitorB usObj.java C:\devel\test\libraryWeave\model\BusObj.java:3 Class must implement the inherite d abstract method ExecutionMonitor.MonitoredItem.ajc$interMethodDispatch2 $ajee_t esting_ExecutionMonitor$record String, String public class BusObj { ^^^^^^ 1 error It works in a single pass compilation: C:\devel\test\libraryWeave&amp;gt;ajc ajee\testing\ExecutionMonitor.aj model\BusObj.jav a model\MonitorBusObj.java C:\devel\test\libraryWeave&amp;gt; Sample source code: package ajee.testing; public aspect ExecutionMonitor { public interface MonitoredItem {} private void MonitoredItem.record String eventType, String eventName {} } --- package model; public class BusObj { } --- package model; import ajee.testing.ExecutionMonitor; public aspect MonitorBusObj { declare parents: BusObj implements ExecutionMonitor.MonitoredItem; }</description>
    <commit commitTime="2003-08-08 01:23:31" id="3e5974557278e81a9891edd4269eca39a8d42f43"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="41125" reportTime="2003-08-05 02:30:00">
    <summary>LocalVariableTable sometimes gets BCEL-supplied parameter names</summary>
    <description>See https://bugs.eclipse.org/bugs/show_bug.cgi?id=39470 The localVariableTable is no longer non-deterministic, but BCEL still needs to be whacked in the head to stop it from generating arg0,arg1,... LocalVariableTable entries when there are already perfectly good parameter entries.</description>
    <commit commitTime="2004-01-29 13:46:27" id="f5f74fd0bf1770273998aa3010c524a29dccd520"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="41181" reportTime="2003-08-06 05:42:00">
    <summary>Support SerialVersionUID field if no new fields declared on class</summary>
    <description>Erik and Vincenz Braun had an email dialog in which Vincenz recommended a flag to declare a serialVersionUID field with the value of original class when weaving into class files unless some aspect declared new state on the class, in which case a warning should be issued . This is necessary for systems using remote invocations.</description>
    <commit commitTime="2004-03-11 17:02:02" id="1f78bbd8e7d3f4213479f805b6ea4796b5437054"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>ajde/src/org/aspectj/ajde/Ajde.java</file>
    </fixedFiles>
  </bug>
  <bug id="41254" reportTime="2003-08-07 09:00:00">
    <summary>revise asm and create interfaces</summary>
    <description>The org.aspectj.asm API exposes implementation detail, does not have interfaces, and has needless generalization and indirection Association&amp;lt;- &amp;gt;Relation&amp;lt;-&amp;gt;RelationNode and LinkNode&amp;lt;-&amp;gt;StructureNode . The following is a first pass at an improved interface: - IProgramElement * getName * getAccessibility : Accessiblity * getModifiers : Modifiers * getKind : Kind * getFormalComment : String * isImplementor * isOverrider * isRunnable + getRelationships + getDeclaringType : IAspectJElement + getPackage : IAspectJElement + getType : IAspectJElement can be null + getParameters : List /*IAspectJElement*/ can be null + toString -&amp;gt; name + toSignatureString -&amp;gt; full signature /** * uni-directional 1..* relationships */ - IRelationship + getName + getKind + getSource + getTargets</description>
    <commit commitTime="2003-08-08 11:02:53" id="f1deb9c11024ecebab2e0aa17a260821375c25bd"/>
    <fixedFiles>
      <file>ajde/testsrc/org/aspectj/ajde/StructureModelTest.java</file>
      <file>ajbrowser/src/org/aspectj/tools/ajbrowser/TopFrame.java</file>
      <file>ajbrowser/src/org/aspectj/tools/ajbrowser/BrowserManager.java</file>
      <file>weaver/src/org/aspectj/weaver/AsmAdaptor.java</file>
      <file>testing/src/org/aspectj/testing/ajde/CompileCommand.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/StructureViewNode.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/AjdeTests.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/StructureTreeManager.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EmacsStructureModelManager.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/StructureViewNodeFactory.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/BrowserViewTreeListener.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/ui/StructureModelUtilTest.java</file>
      <file>ajde/src/org/aspectj/ajde/internal/LstBuildConfigManager.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/BrowserStructureViewToolPanel.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/PointcutWizard.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/StructureViewPanel.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/TreeViewBuildConfigEditor.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/BuildConfigNode.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/StructureViewManager.java</file>
      <file>asm/src/org/aspectj/asm/StructureModel.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/internal/NavigationHistoryModel.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/AsmDeclarationsTest.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/StructureModelUtil.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/SimpleStructureViewToolPanel.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/SwingTreeViewNode.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/StructureViewProperties.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/BuildConfigPopupMenu.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/StructureSearchManager.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/StructureModelRegressionTest.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/BuildConfigModel.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/ui/StructureViewManagerTest.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/AjdeUIManager.java</file>
      <file>asm/src/org/aspectj/asm/StructureModelManager.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/ui/StructureSearchManagerTest.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/SwingTreeViewNodeFactory.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/NullIdeManager.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/BrowserViewManager.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/AbstractIconRegistry.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/StructureView.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/NullIdeTaskListManager.java</file>
      <file>ajde/testdata/examples/coverage/ModelCoverage.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/IconRegistry.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmNodeFormatter.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/NullIdeUIAdapter.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/internal/TreeStructureViewBuilder.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/BrowserView.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/SwingTreeViewNodeRenderer.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AsmBuilderTest.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>asm/src/org/aspectj/asm/ReferenceAssociation.java</file>
      <file>asm/src/org/aspectj/asm/RelationNode.java</file>
      <file>asm/src/org/aspectj/asm/StructureNode.java</file>
      <file>asm/src/org/aspectj/asm/AdviceAssociation.java</file>
      <file>asm/src/org/aspectj/asm/Association.java</file>
      <file>asm/src/org/aspectj/asm/IntroductionAssociation.java</file>
      <file>asm/src/org/aspectj/asm/LinkNode.java</file>
      <file>asm/src/org/aspectj/asm/ProgramElementNode.java</file>
      <file>asm/src/org/aspectj/asm/StructureNodeFactory.java</file>
      <file>asm/src/org/aspectj/asm/Relation.java</file>
      <file>asm/src/org/aspectj/asm/InheritanceAssociation.java</file>
    </fixedFiles>
  </bug>
  <bug id="41359" reportTime="2003-08-09 11:19:00">
    <summary>percflow aspects compiled from jars share one instance for all entry points</summary>
    <description>When a percflow aspect is woven into source code from a jar using the aspectPath compiler option, it produces only one instance of the aspect for each entrypoint defined in the source code.</description>
    <commit commitTime="2003-08-28 21:44:55" id="5a07dcee3a3f520e4b5cadc67000673e2d0ca0b7"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java</file>
    </fixedFiles>
  </bug>
  <bug id="41952" reportTime="2003-08-26 05:38:00">
    <summary>XLint warning for call PCD's using subtype of defining type</summary>
    <description>Some would like an XLint compiler warning when the user in a call PCD specifies a declaring type that is not the defining type, because that constrains the join points to those whose bytecode signature contain the specified type as the declaring type. e.g., ---- class A { void run {} } class B extends A {} aspect C { before : call void B.run { } // warn here } public class Main { public static void main String[] args { // ok with -1.4; otherwise, becomes A.run in bytecode new B .run ; // never works - compile-time type of reference is A, not B A new B .run ; } ---- This warning is useful for two reasons. First, the user probably intended that any call to an instance of that object be picked out regardless of the compile-time type of the reference used to make the call , and thus should use target B &amp;amp;&amp;amp; call void run This suggestion could be in the XLint message. Second, older compilers i.e., compilers not using -1.4 would incorrectly specify the declaring type of the method call as the first type in the hierarchy which defined the method, so even if the user meant to constrain the join point by the compile-time reference type, the bytecode signature could be incorrect and the pointcut fail to pick out the join point. One problem with this XLint warning is that is also picks out valid declare warning/error statements enforcing requirements at compile-time about the type of the reference used to invoke a method e.g., when using a static reference of the wrong type . So perhaps the default level should be ignore. See also bug 41888 .</description>
    <commit commitTime="2004-01-07 17:00:52" id="97ab1e91dfba52187c14f0f7e5fdf6fafd9966c4"/>
    <fixedFiles>
      <file>bridge/src/org/aspectj/bridge/IMessage.java</file>
      <file>bridge/src/org/aspectj/bridge/MessageUtil.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/OrPointcut.java</file>
      <file>bridge/src/org/aspectj/bridge/Message.java</file>
      <file>tests/new/IndeterminateArg.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/Pointcut.java</file>
      <file>testing/src/org/aspectj/testing/xml/SoftMessage.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AndPointcut.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java</file>
      <file>weaver/src/org/aspectj/weaver/Lint.java</file>
      <file>weaver/src/org/aspectj/weaver/Checker.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java</file>
      <file>bridge/src/org/aspectj/bridge/SourceLocation.java</file>
      <file>tests/new/CallTypesI.java</file>
      <file>tests/new/IndeterminateArgType.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/NotPointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="42539" reportTime="2003-09-04 11:15:00">
    <summary>throw derivative pointcuts not advised.</summary>
    <description>Given the following point cut and advice: public aspect ExceptionAspect { pointcut exceptionThrower : execution public * ExceptionBugTest.* .. throws Exception+ ; declare warning : exceptionThrower : "throws Exception+"; } And the to be aspected code: public class ExceptionBugTest { class MyException extends Exception { } public void method1 throws Exception { } public void method2 throws MyException { } } listing file default.lst: C:\temp\AJC Bug\ExceptionAspect.aj C:\temp\AJC Bug\ExceptionBugTest.java AJC does not advise ExceptionBugTest.method2 . The output from the compilation is the following: C:\temp\AJC Bug&amp;gt;ajc -argfile default.lst -classpath %ASPECTJ_HOME%\lib\aspectjrt.jar C:\eclipse\workspace\AJC Bug\ExceptionBugTest.java:11 throws Exception+ From the aspect-j mailing list, contributed by Jim Hugunin: &amp;amp;lt;detail&amp;amp;gt;The bug was caused because the code for ThrowsPattern mistakenly used the internal protected method TypePattern.matchesExactly instead of the external public method TypePattern.matchesStatically. Because the classes were in the same package, Java's accessibility rules allowed this. It would be nice if there was an easy way to specifiy that a method could only be accessed from subtypes.&amp;amp;lt;/detail&amp;amp;gt;</description>
    <commit commitTime="2003-09-04 15:49:08" id="8660cc12bfbcd6f4957abd4dfc84735de6c048cf"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/ThrowsPattern.java</file>
    </fixedFiles>
  </bug>
  <bug id="42573" reportTime="2003-09-04 18:40:00">
    <summary>.lst file entries not resolved relative to list file: {boot}classpath, extdirs,</summary>
    <description>My -classpath entry in a config/.lst file was resolved relative to the working directory rather than to the config/.lst file. BuildArgParser.java looks like this would also be true for bootclasspath and extdirs, but not for injars, aspectpath, or sourceroots.</description>
    <commit commitTime="2004-08-05 17:31:56" id="648c0f4d15d9ab6bac9deef010a1b66824cd8da1"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>util/src/org/aspectj/util/ConfigParser.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="42739" reportTime="2003-09-08 20:22:00">
    <summary>Compiler crash in ajc head post 1.1.1 rc1</summary>
    <description>The compiler crashed on a simple test case; I will send this in a separate email. This crash still occurs in the version from CVS head as of 9/8/03. I believe the first error message is also a compiler bug - it should be possible to use declare soft on a non-concrete pointcut. C:\eclipse\workspace\atrack&amp;gt;ajc @narrow.lst C:\eclipse\workspace\atrack\src\org\atrack\policy\ExceptionHandling.java:25 exac t type pattern required java.lang.NullPointerException at org.aspectj.weaver.patterns.ReferencePointcut.concretize1 ReferencePo intcut.java:243 at org.aspectj.weaver.patterns.AndPointcut.concretize1 AndPointcut.java: 88 at org.aspectj.weaver.patterns.ReferencePointcut.concretize1 ReferencePo intcut.java:272 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:127 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:110 at org.aspectj.weaver.CrosscuttingMembers.addDeclare CrosscuttingMembers .java:111 at org.aspectj.weaver.CrosscuttingMembers.addDeclares CrosscuttingMember s.java:92 at org.aspectj.weaver.ResolvedTypeX.collectCrosscuttingMembers ResolvedT ypeX.java:332 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect Crosscut tingMembersSet.java:50 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTy peAndPerClause AspectDeclaration.java:754 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildIn terTypeAndPerClause AjLookupEnvironment.java:124 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.complet eTypeBindings AjLookupEnvironment.java:91 at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.ja va:310 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:324 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:373 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:125 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:70 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:99 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 C:\eclipse\workspace\atrack\src\org\atrack\policy\ExceptionHandling.java:0 Inter nal compiler error java.lang.NullPointerException at org.aspectj.weaver.patterns.ReferencePointcut.concretize1 ReferencePo intcut.java:243 at org.aspectj.weaver.patterns.AndPointcut.concretize1 AndPointcut.java: 88 at org.aspectj.weaver.patterns.ReferencePointcut.concretize1 ReferencePo intcut.java:272 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:127 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:110 at org.aspectj.weaver.CrosscuttingMembers.addDeclare CrosscuttingMembers .java:111 at org.aspectj.weaver.CrosscuttingMembers.addDeclares CrosscuttingMember s.java:92 at org.aspectj.weaver.ResolvedTypeX.collectCrosscuttingMembers ResolvedT ypeX.java:332 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect Crosscut tingMembersSet.java:50 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTy peAndPerClause AspectDeclaration.java:754 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildIn terTypeAndPerClause AjLookupEnvironment.java:124 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.complet eTypeBindings AjLookupEnvironment.java:91 at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.ja va:310 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:324 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:373 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:125 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:70 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:99 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 !! no source information available !! C:\eclipse\workspace\atrack\src\org\atrack\policy\ExceptionHandling.java:18 The type ExceptionHandling is already defined public abstract aspect ExceptionHandling { ^^^^^^^^^^^^^^^^^ ABORT Exception thrown from AspectJ DEVELOPMENT This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. null java.lang.NullPointerException at org.aspectj.weaver.patterns.ReferencePointcut.concretize1 ReferencePo intcut.java:243 at org.aspectj.weaver.patterns.AndPointcut.concretize1 AndPointcut.java: 88 at org.aspectj.weaver.patterns.ReferencePointcut.concretize1 ReferencePo intcut.java:272 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:127 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:110 at org.aspectj.weaver.CrosscuttingMembers.addDeclare CrosscuttingMembers .java:111 at org.aspectj.weaver.CrosscuttingMembers.addDeclares CrosscuttingMember s.java:92 at org.aspectj.weaver.ResolvedTypeX.collectCrosscuttingMembers ResolvedT ypeX.java:332 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect Crosscut tingMembersSet.java:50 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTy peAndPerClause AspectDeclaration.java:754 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildIn terTypeAndPerClause AjLookupEnvironment.java:124 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.complet eTypeBindings AjLookupEnvironment.java:91 at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.ja va:310 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:324 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:373 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:125 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:70 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:99 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 1 fail|abort, 3 errors</description>
    <commit commitTime="2003-09-10 00:35:18" id="d78d9ed48963cf302c26daab6af782d9b01ea3ac"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedPointcutDefinition.java</file>
    </fixedFiles>
  </bug>
  <bug id="42740" reportTime="2003-09-08 22:47:00">
    <summary>declare error fails on pointcuts composed from multiple classes</summary>
    <description>This error occurs in both 1.1.0 and in the head of CVS as of 9/8/03. The compiler crash output from the CVS head version is at the end. It may be related to 42739, but they may be distinct problems. Sample source: /* * Created on Sep 8, 2003 * * Copyright c 2003 New Aspects of Security. All Rights Reserved. */ aspect Library { public pointcut executionsThrowingChecked : execution * * .. throws Exception+ &amp;amp;&amp;amp; !RuntimeException ; } public aspect SampleExceptionHandling { public pointcut scope : within org.atrack.model..* ; public pointcut executionsThrowingChecked : Library.executionsThrowingChecked &amp;amp;&amp;amp; scope ; declare error : executionsThrowingChecked : "no checked exceptions"; } sample compile: C:\eclipse\workspace\atrack&amp;gt;ajc src\SampleExceptionHandling.java java.lang.Exception: Stack trace at java.lang.Thread.dumpStack Thread.java:1071 at org.aspectj.weaver.patterns.ReferencePointcut.concretize1 ReferencePo intcut.java:215 at org.aspectj.weaver.patterns.AndPointcut.concretize1 AndPointcut.java: 88 at org.aspectj.weaver.patterns.ReferencePointcut.concretize1 ReferencePo intcut.java:272 at org.aspectj.weaver.patterns.AndPointcut.concretize1 AndPointcut.java: 88 at org.aspectj.weaver.patterns.ReferencePointcut.concretize1 ReferencePo intcut.java:272 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:127 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:120 at org.aspectj.weaver.Checker.concretize Checker.java:37 at org.aspectj.weaver.CrosscuttingMembers.addShadowMunger CrosscuttingMe mbers.java:78 at org.aspectj.weaver.CrosscuttingMembers.addDeclare CrosscuttingMembers .java:102 at org.aspectj.weaver.CrosscuttingMembers.addDeclares CrosscuttingMember s.java:92 at org.aspectj.weaver.ResolvedTypeX.collectCrosscuttingMembers ResolvedT ypeX.java:332 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect Crosscut tingMembersSet.java:50 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTy peAndPerClause AspectDeclaration.java:754 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildIn terTypeAndPerClause AjLookupEnvironment.java:124 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.complet eTypeBindings AjLookupEnvironment.java:91 at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.ja va:310 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:324 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:373 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:125 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:70 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:99 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 C:\eclipse\workspace\atrack\src\SampleExceptionHandling.java:15 circular pointcu t declaration involving: executionsThrowingChecked 1 error</description>
    <commit commitTime="2003-09-10 00:35:18" id="d78d9ed48963cf302c26daab6af782d9b01ea3ac"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedPointcutDefinition.java</file>
    </fixedFiles>
  </bug>
  <bug id="42743" reportTime="2003-09-08 23:13:00">
    <summary>declare soft limitation</summary>
    <description>This code compiles properly under AspectJ 1.0.6, but it fails under 1.1.0 and under cvs head as of 9/8/03: C:\eclipse\workspace\atrack&amp;gt;ajc src\SampleExceptionHandling.java C:\eclipse\workspace\atrack\src\SampleExceptionHandling.java:3 exact type patter n required 1 error // Copyright c 2003 New Aspects of Security. All Rights Reserved. public aspect SampleExceptionHandling { declare soft: Exception+ &amp;amp;&amp;amp; !RuntimeException+ : within com.example..* ; }</description>
    <commit commitTime="2004-08-05 13:33:18" id="22dc3e73991462bdd99fb34d4ebc2e4b8831a618"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="42746" reportTime="2003-09-09 00:28:00">
    <summary>within pcd is confused for certain declare softs</summary>
    <description>This is an error in cvs head and in 1.1.0. It works correctly no compiler errors in 1.0.6. If you get rid of the within .. restriction, the code works. Output: C:\eclipse\workspace\atrack&amp;gt;ajc -d debug @narrow.lst C:\eclipse\workspace\atrack\src\test\NoSoftener.java:17 Unhandled exception type NoSuchMethodException Constructor ctor = clazz.getConstructor keyArgType ; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 1 error Source: /* * Created on Sep 8, 2003 * * Copyright c 2003 New Aspects of Security. All Rights Reserved. */ package org.atrack.model.error.impl; import test.NoSoftener; package test; import java.lang.reflect.Constructor; /* * Created on Sep 8, 2003 * * Copyright c 2003 New Aspects of Security. All Rights Reserved. */ /** * @author Ron Bodkin * */ public class NoSoftener { public void foo Class clazz { Class[] keyArgType = {}; Constructor ctor = clazz.getConstructor keyArgType ; } } /* * Created on Sep 8, 2003 * * Copyright c 2003 New Aspects of Security. All Rights Reserved. */ package org.atrack.model.error.impl; import test.NoSoftener; /** * @author Ron Bodkin * */ public aspect Softener { public pointcut scope : within NoSoftener ; public pointcut callsThrowingChecked : call * * .. &amp;amp;&amp;amp; scope ; declare soft: NoSuchMethodException: callsThrowingChecked ; }</description>
    <commit commitTime="2003-09-10 00:35:18" id="d78d9ed48963cf302c26daab6af782d9b01ea3ac"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedPointcutDefinition.java</file>
    </fixedFiles>
  </bug>
  <bug id="42993" reportTime="2003-09-12 04:26:00">
    <summary>Language regression, or possible language improvement?</summary>
    <description>The file AspectBug.java: public aspect AspectBug extends AbstractCaching perthis execution ContainerLoader+.new .. { declare parents: ContainerDescriptor implements AbstractCaching.Key; protected pointcut loadExecutions Key key : ContainerLoader.containerLoads *, key ; } abstract aspect AbstractCaching { interface Key {} protected abstract pointcut loadExecutions Key key ; } class Key { } class ContainerDescriptor { } class ActiveContainer { } class ContainerLoader { public ActiveContainer createContainer ContainerDescriptor c { return null; } public pointcut containerLoads ContainerLoader loader, ContainerDescriptor containerDesc : this loader &amp;amp;&amp;amp; args containerDesc &amp;amp;&amp;amp; execution ActiveContainer ContainerLoader.createContainer ContainerDescriptor ; } First, here are the versions of AspectJ I'm using this is a bash shell under cygwin on Windows XP : ~&amp;gt; CLASSPATH='C:\aspectj1.0\lib\aspectjrt.jar' /cygdrive/c/aspectj1.0/bin/ajc - version ajc version 1.0.6 built Jul 24, 2002 6:21 PM PST running on java 1.4.1_02 ~&amp;gt; CLASSPATH='C:\aspectj1.1\lib\aspectjrt.jar' /cygdrive/c/aspectj1.1/bin/ajc - version AspectJ Compiler 1.1.0 ~&amp;gt; CLASSPATH='C:\aspectj1.1.1rc1 \lib\aspectjrt.jar' /cygdrive/c/aspectj1.1.1rc1/bin/ajc -version AspectJ Compiler 1.1.1rc1 ~&amp;gt; CLASSPATH='C:\aspectj1.1.1 \lib\aspectjrt.jar' /cygdrive/c/aspectj1.1.1/bin/ajc -version AspectJ Compiler 1.1.1 For all four of these compilers, I give them the AspectBug.java file which is attached : ~&amp;gt; CLASSPATH='C:\aspectj1.0\lib\aspectjrt.jar' /cygdrive/c/aspectj1.0/bin/ajc AspectBug.java ~&amp;gt; CLASSPATH='C:\aspectj1.1\lib\aspectjrt.jar' /cygdrive/c/aspectj1.1/bin/ajc AspectBug.java ~&amp;gt; CLASSPATH='C:\aspectj1.1.1rc1 \lib\aspectjrt.jar' /cygdrive/c/aspectj1.1.1rc1/bin/ajc AspectBug.java ~&amp;gt; CLASSPATH='C:\aspectj1.1.1 \lib\aspectjrt.jar' /cygdrive/c/aspectj1.1.1/bin/ajc AspectBug.java C:\Documents and Settings\Macneil Shonle\AspectBug.java:7 incompatible type, expected ContainerDescriptor found BindingTypePattern AbstractCaching$Key, 0 1 error As you can see, only the final run with the Sept 11 build of ajc do we see the "incompatible type" error. If this is not a regression but a desirable result, how should the code be ported?</description>
    <commit commitTime="2003-09-12 16:49:58" id="b5127388a3b5a2403e8d8944766bbe1895e09530"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/ResolvedTypeX.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
      <file>weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java</file>
    </fixedFiles>
  </bug>
  <bug id="43033" reportTime="2003-09-12 13:34:00">
    <summary>Compiler crash in ajc head post 1.1.1 rc1 on erroneous program</summary>
    <description>This must be caused by the fix to concretization... Input sources: package base; public abstract aspect ExceptionHandling { public abstract pointcut scope ; declare soft: Exception: scope ; } package model; import base.ExceptionHandling; public aspect ModelExceptionHandling extends ExceptionHandling { public pointcut scope : within * ; protected RuntimeException convertCheckedException Throwable t { return new RuntimeException t.getMessage , t } Compiler output: C:\eclipse\workspace\atrack&amp;gt;ajc -d debug @narrow.lst java.lang.NullPointerException at org.aspectj.weaver.patterns.ReferencePointcut.concretize1 ReferencePo intcut.java:243 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:127 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:110 at org.aspectj.weaver.CrosscuttingMembers.addDeclare CrosscuttingMembers .java:111 at org.aspectj.weaver.CrosscuttingMembers.addDeclares CrosscuttingMember s.java:92 at org.aspectj.weaver.ResolvedTypeX.collectCrosscuttingMembers ResolvedT ypeX.java:332 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect Crosscut tingMembersSet.java:50 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTy peAndPerClause AspectDeclaration.java:754 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildIn terTypeAndPerClause AjLookupEnvironment.java:124 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.complet eTypeBindings AjLookupEnvironment.java:91 at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.ja va:310 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:324 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:373 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:125 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:70 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:99 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 C:\eclipse\workspace\atrack\src\org\atrack\model\error\impl\ModelExceptionHandl i ng.java:0 Internal compiler error java.lang.NullPointerException at org.aspectj.weaver.patterns.ReferencePointcut.concretize1 ReferencePo intcut.java:243 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:127 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:110 at org.aspectj.weaver.CrosscuttingMembers.addDeclare CrosscuttingMembers .java:111 at org.aspectj.weaver.CrosscuttingMembers.addDeclares CrosscuttingMember s.java:92 at org.aspectj.weaver.ResolvedTypeX.collectCrosscuttingMembers ResolvedT ypeX.java:332 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect Crosscut tingMembersSet.java:50 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTy peAndPerClause AspectDeclaration.java:754 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildIn terTypeAndPerClause AjLookupEnvironment.java:124 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.complet eTypeBindings AjLookupEnvironment.java:91 at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.ja va:310 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:324 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:373 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:125 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:70 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:99 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 !! no source information available !! C:\eclipse\workspace\atrack\src\org\atrack\model\error\impl\ModelExceptionHandl i ng.java:23 Unmatched bracket return new RuntimeException t.getMessage , t ^ ABORT Exception thrown from AspectJ DEVELOPMENT This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. null java.lang.NullPointerException at org.aspectj.weaver.patterns.ReferencePointcut.concretize1 ReferencePo intcut.java:243 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:127 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:110 at org.aspectj.weaver.CrosscuttingMembers.addDeclare CrosscuttingMembers .java:111 at org.aspectj.weaver.CrosscuttingMembers.addDeclares CrosscuttingMember s.java:92 at org.aspectj.weaver.ResolvedTypeX.collectCrosscuttingMembers ResolvedT ypeX.java:332 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect Crosscut tingMembersSet.java:50 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTy peAndPerClause AspectDeclaration.java:754 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildIn terTypeAndPerClause AjLookupEnvironment.java:124 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.complet eTypeBindings AjLookupEnvironment.java:91 at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.ja va:310 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:324 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:373 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:125 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:70 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:99 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 1 fail|abort, 2 errors C:\eclipse\workspace\atrack&amp;gt;cd \devel\test\excHandling\c1 C:\devel\test\excHandling\c1&amp;gt;ajc base\ExceptionHandling.java model\ModelExceptio nHandling.java java.lang.NullPointerException at org.aspectj.weaver.patterns.ReferencePointcut.concretize1 ReferencePo intcut.java:243 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:127 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:110 at org.aspectj.weaver.CrosscuttingMembers.addDeclare CrosscuttingMembers .java:111 at org.aspectj.weaver.CrosscuttingMembers.addDeclares CrosscuttingMember s.java:92 at org.aspectj.weaver.ResolvedTypeX.collectCrosscuttingMembers ResolvedT ypeX.java:332 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect Crosscut tingMembersSet.java:50 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTy peAndPerClause AspectDeclaration.java:754 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildIn terTypeAndPerClause AjLookupEnvironment.java:124 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.complet eTypeBindings AjLookupEnvironment.java:91 at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.ja va:310 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:324 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:373 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:125 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:70 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:99 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 C:\devel\test\excHandling\c1\model\ModelExceptionHandling.java:0 Internal compil er error java.lang.NullPointerException at org.aspectj.weaver.patterns.ReferencePointcut.concretize1 ReferencePo intcut.java:243 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:127 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:110 at org.aspectj.weaver.CrosscuttingMembers.addDeclare CrosscuttingMembers .java:111 at org.aspectj.weaver.CrosscuttingMembers.addDeclares CrosscuttingMember s.java:92 at org.aspectj.weaver.ResolvedTypeX.collectCrosscuttingMembers ResolvedT ypeX.java:332 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect Crosscut tingMembersSet.java:50 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTy peAndPerClause AspectDeclaration.java:754 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildIn terTypeAndPerClause AjLookupEnvironment.java:124 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.complet eTypeBindings AjLookupEnvironment.java:91 at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.ja va:310 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:324 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:373 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:125 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:70 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:99 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 !! no source information available !! C:\devel\test\excHandling\c1\model\ModelExceptionHandling.java:9 Unmatched brack et return new RuntimeException t.getMessage , t ^ ABORT Exception thrown from AspectJ DEVELOPMENT This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. null java.lang.NullPointerException at org.aspectj.weaver.patterns.ReferencePointcut.concretize1 ReferencePo intcut.java:243 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:127 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:110 at org.aspectj.weaver.CrosscuttingMembers.addDeclare CrosscuttingMembers .java:111 at org.aspectj.weaver.CrosscuttingMembers.addDeclares CrosscuttingMember s.java:92 at org.aspectj.weaver.ResolvedTypeX.collectCrosscuttingMembers ResolvedT ypeX.java:332 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect Crosscut tingMembersSet.java:50 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTy peAndPerClause AspectDeclaration.java:754 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildIn terTypeAndPerClause AjLookupEnvironment.java:124 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.complet eTypeBindings AjLookupEnvironment.java:91 at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.ja va:310 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:324 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:373 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:125 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:70 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:99 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 1 fail|abort, 2 errors</description>
    <commit commitTime="2003-09-19 08:16:17" id="53570863fa77364052937376a0ff65ce2fa37842"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="43194" reportTime="2003-09-16 23:21:00">
    <summary>java.lang.VerifyError in generated code</summary>
    <description>See the attached file VerifyBug.jar for the source files. You won't need anything else to compiler and reproduce this bug: ~/bug&amp;gt; ls AbstractCaching.java TreeNode.java VerifyBug.jar ContainerCaching.java TreeNodeFolding.java WorkspaceGroup.java ContainerLoader.java TreePanel.java WorkspaceNode.java Makefile TreeWorkspace.java ~/bug&amp;gt; gmake /cygdrive/c/aspectj1.1.1/bin/ajc -classpath "C:\aspectj1.1.1 \lib\aspectjrt.jar" -version AspectJ Compiler 1.1.1 /cygdrive/c/aspectj1.1.1/bin/ajc -classpath "C:\aspectj1.1.1\lib\aspectjrt.jar" *.java java -classpath "C:\aspectj1.1.1\lib\aspectjrt.jar;." TreeNode java.lang.VerifyError: class: TreeNode, method: doShowAction signature: V Unable to pop operand off an empty stack Exception in thread "main" make: *** [all] Error 1</description>
    <commit commitTime="2003-09-18 18:38:14" id="fc0d2af02cc6b6f8a4d9425e3c1cdd166957dde9"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="43709" reportTime="2003-09-25 18:30:00">
    <summary>structure view crash when extending library aspects</summary>
    <description>I have an library with an aspect that includes advice, which I compile into an outjar. In my client project I extend it, and make a concrete pointcut that results in the library aspect affecting parts of my system. There is a bug and an enhancement request here: 1 A bug: when you look at the structure view for affected classes, there is a problem if you try to navigate from calls to advice in AJDT, it results in an NPE . Here is the stack trace in AJDT: java.lang.NullPointerException at org.aspectj.asm.internal.ProgramElement.toLinkLabelString ProgramElement.java:403 at org.eclipse.ajdt.internal.core.AJDTStructureViewNode.getLabel AJDTStructureViewNode.java:171 at org.eclipse.ajdt.internal.core.AJDTStructureViewNodeAdapter.getLabel AJDTStructureViewNodeAdapter.java:89 at org.eclipse.ui.model.WorkbenchLabelProvider.getText WorkbenchLabelProvider.java:142 at org.eclipse.jface.viewers.TreeViewer.doUpdateItem TreeViewer.java:95 at org.eclipse.jface.viewers.AbstractTreeViewer$UpdateItemSafeRunnable.run AbstractTreeViewer.java:87 at org.eclipse.core.internal.runtime.InternalPlatform.run InternalPlatform.java:1006 at org.eclipse.core.runtime.Platform.run Platform.java:413 at org.eclipse.jface.viewers.AbstractTreeViewer.doUpdateItem AbstractTreeViewer.java:406 at org.eclipse.jface.viewers.StructuredViewer$UpdateItemSafeRunnable.run StructuredViewer.java:119 at org.eclipse.core.internal.runtime.InternalPlatform.run InternalPlatform.java:1006 at org.eclipse.core.runtime.Platform.run Platform.java:413 at org.eclipse.jface.viewers.StructuredViewer.updateItem StructuredViewer.java:1271 at org.eclipse.jface.viewers.AbstractTreeViewer.createTreeItem AbstractTreeViewer.java:320 at org.eclipse.jface.viewers.AbstractTreeViewer$1.run AbstractTreeViewer.java:303 at org.eclipse.swt.custom.BusyIndicator.showWhile BusyIndicator.java:69 at org.eclipse.jface.viewers.AbstractTreeViewer.createChildren AbstractTreeViewer.java:289 at org.eclipse.jface.viewers.AbstractTreeViewer.handleTreeExpand AbstractTreeViewer.java:697 at org.eclipse.jface.viewers.AbstractTreeViewer$4.treeExpanded AbstractTreeViewer.java:709 at org.eclipse.swt.widgets.TypedListener.handleEvent TypedListener.java:175 at org.eclipse.swt.widgets.EventTable.sendEvent EventTable.java:81 at org.eclipse.swt.widgets.Widget.sendEvent Widget.java:840 at org.eclipse.swt.widgets.Widget.sendEvent Widget.java:865 at org.eclipse.swt.widgets.Widget.sendEvent Widget.java:849 at org.eclipse.swt.widgets.Tree.wmNotifyChild Tree.java:1909 at org.eclipse.swt.widgets.Control.WM_NOTIFY Control.java:3815 at org.eclipse.swt.widgets.Composite.WM_NOTIFY Composite.java:642 at org.eclipse.swt.widgets.Control.windowProc Control.java:2816 at org.eclipse.swt.widgets.Display.windowProc Display.java:2361 at org.eclipse.swt.internal.win32.OS.CallWindowProcW Native Method at org.eclipse.swt.internal.win32.OS.CallWindowProc OS.java:1236 at org.eclipse.swt.widgets.Tree.callWindowProc Tree.java:156 at org.eclipse.swt.widgets.Tree.WM_LBUTTONDOWN Tree.java:1517 at org.eclipse.swt.widgets.Control.windowProc Control.java:2799 at org.eclipse.swt.widgets.Display.windowProc Display.java:2361 at org.eclipse.swt.internal.win32.OS.DispatchMessageW Native Method at org.eclipse.swt.internal.win32.OS.DispatchMessage OS.java:1303 at org.eclipse.swt.widgets.Display.readAndDispatch Display.java:1543 at org.eclipse.ui.internal.Workbench.runEventLoop Workbench.java:1402 at org.eclipse.ui.internal.Workbench.run Workbench.java:1385 at org.eclipse.core.internal.boot.InternalBootLoader.run InternalBootLoader.java:858 at org.eclipse.core.boot.BootLoader.run BootLoader.java:461 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke Unknown Source at sun.reflect.DelegatingMethodAccessorImpl.invoke Unknown Source at java.lang.reflect.Method.invoke Unknown Source at org.eclipse.core.launcher.Main.basicRun Main.java:291 at org.eclipse.core.launcher.Main.run Main.java:747 at org.eclipse.core.launcher.Main.main Main.java:583 2 The enhancement request: the concrete aspect that applies the advice should also show what is affected in the project. Of course, it would also be nice to see how a given concrete library aspect in the aspect path affects your project too.</description>
    <commit commitTime="2003-09-26 05:24:49" id="426d89b639c5f64504ff372b849495d75cdc7540"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/internal/ProgramElement.java</file>
    </fixedFiles>
  </bug>
  <bug id="43783" reportTime="2003-09-26 19:36:00">
    <summary>AJDT not very stable when confronted with java/aspect errors.</summary>
    <description>AJDT is not very stable when an eclipse project contains errors like missing classes, wrong package statements etc. etc. This may occurs when refactoring a project sometimes by changing the source outside eclipse . Note I am using Eclipse 2.1.1, AJDT 1.1.4 + incremental compilation. Generally a lot of exceptions will occur mostly nullpointer . Here are some of them: I: java.lang.NullPointerException at org.aspectj.asm.internal.ProgramElement.toLinkLabelString ProgramElement.java:403 at org.eclipse.ajdt.internal.core.AJDTStructureViewNode.getLabel AJDTStructureViewNode.java:171 at org.eclipse.ajdt.internal.core.AJDTStructureViewNodeAdapter.getLabel AJDTStructureViewNodeAdapter.java:89 at org.eclipse.ui.model.WorkbenchLabelProvider.getText WorkbenchLabelProvider.java:142 II: java.lang.NullPointerException at org.eclipse.ajdt.internal.ui.editor.AspectJEditor$1.run AspectJEditor.java:242 at org.eclipse.swt.widgets.RunnableLock.run RunnableLock.java:35 III: java.lang.NullPointerException at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:79 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:165 !</description>
    <commit commitTime="2003-10-22 15:24:59" id="3e4b59a6752567468a001c325c47396f5ab6782d"/>
    <fixedFiles>
      <file>ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java</file>
    </fixedFiles>
  </bug>
  <bug id="43972" reportTime="2003-10-01 04:49:00">
    <summary>Static crosscutting makes interfaces unusable for javac</summary>
    <description>When adding default implementations to an existing interface, the AspectJ compiler seems to modify the interface itself, rather than only modifying classes that were declared to implement this interface with something like 'declare parents: A implements X'. When viewed with Eclipse's class file viewer, all methods have the following data attached: Attribute: Name: Synthetic Length: 0 Both Eclipse and plain javac would then complain if I used any of these methods, as if they were made invisible. I have no idea what is going on here, but one workaround I found is to simply not advise the original interface, but create a second, hidden interface that extends the original interface, and advise that instead. Does this really have to be this way?</description>
    <commit commitTime="2003-10-01 16:00:43" id="64e450959c22af70bf054173004d61713c212acc"/>
    <fixedFiles>
      <file>tests/bugs/interfaceDefinition/Main.java</file>
    </fixedFiles>
  </bug>
  <bug id="44117" reportTime="2003-10-03 01:17:00">
    <summary>NPE on compile</summary>
    <description>java.lang.NullPointerException at org.aspectj.weaver.AsmRelationshipProvider.checkerMunger AsmRelationshipProvider.java:51 at org.aspectj.weaver.Checker.match Checker.java:58 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:985 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:791 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:291 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:77 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:417 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:390 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:316 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.weaveAndGenerateClassFile s AjBuildManager.java:256 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:156 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:70 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:103 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:165</description>
    <commit commitTime="2003-10-16 15:15:45" id="311725549a379f2bd3c0fcce2aaaae50b7a92ddb"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java</file>
    </fixedFiles>
  </bug>
  <bug id="44155" reportTime="2003-10-03 16:05:00">
    <summary>TODO tasks are miscategorized in Eclipse 3.0M3</summary>
    <description>Eclipse 3.0 separates the notion of a task from a problem. The AJDT builder classifies TODO tasks as problems.</description>
    <commit commitTime="2005-05-05 10:36:02" id="9dc3f0fefe1784d02b1f3641ebc7104a2c2ec5a4"/>
    <fixedFiles>
      <file>bridge/src/org/aspectj/bridge/IMessage.java</file>
      <file>bridge/src/org/aspectj/bridge/Message.java</file>
    </fixedFiles>
  </bug>
  <bug id="44191" reportTime="2003-10-04 20:23:00">
    <summary>Need better error message for "can't find type"</summary>
    <description>I have experienced situations where IAJC outputs a message like this at the end of compilation. [iajc] can't find type org.xxx.SomeTest In my case this was one time highly confusing since I did not expect the class in question to be referred anywhere in the project I have to date still not located the reference . For such cases, it would be extremely nice if the error message would display WHY it need the class i.e. the name of the refering class es or aspect es possibly with a reasonable cutoff as there is seldom need to list all referals . So I would like a message like this: [iajc] can't find type org.xxx.SomeTest referred by org.yyy.SomeClass,org.yy.SomeOtherClass ...</description>
    <commit commitTime="2004-08-06 15:04:45" id="061395c8c7fe681ab40ab53a7d1bfeb8e17c1028"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/DeclareParents.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/DeclareSoft.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedTypeX.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java</file>
    </fixedFiles>
  </bug>
  <bug id="44272" reportTime="2003-10-07 00:05:00">
    <summary>retitle warning to "circular {advice} dependency at ..."</summary>
    <description>When writing aspects with cycles in the advice precedence, get warning "circular dependency at {join point}" -- should be "circular advice dependency..." or "circular advice precedences at {join point} -- reorder the advice in the aspect". FWIW, here's an example of circularity in advice precedence: ---- aspect A { pointcut crun : execution void run ; before : crun {} after returning : crun {} void around : crun { proceed ; } } ---- See programming guide for more discussion of circularity in advice precedence.</description>
    <commit commitTime="2004-03-15 17:27:56" id="01095341153b24fcf5ab5f537ecc77077819b1f1"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/Shadow.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java</file>
    </fixedFiles>
  </bug>
  <bug id="44365" reportTime="2003-10-07 18:03:00">
    <summary>Support modifiers and attributes in type patterns</summary>
    <description>I would like to be able to use a public modifier in type patterns, to only pick out public types. This should also allow !public to pick out only types with default access. This would add public _TypePattern_ to the grammar for TypePatterns. For example, in: public pointcut publicJoinPoints : execution public * * .. || execution public new .. || preinitialization public new .. || initialization public new .. || staticinitialization /*public*/ * || ...; I'd like to use public * in that staticinitialization pointcut, to restrict the definition of the public interface to include only publicly visible types.</description>
    <commit commitTime="2010-03-19 15:42:00" id="e60f463f95845f92f62f02958f25505e4d401e5a"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/TypePattern.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/AbstractPatternNodeVisitor.java</file>
      <file>org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/DumpPointcutVisitor.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/PatternParser.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/PatternNodeVisitor.java</file>
    </fixedFiles>
  </bug>
  <bug id="44587" reportTime="2003-10-09 13:58:00">
    <summary>Erroneous exception conversion</summary>
    <description>The following code results in an incorrect exception NoClassDefFoundError being thrown and without a stack trace . Here is the output when running after compiling with AspectJ from head and AspectJ 1.1.1 : C:\devel\test\excHandling\interType&amp;gt;java client.Main Exception in thread "main" java.lang.NoClassDefFoundError at client.Main.main Main.java:6 AspectJ 1.0.6 doesn't exhibit this problem; it produces the following output: C:\devel\test\excHandling\interType&amp;gt;java client.Main Exception in thread "main" java.lang.ExceptionInInitializerError at client.Main.main Main.java;client/ExceptionHandling.java [1k];library/ LogManager.java[2k]:1004 Caused by: java.lang.RuntimeException: evil at client.ExceptionHandling.doGetLogger_library_LogManager ExceptionHand ling.java;library/LogManager.java[1k]:1009 at client.ExceptionHandling.&amp;lt;init&amp;gt; ExceptionHandling.java;library/LogMan ager.java[1k]:1006 at client.ExceptionHandling.&amp;lt;clinit&amp;gt; ExceptionHandling.java;library/LogM anager.java[1k]:3 ... 1 more This example is probably related to bug #44586 . If you change the after throwing advice in client/ExceptionHandling.java to remove the execution OR initialization part, you get similar the following output to the AspectJ 1.0.6 case; the exception isn't swallowed. Here is our test code: package client; public aspect ExceptionHandling { after throwing Throwable t : execution * Main.* .. || initialization Main.new .. { System.err.println "exception thrown at "+thisJoinPointStaticPart ; t.printStackTrace System.err ; } } --- package client; import library.Loggable; public aspect LogManager { declare parents: client..* implements Loggable; } --- package client; public class Main { public static void main String args[] { new Main ; } } --- package library; import java.util.logging.Logger; public aspect LogManager { private Logger Loggable.logger = doGetLogger ; public Logger Loggable.getLogger { return logger; } private Logger Loggable.doGetLogger { throw new RuntimeException "evil" ; //return Logger.getLogger "main" ; } } --- package library; public interface Loggable {}</description>
    <commit commitTime="2004-01-14 15:24:06" id="5834de97836ebcc056415736c17c46e8b1dfaf5a"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectClinit.java</file>
      <file>weaver/src/org/aspectj/weaver/AjcMemberMaker.java</file>
      <file>runtime/src/org/aspectj/lang/NoAspectBoundException.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java</file>
      <file>runtime/testsrc/RuntimeModuleTests.java</file>
      <file>weaver/src/org/aspectj/weaver/NameMangler.java</file>
      <file>tests/new/ConstructorExecInitFails.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="45489" reportTime="2003-10-24 06:34:00">
    <summary>Structure model is wrong when re-opened</summary>
    <description>Some elements have the wrong kinds when a saved structure model is loaded. E.g. if I close then re-open the eclipse workbench classes are shown as interface in the outline view. Also if I traverse the tree with the code below I get the wrong kinds assigned to classed, interfaces, aspects and import declarations. List list = StructureModelUtil.getPackagesInModel ; for Iterator i = list.iterator ; i.hasNext ; { Object[] o = Object[] i.next ; IProgramElement node = IProgramElement o[0]; List files = StructureModelUtil.getFilesInPackage node ; for Iterator i2 = files.iterator ; i2.hasNext ; { IProgramElement file = IProgramElement i2.next ; System.out.println "file " + file.getKind .toString + ", " + file.getName ; boolean added2 = false; List file_children = file.getChildren ; // file children can be classes, aspects or other things for Iterator i3 = file_children.iterator ; i3.hasNext ; { IProgramElement file_child = IProgramElement i3.next ; System.out.println "kind: " + file_child.getKind .toString +", " + file_child.getName ;</description>
    <commit commitTime="2004-02-19 16:02:06" id="669cd7ce8634623c004cca5732c94a20fd7f57f7"/>
    <fixedFiles>
      <file>ajde/testsrc/org/aspectj/ajde/AjdeTests.java</file>
      <file>asm/src/org/aspectj/asm/IProgramElement.java</file>
    </fixedFiles>
  </bug>
  <bug id="45676" reportTime="2003-10-28 11:25:00">
    <summary>AspectJ enhanced code can not be used with plain old java anymore</summary>
    <description>I am developing a library with AspectJ 1.1.1 on JDK 1.3.1_06 on Windows XP. All public static Introdctions to a static class can not be used from in a second module. Outline I have two projects AJP and libuser, the second is a plain old java program, which uses the full compiled output of the aspectj-lib AJP . for any questions do not hesitate to ask me Arno@aspectsoft.de</description>
    <commit commitTime="2004-01-13 17:04:31" id="b8d42c06d69f44e8c87a9b7d3ea290de0d18ed37"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedTypeX.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="46280" reportTime="2003-11-07 11:32:00">
    <summary>compiler issues error on inner aspects when privilieged</summary>
    <description>The compiler complains that "inner aspects must be static" whenever I try to qualify an inner and static aspect as privileged, no matter what the enclosing type is aspect, interface or class . I was using j2sdk1.4.0_02, AspectJ 1.1, eclipse 2.1 with AJDT 1.1.3 . Test case: ------------------ BASE CLASS: public class Capsule { private int hidden; public int visible; public Capsule int priv, int pub { hidden = priv; visible = pub; } public void doSomething { System.out.println """ + hidden + ", " + visible + """ ; } public static void main String[] args { Capsule capsule = new Capsule 1, 1 ; capsule.doSomething ; } } ------------------ ASPECT: public aspect Outer { static //privileged &amp;lt;== JUST TRY TO UNCOMMENT THIS! aspect Inner { pointcut call2doSomething Capsule capsule : call void Capsule.doSomething &amp;amp;&amp;amp; target capsule ; before Capsule capsule : call2doSomething capsule { capsule.visible++; //capsule.hidden++; } } } ------------------ INTERFACE: public interface Marker { static //privileged &amp;lt;== JUST TRY TO UNCOMMENT THIS! aspect Inner { pointcut call2doSomething Capsule capsule : call void Capsule.doSomething &amp;amp;&amp;amp; target capsule ; before Capsule capsule : call2doSomething capsule { capsule.visible++; //capsule.hidden++; } } }</description>
    <commit commitTime="2004-01-14 11:28:13" id="7bbd1f419239dc9e8b46e7fd912b2bc007bbd76a"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/parser/AjParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="46298" reportTime="2003-11-07 14:40:00">
    <summary>Aspectj generate code does not de-compile cleanly.</summary>
    <description>Under certain condition you can not cleanly decompile code generated by the aspectj compiler/byte code weaver. package com.regular; public class ExceptionCatcher { public ExceptionCatcher { super ; } public void catchException { try { ExceptionThrower throwUp = new ExceptionThrower ; throwUp.throwException ; } catch Exception e { System.out.println "Inside my catch block" ; } } public static void main String[] args { ExceptionCatcher catcher = new ExceptionCatcher ; catcher.catchException ; } } package com.aop; import org.aspectj.lang.JoinPoint; public aspect ExceptionHandler { pointcut classList : within com.regular..* ; before Throwable e : classList &amp;amp;&amp;amp; handler * &amp;amp;&amp;amp; args e { System.out.println "Starting before block" ; log thisJoinPointStaticPart, e ; System.out.println "End of before block" ; } private void log JoinPoint.StaticPart jp, Throwable e { System.out.println "Class Name: " + jp.getSignature .getDeclaringType ; System.out.println "Error Message" + e.getMessage ; } } Runing JAD: jad ExceptionCatcher.class Parsing ExceptionCatcher.class... Generating ExceptionCatcher.jad Couldn't fully decompile method catchException Couldn't resolve all exception handlers in method catchException Now the JAD Output: // Decompiled by Jad v1.5.7. Copyright 1997-99 Pavel Kouznetsov. // Jad home page: http://www.geocities.com/SiliconValley/Bridge/8617/jad.html // Decompiler options: packimports 3 // Source File Name: ExceptionCatcher.java package com.regular; import com.aop.ExceptionHandler; import com.capitalone.risk.aop.ITestInterface; import com.capitalone.risk.aop.ITestInterfaceAspect; import java.io.PrintStream; import org.aspectj.runtime.reflect.Factory; // Referenced classes of package com.regular: // ExceptionThrower public class ExceptionCatcher implements com.aop.IntroductionPointCut.IPhilipsTarget { public ExceptionCatcher { } public void catchException { if this instanceof ITestInterface ITestInterfaceAspect.aspectOf .ajc$before$com_capitalone_risk_aop_ITestInterfaceAspect$113 ITestInterface this ; ExceptionThrower throwUp = new ExceptionThrower ; throwUp.throwException ; break MISSING_BLOCK_LABEL_77; Exception exception; exception; ExceptionHandler.aspectOf .ajc$before$com_aop_ExceptionHandler$1f8 exception, ajc$tjp_0 ; Exception e = exception; System.out.println "Inside my catch block" ; break MISSING_BLOCK_LABEL_77; Throwable throwable; throwable; if this instanceof ITestInterface ITestInterfaceAspect.aspectOf .ajc$after$com_capitalone_risk_aop_ITestInterfaceAspect$172 ITestInterface this ; throw throwable; if this instanceof ITestInterface ITestInterfaceAspect.aspectOf .ajc$after$com_capitalone_risk_aop_ITestInterfaceAspect$172 ITestInterface this ; return; } public static void main String args[] { ExceptionCatcher catcher = new ExceptionCatcher ; catcher.catchException ; } public static final org.aspectj.lang.JoinPoint.StaticPart ajc$tjp_0; static { Factory factory = new Factory "ExceptionCatcher.java", Class.forName "com.regular.ExceptionCatcher" ; ajc$tjp_0 = factory.makeSJP "exception-handler", factory.makeCatchClauseSig "0--com.regular.ExceptionCatcher- java.lang.Exception-&amp;lt;missing&amp;gt;-" , 33 ; } } The aspect class: jad ExceptionHandler.class Parsing ExceptionHandler.class... Generating ExceptionHandler.jad Couldn't fully decompile method aspectOf // Decompiled by Jad v1.5.7. Copyright 1997-99 Pavel Kouznetsov. // Jad home page: http://www.geocities.com/SiliconValley/Bridge/8617/jad.html // Decompiler options: packimports 3 // Source File Name: ExceptionHandler.java package com.aop; import java.io.PrintStream; import org.aspectj.lang.NoAspectBoundException; import org.aspectj.lang.Signature; public class ExceptionHandler { public ExceptionHandler { } public void ajc$before$com_aop_ExceptionHandler$1f8 Throwable e, org.aspectj.lang.JoinPoint.StaticPart thisJoinPointStaticPart { System.out.println "Starting before block" ; log thisJoinPointStaticPart, e ; System.out.println "End of before block" ; } private void log org.aspectj.lang.JoinPoint.StaticPart jp, Throwable e { System.out.println "Class Name: " + jp.getSignature .getDeclaringType ; System.out.println "Error Message" + e.getMessage ; } public static ExceptionHandler aspectOf { ajc$perSingletonInstance; JVM INSTR dup ; JVM INSTR ifnull 8; goto _L1 _L2 _L1: return; _L2: throw new NoAspectBoundException ; } public static boolean hasAspect { return ajc$perSingletonInstance != null; } private static void ajc$postClinit { ajc$perSingletonInstance = new ExceptionHandler ; } public static final ExceptionHandler ajc$perSingletonInstance; static { ajc$postClinit ; } } Enjoy! Ron</description>
    <commit commitTime="2004-09-01 15:26:43" id="4921f0c8f03353385d709bc79a7dd301c2caa5df"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="46347" reportTime="2003-11-10 10:39:00">
    <summary>-inpath instead of -injars so directories can be passed in.</summary>
    <description>To utilise the binary weaving capability of aspectj, it is currently necessary to jar up the class files that you want to weave into and pass the jar in on the -injars option to the compiler. This can be awkward and makes ANT scripts and IDE integration more difficult that it needs to be. It would be nice to replace the -injars option with a -inpath option that could cope with either jar files or directories having a format very like 'classpath' . I'll attach the implementation to this bug report in a second :</description>
    <commit commitTime="2003-11-11 13:09:14" id="1c6db5d4f24f6ddaee4c48661503a8b7ea516744"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/ZipFileWeaver.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/bcel/ZipTestCase.java</file>
      <file>ajde/src/org/aspectj/ajde/ProjectPropertiesAdapter.java</file>
      <file>ajbrowser/src/org/aspectj/tools/ajbrowser/BrowserProperties.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java</file>
      <file>util/src/org/aspectj/util/FileUtil.java</file>
      <file>testing/src/org/aspectj/testing/ajde/CompileCommand.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/AjdeTests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>testing/src/org/aspectj/testing/harness/bridge/AjcMessageHandler.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/NullIdeProperties.java</file>
      <file>ajde/src/org/aspectj/ajde/internal/AspectJBuildManager.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java</file>
      <file>ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java</file>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="46671" reportTime="2003-11-14 10:14:00">
    <summary>ajc throws NullPointerException when parsing pointcut specification.</summary>
    <description>I have an aspect specification in a file called SimpleTracing.java whose contents I give below. The command ajc SimpleTracing.java throws an exception that I give at the end of this message. Note that the pointcut references a class called SampleClass. If I compile SampleClass.java before I compile SimpleTracing.java then there is no NullPointerException. /* * Created on Nov 13, 2003 * * To change the template for this generated file go to * Window&amp;gt;Preferences&amp;gt;Java&amp;gt;Code Generation&amp;gt;Code and Comments */ /** * @author Arun_Sh * * To change the template for this generated type comment go to * Window&amp;gt;Preferences&amp;gt;Java&amp;gt;Code Generation&amp;gt;Code and Comments */ aspect SimpleTracing { pointcut traceCall : call void SampleClass.foo .. ; before : traceCall { System.out.println "Entering: " + thisJoinPoint ; } after : traceCall { System.out.println "Exiting: " + thisJoinPoint ; } } The exception message is the message is for ajc -verbose SimpleTracing.java : zipfile classpath entry does not exist: C:\j2sdk1.4.1_02\jre\lib\i18n.jar directory classpath entry does not exist: C:\j2sdk1.4.1_02\jre\classes compiling C:\Arun\AspectJTrial\SimpleTracing.java compiling C:\Arun\AspectJTrial\.\SampleClass.java java.lang.NullPointerException at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.fields Sou rceTypeBinding.java:363 at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.faultInTyp esForFieldsAndMethods SourceTypeBinding.java:351 at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.faultIn Types CompilationUnitScope.java:354 at org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:531 at org.aspectj.ajdt.internal.compiler.AjCompiler.process AjCompiler.java :65 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:338 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:373 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:125 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:70 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:99 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 C:\Arun\AspectJTrial\SampleClass.java:0 Internal compiler error java.lang.NullPointerException at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.fields Sou rceTypeBinding.java:363 at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.faultInTyp esForFieldsAndMethods SourceTypeBinding.java:351 at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.faultIn Types CompilationUnitScope.java:354 at org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:531 at org.aspectj.ajdt.internal.compiler.AjCompiler.process AjCompiler.java :65 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:338 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:373 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:125 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:70 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:99 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 !! no source information available !! ABORT Exception thrown from AspectJ 1.1.1 This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. null java.lang.NullPointerException at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.fields Sou rceTypeBinding.java:363 at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.faultInTyp esForFieldsAndMethods SourceTypeBinding.java:351 at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.faultIn Types CompilationUnitScope.java:354 at org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:531 at org.aspectj.ajdt.internal.compiler.AjCompiler.process AjCompiler.java :65 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:338 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:373 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:125 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:70 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:99 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 1 fail|abort, 1 error</description>
    <commit commitTime="2004-01-09 09:52:07" id="e4831cc3be2542aa37ea532baa51930746cd9493"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="47318" reportTime="2003-11-23 16:18:00">
    <summary>org.aspectj.asm.IRelationship.Kind.ALL does not contain all kinds</summary>
    <description>org.aspectj.asm.IRelationship.Kind.ALL is an array that should contain all kinds that an IRelationship may have. There are three possible kinds defined in IRelationship.java: ADVICE, DECLARE and DECLARE_INTER_TYPE. The Kind[] ALL does only contain ADVICE and DECLARE. This can lead to an ArrayIndexOutOfBoundsException.</description>
    <commit commitTime="2003-11-23 21:32:30" id="bdc79f1b42c11fe2bcaa45bbaa5a063173777d28"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/IRelationship.java</file>
    </fixedFiles>
  </bug>
  <bug id="47754" reportTime="2003-11-29 03:48:00">
    <summary>illegal method modifier</summary>
    <description>the attached example throws this at class load time. please note that this bug results in a different exception when happens in a different setup, and when the class is loaded by JBoss. more cryptic, talking about generic class format error Exception in thread "main" java.lang.ClassFormatError: com/netvisor/nvsr/client/InvalidByteCodeBug$Test$ITest Illegal method modifiers: 0x409 at java.lang.ClassLoader.defineClass0 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:537 at java.security.SecureClassLoader.defineClass SecureClassLoader.java: 123 at java.net.URLClassLoader.defineClass URLClassLoader.java:251 at java.net.URLClassLoader.access$100 URLClassLoader.java:55 at java.net.URLClassLoader$1.run URLClassLoader.java:194 at java.security.AccessController.doPrivileged Native Method at java.net.URLClassLoader.findClass URLClassLoader.java:187 at java.lang.ClassLoader.loadClass ClassLoader.java:289 at sun.misc.Launcher$AppClassLoader.loadClass Launcher.java:274 at java.lang.ClassLoader.loadClass ClassLoader.java:235 at java.lang.ClassLoader.loadClassInternal ClassLoader.java:302 at java.lang.ClassLoader.defineClass0 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:537 at java.security.SecureClassLoader.defineClass SecureClassLoader.java: 123 at java.net.URLClassLoader.defineClass URLClassLoader.java:251 at java.net.URLClassLoader.access$100 URLClassLoader.java:55 at java.net.URLClassLoader$1.run URLClassLoader.java:194 at java.security.AccessController.doPrivileged Native Method at java.net.URLClassLoader.findClass URLClassLoader.java:187 at java.lang.ClassLoader.loadClass ClassLoader.java:289 at sun.misc.Launcher$AppClassLoader.loadClass Launcher.java:274 at java.lang.ClassLoader.loadClass ClassLoader.java:235 at java.lang.ClassLoader.loadClassInternal ClassLoader.java:302 at com.netvisor.nvsr.client.InvalidByteCodeBug.run InvalidByteCodeBug. java:15 at com.netvisor.nvsr.client.InvalidByteCodeBug.main InvalidByteCodeBug. java:8</description>
    <commit commitTime="2004-01-07 15:57:25" id="7322131ad6d3c5c14114a6b7945757f45d438112"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java</file>
    </fixedFiles>
  </bug>
  <bug id="47910" reportTime="2003-12-02 13:35:00">
    <summary>ajc -outjar jarfile does not contain MANIFEST.MF</summary>
    <description>I call ajc -sourceroots &amp;lt;mydir&amp;gt; -outjar &amp;lt;my.jar&amp;gt; and an output file is created with a .jar extension, but it is not a valid jar file because there is no MANIFEST.MF file. I see that the text for ajc says: -outjar &amp;lt;file&amp;gt; put output classes in zip file &amp;lt;file&amp;gt; which might imply that it is supposed to be a zip file, but a parameter called - outjar which creates a zip file doesn't really make sense. If -outjar is used, the resulting file should be a valid jar file, i.e. with a META-INF/MANIFEST.MF file inside.</description>
    <commit commitTime="2004-03-17 12:25:49" id="34dbb0c41b3e324e3c7fc5a150c314fbecfd5e6e"/>
    <fixedFiles>
      <file>ajde/testsrc/org/aspectj/ajde/AjdeTests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/InpathTestcase.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/ResourceCopyTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="47952" reportTime="2003-12-03 00:43:00">
    <summary>SoftException.printStackTrace .. should print wrapped throwable too</summary>
    <description>SoftExceptions should print not only their trace but also that of the wrapped throwable. We should be able to set a flag on class initialization whether we are running under 1.4 and then implement it under 1.4 using initCause and otherwise by direct delegation. I can do this fix if we're agreed.</description>
    <commit commitTime="2004-01-15 05:21:33" id="ad2fb7a583f7451f3101f8101b090999d6a43341"/>
    <fixedFiles>
      <file>runtime/src/org/aspectj/lang/SoftException.java</file>
      <file>runtime/testsrc/RuntimeModuleTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="48072" reportTime="2003-12-04 10:54:00">
    <summary>Complete relationship information in the structure model</summary>
    <description>Complete the set of relationships surfaced by the structure model e.g. including support for declare parents etc. - Mik you had a document listing the things yet to be done here?</description>
    <commit commitTime="2004-01-23 10:03:14" id="f24286d65906e4fca5e2872ca1fa8295c1ab6bc7"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
      <file>weaver/src/org/aspectj/weaver/Shadow.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>weaver/src/org/aspectj/weaver/Checker.java</file>
      <file>weaver/src/org/aspectj/weaver/World.java</file>
    </fixedFiles>
  </bug>
  <bug id="48080" reportTime="2003-12-04 11:21:00">
    <summary>Context information in declare warning/error messages</summary>
    <description>*** to be discussed on aspectj-dev / users before implementing *** We have found it useful to be able to include contextual information in the messages produced by declare warning /error. We want to be able to write something like: declare warning: call * com.ibm.ws..* .. : "Call to protected WAS API: %s"; and get the compiler message: "Call to protected WAS API: void com.ibm.ws.SomeClass.someMethod boolean " We prototyped a solution using substitution variables as follows: %% inserts a % character %k inserts the joinpoint kind %s inserts the signature at the joinpoint %t inserts the name of the declaring type at the joinpoint %i inserts the name of the identifier at the joinpoint %j inserts a string representation of the joinpoint %f inserts the filename where the match was found %l inserts the line number where the match was found %a inserts the file and line number of the declare error/warning definition this may not be the perfect set... Here's a complete mini-example showing all the subsitutions in action : Hello.java ========= public class Hello { public static void main String[] args { System.out.println "Hello" ; new Hello .sayItToo ; } private void sayItToo { System.out.println "me too" ; } } Warn.java ========= public aspect Warn { declare warning : execution * Hello.* .. : "My warning:\n%%k=%k\n%%s=%s\n%%t=%t\n%%i=%i\n%%j=%j\n%%f=%f\n%%l=% l\n%%a=%a"; declare warning : call * Hello.* .. : "Illegal call to %t.%i .. "; } To get the following output: C:\ColyerRoot\Data\AspectJDev\eclipse\workspace\Notes\decwtest\Hello.java:4 Illegal call to Hello.sayItToo .. C:\ColyerRoot\Data\AspectJDev\eclipse\workspace\Notes\decwtest\Hello.java:3 My warning: %k=method-execution %s=void Hello.main java.lang.String[] %t=Hello %i=main %j=method-execution void Hello.main java.lang.String[] %f=C:\ColyerRoot\Data\AspectJDev\eclipse\workspace\Notes\decwtest\Hello.java %l=3 %a=C:\ColyerRoot\Data\AspectJDev\eclipse\workspace\Notes\decwtest\Warn.java:3 C:\ColyerRoot\Data\AspectJDev\eclipse\workspace\Notes\decwtest\Hello.java:8 My warning: %k=method-execution %s=void Hello.sayItToo %t=Hello %i=sayItToo %j=method-execution void Hello.sayItToo %f=C:\ColyerRoot\Data\AspectJDev\eclipse\workspace\Notes\decwtest\Hello.java %l=8 %a=C:\ColyerRoot\Data\AspectJDev\eclipse\workspace\Notes\decwtest\Warn.java:3 3 warnings The following patch implements the extension warning - based on a version of Checker.java from a while back . Index: Checker.java =================================================================== RCS file: /home/technology/org. aspectj/modules/weaver/src/org/aspectj/weaver/Checker.java,v retrieving revision 1.5 diff -u -r1.5 Checker.java --- Checker.java 12 Mar 2003 19:51:43 -0000 1.5 +++ Checker.java 19 Jul 2003 12:34:12 -0000 @@ -17,6 +17,7 @@ import java.util.Collections; import org.aspectj.bridge.IMessage; +import org.aspectj.bridge.ISourceLocation; import org.aspectj.bridge.Message; import org.aspectj.weaver.patterns.DeclareErrorOrWarning; import org.aspectj.weaver.patterns.PerClause; @@ -49,7 +50,7 @@ public boolean match Shadow shadow, World world { if super.match shadow, world { world.getMessageHandler .handleMessage - new Message msg, + new Message format msg,shadow , isError ? IMessage.ERROR : IMessage.WARNING, null, shadow.getSourceLocation ; @@ -63,5 +64,85 @@ } public Collection getThrownExceptions { return Collections.EMPTY_LIST; } + +// %% inserts a % character +// %k inserts the joinpoint kind +// %s inserts the signature at the joinpoint +// %t inserts the name of the declaring type at the joinpoint +// %i inserts the name of the identifier at the joinpoint +// %j inserts a string representation of the joinpoint +// %J inserts an extended string representation of the joinpoint +// %f inserts the filename where the match was found +// %l inserts the line number where the match was found +// %a inserts the name of the aspect where the declare was defined + private String format String msg, Shadow shadow { + StringBuffer ret = new StringBuffer ; + for int i = 0; i &amp;lt; msg.length ; i++ { + if msg.charAt i != '%' { + ret.append msg.charAt i ; + } else { + // its a substitution character + int subCharPos = i+1; + if subCharPos &amp;lt; msg.length { + i++; // consume it + substitute ret,shadow,msg.charAt i ; + } + } + } + return ret.toString ; + } + + /** + * @param buf the buffer in which to insert the substitution + * @param shadow shadow from which to draw context info + * @param c the substitution character + */ + private void substitute StringBuffer ret, Shadow shadow, char c { + ISourceLocation loc; + switch c { + case '%': + ret.append '%' ; + break; + case 'k': // kind + ret.append shadow.getKind .getName ; + break; + case 's': + ret.append shadow.getSignature ; + break; + case 't': + ret.append shadow.getEnclosingType ; + break; + case 'i': + ret.append shadow.getSignature .getName ; + break; + case 'j': + case 'J': + ret.append shadow.toString ; + break; + case 'f': // file name + loc = shadow.getSourceLocation ; + if loc != null &amp;amp;&amp;amp; loc.getSourceFile != null { + ret.append loc.getSourceFile .toString ; + } + break; + case 'l': // line number + loc = shadow.getSourceLocation ; + if loc != null { + ret.append loc.getLine ; + } + break; + case 'a': // aspect file and line number + loc = getSourceLocation ; + if loc != null &amp;amp;&amp;amp; loc.getSourceFile != null { + ret.append loc.getSourceFile .toString ; + ret.append ':' ; + ret.append loc.getLine ; + } + break; + default: // unknown substitution character, leave alone + ret.append '%' ; + ret.append c ; + } + } }</description>
    <commit commitTime="2004-03-15 16:38:44" id="087842e53c2f60333d1114f8781fa77f619175e8"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java</file>
    </fixedFiles>
  </bug>
  <bug id="48091" reportTime="2003-12-04 12:18:00">
    <summary>Lazy instantiation of thisJoinPoint</summary>
    <description>In cases where the body of advice refers to a non-statically evaluable portion of thisJoinPoint so that it can't be optimized by the compiler to thisJoinPointStaticPart , the JoinPoint object is currently always created before entering the advice body - even if the JoinPoint object would never actually be accessed because of a test within the advice for example . Since a thisJoinPoint is often used in tracing applications b tracing applications tend to be very pervasive, c they must have low overhead when tracing is disabled, and d creation of thisJoinPoint objects is expensive v. expensive compared to just testing a flag it would be nice if there was a way to create JoinPoint objects lazily on first actual reference within the advice body.</description>
    <commit commitTime="2004-01-24 02:28:54" id="0c833438dadeeb26659cd901870d18d2c103658b"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/AjdtBatchTests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>runtime/src/org/aspectj/runtime/reflect/Factory.java</file>
      <file>weaver/src/org/aspectj/weaver/Lint.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/CommandTestCase.java</file>
      <file>weaver/src/org/aspectj/weaver/World.java</file>
    </fixedFiles>
  </bug>
  <bug id="48522" reportTime="2003-12-11 13:36:00">
    <summary>Declare soft softening other exception types</summary>
    <description>It appears that if you soften any exception in a scope, it actually softens ALL of them! Try this code: import java.sql.SQLException; public class Bad { public static void main String args[] { throw new Exception "should be a compiler error here" ; } } aspect ExcPolicy { declare soft: SQLException: execution * Bad.* .. ; } The compiler accepts this code when it should have a runtime error in compiling main... At a minimum, the declare soft implementation is softening more than it should be.</description>
    <commit commitTime="2004-01-07 15:21:26" id="01055e854df883746321b955bd5b9b41a840feda"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
    </fixedFiles>
  </bug>
  <bug id="48650" reportTime="2003-12-12 12:36:00">
    <summary>Ability to specify prune directories</summary>
    <description>We use Bitkeeper for our source control at my company which creates SCCS directories in our source. These directories confuse the ajc compiler and cause errors. It would be very useful if we could specify directories to prune besides CVS . As suggested by Wes Isberg, perhaps a syntax like: ajc -sourceroots . -XomitSourceroots=SCCS,temp</description>
    <commit commitTime="2005-01-27 03:25:57" id="8cc7315ade97ee5e99d05cac7fd5ff22df130d36"/>
    <fixedFiles>
      <file>util/src/org/aspectj/util/LangUtil.java</file>
      <file>util/src/org/aspectj/util/FileUtil.java</file>
    </fixedFiles>
  </bug>
  <bug id="48990" reportTime="2003-12-17 06:29:00">
    <summary>Special case if false to not require a dynamic test</summary>
    <description>FastMatch, the efficient pattern matching for pointcuts on the constant pool, is currrently only implemented for the within pointcut. I am planning to provide further oimplementations for other pointcuts by release 1.2.</description>
    <commit commitTime="2004-07-28 15:13:09" id="10c6de6fbc8a0b9eb07801f4ac19bea8304a9cb3"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/IfPseudoToken.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/Pointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/IfPointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="49250" reportTime="2003-12-21 15:01:00">
    <summary>alias getCause for getWrappedThrowable in SoftException</summary>
    <description>SoftException should implement getCause : public Throwable getCause { return inner; } As pointed out by Ramnivas, misc mail messages, code comments... Using getCause means the chain should print as expected in 1.4+, esp. when SoftException is itself wrapped as a RemoteException. Since getCause replicates getWrappedThrowable , we could deprecate that, but we must continue to support it to maintain upwards binary compatibility in the runtime classes.</description>
    <commit commitTime="2004-01-07 13:30:26" id="eac16aee966695c8f0d22c4961c63a27e61dd2bf"/>
    <fixedFiles>
      <file>runtime/src/org/aspectj/lang/SoftException.java</file>
    </fixedFiles>
  </bug>
  <bug id="49457" reportTime="2004-01-02 00:21:00">
    <summary>No error on overloaded pointcuts unless binding variables</summary>
    <description>The compiler might not be detecting overloaded pointcut names when parameters are not bound, and/or might not be implementing the pointcut correctly. Below is the context from my reply to Ron Bodkin on aspectj-dev "Proper behavior of overloaded pointcut definitions". I have not checked this code recently or submitted a test case, nor have I evaluated whether my code below actually replicates Ron's bug. ---- context from the email The programming guide says, It is an error for two pointcuts to be named with the same name in the same class or aspect declaration. When I compile with overloaded pointcut names, I do get an error. pointcut pc Runnable r : target r &amp;amp;&amp;amp; call void run ; pointcut pc SubRunnable r : target r &amp;amp;&amp;amp; call void run ; $ aspectj-1.1.1 -classpath $ajrt11 OverloadedPointcut.java ...\OverloadedPointcut.java:14 duplicate pointcut name: pc ...\OverloadedPointcut.java:15 duplicate pointcut name: pc ... When I use these pointcuts with bound parameters, I get an error. before Runnable r : pc r { log "pc Runnable r " ; } before SubRunnable r : pc r { log "pc SubRunnable r " ; } When I use these pointcuts with type parameters, I get no errors. before : pc Runnable { log "pc Runnable " ; } before : pc SubRunnable { log "pc SubRunnable " ; } before : pc * { log "pc * " ; } [...] ---- my code public class OverloadedPointcut { public static void main String[] args { new C .run ; } } class C { public void run {} } aspect A { declare parents: C implements Runnable; declare parents: C implements SubRunnable; interface SubRunnable extends Runnable {} pointcut pc Runnable r : target r &amp;amp;&amp;amp; call void run ; pointcut pc SubRunnable r : target r &amp;amp;&amp;amp; call void run ; before Runnable r : pc r { log "pc Runnable r " ; } before SubRunnable r : pc r { log "pc SubRunnable r " ; } before : pc Runnable { log "pc Runnable " ; } before : pc SubRunnable { log "pc SubRunnable " ; } before : pc * { log "pc * " ; } void log String s { System.out.println s ; } } ---- Ron's code [...] the following program compiles with no warnings, produces no output when run under AspectJ 1.1.1. It appears to behave as if the more specific definition is the only definition of the pointcut [...] Here is a simple program that illustrates the question and odd behavior: package lib; public class RunnablePointcuts { public pointcut runnableCalls Runnable runnable, Object caller : call * run .. &amp;amp;&amp;amp; target runnable &amp;amp;&amp;amp; this caller ; //public pointcut specialRunnableCalls SpecialRunnable runnable, Object caller : public pointcut runnableCalls SpecialRunnable runnable, Object caller : call * run .. &amp;amp;&amp;amp; target runnable &amp;amp;&amp;amp; this caller ; } --- package lib; public interface SpecialRunnable extends Runnable { } --- package client; import lib.RunnablePointcuts; import lib.SpecialRunnable; public aspect Use { before Object caller : RunnablePointcuts.runnableCalls *, caller &amp;amp;&amp;amp; target MyRunnable { System.out.println "my runnable called from "+caller ; } public static void main String args[] { Use.aspectOf .doIt ; } public void doIt { new MyRunnable .run ; } } // the advice will run if you make this implement SpecialRunnable //class MyRunnable implements SpecialRunnable { class MyRunnable implements Runnable { public void run {} }</description>
    <commit commitTime="2004-01-07 13:10:07" id="c517e8507cbc0be482d3eb1be2694e3f6486a4e3"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
    </fixedFiles>
  </bug>
  <bug id="49638" reportTime="2004-01-07 12:31:00">
    <summary>exception logging: after throwing advice can't convert Throwable obj to string and ajc aborts</summary>
    <description>The problem is found by the example in Listing 5.15 from Laddad's AspectJ in Action book. It looks like an exception object in after throwing Throwable ex advice has a problem being converted to string in a _logger.logp call. Environment ----------- OS: Solaris 8 kernel patch level 108528-27 plus j2se recommended patches Java version: java -version java version "1.4.2" Java TM 2 Runtime Environment, Standard Edition build 1.4.2-b28 Java HotSpot TM Client VM build 1.4.2-b28, mixed mode The problem has also been reproduced with AspectJ 1.1.1 on Windows 2000 5.00.2195, SP 4. Description ----------- ajc aborts with the following output: trouble in: public class TestException extends java.lang.Object: public static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0 public static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_1 public void &amp;lt;init&amp;gt; : ALOAD_0 // TestException this line 1 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V constructor-execution void TestException.&amp;lt;init&amp;gt; | RETURN constructor-execution void TestException.&amp;lt;init&amp;gt; end public void &amp;lt;init&amp;gt; public static void main String[] : method-execution void TestException.main java.lang.String[] | method-call void TestException.perform | | catch java.lang.Throwable -&amp;gt; E0 | | | INVOKESTATIC TestException.perform V line 4 | | catch java.lang.Throwable -&amp;gt; E0 | | GOTO L0 | | E0: ASTORE_1 | | INVOKESTATIC ExceptionLoggerAspectV2.aspectOf LExceptionLoggerAspectV2; | | ALOAD_1 | | GETSTATIC TestException.ajc$tjp_0 Lorg/aspectj/lang/JoinPoint$StaticPart; | | INVOKEVIRTUAL ExceptionLoggerAspectV2.ajc$after$ExceptionLoggerAspectV2$14a Ljava/lang/Throwable;Lorg/aspectj/lang/JoinPoint$StaticPart; V | | ALOAD_1 | | ATHROW | | L0: NOP | | ACONST_NULL | | ASTORE_2 | | INVOKESTATIC ExceptionLoggerAspectV2.aspectOf LExceptionLoggerAspectV2; | | ALOAD_2 | | CHECKCAST java.lang.Throwable | | GETSTATIC TestException.ajc$tjp_0 Lorg/aspectj/lang/JoinPoint$StaticPart; | | INVOKEVIRTUAL ExceptionLoggerAspectV2.ajc$after$ExceptionLoggerAspectV2$14a Ljava/lang/Throwable;Lorg/aspectj/lang/JoinPoint$StaticPart; V | | NOP | method-call void TestException.perform | RETURN line 5 method-execution void TestException.main java.lang.String[] end public static void main String[] public static void perform : method-execution void TestException.perform | ACONST_NULL line 8 | ASTORE_0 | ALOAD_0 // java.lang.Object nullObj line 9 | method-call java.lang.String java.lang.Object.toString | | catch java.lang.Throwable -&amp;gt; E0 | | | INVOKEVIRTUAL java.lang.Object.toString Ljava/lang/String; | | catch java.lang.Throwable -&amp;gt; E0 | | GOTO L0 | | E0: ASTORE_1 | | INVOKESTATIC ExceptionLoggerAspectV2.aspectOf LExceptionLoggerAspectV2; | | ALOAD_1 | | GETSTATIC TestException.ajc$tjp_1 Lorg/aspectj/lang/JoinPoint$StaticPart; | | INVOKEVIRTUAL ExceptionLoggerAspectV2.ajc$after$ExceptionLoggerAspectV2$14a Ljava/lang/Throwable;Lorg/aspectj/lang/JoinPoint$StaticPart; V | | ALOAD_1 | | ATHROW | | L0: NOP | method-call java.lang.String java.lang.Object.toString | POP | RETURN line 10 method-execution void TestException.perform end public static void perform end public class TestException ABORT Exception thrown from AspectJ 1.1.1 This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. can't convert from java.lang.String to java.lang.Throwable can't convert from java.lang.String to java.lang.Throwable org.aspectj.weaver.BCException: can't convert from java.lang.String to java.lang.Throwable at org.aspectj.weaver.bcel.Utility.appendConversion Utility.java:203 at org.aspectj.weaver.bcel.BcelVar.appendLoadAndConvert BcelVar.java:57 at org.aspectj.weaver.bcel.BcelAdvice.getAdviceArgSetup BcelAdvice.java:287 at org.aspectj.weaver.bcel.BcelAdvice.getAdviceInstructions BcelAdvice.java:244 at org.aspectj.weaver.bcel.BcelShadow.weaveAfterReturning BcelShadow.java:986 at org.aspectj.weaver.bcel.BcelShadow.weaveAfter BcelShadow.java:941 at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:126 at org.aspectj.weaver.Shadow.implementMungers Shadow.java:341 at org.aspectj.weaver.Shadow.implement Shadow.java:313 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:1006 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:299 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:77 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:417 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:390 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:327 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.weaveAndGenerateClassFiles AjBuildManager.java:256 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:156 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:70 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:99 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 1 fail|abort Sample code is two files, TextException.java and ExceptionLoggerAspectV2.java see below . To reproduce the problem, do $ ajc *.java File 1 - TestException.java ---------------------------- public class TestException { public static void main String[] args { perform ; } public static void perform { Object nullObj = null; nullObj.toString ; } } File 2 - ExceptionLoggerAspectV2.java ------------------------------------- import java.util.logging.*; import org.aspectj.lang.*; public aspect ExceptionLoggerAspectV2 { Logger _logger = Logger.getLogger "exceptions" ; ExceptionLoggerAspectV2 { _logger.setLevel Level.ALL ; } pointcut exceptionLogMethods : call * *.* .. &amp;amp;&amp;amp; !within ExceptionLoggerAspectV2 ; after thowing Throwable ex : exceptionLogMethods { if _logger.isLoggable Level.WARNING { Signature sig = thisJoinPointStaticPart.getSignature ; _logger.logp Level.WARNING, sig.getDeclaringType .getName , sig.getName , "Exception logger aspect", ex ; } } }</description>
    <commit commitTime="2004-01-09 09:21:03" id="7b081f2e0bece3414ac4f385cde75d7b54981099"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/parser/AjParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="49657" reportTime="2004-01-07 17:27:00">
    <summary>Weaver results in rt error if affected base class not exposed</summary>
    <description>I was weaving a 3rd party library and wrote an aspect that should affect both a base class and a derived class, but inadvertently wove only the derived class. This resulted in the following error. I would like the weaver to catch this kind of error at weave link time, rather than creating code that results in a rt error... I get this error in 1.1.1 final and in a fairly recent version from CVS HEAD: java.lang.AbstractMethodError at ajee.logging.LogManager.ajc$interMethodDispatch1 $ajee_logging_LogManager$ajee_logging_Loggable$getLogger LogManager.java at ajee.tracing.ExecutionTracer.ajc$before$ajee_tracing_ExecutionTracer$926 ExecutionTracer.java:62 at library.Derived.&amp;lt;init&amp;gt; Derived.java:46 This line is a call to super ; I've attached a small example that reproduces another error that I think is related: C:\devel\test\ctors\twoPass&amp;gt;build C:\devel\test\ctors\twoPass&amp;gt;call ajc -outjar fullBase.jar sample\Base.java sampl e\Derived.java Exception in thread "main" java.lang.ExceptionInInitializerError at sample.Derived.&amp;lt;init&amp;gt; Derived.java:6 at sample.Derived.main Derived.java:13 Caused by: org.aspectj.lang.NoAspectBoundException at sample.Trace.aspectOf Trace.aj at sample.Trace.&amp;lt;init&amp;gt; Trace.aj:5 at sample.Trace.ajc$postClinit Trace.aj at sample.Trace.&amp;lt;clinit&amp;gt; Trace.aj:5 ... 2 more</description>
    <commit commitTime="2004-08-19 16:38:16" id="dbe1024f852c600d2752e5f39eb31ca4f5d72de9"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/AjdtBatchTests.java</file>
      <file>weaver/src/org/aspectj/weaver/WeaverMessages.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedTypeX.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="49743" reportTime="2004-01-08 17:37:00">
    <summary>performance improvements for runtime library</summary>
    <description>I am heavily using the runtime signature information from thisJoinPoint.getSignature and the toString method of it. This causes heavy String operations each time the toString method is called. Would it be possible to cache the resulting string for example in MethodSignatureImpl and similar classes for other signatures?</description>
    <commit commitTime="2004-09-01 10:30:07" id="438e61c998298b48830d5be76668df45629a1eb0"/>
    <fixedFiles>
      <file>runtime/src/org/aspectj/runtime/reflect/SignatureImpl.java</file>
      <file>runtime/src/org/aspectj/runtime/reflect/StringMaker.java</file>
      <file>runtime/src/org/aspectj/runtime/reflect/FieldSignatureImpl.java</file>
      <file>runtime/src/org/aspectj/runtime/reflect/InitializerSignatureImpl.java</file>
      <file>runtime/src/org/aspectj/runtime/reflect/Factory.java</file>
      <file>runtime/src/org/aspectj/runtime/reflect/SourceLocationImpl.java</file>
      <file>runtime/src/org/aspectj/runtime/reflect/ConstructorSignatureImpl.java</file>
      <file>runtime/testsrc/RuntimeModuleTests.java</file>
      <file>runtime/src/org/aspectj/runtime/reflect/AdviceSignatureImpl.java</file>
      <file>runtime/src/org/aspectj/runtime/reflect/MethodSignatureImpl.java</file>
      <file>runtime/testsrc/org/aspectj/runtime/reflect/SignatureTest.java</file>
      <file>runtime/src/org/aspectj/runtime/reflect/CatchClauseSignatureImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="49814" reportTime="2004-01-10 17:46:00">
    <summary>ConfigParser.java:132</summary>
    <description>I have a directory structure such that D:\java\aop\benchmark\strategy\aspectj\ca\ubc\ca\spl\pattern\library exists, and contains source files. The command I issued was ajc ca\ubc\cs\spl\patterns\library\*.java examples\strategy\aspectj\*.java The difference is the directory is actually called 'pattern', but I mistyped and tried to compile in the directory 'patterns'. Here's the output after calling this: build config error: can't find D:\java\aop\BENCHM~1\strategy\aspectj\ca\ubc\cs\s pl\patterns\library ABORT Exception thrown from AspectJ 1.1.1 This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. null java.lang.NullPointerException at org.aspectj.util.ConfigParser.addFiles ConfigParser.java:132 at org.aspectj.util.ConfigParser.addFileOrPattern ConfigParser.java:110 at org.aspectj.util.ConfigParser.parseOneArg ConfigParser.java:194 at org.aspectj.util.ConfigParser.parseArgs ConfigParser.java:157 at org.aspectj.util.ConfigParser.parseCommandLine ConfigParser.java:35 at org.aspectj.ajdt.ajc.BuildArgParser.genBuildConfig BuildArgParser.jav a:109 at org.aspectj.ajdt.ajc.BuildArgParser.genBuildConfig BuildArgParser.jav a:88 at org.aspectj.ajdt.ajc.AjdtCommand.genBuildConfig AjdtCommand.java:131 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:89 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 1 fail|abort, 1 error</description>
    <commit commitTime="2004-01-12 11:37:20" id="a4a12342a16145ee4ac835c77827d8e16f6078cb"/>
    <fixedFiles>
      <file>util/src/org/aspectj/util/ConfigParser.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="50200" reportTime="2004-01-19 06:01:00">
    <summary>aspectjrt.jar manifest file name needs changing to upper case</summary>
    <description>The name of the aspectjrt.jar's manifest file should be changed from META-INF/manifest.mf to META-INF/MANIFEST.MF According to the Jar file specification see http://java.sun.com/products/jdk/1 . 2/docs/guide/jar/manifest.html the name of the manifest file needs to be all upper case. It's beyond trivial, I know, but it does cause an unnecessary warning in at least one popular IDE for J2EE development IBM WebSphere Studio when the aspectjrt.jar is packaged in an EAR file. If there was an option to assign this a "very, very trivial" severity level I would.</description>
    <commit commitTime="2004-01-22 10:55:43" id="6f099df282f6d4994e09e457132677de7194c471"/>
    <fixedFiles>
      <file>build/src/org/aspectj/internal/tools/ant/taskdefs/AntBuilder.java</file>
    </fixedFiles>
  </bug>
  <bug id="50570" reportTime="2004-01-25 11:47:00">
    <summary>CatchClauseSignature has broken operation</summary>
    <description>It looks like the getParameterName operation on org.aspectj.lang.reflect. CatchClauseSignature is not working. Instead of returning the name of the exception as declared in the matched handler, returns the string value "&amp;lt;missing&amp;gt;". Here is a test case that shows the problem :- ------START OF TEST CASE CODE----------- public class MyApp { public void doSomething { // Get around "unreachable code error... if true { throw new BusinessException "Surprise!!" ; } System.out.println "Busy doing something." ; } public static void main String[] args { try { MyApp m = new MyApp ; m.doSomething ; } catch BusinessException be { System.out.println "Exception caught : " + be.getMessage ; } } } class BusinessException extends RuntimeException { BusinessException String message { super message ; } } aspect AppMonitor { pointcut problemHandling : handler Throwable+ ; before : problemHandling { CatchClauseSignature cSig = CatchClauseSignature thisJoinPointStaticPart.getSignature ; System.out.println "MONITOR::\tCaught a " + cSig.getParameterType .getName + " called " + cSig.getParameterName ; } } ------END OF TEST CASE CODE----------- The output from running the above was ... MONITOR:: Caught a BusinessException called &amp;lt;missing&amp;gt; Exception caught : Surprise !!!! Operating system : Windows XP AspectJ : 1.1.1 final and also on latest from CVS HEAD</description>
    <commit commitTime="2004-01-28 01:12:17" id="19bac866e44563dad29b6bebefa31c4e354ee96c"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>weaver/src/org/aspectj/weaver/Member.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedMember.java</file>
    </fixedFiles>
  </bug>
  <bug id="50776" reportTime="2004-01-28 12:21:00">
    <summary>fail in compiling aspect with overriding method introduction with different throws clause</summary>
    <description>A first class class A declares only one method with some exceptions in the throws clause void m throws Exception . A second class class B extends it without redefinig the method. An aspect declares a method introduction in the class B, with the same name, signature and return type of the one in class A, but without throws clause; this is a legal override. In the second class class B each invocation to the overriden method doesn't need a try-catch block, because it refers to his hown method that raises no exception. This code compiles using ajc version 1.0.6 built Jul 24, 2002 6:21 PM PST running on java 1.4.0 But not using AspectJ Compiler 1.1.1 AspectJ Compiler 1.1.0 class A{ public A {} public void m throws Exception{} } class B extends A{ public B {} public void some_code { m ;} } aspect C{ public void B.m {} }</description>
    <commit commitTime="2004-03-05 10:50:50" id="c79892369fa4225ee5eb71b42c96e289f2eb4fc9"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeMemberFinder.java</file>
    </fixedFiles>
  </bug>
  <bug id="50932" reportTime="2004-01-29 21:17:00">
    <summary>Add aspect patterns to sandbox</summary>
    <description>Jan has cleaned up his AspectJ patterns implementation and is ready to sumbit them as a patch. We need to answer the following questions, and then will be ready to commit them: * What license should they have? * Is the structure proposed below appropriate? Repository path: modules/docs/sandbox/ca.ubc.aspectPatterns .project .classpath readme.html src/ ca.ubc.aspectPatterns - examples - overview.html explains tests, etc - abstractFactory - overview.html explains pattern, both aj and java_ + aspectj sources for aspectj implementation + java sources for plain java implementation + &amp;lt;...&amp;gt; - TestCentre.java - &amp;lt;AbstractFactory.java, ...&amp;gt; doc/ - &amp;lt;generated javadocs?&amp;gt;</description>
    <commit commitTime="2004-04-02 11:07:41" id="e5ab0a5339aa52fe4a3810f18476806b65c0f222"/>
    <fixedFiles>
      <file>docs/sandbox/ubc-design-patterns/src/ca/ubc/cs/spl/aspectPatterns/examples/observer/java/Screen.java</file>
      <file>docs/sandbox/ubc-design-patterns/src/ca/ubc/cs/spl/aspectPatterns/examples/observer/aspectj/Screen.java</file>
      <file>docs/sandbox/ubc-design-patterns/src/ca/ubc/cs/spl/aspectPatterns/examples/observer/java/Main.java</file>
      <file>docs/sandbox/ubc-design-patterns/src/ca/ubc/cs/spl/aspectPatterns/examples/observer/java/ChangeObserver.java</file>
      <file>docs/sandbox/ubc-design-patterns/src/ca/ubc/cs/spl/aspectPatterns/examples/observer/aspectj/ColorObserver.java</file>
      <file>docs/sandbox/ubc-design-patterns/src/ca/ubc/cs/spl/aspectPatterns/examples/observer/aspectj/CoordinateObserver.java</file>
      <file>docs/sandbox/ubc-design-patterns/src/ca/ubc/cs/spl/aspectPatterns/examples/observer/aspectj/Point.java</file>
      <file>docs/sandbox/ubc-design-patterns/src/ca/ubc/cs/spl/aspectPatterns/examples/observer/aspectj/ScreenObserver.java</file>
      <file>docs/sandbox/ubc-design-patterns/src/ca/ubc/cs/spl/aspectPatterns/examples/observer/java/Point.java</file>
      <file>docs/sandbox/ubc-design-patterns/src/ca/ubc/cs/spl/aspectPatterns/patternLibrary/StrategyProtocol.java</file>
      <file>docs/sandbox/ubc-design-patterns/src/ca/ubc/cs/spl/aspectPatterns/examples/observer/aspectj/Main.java</file>
      <file>docs/sandbox/ubc-design-patterns/src/ca/ubc/cs/spl/aspectPatterns/examples/facade/aspectj/Main.java</file>
      <file>docs/sandbox/ubc-design-patterns/src/ca/ubc/cs/spl/aspectPatterns/examples/factoryMethod/aspectj/CreatorImplementation.java</file>
      <file>docs/sandbox/ubc-design-patterns/src/ca/ubc/cs/spl/aspectPatterns/examples/observer/java/ChangeSubject.java</file>
      <file>docs/sandbox/ubc-design-patterns/src/ca/ubc/cs/spl/aspectPatterns/examples/adapter/aspectj/Main.java</file>
      <file>docs/sandbox/ubc-design-patterns/src/ca/ubc/cs/spl/aspectPatterns/examples/facade/java/Main.java</file>
    </fixedFiles>
  </bug>
  <bug id="51320" reportTime="2004-02-07 12:26:00">
    <summary>ClasscastException on concretization of if false</summary>
    <description>I get the following exception when weaving the attached aspect on the dev build. java.lang.ClassCastException at org.aspectj.weaver.patterns.IfPointcut.concretize1 IfPointcut.java:156 at org.aspectj.weaver.patterns.IfPointcut.concretize IfPointcut.java:143 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:119 at org.aspectj.weaver.Checker.concretize Checker.java:35 at org.aspectj.weaver.CrosscuttingMembers. addShadowMunger CrosscuttingMembers.java:78 at org.aspectj.weaver.CrosscuttingMembers.addDeclare CrosscuttingMembers. java:102 at org.aspectj.weaver.CrosscuttingMembers.addDeclares CrosscuttingMembers. java:92 at org.aspectj.weaver.CrosscuttingMembersSet. addAdviceLikeDeclares CrosscuttingMembersSet.java:65 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment. addAdviceLikeDeclares AjLookupEnvironment.java:147 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment. completeTypeBindings AjLookupEnvironment.java:122 at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java: 300 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:314 at org.aspectj.ajdt.internal.core.builder.AjBuildManager. performCompilation AjBuildManager.java:384 at org.aspectj.ajdt.internal.core.builder.AjBuildManager. doBuild AjBuildManager.java:125 at org.aspectj.ajdt.internal.core.builder.AjBuildManager. batchBuild AjBuildManager.java:70 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:104 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:234 at org.aspectj.tools.ajc.Main.runMain Main.java:170 at org.aspectj.tools.ajc.Main.main Main.java:81</description>
    <commit commitTime="2004-02-25 11:14:32" id="fbc0aa305ea367e5fbeb99acf9907ae3a155f16a"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/IfPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="51322" reportTime="2004-02-07 17:11:00">
    <summary>Introduce Unknown Type to class causes Null pointer exception</summary>
    <description>Introduce method with an unknown type as an arguement as follows: class A {} public abstract aspect B { public void A.someMethod WCharType a { //blah } } WCharType is an unknown type or is forgotten to be imported in my case . This shall cause ajc to puke the following: java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.ast.InterTypeMethodDeclaration.build InterTypeMethodDeclaration .java:87 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTypeAndPerClause AspectDeclarat ion.java:744 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildInterTypeAndPerClause AjLookupE nvironment.java:206 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnviron ment.java:94 at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:310 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:324 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:373 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:125 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:70 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:99 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 /home/czhang/eclipse/workspace/lib/libajob/org/omg/PortableServer/portable/Delegate.java:0 Internal compiler error java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.ast.InterTypeMethodDeclaration.build InterTypeMethodDeclaration .java:87 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTypeAndPerClause AspectDeclarat ion.java:744 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildInterTypeAndPerClause AjLookupE nvironment.java:206 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnviron ment.java:94 at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:310 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:324 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:373 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:125 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:70 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:99 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 !! no source information available !! !! no source information available !! ABORT Exception thrown from AspectJ 1.1.1 This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. null java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.ast.InterTypeMethodDeclaration.build InterTypeMethodDeclaration .java:87 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTypeAndPerClause AspectDeclarat ion.java:744 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildInterTypeAndPerClause AjLookupE nvironment.java:206 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnviron ment.java:94 at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:310 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:324 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:373 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:125 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:70 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:99 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 1 fail|abort, 1 error</description>
    <commit commitTime="2004-03-15 22:38:03" id="5c67166488df998bc208567c2fd27f21b52592c5"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java</file>
    </fixedFiles>
  </bug>
  <bug id="51919" reportTime="2004-02-12 18:12:00">
    <summary>Polymorphic ITD fails in CVS HEAD From ajdt 1.1.6</summary>
    <description>The following code causes the compiler to fail with a NPE in the version that was included in ajdt 1.1.6 developer build . public aspect LogManager { public void Loggable.logTrace Object message { } // no crash if the next method on the next line is renamed public void Loggable.logTrace Object message, Throwable t { } } public interface Loggable { } Example crash: C:\eclipse\workspace\atrack&amp;gt;ajc -d build @isolateError.lst trouble in: ABORT Exception thrown from AspectJ DEVELOPMENT This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. null java.lang.NullPointerException at org.aspectj.weaver.bcel.LazyMethodGen.getSignature LazyMethodGen.java :1225 at org.aspectj.weaver.bcel.BcelClassWeaver$1.compare BcelClassWeaver.jav a:676 at java.util.Arrays.mergeSort Arrays.java:1278 at java.util.Arrays.sort Arrays.java:1219 at java.util.Collections.sort Collections.java:155 at org.aspectj.weaver.bcel.BcelClassWeaver.weaveInAddedMethods BcelClass Weaver.java:669 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:35 2 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:79 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:484 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:455 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:392 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.weaveAndGenerat eClassFiles AjBuildManager.java:262 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:156 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:70 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:102 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:231 at org.aspectj.tools.ajc.Main.runMain Main.java:168 at org.aspectj.tools.ajc.Main.main Main.java:81 1 fail|abort</description>
    <commit commitTime="2004-02-24 10:00:10" id="b1f25a3c30be719bbf6ba13d25754380dd2ca939"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="51929" reportTime="2004-02-12 21:13:00">
    <summary>Advice calling protected super method causing java.lang.VerifyError 'Bad access to protected data'</summary>
    <description>A java.lang.VerifyError is thrown at runtime complaining about 'Bad access to protected data' when advice, on a sub-aspect, that calls a protected method, on the super-aspect, is woven into a class. However another call to the same method woven into the same class but due to advice declared in the super-aspect works fine. The aspects were woven into precompiled by sun's 1.4 javac classes. The verify error occurs under both sun's 1.4 and blackdowns 1.3 VMs, and presumably all VMs. Workaround: Making the protected method public fixes the verify error. A test case is available in CVS: tests/bugs/protectedvf/... tests/ajcTestFailing.xml</description>
    <commit commitTime="2004-02-19 22:09:16" id="6ddae42579ceb781831e08f0fcf77a4ff4ffb5c0"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java</file>
      <file>tests/bugs/protectedvf/main/Driver.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InlineAccessFieldBinding.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="52394" reportTime="2004-02-18 13:35:00">
    <summary>inter-type declarations cause JRockit Crash</summary>
    <description>BEA's JRockit JVM version: 8.1sp2-1.4.1_05-Load10-viking-win32-sthqa29-20031105-1554 crashes on simple inter-type declarations. Obviously I have also submitted this bug to BEA, but the AJ team may be able to shed some light on what is going on and where if anywhere BEA's JVM is behaving wrong. The cannonical example lies below: public class SimpleClass { public static void main String[] args { SimpleClass simple = new SimpleClass ; } } public aspect SimpleAspect { public int SimpleClass.foo; } When running SimpleClass I get a JVM crash with the following thread stack trace. Thread Stack Trace: at _exprPush+112 @0082FF70 at COM.jrockit.vm.RNI.toNative Native Method @32520000 at COM.jrockit.vm.RNI.clinitTrampoline Native Method @325200FA at com.vms.adbase.jvmcrashtest.SimpleClass.&amp;lt;init&amp;gt; SimpleClass.java:4 @344B0055 at com.vms.adbase.jvmcrashtest.SimpleClass.main SimpleClass.java:6 @344B0034 --- End of stack trace Feel free to ask me for further details. JRockit can be downloaded at: http://commerce.bea.com/showallversions.jsp?family=WLJR . I reproduced this error on Windows XP, but it also happend on RedHat. Is it worth adding JRockit to AspectJ's compatibility test suite?</description>
    <commit commitTime="2004-03-04 16:09:34" id="5d73494d7d222b92cdbb19f860f9215a07430681"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectClinit.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="53012" reportTime="2004-02-24 19:43:00">
    <summary>declare precedence on a class should be a compile-time error</summary>
    <description>The compiler silently accepts ---- public class DeclarePrecedence { public static void main String[] args { System.out.println "hello" ; } } aspect DP { declare precedence: DeclarePrecedence, DP; before : staticinitialization DeclarePrecedence { System.out.println "ok" ; } } ---- Since this is likely to be a mistake, an error would be nice. However, that would mean saying !TargetClass &amp;amp;&amp;amp; TargetClass+ to pick out the aspect subtypes of TargetClass.</description>
    <commit commitTime="2004-03-19 09:28:14" id="0a017593dcbeab409c1634da87b3f500b848e903"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java</file>
    </fixedFiles>
  </bug>
  <bug id="53209" reportTime="2004-02-26 14:09:00">
    <summary>Support for copying resources</summary>
    <description>Bug 46347 notes that ajc correctly does not copy resources from binary input directories, but does from binary input jars. The Ant taskdef has some support for copying resources, but I don't believe it has enough a P3 to make it a drop-in replacement for Javac, which does copy resources or b P4 to get resources from binary input directories into the output. Currently supported: - sourceRootCopyFilter supports copying resources from the source roots, but not for other resources. - copyInjars: this copies resources from input jars; it duplicates ajc behavior and is not needed. Supporting b requires snooping the -inpath for directories to copy likely with a flag defaulting to off .</description>
    <commit commitTime="2005-03-22 21:02:34" id="1dbed37c0e72fce1f4c4c01ada2c980b6e6a8541"/>
    <fixedFiles>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="53981" reportTime="2004-03-06 22:43:00">
    <summary>proceed used as method name in around advice</summary>
    <description>Using a method named proceed .. in around advice confuses the compiler in at least the 2-3 ways shown below . True of the current tree untested in 1.1.1 . Workaround for now is to rename the method. ---- first problem: NPE in compiler java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.ast.MakeDeclsPublicVisitor.endVisit MakeDeclsPublicVisitor.java:44 public class Proceeding { public static void main String[] args { } static aspect A { interface IProceed { void proceed Runnable next ; } IProceed decorator; void around : execution void main String[] { decorator.proceed new Runnable { public void run { proceed ; } } ; } } } ---- second problem: incorrect error wrt number of arguments public class Proceeding { public static void main String[] args { } static aspect A { void around : execution void main String[] { Proceeding.proceed null ; // BUG: treated as proceed Object ; } } static void proceed Object o {} } ---- third hypothetical: we should document how ambiguity is resolved public class Proceeding { public static void main String[] args { } static aspect A { void around : execution void main String[] { proceed ; // special form or Proceeding.proceed ? } } void proceed {} }</description>
    <commit commitTime="2004-08-10 13:22:08" id="05dabd1821fffd9f353d1e965a56658b962c82d7"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/Proceed.java</file>
    </fixedFiles>
  </bug>
  <bug id="53999" reportTime="2004-03-07 22:07:00">
    <summary>"can't bind type" message has $ for . in type name for declare soft</summary>
    <description>cosmetic mistake in error message... expected: can't bind type name 'unknown.Error' actual: can't bind type name 'unknown$Error' not sure why it would ever be munged with $ public class Test { public static void main String[] args { test ; } static void test { throw new Error "hello" ; } static aspect A { declare soft : unknown.Error : call void test ; // CE } }</description>
    <commit commitTime="2004-07-27 10:34:41" id="936459c28229321deb0b09d076193be32cd9754e"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java</file>
    </fixedFiles>
  </bug>
  <bug id="54238" reportTime="2004-03-09 22:52:00">
    <summary>Restore build cancelling to Swing-based IDEs</summary>
    <description>Core compiler implementation changes have resulted in an incompatability with AJDE's build cancelling mechanism. Once the core canceling behavior stabilizes this needs to be restored.</description>
    <commit commitTime="2004-04-27 18:55:41" id="a17b51bec37c42f0bf29df5bc454aff948bc6105"/>
    <fixedFiles>
      <file>ajbrowser/src/org/aspectj/tools/ajbrowser/BasicEditor.java</file>
    </fixedFiles>
  </bug>
  <bug id="54421" reportTime="2004-03-11 03:00:00">
    <summary>Compile time declarations warning and error do not accept string concatenation with +</summary>
    <description>The following code does not compile because the message uses string concatenation the + operator . public class WarningSample { public void method {} public void anotherMethod { this.method ; } } aspect WarningAspect { pointcut illegalCall : call * WarningSample.method &amp;amp;&amp;amp; within WarningSample ; // the same thing happens with declare error declare warning: illegalCall : "Hey, don't " + "do that, that is not nice. You should do something else"; }</description>
    <commit commitTime="2004-08-11 13:18:24" id="d43a39103f476d95cade6b87b604ee4578de25b3"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PatternParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="54618" reportTime="2004-03-12 09:39:00">
    <summary>Test to see if we can compile incrementally ignores path changes</summary>
    <description>The JDT always does a full batch build if any element of a path has changed since the last build. Currently AjState ignores the paths classpath, aspectpath, injars, inpath when determining whether or not we can do an incremental compile. Consequently any changes to this are not picked up.</description>
    <commit commitTime="2004-03-17 11:36:47" id="90fbe5d804038002cc651421a5bc94a2b20f7e70"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</file>
    </fixedFiles>
  </bug>
  <bug id="54621" reportTime="2004-03-12 09:40:00">
    <summary>Incremental support ignores binary source</summary>
    <description>Our incremental compilation support ignores any change to a binary source input. ie. it does not notice the addition, update, or removal of a class file or jar on aspectpath, inpath, or injars .</description>
    <commit commitTime="2004-03-18 14:40:20" id="bd589bc1fad5a97182de39ec47310aef1a288d8b"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="54622" reportTime="2004-03-12 09:42:00">
    <summary>Incremental support ignores resources</summary>
    <description>Our incremental compilation support ignores changes to resources, and worse keeps binary copies of every resource it has ever seen in memory in bcelWeaver. resources.</description>
    <commit commitTime="2004-03-16 21:51:12" id="b25badd04fe14e6d86b85e59632d357a15233df0"/>
    <fixedFiles>
      <file>testing/src/org/aspectj/testing/harness/bridge/IncCompilerRun.java</file>
    </fixedFiles>
  </bug>
  <bug id="54625" reportTime="2004-03-12 09:43:00">
    <summary>Incremental support does not work with outjar</summary>
    <description>Either fix the class file deleting etc. to work with jars, or always do a batch build when working with outjars.</description>
    <commit commitTime="2004-03-16 15:16:46" id="1a4c02c986332c37aa1d1e86867b2434892eb11f"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</file>
    </fixedFiles>
  </bug>
  <bug id="54965" reportTime="2004-03-16 10:08:00">
    <summary>Incremental compilation does twice as much work as necessary</summary>
    <description>When I added support for -outjar in the test harness, I was surprised to find duplicate entry exceptions coming from the output file writing to the outjar. I traced it through, and found that every source file passed to an incremental compile is in fact compiled twice! The first time round we note the references, and of course each file has a reference to itself. Then we call "AjState.getFilesToCompile" looking to see if there are any further files to compile in another iteration. This method does not remember the set of files it just compiled, so since we have referenced each type we just compiled, and we have no reord of that fact, we compile them again. Second time around, the bytecodes are identical to the previous go, so recordClassFile doesn't note their dependents - and thus this time we terminate.</description>
    <commit commitTime="2004-03-16 15:07:19" id="41c6f6d0a10e881ac705a108cdd59f31d160e1c7"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</file>
    </fixedFiles>
  </bug>
  <bug id="55134" reportTime="2004-03-17 14:09:00">
    <summary>Incremental compilation does not delete weaver-generated class files</summary>
    <description>During incremental compilation, AjState records classes generated from source files following the initial compile phase, but before weaving. So that these can be passed to the weaver on a subsequent iteration if we need to reweave the world . During weaving of a given class file, the weaver may generate additional class files for e.g. around closures that get written to the output. If the orginal source file is deleted, these additional weaver generated classes are not deleted from the output since AjState does not know about them.</description>
    <commit commitTime="2004-03-18 14:36:58" id="7d6b500be325633c3057abaf973b8c56464d6706"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/UnwovenClassFile.java</file>
    </fixedFiles>
  </bug>
  <bug id="55341" reportTime="2004-03-19 04:32:00">
    <summary>error Type mismatch: cannot convert from java.lang.String to java.lang.String</summary>
    <description>When compiling a binary concrete aspect library for later LTW consisting of more than one aspect that performs an ITD on a target class not exposed to the weaver I get the following error: error Type mismatch: cannot convert from java.lang.String to java.lang.String The error does not oocur if a complete build &amp;amp; weave is performed. Testcase attached.</description>
    <commit commitTime="2004-04-02 12:45:13" id="0521e79aea0550b1357a7ccc6a5050f8ce27ce9b"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeMemberFinder.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BcweaverJarMaker.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/WeavingURLClassLoaderTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="56779" reportTime="2004-03-30 12:31:00">
    <summary>[ajdoc] add ajdoc support for inter-type declarations and other declare forms</summary>
    <description>Currently ajdoc only exposes the "Advises" and "Advised by" relationships from the structure model. It needs to support inter-type field and member declarations using a UI similar to how Javadoc presents inherited members. It also needs to support the other declare forms: error, warning, soft, parents, and precedence.</description>
    <commit commitTime="2005-10-05 16:15:43" id="ab6c7a562a887b70c6b5ad0ac644e7af58394aa3"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/IRelationship.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/PatternsTestCase.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/ExecutionTestCase.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/AjdocTests.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/SpacewarTestCase.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/StructureUtil.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/PointcutVisibilityTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="57430" reportTime="2004-04-05 04:58:00">
    <summary>exception printing</summary>
    <description>Exceptions thrown from the compiler used to be printed once, with the submit-bug header. Now they are printed twice, without and with the header. True of CVS version.</description>
    <commit commitTime="2004-04-07 09:07:43" id="e7ac54fae25b797a0d3609350a27330bea302fb9"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java</file>
    </fixedFiles>
  </bug>
  <bug id="57436" reportTime="2004-04-05 05:42:00">
    <summary>Java 1.5 fails to run classes produced by ajc</summary>
    <description>Java 1.5 beta reports a ClassFormatError when running programs e.g., spacewar compiled by ajc 1.1.1 and the latest CVS head. Sun's Java 1.5 beta binary-compatibility docs say that some obfuscators violated the .class format specification, so those .class files will fail when run under 1.5. The docs also say they are still incomplete. Although 1.5 is still beta, we would want to submit a bug to Sun if our implementation techniques are valid, so we don't have to change those techniques. For 1.2, we should at document if we don't fix, since many people are using 1.5.</description>
    <commit commitTime="2004-04-08 10:46:58" id="b0d32cafba6241023d1efdc343a2744a5e25a00d"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java</file>
    </fixedFiles>
  </bug>
  <bug id="57666" reportTime="2004-04-06 17:22:00">
    <summary>duplicate manifests cause resource-copying to gack</summary>
    <description>Ah, the joy of build infrastructure... Mostly self-explanatory trace, from a build Monday Apr 5, 2004 at 08:46:01 GMT: duplicate entry: META-INF/MANIFEST.MF duplicate entry: META-INF/MANIFEST.MF java.util.zip.ZipException: duplicate entry: META-INF/MANIFEST.MF at java.util.zip.ZipOutputStream.putNextEntry ZipOutputStream.java:163 at java.util.jar.JarOutputStream.putNextEntry JarOutputStream.java:90 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.writeResource AjBuildManager.java:344 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesFromJarFile AjBuildManager.java:288 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesToDestination AjBuildManager.java:253 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:195 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:94 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:102 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:280 at org.aspectj.tools.ajc.Main.runMain Main.java:217 at org.aspectj.tools.ajc.Main.main Main.java:79</description>
    <commit commitTime="2004-08-02 15:47:02" id="2b8fa314f21eddf8551715fdd571da2b611411d0"/>
    <fixedFiles>
      <file>ajde/testsrc/org/aspectj/ajde/AjdeTests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BcweaverJarMaker.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="57773" reportTime="2004-04-07 13:10:00">
    <summary>ajdoc crash</summary>
    <description>running ajdoc on a file with a nested inner interface fails: &amp;gt; Decorating C:\eclipse\workspace\atrack\dist\ajdoc\org\atrack\ui\controller\Edi tBugVirtualMocks.MyReplaced.html... An internal error occured in ajdoc Please copy the following text into an email message and send it, along with any additional information you can add to: aspectj-dev@eclipse.org java.io.FileNotFoundException: C:\eclipse\workspace\atrack\dist\ajdoc\org\atrack \ui\controller\EditBugVirtualMocks.MyReplaced.html The system cannot find the f ile specified java.io.FileNotFoundException: C:\eclipse\workspace\atrack\dist\ajdoc\org\atrack \ui\controller\EditBugVirtualMocks.MyReplaced.html The system cannot find the f ile specified at java.io.FileInputStream.open Native Method at java.io.FileInputStream.&amp;lt;init&amp;gt; Unknown Source at java.io.FileReader.&amp;lt;init&amp;gt; Unknown Source at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFile HtmlDecorator. java:127 at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromDecl HtmlDecora tor.java:111 at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromDecls HtmlDecor ator.java:54 at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromInputFiles Html Decorator.java:43 at org.aspectj.tools.ajdoc.Main.main Main.java:212</description>
    <commit commitTime="2004-04-08 16:50:05" id="91a29b735cee8c36e903c6c5dd8e3676d6527536"/>
    <fixedFiles>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/Main.java</file>
    </fixedFiles>
  </bug>
  <bug id="57780" reportTime="2004-04-07 13:43:00">
    <summary>ajdoc package summary should not show synthetic information</summary>
    <description>Ensure that the package overview HTML does not include prefixes like __AJDECLID:181:__ before each item see attached example .</description>
    <commit commitTime="2004-04-08 15:08:23" id="0c17e65b4d18052e78c6a67bae77a0b3a0427a8c"/>
    <fixedFiles>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/Main.java</file>
    </fixedFiles>
  </bug>
  <bug id="58520" reportTime="2004-04-14 13:29:00">
    <summary>ajdoc doesn't navigate to target details in some cases</summary>
    <description>When a file is advised, javadoc uses the following naming convention for setting its "A NAME": convertCheckedException java.lang.Throwable However, ajdoc uses the unqualified name for the argument, resuting in the follwing in-file anchor link: &amp;lt;class-name&amp;gt;.html#convertCheckedException Throwable   Which fails to navigate to the anchor within the file, although it does always go to the right file.</description>
    <commit commitTime="2005-12-21 10:37:43" id="bbdd4966a79864ea9979da81ca4725d6471b2fa9"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/AjdocTests.java</file>
      <file>ajdoc/testdata/pr119453/src/pack/C.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java</file>
    </fixedFiles>
  </bug>
  <bug id="58524" reportTime="2004-04-14 13:42:00">
    <summary>ajdoc should not use the Declaration and SymbolManager classes</summary>
    <description>In order to speed up porting porting to the old HTML generation code ajdoc continues to use the following classes: org.aspectj.tools.ajdoc.Declaration org.aspectj.tools.ajdoc.SymbolManager These funtion only as a wrapper to the ASM, and are not needed. The next refactoring effort should get rid of them and all those static methods as well! .</description>
    <commit commitTime="2006-01-16 16:46:54" id="f4c8bf91bced2ba5bc1e0aa6b264549ced1efe70"/>
    <fixedFiles>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/Main.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/Declaration.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/SymbolManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="58681" reportTime="2004-04-15 12:19:00">
    <summary>-X should output available -X options</summary>
    <description>ajc should emit the available -X options on -help or -X request the latter like java to get more traffic and feedback on the experimental options.</description>
    <commit commitTime="2004-07-27 15:44:24" id="6ea830044009af2991178f1833b6386143f2cc1b"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/AjdtCommand.java</file>
      <file>org.aspectj.ajdt.core/testsrc/EajcModuleTests.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/tools/ajc/MainTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="59196" reportTime="2004-04-20 03:42:00">
    <summary>"adviceexecution &amp;&amp; args " pcd does not pick up around advice execution because args does not match the AroundClosure parameter.</summary>
    <description>In the following sample, the advice defined in "other_aspect" does not pick up the execution of around advice defined in "some_aspect". It matches only against the before advice defined in "some_aspect". The implicit AroundClosure parameter of an around advice seems to come in the way of args matching. ------------------------------------------------------ aspect some_aspect { pointcut call_m int a, int b : call int test.m .. &amp;amp;&amp;amp; args a, b ; before int x, int y : call_m x, y { ... } int around int x, int y : call_m x, y { ... } } aspect other_aspect { before int x, int y : adviceexecution &amp;amp;&amp;amp; within some_aspect &amp;amp;&amp;amp; args x, y { ... } } -------------------------------------------------------- AspectJ doc has to state this explicitly.</description>
    <commit commitTime="2005-09-01 08:30:41" id="a66e0a2aa8a6cb057f4b0d740ad961fb1ede5e85"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="59208" reportTime="2004-04-20 05:23:00">
    <summary>Weaver fails in BCEL for large classes</summary>
    <description>This problem was first observed when weaving large binary legacy classes with the ajc 1.2 rc1 candidate. It turns out that BCEL fails with different error messages dependent on whether we are doing a binary weave or a straight ajc compile. In the latter case, the error message is rather confusing. To reproduce: 1. Compile and run the following code to produce Foo.java // File FooProducer.java public class FooProducer { public static final int N_METHODS = 50; public static final int N_STATEMENTS = Short.MAX_VALUE/ 2 * N_METHODS ; public static void main String[] args { System.out.println "public class Foo {" ; System.out.println "static java.util.Set hs = new java.util.HashSet ;" ; for int i = 0; i &amp;lt; N_METHODS; i++ { System.out.println "public void test" + i + " { " ; for int j = 0; j &amp;lt; N_STATEMENTS; j++ { System.out.println "hs.add new Object ;" ; } System.out.println "}" ; } System.out.println "}" ; } }// End of FooProducer.java 2. Create the following Aspect: // File a.aj aspect a { boolean around : target java.util.HashSet &amp;amp;&amp;amp; call boolean add .. { return false; } } // End of a.aj *** 3.a - straight compile and weave: ajc - sourceroots . ABORT Exception thrown from AspectJ 1.2rc1 This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. Expected class `CONSTANT_Utf8' at index 25700 and got CONSTANT_NameAndType[12] name_index = 25696, signature_index = 81 Expected class `CONSTANT_Utf8' at index 25700 and got CONSTANT_NameAndType[12] name_index = 25696, signature_index = 81 org.apache.bcel.classfile.ClassFormatException: Expected class `CONSTANT_Utf8' at index 25700 and got CONSTANT_NameAndType[12] name_index = 25696, signature_index = 81 at org.apache.bcel.classfile.ConstantPool.getConstant ConstantPool.java:271 at org.apache.bcel.classfile.Attribute.readAttribute Attribute.java:163 at org.apache.bcel.classfile.FieldOrMethod.&amp;lt;init&amp;gt; FieldOrMethod.java:98 at org.apache.bcel.classfile.Field.&amp;lt;init&amp;gt; Field.java:83 at org.apache.bcel.classfile.ClassParser.readFields ClassParser.java:270 at org.apache.bcel.classfile.ClassParser.parse ClassParser.java:172 at org.aspectj.weaver.bcel.Utility.makeJavaClass Utility.java:358 at org.aspectj.weaver.bcel.UnwovenClassFile.getJavaClass UnwovenClassFile.java:63 at org.aspectj.weaver.bcel.UnwovenClassFile.getClassName UnwovenClassFile.java:147 at org.aspectj.ajdt.internal.compiler.WeaverAdapter.acceptResult WeaverAdapter.java:177 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:621 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:563 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:239 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:114 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:376 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:600 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:160 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:94 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:102 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:280 at org.aspectj.tools.ajc.Main.runMain Main.java:217 at org.aspectj.tools.ajc.Main.main Main.java:79 1 fail|abort Signal 127 *** 3b - binary weave ajc -noweave -outjar test.jar a.aj javac -d classes Foo.java ajc -aspectpath test.jar -inpath classes ABORT Exception thrown from AspectJ 1.2rc1 This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. Class can't be both final and abstract Class can't be both final and abstract org.apache.bcel.classfile.ClassFormatException: Class can't be both final and abstract at org.apache.bcel.classfile.ClassParser.readClassInfo ClassParser.java:242 at org.apache.bcel.classfile.ClassParser.parse ClassParser.java:165 at org.aspectj.weaver.bcel.Utility.makeJavaClass Utility.java:358 at org.aspectj.weaver.bcel.UnwovenClassFile.getJavaClass UnwovenClassFile.java:63 at org.aspectj.weaver.bcel.UnwovenClassFile.getClassName UnwovenClassFile.java:147 at org.aspectj.ajdt.internal.compiler.WeaverAdapter.acceptResult WeaverAdapter.java:177 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:621 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:563 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:239 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:114 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:376 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:600 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:160 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:94 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:102 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:280 at org.aspectj.tools.ajc.Main.runMain Main.java:217 at org.aspectj.tools.ajc.Main.main Main.java:79 1 fail|abort Signal 127</description>
    <commit commitTime="2004-08-10 11:08:56" id="44a92e1a04f8f2f1a862f15f9d0b9ed761d05fd4"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/WeaverMessages.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="59596" reportTime="2004-04-22 05:11:00">
    <summary>Null pointer exception while weaving java.awt.Label</summary>
    <description>I tried to add an Aspect to java.awt.Label. I compile the aspect via: ajc -inpath /usr/local/j2sdk_nb/j2sdk1.4.2/jre/lib/rt.jar Timestamp.java Here is the aspect Timestamp.java: aspect Timestamp { private int java.awt.Label._ts_read = 0; private int java.awt.Label._ts_write = 0; pointcut writeOp : call void java.awt.Label.setText String ; pointcut readOp : call String java.awt.Label.getText ; after java.awt.Label b returning: readOp &amp;amp;&amp;amp; target b { b._ts_read++; } after java.awt.Label b returning: writeOp &amp;amp;&amp;amp; target b { b._ts_write++; System.out.println b._ts_write ; } public static void main String[] args { java.awt.Label b1 = new java.awt.Label ; b1.setText "abc" ; } } Here is the error message I get from ajc: null java.lang.NullPointerException at org.aspectj.ajdt.internal.core.builder.EclipseAdapterUtils.makeLocationContext EclipseAdapterUtils.java:50 at org.aspectj.ajdt.internal.core.builder.EclipseAdapterUtils.makeSourceLocation EclipseAdapterUtils.java:120 at org.aspectj.ajdt.internal.core.builder.EclipseAdapterUtils.makeMessage EclipseAdapterUtils.java:129 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$4.acceptResult AjBuildManager.java:663 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.acceptResult AjCompilerAdapter.java:178 at org.aspectj.ajdt.internal.compiler.WeaverAdapter.finishedWith WeaverAdapter.java:203 at org.aspectj.ajdt.internal.compiler.WeaverAdapter.weaveCompleted WeaverAdapter.java:167 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:570 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:239 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:114 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:376 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:600 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:160 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:94 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:102 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:280 at org.aspectj.tools.ajc.Main.runMain Main.java:217 at org.aspectj.tools.ajc.Main.main Main.java:79 1 fail|abort</description>
    <commit commitTime="2004-04-23 16:24:27" id="a97f3b6758f778e9a19843ef984085b34be8e7d0"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java</file>
    </fixedFiles>
  </bug>
  <bug id="59599" reportTime="2004-04-22 06:03:00">
    <summary>Race condition in test suite for incremental</summary>
    <description>On faster machines my linux desktop, andy's home pc several of the tests in ajcTests.xml are failing suite attached . This appears to be due to a race condition between checking directory contents and waiting for the compilation to complete. I have an environment in which I can test candidate fixes if you can give me a pointer for what to tweak...</description>
    <commit commitTime="2004-05-05 10:18:34" id="bd1603312535dea0f2c6109a8b074631a3218929"/>
    <fixedFiles>
      <file>testing/src/org/aspectj/testing/harness/bridge/DirChanges.java</file>
    </fixedFiles>
  </bug>
  <bug id="59636" reportTime="2004-04-22 10:34:00">
    <summary>-log option not producing output - should it?</summary>
    <description>Using the "log" option with the iajc Ant task results in the named file being created but with no content in it. Verified on 1.1.1 and 1.2rc1. Simple test case to follow.</description>
    <commit commitTime="2005-04-20 12:35:08" id="6906800a16da50158ed9f767d36dbf6ff24d5022"/>
    <fixedFiles>
      <file>taskdefs/testsrc/org/aspectj/tools/ant/taskdefs/AjcTaskTest.java</file>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="59778" reportTime="2004-04-23 09:33:00">
    <summary>InterTypeMethodDeclaration.java:104</summary>
    <description>the exception below is caused by a non-imported type. adding a simple line import java.io.Serializable; solves the problem caused by private Serializable HibernateEntityRenderingHelper.id; unfortunately i have no time for testcase, and i doubt it happend in simple cases. - 101 java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.ast.InterTypeMethodDeclaration. build InterTypeMethodDeclaration.java:104 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration. buildInterTypeAndPerClause AspectDeclaration.java:753 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment. buildInterTypeAndPerClause AjLookupEnvironment.java:213 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment. completeTypeBindings AjLookupEnvironment.java:94 at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java: 300 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:314 at org.aspectj.ajdt.internal.core.builder.AjBuildManager. performCompilation AjBuildManager.java:383 at org.aspectj.ajdt.internal.core.builder.AjBuildManager. doBuild AjBuildManager.java:125 at org.aspectj.ajdt.internal.core.builder.AjBuildManager. batchBuild AjBuildManager.java:70 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:102 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:231 at org.aspectj.tools.ajc.Main.runMain Main.java:168 at org.aspectj.tools.ajc.Main.main Main.java:81</description>
    <commit commitTime="2004-05-07 08:21:05" id="0905c8023231f73cb81a98cda18761715fd11eaf"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java</file>
    </fixedFiles>
  </bug>
  <bug id="59909" reportTime="2004-04-26 05:40:00">
    <summary>CFlowStack removesThreads to late</summary>
    <description>Problem: The current implementation of CFlowStack Version 1.1-till 1.2 rc1 stores all threads in a hashtable. These Threads are removes after several calls to the methods getThreadStack . In our cases &amp;gt;70 calls. In our project, this cycle is much to long. We have soveral long running threads, which grap quite a lot of lot of memory. This memory can only be freed after the threads have been removed from the CFlowStack. In our production code we sum up to more than 300 Threads stored in different CFlowStack Varaibles. Often this results in out of memory Errors. Added patch provides an improved freeing scheme. It checks if the size of the table has grown, if it has, it checks if it can remove some threads.</description>
    <commit commitTime="2004-05-05 10:18:01" id="5f6b18be7a143c961ae1de5ffbf1aef3d249a55e"/>
    <fixedFiles>
      <file>runtime/src/org/aspectj/runtime/internal/CFlowStack.java</file>
    </fixedFiles>
  </bug>
  <bug id="60015" reportTime="2004-04-26 16:49:00">
    <summary>NPE, Incorrect XLint:unmatchedSuperTypeInCall warning</summary>
    <description>This is an incomplete bug report -- sorry no time not to further isolate. Running AJDT 1.1.6, I get dozens of these warnings: ---------- Warning does not match because declaring type is java.lang.Object, if match desired use target st.ata.mc.exim.DatastoreReader [Xlint:unmatchedSuperTypeInCall] Blah.aj project/src/package/dir line 22 ---------- for something like this code: ---------- import pack.Interface; ... pointcut dsrCall : call * Interface.* .. ; // WARNING HERE ... ---------- Each warning points to the pointcut not the join point shadow . NPE running from the command-line with the latest tree will attach .</description>
    <commit commitTime="2004-08-03 14:53:38" id="ef7885fd1269261aec9cb1265f0e15472fdb03bb"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="61374" reportTime="2004-05-07 08:45:00">
    <summary>Version the BCEL libraries to allow graceful failure when the wrong version is found.</summary>
    <description>We have bugs reported like bug 59921 and bug 60389 . These bugs relate to the problem where the compiler locates the wrong version of BCEL libraries - because they are a different version, some of the methods AspectJ calls either don't exist or have different parameter lists. The error the user sees is a horrible internal compiler error. if we versioned the BCEL libraries as we changed them, we could check the version found on compiler startup and verify they are as expected. if the version doesn't match we can report a nice readable error message that tells the user how to fix it.</description>
    <commit commitTime="2004-08-12 07:57:44" id="228fc8df0081ca7ac06eb6c1a6dc43b06ee3f17d"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelRenderer.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAttributes.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/bcel/MoveInstructionsWeaveTestCase.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/Tag.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelCflowStackFieldAdder.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/ExceptionRange.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelFieldRef.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/Utility.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelMethod.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/Range.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelCflowAccessVar.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/bcel/WeaveTestCase.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelVar.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/bcel/ArgsWeaveTestCase.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/ShadowRange.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelField.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/UnwovenClassFile.java</file>
    </fixedFiles>
  </bug>
  <bug id="61411" reportTime="2004-05-07 12:00:00">
    <summary>AJDoc launch script on Windows can lose arguments</summary>
    <description>Using AspectJ 1.2rc1 on Windows XP This report highlights a problem that I've seen using ajdoc.bat on Windows but the issue applies equally to the ajc.bat and ajbrowser.bat files as well. The %ASPECTJ_HOME%\bin\ajdoc.bat file that users run to launch the ajdoc tool imposes a limit of only 9 command line arguments that may be passed to the class org.aspectj.tools.ajdoc.Main. In scenarios where there the -sourcepath, -classpath, -d etc options are used it is easy for these to "eat up" the list of arguments that are passed into the JVM. A long list of packages entered at the end of the ajdoc.bat command can be truncated or possibly even ignored in which case an error message will be output telling the user that no classes or packages have been specified . In order to prevent a limit being put on the number of arguments passed to the launched JVM, the invocation line needs to end with %* rather than the %1 %2 %3 %4 %5 %6 %7 %8 %9 list it currently uses. The proposed fix also *seems* could somebody else confirm this ? to sort out another problem regarding the ajdoc.bat file which is this : long semi- colon delimited paths supplied as the arguments for the -sourcepath and -classpath options seem to get split apart and passed into the JVM as separate arguments unless the entire path list is supplied inside quotes. This should not be necessary. It seems that the batch file processor interprets the semi-colons in a path list as delimiters between arguments. Consequently each element in the path list is treated as a separate argument instead of being part of one big string representing the sourcepath or classpath.</description>
    <commit commitTime="2004-05-28 15:19:14" id="39c3a3bb4a0c939c1dfbc33b0ba560614b43d8a2"/>
    <fixedFiles>
      <file>build/src/$installer$/org/aspectj/Main.java</file>
    </fixedFiles>
  </bug>
  <bug id="61536" reportTime="2004-05-09 12:50:00">
    <summary>Front-end bug, shouldn't allow patterns of the form foo.., should be foo..*</summary>
    <description>See following code: public class Test2 { public static void main String args[] { System.out.println "Hi" ; } } aspect Aspect2 { // shouldn't one have to say, java..* instead of java.. in the following?? // Note that the first advice incorrect one passes the front-end, but does // not match, whereas the second one does match. I believe the front-end // should reject the first one. before : call * java.. .. &amp;amp;&amp;amp; within Test2 { System.out.println "Incorrect One: Before a call of method in a java package " ; } before : call * java..* .. &amp;amp;&amp;amp; within Test2 { System.out.println "Correct One: Before a call of method in a java package " ; } }</description>
    <commit commitTime="2004-07-29 12:39:42" id="45bce91f642a86ca3db7238d9e4cfb81d85e4f5b"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/PatternParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="61538" reportTime="2004-05-09 12:58:00">
    <summary>nested uses of this inside constructors not handled properly for initialization and preinitialization pointcuts</summary>
    <description>public class ConstructorMain { // Note that in the case of this calls in a constructor, the // treatment of preinitialization and initialization join points are // not correct, and are sensitive to the order in which constructors // are given in the class file. // // Below we see everything is ok for preinit and init join points for // constructors in class B, but are not correct for class C. The only // difference is in the order in which the constructors are given. The // inlining strategy for handling this calls must be broken in ajc. public static void main String args[] { int k = 100; // These are ok, note order constructors given in class System.out.println "----------------------" ; B b3 = new B 3+k, 4+k ; System.out.println "----------------------" ; B b2 = new B 2 + k ; System.out.println "----------------------" ; B b1 = new B ; // First two are ok, but last one not ok System.out.println "----------------------" ; C c3 = new C 3+k, 4+k ; System.out.println "----------------------" ; C c2 = new C 2 + k ; System.out.println "----------------------" ; C c1 = new C ; System.out.println "----------------------" ; } } class A { int x = 4; A int x { this.x = x; } } class B extends A { int y; static int k = 4; static int j = 5; static int l = 6; B int x, int y { super x+y ; this.y = x+y; } B int x { this x+l, x+l ; this.y = x+l; } B { this k+j ; this.y = l; } } class C extends A { int y; static int k = 4; static int j = 5; static int l = 6; C { this k+j ; this.y = l; } C int x { this x+l, x+l ; this.y = x+l; } C int x, int y { super x+y ; this.y = x+y; } } aspect ConstructorAspects { static private int aspectnesting = 0; static void message String s { for int i=0; i&amp;lt;aspectnesting; i++ System.out.print "---+" ; System.out.println s ; } // call of all constructors pointcut allconstrcalls : call *..new .. &amp;amp;&amp;amp; !within ConstructorAspects &amp;amp;&amp;amp; !call java.lang..new .. ; // execution of all constructors pointcut allconstrexecutions : execution *..new .. &amp;amp;&amp;amp; !within ConstructorAspects ; // intialization of all constructors pointcut allconstrinitializations : initialization *..new .. &amp;amp;&amp;amp; !within ConstructorAspects ; // preinitialization of all constructors pointcut allconstrpreinitializations : preinitialization *..new .. &amp;amp;&amp;amp; !within ConstructorAspects ; // before advice before : !within ConstructorAspects { message "BEFORE: " + thisJoinPointStaticPart.getSourceLocation + " " +thisJoinPointStaticPart.toLongString ; aspectnesting++; } // after advice after returning : !within ConstructorAspects { aspectnesting--; message "AFTER: " + thisJoinPointStaticPart.getSourceLocation + " " +thisJoinPointStaticPart.toLongString ; } }</description>
    <commit commitTime="2004-05-12 12:52:55" id="b9ec4df1259123c4cccc09f5a8b0549b412ee071"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="61768" reportTime="2004-05-11 13:35:00">
    <summary>scope for intertype methods</summary>
    <description>/* According to the documentation, the scope rules for intertype method declarations are interpreted from the originating aspect. The only exceptions I thought are the use of "this" and "super" which refer to the target type. According to that interpretation, the program below is type correct, but ajc generates two error messages, shown in comments at the relevant lines. Note that it's ok to access private static fields of the aspect, but not to use private classes of the aspect. If this is a feature and not a bug, what are the precise scope rules for intertype method declarations? */ aspect Aspect { private static int y = 5; private class A { int x = 3; } private static void B.happy { System.out.println y ; // happy accessing private field y } private static void B.foo A z { System.out.println z.x ; // ERROR: The type Aspect.A is not visible } public void B.bar { B.foo new A ; // ERROR: The type A is not visible } } class B { } public class IT { public static void main String[] args { new B .bar ; } }</description>
    <commit commitTime="2004-08-11 16:51:24" id="8c5d743c848479b07f3d35479292002aa01b4f70"/>
    <fixedFiles>
      <file>tests/bugs/oxford/PR62475.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="62073" reportTime="2004-05-13 07:31:00">
    <summary>false ambigous binding error introduced in 1.2rc2</summary>
    <description>QuestionGroupTreeViewScreen.java:29 error Ambiguous binding of type net.sf. hibernate.Session. Use one args .. per matched join point import com.netvisor.common.data_model_metadata.EntityMetadata.Property; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ see attached file.</description>
    <commit commitTime="2004-05-14 09:26:03" id="66818c77ef60abcd8562e0482fe44541ad185c0a"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/NameBindingPointcut.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverMessageHandler.java</file>
    </fixedFiles>
  </bug>
  <bug id="62227" reportTime="2004-05-14 05:34:00">
    <summary>Load Time Weaving aborts on any kind of warning declare/xlint</summary>
    <description>The message handler in the weaving adapter for load time weaving says: public boolean handleMessage IMessage message throws AbortException { if !isIgnoring message.getKind { if verbose System.err.println message.getMessage ; throw new AbortException message ; } return true; } This means for warnings it goes bang. So, even a declare warning that is meant to tell the user something informational during a LTW will cause the code to blow up. The fix is straightforward and simply to log warning messages and only fail for error messages. I am waiting for a testcase from Matthew before checking in the fix.</description>
    <commit commitTime="2004-05-14 12:51:52" id="9ebfc84930fde3f56a0166a5abb671029d457ea4"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BcweaverJarMaker.java</file>
      <file>weaver/src/org/aspectj/weaver/WeavingURLClassLoader.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/WeavingURLClassLoaderTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="62458" reportTime="2004-05-17 07:21:00">
    <summary>An if pointcut inside a perthis clause causes an ABORT - null pointer exception in ajc</summary>
    <description>An if pointcut inside a perthis causes the following dump: ABORT Exception thrown from AspectJ 1.2rc2 This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. null java.lang.NullPointerException at org.aspectj.weaver.patterns.IfPointcut.concretize1 IfPointcut.java:171 at org.aspectj.weaver.patterns.IfPointcut.concretize IfPointcut.java:143 at org.aspectj.weaver.patterns.AndPointcut.concretize1 AndPointcut.java:88 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:135 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:122 at org.aspectj.weaver.patterns.PerObject.concretize PerObject.java:84 at org.aspectj.weaver.CrosscuttingMembers.setPerClause CrosscuttingMembers.java:207 at org.aspectj.weaver.ResolvedTypeX.collectCrosscuttingMembers ResolvedTypeX.java:329 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect CrosscuttingMembersSet.java:57 at org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave BcelWeaver.java:322 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:222 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:114 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:376 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:601 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:160 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:94 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:102 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:280 at org.aspectj.tools.ajc.Main.runMain Main.java:217 at org.aspectj.tools.ajc.Main.main Main.java:79 Here is a small test program to demonstrate the bug. Just try compiling it. public class Main { public static void main String [] args { System.out.println "Hello World" ; } } // Note the use of an if inside a perthis, causes the ajc compiler to // throw an exception aspect Aspect perthis call * * .. // if you comment out the following line, everything is ok, so // it seems tobe the use of if in the perthis that is not handled correctly &amp;amp;&amp;amp; if 4==3 { before : call * *..* .. &amp;amp;&amp;amp; !within Aspect* { System.out.println "Advice 1" ; } }</description>
    <commit commitTime="2004-05-18 15:53:30" id="b8d69e0fb755e3565831662007cef08118b24bd5"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/IfPointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="62606" reportTime="2004-05-18 04:35:00">
    <summary>ITCs don't run field initialisers</summary>
    <description>/* ITC's don't run field initialisers. Intertype constructors cannot possibly run the field initialisers of the target when you're weaving into byte code. ajc appears to take this as a license not to run the field initialisers, even when weaving into source.</description>
    <commit commitTime="2005-11-03 17:09:45" id="9025e8b4185cf965d51e64b1ed0aba7e43d33842"/>
    <fixedFiles>
      <file>tests/java5/generics/itds/Parse6.java</file>
      <file>tests/new/DeclareAspectConstructorCE.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>tests/new/AdviceOnIntroduced.java</file>
      <file>tests/base/test115/Driver.java</file>
      <file>tests/incremental/initialTests/classWAroundClosureRemoved/AdviceOnIntroduced.delete.20.java</file>
      <file>tests/java5/generics/itds/Parse3.java</file>
      <file>tests/bugs150/PR82570_1.java</file>
      <file>tests/design/intro/Simple.java</file>
      <file>tests/base/test103/Driver.java</file>
      <file>tests/incremental/initialTests/classWAroundClosureRemoved/AdviceOnIntroduced.java</file>
      <file>tests/bugs/DecwInitializationITD.java</file>
      <file>tests/new/DeclareOnlyAspectConstructorCE.java</file>
      <file>tests/base/test118/Driver.java</file>
      <file>tests/base/test121/Driver.java</file>
      <file>tests/bugs/WithincodeNPE01.java</file>
      <file>tests/bugs150/pr113073.java</file>
      <file>tests/incrementalju/initialTests/classWAroundClosureRemoved/src/AdviceOnIntroduced.java</file>
    </fixedFiles>
  </bug>
  <bug id="62642" reportTime="2004-05-18 10:23:00">
    <summary>proper handling of ExceptionInIntializer inside &lt;clinit&gt; in presence of after throwing advice</summary>
    <description>When a &amp;lt;clinit&amp;gt; of a class contains after throwing advice that may catch ExceptionInInitializer errors due to an embedded advice aspectOf that fails, the ExceptionInIntializer error does not get properly reported. For the example below: public class Main { static int x = 13; int y; public Main { y= 14; } public static void main String args[] { Main m = new Main ; m.y = 3; System.out.println "hi" ; } } aspect Aspect { before : within * { System.out.println "BEFORE " + thisJoinPointStaticPart.getKind + " at " + thisJoinPointStaticPart.getSourceLocation ; } after : within * { System.out.println "AFTER " + thisJoinPointStaticPart.getKind + " at " + thisJoinPointStaticPart.getSourceLocation ; } } .... when compiled with ajc, and then run, the following exception is given, Exception in thread "main" java.lang.NoClassDefFoundError at Main.&amp;lt;clinit&amp;gt; Main.java:1 when really one wants the following: Exception in thread "main" java.lang.ExceptionInInitializerError at Main. ... Caused by: org.aspectj.lang.NoAspectBoundException: Aspect at Aspect.aspectOf .. ------------- Here is a fix ... I give the decompiled &amp;lt;clinit&amp;gt; for Main.java and indicate with comments, look for ***LJH ****, what can be woven to fix it. Basically, the catch block for after throwing, when in &amp;lt;clinit&amp;gt;, should first check if the caught exception if a ExceptionInInitializerError, and if so just throw it. ----------- static { org.aspectj.runtime.reflect.Factory r1; java.lang.Throwable r2, r31; int $i0; r1 = new Factory "Main.java", Class.forName "Main" ; ajc$tjp_0 = r1.makeSJP "field-set", r1.makeFieldSig "8-x-Main-int-" , 2 ; ajc$tjp_1 = r1.makeSJP "staticinitialization", r1.makeInitializerSig "8--Main-" , 2 ; ajc$tjp_10 = r1.makeSJP "preinitialization", r1.makeConstructorSig "1--Main----" , 5 ; ajc$tjp_2 = r1.makeSJP "field-set", r1.makeFieldSig "0-y-Main-int-" , 6 ; ajc$tjp_3 = r1.makeSJP "constructor-execution", r1.makeConstructorSig "1--Main----" , 6 ; ajc$tjp_4 = r1.makeSJP "constructor-call", r1.makeConstructorSig "1--Main----" , 10 ; ajc$tjp_5 = r1.makeSJP "field-set", r1.makeFieldSig "0-y-Main-int-" , 11 ; ajc$tjp_6 = r1.makeSJP "field-get", r1.makeFieldSig "19-out-java.lang.System-java.io.PrintStream-" , 12 ; ajc$tjp_7 = r1.makeSJP "method-call", r1.makeMethodSig "1-println-java.io.PrintStream-java.lang.String:-arg0:--void-" , 12 ; ajc$tjp_8 = r1.makeSJP "method-execution", r1.makeMethodSig "9-main-Main-[Ljava.lang.String;:-args:--void-" , 10 ; ajc$tjp_9 = r1.makeSJP "initialization", r1.makeConstructorSig "1--Main----" , 6 ; try { Aspect.aspectOf .ajc$before$Aspect$1$36f01b1c ajc$tjp_1 ; $i0 = 13; try { Aspect.aspectOf .ajc$before$Aspect$1$36f01b1c ajc$tjp_0 ; x = $i0; } catch Throwable $r30 { /*** LJH insert here *****/ if $r30 instanceof ExceptionInIntializerError //*** throw $r30 ; //*** /***********/ r31 = $r30; Aspect.aspectOf .ajc$after$Aspect$2$36f01b1c ajc$tjp_0 ; throw r31; } Aspect.aspectOf .ajc$after$Aspect$2$36f01b1c ajc$tjp_0 ; } catch Throwable $r36 { /*** LJH insert here *****/ if $r36 instanceof ExceptionInIntializerError //*** throw $r36 ; //*** /***********/ r2 = $r36; Aspect.aspectOf .ajc$after$Aspect$2$36f01b1c ajc$tjp_1 ; throw r2; } Aspect.aspectOf .ajc$after$Aspect$2$36f01b1c ajc$tjp_1 ; }</description>
    <commit commitTime="2004-08-17 14:04:29" id="84e4e53608871ab3ad0381d19abd8fa2e1bc4533"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="64222" reportTime="2004-05-26 16:13:00">
    <summary>[parsing] Misleading error message for around advice without return type</summary>
    <description>If you try to compile the code: class C { int dummy {return 5;} } aspect Foo { around : call int C.dummy { proceed ; } } You'll get an error, highlighting the "aspect Foo {" line that says: Syntax error on token "{", Type expected after this token Granted, the error might be obvious in this case, but if the preceeding line is a complex pointcut, one might be lead to believe there is something wrong with their pointcut instead. A better error message would highlight the line that "around" appears and say something more like Syntax error: around advice needs a return type specified I believe an error production could probably be used to handle this relatively common mistake.</description>
    <commit commitTime="2008-06-10 18:52:11" id="58961143f7f8e28243a9ae58cd89b25ee14b318d"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc161/Ajc161Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="64331" reportTime="2004-05-27 09:58:00">
    <summary>java.lang.NullPointerException in WeaverMessageHandler class</summary>
    <description>I've got an java.lang.NullPointerException while running the aspectJ 1.2 compiler. That's the stack trace: [iajc] If you don't find the exception below in a bug, please add a new bug [iajc] at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ [iajc] To make the bug a priority, please include a test program [iajc] that can reproduce this exception. [iajc] null [iajc] java.lang.NullPointerException [iajc] at org.aspectj.ajdt.internal.compiler.WeaverMessageHandler.buildSeeAlsoProblems WeaverMessageHandler.java:172 [iajc] at org.aspectj.ajdt.internal.compiler.WeaverMessageHandler.handleMessage WeaverMessageHandler.java:100 [iajc] at org.aspectj.weaver.ResolvedTypeX.checkInterTypeMungers ResolvedTypeX.java:989 [iajc] at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:716 [iajc] at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:689 [iajc] at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:615 [iajc] at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:563 [iajc] at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:239 [iajc] at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:114 [iajc] at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:376 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:601 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:160 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:94 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:102 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 [iajc] at org.aspectj.tools.ajc.Main.run Main.java:280 [iajc] at org.aspectj.tools.ajc.Main.runMain Main.java:217 [iajc] at org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM AjcTask.java:1157 [iajc] at org.aspectj.tools.ant.taskdefs.AjcTask.execute AjcTask.java:954 [iajc] at org.apache.tools.ant.Task.perform Task.java:341 [iajc] at org.apache.tools.ant.taskdefs.Sequential.execute Sequential.java:117 [iajc] at org.apache.tools.ant.Task.perform Task.java:341 [iajc] at net.sf.antcontrib.logic.IfTask.execute Unknown Source [iajc] at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method [iajc] at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 [iajc] at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 [iajc] at java.lang.reflect.Method.invoke Method.java:324 [iajc] at org.apache.tools.ant.TaskAdapter.execute TaskAdapter.java:147 [iajc] at org.apache.tools.ant.UnknownElement.execute UnknownElement.java:193 [iajc] at org.apache.tools.ant.Task.perform Task.java:341 [iajc] at org.apache.tools.ant.Target.execute Target.java:309 [iajc] at org.apache.tools.ant.Target.performTasks Target.java:336 [iajc] at org.apache.tools.ant.Project.executeTarget Project.java:1339 [iajc] at org.apache.tools.ant.Project.executeTargets Project.java:1255 [iajc] at org.apache.tools.ant.Main.runBuild Main.java:609 [iajc] at org.apache.tools.ant.Main.start Main.java:196 [iajc] at org.apache.tools.ant.Main.main Main.java:235 [if] Error in class net.sf.antcontrib.logic.IfTask Sorry, i have no simple test case for that problem...</description>
    <commit commitTime="2004-07-28 14:43:40" id="573741c8081c6b6b45921cafaae39f37eede2302"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/ResolvedTypeX.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverMessageHandler.java</file>
    </fixedFiles>
  </bug>
  <bug id="64568" reportTime="2004-05-28 11:21:00">
    <summary>Wildcarding in ITDs needs clearer compiler error message.</summary>
    <description>If a user attempts to define an ITD using a type pattern illegal since AspectJ 1.1 they get back a compiler error message of the following form :- MyAspect.java:4 error Syntax error on token "*", around expected public String foo.bar.*.name; A clearer error message informing the user of their use of illegal syntax would help.</description>
    <commit commitTime="2005-08-19 12:43:13" id="5e9aca91401b7c13e56173ef1044959ca9ccc5e5"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="65319" reportTime="2004-06-02 10:29:00">
    <summary>ajc crashes when compiling the following program binding this and target</summary>
    <description>class Test { public static void main String args[] { new Test .method ; } public void method { new Test2 .method2 ; } } class Test2 { public void method2 {} } aspect Plain { before Test x : call void *.* .. &amp;amp;&amp;amp; this x || target x { } }</description>
    <commit commitTime="2004-08-10 16:22:01" id="b75cd93e0de66996397e9f18809973abec91fe46"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ExposedState.java</file>
    </fixedFiles>
  </bug>
  <bug id="67578" reportTime="2004-06-17 01:45:00">
    <summary>Privileged Aspect Access Problem Across Packages</summary>
    <description>From Irum Godil's aspectj-users posting: package a; public class ITD { private void returnNothing Object a { } } package b; import a.*; privileged aspect B { public void ITD.newFun { returnNothing "a" ; } } returns: C:\devel\test\priv\b\B.aj:8 error The method returnNothing Object from the type ITD is not visible returnNothing "a" ; ^^^^^^ 1 error Which it should not and AspectJ 1.0.6 does not give an error Work around: use this.returnNothing "a" ;</description>
    <commit commitTime="2004-08-16 16:16:20" id="6b1ef0ff7cfd1dbb985993fd5486c9ddf31b280d"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="67579" reportTime="2004-06-17 01:50:00">
    <summary>NPE on privileged aspect error</summary>
    <description>package b; import a.*; privileged aspect B { void blah ITD x { x.returnNothing "y" ; } } package a; public class ITD { private void returnNothing Object a { } } Output: C:\devel\test\priv&amp;gt;ajc a\ITD.aj b\B.aj C:\devel\test\priv\b\B.aj error Internal compiler error java.lang.NullPointerException at org.eclipse.jdt.internal.compiler.lookup.SyntheticAccessMethodBinding .initializeMethodAccessor SyntheticAccessMethodBinding.java:286 at org.eclipse.jdt.internal.compiler.lookup.SyntheticAccessMethodBinding .&amp;lt;init&amp;gt; SyntheticAccessMethodBinding.java:138 at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.addSynthet icMethod SourceTypeBinding.java:342 at org.eclipse.jdt.internal.compiler.ast.MessageSend.manageSyntheticAcce ssIfNecessary MessageSend.java:140 at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode Message Send.java:50 at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode M ethodDeclaration.java:70 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyse Code TypeDeclaration.java:706 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode Typ eDeclaration.java:262 at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.anal yseCode CompilationUnitDeclaration.java:77 at org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:554 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:358 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:601 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:160 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:94 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:102 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:280 at org.aspectj.tools.ajc.Main.runMain Main.java:217 at org.aspectj.tools.ajc.Main.main Main.java:79 no source information available ABORT Exception thrown from AspectJ 1.2 This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. null java.lang.NullPointerException at org.eclipse.jdt.internal.compiler.lookup.SyntheticAccessMethodBinding .initializeMethodAccessor SyntheticAccessMethodBinding.java:286 at org.eclipse.jdt.internal.compiler.lookup.SyntheticAccessMethodBinding .&amp;lt;init&amp;gt; SyntheticAccessMethodBinding.java:138 at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.addSynthet icMethod SourceTypeBinding.java:342 at org.eclipse.jdt.internal.compiler.ast.MessageSend.manageSyntheticAcce ssIfNecessary MessageSend.java:140 at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode Message Send.java:50 at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode M ethodDeclaration.java:70 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyse Code TypeDeclaration.java:706 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode Typ eDeclaration.java:262 at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.anal yseCode CompilationUnitDeclaration.java:77 at org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:554 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:358 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:601 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:160 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:94 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:102 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:280 at org.aspectj.tools.ajc.Main.runMain Main.java:217 at org.aspectj.tools.ajc.Main.main Main.java:79 1 fail|abort, 1 error</description>
    <commit commitTime="2004-08-16 16:16:20" id="6b1ef0ff7cfd1dbb985993fd5486c9ddf31b280d"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="67591" reportTime="2004-06-17 04:03:00">
    <summary>invalid warning indicating no match when a match really occurs</summary>
    <description>When examining the scope rules for matching pointcuts, I came across the following example. In the code the line marked "&amp;lt;- warning comes from here" causes ajc to give the warning musketeer:PointcutVisibility2[43]&amp;gt; ajc Main.java /home/hendren/abc/tests/people/laurie/PointcutVisibility2/Main.java:38 warning no match for this type name: Main$Foo [Xlint:invalidAbsoluteTypeName] before : call Main.Foo.new .. ^^^^^^^^^ 1 warning BUT!!!!!! when you run it you get: Matches * foo .. Matches int foo int Matches private * foo .. Matches * foo* .. Matches Main.Foo.new .. &amp;lt;----- DOES match Matches Main.Foo*.new .. Note that the place where the warning said there was no match DOES match after all. Here is the program ........ ----------------------- public class Main { private static class Foo { int x; Foo int x { this.x = x; } }; private static int foo int x { return x+1; } public static void main String args[] { Main.foo 1 ; new Foo 2 ; } } aspect Aspect { // calls to a private method before : call * foo .. { System.out.println "Matches * foo .. " ; } before : call int foo int { System.out.println "Matches int foo int " ; } before : call private * foo .. { System.out.println "Matches private * foo .. " ; } before : call * foo* .. { System.out.println "Matches * foo* .. " ; } // calls to a constructor that is in a private inner class before : call Main.Foo.new .. // &amp;lt;- warning from here { System.out.println "Matches Main.Foo.new .. " ; } before : call Main.Foo*.new .. { System.out.println "Matches Main.Foo*.new .. " ; } } -----------------------</description>
    <commit commitTime="2004-08-05 09:24:52" id="d8fa2e2f2706279779f3818b2af9825396f5e574"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="67592" reportTime="2004-06-17 04:06:00">
    <summary>value in the args[] array of thisjoinpoint can be changed by one advice decl and updated values seen in another advice decl</summary>
    <description>In ajc a use of thisJoinPoint corresponds to an object of type JoinPoint, where a JoinPoint object has four components, which can be retrieved using accessor methods. this getThis target getTarget args getArgs staticJoinPoint getStaticPart In the case of args, the object returned is an Object array. This means that an advice decl can overwrite the args, and then another advice which shares the same JoinPoint will see the changed args. Here is a small example. In this aspect the before advice changes arg[0] to always be "Laurie" and then the after advice will always say that "Laurie won a million pounds". Is this the behaviour that is intended? I would have thought that the interface to args[] should be such that the values can only be read. Otherwise very strange interactions between advice decls could occur. --------------------------------------------------------------------- public class Main { public static Main v = new Main ; void lottery String arg { System.out.println "The arg in lottery is " + arg ; } public static void main String args[] { v.lottery "Oege" ; v.lottery "Ganesh" ; } } --------------------------------------------------------------------- public aspect Aspect { // This pair of advice decls demonstrates that an advice can change to // the args of a join point. before : call * lottery java.lang.String &amp;amp;&amp;amp; !within Aspect { System.out.println "BEFORE " + thisJoinPoint + " at " + thisJoinPointStaticPart.getSourceLocation ; Object args[] = thisJoinPoint.getArgs ; System.out.println "arg[0] is " + args[0] ; args[0] = "Laurie"; System.out.println "... now it is " + thisJoinPoint.getArgs [0] ; } after : call * lottery java.lang.String &amp;amp;&amp;amp; !within Aspect { System.out.println "AFTER " + thisJoinPoint + " at " + thisJoinPointStaticPart.getSourceLocation ; if thisJoinPoint.getArgs [0].equals "Laurie" System.out.println "Laurie wins 1 million pounds!" ; } }</description>
    <commit commitTime="2004-08-09 12:48:11" id="f6436e3fc84f7e140acb3a250a29fe38f9c20c35"/>
    <fixedFiles>
      <file>runtime/testsrc/RuntimeModuleTests.java</file>
      <file>runtime/src/org/aspectj/runtime/reflect/JoinPointImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="67774" reportTime="2004-06-18 04:54:00">
    <summary>Nullpointer-exception in pointcuts using withincode clause</summary>
    <description>Hi, I am getting null-pointer-exceptions whenever I try to specify a pointcut with a "withincode Signature " clause. E.g.: public aspect DetectSystemOutErrorUsage { pointcut allSystemOutAndSystemErrAccesses : get * System.out || get * System.err ; declare warning: allSystemOutAndSystemErrAccesses &amp;amp;&amp;amp; !adviceexecution &amp;amp;&amp;amp; !within com.tivoli.act..Test* &amp;amp;&amp;amp; !within com.tivoli.act.log..* &amp;amp;&amp;amp; !execution * com.tivoli.act..*.main .. &amp;amp;&amp;amp; !execution * com.tivoli.act..*.usage // &amp;amp;&amp;amp; !withincode * com.tivoli.act..*.main .. // &amp;amp;&amp;amp; !withincode * com.tivoli.act..*.usage : "Warning: use of System.out or System.err - consider logging instead!"; } In the above example excluding main and usage methods from the pointcut using an execution ... -clause shows works but using a withincode -clause as commented always yields an NPE: trouble in: null java.lang.NullPointerException at org.aspectj.weaver.patterns.SignaturePattern.matches SignaturePattern.java:87 at org.aspectj.weaver.patterns.WithincodePointcut.match WithincodePointcut.java:42 at org.aspectj.weaver.patterns.NotPointcut.match NotPointcut.java:45 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:42 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:42 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:42 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:42 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:42 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:42 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:42 at org.aspectj.weaver.ShadowMunger.match ShadowMunger.java:62 at org.aspectj.weaver.Checker.match Checker.java:48 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:1121 at org.aspectj.weaver.bcel.BcelClassWeaver.matchInit BcelClassWeaver.java:895 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:793 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:343 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:80 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:724 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:689 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:615 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:563 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:239 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:114 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:376 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:601 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:160 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:94 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:108 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:165 !SESSION Jun 18, 2004 10:49:48.666 --------------------------------------------- eclipse.buildId=I200406110010 java.version=1.4.2_03 java.vendor=Sun Microsystems Inc. BootLoader constants: OS=win32, ARCH=x86, WS=win32, NL=de_CH !ENTRY org.eclipse.ajdt.ui 4 0 Jun 18, 2004 10:49:48.666 !MESSAGE NullPointerException thrown: null !STACK 0 java.lang.NullPointerException at org.aspectj.weaver.patterns.SignaturePattern.matches SignaturePattern.java:87 at org.aspectj.weaver.patterns.WithincodePointcut.match WithincodePointcut.java:42 at org.aspectj.weaver.patterns.NotPointcut.match NotPointcut.java:45 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:42 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:42 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:42 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:42 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:42 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:42 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:42 at org.aspectj.weaver.ShadowMunger.match ShadowMunger.java:62 at org.aspectj.weaver.Checker.match Checker.java:48 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:1121 at org.aspectj.weaver.bcel.BcelClassWeaver.matchInit BcelClassWeaver.java:895 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:793 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:343 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:80 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:724 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:689 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:615 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:563 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:239 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:114 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:376 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:601 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:160 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:94 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:108 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:165 Michael</description>
    <commit commitTime="2004-08-02 13:43:43" id="7f19ab47a3df5327c6246420354089d1db1c765f"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="68494" reportTime="2004-06-24 12:04:00">
    <summary>ajdoc does not support .aj files</summary>
    <description>In addition to accepting .java source files ajdoc needs to accept .aj files.</description>
    <commit commitTime="2004-06-24 22:11:53" id="3707411c2b5fdd0294c2ab5305c32766644241f1"/>
    <fixedFiles>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/Main.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/StructureUtil.java</file>
    </fixedFiles>
  </bug>
  <bug id="68991" reportTime="2004-06-30 07:51:00">
    <summary>intertype initialisers should match field set pointcuts</summary>
    <description>/* initialisers of intertype fields should match field set pointcuts. In the example below, the output should be set field set int C.n set field set int C.m get field get int C.n set field set int C.n but the first field set of C.n is not picked up. */ aspect Aspect { private int C.n = 13; before : get * C.* { System.out.println "get field "+thisJoinPointStaticPart ; } before : set * C.* { System.out.println "set field "+thisJoinPointStaticPart ; } public void C.foo { n++; } } class C { int m = 20; } public class ITFieldsAdvice { public static void main String[] args { C c = new C ; c.foo ; } }</description>
    <commit commitTime="2004-08-11 12:24:27" id="64183c38266114bce7aa60ff743b4b9eda5cbe2d"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeFieldDeclaration.java</file>
    </fixedFiles>
  </bug>
  <bug id="69011" reportTime="2004-06-30 10:22:00">
    <summary>ajdoc fails when using default package</summary>
    <description>When trying to document classes that are in the default package, the following error occurs: &amp;gt; Calling ajc... &amp;gt; Building signature files... &amp;gt; Calling javadoc... Loading source file C:\eclipse_RC3\eclipse\ajdocworkingdir\A.java... C:\eclipse_RC3\eclipse\ajdocworkingdir\A.java:1: &amp;lt;identifier&amp;gt; expected package ; ^ 1 error &amp;gt; Decorating html files... &amp;gt; Decorating C:\doc\classX.html... An internal error occured in ajdoc Please copy the following text into an email message and send it, along with any additional information you can add to: aspectj-dev@eclipse.org java.io.FileNotFoundException: C:\doc\classX.html The system cannot find the file specified java.io.FileNotFoundException: C:\doc\classX.html The system cannot find the file specified at java.io.FileInputStream.open Native Method at java.io.FileInputStream.&amp;lt;init&amp;gt; FileInputStream.java:106 at java.io.FileReader.&amp;lt;init&amp;gt; FileReader.java:55 at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFile HtmlDecorator.java:142 at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromDecl HtmlDecorator.java:115 at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromDecls HtmlDecorator.java:54 at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromInputFiles HtmlDecorator.java:43 at org.aspectj.tools.ajdoc.Main.main Main.java:210</description>
    <commit commitTime="2004-07-05 18:19:15" id="2cc4826419d8c08e3879e600b82354fac2596241"/>
    <fixedFiles>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java</file>
    </fixedFiles>
  </bug>
  <bug id="69459" reportTime="2004-07-07 09:10:00">
    <summary>Hiding of Instance Methods by static methods</summary>
    <description>Using Introduction it is possible to hide instance methods by static methods. Example: class Super { public void m {}; } class Sub {} aspect A { public static void Sub.m {} } Acccording to the Java Language Specification this is not allowed. Is this behaviour desired ?? It is also possible to override static methods by instance methods, wich causes a compile time error in java.</description>
    <commit commitTime="2004-07-27 14:17:32" id="b18436307ecfed63c8995fd35013ffa07e5116e7"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/ResolvedTypeX.java</file>
    </fixedFiles>
  </bug>
  <bug id="70008" reportTime="2004-07-14 07:16:00">
    <summary>problem with ajdoc -public</summary>
    <description>Using the spacewar example, the following works fine: ajdoc -private -d doc spacewar coordination but the following breaks: ajdoc -public -d doc spacewar coordination The end of the failing output is below. Display.html and Display.DisplayAspect.html were not generated as the types are not public, so presumably the decorator shouldn't be looking for them in this case. &amp;gt; Decorating html files... &amp;gt; Decorating C:\aspectj1.2\doc\examples\doc\spacewar\Debug.html... &amp;gt; Decorating C:\aspectj1.2\doc\examples\doc\spacewar\Display.DisplayAspect.html. .. An internal error occured in ajdoc Please copy the following text into an email message and send it, along with any additional information you can add to: aspectj-dev@eclipse.org java.io.FileNotFoundException: C:\aspectj1.2\doc\examples\doc\spacewar\Display.D isplayAspect.html The system cannot find the file specified java.io.FileNotFoundException: C:\aspectj1.2\doc\examples\doc\spacewar\Display.D isplayAspect.html The system cannot find the file specified at java.io.FileInputStream.open Native Method at java.io.FileInputStream.&amp;lt;init&amp;gt; FileInputStream.java:106 at java.io.FileReader.&amp;lt;init&amp;gt; FileReader.java:55 at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFile HtmlDecorator. java:142 at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromDecl HtmlDecora tor.java:115 at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromDecls HtmlDecor ator.java:54 at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromInputFiles Html Decorator.java:43 at org.aspectj.tools.ajdoc.Main.main Main.java:210</description>
    <commit commitTime="2004-07-14 20:36:00" id="8dc08453232f9b4c1572ad0feb60979fb07336fe"/>
    <fixedFiles>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/SpacewarTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="70201" reportTime="2004-07-16 04:55:00">
    <summary>Branch target offset too large for short</summary>
    <description>I run the compiler with the following command line: /cygdrive/d/Tools/Java/aspectj12/bin/ajc.sh -Xreweavable -inpath . -d . Time.aj I get the following error output: ABORT Exception thrown from AspectJ 1.2 This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. Branch target offset too large for short Branch target offset too large for short org.apache.bcel.generic.ClassGenException: Branch target offset too large for sh ort at org.apache.bcel.generic.BranchInstruction.dump BranchInstruction.java :99 at org.apache.bcel.generic.InstructionList.getByteCode InstructionList.j ava:980 at org.apache.bcel.generic.MethodGen.getMethod MethodGen.java:616 at org.aspectj.weaver.bcel.LazyMethodGen.getMethod LazyMethodGen.java:32 4 at org.aspectj.weaver.bcel.LazyClassGen.writeBack LazyClassGen.java:395 at org.aspectj.weaver.bcel.LazyClassGen.getJavaClass LazyClassGen.java:4 24 at org.aspectj.weaver.bcel.BcelWeaver.getClassFilesFor BcelWeaver.java:6 41 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:619 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:563 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompiler Adapter.java:239 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling A jCompilerAdapter.java:114 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:376 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:601 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:160 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:94 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:102 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:280 at org.aspectj.tools.ajc.Main.runMain Main.java:217 at org.aspectj.tools.ajc.Main.main Main.java:79 1 fail|abort Signal 127 I generate the file Time.aj automatically. The target statements should restrict the weaving to some classes. Time.aj looks like this: import java.util.Map; import java.util.HashMap; import java.util.Iterator; import java.util.Set; import org.aspectj.lang.JoinPoint; aspect Time { Map tm = new HashMap ; class ProfileContainer { long calls = 0; long call_stack = 0; long time; long curr_time; public void print { System.out.println " Calls: "+calls ; System.out.println " Acc time: "+ double time/1000 ; System.out.println " Avg time: "+ double time/calls /1000 ; } public String toString { return "calls="+calls+" time="+time ; } } before : // fill targets target de.rochade.srap.SrapExceptionInformation || target de.rochade.srap.SrapObjectNotFoundException || target de.rochade.srap.SrapScriptRuntimeException || target de.rochade.srap.SrapInternalException || target de.rochade.srap.SrapResultSetException || target de.rochade.srap.SrapException || target de.rochade.srap.executable.ServerControl || target de.rochade.srap.executable.Server || target de.rochade.srap.convenient.RochadeSupport || target de.rochade.srap.convenient.RunScriptSupport || target de.rochade.srap.convenient.ResultSetSupport || target de.rochade.srap.convenient.ApplicationSupport || target de.rochade.srap.convenient.DatabaseSupport || target de.rochade.srap.convenient.ConnectionSupport || target de.rochade.srap.SrapScriptCode || target de.rochade.srap.SrapScriptLoader || target de.rochade.srap.SrapAdaptor || target de.rochade.srap.RoSOAPService || target de.rochade.srap.CommonSetData || target de.rochade.srap.RoSOAPId || target de.rochade.srap.ResultSetFactory || target de.rochade.srap.RunScript || target de.rochade.srap.Application || target de.rochade.srap.Database || target de.rochade.srap.Connection || target de.rochade.srap.Rochade || target de.rochade.srap.ResultSet || target de.rochade.srap.Startup || target de.rochade.script.ScriptCodeAdapter || target de.rochade.script.RPLScriptCode || target de.rochade.script.RoExecutableScriptLoader || target de.rochade.script.RoExecutableScriptCode || target de.rochade.script.JSScriptCode || target de.rochade.rpl.StdOutTraceCallback || target de.rochade.rpl.StdInOutInformCallback || target de.rochade.rpl.RPLTrace || target de.rochade.rpl.RPLTokenizer || target de.rochade.rpl.RPLInterpreter || target de.rochade.rpl.RPLInvokeException || target de.rochade.rpl.RPLExtObj || target de.rochade.rpl.RPLException || target de.rochade.ap.HierarchyApplicationName || target de.rochade.ap.ApUserExit || target de.rochade.ap.ApUser || target de.rochade.ap.ApQueryVersions || target de.rochade.ap.ApplicationName || target de.rochade.ap.Application || target de.rochade.ap.ApNsAttrContentsContainer || target de.rochade.ap.ApMetaModelType || target de.rochade.ap.ApMetaModelAttribute || target de.rochade.ap.ApLinkIdentifier || target de.rochade.ap.ApIdentifier || target de.rochade.ap.ApDatabase || target de.rochade.ap.ApAttrContentsContainerFac || target de.rochade.ds.ValueRange || target de.rochade.ds.ValueAttrContentsContainer || target de.rochade.ds.UserExitException || target de.rochade.ds.UserExit || target de.rochade.ds.User || target de.rochade.ds.TVBAttrContentsContainer || target de.rochade.ds.TextAttrContentsContainer || target de.rochade.ds.StringAttrContentsContainer || target de.rochade.ds.Server || target de.rochade.ds.SdcacInputException || target de.rochade.ds.ScriptLoader || target de.rochade.ds.ScriptCode || target de.rochade.ds.RoContext || target de.rochade.ds.Rochade || target de.rochade.ds.QueryVersions || target de.rochade.ds.QuerySli || target de.rochade.ds.QuerySdcac || target de.rochade.ds.QuerySdc || target de.rochade.ds.QueryPath || target de.rochade.ds.QueryFactory || target de.rochade.ds.QueryCmpVersions || target de.rochade.ds.QueryComparison || target de.rochade.ds.Query || target de.rochade.ds.NotFoundException || target de.rochade.ds.MetaModelType || target de.rochade.ds.MetaModelLinkAttribute || target de.rochade.ds.MetaModelException || target de.rochade.ds.MetaModelAttribute || target de.rochade.ds.MetaModel || target de.rochade.ds.LinkIdentifier || target de.rochade.ds.LinkAttrContentsContainer || target de.rochade.ds.InvalidTypeException || target de.rochade.ds.InvalidOperationException || target de.rochade.ds.InvalidLinkException || target de.rochade.ds.InvalidAttributeException || target de.rochade.ds.IdentifierName || target de.rochade.ds.IdentifierCollection || target de.rochade.ds.Identifier || target de.rochade.ds.ICTraverseAction || target de.rochade.ds.ICNodeCmp || target de.rochade.ds.ICNodeAction || target de.rochade.ds.ICNode || target de.rochade.ds.ICIterator || target de.rochade.ds.ICCollAction || target de.rochade.ds.HypTxtAttrContentsContainer || target de.rochade.ds.DsConst || target de.rochade.ds.DateAttrContentsContainer || target de.rochade.ds.DataStoreName || target de.rochade.ds.DataStore || target de.rochade.ds.Database || target de.rochade.ds.ConstIdentifier || target de.rochade.ds.CloneException || target de.rochade.ds.BlobAttrContentsContainer || target de.rochade.ds.BaseAttrContentsContainer || target de.rochade.ds.Attribute || target de.rochade.ds.AttrContentsContainerHelper || target de.rochade.ds.AttrContentsContainerFac || target de.rochade.ds.AttrContentsContainer || target de.rochade.ds.AlreadyExistsException || target de.rochade.ds.AccessControlException || target de.rochade.util.StringUtilities || target de.rochade.util.RoObservable || target de.rochade.util.RoObserver || target de.rochade.util.RoException || target de.rochade.util.RPLTokenizer || target de.rochade.util.Logger &amp;amp;&amp;amp; call public * de.rochade..* .. { synchronized tm { ProfileContainer pc = ProfileContainer tm.get getKey thisJoinPoint ; if pc == null { pc = new ProfileContainer ; tm.put getKey thisJoinPoint , pc ; } pc.calls++; pc.call_stack++; pc.curr_time = System.currentTimeMillis ; } //System.out.println "before "+getKey thisJoinPoint ; } after returning: // fill targets target de.rochade.srap.SrapExceptionInformation || target de.rochade.srap.SrapObjectNotFoundException || target de.rochade.srap.SrapScriptRuntimeException || target de.rochade.srap.SrapInternalException || target de.rochade.srap.SrapResultSetException || target de.rochade.srap.SrapException || target de.rochade.srap.executable.ServerControl || target de.rochade.srap.executable.Server || target de.rochade.srap.convenient.RochadeSupport || target de.rochade.srap.convenient.RunScriptSupport || target de.rochade.srap.convenient.ResultSetSupport || target de.rochade.srap.convenient.ApplicationSupport || target de.rochade.srap.convenient.DatabaseSupport || target de.rochade.srap.convenient.ConnectionSupport || target de.rochade.srap.SrapScriptCode || target de.rochade.srap.SrapScriptLoader || target de.rochade.srap.SrapAdaptor || target de.rochade.srap.RoSOAPService || target de.rochade.srap.CommonSetData || target de.rochade.srap.RoSOAPId || target de.rochade.srap.ResultSetFactory || target de.rochade.srap.RunScript || target de.rochade.srap.Application || target de.rochade.srap.Database || target de.rochade.srap.Connection || target de.rochade.srap.Rochade || target de.rochade.srap.ResultSet || target de.rochade.srap.Startup || target de.rochade.script.ScriptCodeAdapter || target de.rochade.script.RPLScriptCode || target de.rochade.script.RoExecutableScriptLoader || target de.rochade.script.RoExecutableScriptCode || target de.rochade.script.JSScriptCode || target de.rochade.rpl.StdOutTraceCallback || target de.rochade.rpl.StdInOutInformCallback || target de.rochade.rpl.RPLTrace || target de.rochade.rpl.RPLTokenizer || target de.rochade.rpl.RPLInterpreter || target de.rochade.rpl.RPLInvokeException || target de.rochade.rpl.RPLExtObj || target de.rochade.rpl.RPLException || target de.rochade.ap.HierarchyApplicationName || target de.rochade.ap.ApUserExit || target de.rochade.ap.ApUser || target de.rochade.ap.ApQueryVersions || target de.rochade.ap.ApplicationName || target de.rochade.ap.Application || target de.rochade.ap.ApNsAttrContentsContainer || target de.rochade.ap.ApMetaModelType || target de.rochade.ap.ApMetaModelAttribute || target de.rochade.ap.ApLinkIdentifier || target de.rochade.ap.ApIdentifier || target de.rochade.ap.ApDatabase || target de.rochade.ap.ApAttrContentsContainerFac || target de.rochade.ds.ValueRange || target de.rochade.ds.ValueAttrContentsContainer || target de.rochade.ds.UserExitException || target de.rochade.ds.UserExit || target de.rochade.ds.User || target de.rochade.ds.TVBAttrContentsContainer || target de.rochade.ds.TextAttrContentsContainer || target de.rochade.ds.StringAttrContentsContainer || target de.rochade.ds.Server || target de.rochade.ds.SdcacInputException || target de.rochade.ds.ScriptLoader || target de.rochade.ds.ScriptCode || target de.rochade.ds.RoContext || target de.rochade.ds.Rochade || target de.rochade.ds.QueryVersions || target de.rochade.ds.QuerySli || target de.rochade.ds.QuerySdcac || target de.rochade.ds.QuerySdc || target de.rochade.ds.QueryPath || target de.rochade.ds.QueryFactory || target de.rochade.ds.QueryCmpVersions || target de.rochade.ds.QueryComparison || target de.rochade.ds.Query || target de.rochade.ds.NotFoundException || target de.rochade.ds.MetaModelType || target de.rochade.ds.MetaModelLinkAttribute || target de.rochade.ds.MetaModelException || target de.rochade.ds.MetaModelAttribute || target de.rochade.ds.MetaModel || target de.rochade.ds.LinkIdentifier || target de.rochade.ds.LinkAttrContentsContainer || target de.rochade.ds.InvalidTypeException || target de.rochade.ds.InvalidOperationException || target de.rochade.ds.InvalidLinkException || target de.rochade.ds.InvalidAttributeException || target de.rochade.ds.IdentifierName || target de.rochade.ds.IdentifierCollection || target de.rochade.ds.Identifier || target de.rochade.ds.ICTraverseAction || target de.rochade.ds.ICNodeCmp || target de.rochade.ds.ICNodeAction || target de.rochade.ds.ICNode || target de.rochade.ds.ICIterator || target de.rochade.ds.ICCollAction || target de.rochade.ds.HypTxtAttrContentsContainer || target de.rochade.ds.DsConst || target de.rochade.ds.DateAttrContentsContainer || target de.rochade.ds.DataStoreName || target de.rochade.ds.DataStore || target de.rochade.ds.Database || target de.rochade.ds.ConstIdentifier || target de.rochade.ds.CloneException || target de.rochade.ds.BlobAttrContentsContainer || target de.rochade.ds.BaseAttrContentsContainer || target de.rochade.ds.Attribute || target de.rochade.ds.AttrContentsContainerHelper || target de.rochade.ds.AttrContentsContainerFac || target de.rochade.ds.AttrContentsContainer || target de.rochade.ds.AlreadyExistsException || target de.rochade.ds.AccessControlException || target de.rochade.util.StringUtilities || target de.rochade.util.RoObservable || target de.rochade.util.RoObserver || target de.rochade.util.RoException || target de.rochade.util.RPLTokenizer || target de.rochade.util.Logger &amp;amp;&amp;amp; call public * de.rochade..* .. { //System.out.println "after "+getKey thisJoinPoint ; synchronized tm { ProfileContainer pc = ProfileContainer tm.get getKey thisJoinPoint ; pc.call_stack--; if pc.call_stack == 0 pc.time += System.currentTimeMillis - pc.curr_time; } } after : execution * de.rochade..main String[] { System.out.println "after main" ; Map.Entry me; Set s = tm.entrySet ; Iterator iter = s.iterator ; for int i = s.size ; i &amp;gt; 0; i-- { me = Map.Entry iter.next ; System.out.println "Method: " + me.getKey ; ProfileContainer me.getValue .print ; } } protected static StringBuffer sb = new StringBuffer ; protected static final String getKey JoinPoint jp { Object t = jp.getTarget ; if t == null { return jp.toLongString ; } sb.setLength 0 ; sb.append jp.toLongString ; // lastIndexOf == JDK1.4 int idx2 = sb.lastIndexOf "." ; int idx1 = sb.lastIndexOf " ", idx2 ; idx1++; sb.replace idx1, idx2, t.getClass .getName ; return sb.substring 0 ; } } Nearly the same happens if I hold all project files in a *.lst file, but this set of files is larger than the classes mentioned in the target statements. Is there any restriction in the number of files AspectJ can deal with?</description>
    <commit commitTime="2004-08-10 08:18:30" id="ce1e477ecd9244c49b86fb3d7ea884e09e2ba6ee"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="70241" reportTime="2004-07-16 11:41:00">
    <summary>outline view shows anonymous inner classes in different way than jdt outline</summary>
    <description>See screenshots.</description>
    <commit commitTime="2004-08-17 09:37:46" id="a2469c733c9f65514c3949cb1cc7254495011894"/>
    <fixedFiles>
      <file>ajde/testsrc/org/aspectj/ajde/ExtensionTests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</file>
    </fixedFiles>
  </bug>
  <bug id="70404" reportTime="2004-07-20 06:22:00">
    <summary>passing null to array arguments confuzes static join point signature.</summary>
    <description>Example classes below When calling with a null argument for the array parameter the *first* time it is called, the "thisStaticJoinPoint" signature reports "ClassNotFoundException" as the type of that parameter, also for the next call where the argument is not null. However, if I *switch* the calls, so the first call is with a non-null argument, then the static join point correctly reports the array type, also for the next call. Tested with both AspectJ 1.1 and 1.2 from command line and AJDT 1.1.11 from Eclipse 3. It seems to be a bug in the runtime classes no Component for that? Example classes: --- Main.java --- package dk.infimum.aspectjtest; public class Main { public static void main String[] args { Main obj = new Main ; // swap following lines to change behavior obj.test null, null ; obj.test null, new Main[]{} ; } void test Main dummy, Main[] dummy2 {} } --- end Main.java --- and --- MainAspect.aj --- import org.aspectj.lang.reflect.MethodSignature; public aspect MainAspect { pointcut testcall : execution * test* .. ; before : testcall { MethodSignature sig = MethodSignature thisJoinPointStaticPart.getSignature ; System.out.println sig ; Class[] params = sig.getParameterTypes ; for int i=0;i&amp;lt;params.length;i++ { Class cls = params[i]; System.out.println " - " + cls.getName ; } } } --- end MainAspect.aj --- The output from running Main is: --- void dk.infimum.aspectjtest.Main.test Main, ClassNotFoundException - dk.infimum.aspectjtest.Main - java.lang.ClassNotFoundException void dk.infimum.aspectjtest.Main.test Main, ClassNotFoundException - dk.infimum.aspectjtest.Main - java.lang.ClassNotFoundException --- However, if I swap the calls to test, the output becomes: --- void dk.infimum.aspectjtest.Main.test Main, Main[] - dk.infimum.aspectjtest.Main - [Ldk.infimum.aspectjtest.Main; void dk.infimum.aspectjtest.Main.test Main, Main[] - dk.infimum.aspectjtest.Main - [Ldk.infimum.aspectjtest.Main; ---</description>
    <commit commitTime="2004-08-27 14:39:46" id="a5330382082fbb28a761421037901d6b277e966f"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="70619" reportTime="2004-07-22 10:11:00">
    <summary>compiler aborts with "conflicting dominates orders" with circular declare precedences</summary>
    <description>The following program causes ajc 1.2 to abort: public class Conflict { public static void main String[] args { } } aspect Conflict1 { declare precedence: Conflict1, Conflict2; before : execution * * .. { } } aspect Conflict2 { declare precedence: Conflict2, Conflict1; after : execution * * .. { } }</description>
    <commit commitTime="2004-07-26 13:28:20" id="75852d7b1915cddfd4ba3dea272324617abdaa60"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/World.java</file>
    </fixedFiles>
  </bug>
  <bug id="70773" reportTime="2004-07-23 21:07:00">
    <summary>AspectJ Error: ConncurrentModificationException thrown: null</summary>
    <description>In AspectJ 1.1.11 for Eclipse, build ID 1.2.0 and also in the previous 1.1.10 on Eclipse version 3.0.0, build ID 200406351208: If I enable incremental compilation and make a change to a file typing a space and deleting it, or editing a comment , I get a "ConncurrentModificationException thrown: null" error.</description>
    <commit commitTime="2004-08-02 10:14:39" id="9aed31d18e3848c72c6963dc3a6ee4661a79add9"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
    </fixedFiles>
  </bug>
  <bug id="71076" reportTime="2004-07-29 09:58:00">
    <summary>Missing Javadoc comments that aren't missing</summary>
    <description>Reported in the AJDT newsgroup: Go to Preferences &amp;gt; Java &amp;gt; Compiler &amp;gt; Javadoc and set "Missing javadoc comments" to "Warning". You then get warnings against things you wouldn't expect, such as after advice. /** * A comment */ public aspect World { pointcut greeting : execution * Hello.sayHello .. ; /** * A comment */ after returning : greeting { System.out.println "world" ; } } This gives two warnings, one for the aspect itself, and one for the after returning advice. The warnings occur both with and without the existence of Javadoc comments!</description>
    <commit commitTime="2004-08-18 10:33:07" id="5b902242b00ffaf3105335f231e45291e7d09320"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/AjdtBatchTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="71159" reportTime="2004-07-30 10:36:00">
    <summary>pointcut call MethodPattern matches non-visible methods in parent class</summary>
    <description>aspectjtools.jar / ajc v1.2 We believe that the call methodpattern pointcut has matching behaviour that is inconsistent with what we expect from Java in relation to invocations of methods on subclasses and superclasses. Background: Our goal is to use an aspect to declare ajc compiler warnings on any invocation to a target method, where the space of targets is defined as any visible method of any class in a specified package P or its subpackages. As well as straight invocations from types in packages oustide P and its subpackages, we wish to match method invocations on P where the methods invoked are inherited from P -- that is , they are obtained in a type that directly extends a type in P or its subpackages. The fragment of the aspect we are using is: public aspect Aspect1 { pointcut methodCalls : !within Aspect1 &amp;amp;&amp;amp; call * P..*.* .. ; // 'P' is the target package space declare warning : methodCalls : "invoking"; //... } Consider these cases: Case 1 method inheritance: Superclass A in package P declares and implements a public method M. A direct subclass B in a package outside P directly extends A and inherits this method. Now, any calls inside B to M or this.M are matched by the call join point above which seeks to match calls to P..*.* This is as we would expect since the implementation in package space P is actually being called. Case 2 method overriding: Superclass A in package P declares and implements a public method M. Direct subclass B in a package outside P overrides A.M with its own implementation M'. M' does not invoke M. Now, calls inside B to M' or this.M' are still matched by the call join point above which seeks to match calls to P..*.* even though M' does not invoke or depend on M. We do not expect this result since we do not think M is actually called. Case 3 redeclaration of non-visible method with the same name: Superclass A in package P declares and implements a private method M. Direct subclass B in a package outside P introduces its own method M having the same signature as A.M. Now, calls in B to M or this.M are still matched by the call join point above which seeks to match calls to P..*.* even though A.M is not visible to B and is never called by it. We do not expect this result since we do not think A.M is ever called. The only way we can explain this apparent behaviour is by reasoning that the compiler is treating the subclass B "as a type of" its parent A and somehow concluding that method calls on B can be equated with calls to methods of identical signature on A. However this seems at odds with the rules for Java visibility and with our expectations for when the call ... joinpoint should match. We have experimented with execution ... join points to perform this matching but that has turned up a different set of problems which we are still analyzing. Please can you shed any light on what the call joinpoint is doing here? regards, Dave</description>
    <commit commitTime="2005-08-31 15:44:22" id="7e0c3cdc37b974ef2bba01e19fa90cb9c752f288"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="71273" reportTime="2004-08-03 06:53:00">
    <summary>RuntimeException thrown: Could not find instruction: org.apache.bcel.generic.B2I</summary>
    <description>Compiler fails when trying to convert a "byte" args parameter to a "int" pointcut formal when also using an "if " PCD. java.lang.RuntimeException: Could not find instruction: org.apache.bcel.generic.B2I at org.apache.bcel.generic.InstructionFactory.createCast InstructionFactory.java:493 at org.aspectj.weaver.bcel.Utility.createConversion Utility.java:328 at org.aspectj.weaver.bcel.BcelRenderer.renderExpr BcelRenderer.java:75 at org.aspectj.weaver.bcel.BcelRenderer.visit BcelRenderer.java:210 at org.aspectj.weaver.ast.Call.accept Call.java:30 at org.aspectj.weaver.bcel.BcelRenderer.recur BcelRenderer.java:145 at org.aspectj.weaver.bcel.BcelRenderer.renderTest BcelRenderer.java:111 at org.aspectj.weaver.bcel.BcelAdvice.getTestInstructions BcelAdvice.java:342 at org.aspectj.weaver.bcel.BcelAdvice.getAdviceInstructions BcelAdvice.java:265 at org.aspectj.weaver.bcel.BcelShadow.weaveAfterReturning BcelShadow.java:1169 at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:135 at org.aspectj.weaver.Shadow.implementMungers Shadow.java:430 at org.aspectj.weaver.Shadow.implement Shadow.java:326 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:1153 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:361 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:82 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:726 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:691 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:617 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:565 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:239 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:114 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:376 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:717 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:170 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:100 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:108 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:169</description>
    <commit commitTime="2004-08-05 09:23:47" id="aafe4244db32cb6b75c80bd712ef6188bb2a1d4e"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/Utility.java</file>
    </fixedFiles>
  </bug>
  <bug id="71339" reportTime="2004-08-03 20:31:00">
    <summary>AJC produces partial output jar file, when there are warnings during weaving</summary>
    <description/>
    <commit commitTime="2004-08-13 15:16:15" id="0057fdbbfed77b761fc9d7bc6185d1d8a5587292"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/aspectpath/AspectPathTests.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc120/Ajc120Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="71372" reportTime="2004-08-04 09:29:00">
    <summary>NoSuchMethodError calling private method from around advice in inner aspect</summary>
    <description>Static inner classes and aspects are permitted to call private static methods in the enclosing class. In the case of aspects this should apply to both methods and advice. However while the following testcase will compile it fails to run: package bug_nnnn; public class InnerAspectCallsPrivateMethod { public void test { foo "test" ; } private static void foo String from { System.out.println "? foo " + from ; } public static void main String[] args { new InnerAspectCallsPrivateMethod .test ; } private static aspect Aspect { public Aspect { foo "Aspect.&amp;lt;init&amp;gt;" ; } pointcut execTest : execution * InnerAspectCallsPrivateMethod.test ; before : execTest { foo "before" ; } void around : execTest { foo "around" ; } } } java.lang.NoSuchMethodError: bug_nnnn.InnerAspectCallsPrivateMethod$Aspect.foo Ljava/lang/String; V ? foo Aspect.&amp;lt;init&amp;gt; ? foo before at bug_nnnn.InnerAspectCallsPrivateMethod$Aspect.ajc$inlineAccessMethod$bug_nnnn_I nnerAspectCallsPrivateMethod$Aspect$bug_nnnn_InnerAspectCallsPrivateMethod$Aspe ct$foo InnerAspectCallsPrivateMethod.java at bug_nnnn.InnerAspectCallsPrivateMethod.test_aroundBody1$advice InnerAspectCallsPrivateMethod.java:43 at bug_nnnn.InnerAspectCallsPrivateMethod.test InnerAspectCallsPrivateMethod.java at bug_nnnn.InnerAspectCallsPrivateMethod.main InnerAspectCallsPrivateMethod.java:26 Exception in thread "main"</description>
    <commit commitTime="2004-08-13 14:48:43" id="98c78c9c39384fa1c4734097308e5b38f1f83072"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="71377" reportTime="2004-08-04 10:21:00">
    <summary>Cannot advise private method call in around advice</summary>
    <description>Pointcuts should match call joint points in advice. However AspectJ does not match calls to _private_ methods in around advice. The same applies to get/set pointcuts for _private fields. This is probably because in the testcase below a call to "privateMethod " in the body of the around advice is a call to an accessor method: ajc$inlineAccessMethod$bug_nnnn_JoinPointInAroundAdvice$bug_nnnn_JoinPointInAro undAdvice$privateMethod "around" ; public aspect JoinPointInAroundAdvice { private static Set privateCalls = new HashSet ; private static Set publicCalls = new HashSet ; pointcut internalCall : call * JoinPointInAroundAdvice.privateMethod .. ; before : internalCall { privateCalls.add thisJoinPoint ; } pointcut externalCall : call * JoinPointInAroundAdvice.publicMethod .. ; before : externalCall { publicCalls.add thisJoinPoint ; } pointcut execTest : execution * JoinPointInAroundAdvice.test ; before : execTest { privateMethod "before" ; publicMethod "before" ; } void around : execTest { privateMethod "around" ; publicMethod "around" ; proceed ; } // void around : execTest { // Runnable runnable = new Runnable { // public void run { // privateMethod "around closure" ; // publicMethod; // proceed ; // } // }; // runnable.run ; // } after : execTest { privateMethod "after" ; publicMethod "after" ; } private static void privateMethod String from { System.out.println "? privateMethod " + from ; } public static void publicMethod String from { System.out.println "? publicMethod " + from ; } public static void test { System.out.println "? test " ; privateMethod "test" ; publicMethod "test" ; } public static void main String[] args { test ; if privateCalls.size != publicCalls.size { throw new RuntimeException "Missing join point" ; } else { System.out.println "Success." ; } } }</description>
    <commit commitTime="2004-08-09 10:26:53" id="851da68a07bcbfac4414fadc1b9f3bc02fa810a5"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java</file>
    </fixedFiles>
  </bug>
  <bug id="71723" reportTime="2004-08-10 13:32:00">
    <summary>Inconsistency in scoping of protected members in ITDs</summary>
    <description>When introducing new member functions to existing classes via inter-type declarations, the scoping rules that apply to the ITD bodies are the same as for the aspect - for example, private members of the target class cannot be accessed unless the aspect is privileged. Similarly, protected members of classes in different packages should not be visible in ITDs unless the aspect is privileged. This rule is only enforced for protected members declared in the target class - protected members that are inherited are visible from ITDs in aspects in different packages. The following is an example of this: ---------------------- package foo; public class Foo extends AncientFoo { protected int i { return 42; } public static void main String[] args { new Foo .doStuff ; } public void doStuff { } protected int ancientI { return 42; } } class AncientFoo { protected int ancientI { return -42; } protected int ancientJ { return 0; } } ---------- package bar; import foo.Foo; aspect Bar { public void Foo.doing { try { System.out.println i ; // fails in ajc System.out.println ancientI ; // fails in ajc System.out.println ancientJ ; // succeeds System.out.println clone ; // succeeds } catch Throwable t { } } before Foo f : call * doStuff .. &amp;amp;&amp;amp; target f { f.doing ; } } ------------------- All four calls in Foo.doing should fail, as they refer to protected members of foo.Foo from package bar. However, only the first 2 - the ones directly declared/overridden in foo.Foo - are detected as errors, and removing them makes the rest compile and execute. Best wishes, Pavel</description>
    <commit commitTime="2004-08-18 12:39:40" id="dfb15c1777ab6995528a0a0d49faf0ef74578db6"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="71811" reportTime="2004-08-11 13:40:00">
    <summary>AJDoc: should be able to set encoding like javadoc</summary>
    <description>ajdoc doesn't support the -encoding -docencoding and -charset options of javadoc. Especially, it doesn't pass on the -encoding to ajc. If your project uses a source file encoding e.g. UTF-8 differing form the platform standard, and some java identifiers use characters byond the standard ASCII range, you won't be able to use ajdoc at all.</description>
    <commit commitTime="2004-08-20 01:01:45" id="5f80c8cd8de6ab532fbe3e267cca45b749331d98"/>
    <fixedFiles>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/Main.java</file>
    </fixedFiles>
  </bug>
  <bug id="71878" reportTime="2004-08-12 12:24:00">
    <summary>Bad injar aspect name on Linux</summary>
    <description>If you checkout the "JarUsingProject" project from "org.eclipse.ajdt.test/manual testing" in the AJDT 1.1.12 tree, and look at the advised-by entries in the outline view and the context menu of the gutter annotation, on Windows you get "injar aspect: AbstractAspect.aj", but on Linux you get "injar aspect: C:\eclipse30AJDTPluginTest\eclipse\workspace\JarGeneratingProject\src\p1\AbstractAspect.aj". The Windows-style path indicates the location of the original class files in the JAR file, which was clearly built on Windows.</description>
    <commit commitTime="2004-08-13 14:49:39" id="2dfc73855a1d7ab7652476729e6575f9116e12b8"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java</file>
    </fixedFiles>
  </bug>
  <bug id="72016" reportTime="2004-08-16 08:46:00">
    <summary>No problem type information from AspectJ compiler / AJDE</summary>
    <description>The JDT compiler provides information relating to errors and warnings via IProblem instances which allows quick fix processors to determine whether a quick fix operation is possible for a particular error or warning. However the AspectJ compiler does not make this information available to AJDE, so AJDT cannot make use of it in the same way that JDT can. This means there is no quick fix available at all in aj projects - a significant loss of functionality compared to java projects, as reported in AJDT bug 71998 .</description>
    <commit commitTime="2004-08-16 16:44:13" id="eb1d697f95742d25109b1d285db38da40464b340"/>
    <fixedFiles>
      <file>bridge/src/org/aspectj/bridge/IMessage.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/AjdeTests.java</file>
      <file>bridge/src/org/aspectj/bridge/Message.java</file>
      <file>weaver/src/org/aspectj/weaver/Checker.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java</file>
      <file>testing/src/org/aspectj/testing/xml/SoftMessage.java</file>
    </fixedFiles>
  </bug>
  <bug id="72150" reportTime="2004-08-18 03:27:00">
    <summary>AJC possible bug with static nested classes</summary>
    <description>AJC fails to find nested static classes during binary-weaving analysis if the classes have been previously compiled with J2SE5.0 javac compiler with options: -source 1.5/ - target 1.5 Note, that the nested static classes are not necessarily subject to bytecode weaving - AJC merely fails to detect them in the JARS for its analysis. This issue disappears when the .java sources are pre-compiled with - source/target 1.4, regardless if the javac compiler comes from the J2SE1.4 or J2SE5.0 distribution. This issue is distinct form Bug #71548 , since no 5.0 source code processing is required from AJC ever. Thanks, Hristo</description>
    <commit commitTime="2004-08-27 10:03:54" id="b5e6307a63b0513cb058e8d6e56ff87287bdfa15"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/TypeX.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="72154" reportTime="2004-08-18 06:00:00">
    <summary>Support for simple dump file</summary>
    <description>When the compiler terminates abnormally exception or behaves unexpectedly warning/error/abort a simple dump of the compiler state should be produced to aid problem diagnosis. The content and conditions under which the dump is produced should be configurable by the user but the facility should be enabled by default for exceptions. Consequently its inclusion should have negligible impact on compiler performance and footprint. The file should be attached to bug reports to give a complete and objective description of the user’s environment and support problem resolution where a testcase cannot be provided. One approach is to write a uniquely name file using date &amp;amp; time in the current directory e.g “ajcore.20040818.105200.txt” which should be human readable it can be zipped if large to allow the user to potentially diagnose their own problems or remove potentially sensitive data before submission. It should contain basic information such as AspectJ version, system properties and command line as well as failure information such as _full_ exception stack trace, compiler messages and internal compiler state.</description>
    <commit commitTime="2004-08-23 13:40:31" id="f5035234ee878003515413fee5e7e6bfa7a2228d"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/AjdtBatchTests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/AjdtCommand.java</file>
      <file>weaver/src/org/aspectj/weaver/World.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/BcweaverTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="72157" reportTime="2004-08-18 06:39:00">
    <summary>declare soft can cause programs with invalid exception behaviour to be generated</summary>
    <description>Compiling the program below results in the constructor for the class SCE2 throwing Exception, which it is not declared to throw either in the source code or in the generated bytecode. If the 'declare soft' statement is removed, then the super call in the SCE2 constructor is correctly reported as throwing an undeclared exception; it seems that the 'declare soft' statement turns off the exception checking of the super call despite there being no join point which covers this call that would actually soften the exception. I'm using 'DEVELOPMENT built on Monday Aug 16, 2004 at 13:50:47 GMT'. public class SuperConsExc { public SuperConsExc throws Exception { throw new Exception ; } public static void main String[] args { new SCE2 ; } } class SCE2 extends SuperConsExc { public SCE2 { super ; } } aspect SCEAspect { declare soft: Exception: within SCE2 ; }</description>
    <commit commitTime="2004-09-08 12:04:49" id="eca1429e79b3dc55c1f93ffbadb3e50eb9808d9c"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
      <file>tests/bugs/ConvertToUnchecked.java</file>
    </fixedFiles>
  </bug>
  <bug id="72528" reportTime="2004-08-24 14:21:00">
    <summary>around advice throws java.lang.VerifyError at runtime</summary>
    <description>I have an aspect that captures around a pcd and returns an Object[], though the actual methods being instrumented might return any valid POJO array, i understand that AspectJ will take care of casting at assignment. I expected the following code to work properly, but at runtime i get a java.lang.VerifyError as shown below: F:\wd\Hello&amp;gt;ajbrowser HelloWorld.lst java.lang.VerifyError: class: de/rohith/PrinterWorld, method: returnArrayWithCl oning signature: [Ljava/lang/Integer; Incompatible argument to function at de.rohith.HelloWorld.main HelloWorld.java:18 Exception in thread "main" I suspect the compiler fails to notice the return types of the methods being caught at compile time. I have tested this code with both ajbrowser as well as AJDT, both result in the same error output. -----------HelloWorldAspect.java--------------- package de.rohith; import java.lang.Object; public aspect HelloWorldAspect { private int callDepth = -1; public HelloWorldAspect { } pointcut hello : !within HelloWorldAspect ; pointcut method : execution public *[] de..* .. ; pointcut cloning : call * java.lang.Object.clone ; declare warning: method &amp;amp;&amp;amp; hello : "*[] returning method called" ; Object[] around : cflow method &amp;amp;&amp;amp; cloning &amp;amp;&amp;amp; hello { print "", thisEnclosingJoinPointStaticPart ; Object[] ret = proceed ; return Object[] ret.clone ; } private void print String prefix, Object message { for int i = 0, spaces = callDepth * 2; i &amp;lt; spaces; i++ { System.out.print " " ; } System.out.println prefix + message ; } } -----------PrinterWorld.java------------ package de.rohith; public class PrinterWorld { private Integer[] intArray = new Integer[2]; public PrinterWorld { } public void print { System.out.println "Hello World!" ; } public Integer returnInt { return new Integer 3 ; } public Integer[] returnArrayWithCloning { for int i = 0; i &amp;lt; intArray.length; i++ { intArray[i] = new Integer i++ ; } return Integer[] intArray.clone ; } public Integer[] returnArrayWithoutCloning { return intArray; } } -----------HelloWorld.java------------ package de.rohith; public class HelloWorld { public static void main String[] args { PrinterWorld p = new PrinterWorld ; p.print ; Integer i = p.returnInt ; Integer[] intArray = p.returnArrayWithCloning ; Integer[] array2 = p.returnArrayWithoutCloning ; } }</description>
    <commit commitTime="2004-09-03 13:45:46" id="27d204cf9f57a0cc06f4d7c5800c93eb55edc02a"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedTypeX.java</file>
    </fixedFiles>
  </bug>
  <bug id="72531" reportTime="2004-08-24 14:42:00">
    <summary>declare warning warns at wrong points</summary>
    <description>I have a "declare warning" declaration that warns on usage of any method that returns an array of any POJO type, this should point to the methods that in reality return an array, but i see warnings at points other than these array returning methods, and also those that have void in their signature. In the attached files i get a warning at statements like: &amp;gt; PrinterWorld p = new PrinterWorld ;[in main method] &amp;gt; System.out.println "Hello World!" ; &amp;gt; return new Integer 3 ; and these being the first/only lines in their respective methods.</description>
    <commit commitTime="2004-08-24 21:10:56" id="82eae551311afbd3a942d54e55b1c569c5f975b8"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/patterns/TypePatternTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="72671" reportTime="2004-08-26 06:56:00">
    <summary>Bootclasspath specification for compiling is not possible</summary>
    <description>I have following bug running eclipse 3.0 and ajdt 1.1.12 I have following class: import java.io.FileNotFoundException; import java.io.FileOutputStream; import org.w3c.dom.DOMConfiguration; import org.w3c.dom.DOMError; import org.w3c.dom.DOMErrorHandler; import org.w3c.dom.Document; import org.w3c.dom.DocumentFragment; import org.w3c.dom.NodeList; import org.w3c.dom.ls.DOMImplementationLS; import org.w3c.dom.ls.LSInput; import org.w3c.dom.ls.LSOutput; import org.w3c.dom.ls.LSParser; import com.dcbank.common.DOMImplementationLSSingleton; public class DOMHelper { public static final String CLASS_ID = "%full_filespec: DOMHelper.java~1:java:1 %"; public static void save Document document, String filename throws ClassNotFoundException, InstantiationException, IllegalAccessException, FileNotFoundException { document.normalizeDocument ; } } which compiles very fine with JDK 1.4.2_02 on Windows XP, as soon as the dom2-xml-apis.jar and dom3-xercesImpl.jar are added at the beginning of the jre container, or are included in the jar-library list before the system jar. As soon as I convert this project to an AspectJ project, the code does not compile anymore. The aspectJ compiler does not find the normalizeDocument, which is included in the one of the two additional jars. method any more. kind regards Arno Schmidmeier</description>
    <commit commitTime="2004-09-06 15:13:46" id="d1551bda9b14c6c2035e0c8df6f09bf4634041de"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="72699" reportTime="2004-08-26 11:46:00">
    <summary>Bogus error message: The abstract method ajc$pointcut$$tracingScope$a2 in type Tracing can only be defined by an abstract class</summary>
    <description>When attempting to compile the following aspect the resulting error message should say something like "The abstract method pointcut tracingScope in type Tracing can only be defined by an abstract aspect" public aspect Tracing { public abstract pointcut tracingScope ; }</description>
    <commit commitTime="2004-08-27 11:18:01" id="5e0876580b0e95dd06ca4342e233f9a5dceb33a5"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java</file>
    </fixedFiles>
  </bug>
  <bug id="72766" reportTime="2004-08-27 05:48:00">
    <summary>AspectJ features for Java 5</summary>
    <description>This enhancement request captures design notes for the extension of the AspectJ language and weaver to support the new Java 5 features. This discussion needs to get pushed onto aspectj-dev soon... Here are the list of Tiger features/changes that I think will impact our design or implementation. **Warning** this list may not be complete. * covariance - what should the call and execution pcds match for covariant methods? * generics - lots to say on this topic, see below * enum types - especially their interaction with inter-type declarations * autoboxing/unboxing - any implications for pcd matching? Definitely has method resolution implications for ITDMs * varargs - support for ... in signature matching. Treatment of ... vs [] in weaver. * annotations of course - in type patterns, in pcd matching, declare annotation. weaving semantics issues for attributes with different retention policies * changes to the class file format and introduction of new attributes such as ACC_BRIDGE * Miscellaneous bug fixes and changes to the bytecodes generated by the Tiger compiler - we know of at least one issue in this category: the invokevirtual instruction for a call to clone on an array has a different target in tiger the array type as opposed to Object in 1.4 . COVARIANCE ======================== given the types class Super { Car getCar {...} } class Sub extends Super { @Override // AMC - is this annotation *required* here? FastCar getCar {...} } what do the following call and execution pcds match? call * getCar // no change, matches as today call * Super.getCar // matches a call to Super.getCar. // also matches a call to Sub.getCar call Car getCar // these two only match calls to Super.getCar ? call Car Super.getCar // ie. if the static type of the receiver is Sub, it will *not* match? call Car Sub.getCar // does not match anything?? Even though Car getCar is declared in // a super-type of Sub? call FastCar getCar // matches only Sub.getCar call FastCar Sub.getCar // "" call FastCar Super.getCar // does not match anything call Car+ getCar // matches Sub.getCar and Super.getCar call Car+ Sub.getCar // "" similar exercise to be done for execution pcds note that most call/exe pcd's don't specify a return type I suspect . For those that do, covariance becomes an issue. The rules I've given allow you to match join points for any combination of Super and Sub methods Car, FastCar, and Car+ . Will Type+ become the new idiom for return type patterns when you want to take covariance into account? GENERICS ======================== If you though pcds could get messy before... Three areas to consider: *Extension of signature matching in pcds to account for generic types * ITD of generic methods and fields * Generic aspects??? Not initially for sure, and maybe not ever. Tied up in aspect instantiation. Biggest issue is matching of generics in pcds. - everywhere we currently allow a type pattern, we should allow TypePattern&amp;lt;TypePattern [,TypePattern]&amp;gt;. To say it more precisely, AspectJ13TypePattern ::= AspectJ12TypePattern[GenericPattern] GenericPattern ::= &amp;lt;AspectJ13TypePattern [,AspectJ13TypePattern]*&amp;gt; and remember, generics don't exsist in bytecode - a wonderful thing called 'erasure' - so this could all be quite good fun in the weaver... - I believe there are some attributes around to help us though Need to consider how we treat e.g. List&amp;lt;?&amp;gt; - you can write this in source, what does it look like in bytecode?? A type pattern List&amp;lt;?&amp;gt; is distinct to List&amp;lt;*&amp;gt;. For target, args, and this we don't allow type patterns, only a concrete type specification. So we will allow a generic type specification e.g. List&amp;lt;String&amp;gt;. Note that List&amp;lt;FastCar&amp;gt; cannot be cast to is not an instance of List&amp;lt;Car&amp;gt;. LinkedList&amp;lt;FastCar&amp;gt; can be cast to List&amp;lt;Car&amp;gt; - in other words the hierarchy is based on the base type, not the parameter type. This will need calling out to users, and is the reason we need to allow people to write things like List&amp;lt;Car+&amp;gt; in type patterns. ITD of generic fields not static and methods is conceptually straightforward, but might present some interesting additional type-checking requirements. ENUMS ======================== In bytecode they're just classes... with the enum attribute. Spec explicitly forbids extending the set of enum values in an enum type in any way. I don't think we should allow this either certainly not initially via an ITD form - note, if we did allow it, in addition to the semantic issues, it's an implementation nightmare in the case that the enum is declared in the same compilation unit as a switch statement that uses it. Enums can have methods and fields, so we should allow ITDM and ITDF for enums. ITDC for enums should be forbidden - this doesn't make sense. No *abstract* ITDMs for enums - these have special meaning, requiring each value to implement them - but there's no way to do that from the declaring aspect. Enums can implement interfaces, so decp implements would be allowed. decp extends with an enum should be forbidden it's not allowed in source - you can neither extend an enum nor make an enum or java.lang.Enum the supertype of any other type using decp. AUTOBOXING ======================== Does this affect our isAssignableFrom and isCoercibleFrom tables in any way? Should we support autoboxing / unboxing for args pcd? probably e.g. args int would then match a call to foo Integer i . Proceed with caution here, but it's what Tiger does...! Autoboxing and varargs messes with the method resolution algorithm. We need to fit ITDMs into the new resolution process. The process is as roughly follows: 1 Attempt to locate the correct method without considering boxing, unboxing or vararg invocations. ITDMs should be considered at this matching stage before progressing to stage 2. 2 If no match found, try again but also considering boxing and unboxing but not varargs . ITDMs should again be considered at this stage 3 Finally try again allowing both boxing and varargs, once again considering ITDMs. Consequences are that a directly matching ITDM will take precedence over a method declared locally in the target class that matches via boxing and so on. VARARGS ======================== *More* pcd fun. void foo String s, Car... cars is now a legal declaration. We need to allow TypePattern... , but only as the last argument within the signature specification of a call/exe/init pcd. e.g. call * foo String, Car... is legal call * foo Car..., String is not legal call Car... foo .. is not legal We should also allow Type... as the last entry in an args pcd. in bytecode foo String s, Car... cars ends up with a signature foo String,Car[] . We therefore have to be quite careful in join point matching. a call to foo s, carArray where carArray is of type Car[] does NOT MATCH foo String,Car... I believe . A call to foo s CAN MATCH foo String,Car... . Such fun! ANNOTATIONS ======================== And you thought type patterns had got messed up enough with generics... Annotations have different retention times - source code, class file, and runtime, with class file being the default. Do we ignore source code only attributes?? for consistent semantics across weave times Annotations apply to a wide variety of elements type, field, method, parameter, constructor, local variables, packages, annotation types . How do we fit this neatly into signature patterns? A simple example to start: call @Oneway * foo .. matches a call to a method foo that has a method attribute "@Oneway". Annotations should probably work like modifiers here... so today you can write call private protected * foo .. to match either private or protected and you can also write e.g. !public . So with annotations you should be able to write call @Oneway @Twoway * foo .. or call !@Oneway * foo .. positionally, for method, constructor, and field signature patterns, I believe annotations should come before modifiers: eg call @Oneway public * foo .. rather than call public @Oneway * foo .. as this is the order they would appear in the method declaration. To match field attributes the style would be similar: set @Sensitive * * Next comes the question of qualifying types by annotation. Instead of call * Foo+.foo .. we can write call * @Sausages Foo+ .foo .. The parens around @Sausages Foo+ are required in this case. Note that as before you could also write pointcut breakfastOrder ; call * @Sausages @Bacon @Egg !@Tomato Foo+ .foo .. etc.. To specify *any* type with the @Sausages annotation, you must write @Sausages * as the type pattern, not @Sausages . Qualifying parameter types looks like this call * foo @Sausages Order ,.. same rules as for declaring types. If you really feel the need to qualify based on package annotations you could write call * @SpecialPackage org.xyz..* .Foo+.foo .. the parens around the package pattern would once more be required in this case. It's not done yet.... what about runtime type matching based on annotations as opposed to static type matching. In other words, I should be able to write args @Sausages Foo etc.. the requirements are that you *must* still specify a type not a type pattern . This is an error to specify as is usage in this, target if @Sausages does not have runtime retention. The weaver adds a runtime test for the @Sausages attribute on the actual argument where static analysis cannot show that it definitely will or will not be present e.g. when match returns FuzzyBoolean.MAYBE . It's still no done yet... annotations can have values. for a single valued annotation I should be able to write @Eggs "sunnySideUp" which should match any Eggs annotation where the value includes "sunnySideUp" @Eggs {"sunnySideUp","freeRange"} matches any Eggs annotation where the value includes "sunnySideUp" AND "freeRange" AND possibly other values too? . So is there a way to say ONLY these values?? Do we have to introduce a * wildcard for values and make the former match when ONLY the two values are present??? @Eggs "sunnySideUp" @Eggs "freeRange" matches sunnySideUp OR freeRange. These annotations are equivalent to e.g. @Eggs value="sunnySideUp" so that should be allowed too. Full annotations as opposed to single-value annotations can have multiple attributes. So I can write e.g. @Eggs cookingStyle="sunnySideUp", chef="Fred" and it is reasonable to expect to match on that too. This whole thing raises the dreadful spectre of patterns in attribute values too. e.g. can I write @Eggs chef="Fred*" ??? We could defer annotation value matching until a follow-on and just match based on annotation name for the first pass? With all these complicating additions to patterns, we are going to need to write out a pointcut grammar for our 1.5 support to make sure we get it right and to clearly document what we support. The flip side of the coin.... whilst the world is going annotation crazy, it won't be long before you want to use declare annotation to enable your POJO to be free of framework specific annotations when is a POJO not a POJO - when it's got annotations outside of its domain . We could call it an AFPOJO.... to handle this we introduce declare annotation: declare annotation : TypePattern : @Annotation ... ; because annotation can be on so many element types we also need to support declare annotation : TypePattern.idPattern argPattern : @Annotation for methods and constructors idPattern is "new" for a cons . declare annotation : TypePattern.idPattern : @Annotation for fields. The last hurrah. We should support annotations on ITDs. e.g. @YourPlaceOrMine private void Foo.foo {...} CLASS FILE CHANGES ======================== In which bridge methods and ACC_BRIDGE attributes appear and we need to figure out what join points if any these things possess. MISC ======================== Gather miscellaneous changes we come across in this category. So far, just the change in the receiving type of a call to clone for an array in the invokevirtual instruction.</description>
    <commit commitTime="2004-11-30 17:43:50" id="4d1c2948a2f18012cd49dbe8e3a32b1a863d4d45"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
      <file>weaver/src/org/aspectj/weaver/Lint.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedMember.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedTypeX.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
      <file>tests/src/org/aspectj/systemtest/AllTests.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java</file>
    </fixedFiles>
  </bug>
  <bug id="73050" reportTime="2004-09-01 08:59:00">
    <summary>Type patterns with numbers incorrectly match anonymous and local classes.</summary>
    <description>Similarly to javac, ajc compiles anonymous and local classes into classes with scrambled names. Type patterns in pointcuts will treat these classes as member classes with a name identical to their scrambled name. Thus, such a class will be matched by a pattern if it happens to have a scrambled name that textually matches the pattern. Since scrambled names are made up by the compiler and may change if more anonymous or local classes are added, this leads to nonintuitive and inconsistent behaviour. Consider this class: public class MatchingAnonymous { static class Foo { void foo { System.out.println "Foo.foo:" ; } } static Foo x = new Foo { void foo { System.out.println "Anonymous.foo:" ; } }; static void m { class Local { void foo { System.out.println "Local.foo:" ; } } new Local .foo ; } public static void main String[] args { new Foo .foo ; x.foo ; m ; } } woven with this aspect: public aspect MA_Aspect { after : execution void MatchingAnonymous.*.foo { System.out.println ".*" ; } after : execution void MatchingAnonymous..*.foo { System.out.println "..*" ; } after : execution void MatchingAnonymous.*1.foo { System.out.println ".*1" ; } after : execution void MatchingAnonymous.*1*.foo { System.out.println ".*1*" ; } } Running the program will produce this output: Foo.foo: .* ..* Anonymous.foo: .* ..* .*1 .*1* Local.foo: ..* from which it is evident that ajc considers the anonymous class to be a member class named "1". If the line Object o = new Object {}; is added at the beginning of the class body of MatchingAnonymous, the output changes to Foo.foo: .* ..* Anonymous.foo: .* ..* Local.foo: ..* The pattern no longer matches, since the class now happens to be named "2", rather than "1". Furthermore, different naming schemes from different compilers show themselves in the matching. If the above class is compiled using javac, and then woven with the aspect, the output becomes: Foo.foo: .* ..* Anonymous.foo: .* ..* .*1 .*1* Local.foo: .* ..* .*1* The local class is now called MatchingAnonymous$1Local javac naming convention rather than MatchingAnonymous$1$Local ajc naming convention . Thus, ajc now considers it to be a direct member class of MatchingAnonymous, called "1Local", where it was otherwise considered a member class of a member class called "1", called "Local". To sum up, there should be a consistent way of matching anonymous and local classes that does not depend on the naming conventions of the compiler.</description>
    <commit commitTime="2005-11-04 13:09:58" id="c4c8b7f83e091e09662fec150f23c2d8ae44b779"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java</file>
    </fixedFiles>
  </bug>
  <bug id="73334" reportTime="2004-09-06 11:41:00">
    <summary>Avoid clashes in the org.eclipse namespace by renaming our duplicates.</summary>
    <description>We have recently renamed our 'copy' of BCEL to use a different package prefix so that our version never clashes with another version that might be around on a users system. This enhancement is to do the same thing for our 'copy' of the org.eclipse.jdt code in the shadows project . As part of packaging the shadows project to create the 'jdtcore' jar files bin and src we will rename the packages from: org.eclipse.jdt.*** to org.aspectj.org.eclipse.jdt.** This has a really nice side effect that we can make our version of the compiler accessible in the IDE. It should now be possible for AJDT to work more closely with it and get features like eager parsing to work. Care will be taken that we don't accidentally make the merge process a nightmare.</description>
    <commit commitTime="2004-09-06 15:40:02" id="b133299238024b1751afc0fb5119ca9b80e91be2"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AjMethodDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseTypeMunger.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseScope.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/MakeDeclsPublicVisitor.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AjConstructorDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/EclipseAttributeAdapter.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/Proceed.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjTypeConstants.java</file>
      <file>org.aspectj.ajdt.core/testsrc/WeaveTests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjIncrementalImageBuilder.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDesignator.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PseudoToken.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseClassPathManager.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeFieldBinding.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/AjdtCommandTestCase.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AjCompilerOptionsTest.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverMessageHandler.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/PrivilegedFieldBinding.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/compiler/IAjTerminalSymbols.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/DeclareDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/StatefulNameEnvironment.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverAdapter.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/parser/DeclarationFactory.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AdviceDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InlineAccessFieldBinding.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectClinit.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeMethodBinding.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/InterimCompilationResult.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/IfPseudoToken.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterSuperFixerVisitor.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeFieldDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java</file>
      <file>ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/ExtensionTests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBatchImageBuilder.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ThisJoinPointVisitor.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/PrivilegedHandler.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeConstructorDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildNotifier.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/PointcutBinding.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ClassFileBasedByteCodeProvider.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterSuperReference.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/core/AspectJCore.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeScope.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/IfMethodDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeMemberFinder.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AspectJBuilder.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/IOutputClassFileNameProvider.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/KnownMessageSend.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseSourceContext.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/SimpleSyntheticAccessMethodBinding.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PseudoTokens.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceLocation.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ProceedVisitor.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/SuperFixerVisitor.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/HelperInterfaceBinding.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjClassFile.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AsmBuilderTest.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/AjdtCommand.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AstUtil.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/KnownFieldReference.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseShadow.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/BuildConfigurationTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="73433" reportTime="2004-09-08 05:46:00">
    <summary>AspectJ does not correctly support -cp</summary>
    <description>Discovered by Andy Brodie. -cp is a shorthand for -classpath supported by the JDT compiler. AspectJ does not correctly support -cp option. Look at this example: C:\aspectj1.2&amp;gt;ajc -inpath injar.jar -outjar outjar.jar -cp lib\aspectjrt.jar [error] can't find type org.aspectj.lang.JoinPoint 1 error C:\aspectj1.2&amp;gt;ajc -inpath injar.jar -outjar outjar.jar -classpath lib\aspectjrt.jar This is due to the arg parser in AspectJ only recognizing -classpath. It doesn't fail when it encounters -cp, it just ignores it and passes it down to JDT for processing. The fix is to recognize -cp too.</description>
    <commit commitTime="2004-09-08 10:14:44" id="8e4d8980e45ba054e7d8e3e5e7ac3aca940d0758"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="73507" reportTime="2004-09-08 19:51:00">
    <summary>Public ITD of fields on interfaces creates mangled members</summary>
    <description>If you make a public ITD of a field on an interfacein AspectJ 1.2, then the compiler mangles it, making it unusable from external clients. It is highly desirable that all public ITD's be accessible, even from pure Java clients. E.g., interface Marker {} public class Base implements Marker {} aspect X { public int Marker.x; } if you then run javap on Base you get: Compiled from "Base.aj" public class Base extends java.lang.Object implements Marker{ public int ajc$interField$X$Marker$x; public Base ; public int ajc$interFieldGet$X$Marker$x ; public void ajc$interFieldSet$X$Marker$x int ; }</description>
    <commit commitTime="2012-03-15 10:03:03" id="42035aea54234894721cca2858035002c7bfa9c7"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/AjcMemberMaker.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java</file>
    </fixedFiles>
  </bug>
  <bug id="73895" reportTime="2004-09-14 13:08:00">
    <summary>unnecessary cast causing problems</summary>
    <description>class: org.aspectj.weaver.ResolvedTypeX$Name method: isCoerceableFrom .. I am having trouble with the line: ResolvedMember[] b = Name other .getDeclaredMethods ; //??? is this cast always safe As the comment suggests this cast is NOT always safe. In my case the cast is not safe because I have some additional implementations for ResolvedTypeX some optimizations . Solution: just remove the cast since the method "getDeclaredMethods" is already defined abstract in the type of "other" ResolvedTypeX . So the cast seems to be obsolete anyway.</description>
    <commit commitTime="2004-10-21 13:40:23" id="8a64fa2912ac02aadcf5f164dfde17a7c48877a5"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/ResolvedTypeX.java</file>
    </fixedFiles>
  </bug>
  <bug id="74048" reportTime="2004-09-16 05:30:00">
    <summary>AJDT reports unnecessary compile time warnings for private static aspects</summary>
    <description>When using private static aspects inside a class e.g. using the Participant pattern as described in Laddad: AspectJ in Action , the compiler reports a warning about the type never being used, e.g.: The private type RowSet.ConstructorCallControlAspect is never used locally This, of course, only happens when the setting "Window--&amp;gt;Preferences--&amp;gt;Java-- &amp;gt;Compiler--&amp;gt;Unused code--&amp;gt;Unused or unread private members" is set to Warning. These warnings should not be generated as aspects are almost never referred to anywhere else in the code, so they are not really unused even if references do not exist.</description>
    <commit commitTime="2005-09-01 09:38:36" id="16512b2e4e0e9efe88544472286be55fc86a1f62"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="74238" reportTime="2004-09-19 05:51:00">
    <summary>Applet which uses cflow pointcut gets AccessControlException</summary>
    <description>When I used cflow pointcut for my applet, I couldn't launch the Applet. java.lang.ExceptionInInitializerError at SandAspect.ajc$preClinit SandAspect.aj at SandAspect.&amp;lt;clinit&amp;gt; SandAspect.aj at SandApplet.init SandApplet.java at sun.applet.AppletPanel.run AppletPanel.java:353 at java.lang.Thread.run Thread.java:534 Caused by: java.security.AccessControlException: access denied java.util.Proper tyPermission aspectj.runtime.cflowstack.usethreadlocal read at java.security.AccessControlContext.checkPermission AccessControlConte xt.java:269 at java.security.AccessController.checkPermission AccessController.java: 401 at java.lang.SecurityManager.checkPermission SecurityManager.java:524 at java.lang.SecurityManager.checkPropertyAccess SecurityManager.java:12 76 at java.lang.System.getProperty System.java:612 at org.aspectj.runtime.internal.CFlowStack.selectFactoryForVMVersion CFl owStack.java:124 at org.aspectj.runtime.internal.CFlowStack.&amp;lt;clinit&amp;gt; CFlowStack.java:59 ... 5 more It because CFlowStack uses System.getProperty method with no try..catch block. Applet doesn't have permission to read system property: "aspectj.runtime.cflowstack.usethreadlocal". workaround: modify CFlowStack.java 1.5 line 123,124 like this ----- private static String getSystemPropertyWithNoSecurityException String aPropertyName, String aDefaultValue { try{ return System.getProperty aPropertyName, aDefaultValue ; } catch java.lang.SecurityException e { return aDefaultValue; } } private static void selectFactoryForVMVersion { String override = getSystemPropertyWithNoSecurityException "aspectj.runtime.cflowstack.usethreadlocal" , "unspecified" ; ----- I think defining getSystemPropertyWithNoSecurityException or more simple name :- method in some utility class and using it where you call System.getProperty are better way.</description>
    <commit commitTime="2004-10-14 08:12:09" id="6e155a6b9b78ec64f2fd4dc08152698277f1e7b7"/>
    <fixedFiles>
      <file>runtime/src/org/aspectj/runtime/internal/CFlowStack.java</file>
      <file>runtime/src/org/aspectj/runtime/internal/CFlowCounter.java</file>
    </fixedFiles>
  </bug>
  <bug id="74245" reportTime="2004-09-19 20:59:00">
    <summary>-proceedOnError does not weave aspects on compile error</summary>
    <description>When compiling aspects with "-prceedOnError", the standard java compilation will occur, but no aspects will get woven. In our environment it is unfortunately nearly impossible to eliminate compile errors during development so for aspectj to be used for any "real" function, we need to be able to weave the working classes even when there may be compile errors somewhere in the project.</description>
    <commit commitTime="2004-10-14 12:51:18" id="0a77939b3286d5ac033797234741436c57ad202f"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AspectJBuilder.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/AjdtBatchTests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java</file>
    </fixedFiles>
  </bug>
  <bug id="74279" reportTime="2004-09-20 09:23:00">
    <summary>-showWeaveInfo option is not supported by iajc Ant task</summary>
    <description>The option to show weaving messages can only be supplied in a build list when using Ant.</description>
    <commit commitTime="2004-09-30 14:41:09" id="f8a87f1bb5fb19f5eb2f85e8df32939bb88bb73e"/>
    <fixedFiles>
      <file>taskdefs/testsrc/org/aspectj/tools/ant/taskdefs/AjcTaskTest.java</file>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="74952" reportTime="2004-09-24 11:04:00">
    <summary>before,after ! cflow within Trace* prints nothing</summary>
    <description>Reference: "cflow within C vs within C ||cflowbelow within C in aspectj-users mailing list. The aspect TraceClass below doesn't print any message when the pointcut is defined to "!cflow within Trace* ". The other defintion "! within Trace* || cflowbelow within Trace* " works fine. Wes Isberg in his reply explained that cflow should never be used alone but he thought "there is a bug or two in here" class SomeClass { static public void main String [] args { } } // SomeClass aspect TraceClass { // members static private int level = 0; static private void offset { int i; for i = 0; i &amp;lt; level; ++i { System.out.print " " ; } } // offset pointcut pc : !cflow within Trace* // ! within Trace* || cflowbelow within Trace* ; before : pc { offset ; System.out.println "-&amp;gt; " + thisJoinPoint ; ++level; } after : pc { --level; offset ; System.out.println "&amp;lt;- " + thisJoinPoint ; } } // TraceClass In order to try to figure out what is happening within TraceClass, I added a second aspect, TraceTrace, just to trace TraceClass. aspect TraceTrace { // members static private int level = 0; static private void offset { int i; for i = 0; i &amp;lt; level; ++i { System.out.print " " ; } } // offset pointcut pc : within TraceClass ; before : pc { offset ; System.out.println "=&amp;gt; " + thisJoinPoint ; ++level; } after : pc { --level; offset ; System.out.println "&amp;lt;= " + thisJoinPoint ; } } // TraceTrace Here is what TraceTrace prints when TraceClass uses "!cflow within Trace* " =&amp;gt; staticinitialization TraceClass.&amp;lt;clinit&amp;gt; =&amp;gt; set int TraceClass.level &amp;lt;= set int TraceClass.level =&amp;gt; preinitialization TraceClass =&amp;gt; initialization TraceClass =&amp;gt; execution TraceClass &amp;lt;= execution TraceClass &amp;lt;= initialization TraceClass &amp;lt;= staticinitialization TraceClass.&amp;lt;clinit&amp;gt; The after advice is not executed for preinitialization.</description>
    <commit commitTime="2004-10-21 12:55:49" id="a303a09bbdbee8ce39e2ba00a3a33e54df92c24f"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="75442" reportTime="2004-10-01 06:49:00">
    <summary>The compiler generates unnecassary instance variables w/ perthis association</summary>
    <description>When compiling the included example aj project, the compiled class AnotherClass. class has instance variables generated into it even though it has nothing to do with the aspect. This generates unnecessary memory consumption and noise e.g. when debugging.</description>
    <commit commitTime="2005-05-10 15:44:11" id="83655ff47c1af1ca58c8043626799e0483d5acd4"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/PerObject.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/AllTestsAspectJ150.java</file>
      <file>tests/java5/ataspectj/ataspectj/AllLTWTests.java</file>
      <file>weaver/src/org/aspectj/weaver/PerObjectInterfaceTypeMunger.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedTypeX.java</file>
      <file>testing/testsrc/org/aspectj/testing/harness/bridge/AbstractRunSpecTest.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Options.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
      <file>testing/newsrc/org/aspectj/testing/AjcTest.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerSingleton.java</file>
      <file>weaver/src/org/aspectj/weaver/Advice.java</file>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelPerClauseAspectAdder.java</file>
      <file>weaver/src/org/aspectj/weaver/World.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerCflow.java</file>
      <file>testing/newsrc/org/aspectj/testing/AntSpec.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/ModelPerformanceTest.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Aj.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
      <file>tests/java5/ataspectj/ataspectj/PerClauseTest.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerTypeWithin.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</file>
      <file>tests/java5/ataspectj/ataspectj/TestHelper.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
      <file>weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java</file>
      <file>testing/newsrc/org/aspectj/testing/CompileSpec.java</file>
      <file>weaver/src/org/aspectj/weaver/CrosscuttingMembers.java</file>
    </fixedFiles>
  </bug>
  <bug id="75568" reportTime="2004-10-04 10:12:00">
    <summary>ajc changes classfile timestamps even if compilation fails regression</summary>
    <description>It appears that ajc 1.2 updates a classfile timestamps even if the compilation fails. This breaks the integration with the Ant build system. E.g. using the ant "javac" task with the Ajc11CompilerAdapter interface, the compilation may fail on the first attempt and succeed on the second attempt, - because ajc has touched the timestamp and Ant hence decides that nothing needs to be recompiled. This did not happen in ajc 1.1. To reproduce: 1. In the examples/observer folder, run a build: ajc -sourceroots . 2. Edit the "Demo.java" class and insert the line "DONT COMPILE" 3. Run the compilation again. The compiler displays the correct error message but the Demo.class file has been updated with the compile-time timestamp.</description>
    <commit commitTime="2004-10-14 12:51:18" id="0a77939b3286d5ac033797234741436c57ad202f"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AspectJBuilder.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/AjdtBatchTests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java</file>
    </fixedFiles>
  </bug>
  <bug id="76030" reportTime="2004-10-11 12:28:00">
    <summary>Optimize cflow performance</summary>
    <description/>
    <commit commitTime="2004-10-11 18:39:06" id="5c996fc559581581e9dde60a6f555aa3ff7cc042"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
      <file>runtime/src/org/aspectj/runtime/internal/cflowstack/ThreadStackFactoryImpl11.java</file>
      <file>weaver/src/org/aspectj/weaver/NameMangler.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ConcreteCflowPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java</file>
      <file>runtime/src/org/aspectj/runtime/internal/cflowstack/ThreadStackFactoryImpl.java</file>
      <file>weaver/src/org/aspectj/weaver/World.java</file>
      <file>runtime/src/org/aspectj/runtime/internal/cflowstack/ThreadStackFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="76055" reportTime="2004-10-12 03:43:00">
    <summary>Some Pointcut PatternNodes are missing getters to traverse syntax tree</summary>
    <description>In order to find out which other pointcuts are referenced by a pointcut definition i need to access the private members of the CflowPointcut, IfPointcut and NotPointcut PatternNodes found in the weaver module. Unlike the OrPointcut and AndPointcut classes, they are missing the appropriate getter methods.</description>
    <commit commitTime="2005-03-23 13:45:09" id="b0f270ee1090daf7b5aec3b534b98d28955f77bd"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/IfPointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="76096" reportTime="2004-10-12 12:17:00">
    <summary>Anonymous classes unaware of introductions into abstract classes error can't find type $Local$</summary>
    <description>The example below generates a compiler error, on both Linux and Windows. The error occurs for ajdt eclipse as well. The compiler error: $ ajc -version &amp;gt; AspectJ Compiler 1.2 built on Friday May 21, 2004 at &amp;gt; 15:06:22 GMT &amp;gt; $ ajc ConcreteClassA.java &amp;gt; error can't find type $Local$ &amp;gt; &amp;gt; /home/marin/tests/ConcreteClassA.java:18 error Class &amp;gt; must implement the inherited abstract method &amp;gt; InterfaceA.a2 &amp;gt; InterfaceA a = new AbstractClassA { &amp;gt; ^^^^^^^^^^^^^ &amp;gt; &amp;gt; 2 errors &amp;gt; -------- &amp;gt; The example in ConcreteClassA.java : interface InterfaceA { public void a1 ; public void a2 ; } abstract class AbstractClassA implements InterfaceA { public void a1 { System.out.println "AbstractClassA.a " ; } } public class ConcreteClassA extends AbstractClassA { public void someMethod { InterfaceA a = new AbstractClassA { }; } } aspect IntroAspectA { public void AbstractClassA.a2 { System.out.println "AbstractClassA.a2 from IntroAspectA" ; } } ------------ If you comment out the body of someMethod the anonymous class , the code compiles without errors.</description>
    <commit commitTime="2004-10-19 10:37:31" id="6beb43faeecff249a33e7d7e2489c6a92a4700fd"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="76374" reportTime="2004-10-15 13:23:00">
    <summary>Problem with declare parents when using non-public classes</summary>
    <description>Non-public classes, when explicitly named, do not get woven. The test case below exhibits this problem when the package declaration is uncommented. If the package declaration is commented out, the class is woven correctly. If the package declaration is uncommented, a compilation failure occurs with AspectJ 1.2. According to Andrew Clement, AspectJ 1.2.1 compiles, but does not weave. If the "MyInnerClass" is changed to be public [regardless of the package declaration status], the class is woven correctly. Also: When the "MyInnerClass" is moved out of "MyClass", but kept in the MyClass.java file, then the following behavior is exhibited: If the package declaration is commented out, the class is woven correctly. If the package declaration is uncommented out, a compilation failure occurs with AspectJ 1.2. Note, in this case, MyInnerClass cannot be declared as public. It also appears that if the RunnableAspect is placed in the same package as "MyClass", weaving occurs correctly, regardless of any class access modifiers &amp;lt;MyClass.java&amp;gt; // package mypackage; public class MyClass { public MyClass { MyInnerClass mic = new MyInnerClass ; if mic instanceof Runnable mic.run ; } class MyInnerClass { public void run { System.out.println "In MyInnerClass.run !!" ; } } public static void main String args[] { new MyClass ; } } &amp;lt;/MyClass.java&amp;gt; &amp;lt;RunnableAspect.aj&amp;gt; public aspect RunnableAspect { declare parents: MyClass$MyInnerClass implements Runnable; // declare parents: mypackage.MyClass$MyInnerClass implements Runnable; } &amp;lt;/RunnableAspect.aj&amp;gt;</description>
    <commit commitTime="2005-09-21 16:51:15" id="ca9c1f7c57b64473042f3100a4159650da085111"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="76798" reportTime="2004-10-22 07:04:00">
    <summary>Add versions to woven class files - enabling better backwards compatibility.</summary>
    <description>We don't currently include a version in the class files that come out of the weaver. This can cause problems. For example, if we add a new attribute to a class file in a future version of AspectJ, then that attribute will cause older versions of AspectJ to blow up if they encounter it. If we include a version in the class file we can rev the version number when we add attributes or change the class file form in another way , and by checking that version number in the weaver we can better determine whether we should fail if we encounter a new attribute or other change , or if it is safe to continue processing. I will add a new WeaverVersion attribute that includes 2 shorts. Major and Minor. Encountering a major version in a class file that is greater than the version a particular weaver is designed to understand will cause compilation to fail. Encountering a minor version in a class file that is greater than the minor version a particular weaver is designed to understand will not cause compilation to fail - we will assume it is safe to continue.</description>
    <commit commitTime="2004-10-22 10:53:11" id="6aa75169a769a19b3f7f26acc03a5ad81f092bb0"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAttributes.java</file>
      <file>weaver/src/org/aspectj/weaver/AjAttribute.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelField.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelMethod.java</file>
    </fixedFiles>
  </bug>
  <bug id="77076" reportTime="2004-10-26 23:43:00">
    <summary>Weaving into jar fails if some of the referred classes are unavailable</summary>
    <description>I am trying to profile JDBC access in a Spring-based application. Since all the JDBC interaction is performed through Spring classes, I need to weave into spring.jar. However, many of the classes referred by spring.jar aren't available to me I am not using the functionality implemented by many of the classes . When I try to weave into spring.jar I get errors complaining that it can't find types for those classes. I expected that ajc would ignore unknown classes unless weaving would be affected by content/API of those classes. Using jar files that refer to foreign classes that one may never have/need is a common scenario. For example, spring.jar refers to Velocity, Struts, JDO, Hibernate, Quartz classes; I am unlikely to use all of these referred frameworks in an application. This bug/limitation prevents using AspectJ with such jars. To reproduce the bug in a controlled environment, I created the following aspect which should make the weaving process a pass-thru filter no join point is matched by the pointcut class TemporaryClass { } public aspect NoWeaveAspect { before : call * TemporaryClass.* .. &amp;amp;&amp;amp; within org.spring..* { } } Weaving this aspect with spring.jar should result in logically identical jar file. However, when I compile using the following command or equivalent ant task , I get the following errors: C:\work\aop\bugs\injar-with-nonexisting-classes&amp;gt;ajc -version AspectJ Compiler 1.2.1rc1 built on Friday Oct 22, 2004 at 13:31:47 GMT C:\work\aop\bugs\injar-with-nonexisting-classes&amp;gt;ajc -injars spring.jar -outjar s pring-woven.jar NoWeaveAspect.java C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe org.quartz.xml.JobSchedulingDataProcessor no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe org.quartz.StatefulJob no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe org.quartz.SimpleTrigger no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe freemarker.cache.TemplateLoader no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe org.aopalliance.intercept.MethodInterceptor no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe org.quartz.CronTrigger no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe org.aopalliance.intercept.MethodInterceptor no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe org.quartz.JobDetail no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe org.quartz.Job no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe org.quartz.impl.jdbcjobstore.JobStoreCMT no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe org.apache.struts.action.PlugIn no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe org.apache.velocity.tools.generic.NumberTool no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe org.apache.struts.action.Action no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe org.apache.struts.tiles.TilesRequestProcessor no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe org.apache.struts.action.RequestProcessor no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe org.apache.velocity.runtime.resource.loader.ResourceLoader no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe org.apache.velocity.runtime.log.LogSystem no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe javax.faces.el.VariableResolver no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe org.apache.velocity.tools.generic.DateTool no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe org.apache.commons.attributes.AttributeRepositoryClass no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe org.aopalliance.intercept.MethodInterceptor no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe org.aopalliance.intercept.MethodInterceptor no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe net.sf.cglib.proxy.MethodInterceptor no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe org.aopalliance.intercept.MethodInterceptor no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe org.apache.commons.pool.PoolableObjectFactory no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe org.aopalliance.intercept.MethodInterceptor no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe net.sf.cglib.proxy.MethodInterceptor no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe net.sf.cglib.proxy.Dispatcher no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe org.aopalliance.intercept.MethodInvocation no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe net.sf.cglib.proxy.CallbackFilter no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe net.sf.cglib.proxy.NoOp no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe net.sf.hibernate.transaction.TransactionManagerLookup no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe net.sf.hibernate.connection.ConnectionProvider no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe net.sf.hibernate.UserType no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe org.apache.ojb.broker.accesslayer.ConnectionFactoryManagedImpl no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe org.aopalliance.intercept.MethodInterceptor no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe net.sf.cglib.proxy.MethodInterceptor no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe net.sf.cglib.proxy.CallbackFilter no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe org.aopalliance.intercept.MethodInterceptor no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe org.aopalliance.intercept.MethodInterceptor no source information available C:\work\aop\bugs\injar-with-nonexisting-classes\spring.jar [error] can't find ty pe org.aopalliance.intercept.MethodInterceptor no source information available 41 errors</description>
    <commit commitTime="2005-09-24 09:34:13" id="a4a9090d88bd1a79d87f0bc08aff7fa627e81f99"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
      <file>weaver/src/org/aspectj/weaver/Member.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAccessForInlineMunger.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/TypePatternList.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedType.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/JoinPointSignature.java</file>
      <file>weaver/src/org/aspectj/weaver/WeaverMessages.java</file>
      <file>weaver/src/org/aspectj/weaver/ReferenceType.java</file>
      <file>weaver/src/org/aspectj/weaver/MemberImpl.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java</file>
      <file>weaver/src/org/aspectj/weaver/World.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/OutjarTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="77163" reportTime="2004-10-27 20:09:00">
    <summary>Load time weaver default verbose setting</summary>
    <description>The default setting for the load time weaver is as of 1.2.1rc1 to produce weaving messages rather than ignore them. I think the default should be changed to ignore them. Also, I cannot override the default setting with -Daj.weaver.versose="False". This is the implied syntax from docs/examples/build.xml. If this has changed then build.xml should be updated. Otherwise, the weaver should be fixed to use it!</description>
    <commit commitTime="2004-11-05 11:00:41" id="edd6539e53d96e60f257952e582783c7d8aac25c"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/WeavingURLClassLoaderTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="77269" reportTime="2004-10-29 06:25:00">
    <summary>Advice on inner classes not show in Outline view or gutter</summary>
    <description>Advice associated with pointcuts that match join points in inner classes are not shown. Declare warning/error are shown however. See attached screenshot for example below. Notice WEAVEINFO messages indicate problem is in AJDT not AspectJ. Also notice phantom entry in Outline view "injar aspectL Test.java". package bug_nnnnn; public class Test { public void test { new Runnable { public void run { try { throw new Exception ; } catch Exception ex { handleException ex ; } } }; } public static void handleException Throwable th { } public static void main String[] args { try { throw new Exception ; } catch Exception ex { handleException ex ; } } } aspect Aspect { declare warning : call void handleException .. &amp;amp;&amp;amp; !within Aspect : "Only Aspect should handle exceptions"; pointcut caughtExceptions Throwable th : handler Throwable+ &amp;amp;&amp;amp; args th ; before Throwable th : caughtExceptions th { Test.handleException th ; } }</description>
    <commit commitTime="2005-10-04 08:05:55" id="45730680627912726919028374403612047c23e3"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java</file>
    </fixedFiles>
  </bug>
  <bug id="77799" reportTime="2004-11-04 01:48:00">
    <summary>NullPointerException in StructureSearchManager</summary>
    <description>Calling Ajde.getDefault .getStructureSearchManager .findMatches ... for an AspectJ project that has not been built results in a NullPointerException in StructureSearchManager.findMatchesHelper ... line 58 Simple patch is attached.</description>
    <commit commitTime="2004-11-04 15:44:51" id="aab9c2c57db1c014e03720676d7e3cac14a761aa"/>
    <fixedFiles>
      <file>ajde/src/org/aspectj/ajde/ui/StructureSearchManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="78021" reportTime="2004-11-06 13:47:00">
    <summary>Injecting exception into while loop with break statement causes catch block to be ignored</summary>
    <description>In order to test exception scenarios in an existing framework, I have created an aspect to inject an exception. The exception is injected into some code running within a try/catch/finally block. After the exception is thrown, I am expecting control to pass to the catch block. However, what is happening is that the catch block code is not executed, control passes through the finally block and the undeclared exception is thrown to the calling method. Here is a distilled test case: public class MainClass { protected Integer counter; private int j; public static void main String[] args { MainClass mh = new MainClass ; try { mh.doSomething ; } catch Exception e { System.out.println "Exception thrown by doSomething!!!!!" ; e.printStackTrace ; } } public void doSomething { int i = 0; while i++ &amp;lt; 1 { counter=null; try { counter = getCounter ; if counter == null { break; } commit ; } catch Throwable e { System.out.println "Caught exception " + e ; } finally { System.out.println "In finally block" ; } } } protected Integer getCounter { return new Integer j++ ; } protected void commit throws SQLException { System.out.println "Main.commit" ; } } The following aspect injects the exception: public aspect SimpleExceptionThrowingAspect { pointcut commitOperation : call * MainClass+.commit .. ; before throws SQLException : commitOperation { throw new SQLException "Dummy SQL Exception", "55102" ; } } Expected output is: Caught exception java.sql.SQLException: Dummy SQL Exception In finally block Actual output is: In finally block Exception thrown by doSomething!!!!! java.sql.SQLException: Dummy SQL Exception at nz.govt.moh.test.SimpleExceptionThrowingAspect.ajc$before$nz_govt_moh_test_SimpleExceptionThrowingAspect$1$292c82f1 SimpleExceptionThrowingAspect.aj:10 at nz.govt.moh.test.MainClass.doSomething MainClass.java:32 at nz.govt.moh.test.MainClass.main MainClass.java:14 Removing the "break;" statement from MainClass.java causes the expected output to be produced.</description>
    <commit commitTime="2005-01-11 11:22:15" id="603b063ecd2943e20f099712d9b754b19a380fee"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/TestUtils.java</file>
      <file>tests/src/org/aspectj/systemtest/AllTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="78261" reportTime="2004-11-10 01:58:00">
    <summary>field pattern with "void" type should be compile-time error</summary>
    <description>We really should barf early on get void i as opposed to just compiling through and treating it as something that'll never match. I rated this as minor since this is just an error message issue.</description>
    <commit commitTime="2005-08-19 14:47:59" id="2b23e912c5e57b0731b25c3a26ec365b20468b0f"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="78383" reportTime="2004-11-11 08:07:00">
    <summary>pertarget.PertargetAspect$ajcMightHaveAspect is implemented by too many objects</summary>
    <description>When compiling with a pertarget aspect, it seems that suddenly all available classes whatsoever implement the interface "pertarget. PertargetAspect$ajcMightHaveAspect". This is certainly too much. Only possible target classes need to implement this indeed the highest type surfices, subclasses can inherit this implementation . This would reduce code bloat.</description>
    <commit commitTime="2005-06-07 08:13:52" id="295ad4c97e118c35b81f0d8f6faee0f4d244877d"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/ThrowsPattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/PerObjectInterfaceTypeMunger.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/TypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PatternParser.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/Pointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ConcreteCflowPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/IfPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AndPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/NotTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/NamePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/OrPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/TypePatternList.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AndAnnotationTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/OrTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/NotAnnotationTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AndTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ModifiersPattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AnnotationPatternList.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ExactAnnotationTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PatternNode.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AnnotationTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/NotPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ThisOrTargetAnnotationPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WithinCodeAnnotationPointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="78954" reportTime="2004-11-18 10:01:00">
    <summary>Compiler cannot cope with 4000 jars on the classpath</summary>
    <description>We have a problem when the classpath is extremely long. This is because bcel, the weaver itself and the JDT compiler attempt to open all the jars before commencing processing. It is possible on windows to run out of file handles if this is attempted and the compiler blows up with a 'too many files open' type failure. I have a fix ready in JDT, the weaver, and BCEL. In all places we open files on demand and we also manage the pool of open ones - if you exceed the limit on open jars then it will close a few before opening any more. This limit will be configurable through a property.</description>
    <commit commitTime="2004-11-18 16:00:19" id="9f1649a4d9717c8b7997a8d0063deaf693e680ec"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/JavaClass.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/util/ClassPath.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/Repository.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/util/SyntheticRepository.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/verifier/VerifierFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="79523" reportTime="2004-11-25 16:31:00">
    <summary>BCException: illegal change to pointcut declaration: calls &lt;nothing&gt;</summary>
    <description>~&amp;gt; which ajc /cygdrive/c/aspectj1.2.1/bin/ajc ~&amp;gt; ajc -version AspectJ Compiler 1.2.1 built on Friday Nov 5, 2004 at 12:30:41 GMT ~&amp;gt; cat AspectTest.java aspect AspectTest { pointcut calls String str : call *.new String &amp;amp;&amp;amp; args str ; declare warning: calls str : "not statically determinable, trying anyway"; } ~&amp;gt; ajc AspectTest.java C:\Documents and Settings\Macneil Shonle\AspectTest.java [error] Internal compiler error org.aspectj.weaver.BCException: illegal change to pointcut declaration: calls &amp;lt;nothing&amp;gt; at org.aspectj.weaver.patterns.ReferencePointcut.concretize1 ReferencePointcut.java:268 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:167 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:154 at org.aspectj.weaver.Checker.concretize Checker.java:35 at org.aspectj.weaver.CrosscuttingMembers.addShadowMunger CrosscuttingMembers.java:78 at org.aspectj.weaver.CrosscuttingMembers.addDeclare CrosscuttingMembers.java:102 at org.aspectj.weaver.CrosscuttingMembers.addDeclares CrosscuttingMembers.java:92 at org.aspectj.weaver.CrosscuttingMembersSet.addAdviceLikeDeclares CrosscuttingMembersSet.java:68 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addAdviceLikeDeclares AjLookupEnvironment.java:163 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:138 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:331 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:348 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:680 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:168 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:102 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:109 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:291 at org.aspectj.tools.ajc.Main.runMain Main.java:227 at org.aspectj.tools.ajc.Main.main Main.java:80 no source information available C:\Documents and Settings\Macneil Shonle\AspectTest.java:3 [error] bad parameter to pointcut reference declare warning: calls str : "not statically determinable, trying anyway"; ^^^^^^^^ C:\Documents and Settings\Macneil Shonle\AspectTest.java:3 [warning] no match for this type name: str [Xlint:invalidAbsoluteTypeName] declare warning: calls str : "not statically determinable, trying anyway"; ^ ABORT Exception thrown from AspectJ 1.2.1 This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. illegal change to pointcut declaration: calls &amp;lt;nothing&amp;gt; illegal change to pointcut declaration: calls &amp;lt;nothing&amp;gt; org.aspectj.weaver.BCException: illegal change to pointcut declaration: calls &amp;lt;nothing&amp;gt; at org.aspectj.weaver.patterns.ReferencePointcut.concretize1 ReferencePointcut.java:268 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:167 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:154 at org.aspectj.weaver.Checker.concretize Checker.java:35 at org.aspectj.weaver.CrosscuttingMembers.addShadowMunger CrosscuttingMembers.java:78 at org.aspectj.weaver.CrosscuttingMembers.addDeclare CrosscuttingMembers.java:102 at org.aspectj.weaver.CrosscuttingMembers.addDeclares CrosscuttingMembers.java:92 at org.aspectj.weaver.CrosscuttingMembersSet.addAdviceLikeDeclares CrosscuttingMembersSet.java:68 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addAdviceLikeDeclares AjLookupEnvironment.java:163 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:138 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:331 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:348 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:680 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:168 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:102 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:109 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:291 at org.aspectj.tools.ajc.Main.runMain Main.java:227 at org.aspectj.tools.ajc.Main.main Main.java:80 Dumping to ajcore.20041125.132911.022.txt 1 fail|abort, 2 errors, 1 warning Signal 127</description>
    <commit commitTime="2005-08-19 19:51:32" id="93fdce17441da20b66f6db665db9d9272adda09c"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="79554" reportTime="2004-11-26 08:59:00">
    <summary>Return in try-block disables catch-block if final-block is present</summary>
    <description>If in a try-catch-finally block, the catch block contains a conditional return statement, an exception thrown within the try-block will not be handled by the catch-block. Instead the finally block is entered an the exception is passed on. In these cases the Exception Table contains "any"-entries, that occur befor those of the real catch-block. A short example can be found here: http://www.inf.tu-dresden.de/~s7060674/temp/ajc_bug.zip</description>
    <commit commitTime="2005-01-11 11:22:15" id="603b063ecd2943e20f099712d9b754b19a380fee"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/TestUtils.java</file>
      <file>tests/src/org/aspectj/systemtest/AllTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="80249" reportTime="2004-12-06 05:20:00">
    <summary>Order of types passed to compiler determines weaving behavior</summary>
    <description>Currently, the order in which you specify types when passing them to the compiler can affect how they are woven: For example, if we have class A and class B extends A - Also, an aspect that 'declare parents: A+ implements Serializable' then depending on whether we see A first, we may or may not make B serializable. The fix is that when we weave a type, we first weave its supertype then its superinterfaces if they were also passed to the compiler . The problematic construct is declare parents - so we only process the types in a special order if there are declare parents around. Also, because we can't currently do decp when binary weaving, the order processing logic is only being put into the source weaving pipeline.</description>
    <commit commitTime="2004-12-06 10:38:07" id="9052d5d86cfcdeb9a64ed903beea53d077f0de08"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
    </fixedFiles>
  </bug>
  <bug id="80571" reportTime="2004-12-09 00:42:00">
    <summary>ClassFormatError due to implementing methods in Interface</summary>
    <description>When TestAspect is weaved into TestIF, ClassFormatError occurs in runtime. aspectJ's weaver weaves a implemented method into TestIF in order to hook the event of TestObj's constructor call. [ERROR] java.lang.ClassFormatError: TestIF Illegal method modifiers:0x1A [Sample Application] public interface TestIF{ public final String NAME = "TestIF"; public TestObj testObj = new TestObj ; } public class TestObj{ public TestObj {} } public aspect TestAspect{ Object around : call *.new .. { System.out.println "before" ; Object ret = proceed ; System.out.println "after" ; return ret; } } Regards,</description>
    <commit commitTime="2005-08-20 12:11:37" id="b0622ad2495f6bd3744751c9e52375f4b5601114"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="80916" reportTime="2004-12-14 06:01:00">
    <summary>In some cases the structure model doesn't contain the "matches declare" relationship</summary>
    <description>With a project containing one class and one aspect: public class HelloClass { public static void main String[] args { new HelloClass .sayHello ; } public void sayHello { System.out.println "Hello" ; } } public aspect A1 { pointcut test : get * System.out ; declare warning : test &amp;amp;&amp;amp; !within A1 : "test warning"; pointcut anotherTest : execution void HelloClass.sayHello .. ; after returning : anotherTest { System.out.println "returning...." ; } } The following is returned from the structure model: asmRelMap entry: HelloClass.sayHello , relationship: advised by, target: A1.afterReturning : anotherTest.. asmRelMap entry: A1.afterReturning : anotherTest.., relationship: uses pointcut, target: A1.anotherTest asmRelMap entry: A1.afterReturning : anotherTest.., relationship: advises, target: HelloClass.sayHello asmRelMap entry: HelloClass.sayHello , relationship: advised by, target: A1.afterReturning : anotherTest.. asmRelMap entry: A1.anotherTest , relationship: pointcut used by, target: A1.afterReturning : anotherTest.. asmRelMap entry: A1.declare warning: "test warning", relationship: matched by, target: HelloClass.sayHello In other words, the model is saying that there are two entries the same: asmRelMap entry: HelloClass.sayHello , relationship: advised by, target: A1.afterReturning : anotherTest.. whereas one of these should be the "matches declare" relationship relating to the declare warning. Changing the aspect to be: public aspect A1 { pointcut test : get * System.out ; declare warning : test &amp;amp;&amp;amp; !within A1 : "test warning"; pointcut anotherTest : execution void HelloClass.sayHello .. ; after returning : anotherTest { System.out.println "returning...." ; } after returning : test { System.out.println "returning again!" ; } } means that the IRelationshipMap does now contain the "matches declare" relationship. This is all with AspectJ 5 M1.</description>
    <commit commitTime="2004-12-20 14:44:07" id="427c0d3dfdcc6a74c7e0bc6fcf1f55206ee04a8e"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java</file>
    </fixedFiles>
  </bug>
  <bug id="81846" reportTime="2004-12-23 07:27:00">
    <summary>EclipseAdapterUtils.java:83</summary>
    <description>java.lang.ArrayIndexOutOfBoundsException: 3 Unfortunately I can't provide much more information, please see the attached compiler dump.</description>
    <commit commitTime="2005-06-01 16:12:58" id="a675b659cdc4da45383551e75c9472556c095f94"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java</file>
    </fixedFiles>
  </bug>
  <bug id="81863" reportTime="2004-12-23 10:54:00">
    <summary>Annotation matching using within PCD doesn't appear to be working.</summary>
    <description>From discussion on aspectj list: Hi, Well, having just done some testing, I think this even simpler case shows within is not behaving correctly for annotations: @Entity public class myClass1 {...} public class myClass2 {...} public aspect myAspect { before :call * * .. &amp;amp;&amp;amp; within @Entity * { } } The pointcut matches all the method calls in myClass1 and myClass2 effectively it is parsing but then ignoring the annotation specified in the within . So, what you want to do is valid but AspectJ is misbehaving - you get a stack overflow because the perthis clause is also matching on your aspect type when obviously that doesnt have the annotation and shouldnt be matched. Andy. --- Andy Clement AspectJ Development Rifflard Mickaël &amp;lt; Mickael.Rifflard@atosorigin.com &amp;gt; Sent by: aspectj-users-admin@eclipse.org 22/12/2004 16:56 Please respond to aspectj-users@eclipse.org To &amp;lt; aspectj-users@eclipse.org &amp;gt; cc Subject [aspectj-users] Aspect instance on JDK 1.5 annotation Hi all, I'm currently trying to get an aspect instance for an object instance with specific JDK 1.5 annotation. Exemple : Create an aspect instance for all object like that : @Entity public class myClass { ... } I try public aspect myAspect perthis within @Entity * {...} but this aspect execution lead to a java.lang.StackOverflowError exception. Is it possible ? Thanks. Mickaël _______________________________________________ aspectj-users mailing list aspectj-users@eclipse.org http://dev.eclipse.org/mailman/listinfo/aspectj-users</description>
    <commit commitTime="2005-01-05 15:15:28" id="8a8930fd9808b03e3c117086d7ba0eaa654a2438"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/AnnotationRuntimeTests.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ExactAnnotationTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/TypePattern.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/AnnotationPointcutsTests.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AnnotationTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java</file>
      <file>tests/java5/annotations/within/PlainWithin.java</file>
    </fixedFiles>
  </bug>
  <bug id="82062" reportTime="2005-01-01 15:07:00">
    <summary>WeaveMessage should provide more information</summary>
    <description>It would be wonderful if the WeaveMessage object would provide two additional things: - the affected class name - the aspect name I could use this to determine which aspect is woven into which class during load-time weaving need this for dependency management .</description>
    <commit commitTime="2005-01-04 13:15:57" id="98976598593e8a1f89e9628e8fc11c7822b8e3d4"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
      <file>weaver/src/org/aspectj/weaver/Shadow.java</file>
      <file>bridge/src/org/aspectj/bridge/WeaveMessage.java</file>
      <file>weaver/src/org/aspectj/weaver/Advice.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="82134" reportTime="2005-01-04 09:40:00">
    <summary>AspectJ 5 M2 should implement backwards compatibility for binary aspect form</summary>
    <description>Hi Adrian, thanks for the detailed explanation of the compatibility questions. That explains the problem I observed. &amp;gt; * An AspectJ program should always be run with the aspectjrt.jar runtime &amp;gt; library that accompanies the distribution containing the compiler/weaver &amp;gt; used to build it. Interesting point. Which one? The one that is used to compile it or the one that is used to weave it? &amp;gt; However, instead of some IOException, what you should see is a nice &amp;gt; message saying that the aspect was produced by a more recent version of &amp;gt; AspectJ and cannot be read. Likewise, if you load a pre-aspectj 5 aspect &amp;gt; into the AspectJ 5 weaver right now, you'll also see an IOException &amp;gt; odds-on . In M2 we'll detect that and use the back-level loaders to read &amp;gt; it in. Okay. Is there a bug to track this? I really would like to update the weaver of my weaving runtime but only if it allows to load/weave asepects that are compiled with any of the AJDT versions that are out right now AJDT 1.1.x and AJDT 1.2.0Mx .</description>
    <commit commitTime="2005-01-07 14:14:45" id="797b6a6afb75b14dc530bc0831566e110da3ae91"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/ThrowsPattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/DeclareParents.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerObject.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAttributes.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/DeclareSoft.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerSingleton.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/AllTestsJava5_binaryWeaving.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/NotTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/DeclareErrorOrWarning.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerCflow.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedPointcutDefinition.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelMethod.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/BindingAnnotationTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/OrPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/TypePatternList.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AndAnnotationTypePattern.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/bcel/PointcutResidueTestCase.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/patterns/SignaturePatternTestCase.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AndTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/AdviceKind.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ModifiersPattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AnnotationPatternList.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ExactAnnotationTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/BindingTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/AjAttribute.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AnnotationTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/NotPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WithinCodeAnnotationPointcut.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/patterns/TypePatternListTestCase.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/TypePattern.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/patterns/AndOrNotTestCase.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/Pointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/IfPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerClause.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AndPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/patterns/DeclareErrorOrWarningTestCase.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/NamePattern.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/patterns/WithinTestCase.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/OrAnnotationTypePattern.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/patterns/NamePatternTestCase.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/OrTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/Declare.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/NotAnnotationTypePattern.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/patterns/ModifiersPatternTestCase.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/bcel/PatternWeaveTestCase.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/patterns/TypePatternTestCase.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java</file>
      <file>weaver/src/org/aspectj/weaver/WeaverStateInfo.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ThisOrTargetAnnotationPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelField.java</file>
    </fixedFiles>
  </bug>
  <bug id="82171" reportTime="2005-01-04 14:13:00">
    <summary>enable ASM interoperability with JavaCore via uniform element handles</summary>
    <description>Proposal pasted from the following email discussion: http://dev.eclipse.org/mhonarc/lists/ajdt-dev/msg00379.html We finally seem to be both have more support for working directly with the Java Model, and more need to do so. Here's an idea for a light-weight update to our architecture that will give us transparent access for working with the relationship map using either the IJavaElements or IProgramElements. The idea is that we change the handle identifiers, used for storing entries in the map, to be the same those used by the JavaModel, i.e. IJavaElement.getHandleIdentifier . That will allow us to ask for relationships for IJavaElements, and get back a list of handles that an adapter can turn into IJavaElements. Currently our identifiers are a source location including path, line, and column number. The Java model uses the handles that look like the following, "=Project-l/src&amp;lt;pkg1{Foo.java[Foo~m1", which uniquely identify members, are stable across builds and Eclipse invocations, but don't go below the member signature. So our adapter will have to extend these by appending either line/column or offset information to reach at "code" elements e.g. calls, handlers . That's doable, and these handles should just get ignored by JavaCore as desired. But I'm wondering what they should correspond to in our extended Java Model, perhaps a subtype of SourceRefElement called ICodeElement? We should get JDT Core to add something like that anyway, but they'll probably want to call it IUnknownElement or IGenericRefElement to provide other projects with the same sort of extensibility. Another challenge will be generating the project part of the handle because our compiler doesn't know about workspaces. I hope that info can be extracted from the full path and source path information. Then for other IDEs we can simply use the same relative path convention.</description>
    <commit commitTime="2005-04-14 16:44:01" id="df7fff4c8c073a3bbcfe749134d577299402d5fb"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</file>
      <file>asm/src/org/aspectj/asm/AsmManager.java</file>
      <file>weaver/src/org/aspectj/weaver/ShadowMunger.java</file>
      <file>asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java</file>
      <file>docs/sandbox/api-clients/org/aspectj/samples/AsmRelationshipMapExtensionTest.java</file>
      <file>weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AsmInterTypeRelationshipProvider.java</file>
      <file>asm/src/org/aspectj/asm/internal/ProgramElement.java</file>
    </fixedFiles>
  </bug>
  <bug id="82218" reportTime="2005-01-05 04:49:00">
    <summary>fails to doc spacewar using AJDT 1.2.0M2</summary>
    <description>Using AJDT 1.2.0M2 {with Java 5 JRE on XP SP2}, install Spacewar example and generate to Spacewar/docs. Result: output has no cross-references and displays special AJDT tags , and stderr lists this exception: java.lang.StringIndexOutOfBoundsException: String index out of range: -1 at java.lang.AbstractStringBuilder.insert AbstractStringBuilder.java:980 at java.lang.StringBuffer.insert StringBuffer.java:447 at org.aspectj.tools.ajdoc.HtmlDecorator.insertDeclarationsDetails HtmlDecorator.java:350 at org.aspectj.tools.ajdoc.HtmlDecorator.addAspectDocumentation HtmlDecorator.java:234 at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFile HtmlDecorator.java:188 at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromDecl HtmlDecorator.java:116 at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromDecls HtmlDecorator.java:54 at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromInputFiles HtmlDecorator.java:43 at org.aspectj.tools.ajdoc.Main.main Main.java:210</description>
    <commit commitTime="2005-01-13 04:22:51" id="f70b383d6292995c1e0521e7312e827022fe8fc9"/>
    <fixedFiles>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java</file>
      <file>ajdoc/testdata/coverage/foo/ModelCoverage.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="82340" reportTime="2005-01-06 12:25:00">
    <summary>Visibility selector ignored for pointcuts</summary>
    <description>Using ajdoc under AJDT 1.1.12 or AspectJ 1.2.1 at the commandline has the following aspect has problems. public abstract aspect Aspect { private pointcut privatePointcut ; protected pointcut protectedPointcut ; public pointcut publicPointcut ; private void privateMethod { } public void protectedMethod { } public void publicMethod { } } 1. Asking for "protected" gives all pointcuts public, protected _and_ private 2. The Aspect entry is wrong: "public abstract class Aspect" 3. The "Methods inherited ..." section has a leading comma: ", clone, equals, finalize, ..."</description>
    <commit commitTime="2005-01-13 15:53:01" id="b460597575b05920885bd2f5f226b0140b687d6e"/>
    <fixedFiles>
      <file>ajdoc/testdata/coverage/foo/NoMembers.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java</file>
    </fixedFiles>
  </bug>
  <bug id="82570" reportTime="2005-01-11 11:17:00">
    <summary>Weaved code does not include debug lines</summary>
    <description>I am attempting to use AspectJ and output all classes in debug mode required by our code coverage instrumentor . However any code introduced by our aspects to production classes does not include debug line information. Our ant script uses the iajc task as follows: &amp;lt;iajc ... debug="true" .. /&amp;gt; We have an aspect that introduces a public, no-arguments constructor into various classes. If I enable this aspect, then do a clean build, I get the following error from our code coverage tool: [jblanket] java.lang.UnsupportedOperationException: No line numbers detected in com.abmuk.oms.core.model.core.XMLObject.&amp;lt;init&amp;gt;. Either remove the 'oneLineFile' tag or turn debug on when compiling. If I remove that aspect, we get no errors about debug line information. I've tried debug="true" or debugLevel="lines,vars,source", with no success. This issue is preventing our Unit Test suite from executing. If you require any further information, please don't hesitate to email me. Cheers, Chris Nappin.</description>
    <commit commitTime="2005-01-19 09:36:46" id="71966e3348a05cb99b88885b8e6b751cc61a638e"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150TestsNoHarness.java</file>
    </fixedFiles>
  </bug>
  <bug id="82752" reportTime="2005-01-13 10:27:00">
    <summary>ProgramElement.getSourceSignature returns "public" for "private" members</summary>
    <description>This bug affects ajdoc, and could affect other tools relying on the ASM.</description>
    <commit commitTime="2005-08-24 15:47:22" id="8a772af970720dddbcae353a6e04bb19ba2962bf"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java</file>
    </fixedFiles>
  </bug>
  <bug id="82755" reportTime="2005-01-13 10:49:00">
    <summary>[ajdoc] update ajdoc to support Java 5 language features</summary>
    <description>Java 5 langauge features such as enums and annotations need to be supported by ajdoc.</description>
    <commit commitTime="2005-05-12 06:53:15" id="7b7c7b2fb25e09660f066e556a5008545d655f6f"/>
    <fixedFiles>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/Declaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java</file>
    </fixedFiles>
  </bug>
  <bug id="82989" reportTime="2005-01-17 12:07:00">
    <summary>Compiler error due to a wrong exception check in try blocks</summary>
    <description>Compiler error on correct code when an aspect performs a method introdiction. The method introduction contains an invocation to a method from the class and such an invocation is inside an appropriate try block. The ajc compiler performs a wrong check on the exception types. To understand better, please see the attached example</description>
    <commit commitTime="2005-08-24 17:50:18" id="cc6e6812fa6908d315e2f07195bca3914438cb1a"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/AjcMemberMaker.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="83303" reportTime="2005-01-20 08:47:00">
    <summary>complier error when mixing inheritance, overriding and polymorphism</summary>
    <description>Given this scenario: - class A define method m1 with proteceted visibility - class B extends class A and implements interface I and override method m1 but with public visibility - interface I define method m1 with public visibility The code is correct and compile using java 1.4 Let's modify the scenario: move the method B.m1 into a method introduction on aspect C, such that - class B extends class A - apsect C intosuces method m1 into B with public visibility and makes B implemts I declare parents - A and I as before The compiler reports this error: B.java:1 [error] The inherited method A.m1 cannot hide the public abstract method in I class B extends A {</description>
    <commit commitTime="2005-01-20 14:44:39" id="5d281fd8e98c5c2bec4365d3fc340e2d5f04becc"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150TestsNoHarness.java</file>
    </fixedFiles>
  </bug>
  <bug id="83380" reportTime="2005-01-21 06:27:00">
    <summary>'enum' should not be used as an identifier</summary>
    <description>When building under Eclipse 3.1 this warning is now issued. The offending variable names should be changed in preparation for a possible future move to Java 5</description>
    <commit commitTime="2005-01-24 14:33:05" id="159d6bd9422fc8ab300cfb88280d7ef3bf910a95"/>
    <fixedFiles>
      <file>bridge/src/org/aspectj/bridge/CountingMessageHandler.java</file>
      <file>testing/src/org/aspectj/testing/util/FileUtil.java</file>
      <file>build/src/org/aspectj/internal/tools/ant/taskdefs/Checklics.java</file>
    </fixedFiles>
  </bug>
  <bug id="83563" reportTime="2005-01-24 14:59:00">
    <summary>pertypewithin handing of inner classes</summary>
    <description>It seems that pertypewithin aspect association does not handle nested classes correctly. Here is a test class that exhibits the problem: package test; public class Test { public static void main String[] args { new NestedTest .run ; } static class NestedTest implements Runnable { public void run { System.out.println "Running..." ; } } } aspect PertypewithinTest pertypewithin Test { before : execution * *.* .. { System.out.println thisJoinPointStaticPart ; } } &amp;gt; ajc -version AspectJ Compiler DEVELOPMENT built on Monday Jan 24, 2005 at 17:07:00 GMT &amp;gt; ajc test\Test.java &amp;gt; java test.Test execution void test.Test.main String[] execution void test.Test.bar Exception in thread "main" java.lang.NoSuchMethodError: test.Test$1.ajc$test_Per typewithinTest$localAspectOf Ltest/PertypewithinTest; at test.Test$1.run Test.java at test.Test.bar Test.java:9 at test.Test.main Test.java:13 The same problem is seen for anonymous inner classes, as well: package test; public class Test { public void bar { new Runnable { public void run { System.out.println "Running..." ; } }.run ; } public static void main String[] args { new Test .bar ; } } aspect PertypewithinTest pertypewithin Test { before : execution * *.* .. { System.out.println thisJoinPoint ; } } &amp;gt; ajc test\Test.java &amp;gt; java test.Test execution void test.Test.main String[] execution void test.Test.bar Exception in thread "main" java.lang.NoSuchMethodError: test.Test$1.ajc$test_Per typewithinTest$localAspectOf Ltest/PertypewithinTest; at test.Test$1.run Test.java at test.Test.bar Test.java:9 at test.Test.main Test.java:13</description>
    <commit commitTime="2005-01-25 20:18:42" id="1b01255892ef222c14fea25b5db77208f1f6bb13"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/PerTypeWithin.java</file>
      <file>weaver/src/org/aspectj/weaver/PerTypeWithinTargetTypeMunger.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150TestsNoHarness.java</file>
    </fixedFiles>
  </bug>
  <bug id="83565" reportTime="2005-01-24 17:13:00">
    <summary>BCException "bad type name" thrown when compiling</summary>
    <description>I just downloaded AJDT version 1.2.0.20050124144759 and I am running Eclipse 3.1M4. I tried to use aspectJ on an existing Java 5 project. There are no aspects in it yet, just straight Java 5. The project runs just fine as a standard Java project. When add the AspectJ nature and I try to compile the project, no class files are generated and I get this error generated on a type that is parameterized: Internal compiler error org.aspectj.weaver.BCException: Bad type name: at org.aspectj.weaver.TypeX.nameToSignature TypeX.java:634 at org.aspectj.weaver.TypeX.forName TypeX.java:87 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding EclipseFactory.java:155 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBindings EclipseFactory.java:163 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember EclipseFactory.java:229 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember EclipseFactory.java:224 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.visit AsmHierarchyBuilder.java:675 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.traverse ConstructorDeclaration.java:447 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse TypeDeclaration.java:1133 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse CompilationUnitDeclaration.java:314 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.internalBuild AsmHierarchyBuilder.java:171 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.buildStructureForCompilationUnit AsmHierarchyBuilder.java:111 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishedCompilationUnit EclipseFactory.java:354 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing AjCompilerAdapter.java:138 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:373 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:682 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:168 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:102 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:165 The source code of the file that generates this error is: package mj.compiler.ast; import java.util.Vector; import mj.compiler.Driver; import mj.compiler.Visitor; public class Sequence&amp;lt;T extends AST&amp;gt; extends AST { private Vector&amp;lt;T&amp;gt; elements = new Vector&amp;lt;T&amp;gt; ; public Sequence { super 0, 0 ; } public Sequence T element { super element ; elements.add element ; } public int length { return elements.size ; } public T elementAt int i { return elements.elementAt i ; } public Sequence add T element { elements.add element ; return this; } public Sequence add int pos, T element { elements.add pos, element ; return this; } public Sequence addAll Sequence&amp;lt;T&amp;gt; others { if others == null return this; elements.addAll others.elements ; return this; } public void visitChildren Visitor v { for AST element : elements { element.visit v ; } } public void replaceChild AST old, AST gnu { T NEW = T gnu; for int i = 0; i &amp;lt; elements.size ; i++ { if elements.get i == old { elements.set i, NEW ; return; } } throw new Driver.CompileError "Can't find child in replaceChild." ; } /*** START GENERATED VISITOR PROTOCOL ***///TODO public void visit mj.compiler.Visitor v { v.visitSequence this ; } /*** END GENERATED VISITOR PROTOCOL ***/ } Hope this helps something. ps- I am able to create and run a very simple AspectJ project with an aspect, advice, and some Java 5 syntax.</description>
    <commit commitTime="2005-01-27 17:21:17" id="5765d534a5437b624646ff20ca487346fa76a267"/>
    <fixedFiles>
      <file>ajde/testsrc/org/aspectj/ajde/AjdeTests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</file>
    </fixedFiles>
  </bug>
  <bug id="83626" reportTime="2005-01-25 11:20:00">
    <summary>@AJ</summary>
    <description>Andy wants a patch format + a bugzilla for @AJ work due to some funny license issue. Here it is as drafted</description>
    <commit commitTime="2005-01-26 14:01:30" id="7b4c7d7befe53b132713ba8a5b32729344fbd62e"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/MethodGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="83717" reportTime="2005-01-26 10:42:00">
    <summary>Exception when weaving jars compiled with i ajc</summary>
    <description>Hi, I try to use a jar file generated with ajc &amp;lt;iajc outJar="sources.jar" incremental="false" source="1.4" Xreweavable="true"&amp;gt; as inpath option of the next task: &amp;lt;iajc incremental="false" source="1.4" destdir="${build.classes}" inpath="${sources.jar}" &amp;gt; If "sources.jar" does not contain any aspect, the task will continue to fail if the jar was generated with ajc with or without the Xreweavable option . It will only work if the jar file was generated with javac javac + jar tasks . I use ant 1.6.2 and aspectj 1.2.1. When using aspectj 1.2, there are other problems, apparently because the Xreweavable option is ignored. The exception: [iajc] ABORT [iajc] [iajc] Exception thrown from AspectJ 1.2 [iajc] This might be logged as a bug already -- find current bugs at [iajc] http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Co mpiler [iajc] Bugs for exceptions thrown have titles File:line from the top stack, [iajc] e.g., "SomeFile.java:243" [iajc] If you don't find the exception below in a bug, please add a new bug [iajc] at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ [iajc] To make the bug a priority, please include a test program [iajc] that can reproduce this exception. [iajc] unknown attributeorg.aspectj.weaver.WeaverVersion [iajc] unknown attributeorg.aspectj.weaver.WeaverVersion [iajc] org.aspectj.weaver.BCException: unknown attributeorg.aspectj.weaver.Wea verVersion [iajc] at org.aspectj.weaver.AjAttribute.read AjAttribute.java:109 [iajc] at org.aspectj.weaver.bcel.BcelAttributes.readAjAttributes BcelAttr ibutes.java:38 [iajc] at org.aspectj.weaver.bcel.BcelObjectType.unpackAspectAttributes Bc elObjectType.java:166 [iajc] at org.aspectj.weaver.bcel.BcelObjectType.&amp;lt;init&amp;gt; BcelObjectType.jav a:85 [iajc] at org.aspectj.weaver.bcel.BcelWorld.makeBcelObjectType BcelWorld.j ava:202 [iajc] at org.aspectj.weaver.bcel.BcelWorld.addSourceObjectType BcelWorld. java:232 [iajc] at org.aspectj.weaver.bcel.BcelWeaver.addClassFile BcelWeaver.java: 270 [iajc] at org.aspectj.weaver.bcel.BcelWeaver.addJarFile BcelWeaver.java:20 3 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.initBcelWo rld AjBuildManager.java:447 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild Aj BuildManager.java:143 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:94 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:102 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 [iajc] at org.aspectj.tools.ajc.Main.run Main.java:280 [iajc] at org.aspectj.tools.ajc.Main.runMain Main.java:217 [iajc] at org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM AjcTask.j ava:1157 [iajc] at org.aspectj.tools.ant.taskdefs.AjcTask.execute AjcTask.java:954 [iajc] at org.apache.tools.ant.UnknownElement.execute UnknownElement.java: 275 [iajc] at org.apache.tools.ant.Task.perform Task.java:364 [iajc] at org.apache.tools.ant.Target.execute Target.java:341 [iajc] at org.apache.tools.ant.Target.performTasks Target.java:369 [iajc] at org.apache.tools.ant.Project.executeTarget Project.java:1214 [iajc] at org.apache.tools.ant.Project.executeTargets Project.java:1062 [iajc] at org.apache.tools.ant.Main.runBuild Main.java:673 [iajc] at org.apache.tools.ant.Main.startAnt Main.java:188 [iajc] at org.apache.tools.ant.launch.Launcher.run Launcher.java:196 [iajc] at org.apache.tools.ant.launch.Launcher.main Launcher.java:55</description>
    <commit commitTime="2005-10-03 14:09:09" id="f27f533d1a9fe18634aeed8e49269c80f9ba2f00"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/ResolvedTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="83935" reportTime="2005-01-28 10:29:00">
    <summary>@AJ and formal binding impl</summary>
    <description>Some notes on formal binding impl for @AJ In code style, the advice signature is always looking the same ..bindings.., org.aspectj.lang.Part thisJoinPointStaticPart, JoinPoint thisJoinPoint, org.aspectj.lang.Part thisEnclosingJoinPointStaticPart In @ style, it is user defined. The current impl is handling the formal binding in a way that only args/this/target can be bound. I had to add some conditionals to handles cases like that: void myAdvice JoinPoint jp, Object target {..} where target binding is at index 1, while the index 0 is not an unbound but actually "virtually" bound to the joinpoint. Pointcut are thus having a virtuallyBoundedNames String[] that is the list of arguments for which we don't want any complain if it not bound. This one is populated during @ extraction, and Pointcut.concretize make sure the info is not lost when composition occurs with PerClause f.e. The only issue is that currently, binding JP/SJP/ESJP themselves is not possible f.e. "... &amp;amp;&amp;amp; args jp " myAdvice JoinPoint jp, JoinPoint currentJp Is that a big issue ? May be impact adviceexecution and could impact some use cases around mock testing.</description>
    <commit commitTime="2005-07-11 15:05:44" id="639b4fd0a436e19726dc9f2a47dc66a726794b3d"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</file>
      <file>tests/java5/ataspectj/ataspectj/SingletonAspectBindingsTest.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjSyntaxTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="84122" reportTime="2005-02-01 05:03:00">
    <summary>Allow aspectPath to contain directories</summary>
    <description>The -aspectpath option to the compiler only allows jar/zip files, not directories. But inpath and classpath allow directories. This capability would improve the handling of aspects spanning multiple projects in Eclipse. AJDT can currently only support jar/zip files on the aspect path, which requires one of the projects to create an outjar instead of writing to the bin directory as usual. The iajc ant task could then also be enhanced to support aspectpath directories.</description>
    <commit commitTime="2005-03-23 16:47:55" id="68f63508828d1c1ea7076d051cc77713625f6a03"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="84260" reportTime="2005-02-02 14:23:00">
    <summary>import static fails when importing a method</summary>
    <description>I got the following error: ============================================== MyClass2.java:3 [error] The import MyClass.myMethod cannot be resolved import static MyClass.myMethod; ============================================== other import static statements Strings/Enums appear to work.</description>
    <commit commitTime="2005-06-08 10:48:50" id="f747b829d02a4b76fc44da2a0eb1940c3e9cd593"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="84290" reportTime="2005-02-02 17:36:00">
    <summary>Runtime retention not recognized; inhibts use of annotation binding</summary>
    <description>In the latest dev build 20050202 , the runtime retention type is not recogized for this annotation type definition: package test; import java.lang.annotation.Retention; import static java.lang.annotation.RetentionPolicy.RUNTIME; /** * @author Eric Bodden * * ConstantArguments */ @Retention RUNTIME public @interface ConstantArguments { int[] value default {}; } This pointcut complains: pointcut constantArgumentMethods ConstantArguments annot : call @ConstantArguments * *.* .. &amp;amp;&amp;amp; @annotation annot ; "Annotation type test.ConstantArguments does not have runtime retention"</description>
    <commit commitTime="2005-02-03 11:36:37" id="193f3255addeed654df63a8fe4736c134c67895a"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/AnnotationBinding.java</file>
    </fixedFiles>
  </bug>
  <bug id="84312" reportTime="2005-02-03 05:47:00">
    <summary>Finish implementation of *runtime* retention checking</summary>
    <description>See FIXME in BindingAnnotationTypePattern.resolveBinding and EclipseSourceType.getAnnotationTypes</description>
    <commit commitTime="2005-05-12 13:00:07" id="f9eebd48f6070a8254b38630d6d76da8c0aee80e"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/BindingAnnotationTypePattern.java</file>
    </fixedFiles>
  </bug>
  <bug id="84333" reportTime="2005-02-03 10:14:00">
    <summary>BCException: Bad type name: TypeX.nameToSignature TypeX.java:635</summary>
    <description>To reproduce: cd doc\examples\introduction ajc -1.5 @files.lst Output from ajcore is below. This looks similar to bug 83565 , but we aren't building the structure model here. ---- AspectJ Properties --- AspectJ Compiler DEVELOPMENT built on Tuesday Feb 1, 2005 at 18:05:49 GMT ---- Dump Properties --- Dump file: ajcore.20050203.150321.210.txt Dump reason: org.aspectj.weaver.BCException Dump on exception: true Dump at exit condition: abort ---- Exception Information --- org.aspectj.weaver.BCException: Bad type name: at org.aspectj.weaver.TypeX.nameToSignature TypeX.java:635 at org.aspectj.weaver.TypeX.forName TypeX.java:88 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding EclipseFactory.java:155 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBindings EclipseFactory.java:163 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember EclipseFactory.java:229 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember EclipseFactory.java:224 at org.aspectj.ajdt.internal.compiler.problem.AjProblemReporter.abstractMethodMustBeImplemented AjProblemReporter.java:203 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.checkAbstractMethod MethodVerifier.java:96 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.checkMethods MethodVerifier.java:261 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.verify MethodVerifier.java:575 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.verifyMethods SourceTypeBinding.java:1376 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.verifyMethods CompilationUnitScope.java:672 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:543 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:365 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:682 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:168 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:102 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:109 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:291 at org.aspectj.tools.ajc.Main.runMain Main.java:227 at org.aspectj.tools.ajc.Main.main Main.java:80 ---- System Properties --- java.runtime.name=Java TM 2 Runtime Environment, Standard Edition sun.boot.library.path=e:\sun150\jre\bin java.vm.version=1.5.0_01-b08 java.vm.vendor=Sun Microsystems Inc. java.vendor.url= http://java.sun.com/ path.separator=; java.vm.name=Java HotSpot TM Client VM file.encoding.pkg=sun.io user.country=GB sun.os.patch.level=Service Pack 1 java.vm.specification.name=Java Virtual Machine Specification user.dir=C:\aspectj1.5\doc\examples\introduction java.runtime.version=1.5.0_01-b08 java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment java.endorsed.dirs=e:\sun150\jre\lib\endorsed os.arch=x86 java.io.tmpdir=C:\DOCUME~1\mchapman\LOCALS~1\Temp\ line.separator= java.vm.specification.vendor=Sun Microsystems Inc. user.variant= os.name=Windows XP sun.jnu.encoding=Cp1252 java.library.path=e:\sun150\bin;.;C:\WINDOWS\System32;C:\WINDOWS;e:\sun150\jre\bin;c:\aspectj1.5\bin;C:\PROGRAM FILES\THINKPAD\UTILITIES;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\Program Files\IBM\Infoprint Select;C:\Program Files\ATI Technologies\ATI Control Panel;C:\Program Files\PC-Doctor for Windows\services;C:\Program Files\ObjREXX;C:\Program Files\ObjREXX\OODIALOG;;c:\cygwin\bin;c:\utilities;e:\ant\bin;c:\aspectj1.2\bin java.specification.name=Java Platform API Specification java.class.version=49.0 sun.management.compiler=HotSpot Client Compiler os.version=5.1 user.home=C:\Documents and Settings\mchapman user.timezone=Europe/London java.awt.printerjob=sun.awt.windows.WPrinterJob file.encoding=Cp1252 java.specification.version=1.5 java.class.path=c:\aspectj1.5\lib\aspectjtools.jar;e:\sun150\lib\tools.jar;c:\aspectj1.5\lib\aspectjrt.jar user.name=mchapman java.vm.specification.version=1.0 java.home=e:\sun150\jre sun.arch.data.model=32 user.language=en java.specification.vendor=Sun Microsystems Inc. awt.toolkit=sun.awt.windows.WToolkit java.vm.info=mixed mode java.version=1.5.0_01 java.ext.dirs=e:\sun150\jre\lib\ext sun.boot.class.path=e:\sun150\jre\lib\rt.jar;e:\sun150\jre\lib\i18n.jar;e:\sun150\jre\lib\sunrsasign.jar;e:\sun150\jre\lib\jsse.jar;e:\sun150\jre\lib\jce.jar;e:\sun150\jre\lib\charsets.jar;e:\sun150\jre\classes java.vendor=Sun Microsystems Inc. file.separator=\ java.vendor.url.bug= http://java.sun.com/cgi-bin/bugreport.cgi sun.io.unicode.encoding=UnicodeLittle sun.cpu.endian=little sun.desktop=windows sun.cpu.isalist=pentium_pro+mmx pentium_pro pentium+mmx pentium i486 i386 i86 ---- Command Line --- -1.5 @files.lst ---- Full Classpath --- e:\sun150\jre\lib\rt.jar 37600990 bytes e:\sun150\jre\lib\i18n.jar missing e:\sun150\jre\lib\sunrsasign.jar missing e:\sun150\jre\lib\jsse.jar 549229 bytes e:\sun150\jre\lib\jce.jar 81615 bytes e:\sun150\jre\lib\charsets.jar 8628006 bytes e:\sun150\jre\classes missing e:\sun150\jre\lib\ext\dnsns.jar 8176 bytes e:\sun150\jre\lib\ext\localedata.jar 802502 bytes e:\sun150\jre\lib\ext\sunjce_provider.jar 153036 bytes e:\sun150\jre\lib\ext\sunpkcs11.jar 173235 bytes e:\sun150\lib\tools.jar 6812965 bytes c:\aspectj1.5\lib\aspectjrt.jar 42013 bytes e:\sun150\jre\lib\ext\dnsns.jar 8176 bytes e:\sun150\jre\lib\ext\localedata.jar 802502 bytes e:\sun150\jre\lib\ext\sunjce_provider.jar 153036 bytes e:\sun150\jre\lib\ext\sunpkcs11.jar 173235 bytes e:\sun150\lib\tools.jar 6812965 bytes c:\aspectj1.5\lib\aspectjrt.jar 42013 bytes ---- Compiler Messages --- error at no source information available C:\aspectj1.5\doc\examples\introduction\Point.java:0::0 Internal compiler error org.aspectj.weaver.BCException: Bad type name: at org.aspectj.weaver.TypeX.nameToSignature TypeX.java:635 at org.aspectj.weaver.TypeX.forName TypeX.java:88 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding EclipseFactory.java:155 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBindings EclipseFactory.java:163 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember EclipseFactory.java:229 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember EclipseFactory.java:224 at org.aspectj.ajdt.internal.compiler.problem.AjProblemReporter.abstractMethodMustBeImplemented AjProblemReporter.java:203 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.checkAbstractMethod MethodVerifier.java:96 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.checkMethods MethodVerifier.java:261 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.verify MethodVerifier.java:575 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.verifyMethods SourceTypeBinding.java:1376 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.verifyMethods CompilationUnitScope.java:672 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:543 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:365 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:682 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:168 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:102 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:109 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:291 at org.aspectj.tools.ajc.Main.runMain Main.java:227 at org.aspectj.tools.ajc.Main.main Main.java:80 abort ABORT -- BCException Bad type name: Bad type name: org.aspectj.weaver.BCException: Bad type name: at org.aspectj.weaver.TypeX.nameToSignature TypeX.java:635 at org.aspectj.weaver.TypeX.forName TypeX.java:88 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding EclipseFactory.java:155 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBindings EclipseFactory.java:163 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember EclipseFactory.java:229 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember EclipseFactory.java:224 at org.aspectj.ajdt.internal.compiler.problem.AjProblemReporter.abstractMethodMustBeImplemented AjProblemReporter.java:203 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.checkAbstractMethod MethodVerifier.java:96 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.checkMethods MethodVerifier.java:261 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.verify MethodVerifier.java:575 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.verifyMethods SourceTypeBinding.java:1376 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.verifyMethods CompilationUnitScope.java:672 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:543 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:365 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:682 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:168 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:102 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:109 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:291 at org.aspectj.tools.ajc.Main.runMain Main.java:227 at org.aspectj.tools.ajc.Main.main Main.java:80 ---- org.aspectj.weaver.bcel.BcelWorld ---- Shadow mungers: Empty Type mungers: EclipseTypeMunger ResolvedTypeMunger Method, java.lang.Object introduction.Point.clone BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.Cloneable. EclipseTypeMunger ResolvedTypeMunger Method, int introduction.Point.hashCode EclipseTypeMunger ResolvedTypeMunger Method, boolean introduction.Point.equals java.lang.Object EclipseTypeMunger ResolvedTypeMunger Method, int introduction.Point.compareTo java.lang.Object BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.Comparable.</description>
    <commit commitTime="2005-03-23 20:26:21" id="fb01cad1cc839b23cba31cd4dd5f44f68bad4411"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="85132" reportTime="2005-02-14 05:49:00">
    <summary>Declare parents issue with incremental compilation</summary>
    <description>Using ajdt dev build 20050211182246 with associated aj build: File &amp;gt; New &amp;gt; Other &amp;gt; AspectJ &amp;gt; AspectJ Examples &amp;gt; Bean Example Open Demo.java and make a comment change and save. An incremental compile will occur, but it gives an error at line 42, saying the method is not applicable for the arguments. It is the declare parents statement in BuildPoint.aj that should make it applicable. The class files on disk are correct.</description>
    <commit commitTime="2005-10-05 12:49:53" id="8d098f969f5ef67fb15b2b56f44bdd21f7929bc6"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="85297" reportTime="2005-02-15 12:31:00">
    <summary>Improvements to incremental compilation</summary>
    <description>This bug is to track compiler improvements to incremental compilation. There are multiple scenarios to think about but the first focus is changing one source file for a class/interface that is affected by an Aspect - it should compile/weave almost instantly. Recently response times have been reported of &amp;gt;3seconds and worse... and this is not reasonable. I've put the following improvements in today: - Caching classpath calculations rather than performing them repeatedly. - Improved logic to detect weaver completion. - Removed unnecessary serialization of the structure model. These are available in dev builds right now: ajdt_1.2.0.20050215161840 I'd be interested in user feedback on whether they see noticeable improvements in their particular projects. more improvements to follow shortly.</description>
    <commit commitTime="2005-04-05 14:50:06" id="e460b1e3dae5d05b3457ff96746292516b963c32"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/IncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="86057" reportTime="2005-02-21 17:25:00">
    <summary>expect error when overriding final pointcuts</summary>
    <description>I get no compiler error when I "override"/redefine a final pointcut: ------------ public class Main { static void walk {} static void run {} public static void main String[] args { walk ; run ; } } abstract aspect AA { public final pointcut publicPointcut : call void walk ; before : publicPointcut { System.out.print "here: " + thisJoinPoint ; } } aspect AA1 extends AA { // expecting error here b/c pointcut is final public pointcut publicPointcut : call void run ; } ------------ When run, it picks out run rather than walk .</description>
    <commit commitTime="2005-08-19 16:51:30" id="86ce1f7ce2a4be24e55a0eafc96de86142ce1278"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/WeaverMessages.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedType.java</file>
    </fixedFiles>
  </bug>
  <bug id="86789" reportTime="2005-02-27 16:24:00">
    <summary>annotations and "circularity in declare precedence"</summary>
    <description>The following example declare precedence : @PremiumPartner * , *; results in the error message circularity in declare precedence, ''*'' occurs more than once It is the same example apart form the name as in the developers notebook. see also http://dev.eclipse.org/mhonarc/lists/aspectj-dev/msg01326.html</description>
    <commit commitTime="2005-03-09 14:13:14" id="f90186cb8eac1b4abae4c9b8fd74828b98f534ab"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java</file>
    </fixedFiles>
  </bug>
  <bug id="86832" reportTime="2005-02-28 09:59:00">
    <summary>Internal compiler error generics?</summary>
    <description>Attached is project that will generate an "Internal compiler error" for a single class that extends "ArrayList&amp;lt;Object&amp;gt;". If the class extends just "ArrayList" the compiler error does not occur. Note that the "extends ArrayList&amp;lt;Object&amp;gt;" class compiles successuflly without the aspectj nature. --- exception --- Severity Description Resource In Folder Location Creation Time 2 Internal compiler error java.lang.NullPointerException at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ClassScope.detectHierarchyCycle ClassScope.java:945 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference.internalResolveType ParameterizedSingleTypeReference.java:143 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference.resolveType ParameterizedSingleTypeReference.java:208 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveSuperType TypeReference.java:112 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ClassScope.findSupertype ClassScope.java:1092 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass ClassScope.java:747 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy ClassScope.java:884 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy CompilationUnitScope.java:249 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:91 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:331 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:348 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:682 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:168 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:102 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:165 FlattenedListExtendsArrayListObject.java opentrader.infra/src/org/opentrader/infra/springframework February 28, 2005 9:59:42 AM</description>
    <commit commitTime="2005-05-12 09:32:03" id="0cb826c6a5d47a12eb03bf1751208c0b9a7b23a3"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="86903" reportTime="2005-03-01 09:16:00">
    <summary>weaving aborts with "BCException: bad"</summary>
    <description>Abort with compiler error. Could be reproduced when building project in AJDT as well wenn building via Ant and iajc-task. AJDT Version: 1.2.0 Build id: 20050217151031 AspectJ version: 1.5.0M1 Eclipse 3.1M4 Build id: 200412162000 started with -vmargs -Xmx900M Problem seems to be caused by a certain combination of pointcuts. The order of this pointcuts seems to be important. The problem first showed up in a rather large project built with AJDT 1.2.0 and Eclipse 3.0 Simplified testcase follows.</description>
    <commit commitTime="2005-11-03 14:26:16" id="206180218acec863d08939925c7012243b95d55b"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/Bindings.java</file>
    </fixedFiles>
  </bug>
  <bug id="87282" reportTime="2005-03-07 11:27:00">
    <summary>Compilation error on generic member introduction</summary>
    <description>The compiler aborts with the following introduction code: aspect introductionToA{ private ArrayList&amp;lt;B&amp;gt; A.m_Array = new ArrayList&amp;lt;B&amp;gt; ; public void A.addB B tmp { m_Array.add tmp ; } } The error message is "[error] The method add E in the type ArrayList&amp;lt;E&amp;gt; is not applicable for the arguments B m_Array.add tmp " Compiling with AspectJ Development version 2005/02/18 .</description>
    <commit commitTime="2005-05-06 15:42:28" id="51c018d9bbf0ecfb312cb2b56112c71cfc516c53"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="87376" reportTime="2005-03-08 10:11:00">
    <summary>NPE when unresolved type of a bound var in a pointcut expression EclipseFactory.java:224</summary>
    <description>see attached mini-project to reproduce</description>
    <commit commitTime="2005-03-10 13:34:55" id="85aa1520881e7271e658b9377dfd020fde28868c"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="87530" reportTime="2005-03-09 12:55:00">
    <summary>[itds] introduction of final method on interface won't prevent child overwritting</summary>
    <description>public class Test { public static void main String[] args { Test t = new Test ; t.M ; } public void M { System.out.println "in child" ; } } public privileged aspect AspectTest { public interface TestInterface{} public final void TestInterface.M { System.out.println "in parent" ; } declare parents: Test implements TestInterface; } The Method M is declared in both Test class and TestInterface interface, but the introduction on TestInterface specifies the Method M is final, so M can't be overwritten by child class. However, when I run this program, I found the Method M of Test class is executed. It means the child overwrites the final method. Dapeng Gao</description>
    <commit commitTime="2005-09-05 14:07:39" id="a905c8e46f43684ef19adc4817374b82f2b0993d"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="88606" reportTime="2005-03-20 20:04:00">
    <summary>Parameterized types on introduced fields not correctly recognized</summary>
    <description>The following Codes results in a compile time error, which it shouldn't AFAIK: public aspect Foo { private java.util.List&amp;lt;Foo&amp;gt; Main.list; private void bar { java.util.List&amp;lt;Foo&amp;gt; li = new Main .list; } } Error: Type mismatch: cannot convert from List&amp;lt;E&amp;gt; to List&amp;lt;Foo&amp;gt; Foo.aj SemanticRelations/src line 11</description>
    <commit commitTime="2005-05-06 15:42:28" id="51c018d9bbf0ecfb312cb2b56112c71cfc516c53"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="88652" reportTime="2005-03-21 12:05:00">
    <summary>an array type as the last parameter in a signature does not match on the varargs declared method</summary>
    <description>I get this warning in my code, though I actually do not specify an array type. The signature I want to match is the following constructor signature: public Touple Object formulaHandle, Object... propositions {...} Touple implements IRelation The pointcut I use is the following: pointcut p : call Touple.new .. ; This should actually match the signature, shouldn't it? AspectJ however complains with this warning: an array type as the last parameter in a signature does not match on the varargs declared method: void ltlrv.Touple.&amp;lt;init&amp;gt; java.lang.Object, java.lang.Object[] [Xlint:cantMatchArrayTypeOnVarargs] Also, even if I *had* stated an array type, it should match even then IMHO, since arrays and varargs are actually the same in the Java implementation.</description>
    <commit commitTime="2005-03-22 13:14:44" id="b5f4d09e4f4e45943c6c8b3dc8dca0c05b90f27c"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/TypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java</file>
    </fixedFiles>
  </bug>
  <bug id="88862" reportTime="2005-03-23 09:47:00">
    <summary>Declare annotation on ITDs</summary>
    <description>I'll use this bug to capture info on the implementation...</description>
    <commit commitTime="2005-03-23 21:31:49" id="0d14ccfa4ce92c9adc2f849a4ee4f22c5b3a5ef7"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
      <file>weaver/src/org/aspectj/weaver/NewFieldTypeMunger.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedMember.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Annotations.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/AnnotationBinding.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java</file>
    </fixedFiles>
  </bug>
  <bug id="88900" reportTime="2005-03-23 13:37:00">
    <summary>Unnecessary warning for ITDs</summary>
    <description>Consider the following aspect: public aspect RunnableDefaultImpl { public void Runnable.run { } } Note that it makes little sense to have a default implementation for Runnable. However, I am using it to allow easy reproduction of the bug. Compiling this aspect leads to the following warning: ...\test\RunnableDefaultImpl.aj:9 [warning] this affected type is not exposed to the weaver: java.lang.Runnable [Xlint:type NotExposedToWeaver] public void Runnable.run { ^^^ This warning isn't really necessary as weaver doesn't and shouldn't need to have Runnable exposed. In fact, everything works as expected already. Now it will be a good warning or even error , if I was trying to introduce a new method, such as in the following aspect: public aspect RunnableDefaultImpl { public void Runnable.walk { } }</description>
    <commit commitTime="2005-09-27 15:00:24" id="e76b37012601cf67a069b4a78f60f183efad563d"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="90143" reportTime="2005-04-04 06:46:00">
    <summary>[itds] Problem with an ITD on an interface</summary>
    <description>If an ITD method is declared on an interface with an anonymous inner class returned as the result, the compiler generates an error for any "super.xxx" calls in the anonymous inner class. The example project shows this with a nested inner interface, but the same problem occurs with an ITD of this kind on any interface. The error does not occur if the ITD is declared on an inner class as shown in the example or a normal class.</description>
    <commit commitTime="2005-11-04 16:26:06" id="21cf37dd535baf1b9977044ce4f05520538116ba"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterSuperFixerVisitor.java</file>
    </fixedFiles>
  </bug>
  <bug id="90827" reportTime="2005-04-08 13:04:00">
    <summary>StackOverflow while weaving enum/annotation with Enum/Annotation name</summary>
    <description>While compiling single simple annotation or enum, weaver goes into infinitive loop, which ends with StackOverFlowException. I attached sources Annotation.java and Enum.java and ajcore.*.txt files from Sun JDK 1.5.0.02 and JRockit 1.5, since they give different ajcore files different stack trace . So archive contains 4 ajcore files. I'm using Linux with JDK JRockit 1.5 and AspectJ 1.5.0M2.</description>
    <commit commitTime="2005-05-10 15:09:03" id="2c4f9d292a521703642169d8c066792d0e0802f5"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="91053" reportTime="2005-04-11 17:15:00">
    <summary>Generics problem with Set - does not compile with AspectJ 5</summary>
    <description>I tried different things to remove compiler warnings about generics which you get when you switch to JDK 5 and use collections. At last I fall back to JDK 1.4. The following code compiles with AspectJ 5 and JDK compliance level 1.4: public aspect SubjectAspect { private Set Subject.observers = new HashSet ; public void Subject.addObserver SubjectObserver observer { observers.add observer ; } ... } After switching to compliance level 5.0 I get an error message "The method add E in the type Set&amp;lt;E&amp;gt; is not applicable for the arguments SubjectObserver ". I don't know if it is a similar problem like #87550 but I means for older projects which use collections that they can't switch to JDK 1.5</description>
    <commit commitTime="2005-05-06 15:18:54" id="952dda914064ff58a39fc682d18cdbf3ad171475"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/TypeX.java</file>
      <file>weaver/src/org/aspectj/weaver/World.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="91090" reportTime="2005-04-12 05:36:00">
    <summary>declare warning with staticinitialization matching an aspect doesn't appear correctly</summary>
    <description>When you declare a warning using a staticinitialization pointcut which matches the aspect itself, then the aspect doesn't have the "matches declare" relationship on it in the structure model the declare warning does have that it matches the aspect . To recreate: create an AJ project which contains one file A.aj in a package pack with the following contents: ---------------------------------------------------------------------- package pack; public aspect A { declare warning : staticinitialization * : "..."; } //aspect X { // //} // //class OtherClass { //} ---------------------------------------------------------------------- Then, look at the contents of the Structure Model view and you see that the correct nodes do not appear A doesn't have the "matches declare" node, but the declare warning does have the "matches" node . Note that classes do have the "matches declare" node, so aspects should too. Moreover, debug info about the structure model: === MODEL STATUS REPORT ========= After a batch build .generated.lst [build configuration file] pack [package] A.aj [java source file] import declarations [import reference] A [aspect] declare warning: "..." [declare warning] === END OF MODEL REPORT ========= === RELATIONSHIPS REPORT ========= After a batch build Hid:1: targets=1 C:\eclipse_installations\ajdt_3_0_0_development\eclipse\runtim e-workspace-XRef\ImageDecoratorTest\src\pack\A.aj|3|0|0 matches declare C:\ecl ipse_installations\ajdt_3_0_0_development\eclipse\runtime-workspace- XRef\ImageDe coratorTest\src\pack\A.aj|5|0|40 Hid:2: targets=1 C:\eclipse_installations\ajdt_3_0_0_development\eclipse\runtim e-workspace-XRef\ImageDecoratorTest\src\pack\A.aj|5|0|40 matched by C:\eclipse _installations\ajdt_3_0_0_development\eclipse\runtime-workspace- XRef\ImageDecora torTest\src\pack\A.aj|3|0|0 === END OF RELATIONSHIPS REPORT == === Properties of the model and relationships map ===== build configuration file=1 package=1 FileMapSize=1 aspect=1 RelationshipMapSize=2 java source file=1 import reference=1 declare warning=1</description>
    <commit commitTime="2005-04-13 11:47:07" id="be14796f5643358760951c0650b6c879e29e73e7"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="91114" reportTime="2005-04-12 08:03:00">
    <summary>[jdt-parser] Parser error on System.out.printf "..." + after-before + "..."</summary>
    <description>Following code fragment: ***************************** class Foo { public void bar { long before = 0; long after = 0; System.out.println "... " + before - after + " ..." ; } } ***************************** leads to following parser error ***************************** [...].java:25 [error] Syntax error on token "-", invalid AssignmentOperator System.out.println "... " + before - after + " ..." ; ***************************** Problems seems to vanish when I rename the before variable.</description>
    <commit commitTime="2005-08-19 13:50:20" id="169a48870ac2680169e0632ee8d79b372949be10"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="91267" reportTime="2005-04-13 09:29:00">
    <summary>NPE at EclipseFactory.java:143 when using generic methods in aspects</summary>
    <description>When I compile any of these two aspects with ajc -1.5, an exception is thrown by the compiler: import java.util.*; public aspect TestBug1 { static &amp;lt;T&amp;gt; void addToEnv Map&amp;lt;String,T&amp;gt; env, String key, T value { env.put key, value ; } } import java.util.*; public aspect TestBug2 { static &amp;lt;T&amp;gt; T lookupEnv Map&amp;lt;String,T&amp;gt; env, String key { return env.get key ; } } If the methods are placed into classes instead of aspects, all works fine. The exception thrown is the following: java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.getName EclipseFactory.java:143 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding EclipseFactory.java:166 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBindings EclipseFactory.java:176 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember EclipseFactory.java:254 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember EclipseFactory.java:249 at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.fillDeclaredMembers EclipseSourceType.java:115 at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.getDeclaredPointcuts EclipseSourceType.java:146 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTypeAndPerClause AspectDeclaration.java:977 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildInterTypeAndPerClause AjLookupEnvironment.java:303 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:119 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:331 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:348 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:683 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:168 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:102 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:109 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:291 at org.aspectj.tools.ajc.Main.runMain Main.java:227 at org.aspectj.tools.ajc.Main.main Main.java:80</description>
    <commit commitTime="2005-05-06 10:21:26" id="7389d9fc0252b90a9b0bf2cb1861a0f3802ad320"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/TypeX.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="91381" reportTime="2005-04-14 05:45:00">
    <summary>Abstract intertype methods and covariant returns</summary>
    <description>The following program is accepted by ajc -1.5: public aspect AbstractITD { public abstract Object A.foo ; public static void main String[] args { A a = new B ; System.out.println a.foo ; } } abstract class A {} class B extends A { public Integer foo { return new Integer 42 ; } } But it does not put in the necessary bridge method, so the program throws an AbstractMethodError at runtime: Exception in thread "main" java.lang.AbstractMethodError: A.foo Ljava/lang/Object; at AbstractITD.ajc$interMethodDispatch1$AbstractITD$A$foo AbstractITD.java at AbstractITD.main AbstractITD.java:7 ajc without -1.5 does not reject the program. I guess it should, since covariant return type is a 1.5 feature. Also, if the @Override annotation is put on the method in B, ajc -1.5 complains, even though the method does override a superclass method.</description>
    <commit commitTime="2005-08-24 17:50:18" id="cc6e6812fa6908d315e2f07195bca3914438cb1a"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/AjcMemberMaker.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="91417" reportTime="2005-04-14 11:16:00">
    <summary>-Xreweavable should be the default</summary>
    <description>In order to facilitate widespread use of LTW we need to ensure code is compiled with –Xreweavable. However we cannot rely on developers to use this flag so it must be the default. Unfortunately the current code bloat is unacceptable for large projects.</description>
    <commit commitTime="2005-10-05 12:23:52" id="12e6334bf5f77d7c3bc2e66eeefa105f0507334a"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java</file>
      <file>testing/src/org/aspectj/testing/harness/bridge/CompilerRun.java</file>
      <file>tests/java5/ataspectj/ataspectj/ltwlog/MainVerboseAndShow.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Options.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/core/AspectJCore.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AspectJBuilder.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BinaryFormsTestCase.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AjCompilerOptionsTest.java</file>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</file>
      <file>weaver/src/org/aspectj/weaver/WeaverStateInfo.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
      <file>testing/newsrc/org/aspectj/testing/WeaveSpec.java</file>
    </fixedFiles>
  </bug>
  <bug id="91719" reportTime="2005-04-18 05:21:00">
    <summary>Work with Oli B to pull in examples of generating all the LINT messages</summary>
    <description>Oli on the dev list has written code examples that generate each type of lint warning, work with him to pull them into the codebase. The relevant email is below. Make sure they go via a bugzilla attachment to ensure EPL rules are met. ==== Hi Andrew, for "unresolvableMember" I gave up to find an example. But for the other Xlint warnings you can find my example under http://www.javatux.de/aj/ as compress tarfile xlint.tgz or as directory for online browsing . BTW - I read the announcement from Adrian. There are new Xlint warnings? Which ones? Happy Eastern Oliver Andrew Clement wrote: &amp;gt; &amp;gt; Hi Oli, &amp;gt; &amp;gt; If you can come up with examples that produce all of them, I'd be keen to &amp;gt; include them as testcases in AspectJ where appropriate as I know we don't &amp;gt; properly test some of them. A good place to start would be searching &amp;gt; in the bugzilla database - I'm not sure how accurately that is indexed &amp;gt; by google. Here's a bit of info I've quickly dug up: &amp;gt; &amp;gt; &amp;gt; * invalidWildcardTypeName &amp;gt; Never signalled anywhere in the codebase! so ignore this one... &amp;gt; &amp;gt; &amp;gt; * unresolvableMember, &amp;gt; This one is hard to reproduce, see bug 59596 where I've done a bit &amp;gt; of write up about it. &amp;gt; &amp;gt; &amp;gt; * typeNotExposedToWeaver &amp;gt; Should be recreatable by trying to weave into something that is &amp;gt; actually on the classpath rather than the inpath. &amp;gt; &amp;gt; &amp;gt; * shadowNotInStructure &amp;gt; Signalled if the structure model is broken, probably can't happen &amp;gt; right now as we work hard to ensure it is always correct. &amp;gt; &amp;gt; &amp;gt; * unmatchedSuperTypeInCall &amp;gt; These two covariance problems demonstrate this xlint. it is related &amp;gt; to specifying the declaring type in a call type pattern and it &amp;gt; not matching as you expected... &amp;gt; &amp;gt; CovBaseProgram01.java &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; &amp;gt; &amp;gt; class Car {} &amp;gt; &amp;gt; class FastCar extends Car {} &amp;gt; &amp;gt; class Super { &amp;gt; Car getCar { &amp;gt; return new Car ; &amp;gt; } &amp;gt; } &amp;gt; &amp;gt; class Sub extends Super { &amp;gt; FastCar getCar { &amp;gt; return new FastCar ; &amp;gt; } &amp;gt; } &amp;gt; &amp;gt; public class CovBaseProgram01 { &amp;gt; public static void main String[] argv { &amp;gt; new CovBaseProgram01 .run ; &amp;gt; } &amp;gt; &amp;gt; public void run { &amp;gt; Super instance_super = new Super ; &amp;gt; Sub instance_sub = new Sub ; &amp;gt; &amp;gt; Car c1 = instance_super.getCar ; &amp;gt; Car c2 = instance_sub.getCar ; &amp;gt; } &amp;gt; } &amp;gt; &amp;gt; // FastCar is a subclass of Car. &amp;gt; // Sub is a subclass of Super. &amp;gt; ============== &amp;gt; CovAspect06.aj &amp;gt;&amp;gt;&amp;gt; &amp;gt; &amp;gt; aspect CovAspect06 { &amp;gt; &amp;gt; pointcut p : call Car Sub.getCar ; &amp;gt; &amp;gt; @org.aspectj.lang.annotation.SuppressAjWarnings &amp;gt; before : p { &amp;gt; System.out.println "[call Car Sub.getCar matched on &amp;gt; '"+thisJoinPoint+":"+thisJoinPoint.getSourceLocation +"']" ; &amp;gt; } &amp;gt; &amp;gt; } &amp;gt; ================ &amp;gt; ajc -1.5 CovAspect06.aj CovBaseProgram01.ja &amp;gt; &amp;gt; &amp;gt; * noInterfaceCtorJoinpoint &amp;gt; related to trying to put advice on constructor execution join point for &amp;gt; an interface I think... &amp;gt; &amp;gt; &amp;gt; hope some of that is useful... &amp;gt; &amp;gt; Andy. &amp;gt; &amp;gt; &amp;gt; &amp;gt; *"Oli B." &amp;lt; boehm@javatux.de &amp;gt;* &amp;gt; Sent by: aspectj-dev-admin@eclipse.org</description>
    <commit commitTime="2005-05-04 14:37:41" id="70b9ffd2ceb86d00443d68931e8265ee9a8f8fa7"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/xlint/XLintTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="91858" reportTime="2005-04-19 05:38:00">
    <summary>NullPointerException when declare @type is spelt with capital letter</summary>
    <description>I have the following code in an AspectJ project: declare @Type: MainClass : @MyAnnotation; I believe the correct syntax should be: declare @type: MainClass : @MyAnnotation; However when I saved my aspect with the first version I got the following NullPointerException: java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.ast.DeclareAnnotationDeclaration.postParse DeclareAnnotationDeclaration.java:83 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ClassScope.postParse ClassScope.java:175 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ClassScope.buildFieldsAndM ethods ClassScope.java:154 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.build FieldsAndMethods CompilationUnitScope.java:63 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindi ngs AjLookupEnvironment.java:104 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:331 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:348 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:683 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:191 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:109 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:165</description>
    <commit commitTime="2005-04-20 12:57:49" id="78abc76610cfb5fd2a2282086adfb017537ce49c"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/PatternParser.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/DeclareAnnotationTests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/DeclareAnnotationDeclaration.java</file>
    </fixedFiles>
  </bug>
  <bug id="91912" reportTime="2005-04-19 11:32:00">
    <summary>Request for a new type of relationship in the structure model</summary>
    <description>Declare soft relationships are currently 'advises' and 'advised by' relationships. Would it be possible to add 'softens' and 'softened by' or 'softens exception at' and 'exception softened by' relationships to the structure model?</description>
    <commit commitTime="2005-04-21 17:00:18" id="7a613809e63e1a3320a7598e8d7381e70c717adc"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/IRelationship.java</file>
      <file>weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java</file>
    </fixedFiles>
  </bug>
  <bug id="92053" reportTime="2005-04-20 07:19:00">
    <summary>@args causes a VerifyError: Unable to pop operand off an empty stack</summary>
    <description>I'm getting a VerifyError exception when I try to use @args in following code: ------------------ Test3.java ------------------------- import java.lang.annotation.*; @Target ElementType.TYPE @Retention RetentionPolicy.RUNTIME @interface Ann {} @Ann class AClass{} public class Test3 { void abc AClass y {} public static void main String[] args { new Test3 .abc new AClass ; } } aspect Annotations { before Ann ann : call * Test3.* .. &amp;amp;&amp;amp; @args ann { System.out.println "Before: " + thisJoinPoint ; } } ---- On JRockIt5 jre and AspectJ 1.5.0M2 I get following result: ----------- java.lang.VerifyError: class: Test3, method: main signature: [Ljava/lang/String; V Unable to pop operand off an empty stack ----------- I'm getting similar error with sun jre and with older versions of AspectJ5 20050324155000 and from 10th feb .</description>
    <commit commitTime="2005-04-20 14:32:40" id="3f942a4c58210535e91c50a037a8d743a0c70e19"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/AnnotationBinding.java</file>
    </fixedFiles>
  </bug>
  <bug id="92163" reportTime="2005-04-20 18:33:00">
    <summary>NPE compiling a TestSetup subclass ClassScope.java:945</summary>
    <description>eclipse 3.1M6, java5 enabled I added aspectj nature to an existing project. [At least] one of the files generates an NPR: java.lang.NullPointerException at org.eclipse.ajdt.internal.ui.editor.AdviceActionDelegate.menuAboutToShow AdviceActionDelegate.java:279 at org.eclipse.ui.texteditor.AbstractTextEditor.rulerContextMenuAboutToShow AbstractTextEditor.java:4514 at org.eclipse.ui.texteditor.AbstractDecoratedTextEditor.rulerContextMenuAboutToShow AbstractDecoratedTextEditor.java:1277 at org.eclipse.jdt.internal.ui.javaeditor.JavaEditor.rulerContextMenuAboutToShow JavaEditor.java:3667 at org.eclipse.ui.texteditor.AbstractTextEditor$11.menuAboutToShow AbstractTextEditor.java:2195 at org.eclipse.jface.action.MenuManager.fireAboutToShow MenuManager.java:285 at org.eclipse.jface.action.MenuManager.handleAboutToShow MenuManager.java:372 at org.eclipse.jface.action.MenuManager.access$0 MenuManager.java:369 at org.eclipse.jface.action.MenuManager$2.menuShown MenuManager.java:386 at org.eclipse.swt.widgets.TypedListener.handleEvent TypedListener.java:116 at org.eclipse.swt.widgets.EventTable.sendEvent EventTable.java:82 at org.eclipse.swt.widgets.Widget.sendEvent Widget.java:842 at org.eclipse.swt.widgets.Widget.sendEvent Widget.java:866 at org.eclipse.swt.widgets.Widget.sendEvent Widget.java:847 at org.eclipse.swt.widgets.Control.WM_INITMENUPOPUP Control.java:3327 at org.eclipse.swt.widgets.Control.windowProc Control.java:3055 at org.eclipse.swt.widgets.Decorations.windowProc Decorations.java:1493 at org.eclipse.swt.widgets.Display.windowProc Display.java:3466 at org.eclipse.swt.internal.win32.OS.TrackPopupMenu Native Method at org.eclipse.swt.widgets.Menu._setVisible Menu.java:225 at org.eclipse.swt.widgets.Display.runPopups Display.java:2920 at org.eclipse.swt.widgets.Display.readAndDispatch Display.java:2521 at org.eclipse.ui.internal.Workbench.runEventLoop Workbench.java:1570 at org.eclipse.ui.internal.Workbench.runUI Workbench.java:1534 at org.eclipse.ui.internal.Workbench.createAndRunWorkbench Workbench.java:306 at org.eclipse.ui.PlatformUI.createAndRunWorkbench PlatformUI.java:143 at org.eclipse.ui.internal.ide.IDEApplication.run IDEApplication.java:103 at org.eclipse.core.internal.runtime.PlatformActivator$1.run PlatformActivator.java:228 at org.eclipse.core.runtime.adaptor.EclipseStarter.run EclipseStarter.java:344 at org.eclipse.core.runtime.adaptor.EclipseStarter.run EclipseStarter.java:156 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke Unknown Source at sun.reflect.DelegatingMethodAccessorImpl.invoke Unknown Source at java.lang.reflect.Method.invoke Unknown Source at org.eclipse.core.launcher.Main.invokeFramework Main.java:315 at org.eclipse.core.launcher.Main.basicRun Main.java:268 at org.eclipse.core.launcher.Main.run Main.java:942 at org.eclipse.core.launcher.Main.main Main.java:926 Here is the complete file: package org.blackboxtrader.liquidityarbitrage; import java.util.Properties; import junit.extensions.TestSetup; import junit.framework.Test; import org.apache.log4j.Level; import org.apache.log4j.Logger; import org.springframework.beans.factory.config.PropertyPlaceholderConfigurer; import org.springframework.context.ConfigurableApplicationContext; import org.springframework.context.support.FileSystemXmlApplicationContext; /** * Creates the single specified spring ApplicationContext for the entire TestCase. * The context is destroyed after all tests have run. */ public class SpringTestSetup extends TestSetup { public static class ContextHolder { public ConfigurableApplicationContext context; } private final Properties contextProperties; private final ContextHolder contextHolder; private final String[] configFilenames; public SpringTestSetup Test test, ContextHolder contextHolder, String... configFilenames { this test, null, contextHolder, configFilenames ; } public SpringTestSetup Test test, Properties contextProperties, ContextHolder contextHolder, String... configFilenames { super test ; this.contextProperties = contextProperties; this.contextHolder = contextHolder; this.configFilenames = configFilenames; } protected void setUp throws Exception { Logger.getLogger "org.springframework" .setLevel Level.WARN ; contextHolder.context = new FileSystemXmlApplicationContext configFilenames, contextProperties == null ; assertNotNull contextHolder.context ; if contextProperties != null { PropertyPlaceholderConfigurer propertyPlaceholderConfigurer = new PropertyPlaceholderConfigurer ; propertyPlaceholderConfigurer.setProperties contextProperties ; contextHolder.context.addBeanFactoryPostProcessor propertyPlaceholderConfigurer ; contextHolder.context.refresh ; } } protected void tearDown throws Exception { contextHolder.context.close ; contextHolder.context = null; } protected void setLoggerLevel String name, Level level { Logger.getLogger name .setLevel level ; } } Of course this project compiles and runs fine without aspectj nature. The project no aspects.</description>
    <commit commitTime="2005-05-12 09:32:03" id="0cb826c6a5d47a12eb03bf1751208c0b9a7b23a3"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="92630" reportTime="2005-04-25 15:26:00">
    <summary>Null Pointer Exception thrown by ajc compiler</summary>
    <description>Hi, I wrote my first aspect using aspect J as follows to enable logging: package com.apple.ist.espresso.aspects; import com.apple.ist.espresso.util.EspressoLogger; public class EspressoTrace { private static EspressoLogger logger = null; public static void initLogger EspressoLogger l { logger = l; } public static void TraceEntry String message { logger.debug "Entering : " + message ; } public static void TraceExit String message { logger.debug "Exiting : " + message ; } } My aspect is in the file EspressoTraceAspect.java as follows: package com.apple.ist.espresso.aspects; aspect EspressoTraceAspect { pointcut traceCall : execution public * com.apple.ist.espresso..*.* .. ; before : traceCall { Trace.traceEntry "" + thisJointPointStaticPart.getSignature ; } after : traceCall { Trace.traceExit "" + thisJointPointStaticPart.getSignature ; public static void main String[] args { Trace.initStream EspressoLogger.getLogger TraceAspect.class ; } } When i compiled it using the following target: init target that sets the required variables are done as shown in the example build.xml file and are NOT shown here &amp;lt;target name="Ajx" depends="init"&amp;gt; &amp;lt;iajc destdir="${build.dir}/classes" fork="true" forkclasspath="${aspectjtools.jar}" argfiles="${list}"&amp;gt; &amp;lt;src path="${src.dir}"/&amp;gt; &amp;lt;src path="${sharedsrc.dir}"/&amp;gt; &amp;lt;src path="${gensrc.dir}"/&amp;gt; &amp;lt;classpath&amp;gt; &amp;lt;path refid="classpath"/&amp;gt; &amp;lt;path refid="aspectj.lib"/&amp;gt; &amp;lt;/classpath&amp;gt; &amp;lt;/iajc&amp;gt; &amp;lt;/target&amp;gt; i'm getting the following exception. [error] Internal compiler error [iajc] java.lang.NullPointerException [iajc] at org.aspectj.weaver.bcel.UnwovenClassFile.deleteRealFile UnwovenClassFile.java:170 [iajc] at org.aspectj.ajdt.internal.core.builder.AjState.deleteClassFile AjState.java:413 [iajc] at org.aspectj.ajdt.internal.core.builder.AjState.noteResult AjState.java:450 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager$3.acceptResult AjBuildManager.java: 704 [iajc] at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing AjCompilerAdapter.java:144 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:373 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:683 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:168 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:102 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:109 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 [iajc] at org.aspectj.tools.ajc.Main.run Main.java:291 [iajc] at org.aspectj.tools.ajc.Main.runMain Main.java:227 [iajc] at org.aspectj.tools.ajc.Main.main Main.java:80 [iajc] no source information available [iajc] /Users/manjulajayaraman/projects/JADE/jadecvs/NewEspresso/ServerDevelopment/Phase1/ src/com/apple/ist/espresso/aspects/EspressoTrace.java:6 [error] The type EspressoTrace is already defined [iajc] public class EspressoTrace { [iajc] ^^^^^^^^^^^^ [iajc] ABORT [iajc] [iajc] Exception thrown from AspectJ 1.5.0M2 [iajc] This might be logged as a bug already -- find current bugs at [iajc] http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler [iajc] Bugs for exceptions thrown have titles File:line from the top stack, [iajc] e.g., "SomeFile.java:243" [iajc] If you don't find the exception below in a bug, please add a new bug [iajc] at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ [iajc] To make the bug a priority, please include a test program [iajc] that can reproduce this exception. [iajc] null [iajc] java.lang.NullPointerException [iajc] at org.aspectj.weaver.bcel.UnwovenClassFile.deleteRealFile UnwovenClassFile.java:170 [iajc] at org.aspectj.ajdt.internal.core.builder.AjState.deleteClassFile AjState.java:413 [iajc] at org.aspectj.ajdt.internal.core.builder.AjState.noteResult AjState.java:450 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager$3.acceptResult AjBuildManager.java: 704 [iajc] at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing AjCompilerAdapter.java:144 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:373 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:683 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:168 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:102 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:109 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 [iajc] at org.aspectj.tools.ajc.Main.run Main.java:291 [iajc] at org.aspectj.tools.ajc.Main.runMain Main.java:227 [iajc] at org.aspectj.tools.ajc.Main.main Main.java:80 [iajc] 1 fail|abort, 2 errors BUILD FAILED Could someone please let me know what's the problem and how do i proceed now? Thanks, Manjula</description>
    <commit commitTime="2005-04-26 16:14:06" id="02f75ba1e5b0eb9806d5642f891940be06691747"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/UnwovenClassFile.java</file>
    </fixedFiles>
  </bug>
  <bug id="92837" reportTime="2005-04-26 17:48:00">
    <summary>[inc-compilation] Incremental Compilation Fails for ITD's on Aspects</summary>
    <description>On my project, when I save an aspect that calls an inter-type declaration defined on itself, the incremental compiler gives a message like this: The method logError String, Exception is undefined for the type Foo Foo.java Running a full build clears the error. This might be a compiler bug, or it might be AJDT I never run command-line incremental compilation, so I don't know :- . Unfortunately, simple test cases or extracts of just the 2 aspects aren't reproducing the issue, so let me know if you need me to spend some time trying to create a small isolated version of the issue.</description>
    <commit commitTime="2005-10-05 14:01:43" id="727b0f5356e50761530655b52cbc0a96aff75c05"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="92880" reportTime="2005-04-27 03:54:00">
    <summary>@AJ PTW</summary>
    <description>implement PTW for @AJ aspects so far delayed to make sure PTW in code style was not evolving</description>
    <commit commitTime="2005-08-15 13:56:59" id="d2ab7c219daefa33aef2e934c1b1d660cdad401e"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/AjcMemberMaker.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java</file>
    </fixedFiles>
  </bug>
  <bug id="92906" reportTime="2005-04-27 09:55:00">
    <summary>showWeaveInfo for declare annotations</summary>
    <description>declaring annotations declare @type, @constructor, @method and @field currently doesn't show a message when the -showWeaveInfo option is set in ajc. Appropriate messages should be displayed.</description>
    <commit commitTime="2005-05-04 09:22:43" id="abc9a58ac59f0ee427039e26cb44952cbef5e24b"/>
    <fixedFiles>
      <file>bridge/src/org/aspectj/bridge/WeaveMessage.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/Utility.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/ShowWeaveMessagesTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="93253" reportTime="2005-04-29 06:03:00">
    <summary>-XlazyTjp should be default, and -XlazyTjp Lint warning not always given</summary>
    <description>First off the -XlazyTjp option works and either makes the AspectJ program faster or doesn't make it slower, so it should be the default rather than having to be specified by a command line option. Next, the lint message that is supposed to be generated when a piece of before advice could have been lazy but isn't, due to a piece of around advice on the same join point, isn't generated if that around advice uses 'thisJoinPoint'. A Code example: public aspect Scenario5 { public static boolean enabled = true; pointcut toBeTraced : execution * * .. &amp;amp;&amp;amp; !within Scenario5 ; before : toBeTraced &amp;amp;&amp;amp; if enabled { Object[] args = thisJoinPoint.getArgs ; // because of the around advice below this isn't made lazily System.out.println thisJoinPoint + ", arg's: " + args.length ; } Object around : toBeTraced &amp;amp;&amp;amp; if enabled { Object[] args = thisJoinPoint.getArgs ; // only with this line commented out is the Xlint warning produced though! return proceed ; } } class Test{ static void main String [] args { }</description>
    <commit commitTime="2005-11-01 21:55:21" id="bb9d2de08e63266a93ac1167f87b07813561d559"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>weaver/src/org/aspectj/weaver/Lint.java</file>
      <file>tests/src/org/aspectj/systemtest/xlint/XLintTests.java</file>
      <file>tests/bugs/lazyTjpXLintWarning/LazyTjpTest4.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/PerformanceTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="93310" reportTime="2005-04-29 14:53:00">
    <summary>Incremental Compilation Problem on Reweavable</summary>
    <description>I just refactored manually by renaming an aspect that affected a couple of classes in my project. I then received an error about the old aspect name being out of date for reweavability ? pointing at the affected classes, after saving under the new name triggering the incremental compile . A full compile cleared the error....</description>
    <commit commitTime="2005-11-25 14:56:21" id="361757b0fcfc845efaa75ed062e9a6178d050764"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="93345" reportTime="2005-04-30 08:49:00">
    <summary>unresolved joinpoint in cflow causes ClassCastException on BcelWeaver:933</summary>
    <description>I'm getting ClassCastException while compiling following code: ---- Test.java ---- class AClass { // void method {} } aspect AnAspect { pointcut annt : cflow execution * * .. ; before : annt { System.out.println "before annt" ; } } ---- Here's output of the compiler: --- out --- java.lang.ClassCastException: org.aspectj.weaver.ResolvedMember at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:933 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:244 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:119 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:385 [cut] ------ The problem is caused by cflow on unresolved not existing jointpoint. When you uncomment the method in AnClass, the problem disappears. I found this bug when I was introducing an aspect which has pointcuts based on annotations to fresh object-oriented system without annotated classes. When I started to annotate the classes problem disappeared. Following code illustates simplified situation: --- Test2.java --- import java.lang.annotation.*; @Target ElementType.METHOD @interface Ann {} class AClass { // @Ann void method {} } aspect AnAspect { pointcut annt : cflow execution @Ann * * .. ; before : annt { System.out.println "before annt" ; } } ---- I'm attaching those sources and ajcore files. Best regards, Michal</description>
    <commit commitTime="2005-05-09 11:08:28" id="f6034581d8540124494806a7c6b3ad37ead2b6c3"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/AllTestsAspectJ150.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/SuppressedWarnings.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="94086" reportTime="2005-05-09 04:45:00">
    <summary>Exploding compile time with if statements in pointcut</summary>
    <description>Compile time explodes when adding if ... statements to pointcuts. This is the same with ajc 1.2.1 and 1.5M2 although 1.5M2 is a little bit faster, but compile time still explodes. Example: pointcut pc2 : execution * Test.a .. &amp;amp;&amp;amp; if sl.isEnabled || execution * Test.a .. &amp;amp;&amp;amp; if sl.isEnabled compiled in about 1 second. Up to 7 such conditions , eg. pointcut Pc7 : execution * Test.a .. &amp;amp;&amp;amp; if sl.isEnabled || execution * Test.b .. &amp;amp;&amp;amp; if sl.isEnabled || execution * Test.c .. &amp;amp;&amp;amp; if sl.isEnabled || execution * Test.d .. &amp;amp;&amp;amp; if sl.isEnabled || execution * Test.e .. &amp;amp;&amp;amp; if sl.isEnabled || execution * Test.f .. &amp;amp;&amp;amp; if sl.isEnabled || execution * Test.g .. &amp;amp;&amp;amp; if sl.isEnabled ; are also compiled quite quickly ~ 3 seconds with both ajc 1.2.1 and 1.5M2 . Now, adding another condition 8 lines causes 6 seconds compile time. Adding yet another condition line = 9 ex. lines causes ~ 1 min compile time! 10 such lines even more than 8 minutes Sample source code below ------------------------ // ########## Aspect.aj ############### public aspect Aspect { private static final SimpleLogger sl = new SimpleLogger ; pointcut PC : execution * Test.a .. &amp;amp;&amp;amp; if sl.isEnabled || execution * Test.b .. &amp;amp;&amp;amp; if sl.isEnabled || execution * Test.c .. &amp;amp;&amp;amp; if sl.isEnabled || execution * Test.d .. &amp;amp;&amp;amp; if sl.isEnabled || execution * Test.e .. &amp;amp;&amp;amp; if sl.isEnabled || execution * Test.f .. &amp;amp;&amp;amp; if sl.isEnabled || execution * Test.g .. &amp;amp;&amp;amp; if sl.isEnabled || execution * Test.h .. &amp;amp;&amp;amp; if sl.isEnabled || execution * Test.i .. &amp;amp;&amp;amp; if sl.isEnabled || execution * Test.j .. &amp;amp;&amp;amp; if sl.isEnabled ; before : PC { sl.log "Before" ; } after : PC { sl.log "After" ; } } // ########## Test.java ###############</description>
    <commit commitTime="2005-05-16 10:55:24" id="88d477dab59d9f5f175e89534885e4ac6bc0567c"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/IfPointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="94167" reportTime="2005-05-09 13:37:00">
    <summary>NPE in reflect implementation</summary>
    <description>Proposed fix I'd like input on how to best add test cases for this so I can submit a tested patch ; I believe this will work because if you uncomment the work-around line, it works : Change line 63 from: method = declaringType.getDeclaredMethod getName ,getParameterTypes ; to method = getDeclaringType .getDeclaredMethod getName ,getParameterTypes ; Test source: package reflect; import org.aspectj.lang.*; import org.aspectj.lang.reflect.*; import java.lang.reflect.*; aspect Test { before : call * * .. &amp;amp;&amp;amp; !within Test { MethodSignature sig = MethodSignature thisJoinPoint.getSignature ; //sig.getDeclaringType ; // uncomment to work-around Method method = sig.getMethod ; } } public class MinimalErr { public static void main String args[] { try { Inner.foo ; } catch Throwable t { t.printStackTrace ; } } public static class Inner { public static void foo {} } }</description>
    <commit commitTime="2005-06-07 12:17:30" id="3824b1c24717b79d48bd5f965bd2d34569dc2195"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>runtime/src/org/aspectj/runtime/reflect/AdviceSignatureImpl.java</file>
      <file>runtime/src/org/aspectj/runtime/reflect/MethodSignatureImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="95516" reportTime="2005-05-17 05:17:00">
    <summary>aop.xml -outjar</summary>
    <description>to do as defined in docs includes &amp;lt;weaver options=/&amp;gt; as the ones used in AJC + gather all aspects found ie even those from aspectpatth etc</description>
    <commit commitTime="2005-11-07 10:53:18" id="a625ea2ed4810fb5aa1334c027418d25cfb37834"/>
    <fixedFiles>
      <file>ajde/testsrc/org/aspectj/ajde/AjdeTests.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/ltw/LTWTests.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>testing/newsrc/org/aspectj/testing/RunSpec.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java</file>
      <file>testing/newsrc/org/aspectj/testing/CompileSpec.java</file>
    </fixedFiles>
  </bug>
  <bug id="95517" reportTime="2005-05-17 05:19:00">
    <summary>ajc pseudo LTW not consistent with LTW</summary>
    <description>docs says ajc provides LTW things, but that one does not at all go thru aop.xml lookups and so on Needs to be removed or made consistent in some way</description>
    <commit commitTime="2005-11-15 16:55:56" id="4ea00513761eeb32b3403caa1a3ba39f9218a839"/>
    <fixedFiles>
      <file>build/src/$installer$/org/aspectj/Main.java</file>
    </fixedFiles>
  </bug>
  <bug id="95529" reportTime="2005-05-17 05:53:00">
    <summary>concrete-aspect</summary>
    <description>for M4 note: need to think some if we want to jit the concrete aspect, or if its not that needed ie that the shadow munger API allow us to do what we need perhaps not easy to deal with perClause and uniqueness enforcement of concrete-aspect name, but perhaps a burden as well to deal with jit since then no bytecode can be grabbed from file system ie may confuse the bcel repository and resolvedTypeX and alike Ideas Andy ? I am more in favor of bytecode gen the concrete aspect there. that further means the underlying infra needs to support define class callbacks like "acceptClass" thing used for ajc$Closure and alike when running LTW. I am ok with that</description>
    <commit commitTime="2005-10-25 10:00:58" id="76ebbc76add2abd815b3a8b5ea0beb11c94c8c49"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/definition/Definition.java</file>
      <file>aspectj5rt/java5-src/org/aspectj/lang/annotation/Pointcut.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/WeavingURLClassLoader.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelPerClauseAspectAdder.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="95992" reportTime="2005-05-19 14:12:00">
    <summary>Problems resolving type name inside generic class</summary>
    <description>ajc reports an error when compiling the following code: interface Base&amp;lt;T&amp;gt; { static interface Inner { } } class Test&amp;lt;T extends Test.InnerTest&amp;gt; implements Base&amp;lt;T&amp;gt; { static class InnerTest implements Inner { } } $ ajc -1.5 Test.java Test.java:14 [error] Inner cannot be resolved to a type static class InnerTest implements Inner { Sun's javac compiles it without any error. The error can be avoided by simply writing "Base.Inner" instead of just "Inner". Also, it compiles fine if the constraint "extends Test.InnerTest" is left away.</description>
    <commit commitTime="2005-08-31 13:48:16" id="b953c0347a539890d9e1f87feabc78a3d687c50f"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="96371" reportTime="2005-05-23 17:22:00">
    <summary>Patch to support loading aop.xml properly</summary>
    <description>AspectJ 5 load-time weaving in CVS HEAD isn't loading aop.xml files properly from a jar file without specifying the global -D flag. The following patch fixes the problem for me so I can load aop.xml files from jars on the classpath without a global flag: ClassLoaderWeavingAdaptor.java:109: - Enumeration xmls = loader.getResources "/META-INF/aop.xml" ; + Enumeration xmls = loader.getResources "META-INF/aop.xml" ; I.e., getResources doesn't work with a leading separator, at least not on the Sun VM or JRockIt on Windows. Writing a unit test for this would require significant changes to the loadtime module, so I wrote a standalone test of the API: public class TestApi extends TestCase { public void testLoadResource throws Exception { URL urlList[] = { new URL "file:testsrc/org/aspectj/weaver/loadtime/test/sample.jar" }; ClassLoader loader = new URLClassLoader urlList ; Enumeration xmls = loader.getResources "META-INF/aop.xml" ; //this version fails: //Enumeration xmls = loader.getResources "/META-INF/aop.xml" ; assertTrue xmls.hasMoreElements ; } }</description>
    <commit commitTime="2005-05-30 10:00:21" id="f14646f57a93e7ec865416048c4491d9943064e5"/>
    <fixedFiles>
      <file>tests/java5/ataspectj/ataspectj/SingletonAspectBindingsTest.java</file>
      <file>loadtime5/java5-src/org/aspectj/weaver/loadtime/ClassPreProcessorAgentAdapter.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="98290" reportTime="2005-06-03 10:57:00">
    <summary>no "matches declare" entry in structure model for single declare warning statement</summary>
    <description>A project containing one class and one aspect: ----------------------------------------------------- package pack; public class C { public static void main String[] args { new C .sayHello ; } public void sayHello { System.out.println "HELLO" ; } } ---------------------------------------------------- package pack; public aspect A { declare warning : execution * C.sayHello .. : "blah blah"; } ----------------------------------------------------- has the "matched by" entry for A.aj, but doesn't have the "matches declare" entry for C.java. This means that in AJDT, C.sayHello isn't added to our map and consequently we don't get any relationships showing in the Cross Reference view for A.aj.</description>
    <commit commitTime="2005-09-01 19:47:37" id="619f8bc764e127d4f43ece87ae0e858f7329ec9e"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="98320" reportTime="2005-06-03 12:54:00">
    <summary>[generics][itds] intertype with nested generic type</summary>
    <description>import java.util.*; class C { Set&amp;lt;String&amp;gt; simple_local; Set&amp;lt;Set&amp;lt;String&amp;gt;&amp;gt; nested_local; } aspect Inter_Type_Injector { Set&amp;lt;String&amp;gt; C.simple_intertype; Set&amp;lt;Set&amp;lt;String&amp;gt;&amp;gt; C.nested_intertype; public void test { Set&amp;lt;String&amp;gt; simple_local = new C .simple_local; // works Set&amp;lt;String&amp;gt; simple_intertype = new C .simple_intertype; // works Set&amp;lt;Set&amp;lt;String&amp;gt;&amp;gt; nested_local = new C .nested_local; // works Set&amp;lt;Set&amp;lt;String&amp;gt;&amp;gt; nested_intertype = new C .nested_intertype; // fails } } zipfile classpath entry does not exist: /opt/sun-jdk-1.5.0/jre/lib/i18n.jar zipfile classpath entry does not exist: /opt/sun-jdk-1.5.0/jre/lib/sunrsasign.jar directory classpath entry does not exist: /opt/sun-jdk-1.5.0/jre/classes compiling /home/user/sgelin3/shared/dev/java/ajc/Bug.java /home/user/sgelin3/shared/dev/java/ajc/Bug.java:16 [error] Type mismatch: cannot convert from Set&amp;lt;Set&amp;lt;E&amp;gt;&amp;gt; to Set&amp;lt;Set&amp;lt;String&amp;gt;&amp;gt; Set&amp;lt;Set&amp;lt;String&amp;gt;&amp;gt; nested_intertype = new C .nested_intertype; // fails ^^^^^^^^^^^ 1 error</description>
    <commit commitTime="2005-06-14 13:58:09" id="d6bfe97b4db7f2109a4a088ebd0898b3ef8740e9"/>
    <fixedFiles>
      <file>tests/bugs150/pr99089/TracingAspect.java</file>
      <file>tests/bugs150/pr99089/DataClass.java</file>
    </fixedFiles>
  </bug>
  <bug id="98646" reportTime="2005-06-07 05:55:00">
    <summary>parser cannot parse varargs correctly</summary>
    <description>the following cannot be parsed: call * * int, Integer... see in modules/weaver/.../PointcutVisitorTest uncomment the testTemp See "FIXME AV for Adrian" comments in PatternParser. Half fix but then fails for other tests. Adrian can you have a look at it ? Thanks</description>
    <commit commitTime="2005-06-07 13:12:51" id="743566fb8882ea922e0ff56ac83d1e6fdd9cd637"/>
    <fixedFiles>
      <file>weaver/testsrc/org/aspectj/weaver/patterns/VisitorTestCase.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PatternParser.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/BasicTokenSource.java</file>
    </fixedFiles>
  </bug>
  <bug id="98952" reportTime="2005-06-08 10:28:00">
    <summary>@AJ if pointcut</summary>
    <description>copy of my proposal for @AJ if pointcut I came up with today and that everyone agree with --- Here are my thought on the if pointcut for @AJ stuff. I don't think it is reasonable to have string based if .... bodies so here is the proposal I am starting on - the main idea is : the @Pointcut annotated method acts as the if body hence the if body is already at hand etc etc so simple ! Alex // if is somehow implicit ie we can know we have an if when we have // a static boolean @Pointcut annotatated method // TODO TBD -may help toString , parsing and tools if we require the if marker @Aspect public class IfAspect { static int I; @Pointcut "execution * Foo.do &amp;amp;&amp;amp; if " // if IfAspect.test public static boolean test { return I &amp;gt; 0; } @Pointcut "execution * Foo.do &amp;amp;&amp;amp; if " // if IfAspect.test2 thisJoinPoint public static boolean test2 JoinPoint jp {// will require JP flags return jp.getSignature .getName .startsWith "baz" &amp;amp;&amp;amp; I &amp;gt; 0; } @Pointcut "execution * Foo.do int &amp;amp;&amp;amp; args val &amp;amp;&amp;amp; if " public static boolean test3 int val {//use of formal binding is straightforward return val + I &amp;gt; 0; } @Before "test " public void doBefore { System.out.println "IfAspect.doBefore" ; } @Before "test2 " public void doBefore2 { System.out.println "IfAspect.doBefore2" ; } @Before "execution * Foo.do &amp;amp;&amp;amp; if " // enclosingDef is not a @Pointcut returning boolean, with public static access public void doBefore3 { System.out.println "NO WAY - compiler error" ; } } ReplyReply to allForward Adrian Colyer to me, Andrew, Jonas More options 11:25 am 5 hours ago I like the idea of the method containing the body of the if pointcut - very elegant! I don't think we want to make the if completely implicit, so: @Pointcut "execution * Foo.* .. " public static boolean fooThings { return true; } should be an error, and @Pointcut "execution * Foo.* .. &amp;amp;&amp;amp; if true " public void fooThings {} would also be an error not allowed to specify body for if pointcut in annotation style , but @Pointcut "execution * Foo.* .. &amp;amp;&amp;amp; if " public static boolean fooThings { return true; } is great! -- Adrian Adrian_Colyer@uk.ibm.com Alexandre Vasseur &amp;lt; avasseur@gmail.com &amp;gt; 08/06/2005 10:02 Please respond to Alexandre Vasseur &amp;lt; avasseur@gmail.com &amp;gt; To Adrian Colyer/UK/IBM@IBMGB, Andrew Clement/UK/IBM@IBMGB cc Jonas Bonér &amp;lt; jboner@gmail.com &amp;gt; Subject if pointcut in @AJ - Show quoted text - Here are my thought on the if pointcut for @AJ stuff. I don't think it is reasonable to have string based if .... bodies so here is the proposal I am starting on - the main idea is : the @Pointcut annotated method acts as the if body hence the if body is already at hand etc etc so simple ! Alex // if is somehow implicit ie we can know we have an if when we have // a static boolean @Pointcut annotatated method // TODO TBD -may help toString , parsing and tools if we require the if marker @Aspect public class IfAspect { static int I; @Pointcut "execution * Foo.do &amp;amp;&amp;amp; if " // if IfAspect.test public static boolean test { return I &amp;gt; 0; } @Pointcut "execution * Foo.do &amp;amp;&amp;amp; if " // if IfAspect.test2 thisJoinPoint public static boolean test2 JoinPoint jp {// will require JP flags return jp.getSignature .getName .startsWith "baz" &amp;amp;&amp;amp; I &amp;gt; 0; } @Pointcut "execution * Foo.do int &amp;amp;&amp;amp; args val &amp;amp;&amp;amp; if " public static boolean test3 int val {//use of formal binding is straightforward return val + I &amp;gt; 0; } @Before "test " public void doBefore { System.out.println "IfAspect.doBefore" ; } @Before "test2 " public void doBefore2 { System.out.println "IfAspect.doBefore2" ; } @Before "execution * Foo.do &amp;amp;&amp;amp; if " // enclosingDef is not a @Pointcut returning boolean, with public static access public void doBefore3 { System.out.println "NO WAY - compiler error" ; } } ReplyReply to allForwardInvite Adrian to Gmail Alexandre Vasseur to Adrian, Andrew, Jonas More options 1:52 pm 2½ hours ago Great - I reach the same "if is required" conclusion that was one of the last burden we had to go thru in terms of semantics equivalence. There is one implicit consequence: an anonymous pointcut @Before ... cannot contain an if in the @AJ style. That's the small special case to pay... Alex - Show quoted text - On 6/8/05, Adrian Colyer &amp;lt; adrian_colyer@uk.ibm.com &amp;gt; wrote: &amp;gt; &amp;gt; I like the idea of the method containing the body of the if pointcut - &amp;gt; very elegant! I don't think we want to make the if completely implicit, &amp;gt; so: &amp;gt; &amp;gt; @Pointcut "execution * Foo.* .. " &amp;gt; public static boolean fooThings { &amp;gt; return true; &amp;gt; } &amp;gt; &amp;gt; should be an error, and &amp;gt; &amp;gt; @Pointcut "execution * Foo.* .. &amp;amp;&amp;amp; if true " &amp;gt; public void fooThings {} &amp;gt; &amp;gt; would also be an error not allowed to specify body for if pointcut in &amp;gt; annotation style , &amp;gt; &amp;gt; but &amp;gt; &amp;gt; @Pointcut "execution * Foo.* .. &amp;amp;&amp;amp; if " &amp;gt; public static boolean fooThings { &amp;gt; return true; &amp;gt; } &amp;gt; &amp;gt; is great! &amp;gt; &amp;gt; -- Adrian &amp;gt; Adrian_Colyer@uk.ibm.com &amp;gt; &amp;gt; &amp;gt; &amp;gt; Alexandre Vasseur &amp;lt; avasseur@gmail.com &amp;gt; &amp;gt; &amp;gt; 08/06/2005 10:02 &amp;gt; &amp;gt; Please respond to &amp;gt; Alexandre Vasseur &amp;lt; avasseur@gmail.com &amp;gt; &amp;gt; &amp;gt; &amp;gt; To Adrian Colyer/UK/IBM@IBMGB, Andrew Clement/UK/IBM@IBMGB &amp;gt; &amp;gt; cc Jonas Bonér &amp;lt; jboner@gmail.com &amp;gt; &amp;gt; &amp;gt; Subject if pointcut in @AJ &amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt; &amp;gt; Here are my thought on the if pointcut for @AJ stuff. &amp;gt; I don't think it is reasonable to have string based if .... bodies so &amp;gt; here is the proposal I am starting on - the main idea is : the &amp;gt; @Pointcut annotated method acts as the if body hence the if body is &amp;gt; already at hand etc etc &amp;gt; &amp;gt; so simple ! &amp;gt; Alex &amp;gt; &amp;gt; // if is somehow implicit ie we can know we have an if when we have &amp;gt; // a static boolean @Pointcut annotatated method &amp;gt; // TODO TBD -may help toString , parsing and tools if we require the &amp;gt; if marker &amp;gt; @Aspect &amp;gt; public class IfAspect { &amp;gt; &amp;gt; static int I; &amp;gt; &amp;gt; @Pointcut "execution * Foo.do &amp;amp;&amp;amp; if " // if IfAspect.test &amp;gt; public static boolean test { &amp;gt; return I &amp;gt; 0; &amp;gt; } &amp;gt; &amp;gt; @Pointcut "execution * Foo.do &amp;amp;&amp;amp; if " // &amp;gt; if IfAspect.test2 thisJoinPoint &amp;gt; public static boolean test2 JoinPoint jp {// will require JP flags &amp;gt; return jp.getSignature .getName .startsWith "baz" &amp;amp;&amp;amp; I &amp;gt; 0; &amp;gt; } &amp;gt; &amp;gt; @Pointcut "execution * Foo.do int &amp;amp;&amp;amp; args val &amp;amp;&amp;amp; if " &amp;gt; public static boolean test3 int val {//use of formal binding is &amp;gt; straightforward &amp;gt; return val + I &amp;gt; 0; &amp;gt; } &amp;gt; &amp;gt; @Before "test " &amp;gt; public void doBefore { &amp;gt; System.out.println "IfAspect.doBefore" ; &amp;gt; } &amp;gt; &amp;gt; @Before "test2 " &amp;gt; public void doBefore2 { &amp;gt; System.out.println "IfAspect.doBefore2" ; &amp;gt; } &amp;gt; &amp;gt; @Before "execution * Foo.do &amp;amp;&amp;amp; if " // enclosingDef is not a &amp;gt; @Pointcut returning boolean, with public static access &amp;gt; public void doBefore3 { &amp;gt; System.out.println "NO WAY - compiler error" ; &amp;gt; } &amp;gt; } &amp;gt; &amp;gt; ReplyReply to allForward Alexandre Vasseur to Adrian More options 4:12 pm 15 minutes ago I actually like that a lot: @Pointcut "if " public static boolean testONE JoinPoint jp { System.out.println "\tIfAspect.testONE" ; return jp.getSignature .getName .startsWith "do" ; } ie a simple method gets turned into a full blown join point testing library using regular Java</description>
    <commit commitTime="2005-08-15 16:54:37" id="15c5be04ed8d39ceeeb4ab7b610c62ad3ba9073a"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/IfPointcut.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java</file>
    </fixedFiles>
  </bug>
  <bug id="99089" reportTime="2005-06-08 19:49:00">
    <summary>[generics][itds] ArrayIndexOutOfBoundsException - Generics in privileged aspects</summary>
    <description>This is on AspectJ 1.5.0.20050525133001 as the AJDT dev build hasn't been updated since then. Eclipse 3.1M7, AJDT 1.2.0.20050525133001. The problem seems to be caused by accessing a private method returning a parameterized type from inside a privileged aspect. Bug 96111 seems to be similar but for private fields. I can't easily see if that fix fixes this one too but the exception is quite different. Sample follows. Stack trace: java.lang.ArrayIndexOutOfBoundsException: 0 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding.substitute ParameterizedTypeBinding.java:646 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.substitute Scope.java:85 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding.substitute ParameterizedTypeBinding.java:667 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding.superclass ParameterizedTypeBinding.java:731 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isSuperclassOf ReferenceBinding.java:743 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isCompatibleWith ReferenceBinding.java:674 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.resolve LocalDeclaration.java:207 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements AbstractMethodDeclaration.java:415 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements MethodDeclaration.java:160 at org.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration.resolveStatements AdviceDeclaration.java:130 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve AbstractMethodDeclaration.java:393 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1026 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.resolve AspectDeclaration.java:110 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1075 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve CompilationUnitDeclaration.java:280 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:546 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:365 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:727 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:229 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:147 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:116 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 DataClass.java: import java.util.Vector; public class DataClass { private Vector&amp;lt;Object&amp;gt; v = new Vector&amp;lt;Object&amp;gt; ; private Vector&amp;lt;Object&amp;gt; getV { return v; } } TracingAspect.java: import java.util.Vector; privileged aspect TracingAspect { before DataClass dc : execution * DataClass.doit &amp;amp;&amp;amp; this dc { Vector&amp;lt;Object&amp;gt; myV = dc.getV ; } } Thanks.</description>
    <commit commitTime="2005-06-09 13:59:15" id="81c78513ef92422e97e06002545c3e0ad6a9027c"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="99125" reportTime="2005-06-09 06:25:00">
    <summary>Repetitive method name/signature in class file</summary>
    <description>This is what the VM sais: java.lang.ClassFormatError: Repetitive method name/signature in class file com/ netvisor/metadata_view/ComponentFactory at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:620 at java.security.SecureClassLoader.defineClass SecureClassLoader.java: 124 at java.net.URLClassLoader.defineClass URLClassLoader.java:260 at java.net.URLClassLoader.access$100 URLClassLoader.java:56 at java.net.URLClassLoader$1.run URLClassLoader.java:195 at java.security.AccessController.doPrivileged Native Method at java.net.URLClassLoader.findClass URLClassLoader.java:188 at java.lang.ClassLoader.loadClass ClassLoader.java:306 at sun.misc.Launcher$AppClassLoader.loadClass Launcher.java:268 at java.lang.ClassLoader.loadClass ClassLoader.java:251 at java.lang.ClassLoader.loadClassInternal ClassLoader.java:319 And this is why: I've got an interface ComponentFactory and an aspect that adds various ITD methods trough that interface. I've added some methods to both the interface and the aspect, some other methods are only added trough the aspect. The situation is a bit more complex, I've got a base interface/aspect with these two methods and the subaspects implement the problematic two methods . And those methods that are both in the interface and the aspect are the ones that get duplicated in the interface class file. This is working fine in the old CVS branch 1.2.* . Hope it helps, good luck!</description>
    <commit commitTime="2005-09-02 17:12:43" id="df46c6f728502a74b2d042a0a955eab1326ba76a"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="99136" reportTime="2005-06-09 08:36:00">
    <summary>xlint advice not applied appears twice with cflows</summary>
    <description>////////////// in the following code aspect A{ before : call * * .. &amp;amp;&amp;amp; cflow execution * * .. {} } //////////////////////////////////// two "advice not appied" xlint messages are produced, one for the before advice and one for the cflow within the before advice.</description>
    <commit commitTime="2005-09-02 10:40:19" id="047173e8683e4ab9004ae2151a8abad886d1b84b"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>tests/src/org/aspectj/systemtest/xlint/XLintTests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="99168" reportTime="2005-06-09 11:20:00">
    <summary>[generics][itds] ITD on generic inner class crashes ajc</summary>
    <description>inter-type declaration on a generic inner class crashes the compiler: class Outer { class Inner {} class Generic_Inner&amp;lt;T&amp;gt; {} } class Generic_Outer&amp;lt;T&amp;gt; { } aspect Injector { int Outer.outer; // works int Outer.Inner.inner; // works int Generic_Outer.outer; // works int Outer.Generic_Inner.inner; // crashes } /home/user/sgelin3/dev/java/ajc/new_bug/Bug.java [error] Internal compiler error java.lang.RuntimeException: can't handle: class Generic_Inner#RAW extends NULL TYPENULL SUPERINTERFACES enclosing type : OuterNULL FIELDSNULL METHODS at org.aspectj.ajdt.internal.compiler.lookup.InterTypeScope.makeSourceTypeBinding InterTypeScope.java:35 at org.aspectj.ajdt.internal.compiler.lookup.InterTypeScope.&amp;lt;init&amp;gt; InterTypeScope.java:28 at org.aspectj.ajdt.internal.compiler.ast.InterTypeDeclaration.resolve InterTypeDeclaration.java:101 at org.aspectj.ajdt.internal.compiler.ast.InterTypeFieldDeclaration.resolve InterTypeFieldDeclaration.java:141 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1076 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.resolve AspectDeclaration.java:110 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1125 ...</description>
    <commit commitTime="2005-06-14 14:53:37" id="588023e3beb9f861405f4f9a580122993d2dbb47"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeScope.java</file>
    </fixedFiles>
  </bug>
  <bug id="99191" reportTime="2005-06-09 12:08:00">
    <summary>declare @field allowed for non existent fields</summary>
    <description>///// in this code @interface anInterface{} aspect B { declare @field : int B.noSuchField : @anInterface; // should be an error } ////////////////// I don't get an error, even though B.noSuchField doesn't exist. If I try declare @field on NoSuchCLass.noSuchField I do get an error though.</description>
    <commit commitTime="2005-10-27 15:49:49" id="2da9b31be2c1e5af9d33b25be798f3a47362fb88"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="100195" reportTime="2005-06-15 10:40:00">
    <summary>Missing LocalVariableTable debug info for around advice</summary>
    <description>AspectJ version: 1.2.1 also observed in aspectj-DEVELOPMENT java version "1.4.2_07" When debugging java code woven with an "around" advice with proceed, it looks like the LocalVariableTable information gets lost during the weaving. Example code: // Foo.java public class Foo { private String myString = "A String"; public static void main String[] args { new Foo .foo ; } private void foo { String myLocal = myString; System.out.println myLocal ; // breakpoint here } } // Test.aj aspect Test { void around : execution * Foo.foo .. { System.out.println "before" ; proceed ; System.out.println "after" ; } } We compiled with ajc 1.2.1: ajc -g -preserveAllLocals -sourceroots . When running Foo in the Eclipse 3.1.0 debugger and setting a breakpoint at the "System.out.println myLocal ;" line, the debugger "Variables" window is empty. Also, disassembling with javap shows that the LocalVariableTable is empty in the generated foo_aroundBody0 method : &amp;gt; javap -c -l -s -private Foo private static final void foo_aroundBody0 Foo ; Signature: LFoo; V Code: 0: aload_0 1: getfield #15; //Field myString:Ljava/lang/String; 4: astore_1 5: aload_1 6: ldc #30; //String X 8: invokevirtual #36; //Method java/lang/String.endsWith: Ljava/lang/String; Z 11: ifeq 27 14: ldc #38; //String local1 16: astore_3 17: getstatic #44; //Field java/lang/System.out:Ljava/io/PrintStream; 20: aload_3 21: invokevirtual #50; //Method java/io/PrintStream.println: Ljava/lang/String; V 24: goto 37 27: ldc #52; //String local2 29: astore_3 30: getstatic #44; //Field java/lang/System.out:Ljava/io/PrintStream; 33: aload_3 34: invokevirtual #50; //Method java/io/PrintStream.println: Ljava/lang/String; V 37: return LineNumberTable: line 7: 0 line 8: 5 line 9: 14 line 10: 17 line 12: 27 line 13: 30 line 15: 37</description>
    <commit commitTime="2005-09-29 11:30:49" id="d6256b8c3c944d8fa2feb6d837900144db6521ac"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/ShadowRange.java</file>
    </fixedFiles>
  </bug>
  <bug id="100227" reportTime="2005-06-15 12:24:00">
    <summary>[generics][itds] inner class with generic enclosing class</summary>
    <description>ajc crashes with a NullPointerException when an intertype declaration tries to modify an inner class, if the enclosing outer class is generic: class Outer { class Inner {} } class Generic_Outer&amp;lt;T&amp;gt; { class Inner {} } aspect Injector { int Outer.outer; // works int Outer.Inner.inner; // works int Generic_Outer.outer; // works int Generic_Outer.Inner.inner; // crashes } /home/user/sgelin3/dev/java/ajc/new_bug/Bug.java [error] Internal compiler error java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding EclipseFactory.java:202 at org.aspectj.ajdt.internal.compiler.ast.InterTypeFieldDeclaration.build InterTypeFieldDeclaration.java:173 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTypeAndPerClause AspectDeclaration.java:1020 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildInterTypeAndPerClause AjLookupEnvironment.java:306 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:122 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:302 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:316 ...</description>
    <commit commitTime="2005-06-16 08:30:14" id="7d5002ad52c86eefdf58535310fb41f042206d11"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/TypeX.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="100260" reportTime="2005-06-15 14:29:00">
    <summary>[generics][itds] methods inherited from a generic parent</summary>
    <description>when using an intertype declaration to add a method to a generic class, the method is not correctly inherited. the bug doesn't apply to fields. Strangely enough, raw types generic types instantiated without specifying a type parameter inherit the methods properly: class Generic_Parent&amp;lt;T&amp;gt; {} class Child extends Generic_Parent&amp;lt;Integer&amp;gt; {} class Generic_Child&amp;lt;T&amp;gt; extends Generic_Parent&amp;lt;Integer&amp;gt; {} aspect Injector { public void Generic_Parent.inherited_method {} public int Generic_Parent.inherited_field; public void test { int inherited_field; inherited_field = new Generic_Child .inherited_field; // works inherited_field = new Generic_Child&amp;lt;Integer&amp;gt; .inherited_field; // works inherited_field = new Child .inherited_field; // works new Generic_Child .inherited_method ; // works new Generic_Child&amp;lt;Integer&amp;gt; .inherited_method ; // unresolved new Child .inherited_method ; // unresolved } }</description>
    <commit commitTime="2005-06-16 11:57:28" id="b54831fd860a852310cf2b7e831df741d1545437"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="101047" reportTime="2005-06-21 10:13:00">
    <summary>Weaver produces wrong local variable table bytecode</summary>
    <description>AspectJ version: DEVELOPMENT also observed in 1.2.1 When weaving with a before or after advice, the generated local variable table will, on branch instructions, offset the "length" field of a local variable wrongly by one instruction. Also, the weaver will mix up local variables with the same name, thus violating the java VM specification: // Test.aj aspect Test { before : execution * Foo.foo .. { System.out.println "before" ; } // Foo.java public class Foo { private String myString = "A String"; public static void main String[] args { new Foo .foo ; } private void foo { String myLocal = myString; if myLocal.endsWith "X" { String local1 = "local1"; System.out.println local1 ; } else if myLocal.endsWith "Y" { String local2 = "local2"; System.out.println local2 ; } else { String local1 = "local3"; System.out.println local1 ; } } } --- We compilw with ajc -sourceroots . and dumps Foo with javap: javap -c -l -s -private Foo .... .... private void foo ; Signature: V Code: 0: invokestatic #65; //Method Test.aspectOf: LTest; 3: invokevirtual #68; //Method Test.ajc$before$Test$1$f0485e90: V 6: aload_0 7: getfield #15; //Field myString:Ljava/lang/String; 10: astore_1 11: aload_1 12: ldc #30; //String X 14: invokevirtual #36; //Method java/lang/String.endsWith: Ljava/lang/String; Z 17: ifeq 33 20: ldc #38; //String local1 22: astore_2 23: getstatic #44; //Field java/lang/System.out:Ljava/io/PrintStream; 26: aload_2 27: invokevirtual #50; //Method java/io/PrintStream.println: Ljava/lang/String; V 30: goto 65 33: aload_1 34: ldc #52; //String Y 36: invokevirtual #36; //Method java/lang/String.endsWith: Ljava/lang/String; Z 39: ifeq 55 42: ldc #54; //String local2 44: astore_2 45: getstatic #44; //Field java/lang/System.out:Ljava/io/PrintStream; 48: aload_2 49: invokevirtual #50; //Method java/io/PrintStream.println: Ljava/lang/String; V 52: goto 65 55: ldc #56; //String local3 57: astore_2 58: getstatic #44; //Field java/lang/System.out:Ljava/io/PrintStream; 61: aload_2 62: invokevirtual #50; //Method java/io/PrintStream.println: Ljava/lang/String; V 65: return LineNumberTable: line 7: 6 line 8: 11 line 9: 20 line 10: 23 line 11: 33 line 12: 42 line 13: 45 line 15: 55 line 16: 58 line 18: 65 LocalVariableTable: Start Length Slot Name Signature 6 60 0 this LFoo; 11 55 1 myLocal Ljava/lang/String; 45 12 2 local2 Ljava/lang/String; 23 43 2 local1 Ljava/lang/String; We see that the two occurences of the "local1" variable erroneously have been combined into one entry, starting at byte 23 and ending at byte 66. This is obviously wrong, since "local1" has no value in the "local2" block. Secondly, the "local2" variable end is wrongly offset by one instruction offset.</description>
    <commit commitTime="2005-09-28 20:10:19" id="85a4b0afb2c4b69cb467484d9ed18b21e414a868"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/MethodGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="101407" reportTime="2005-06-23 02:44:00">
    <summary>NullPointerException when selecting Save As in top menu</summary>
    <description>The Steps of Reproduce: 1. Open BIRT 2. New a project 3. In top menu of File, click New -&amp;gt; Report to create a report 4. Drag a table element from Palette into the report of Layout view 5. Save the report 6. Drag mouse to select two cells in the table 7. Select the report in Navigator view 8. In the top menu, select Save As... 9. In the Save As pop up dialog window, change the file name in the File name field, then click OK button Expected Result: There is no error to click OK button Actual Result: Error window pops up and the error log as follows: java.lang.NullPointerException at org.eclipse.gef.editparts.AbstractEditPart.getRoot AbstractEditPart.java:587 at org.eclipse.gef.editparts.AbstractEditPart.getRoot AbstractEditPart.java:587 at org.eclipse.gef.editparts.AbstractEditPart.getViewer AbstractEditPart.java:637 at org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.TableU til.getSelectionCells TableUtil.java:258 at org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.TableE ditPart.canMerge TableEditPart.java:1244 at org.eclipse.birt.report.designer.internal.ui.editors.schematic.actions.MergeAct ion.calculateEnabled MergeAction.java:51 at org.eclipse.gef.ui.actions.WorkbenchPartAction.isEnabled WorkbenchPartAction.java:111 at org.eclipse.ui.actions.RetargetAction.setActionHandler RetargetAction.java:249 at org.eclipse.ui.actions.RetargetAction.partActivated RetargetAction.java:144 at org.eclipse.ui.internal.PartListenerList$1.run PartListenerList.java:49 at org.eclipse.core.internal.runtime.InternalPlatform.run InternalPlatform.java:616 at org.eclipse.core.runtime.Platform.run Platform.java:747 at org.eclipse.ui.internal.PartListenerList.firePartActivated PartListenerList.java:47 at org.eclipse.ui.internal.WorkbenchPage.firePartActivated WorkbenchPage.java:1370 at org.eclipse.ui.internal.WorkbenchPage.setActivePart WorkbenchPage.java:2738 at org.eclipse.ui.internal.WorkbenchPage.requestActivation WorkbenchPage.java:2415 at org.eclipse.ui.internal.PartPane.requestActivation PartPane.java:304 at org.eclipse.ui.internal.EditorPane.requestActivation EditorPane.java:127 at org.eclipse.ui.internal.PartPane.handleEvent PartPane.java:284 at org.eclipse.swt.widgets.EventTable.sendEvent EventTable.java:82 at org.eclipse.swt.widgets.Widget.sendEvent Widget.java:796 at org.eclipse.swt.widgets.Widget.sendEvent Widget.java:820 at org.eclipse.swt.widgets.Widget.sendEvent Widget.java:801 at org.eclipse.swt.widgets.Shell.setActiveControl Shell.java:935 at org.eclipse.swt.widgets.Control.sendFocusEvent Control.java:1768 at org.eclipse.swt.widgets.Control.WM_SETFOCUS Control.java:4139 at org.eclipse.swt.widgets.Canvas.WM_SETFOCUS Canvas.java:239 at org.eclipse.swt.widgets.Control.windowProc Control.java:3032 at org.eclipse.swt.widgets.Display.windowProc Display.java:3338 at org.eclipse.swt.internal.win32.OS.SetFocus Native Method at org.eclipse.swt.widgets.Control.forceFocus Control.java:607 at org.eclipse.swt.widgets.Control.setFocus Control.java:2054 at org.eclipse.swt.widgets.Composite.setFocus Composite.java:447 at org.eclipse.gef.ui.parts.GraphicalEditor.setFocus GraphicalEditor.java:346 at org.eclipse.ui.part.MultiPageEditorPart.setFocus MultiPageEditorPart.java:545 at org.eclipse.ui.part.MultiPageEditorPart.setFocus MultiPageEditorPart.java:519 at org.eclipse.ui.part.MultiPageEditorPart.setFocus MultiPageEditorPart.java:545 at org.eclipse.ui.part.MultiPageEditorPart.setFocus MultiPageEditorPart.java:519 at org.eclipse.ui.part.MultiPageEditorPart.pageChange MultiPageEditorPart.java:433 at org.eclipse.birt.report.designer.ui.editors.ReportEditor.pageChange ReportEditor.java:1179 at org.eclipse.birt.report.designer.ui.editors.ReportEditor.rebuildReportDesign ReportEditor.java:584 at org.eclipse.birt.report.designer.ui.editors.ReportEditor.setInput ReportEditor.java:547 at org.eclipse.birt.report.designer.ui.editors.ReportEditor.performSaveAs ReportEditor.java:870 at org.eclipse.birt.report.designer.ui.editors.ReportEditor.doSaveAs ReportEditor.java:812 at org.eclipse.ui.internal.SaveAsAction.run SaveAsAction.java:64 at org.eclipse.jface.action.Action.runWithEvent Action.java:881 at org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection ActionContributionItem.java:915 at org.eclipse.jface.action.ActionContributionItem.access$2 ActionContributionItem.java:866 at org.eclipse.jface.action.ActionContributionItem$7.handleEvent ActionContributionItem.java:785 at org.eclipse.swt.widgets.EventTable.sendEvent EventTable.java:82 at org.eclipse.swt.widgets.Widget.sendEvent Widget.java:796 at org.eclipse.swt.widgets.Display.runDeferredEvents Display.java:2772 at org.eclipse.swt.widgets.Display.readAndDispatch Display.java:2431 at org.eclipse.ui.internal.Workbench.runEventLoop Workbench.java:1377 at org.eclipse.ui.internal.Workbench.runUI Workbench.java:1348 at org.eclipse.ui.internal.Workbench.createAndRunWorkbench Workbench.java:254 at org.eclipse.ui.PlatformUI.createAndRunWorkbench PlatformUI.java:141 at org.eclipse.ui.internal.ide.IDEApplication.run IDEApplication.java:96 at org.eclipse.core.internal.runtime.PlatformActivator$1.run PlatformActivator.java:335 at org.eclipse.core.runtime.adaptor.EclipseStarter.run EclipseStarter.java:273 at org.eclipse.core.runtime.adaptor.EclipseStarter.run EclipseStarter.java:129 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:324 at org.eclipse.core.launcher.Main.basicRun Main.java:185 at org.eclipse.core.launcher.Main.run Main.java:704 at org.eclipse.core.launcher.Main.main Main.java:688</description>
    <commit commitTime="2005-09-27 21:08:24" id="97520cf015afa87263c9497b4a60888ba2ada177"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/LocalVariableGen.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LocalVariableTag.java</file>
    </fixedFiles>
  </bug>
  <bug id="101411" reportTime="2005-06-23 03:47:00">
    <summary>SerialVersionUID handling</summary>
    <description>from emails - needs a decision --------------- Hi Andy is there a way for the weaver to add to weaved classes the serial ver uid field based on the pre-weaved bytecode computation. Right now it issues lint warning when a Serializable class without serial ver uid is encountered and due to evil #75442 this is very annoying for LTW. A first step would be to at least deal with that when we had the perObbjectTypeMunger then should not change any kind previous stuff . Alex ------------ Andy, Generating the suid sounds like a nice idea but the code the JVM used is private inside ObjectStreamClass. Also we need to take care with ITD fields to ensure correct behaviour when sending and receiving from non-woven classes. Basically the programmer needs to be engaged, it only affects serializable classes and in 1.5 there is a warning if you don't declare the field so there is a strong hint to the programmer to solve the problem. For LTW we should make an enhancement to allow the user to configure Lint and other things. For example they may or may not be interested in advice not matching. Matthew Webster ---------------------- Alex, We should make a distinction between benign changes to suid and those that affect members. Generating suid when we add a static initializer to support thisJoinPoint or the staticinitialization join point , accessor methods for privileged aspects or transient per-fields is OK. Doing for ITDs is more problematic. Matthew Webster</description>
    <commit commitTime="2006-03-09 17:24:19" id="6e6658a5e9e1665d18f3b4eb8d94609592b56228"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>weaver/src/org/aspectj/weaver/Lint.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/ClassGen.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java</file>
      <file>weaver/src/org/aspectj/weaver/World.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc151/AllTestsAspectJ151.java</file>
    </fixedFiles>
  </bug>
  <bug id="101606" reportTime="2005-06-24 05:17:00">
    <summary>AspectJ compiler does not process unused code compiler options properly for aspects</summary>
    <description>In Eclipse 3.0 click 'Window' &amp;gt; 'Preferences' &amp;gt; 'Java' &amp;gt; 'Compiler'. Select the 'Unused Code' tab on the compiler preference page. Change 'Unused or unread private members' to Warning or Error. Create a project that contains an aspect with some private pointcuts. You will see warnings or errors for these pointcuts saying that they are unused.</description>
    <commit commitTime="2005-09-02 14:44:26" id="2c88c598b950136bf54376eecbf58f14a19666c4"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="101983" reportTime="2005-06-28 04:30:00">
    <summary>Allow separate output folders for separate source folders</summary>
    <description>In Eclipse the JDT compiler enables different source folders in the same project to be built into separate output folders. The AJDT project has had several bugs raised requesting this feature for AspectJ projects. This requires some compiler changes to be able to implement.</description>
    <commit commitTime="2006-05-16 18:44:41" id="40c0d949493e14806799cb4975135998b707c9f2"/>
    <fixedFiles>
      <file>ajde/src/org/aspectj/ajde/ProjectPropertiesAdapter.java</file>
      <file>ajbrowser/src/org/aspectj/tools/ajbrowser/BrowserProperties.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/AjdeInteractionTestbed.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/NullIdeProperties.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java</file>
      <file>testing/src/org/aspectj/testing/ajde/CompileCommand.java</file>
    </fixedFiles>
  </bug>
  <bug id="102210" reportTime="2005-06-29 17:06:00">
    <summary>NullPointerException trying to compile</summary>
    <description>Hello, I am getting a NullPointerException when trying to compile my project. I am just using pointcuts with before and after advice. I have a pointcut which matches 6 methods in a class and when it's included in the aspect, I get this error ... and when I comment it out, everything compiles. It was working fine and then I restarted Eclipse and now I see this error. Thanks, Mark !ENTRY org.eclipse.ajdt.ui 4 0 Jun 29, 2005 16:42:43.516 !MESSAGE NullPointerException thrown: null !STACK 0 java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelWeaver.validateOrBranch BcelWeaver.java:584 at org.aspectj.weaver.bcel.BcelWeaver.validateBindings BcelWeaver.java:552 at org.aspectj.weaver.bcel.BcelWeaver.rewritePointcuts BcelWeaver.java:490 at org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave BcelWeaver.java:426 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:248 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:129 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:385 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:727 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:206 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:140 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:121 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191</description>
    <commit commitTime="2005-09-14 17:32:19" id="441f1cc722a196c3ea7b48276351531e52aaaaf6"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="102212" reportTime="2005-06-29 17:07:00">
    <summary>[itds] abstract synchronized: compile error expected</summary>
    <description>when using intertype declaration, the compiler doesn't check for illegal modifier combinations such as "abstract synchronized". another manifestation of this problem is when using intertype declaration to add a synchronized method to an interface. the problem is more severe in this case because conceptually, this method is not abstract at all. interface Interface {} abstract class Parent {} class Child extends Parent implements Interface {} aspect Bug { // illegal modifier combination not caught by ajc public abstract synchronized void Parent._abstract ; public synchronized void Child._abstract {} // the following has the same effect, but is easier to miss public /* implicit abstract */ synchronized void Interface._interface {} // use Child to make java complain: "illegal modifiers: 0x421" // this corresponds to "public abstract synchronized" public static void main String[] args { new Child ; } }</description>
    <commit commitTime="2005-09-02 14:38:11" id="b17ff4ed2d55ec24f1f1a6f3fe70ffd91ac18e62"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="102459" reportTime="2005-07-01 06:48:00">
    <summary>provide more detail in -showWeaveInfo messages</summary>
    <description>When advice is executed, the object you have to work with is the joinpoint. This can then be queried to get various information out of it. It would be nice, if as part of the weaving you could get hold of the same information. This is particularly useful in the case of writing a coverage tool. In order to measure where you've been, you have to know all the places you could possibly go. The introduction of the -showWeaveInfo option means that we can record these places, however, this would be greatly enhanced by providing similar information as to that which is collected as the program is running. The information which would be good is the same as that obtained from JoinPoint.StaticPart.getSignature .toLongString .</description>
    <commit commitTime="2005-09-01 18:40:31" id="c6bc7a2b2ee30b7647d3cb17fc323ebf96768fef"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/Shadow.java</file>
      <file>bridge/src/org/aspectj/bridge/WeaveMessage.java</file>
      <file>tests/java5/ataspectj/ataspectj/ltwlog/MainVerboseAndShow.java</file>
    </fixedFiles>
  </bug>
  <bug id="102479" reportTime="2005-07-01 09:30:00">
    <summary>unable to specify a custom IMessageHolder class with ajc</summary>
    <description>You can currently provide your own implementation of IMessageHolder and use it via iajc using messageHolderClass="myMessageHolderClass" and showWeaveInfo="true" , however, you can't do a similar thing when using ajc.</description>
    <commit commitTime="2005-09-01 17:09:49" id="d8442e7f2a1af534dddc827134d970e9812c881b"/>
    <fixedFiles>
      <file>ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java</file>
      <file>ajde/src/org/aspectj/ajde/Ajde.java</file>
    </fixedFiles>
  </bug>
  <bug id="102746" reportTime="2005-07-05 12:41:00">
    <summary>Ant Task Causing Compiler Error Redirection to -d</summary>
    <description>When I use the AspectJ ant task from CVS HEAD to compile my sources I get all compiler errors redirected to a file named "-d". The same build.xml file using 1.5.0M2 produces compiler error output to the console, as expected. Sample output using an old JDK that causes errors : ant compile ... compile: [iajc] 8 errors Here is the relevant ant task that exhibits this behavior. &amp;lt;iajc destdir="${prodoutput.dir}" incremental="false" source="1.3" target="1.3" xreweavable="true" sourceRootCopyFilter="**/*.java,**/CVS/**,**/*~,**/*#*,**/.#*,**/% *%,**/.cvsignore"&amp;gt; &amp;lt;src location="${src.dir}" /&amp;gt; &amp;lt;exclude name="**/CVS/*" /&amp;gt; &amp;lt;classpath refid="project.class.path" /&amp;gt; &amp;lt;/iajc&amp;gt;</description>
    <commit commitTime="2005-07-11 23:51:52" id="295abc046777ddf6aafc9dd198f49f364664242b"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java</file>
    </fixedFiles>
  </bug>
  <bug id="102933" reportTime="2005-07-06 16:20:00">
    <summary>problem with Object arrays and clone with 1.4 .class compatibility</summary>
    <description>environment - eclipse AspectJ project using jdk 1.42_0 - JDK 'generated .class compatibility' set to 1.4 under JDK-&amp;gt;compiler- &amp;gt;Compliance and class files . I did this because I wanted to use JDK 1.4 assertions. sample project includes one class: package com.test; public class Foo { public void test { Foo[] array = new Foo[0]; Foo[] arrayClone = Foo[] array.clone ; } } and one aspect: package com.test; aspect MyAspect { declare warning: call * * .. : "a call within foo"; } When I build this project, I get an error on the Foo java file telling me that it 'can't find com.test.Foo type' with no line numbers. When I change the JDK 'generated .class compatibility' set to 1.3 everything compiles fine..</description>
    <commit commitTime="2005-09-27 15:10:58" id="fb428d0e5ad8adabc14049f8a170b30d57044588"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="103051" reportTime="2005-07-07 14:03:00">
    <summary>Declare Soft not Affecting Explicit Adviceexecution</summary>
    <description>The following aspect should compile successfully: import java.io.IOException; public aspect SoftenAdvice { declare soft: IOException: within SoftenAdvice &amp;amp;&amp;amp; adviceexecution ; before : execution * main .. { throw new IOException "test" ; } public static void main String args[] { } } But both 1.5.0M2 and HEAD from 2 days ago give this output: C:\devel\scratch\err&amp;gt;ajc SoftenAdvice.aj C:\devel\scratch\err\SoftenAdvice.aj:7 [error] Unhandled exception type IOExcept ion throw new IOException "test" ; ^^^^^^^^^^^^^^^^^^^^ 1 error However if you change the declare soft to be the following, it correctly softens at the advice execution join point. declare soft: IOException: within SoftenAdvice &amp;amp;&amp;amp; !withincode * * .. ;</description>
    <commit commitTime="2005-11-22 09:28:09" id="554e73397c0b80ce32e56cf3adeb6921783e005d"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseShadow.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="103157" reportTime="2005-07-08 09:13:00">
    <summary>after returning should not bind "null" as return value</summary>
    <description>Today I found out the following. When writing an advice as... after returning Object o : staticinitialization * { System.out.println o ; } This advice is indeed executed every time a type returns from staticinitialization. However, since there is no returned object, o is bound to "null". I think this is inconsistent with the fact where we have something like: after returning T o : call Object Foo.bar { System.out.println o ; } Here, AFAIK the advice would not execute in cases where the returned object is not an instance of T. Thus, I would propose that the first advice should only execute at joinpoints where a return value is available.</description>
    <commit commitTime="2005-11-23 12:52:27" id="8b294d9e4f02625c4c3391612242969fb4b6be57"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>tests/new/OddConstructors.java</file>
      <file>weaver/src/org/aspectj/weaver/Shadow.java</file>
      <file>tests/new/ConstructorExecInit.java</file>
      <file>weaver/src/org/aspectj/weaver/Advice.java</file>
      <file>tests/new/AfterReturningParam.java</file>
    </fixedFiles>
  </bug>
  <bug id="103266" reportTime="2005-07-10 01:40:00">
    <summary>NPE on syntax error</summary>
    <description>This example program generates an NPE on CVS HEAD and M2. I will attach the ajcore file. public abstract aspect WorkerExample { after returning RequestContext newContext : call RequestContext+.new .. { System.out.println "constructing "+newContext+" at "+thisJoinPoint.toLongString +" from "+thisEnclosingJoinPointStaticPart+":" ; } public abstract class RequestContext { public final Object execute { return doExecute ; } /** template method */ public abstract Object doExecute ; } public static void main String args[] { new Runnable { public void run {} }.run ; }; } aspect ConcreteAlpha extends WorkerExample { Object around final Object runnable : execution void Runnable.run &amp;amp;&amp;amp; this runnable { System.out.println "monitoring operation: "+runnable+" at "+thisJoinPoint+", for "+thisJoinPoint.getThis ; RequestContext requestContext = new RequestContext { public Object doExecute { return proceed runnable ; } }; return requestContext.execute ; } } aspect ConcreteBeta extends WorkerExample { Object around : call void awqeyuwqer { RequestContext requestContext = new ConnectionRequestContext { public Object doExecute { return proceed ; } }; return requestContext.execute ; } }</description>
    <commit commitTime="2005-07-18 08:27:44" id="bba9c50768a1db72fc8606a80762333d4b12d140"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/MakeDeclsPublicVisitor.java</file>
    </fixedFiles>
  </bug>
  <bug id="103740" reportTime="2005-07-13 19:09:00">
    <summary>Compiler failure on @annotation</summary>
    <description>I'm using the ajc embedded in the latest dev build of AJDT build 20050713163417 This small example illustrates the problem: public abstract aspect AbstractRequestMonitor { public pointcut requestExecution RequestContext requestContext : execution * RequestContext.execute .. &amp;amp;&amp;amp; this requestContext ; public abstract class RequestContext { public abstract Object execute ; } after RequestContext requestContext throwing Throwable t : requestExecution requestContext { } } import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; @Retention RetentionPolicy.RUNTIME public @interface AroundAdvice { } public aspect ErrorHandling { declare soft: Exception: !@annotation AroundAdvice &amp;amp;&amp;amp; !withincode * * .. ; Object around : adviceexecution &amp;amp;&amp;amp; !@annotation AroundAdvice { try { return proceed ; } catch Exception e { return null; } } } Here's the stack trace I get: org.aspectj.weaver.BCException: bad at org.aspectj.weaver.bcel.BcelRenderer.visit BcelRenderer.java:228 at org.aspectj.weaver.ast.Literal.accept Literal.java:29 at org.aspectj.weaver.bcel.BcelRenderer.recur BcelRenderer.java:151 at org.aspectj.weaver.bcel.BcelRenderer.renderTest BcelRenderer.java:117 at org.aspectj.weaver.bcel.BcelAdvice.getTestInstructions BcelAdvice.java:445 at org.aspectj.weaver.bcel.BcelShadow.weaveAroundClosure BcelShadow.java:2585 at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:182 at org.aspectj.weaver.Shadow.implementMungers Shadow.java:480 at org.aspectj.weaver.Shadow.implement Shadow.java:358 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:1703 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:389 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:94 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1362 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1327 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1106 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:981 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:286 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:165 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspec tj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:368 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:727 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:206 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:140 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:121 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191</description>
    <commit commitTime="2005-09-12 13:37:56" id="2ae4f531c7f7c3c38c983c73492ef63b224784e3"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="103741" reportTime="2005-07-13 19:19:00">
    <summary>Problem turning off Java 5 Support with @annotation pointcut TypeX.java:821</summary>
    <description>I had a project that I was compiling using Java 5 source support. I turned off java 5 support but accidentally left in an @annotation pointcut in it. When recompiling, I get an error dialog BCException thrown: Bad type signature: &amp;lt;missing&amp;gt; When I restart I get this in my error log, and if I compile the same message. java.lang.ClassCastException: org.eclipse.core.internal.resources.Project at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.&amp;lt;init&amp;gt; AJCompilationUnit.java:118 at org.eclipse.ajdt.core.AspectJCore.create AspectJCore.java:137 at org.eclipse.ajdt.core.AspectJCore.create AspectJCore.java:38 at org.eclipse.ajdt.core.model.AJProjectModel$Persistence.loadJavaElements AJProjectModel.java:633 at org.eclipse.ajdt.core.model.AJProjectModel$Persistence.loadModel AJProjectModel.java:568 at org.eclipse.ajdt.core.model.AJProjectModel.loadModel AJProjectModel.java:136 at org.eclipse.ajdt.core.model.AJModel.getModelForProject AJModel.java:83 at org.eclipse.ajdt.core.model.AJModel.isAdvised AJModel.java:126 at org.eclipse.ajdt.internal.buildconfig.ImageDecorator.decorateImage ImageDecorator.java:207 at org.eclipse.ui.internal.decorators.FullDecoratorDefinition.decorateImage FullDecoratorDefinition.java:111 at org.eclipse.ui.internal.decorators.FullImageDecoratorRunnable.run FullImageDecoratorRunnable.java:28 at org.eclipse.core.internal.runtime.InternalPlatform.run InternalPlatform.java:1044 at org.eclipse.core.runtime.Platform.run Platform.java:783 at org.eclipse.ui.internal.decorators.DecoratorManager.safeDecorateImage DecoratorManager.java:395 at org.eclipse.ui.internal.decorators.DecoratorManager.decorateImage DecoratorManager.java:360 at org.eclipse.jface.viewers.DecoratingLabelProvider.getImage DecoratingLabelProvider.java:84 at org.eclipse.jface.viewers.DecoratingLabelProvider.updateLabel DecoratingLabelProvider.java:212 at org.eclipse.jface.viewers.StructuredViewer.buildLabel StructuredViewer.java:1855 at org.eclipse.jface.viewers.TreeViewer.doUpdateItem TreeViewer.java:228 at org.eclipse.jface.viewers.AbstractTreeViewer$UpdateItemSafeRunnable.run AbstractTreeViewer.java:85 at org.eclipse.core.internal.runtime.InternalPlatform.run InternalPlatform.java:1044 at org.eclipse.core.runtime.Platform.run Platform.java:783 at org.eclipse.ui.internal.JFaceUtil$1.run JFaceUtil.java:44 at org.eclipse.jface.util.SafeRunnable.run SafeRunnable.java:148 at org.eclipse.jface.viewers.AbstractTreeViewer.doUpdateItem AbstractTreeViewer.java:621 at org.eclipse.jface.viewers.StructuredViewer$UpdateItemSafeRunnable.run StructuredViewer.java:434 at org.eclipse.core.internal.runtime.InternalPlatform.run InternalPlatform.java:1044 at org.eclipse.core.runtime.Platform.run Platform.java:783 at org.eclipse.ui.internal.JFaceUtil$1.run JFaceUtil.java:44 at org.eclipse.jface.util.SafeRunnable.run SafeRunnable.java:148</description>
    <commit commitTime="2005-11-04 09:04:58" id="c4ce2448ee0ad553d6768a22e82bba7f437a93fa"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="104024" reportTime="2005-07-15 11:16:00">
    <summary>combining varargs and inner classes crashes the parser</summary>
    <description>class Outer { public class Inner {} } public class Bug { public void varargs Object... varargs {} public void test { Outer.Inner inner = new Outer .new Inner ; varargs inner ; // works varargs new Outer .new Inner ; // crashes } }</description>
    <commit commitTime="2005-08-31 14:15:45" id="f2af562611c7e060ebd71b9b29d6766ffcb9c727"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="104212" reportTime="2005-07-18 09:25:00">
    <summary>static method call from subclass signature is wrong</summary>
    <description>a very bad bug... or ? in the snip below, getMethod says null and the factory is actually thinking that test is a static method of AspectJBugMain instead of Assert... wondering why we don't catch that in the test suite or what could happen recently around that. Or is it something I am confused about ? i doubt a jp.getSignature .getMethod is supposed to return null in some cases though.. @Aspect public class Sam { @Pointcut "call * *.* .. " public void methodCalls { } @Around "methodCalls &amp;amp;&amp;amp; !within alex.sam.Sam &amp;amp;&amp;amp; within alex..* " public Object aroundMethodCalls ProceedingJoinPoint jp throws Throwable { String typeName = jp.getSignature .getDeclaringTypeName ; System.out.println "declType " + typeName ; System.out.println "method " + MethodSignature jp.getSignature .getMethod ; return jp.proceed ; } } class Assert { public static void test { System.out.println "RUN Assert.test" ; } } class AspectJBugMain extends Assert { public static void main String[] args { test ; } // public static void test { // System.out.println "RUN AspectJBugMain.test" ; // } }</description>
    <commit commitTime="2005-07-22 14:57:40" id="619a6adf4771e9b7a10776893583e8c5a96c0de3"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjSyntaxTests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="104220" reportTime="2005-07-18 10:14:00">
    <summary>adviceexecution toShort/long string</summary>
    <description>says: SAM2 : execution ADVICE: public java.lang.Object alex.sam.Sam2.Sam3.aroundMethodCalls org.aspectj.lang.ProceedingJoinPoint why not "adviceexecution method pattern "</description>
    <commit commitTime="2005-11-08 18:12:37" id="c439e326284d2ffdf4898a50a3d0d5f6a6e99ef1"/>
    <fixedFiles>
      <file>runtime/src/org/aspectj/runtime/reflect/StringMaker.java</file>
      <file>runtime/src/org/aspectj/runtime/reflect/AdviceSignatureImpl.java</file>
      <file>runtime/src/org/aspectj/lang/JoinPoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="104529" reportTime="2005-07-20 12:46:00">
    <summary>@SuppressWarnings "unchecked" is not ignoring type safety checks</summary>
    <description>AJDT is ignoring the @SuppressWarnings "unchecked" annotation. It is giving me a type safety warning when I don't specify the type when declaring a generic even though I have the @SuppressWarnings "unchecked" annotation specified.</description>
    <commit commitTime="2005-08-19 19:18:31" id="7b325703558284f5dbf21c5e94b1ffc76e4e382c"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="104720" reportTime="2005-07-21 15:16:00">
    <summary>VerifyError after weaving around trivial switch statement</summary>
    <description>After compiling the attached source file and class file with ajc -inpath . -outjar t.jar Tracer.aj on any of 1.2.1, 1.5.0M2 or the June 2005 snapshot and then attempting to run it with gij -classpath ./t.jar:$CLASSPATH Test the following error is obtained: Exception in thread "main" java.lang.VerifyError: verification failed at PC 1 in Test:newTest_aroundBody2 I LTest; : branch out of range at java.lang.VMClassLoader.resolveClass java.lang.Class /usr/lib/libgcj.so.6.0.0 at java.lang.Class.initializeClass /usr/lib/libgcj.so.6.0.0 at java.lang.Class.forName java.lang.String, boolean, java.lang.ClassLoader /usr/lib/libgcj.so.6.0.0 at gnu.java.lang.MainThread.run /usr/lib/libgcj.so.6.0.0 An excerpt from the output of javap -private -classpath t.jar -c Test shows that the generated switch is indeed bogus: private static final Test newTest_aroundBody2 int ; Code: 0: iload_0 1: tableswitch{ //0 to 0 0: -1157627302; default: 16 } 20: invokespecial #3; //Method "&amp;lt;init&amp;gt;": V 23: areturn</description>
    <commit commitTime="2005-08-25 11:35:49" id="bf767a9d6e6501df9e973e381546b1c66f41a757"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/SWITCH.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/TABLESWITCH.java</file>
    </fixedFiles>
  </bug>
  <bug id="104957" reportTime="2005-07-24 20:01:00">
    <summary>NullPointerException when running ajc on gij</summary>
    <description>When running ajc 1.2.1 on the GNU Interpreter for Java 4.0.1, I received this error: java.lang.NullPointerException at org.aspectj.apache.bcel.generic.InstructionComparator$1.equals org.aspectj.apache.bcel.generic.Instruction, org.aspectj.apache.bcel.g eneric.Instruction /tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so at org.aspectj.apache.bcel.generic.Instruction.equals java.lang.Object /tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so at java.util.AbstractMap.equals java.lang.Object, java.lang.Object /usr/lib/libgcj.so.6.0.0 at java.util.HashMap.put java.lang.Object, java.lang.Object /usr/lib/libgcj.so.6.0.0 at java.util.HashSet.add java.lang.Object /usr/lib/libgcj.so.6.0.0 at org.aspectj.apache.bcel.generic.InstructionHandle.addTargeter org.aspectj.apache.bcel.generic.InstructionTargeter /tmp/cache/local/ aspectj1.2/lib/aspectjweaver.jar.so at org.aspectj.apache.bcel.generic.BranchInstruction.notifyTarget org.aspectj.apache.bcel.generic.InstructionHandle, org.aspectj.apache. bcel.generic.InstructionHandle, org.aspectj.apache.bcel.generic.InstructionTargeter /tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so at org.aspectj.apache.bcel.generic.BranchInstruction.setTarget org.aspectj.apache.bcel.generic.InstructionHandle /tmp/cache/local/aspe ctj1.2/lib/aspectjweaver.jar.so at org.aspectj.apache.bcel.generic.BranchInstruction.BranchInstruction short, org.aspectj.apache.bcel.generic.InstructionHandle /tmp/c ache/local/aspectj1.2/lib/aspectjweaver.jar.so at org.aspectj.apache.bcel.generic.Select.Select short, int[], org.aspectj.apache.bcel.generic.InstructionHandle[], org.aspectj.apache.b cel.generic.InstructionHandle /tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so at org.aspectj.apache.bcel.generic.LOOKUPSWITCH.LOOKUPSWITCH int[], org.aspectj.apache.bcel.generic.InstructionHandle[], org.aspectj.apa che.bcel.generic.InstructionHandle /tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so at org.aspectj.apache.bcel.generic.SWITCH.SWITCH int[], org.aspectj.apache.bcel.generic.InstructionHandle[], org.aspectj.apache.bcel.gen eric.InstructionHandle, int /tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so at org.aspectj.apache.bcel.generic.SWITCH.SWITCH int[], org.aspectj.apache.bcel.generic.InstructionHandle[], org.aspectj.apache.bcel.gen eric.InstructionHandle /tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so at org.aspectj.weaver.bcel.Utility.copyInstruction org.aspectj.apache.bcel.generic.Instruction /tmp/cache/local/aspectj1.2/lib/aspectj weaver.jar.so at org.aspectj.weaver.bcel.LazyMethodGen.packBody org.aspectj.apache.bcel.generic.MethodGen /tmp/cache/local/aspectj1.2/lib/aspectjwea ver.jar.so at org.aspectj.weaver.bcel.LazyMethodGen.pack /tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so at org.aspectj.weaver.bcel.LazyMethodGen.getMethod /tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so at org.aspectj.weaver.bcel.LazyClassGen.writeBack org.aspectj.weaver.bcel.BcelWorld /tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar. so at org.aspectj.weaver.bcel.LazyClassGen.getJavaClass org.aspectj.weaver.bcel.BcelWorld /tmp/cache/local/aspectj1.2/lib/aspectjweaver.j ar.so at org.aspectj.weaver.bcel.BcelWeaver.getClassFilesFor org.aspectj.weaver.bcel.LazyClassGen /tmp/cache/local/aspectj1.2/lib/aspectjwea ver.jar.so at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify org.aspectj.weaver.bcel.UnwovenClassFile, org.aspectj.weaver.bcel.BcelObjectType, o rg.aspectj.weaver.IWeaveRequestor /tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so at org.aspectj.weaver.bcel.BcelWeaver.weave org.aspectj.weaver.IClassFileProvider /tmp/cache/local/aspectj1.2/lib/aspectjweaver.jar.so at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave Unknown Source at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling Unknown Source at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile org.aspectj.org.eclipse.jdt.internal.compiler.env.ICompilationUnit[] Unknown Source at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation java.util.List Unknown Source at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild org.aspectj.ajdt.internal.core.builder.AjBuildConfig, org.aspectj.bridg e.IMessageHandler, boolean Unknown Source at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild org.aspectj.ajdt.internal.core.builder.AjBuildConfig, org.aspectj.br idge.IMessageHandler Unknown Source at org.aspectj.ajdt.ajc.AjdtCommand.doCommand org.aspectj.bridge.IMessageHandler, boolean Unknown Source at org.aspectj.ajdt.ajc.AjdtCommand.runCommand java.lang.String[], org.aspectj.bridge.IMessageHandler Unknown Source at org.aspectj.tools.ajc.Main.run java.lang.String[], org.aspectj.bridge.IMessageHolder Unknown Source at org.aspectj.tools.ajc.Main.runMain java.lang.String[], boolean Unknown Source at org.aspectj.tools.ajc.Main.main java.lang.String[] Unknown Source at gnu.java.lang.MainThread.call_main /usr/lib/libgcj.so.6.0.0 at gnu.java.lang.MainThread.run /usr/lib/libgcj.so.6.0.0 Unfortunately, the above stack trace contains no line number information; however, by running the program under the gdb debugger, I was able to get a backtrace with line numbers for the relevant part of the stack trace: gdb bt #0 0x011a0246 in org.aspectj.apache.bcel.generic.InstructionComparator$1.equals org.aspectj.apache.bcel.generic.Instruction, org.aspectj.apache.bcel.generic.Instruction this=@5c71ea8, i1=@610fe70, i2=@610fc60 at org/aspectj/apache/bcel/generic/InstructionComparator.java:79 #1 0x011a004e in org.aspectj.apache.bcel.generic.Instruction.equals java.lang.Object this=@610fe70, that=@610fc60 at org/aspectj/apache/bcel/generic/Instruction.java:499 #2 0x031b5f9b in java.util.AbstractMap.equals java.lang.Object, java.lang.Object o1=@610fe70, o2=@610fc60 at ../../../libjava/java/util/AbstractMap.java:603 #3 0x031cc0ae in java.util.HashMap.put java.lang.Object, java.lang.Object this=@6483690, key=@610fe70, value=@2dfc0 at ../../../libjava/java/util/HashMap.java:349 #4 0x031cca00 in java.util.HashSet.add java.lang.Object this=null, o=@610fe70 at ../../../libjava/java/util/HashSet.java:151 #5 0x011b30ad in org.aspectj.apache.bcel.generic.InstructionHandle.addTargeter org.aspectj.apache.bcel.generic.InstructionTargeter this=@6949d20, t=@610fe70 at org/aspectj/apache/bcel/generic/InstructionHandle.java:208 #6 0x011861e6 in org.aspectj.apache.bcel.generic.BranchInstruction.notifyTarget org.aspectj.apache.bcel.generic.InstructionHandle, org.aspectj.apache.bcel.generic.InstructionHandle, org.aspectj.apache.bcel.generic.InstructionTargeter old_ih=null, new_ih=@6949d20, t=@610fe70 at org/aspectj/apache/bcel/generic/BranchInstruction.java:217 #7 0x01186133 in org.aspectj.apache.bcel.generic.BranchInstruction.setTarget org.aspectj.apache.bcel.generic.InstructionHandle this=@610fe70, target=@6949d20 at org/aspectj/apache/bcel/generic/BranchInstruction.java:205 #8 0x011857ef in org.aspectj.apache.bcel.generic.BranchInstruction.BranchInstruction short, org.aspectj.apache.bcel.generic.InstructionHandle this=@610fe70, opcode=171, target=@6949d20 at org/aspectj/apache/bcel/generic/BranchInstruction.java:86 #9 0x011d3489 in org.aspectj.apache.bcel.generic.Select.Select short, int[], org.aspectj.apache.bcel.generic.InstructionHandle[], org.aspectj.apache.bcel.generic.InstructionHandle this=@610fe70, opcode=171, match=@6f63b90, targets=@6eeabe0, target=@6949d20 at org/aspectj/apache/bcel/generic/Select.java:106 #10 0x011c3152 in org.aspectj.apache.bcel.generic.LOOKUPSWITCH.LOOKUPSWITCH int[], org.aspectj.apache.bcel.generic.InstructionHandle[], org.aspectj.apache.bcel.generic.InstructionHandle this=@610fe70, match=@6f63b90, targets=@6eeabe0, target=@6949d20 at org/aspectj/apache/bcel/generic/LOOKUPSWITCH.java:80 #11 0x011d4f94 in org.aspectj.apache.bcel.generic.SWITCH.SWITCH int[], org.aspectj.apache.bcel.generic.InstructionHandle[], org.aspectj.apache.bcel.generic.InstructionHandle, int this=@6a20978, match=@5b1ccd0, targets=@6eeac08, target=@6949d20, max_gap=1 at org/aspectj/apache/bcel/generic/SWITCH.java:104 #12 0x011d5002 in org.aspectj.apache.bcel.generic.SWITCH.SWITCH int[], org.aspectj.apache.bcel.generic.InstructionHandle[], org.aspectj.apache.bcel.generic.InstructionHandle this=@6a20978, match=@5b1ccd0, targets=@6eeac08, target=@6949d20 at org/aspectj/apache/bcel/generic/SWITCH.java:109 #13 0x01332eb6 in org.aspectj.weaver.bcel.Utility.copyInstruction org.aspectj.apache.bcel.generic.Instruction i=@610fc60 at org/aspectj/weaver/bcel/Utility.java:474 #14 0x01326f66 in org.aspectj.weaver.bcel.LazyMethodGen.packBody org.aspectj.apache.bcel.generic.MethodGen this=@6d98000, gen=@6d983c0 at org/aspectj/weaver/bcel/LazyMethodGen.java:813 #15 0x01326d08 in org.aspectj.weaver.bcel.LazyMethodGen.pack this=@6d98000 at org/aspectj/weaver/bcel/LazyMethodGen.java:790 #16 0x01324c81 in org.aspectj.weaver.bcel.LazyMethodGen.getMethod this=@6d98000 at org/aspectj/weaver/bcel/LazyMethodGen.java:336 #17 0x0131b502 in org.aspectj.weaver.bcel.LazyClassGen.writeBack org.aspectj.weaver.bcel.BcelWorld this=@610ff00, world=@5642d20 at org/aspectj/weaver/bcel/LazyClassGen.java:418 #18 0x0131b95e in org.aspectj.weaver.bcel.LazyClassGen.getJavaClass org.aspectj.weaver.bcel.BcelWorld this=@610ff00, world=@5642d20 at org/aspectj/weaver/bcel/LazyClassGen.java:446 #19 0x01311589 in org.aspectj.weaver.bcel.BcelWeaver.getClassFilesFor org.aspectj.weaver.bcel.LazyClassGen this=@a33c0, clazz=@610ff00 &amp;lt;snip&amp;gt; It might be difficult for me to provide a reproducable test case it might depend on the gij version, but I can try if wanted . However, happily, having examined the bytecode of the BCEL classes from the first few lines of the stack trace, I think I can explain why this exception occurs without needing to provide a test case. It's very simple. Whoever wrote the BCEL code in question, obviously never ran it with a data set and on a virtual machine where a hash collision in the HashSet would occur. Because, with this BCEL snapshot, if a hash collision does occur, the object being added to the HashSet is *guaranteed* to cause a NullPointerException in the Comparator method. This can be seen merely by examining the code path described by this stack trace. The field "targets" in the LOOKUPSWITCH object has not been initialized when notifyTarget is called, so if there is a hash collision in the HashSet, the InstructionComparator will be called - and it is guaranteed to call getTargets and access its array length, which will cause a NullPointerException. I hope this explanation is sufficiently clear. If not, I will be happy to provide further details.</description>
    <commit commitTime="2005-09-21 16:28:36" id="0e1bb192d429beba6a2a8f9b2ab8218f85673405"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/InstructionComparator.java</file>
    </fixedFiles>
  </bug>
  <bug id="105181" reportTime="2005-07-26 12:28:00">
    <summary>[generics][itds] VerifyError unless the returned type is obvious</summary>
    <description>A generic method such as new Vector&amp;lt;Foo&amp;gt; .get 0 returns an instance of type Foo, but whose injected fields and methods cannot be accessed properly. Casting or assigning this object into a genuine Foo variable solves the issue, thanks to bug 99228 . the following example fails at runtime with a VerifyError instead of the expected NullPointerException: class Foo {} aspect Injector { Foo Foo.field; } public class Bug { static void sink Foo foo {} public static void main String[] args throws Exception { java.util.Vector&amp;lt;Foo&amp;gt; source = null; Foo foo = source.get 0 ; /* works */ /* works */ sink Foo source.get 0 .field ; /* VerifyError at runtime */ sink source.get 0 .field ; } } note that the test case only exercise the problem for fields, but the problem also exists for methods.</description>
    <commit commitTime="2005-09-11 20:13:03" id="64d74013c685a815cbe3565f71747103177daf20"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="105479" reportTime="2005-07-28 12:55:00">
    <summary>[jdt-compiler]error with covariant return types</summary>
    <description>The aspect below won't compile 'The return type is incompatible' using the latest from CVS as of 27-7-05 public aspect ReturnTypeTest { private interface Test { Object getId ; } class StringTest { public String getId { return null; } } declare parents : StringTest implements Test; } from Andy Clement: note that this pure Java version of the program doesn't compile with ajc but compiles with javac: public class ReturnTypeTest { private interface Test { Object getId ; } class StringTest implements Test { public String getId { return null; } } } which tells us it is probably occurring because we haven't upgraded to the final version of the 3.1 eclipse JDT compiler.</description>
    <commit commitTime="2005-08-31 14:11:45" id="a0ab747e10653a76abf8ddf839fa6b830e65acb1"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="106130" reportTime="2005-08-05 00:39:00">
    <summary>applying around advice on a method it rewrites the method wrongly</summary>
    <description>Hi, When applying around advice on a method it rewrites the method wrongly. This happens only when I try to apply aspects to bytecode as against source code. Without Aspects --------------- int i; for ; rs.next ; transactionList.add new Transaction rs.getString i++ , rs.getFloat i++ , rs.getString i++ , rs.getString i++ , rs.getString i++ , rs.getString i++ , rs.getString i++ , rs.getString i++ , rs.getString i++ , rs.getString i++ , rs.getFloat i++ , rs.getDate i++ , rs.getString i++ , rs.getString i++ , rs.getString i++ i = 1; With Aspects ------------ for ; resultset.next ; arraylist.add new Transaction resultset.getString j , resultset.getFloat j , resultset.getString j , resultset.getString j , resultset.getString j , resultset.getString j , resultset.getString j , resultset.getString j , resultset.getString j , resultset.getString j , resultset.getFloat j , resultset.getDate j , resultset.getString j , resultset.getString j , resultset.getString j { int j = 1; i++; i++; i++; i++; i++; i++; i++; i++; i++; i++; i++; i++; i++; i++; i++; } Obviously since j is never incremented our program fails with returning an invalid value for getFloat call. The actual size of this method is around 220 lines. I’ve reduced the size of this method to around 175 odd lines. Then I’m not facing this problem.It works fine giving me the following result preparedstatement = PreparedStatement definePreparedStatement_aroundBody21 $advice transactiondao, dbconnectionwrapper9, s20, preparedstatement.setString 1, s ; int i; for resultset = preparedstatement.executeQuery ; resultset.next ; arraylist.add new Transaction resultset.getString i++ , i = 1; i++ , resultset.getString i++ , resultset.getString i++ , resultset.getString i++ , resultset.getFloat i++ , resultset.getDate i++ , resultset.getString i++ Is it something to do with the size of the method?? Any ideas why this would be happening and how to solve it?</description>
    <commit commitTime="2005-08-12 15:58:50" id="086be61547cb398cd65b5257841cc9e0268d931c"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/IINC.java</file>
    </fixedFiles>
  </bug>
  <bug id="106461" reportTime="2005-08-09 08:46:00">
    <summary>org.aspectj.weaver.patterns.WildTypePattern.maybeGetCleanName WildTypePattern.java:500</summary>
    <description>I want to declare a pointcut to capture invocation of methods on annotated interfaces being subtypes of a given interface. here is the full ajcore report: http://veleno.pastebin.com/332842 i will attach a test case.</description>
    <commit commitTime="2005-08-10 11:49:34" id="5735e966959da60fcacebb23e8b5463c4138020c"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PatternParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="106500" reportTime="2005-08-09 11:40:00">
    <summary>Support nexted exceptions in weaver/compiler</summary>
    <description>There are a number of places in the weaver where we catch exceptions e.g. IOException and rethrow an application-specific exceptions e.g. BCException. Unfortunately because we need to continue to support JDK 1.3 we cannot nest the exceptions and so the stack trace is lost. We should define a root exception for the weaver and add a constructor to allow nesting: we can use RemoteException as a model.</description>
    <commit commitTime="2005-09-26 15:05:01" id="d485f9bcc4df37aef60863fceb88654bbd32b680"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ThisJoinPointVisitor.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeDeclaration.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/ClassPathManager.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Options.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AdviceDeclaration.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AspectJBuilder.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>bridge/testsrc/BridgeModuleTests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java</file>
      <file>weaver/src/org/aspectj/weaver/BCException.java</file>
      <file>weaver/src/org/aspectj/weaver/World.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="106554" reportTime="2005-08-09 16:25:00">
    <summary>Problem in staticinitialization with pertypewithin aspect</summary>
    <description>Here is a small test case that illustrates the problem I'm seeing with the AspectJ in CVS HEAD it also affects 1.5.0 M2 : The program should output 1 but it outputs null instead. public aspect AspectStatic { public interface Iface { } private static Class[] managedInterfaces = { Iface.class }; private static Object assembler = initAssembler ; private static Object initAssembler { return new Integer 1 ; } public static void main String args[] { System.out.println "test = "+assembler ; } } aspect StopsInit pertypewithin AspectStatic { before : staticinitialization * { } }</description>
    <commit commitTime="2005-09-13 14:24:48" id="a058bd9ae17ca3570ca53ff7d0feaaa2daf1102a"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/PerTypeWithin.java</file>
    </fixedFiles>
  </bug>
  <bug id="106634" reportTime="2005-08-10 11:04:00">
    <summary>regression: argument causes BcelGenericSignatureToTypeXConverter.java:203</summary>
    <description>the following reported a compile error using AspectJ Compiler DEVELOPMENT built on Monday Jun 20, 2005 at 08:14:57 GMT but now crashes using AspectJ Compiler DEVELOPMENT built on Wednesday Aug 10, 2005 at 13:12:53 GMT import java.util.Vector; // works if java.util.* is used public class Bug extends Vector { // works if Vector is not extended void test DoesNotExist argument {} // works without the argument } also, the bug only appears if the -1.5 flag is used.</description>
    <commit commitTime="2005-08-11 10:38:15" id="477c5751e6894c988cddb27fe82cd076c387940d"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="106736" reportTime="2005-08-11 08:40:00">
    <summary>AdaptorWeaver unneccesarily restricts aspect classes to be in .jar files</summary>
    <description>The org.aspectj.weaver.tools.WeavingAdaptor unneccessarily restricts aspect .class files to be in .jar files. See the WeavingAdaptor.addAspectLibrary method.... private void addAspectLibrary String aspectLibraryName { File aspectLibrary = new File aspectLibraryName ; if aspectLibrary.isFile &amp;amp;&amp;amp; aspectLibraryName.endsWith ".jar" { try { info "adding aspect library: '" + aspectLibrary + "'" ; weaver.addLibraryJarFile aspectLibrary ; } catch IOException ex { error "exception adding aspect library: '" + ex + "'" ; } } else { error "bad aspect library: '" + aspectLibrary + "'" ; } } ----------------------------------- However, there is no reason to do this since the BcelWeaver class will accept directory URLs. In the BcelWeaver.addLibraryJarFile which is a very badly named method the given File is checked to see if it is a .jar file or a directory. Therefore there is no need for AspectWeaver to resist aspect URLs to .jar files and I would prefer that it did not since at development time I must load aspects from a directory . See the BcelWeaver.addLibraryJarFile method.... public void addLibraryJarFile File inFile throws IOException { List addedAspects = null; if inFile.isDirectory { addedAspects = addAspectsFromDirectory inFile ; } else { addedAspects = addAspectsFromJarFile inFile ; } for Iterator i = addedAspects.iterator ; i.hasNext ; { ResolvedType aspectX = ResolvedType i.next ; xcutSet.addOrReplaceAspect aspectX ; } }</description>
    <commit commitTime="2005-08-18 07:25:08" id="73748ff36ec8767fc6bb07e2aca5c6fdc1310bea"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="107299" reportTime="2005-08-18 01:41:00">
    <summary>-aspectpath -inpath arguments fail without drive letter</summary>
    <description>ajc doesn't recognize Windows absolute file paths that don't start with a drive letter, e.g., run: ajc -inpath \test.jar [error] build config error: bad inpath component: \test.jar but ajc -inpath c:\test.jar works ajc -aspectpath \test.jar Test.aj [error] build config error: bad aspectpath: \test.jar ajc -aspectpath c:\test.jar Test.aj works</description>
    <commit commitTime="2005-10-15 03:20:41" id="332a5df39711d17d13ef2c87fdaba023d4869538"/>
    <fixedFiles>
      <file>util/src/org/aspectj/util/ConfigParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="107486" reportTime="2005-08-19 17:44:00">
    <summary>Anonymous inner class results in "can't find type $Local$"</summary>
    <description>the following class results in "can't find type $Local$" in the problem view, with the latest 1.3.0.20050819153037 for Eclipse 3.1 build. public class A { public Object f { return new Object { public String toString { return "f"; } }; } } I created an AspectJ project with only this class in it. It only causes that problem if the project is an AspectJ project, not in a Java project. The problem sometimes disappears when editing the file, in that case cleaning the project makes it come back. For example, one way to make it disappear is to remove the toString method, save error disappear , put the method back still no error , clean the project error is back .</description>
    <commit commitTime="2005-08-23 08:48:47" id="0f0c63e0b25968d4bd74bfb0d9d34f7ff9e642c6"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/HasMember.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/AllTestsAspectJ150.java</file>
    </fixedFiles>
  </bug>
  <bug id="107713" reportTime="2005-08-23 06:56:00">
    <summary>ClassCastException popup</summary>
    <description>Whenever I change any file and save auto-compile I get this in a popup. ClassCastException thrown: org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType cannot be cast to org.aspectj.weaver.bcel.BcelObjectType This started happening when I wrote these aspects. Before this started happening the IDE showed this line as an error. b.support.firePropertyChange property, oldval == null ? oldval : new String oldval , new String newval ; ---------------------------------------------------------------- /** * */ package com.blueprint.util.mixin.test; import java.beans.PropertyChangeListener; import java.beans.PropertyChangeSupport; import java.lang.reflect.Field; import com.blueprint.util.mixin.test.*; import org.aspectj.lang.Signature; public aspect PropertySupportAspect { PropertyChangeSupport PropertySupport.support = new PropertyChangeSupport this ; public interface PropertySupport{ public void addPropertyChangeListener PropertyChangeListener listener ; public void addPropertyChangeListener String propertyName, PropertyChangeListener listener ; public void removePropertyChangeListener String propertyName, PropertyChangeListener listener ; public void removePropertyChangeListener PropertyChangeListener listener ; public void hasListeners String propertyName ; } public void PropertySupport.addPropertyChangeListener PropertyChangeListener listener { support.addPropertyChangeListener listener ; } public void PropertySupport.addPropertyChangeListener String propertyName, PropertyChangeListener listener { support.addPropertyChangeListener propertyName, listener ; } public void PropertySupport.removePropertyChangeListener String propertyName, PropertyChangeListener listener { support.removePropertyChangeListener propertyName, listener ; } public void PropertySupport.removePropertyChangeListener PropertyChangeListener listener { support.removePropertyChangeListener listener ; } public void PropertySupport.hasListeners String propertyName { support.hasListeners propertyName ; } pointcut callSetter Bean b : call public void com.blueprint.util.test.Bean.setName String &amp;amp;&amp;amp; target b ; void around Bean b : callSetter b { String propertyName = getField thisJoinPointStaticPart.getSignature . getName ; System.out.println "The property is [" + propertyName + "]" ; String oldValue = b.getName ; proceed b ; firePropertyChange b, propertyName, oldValue, b.getName ; } private Field getField Signature signature { Field field = null; System.out.println "Getting the field name of [" +signature.getName + "]" ; try{ String methodName = signature.getName ; field = signature.getDeclaringType . getDeclaredField methodName. substring 3, methodName.length . toLowerCase ; field.setAccessible true ; }catch NoSuchFieldException nsfe { nsfe.printStackTrace ; } return field; } void firePropertyChange Bean b, String property, String oldval, String newval { System.out.println "The property is [" + property + "]" ; System.out.println "The old value is [" + oldval + "]" ; System.out.println "The new value is [" + newval + "]" ; b.support.firePropertyChange property, oldval == null ? oldval : new String oldval , new String newval ; } } ---------------------------------------------------------------- import java.io.Serializable; public class Bean implements Serializable{ private String name; public String getName { return name; } public void setName String name { this.name = name; } } ---------------------------------------------------------------- public aspect BeanSupport { declare parents: Bean implements PropertySupportAspect.PropertySupport; } ----------------------------------------------------------------</description>
    <commit commitTime="2005-08-26 09:09:35" id="100d9e056735e85610fe9072527a0369dc867ec5"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="107741" reportTime="2005-08-23 11:46:00">
    <summary>Update WeavingURLClassLoader</summary>
    <description>The WeavingURlClassLoader needs to be updated to work with the most recent version of ApsectJ so that it can be used by AJDT to provide IDE support for load time weaving.</description>
    <commit commitTime="2005-10-14 07:23:40" id="8982544f13eb5cb082ca19db2bd2c5f77b1e5965"/>
    <fixedFiles>
      <file>loadtime/testsrc/LoadtimeModuleTests.java</file>
      <file>testing/newsrc/org/aspectj/testing/RunSpec.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/AllTestsAspectJ150.java</file>
      <file>testing/src/org/aspectj/testing/harness/bridge/JavaRun.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/tools/ajc/AjcTestCase.java</file>
      <file>testing/newsrc/org/aspectj/testing/XMLBasedAjcTestCase.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/BcweaverTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="107784" reportTime="2005-08-23 16:08:00">
    <summary>java.lang.IllegalStateException: Expection [,L, or T, but found /</summary>
    <description>[iajc] Expection [,L, or T, but found / [iajc] Expection [,L, or T, but found / [iajc] java.lang.IllegalStateException: Expection [,L, or T, but found / [iajc] at org.aspectj.apache.bcel.classfile.GenericSignatureParser.parseFieldTypeSignature GenericSignatureParser.java:159 [iajc] at org.aspectj.apache.bcel.classfile.GenericSignatureParser.parseTypeArgument GenericSignatureParser.java:249 [iajc] at org.aspectj.apache.bcel.classfile.GenericSignatureParser.maybeParseTypeArguments GenericSignatureParser.java:257 [iajc] at org.aspectj.apache.bcel.classfile.GenericSignatureParser.parseClassTypeSignature GenericSignatureParser.java:204 [iajc] at org.aspectj.apache.bcel.classfile.GenericSignatureParser.parseAsClassSignature GenericSignatureParser.java:57 [iajc] at org.aspectj.apache.bcel.classfile.Signature.asClassSignature Signature.java:315 [iajc] at org.aspectj.apache.bcel.classfile.JavaClass.getGenericClassTypeSignature JavaClass.java:914 [iajc] at org.aspectj.weaver.bcel.BcelObjectType.getGenericClassTypeSignature BcelObjectType.java:500 [iajc] at org.aspectj.weaver.bcel.BcelObjectType.unpackGenericSignature BcelObjectType.java:508 [iajc] at org.aspectj.weaver.bcel.BcelObjectType.getSuperclass BcelObjectType.java:158 [iajc] at org.aspectj.weaver.ReferenceType.getSuperclass ReferenceType.java:444 [iajc] at org.aspectj.weaver.bcel.BcelWeaver.weaveParentsFor BcelWeaver.java:1047 [iajc] at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:969 [iajc] at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:286 [iajc] at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:165 [iajc] at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspect j_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:729 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:207 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:141 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 [iajc] at org.aspectj.tools.ajc.Main.run Main.java:324 [iajc] at org.aspectj.tools.ajc.Main.runMain Main.java:238 [iajc] at org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM AjcTask.java:1194 [iajc] at org.aspectj.tools.ant.taskdefs.AjcTask.execute AjcTask.java:985 [iajc] at org.apache.tools.ant.UnknownElement.execute UnknownElement.java:275 [iajc] at org.apache.tools.ant.Task.perform Task.java:364 [iajc] at org.apache.tools.ant.Target.execute Target.java:341 [iajc] at org.apache.tools.ant.Target.performTasks Target.java:369 [iajc] at org.apache.tools.ant.Project.executeTarget Project.java:1214 [iajc] at org.apache.tools.ant.Project.executeTargets Project.java:1062 [iajc] at org.eclipse.ant.internal.core.ant.InternalAntRunner.run InternalAntRunner.java:685 [iajc] at org.eclipse.ant.internal.core.ant.InternalAntRunner.run InternalAntRunner.java:444 [iajc] at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method [iajc] at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 [iajc] at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 [iajc] at java.lang.reflect.Method.invoke Method.java:585 [iajc] at org.eclipse.ant.core.AntRunner.run AntRunner.java:355 [iajc] at org.eclipse.ant.internal.ui.launchConfigurations.AntLaunchDelegate.runInSameVM AntLaunchDelegate.java:229 [iajc] at org.eclipse.ant.internal.ui.launchConfigurations.AntLaunchDelegate.launch AntLaunchDelegate.java:192 [iajc] at org.eclipse.debug.internal.core.LaunchConfiguration.launch LaunchConfiguration.java:590 [iajc] at org.eclipse.debug.internal.core.LaunchConfiguration.launch LaunchConfiguration.java:515 [iajc] at org.eclipse.debug.internal.core.LaunchConfiguration.launch LaunchConfiguration.java:152 [iajc] at org.eclipse.ui.externaltools.internal.model.ExternalToolBuilder.launchBuild ExternalToolBuilder.java:176 [iajc] at org.eclipse.ui.externaltools.internal.model.ExternalToolBuilder.doBuildBasedOnSc ope ExternalToolBuilder.java:164 [iajc] at org.eclipse.ui.externaltools.internal.model.ExternalToolBuilder.build ExternalToolBuilder.java:83 [iajc] at org.eclipse.core.internal.events.BuildManager$2.run BuildManager.java:581 [iajc] at org.eclipse.core.internal.runtime.InternalPlatform.run InternalPlatform.java:1021 [iajc] at org.eclipse.core.runtime.Platform.run Platform.java:757 [iajc] at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:160 [iajc] at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:198 [iajc] at org.eclipse.core.internal.events.BuildManager$1.run BuildManager.java:227 [iajc] at org.eclipse.core.internal.runtime.InternalPlatform.run InternalPlatform.java:1021 [iajc] at org.eclipse.core.runtime.Platform.run Platform.java:757 [iajc] at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:230 [iajc] at org.eclipse.core.internal.events.BuildManager.build BuildManager.java:299 [iajc] at org.eclipse.core.internal.resources.Project.build Project.java:106 [iajc] at org.eclipse.ui.actions.BuildAction.invokeOperation BuildAction.java:194 [iajc] at org.eclipse.ui.actions.WorkspaceAction.execute WorkspaceAction.java:133 [iajc] at org.eclipse.ui.actions.WorkspaceAction$2.runInWorkspace WorkspaceAction.java:414 [iajc] at org.eclipse.core.internal.resources.InternalWorkspaceJob.run InternalWorkspaceJob.java:38 [iajc] at org.eclipse.core.internal.jobs.Worker.run Worker.java:67</description>
    <commit commitTime="2005-08-24 19:20:56" id="803616d373f1c366e133f87342b88514cc5f74c3"/>
    <fixedFiles>
      <file>bcel-builder/testsrc/org/aspectj/apache/bcel/classfile/tests/GenericSignatureParserTest.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/GenericSignatureParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="107858" reportTime="2005-08-24 10:53:00">
    <summary>illegal argument to proceed crashes the parser</summary>
    <description>in a context where proceed requires zero arguments, calling it with an extra argument crashes the compiler, but only if that argument is a field access: class Foo { Foo field; void test {} } public aspect Bug { void around : call void Foo.test { Foo foo = new Foo .field; proceed foo ; // caught at compile time proceed new Foo .field ; // crashes } } /home/user/sgelin3/dev/java/ajc/new_bug/Bug.java [error] Internal compiler error java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.ast.AccessForInlineVisitor.getAccessibleField AccessForInlineVisitor.java:145 at org.aspectj.ajdt.internal.compiler.ast.AccessForInlineVisitor.endVisit AccessForInlineVisitor.java:108 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.FieldReference.traverse FieldReference.java:609 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse MessageSend.java:467 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse MethodDeclaration.java:212</description>
    <commit commitTime="2005-08-31 14:24:14" id="6c8747b590e9e9092ae256f2c7af0db169a6e2e4"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="108050" reportTime="2005-08-25 16:22:00">
    <summary>Execution not matching override in doubly derived method</summary>
    <description>The following sample code fails because the compiler isn't matching the execution of doPost in MockServlet4. The declare warning for "servlet request" doesn't match in that case, nor does advice on the join point actually run at runtime though this simplified code only shows the problem with declare warning . This was working until fairly recently certainly in M2, even in AJDT from August 11 . public abstract class MockServlet extends HttpServlet { protected void doPost { } private static aspect FindMatches { declare warning: execution * HttpServlet.do* .. : "servlet request"; declare warning: execution * HttpServlet+.do* .. : "servlet request2"; } } class HttpServlet { protected void doPost { } } public class MockDelayingServlet extends MockServlet { private static final long serialVersionUID = 1; } public class MockServlet4 extends MockDelayingServlet { protected void doPost { } } compiler output should have 6 warnings, including two for MockServlet4 : C:\devel\workspace\test\src\MockServlet.java:16 [warning] servlet request protected void doPost { ^^^^^^^^^^^^^^^^^^^^^^^^^ method-execution void MockServlet.doPost see also: C:\devel\workspace\test\src\MockServlet.java:20::0 C:\devel\workspace\test\src\MockServlet.java:16 [warning] servlet request2 protected void doPost { ^^^^^^^^^^^^^^^^^^^^^^^^^ method-execution void MockServlet.doPost see also: C:\devel\workspace\test\src\MockServlet.java:21::0 C:\devel\workspace\test\src\MockServlet.java:26 [warning] servlet request protected void doPost { ^^^^^^^^^^^^^^^^^^^^^^^^^ method-execution void HttpServlet.doPost see also: C:\devel\workspace\test\src\MockServlet.java:20::0 C:\devel\workspace\test\src\MockServlet.java:26 [warning] servlet request2 protected void doPost { ^^^^^^^^^^^^^^^^^^^^^^^^^ method-execution void HttpServlet.doPost see also: C:\devel\workspace\test\src\MockServlet.java:21::0 C:\devel\workspace\test\src\MockServlet4.java:9 [warning] servlet request2 protected void doPost ^^^^^^^^^^^^^^^^^^^^^^^ method-execution void MockServlet4.doPost see also: C:\devel\workspace\test\src\MockServlet.java:21::0 5 warnings</description>
    <commit commitTime="2005-08-26 11:43:32" id="27e68f3b3ae82408e8e046a40ab69d9e4996ff5a"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/JoinPointSignature.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="108062" reportTime="2005-08-25 17:47:00">
    <summary>NPE when opening resources from CVS resources history</summary>
    <description>NPE when opening resources double-click from CVS resources history view. java.lang.NullPointerException at org.eclipse.mylar.java.ui.editor.MylarJavaElementDescriptor.drawCompositeImage MylarJavaElementDescriptor.java:40 at org.eclipse.jface.resource.CompositeImageDescriptor.getImageData CompositeImageDescriptor.java:205 at org.eclipse.jface.resource.ImageDescriptor.createImage ImageDescriptor.java:279 at org.eclipse.jface.resource.ImageDescriptor.createImage ImageDescriptor.java:233 at org.eclipse.jface.resource.ImageDescriptor.createImage ImageDescriptor.java:211 at org.eclipse.mylar.ui.MylarImages.getImage MylarImages.java:108 at org.eclipse.mylar.java.ui.editor.MylarCompilationUnitEditor.updatedTitleImage MylarCompilationUnitEditor.java:55 at org.eclipse.jdt.internal.ui.javaeditor.JavaEditorErrorTickUpdater$1.run JavaEditorErrorTickUpdater.java:86 at org.eclipse.swt.widgets.Synchronizer.syncExec Synchronizer.java:152 at org.eclipse.ui.internal.UISynchronizer.syncExec UISynchronizer.java:28 at org.eclipse.swt.widgets.Display.syncExec Display.java:3413 at org.eclipse.jdt.internal.ui.javaeditor.JavaEditorErrorTickUpdater.postImageChange JavaEditorErrorTickUpdater.java:84 at org.eclipse.jdt.internal.ui.javaeditor.JavaEditorErrorTickUpdater.updateEditorImage JavaEditorErrorTickUpdater.java:77 at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSetInput CompilationUnitEditor.java:1548 at org.eclipse.ui.texteditor.AbstractTextEditor$16.run AbstractTextEditor.java:2360 at org.eclipse.jface.operation.ModalContext.runInCurrentThread ModalContext.java:346 at org.eclipse.jface.operation.ModalContext.run ModalContext.java:291 at org.eclipse.jface.window.ApplicationWindow$1.run ApplicationWindow.java:624 at org.eclipse.swt.custom.BusyIndicator.showWhile BusyIndicator.java:69 at org.eclipse.jface.window.ApplicationWindow.run ApplicationWindow.java:621 at org.eclipse.ui.internal.WorkbenchWindow.run WorkbenchWindow.java:2135 at org.eclipse.ui.texteditor.AbstractTextEditor.internalInit AbstractTextEditor.java:2378 at org.eclipse.ui.texteditor.AbstractTextEditor.init AbstractTextEditor.java:2405 at org.eclipse.ui.internal.EditorManager.createSite EditorManager.java:773 at org.eclipse.ui.internal.EditorReference.createPartHelper EditorReference.java:572 at org.eclipse.ui.internal.EditorReference.createPart EditorReference.java:365 at org.eclipse.ui.internal.WorkbenchPartReference.getPart WorkbenchPartReference.java:552 at org.eclipse.ui.internal.EditorReference.getEditor EditorReference.java:214 at org.eclipse.ui.internal.WorkbenchPage.busyOpenEditorBatched WorkbenchPage.java:2325 at org.eclipse.ui.internal.WorkbenchPage.busyOpenEditor WorkbenchPage.java:2258 at org.eclipse.ui.internal.WorkbenchPage.access$9 WorkbenchPage.java:2250 at org.eclipse.ui.internal.WorkbenchPage$9.run WorkbenchPage.java:2236 at org.eclipse.swt.custom.BusyIndicator.showWhile BusyIndicator.java:69 at org.eclipse.ui.internal.WorkbenchPage.openEditor WorkbenchPage.java:2231 at org.eclipse.ui.internal.WorkbenchPage.openEditor WorkbenchPage.java:2204 at org.eclipse.team.internal.ccvs.ui.actions.OpenLogEntryAction$1.run OpenLogEntryAction.java:85 at org.eclipse.team.internal.ccvs.ui.repo.RepositoryManager.run RepositoryManager.java:651 at org.eclipse.team.internal.ccvs.ui.actions.CVSAction$2.run CVSAction.java:347 at org.eclipse.team.internal.ccvs.ui.actions.CVSAction$3.run CVSAction.java:356 at org.eclipse.swt.custom.BusyIndicator.showWhile BusyIndicator.java:69 at org.eclipse.team.internal.ccvs.ui.actions.CVSAction.run CVSAction.java:353 at org.eclipse.team.internal.ccvs.ui.actions.OpenLogEntryAction.execute OpenLogEntryAction.java:64 at org.eclipse.team.internal.ccvs.ui.actions.CVSAction.run CVSAction.java:117 at org.eclipse.team.internal.ccvs.ui.HistoryView$6.handleEvent HistoryView.java:199 at org.eclipse.swt.widgets.EventTable.sendEvent EventTable.java:66 at org.eclipse.swt.widgets.Widget.sendEvent Widget.java:843 at org.eclipse.swt.widgets.Display.runDeferredEvents Display.java:3080 at org.eclipse.swt.widgets.Display.readAndDispatch Display.java:2713 at org.eclipse.ui.internal.Workbench.runEventLoop Workbench.java:1699 at org.eclipse.ui.internal.Workbench.runUI Workbench.java:1663 at org.eclipse.ui.internal.Workbench.createAndRunWorkbench Workbench.java:367 at org.eclipse.ui.PlatformUI.createAndRunWorkbench PlatformUI.java:143 at org.eclipse.ui.internal.ide.IDEApplication.run IDEApplication.java:103 at org.eclipse.core.internal.runtime.PlatformActivator$1.run PlatformActivator.java:226 at org.eclipse.core.runtime.adaptor.EclipseStarter.run EclipseStarter.java:376 at org.eclipse.core.runtime.adaptor.EclipseStarter.run EclipseStarter.java:163 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:585 at org.eclipse.core.launcher.Main.invokeFramework Main.java:334 at org.eclipse.core.launcher.Main.basicRun Main.java:278 at org.eclipse.core.launcher.Main.run Main.java:973 at org.eclipse.core.launcher.Main.main Main.java:948</description>
    <commit commitTime="2005-09-02 09:35:02" id="ad753aa80558748ab918988809ba6f58b8c26419"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/GenericSignatureParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="108101" reportTime="2005-08-26 07:38:00">
    <summary>bridge methods and binary weaving.</summary>
    <description>We should get all the necessary bridge methods 'for free' when compiling from source - the MethodVerifier15 that we use knows about inherited ITDs and ITDs it is receiving on any types it is verifying - so the logic to calculate when bridge methods are required all gets driven correctly. The problem is binary weaving - we've done nothing to ensure it works in this case. There seem to be a number of cases to consider and I'm not sure one algorithm will fix them all... If an ITD targets a particular class then it should be relatively easy when applying that ITD to the class that you check for any inherited methods and determine whether to create a bridge method representing the inherited methods erasure... The problem though is when you have a subclass below that which overrides the method you are ITDing... it may be that a bridge method needs adding to the subclass. But we may not go and look at that subclass, it may not be targetted for weaving, is it reasonable to walk *down* a hierarchy from the type that has been ITD'd upon? If possible I'd probably try and use the existing munger mechanism and create a munger that could be applied to the subtypes which adds the bridge method....</description>
    <commit commitTime="2005-10-25 11:17:21" id="e638a272e0d7e886bdcac33d7ca9fafa69c1b278"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="108104" reportTime="2005-08-26 08:19:00">
    <summary>Exception while opening AJ project after installing AJDT 1.3.0 for Eclipse 3.1</summary>
    <description>I opened by project after updating AJDT. I see a popup. This is repeatable but don't know the reason. The project does not have any errors. Nothing is highlighted as an error when I use AJDT 1.3.0 or the previous version. ---------------------------------------------------------------------- IllegalStateException thrown:Undeclared type variable in signature: K Reason: IllegalStateException thrown:Undeclared type variable in signature: K ---------------------------------------------------------------------- The trace is !ENTRY org.eclipse.ajdt.ui 4 0 2005-08-26 17:39:17.568 !MESSAGE IllegalStateException thrown: Undeclared type variable in signature: K !STACK 0 java.lang.IllegalStateException: Undeclared type variable in signature: K at org.aspectj.weaver.bcel.BcelGenericSignatureToTypeXConverter.typeVariableSignat ure2TypeX BcelGenericSignatureToTypeXConverter.java:203 at org.aspectj.weaver.bcel.BcelGenericSignatureToTypeXConverter.fieldTypeSignature 2TypeX BcelGenericSignatureToTypeXConverter.java:120 at org.aspectj.weaver.bcel.BcelGenericSignatureToTypeXConverter.typeSignature2Type X BcelGenericSignatureToTypeXConverter.java:186 at org.aspectj.weaver.bcel.BcelGenericSignatureToTypeXConverter.typeSignature2Type X BcelGenericSignatureToTypeXConverter.java:173 at org.aspectj.weaver.bcel.BcelMethod.unpackGenericSignature BcelMethod.java:283 at org.aspectj.weaver.bcel.BcelMethod.getGenericParameterTypes BcelMethod.java:256 at org.aspectj.weaver.ResolvedMemberImpl.matches ResolvedMemberImpl.java:635 at org.aspectj.weaver.ResolvedType.lookupResolvedMember ResolvedType.java:340 at org.aspectj.weaver.ResolvedMemberImpl.accumulateMembersMatching ResolvedMemberImpl.java:212 at org.aspectj.weaver.ResolvedMemberImpl.getJoinPointSignatures ResolvedMemberImpl.java:166 at org.aspectj.weaver.MemberImpl.getJoinPointSignatures MemberImpl.java:917 at org.aspectj.weaver.patterns.SignaturePattern.matches SignaturePattern.java:150 at org.aspectj.weaver.patterns.KindedPointcut.matchInternal KindedPointcut.java:111 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:151 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:61 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:151 at org.aspectj.weaver.ShadowMunger.match ShadowMunger.java:62 at org.aspectj.weaver.Advice.match Advice.java:101 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:1724 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:1360 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:381 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:96 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1368 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1333 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1110 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:997 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:286 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:165 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspec tj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:728 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:206 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:140 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:121 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191</description>
    <commit commitTime="2005-08-26 10:50:22" id="efb3c54464efbcffdf82311e63b10eeeef4f349b"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="108117" reportTime="2005-08-26 10:35:00">
    <summary>Complete implementation of abstract generic aspects</summary>
    <description>this requires 1/ completion of the parameterizeWith implementation in the pointcut AST nodes 2/ a much more exhaustive test suite around it.</description>
    <commit commitTime="2005-10-05 11:54:49" id="451fea8a2f9b3640d6c133c3f01dad8b9a78f72c"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/PerObject.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/TypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/Pointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ConcreteCflowPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/DeclareAnnotation.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AnnotationPatternList.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerTypeWithin.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerSingleton.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ThisOrTargetAnnotationPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WithinCodeAnnotationPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerCflow.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="108118" reportTime="2005-08-26 10:37:00">
    <summary>Complete implementation of @SuppressAjWarnings</summary>
    <description>ensure that @SuppressAJWarnings are indeed suppressed during pointcut operations. This requires wrapping major pointcut operations with calls to Lint from the associated advice.</description>
    <commit commitTime="2005-09-29 15:42:52" id="81a07900d1e2c4db563d5b4a833b404ac51ee5bd"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/SuppressedWarnings.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/Utility.java</file>
    </fixedFiles>
  </bug>
  <bug id="108120" reportTime="2005-08-26 10:39:00">
    <summary>Complete implemenation of runtime pointcut parsing and matching</summary>
    <description>The weaver API for runtime pointcut parsing and matching needs extending for all of the new pointcuts we have added in AJ5. Recommended approach is to implement JavaLangReflectObjectType as a new ReferenceTypeDelegate, and a JavaLangReflectWorld in place of BcelWorld.</description>
    <commit commitTime="2005-09-21 14:59:55" id="a39f595c0cdcddf8eac0b99e1918d0578f2dc501"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/ThrowsPattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerObject.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/PointcutPrimitive.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/HasMemberTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/UnresolvedType.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/patterns/ThisOrTargetTestCase.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/tools/PointcutParserTest.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDesignator.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerSingleton.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/NotTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerCflow.java</file>
      <file>aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/PointcutImpl.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/OrPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/TypePatternList.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/patterns/PatternsTests.java</file>
      <file>aspectj5rt/java5-src/org/aspectj/lang/annotation/Pointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AndTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/PointcutExpression.java</file>
      <file>aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/AjTypeImpl.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/NotPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WithinCodeAnnotationPointcut.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java</file>
      <file>weaver/testsrc/BcweaverModuleTests15.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/TypePattern.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/patterns/AndOrNotTestCase.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/JavaClass.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/Pointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ConcreteCflowPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/IfPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerClause.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/Type.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AndPointcut.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/tools/PointcutExpressionTest.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/PointcutParser.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/World.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/patterns/ArgsTestCase.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/patterns/WithinTestCase.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/OrTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerTypeWithin.java</file>
      <file>weaver/src/org/aspectj/weaver/Shadow.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/internal/tools/PointcutExpressionImpl.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjAnnotationGenTests.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ThisOrTargetAnnotationPointcut.java</file>
      <file>aspectj5rt/java5-src/org/aspectj/lang/reflect/Pointcut.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AtAspectJAnnotationFactory.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/patterns/PointcutTestCase.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/patterns/KindedTestCase.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/patterns/HandlerTestCase.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PointcutExpressionMatching.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/patterns/WithinCodeTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="108123" reportTime="2005-08-26 10:46:00">
    <summary>Improve logging and error reporting in weaver / ajc</summary>
    <description>For can't find type and related style errors we really don't have enough information in the reports coming from ajc at the moment. A flight recorder tracking progress through the key stages of compilation and weaving would be a big help and may well pay for itself in the run up to 1.5.0 final.</description>
    <commit commitTime="2005-09-26 15:05:01" id="d485f9bcc4df37aef60863fceb88654bbd32b680"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ThisJoinPointVisitor.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeDeclaration.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/ClassPathManager.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Options.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AdviceDeclaration.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AspectJBuilder.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>bridge/testsrc/BridgeModuleTests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java</file>
      <file>weaver/src/org/aspectj/weaver/BCException.java</file>
      <file>weaver/src/org/aspectj/weaver/World.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="108370" reportTime="2005-08-30 10:27:00">
    <summary>NPE at SourceTypeBinding.java:411 on enum switch in intertype method woven into binary class</summary>
    <description>I have some class Q: package et; public class Q {} and the following aspect: public aspect EnumTest { public static enum Test { A,B,C } public void et.Q.foo Test t { switch t { case B: break; } } } First I compile Q. Then I weave in the aspect: ajc -1.5 EnumTest.java -inpath et and get this exception: java.lang.NullPointerException at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.addSyntheticFieldForSwitchEnum SourceTypeBinding.java:411 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.addSyntheticMethodForSwitchEnum SourceTypeBinding.java:457 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.SwitchStatement.analyseCode SwitchStatement.java:83 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode MethodDeclaration.java:84 at org.aspectj.ajdt.internal.compiler.ast.InterTypeMethodDeclaration.analyseCode InterTypeMethodDeclaration.java:73 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode TypeDeclaration.java:720 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode TypeDeclaration.java:270 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.analyseCode CompilationUnitDeclaration.java:80 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:517 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:728 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:206 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:140 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:324 at org.aspectj.tools.ajc.Main.runMain Main.java:238 at org.aspectj.tools.ajc.Main.main Main.java:82 Apparently, it only appears if the switch has at least one case construct i.e. it does not happen on default .</description>
    <commit commitTime="2005-08-31 13:32:52" id="53c725aef7efb4bf4012a67dc2408b0c24818a26"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="108377" reportTime="2005-08-30 11:01:00">
    <summary>Verify Error on intertype field indirection in intertype method</summary>
    <description>When I run this program: public class A { public static void main String[] args { System.out.println new A .foo ; } } aspect Aspect1 { public A A.a; public String A.value; public String A.foo { return a.value; } } I get the error: Exception in thread "main" java.lang.VerifyError: class: Aspect1, method: ajc$interMethod$Aspect1$A$foo signature: LA; Ljava/lang/String; Incompatible type for getting or setting field at A.&amp;lt;init&amp;gt; A.java:1 at A.main A.java:3 Javap reveals that the field name is missing the class name part: 1: getfield #50; //Field a:LA; 4: getfield #46; //Field A.value:Ljava/lang/String; If I replace a.value by this.a.value, the correct code is generated: 1: getfield #37; //Field A.a:LA; 4: getfield #46; //Field A.value:Ljava/lang/String;</description>
    <commit commitTime="2005-08-31 09:34:59" id="be750d53ee48c2530bc9857196c468274632f7bc"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="108448" reportTime="2005-08-31 02:35:00">
    <summary>IllegalStateException: Undeclared type variable when hiding</summary>
    <description>ISE thrown compiling http://sourceforge.net/projects/collections 4.0beta3 source. javac issues two warnings, but Eclipse 3.1 JDT issues *many* for type parameter hiding types perhaps bug 103783 . I haven't isolated a test case or tried it on earlier releases - sorry.</description>
    <commit commitTime="2005-08-31 11:42:29" id="2c9ea11c6d7354d3e44aa59531964a15b4486519"/>
    <fixedFiles>
      <file>weaver/testsrc/org/aspectj/weaver/bcel/BcelGenericSignatureToTypeXTestCase.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelGenericSignatureToTypeXConverter.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelField.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelMethod.java</file>
    </fixedFiles>
  </bug>
  <bug id="108454" reportTime="2005-08-31 04:16:00">
    <summary>Waving crash on a 1.5 java generics?</summary>
    <description>The reported error is: Message: BCException thrown: The type @missing@ is not parameterized or raw - it has no generic type Stack trace: org.aspectj.weaver.BCException: The type @missing@ is not parameterized or raw - it has no generic type at org.aspectj.weaver.ResolvedType.getGenericType ResolvedType.java:1500 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding EclipseFactory.java:236 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBindings EclipseFactory.java:332 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding EclipseFactory.java:254 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.addSourceTypeBinding EclipseFactory.java:745 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:116 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:301 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:315 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:728 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:206 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:140 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:121 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 The isolated problem: ------------------// cut //------------------ public interface ISequence&amp;lt;V&amp;gt; { } public interface ICounter&amp;lt;T&amp;gt; { } public abstract class ASequence &amp;lt;V, T extends ICounter&amp;lt;V&amp;gt; &amp;gt; implements ISequence&amp;lt;V&amp;gt; { } ------------------// cut //------------------ The code compiles with j2se 1.5. 04 . It does work if I change ASequence to: ------------------// cut //------------------ public abstract class ASequence &amp;lt;V, T extends ICounter&amp;lt;V&amp;gt; &amp;gt; implements ISequence&amp;lt;V&amp;gt; { } ------------------// cut //------------------</description>
    <commit commitTime="2005-08-31 12:25:47" id="014c5c64b44c697946c4c7c21c18f273ab0e913b"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="108816" reportTime="2005-09-06 03:18:00">
    <summary>AspectJ 1.5.0 Development Compiler Chokes on Advice with Cflow</summary>
    <description>The following is a valid AspectJ program, that should compile and run without infinite recursion. It does so with AspectJ 1.2.1. AspectJ 1.5.0 Development but not M3a chokes on it. Sample Code: aspect BadAdvice { after Object controller returning Object foo : cflow adviceexecution &amp;amp;&amp;amp; args controller, .. &amp;amp;&amp;amp; this BadAdvice &amp;amp;&amp;amp; call Bar+.new .. { } Object around Object controller : call * whoKnows &amp;amp;&amp;amp; target controller { return new Bar ; } public static void main String args[] { new Bar .whoKnows ; } } class Bar { void whoKnows {} } Now look at the horrid output: C:\devel\scratch\recurse&amp;gt;ajc BadAdvice.aj trouble in: public class BadAdvice extends java.lang.Object: private static Throwable ajc$initFailureCause public static final BadAdvice ajc$perSingletonInstance public static final org.aspectj.runtime.internal.CFlowStack ajc$cflowStack$0 static void &amp;lt;clinit&amp;gt; : INVOKESTATIC BadAdvice.ajc$preClinit V staticinitialization void BadAdvice.&amp;lt;clinit&amp;gt; | catch java.lang.Throwable -&amp;gt; E0 | | INVOKESTATIC BadAdvice.ajc$postClinit V line 1 | catch java.lang.Throwable -&amp;gt; E0 | GOTO L0 | E0: ASTORE_0 | ALOAD_0 | PUTSTATIC BadAdvice.ajc$initFailureCause Ljava/lang/Throwabl e; | L0: RETURN staticinitialization void BadAdvice.&amp;lt;clinit&amp;gt; end static void &amp;lt;clinit&amp;gt; void &amp;lt;init&amp;gt; : ALOAD_0 // BadAdvice this line 1 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V constructor-execution void BadAdvice.&amp;lt;init&amp;gt; | RETURN constructor-execution void BadAdvice.&amp;lt;init&amp;gt; end void &amp;lt;init&amp;gt; public void ajc$afterReturning$BadAdvice$1$97dc015a Object, Object AdviceA ttribute afterReturning, cflow execution * * &amp;amp;&amp;amp; args BindingTypePattern java .lang.Object, 0 , .. &amp;amp;&amp;amp; this BadAdvice &amp;amp;&amp;amp; call Bar+.new .. , 1, 24 : ALOAD_1 ASTORE_3 ALOAD_2 ASTORE 4 advice-execution void BadAdvice.ajc$afterReturning$BadAdvice$1$97dc015a java .lang.Object, java.lang.Object | BIPUSH 1 | ANEWARRAY java.lang.Object | ASTORE 6 | ALOAD 6 | BIPUSH 0 | ALOAD_3 | AASTORE | GETSTATIC BadAdvice.ajc$cflowStack$0 Lorg/aspectj/runtime/in ternal/CFlowStack; | ALOAD 6 | INVOKEVIRTUAL org.aspectj.runtime.internal.CFlowStack.push [Ljava/lang/Object; V | catch java.lang.Throwable -&amp;gt; E0 | | GOTO L0 line 4 | catch java.lang.Throwable -&amp;gt; E0 | E0: ASTORE 7 | GETSTATIC BadAdvice.ajc$cflowStack$0 Lorg/aspectj/runtime/in ternal/CFlowStack; | INVOKEVIRTUAL org.aspectj.runtime.internal.CFlowStack.pop V | ALOAD 7 | ATHROW | L0: GETSTATIC BadAdvice.ajc$cflowStack$0 Lorg/aspectj/runtime/in ternal/CFlowStack; | INVOKEVIRTUAL org.aspectj.runtime.internal.CFlowStack.pop V | RETURN advice-execution void BadAdvice.ajc$afterReturning$BadAdvice$1$97dc015a java .lang.Object, java.lang.Object end public void ajc$afterReturning$BadAdvice$1$97dc015a Object, Object public Object ajc$around$BadAdvice$2$ef382b2d Object, org.aspectj.runtime.inte rnal.AroundClosure AdviceAttribute around, call * whoKnows &amp;amp;&amp;amp; target Bin dingTypePattern java.lang.Object, 0 , 1, 196 : advice-execution java.lang.Object BadAdvice.ajc$around$BadAdvice$2$ef382b2d java.lang.Object, org.aspectj.runtime.internal.AroundClosure | constructor-call void Bar.&amp;lt;init&amp;gt; | | NEW Bar | | DUP | | INVOKESPECIAL Bar.&amp;lt;init&amp;gt; V line 6 | | DUP | | ASTORE_3 | | GETSTATIC BadAdvice.ajc$cflowStack$0 Lorg/aspectj/runtime/in ternal/CFlowStack; | | INVOKEVIRTUAL org.aspectj.runtime.internal.CFlowStack.isVali d Z | | IFEQ L0 | | INVOKESTATIC BadAdvice.aspectOf LBadAdvice; | | GETSTATIC BadAdvice.ajc$cflowStack$0 Lorg/aspectj/runtime/in ternal/CFlowStack; | | BIPUSH 0 | | INVOKEVIRTUAL org.aspectj.runtime.internal.CFlowStack.get I Ljava/lang/Object; | | ALOAD_3 | | INVOKEVIRTUAL BadAdvice.ajc$afterReturning$BadAdvice$1$97dc0 15a Ljava/lang/Object;Ljava/lang/Object; V | | L0: NOP | constructor-call void Bar.&amp;lt;init&amp;gt; | ARETURN advice-execution java.lang.Object BadAdvice.ajc$around$BadAdvice$2$ef382b2d java.lang.Object, org.aspectj.runtime.internal.AroundClosure end public Object ajc$around$BadAdvice$2$ef382b2d Object, org.aspectj.runtime. internal.AroundClosure static Object ajc$around$BadAdvice$2$ef382b2dproceed Object, org.aspectj.runti me.internal.AroundClosure throws java.lang.Throwable org.aspectj.weaver.AjAt tribute$AjSynthetic@3feb61 : ALOAD_1 ICONST_1 ANEWARRAY java.lang.Object DUP ICONST_0 ALOAD_0 // BadAdvice this AASTORE INVOKEVIRTUAL org.aspectj.runtime.internal.AroundClosure.run [Ljava/lang/Object; Ljava/lang/Object; CHECKCAST java.lang.Object ARETURN end static Object ajc$around$BadAdvice$2$ef382b2dproceed Object, org.aspectj.r untime.internal.AroundClosure throws java.lang.Throwable public static BadAdvice aspectOf org.aspectj.weaver.AjAttribute$AjSynthet ic@3ff616 : GETSTATIC BadAdvice.ajc$perSingletonInstance LBadAdvice; IFNONNULL L0 NEW org.aspectj.lang.NoAspectBoundException DUP LDC "BadAdvice" GETSTATIC BadAdvice.ajc$initFailureCause Ljava/lang/Throwabl e; INVOKESPECIAL org.aspectj.lang.NoAspectBoundException.&amp;lt;init&amp;gt; Ljava/lang/String;Ljava/lang/Throwable; V ATHROW L0: GETSTATIC BadAdvice.ajc$perSingletonInstance LBadAdvice; ARETURN end public static BadAdvice aspectOf public static boolean hasAspect org.aspectj.weaver.AjAttribute$AjSyntheti c@400021 : GETSTATIC BadAdvice.ajc$perSingletonInstance LBadAdvice; IFNULL L0 ICONST_1 IRETURN L0: ICONST_0 IRETURN end public static boolean hasAspect private static void ajc$postClinit org.aspectj.weaver.AjAttribute$AjSynth etic@400662 : NEW BadAdvice DUP INVOKESPECIAL BadAdvice.&amp;lt;init&amp;gt; V PUTSTATIC BadAdvice.ajc$perSingletonInstance LBadAdvice; RETURN end private static void ajc$postClinit static void ajc$preClinit : NEW org.aspectj.runtime.internal.CFlowStack DUP INVOKESPECIAL org.aspectj.runtime.internal.CFlowStack.&amp;lt;init&amp;gt; V PUTSTATIC BadAdvice.ajc$cflowStack$0 Lorg/aspectj/runtime/in ternal/CFlowStack; RETURN end static void ajc$preClinit end public class BadAdvice java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelVar.appendConvertableArrayStore BcelVar.j ava:96 at org.aspectj.weaver.bcel.BcelShadow.weaveCflowEntry BcelShadow.java:18 36 at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:200 at org.aspectj.weaver.Shadow.implementMungers Shadow.java:511 at org.aspectj.weaver.Shadow.implement Shadow.java:388 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.jav a:1757 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:39 3 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:96 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1415 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1 380 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:115 7 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:989 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompiler Adapter.java:286 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling A jCompilerAdapter.java:165 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning $org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.a j:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compil er.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:728 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:206 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:140 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:324 at org.aspectj.tools.ajc.Main.runMain Main.java:238 at org.aspectj.tools.ajc.Main.main Main.java:82 ABORT Exception thrown from AspectJ DEVELOPMENT This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. null java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelVar.appendConvertableArrayStore BcelVar.j ava:96 at org.aspectj.weaver.bcel.BcelShadow.weaveCflowEntry BcelShadow.java:18 36 at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:200 at org.aspectj.weaver.Shadow.implementMungers Shadow.java:511 at org.aspectj.weaver.Shadow.implement Shadow.java:388 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.jav a:1757 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:39 3 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:96 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1415 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1 380 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:115 7 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:989 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompiler Adapter.java:286 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling A jCompilerAdapter.java:165 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning $org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.a j:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compil er.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:728 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:206 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:140 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:324 at org.aspectj.tools.ajc.Main.runMain Main.java:238 at org.aspectj.tools.ajc.Main.main Main.java:82 1 fail|abort Note: there isn't ever a call to construct a Bar in the first advice, so it shouldn't actually be self-advising at runtime, and even though the advice does itself match the cflow expression, it should just push an entry on the cflow stack. By the way, this would be a great place to have a name for advice, so I could exclude this one advice from advising itself.</description>
    <commit commitTime="2005-09-06 13:08:19" id="71771abbb2d2bac4cd832323c08d9dcad81db2a0"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="108818" reportTime="2005-09-06 04:30:00">
    <summary>private poincuts in abstract aspects can be overriden by pointcuts in concrete sub-aspects</summary>
    <description>private poincuts in abstract aspects can be overriden by pointcuts in concrete sub-aspects, in the case where the abstract aspect defines concrete advice refering to the pointcut. In this case the advice should bind to the private pointcut defined in the super aspect.</description>
    <commit commitTime="2005-09-06 10:58:36" id="def2f307c6579a5992191b9364d4c74364baef4b"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="108826" reportTime="2005-09-06 08:13:00">
    <summary>AJDT Error: Can't find type</summary>
    <description>In Eclipse 3.1, using the latest AspectJ build 1.5.0_M3a compiler and 1.3.0 plugin I get an error "can't find type test.T" , using the following code: =============== package test; public class CantFindType { public &amp;lt;T&amp;gt; T[] method T[] array { return null; } } ================ The error occurs, if the return type, or the parameter is an array of a generic type. The code compiles fine, but Eclipse shows the error, but doesn't show the folder or the location for the error.</description>
    <commit commitTime="2005-09-09 14:19:19" id="2942ca0f23ee0489efce58272768529e6b907a63"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="108886" reportTime="2005-09-06 19:02:00">
    <summary>Getting Exception during compilation : java.lang.RuntimeException: Internal Compiler Error: Unexpected null source location passed as 'see also' location.</summary>
    <description>Am attaching a small test case to reproduce the error Not sure how to attach it - hopefully should be feasible to do so after I log the bug .</description>
    <commit commitTime="2005-09-08 16:57:15" id="2d21db05869efd4715e8a4a10810c18a89093bfb"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedType.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="108892" reportTime="2005-09-06 22:05:00">
    <summary>Load Time Weaving problem with Aspect Definition at 2 Levels of Hierarchy</summary>
    <description>I am trying to weave into Tomcat with a system-level aspect META-INF/aop.xml is found in a jar on the system classpath , and also have a Web application with an aop.xml properly deployed. When I try to run them both together, only the system-level aspects work. If I remove the system-level aspect jar from the classpath, the application-level aspects work. What would be a reasonable way to isolate this into a test case? If I could package up a simple system.jar and app.war file for Tomcat 5.5.9, would that be useful for you to use in debugging it? I tried making a simple standalone version with 2 aop.xml files in the same app classloader but that works just fine.</description>
    <commit commitTime="2005-10-28 12:07:14" id="794f9b5eafe34a7dbb48cda3edaec59ff57afef5"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java</file>
    </fixedFiles>
  </bug>
  <bug id="108902" reportTime="2005-09-07 02:53:00">
    <summary>Type mismatch: cannot convert from Collection to Collection</summary>
    <description>From aspectj-users The program below produces the erroneous message: [iajc] D:\workdir\DPsample\main\src\com\designpattern\observer\ObserverProt ocol.aj:39 [error] Type mismatch: cannot convert from Collection to Collection [iajc] return observers; [iajc] ^^^^^ //Subject.java interface Subject { public void addObserver Observer observer ; public void removeObserver Observer observer ; public Collection getObservers ; } //Observer.java interface Observer { public void update ; } //ObserverProtocol public abstract aspect ObserverProtocol{ abstract pointcut stateChange Subject subject ; after Subject subject :stateChange subject { Iterator it=subject.getObservers .iterator ; while it.hasNext { Observer observer= Observer it.next ; observer.update ; } } private Collection Subject.observers=new ArrayList ; public void Subject.addObserver Observer observer { observers.add observer ; } public void Subject.removeObserver Observer observer { observers.remove observer ; } public Collection Subject.getObservers { return observers; } }</description>
    <commit commitTime="2005-09-08 13:40:33" id="2505485766b460041f2648e56f34132982f6428a"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="108903" reportTime="2005-09-07 02:57:00">
    <summary>super call in ITD not finding correct super class</summary>
    <description>I have the following codes: // public abstract class Order { ..... public void print { ...... } } // public class SalesOrder { } // public abstract aspect OrderDecorator { declare parents : SalesOrder extends Order; public void SalesOrder.print { super.print ; // Line 12 } protected pointcut print Order order : target order &amp;amp;&amp;amp; call public void print ; } In Line 12 above, I want to call Order.print , but AspectJ M3a dislay the following error message: [iajc] D:\workdir\DPsample\main\src\com\designpattern\decorator\OrderDecora tor.aj:12 [error] The method print is undefined for the type Object [iajc] super.print ; I donot know what's wrong with my code. Thanks for your help.</description>
    <commit commitTime="2005-09-08 13:40:33" id="2505485766b460041f2648e56f34132982f6428a"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="109016" reportTime="2005-09-07 21:09:00">
    <summary>NullPointerException when building configuration</summary>
    <description>The exception below seems to be happening with any .lst file: Message: NullPointerException thrown: null Stack trace: java.lang.NullPointerException at org.aspectj.ajde.internal.CompilerAdapter.configureBuildOptions CompilerAdapter.java:296 at org.aspectj.ajde.internal.CompilerAdapter.genBuildConfig CompilerAdapter.java:170 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:95 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191</description>
    <commit commitTime="2005-09-08 19:19:11" id="51874377b6350b80287730e6b8e0cc8a76c284c4"/>
    <fixedFiles>
      <file>ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java</file>
    </fixedFiles>
  </bug>
  <bug id="109042" reportTime="2005-09-08 08:13:00">
    <summary>parameter ajc_aroundclosure is never read</summary>
    <description>Similar to [ http://dev.eclipse.org/newslists/news.eclipse.technology.ajdt/ msg00691.html] I get the following warning in the attached test project: Severity Description Resource In Folder Location Creation Time 1 The parameter ajc_aroundClosure is never read PlaylistAspect.aj Jukebox/ src/playlist line 1 8. September 2005 14:10:12</description>
    <commit commitTime="2005-09-08 14:09:18" id="08d6a5d1e032d33b46afca2fd92d3700b06a6cc6"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="109124" reportTime="2005-09-09 05:44:00">
    <summary>VerifyError with inner classes</summary>
    <description>This bug apparently occurs only when compiling with the -1.5 option Adrian Colyer managed to reproduce it . Considering the code below, when I set a 'set' pointcut on the fields of inner class Node, I get an error from the class verifier: Exception in thread "main" java.lang.VerifyError: class: test/List$Node, method: &amp;lt;init&amp;gt; signature: Ltest/List;I V Expecting to find object/array on stack When the Node class is moved out of the List class, it works fine. The decompiled code for the inner class is included below for reference. ////////////////////////////////////////////////////////////////////// // List.java package test; public class List { class Node { int value; Node next; Node int v { value = v; } } private Node head; public List { head = null; } public void add int v { Node n = new Node v ; n.next = head; head = n; } public void print { Node n = head; while n != null { System.out.print " " + n.value ; n = n.next; } System.out.println ; } public static void main String[] args { List l = new List ; for int i = 0; i &amp;lt; 10; i++ l.add i ; l.print ; } } ////////////////////////////////////////////////////////////////////// // ListAspect.aj package test; public aspect ListAspect { pointcut setField Object t : target t &amp;amp;&amp;amp; set * List.Node+.* ; before Object t : setField t { System.out.println "WRITE" ; // Do something with t... } } ////////////////////////////////////////////////////////////////////// // List@Node.jad package test; // Referenced classes of package test: // List, ListAspect class List$Node { int value; List$Node next; final List this$0; List$Node int v { //* 0 0:aload_0 List list1 = List.this; // 1 1:aload_1 // 2 2:astore_3 List$Node list$node = this; // 3 3:astore 4 ListAspect.aspectOf .ajc$before$test_ListAspect$1$3f3247a5 list$node ; // 4 5:invokestatic #37 &amp;lt;Method test.ListAspect test.ListAspect.aspectOf &amp;gt; // 5 8:aload 4 // 6 10:invokevirtual #41 &amp;lt;Method void test.ListAspect.ajc$before$test_ListAspect$1$3f3247a5 java.lang.Object &amp;gt; list$node.this$0 = list1; // 7 13:aload 4 // 8 15:aload_3 // 9 16:putfield #16 &amp;lt;Field test.List test.List$Node.this$0&amp;gt; super ; // 10 19:aload_0 // 11 20:invokespecial #19 &amp;lt;Method void Object &amp;gt; //* 12 23:aload_0 int i = v; // 13 24:iload_2 // 14 25:istore 5 List$Node list$node1 = this; // 15 27:astore 6 ListAspect.aspectOf .ajc$before$test_ListAspect$1$3f3247a5 list$node1 ; // 16 29:invokestatic #37 &amp;lt;Method test.ListAspect test.ListAspect.aspectOf &amp;gt; // 17 32:aload 6 // 18 34:invokevirtual #41 &amp;lt;Method void test.ListAspect.ajc$before$test_ListAspect$1$3f3247a5 java.lang.Object &amp;gt; list$node1.value = i; // 19 37:aload 6 // 20 39:iload 5 // 21 41:putfield #21 &amp;lt;Field int test.List$Node.value&amp;gt; // 22 44:return } }</description>
    <commit commitTime="2005-09-09 10:48:58" id="a9ca915dc39c87267a7a763d51e87a819e9799c7"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelField.java</file>
    </fixedFiles>
  </bug>
  <bug id="109173" reportTime="2005-09-09 12:49:00">
    <summary>Weaving Adaptor enhancements for performance, configuration and diagnosis</summary>
    <description>Here are some suggested enhancements as a result of exhaustive testing in the Eclipse/OSGi environment. 1. If no aspects are declared for a particular class loader, either because there are no visible aop.xml files or they contain no aspect definitions, then we should short-circuit the implementation of weaveClass so that byte-code is not unnecessarily passed to the weaver. This is especially important under OSGi where there may be hundreds of class bundles, each with their own class loader only some of which are being woven. We can use the existing “enabled” flag. 2. As previously discussed on aspectj-dev the META-INF directory is considered private in OSGi and is therefore an inappropriate location for aop.xml files declaring shared aspects. I therefore propose a System property to set the a resource names for finding aop.xml files which would default to “META-INF/aop.xml” e.g. -Dorg.aspectj.weaver.loadtime.configuration=META- INF/aop.xml;org/aspectj/aop.xml. 3. We should not be catching Throwable in Aj. Instead we should catch known exceptions e.g. BCException and issue messages while letting other runtime exceptions pass back to the class loader. A user provided IMessageHandler implementation can decide under what circumstances to abort. Alternatively if Aj is considered to be a “safe” interface for weaving agents e.g. JVMTI then the dump logic it contains should be moved to the WeavingAdaptor so that it can be used directly from a class loader.</description>
    <commit commitTime="2005-09-23 14:40:27" id="03b20bc1129e03d5e8594262b89021e54ab017f9"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Aj.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="109283" reportTime="2005-09-12 08:37:00">
    <summary>Invalid "indirect static access" warning on EnumSet.noneOf</summary>
    <description>When compiling AspectJ enabled projects in Java 5.0 source mode with "Indirect access to static modifier" warnings on, the following code incorrectly gives a compiler warning this doesn't occur in non-AspectJ enabled projects : public class Test { enum Foo { Wibble, Wobble, Woo; } public static void main String[] args { EnumSet&amp;lt;Foo&amp;gt; set = EnumSet.noneOf Foo.class ; } }</description>
    <commit commitTime="2005-09-22 15:45:06" id="8a0f59ad18ace56ff59cd9108d18c70358a4f055"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/AjcMemberMaker.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelPerClauseAspectAdder.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="109486" reportTime="2005-09-14 06:06:00">
    <summary>Internal compiler error ClassParser.java:242</summary>
    <description>Testcase: A.aj containing: final abstract aspect A {} This causes the compiler to abort with an internal compiler error: C:\Documents and Settings\mchapman\A.aj [error] Internal compiler error org.aspectj.apache.bcel.classfile.ClassFormatException: Class can't be both final and abstract at org.aspectj.apache.bcel.classfile.ClassParser.readClassInfo ClassPars er.java:242 at org.aspectj.apache.bcel.classfile.ClassParser.parse ClassParser.java: 165 at org.aspectj.weaver.bcel.Utility.makeJavaClass Utility.java:489 at org.aspectj.weaver.bcel.UnwovenClassFile.getJavaClass UnwovenClassFil e.java:63 at org.aspectj.weaver.bcel.UnwovenClassFile.getClassName UnwovenClassFil e.java:147 at org.aspectj.ajdt.internal.core.builder.AjState.noteResult AjState.jav a:497 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$3.acceptResult AjBuildManager.java:748 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing AjCompilerAdapter.java:186 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning $org_aspectj_ajdt_internal_compiler_CompilerAdapter$4$6b855184 CompilerAdapter.a j:89 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compil er.java:528 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compil er.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:728 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:206 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:140 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:324 at org.aspectj.tools.ajc.Main.runMain Main.java:238 at org.aspectj.tools.ajc.Main.main Main.java:82 no source information available C:\Documents and Settings\mchapman\A.aj:1 [error] The class A can be either abst ract or final, not both final abstract aspect A {} ABORT Exception thrown from AspectJ DEVELOPMENT C:\Documents and Settings\mchapman&amp;gt;ajc -version AspectJ Compiler DEVELOPMENT built on Tuesday Sep 13, 2005 at 22:31:40 GMT The expected behaviour is naturally just to get a regular compiler errror saying "The aspect A can be either abstract or final, not both".</description>
    <commit commitTime="2005-09-14 11:10:52" id="87e5c2eccac7cf0027b7711cfe1bd4ead21d21cf"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/ClassParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="109614" reportTime="2005-09-15 09:57:00">
    <summary>[waiting-on-build] [iajc.task] java.lang.RuntimeException: Ranges must be updated with an enclosing instructionList</summary>
    <description>I am getting following error when compiling code using iajc ant task: [iajc.task] trouble in: [iajc.task] public class admin.modelbean.AdminUserMB extends web.FormSupport: [iajc.task] private static final org.apache.log4j.Logger log .... Ljava/lang/String; Ljava/lang/StringBuffer; [iajc.task] | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.String [iajc.task] | LDC_W "}" line 249 [iajc.task] | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.String [iajc.task] | | INVOKEVIRTUAL java.lang.StringBuffer.append Ljava/lang/String; Ljava/lang/StringBuffer; [iajc.task] | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.String [iajc.task] | method-call java.lang.String java.lang.StringBuffer.toString [iajc.task] | | INVOKEVIRTUAL java.lang.StringBuffer.toString Ljava/lang/String; line 236 [iajc.task] | method-call java.lang.String java.lang.StringBuffer.toString [iajc.task] | ARETURN [iajc.task] method-execution java.lang.String admin.modelbean.AdminUserMB.toString [iajc.task] end public String toString [iajc.task] end public class admin.modelbean.AdminUserMB [iajc.task] java.lang.RuntimeException: Ranges must be updated with an enclosing instructionList [iajc.task] at org.aspectj.weaver.bcel.Range.updateTarget Range.java:170 [iajc.task] at org.aspectj.weaver.bcel.BcelShadow.retargetFrom BcelShadow.java:235 [iajc.task] at org.aspectj.weaver.bcel.BcelShadow.deleteNewAndDup BcelShadow.java:212 [iajc.task] at org.aspectj.weaver.bcel.BcelShadow.prepareForMungers BcelShadow.java:252 [iajc.task] at org.aspectj.weaver.Shadow.implement Shadow.java:374 [iajc.task] at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:1754 [iajc.task] at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:393 [iajc.task] at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:96 [iajc.task] at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1372 [iajc.task] at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1337 [iajc.task] at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1114 [iajc.task] at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1001 [iajc.task] at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:286 [iajc.task] at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:165 [iajc.task] at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 [iajc.task] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 [iajc.task] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:728 [iajc.task] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:206 [iajc.task] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:140 [iajc.task] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 [iajc.task] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 [iajc.task] at org.aspectj.tools.ajc.Main.run Main.java:324 [iajc.task] at org.aspectj.tools.ajc.Main.runMain Main.java:238 [iajc.task] at org.aspectj.tools.ajc.Main.main Main.java:82 [iajc.task] ABORT [iajc.task] [iajc.task] Exception thrown from AspectJ 1.5.0_M3a [iajc.task] This might be logged as a bug already -- find current bugs at [iajc.task] http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler [iajc.task] Bugs for exceptions thrown have titles File:line from the top stack, [iajc.task] e.g., "SomeFile.java:243" [iajc.task] If you don't find the exception below in a bug, please add a new bug [iajc.task] at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ [iajc.task] To make the bug a priority, please include a test program [iajc.task] that can reproduce this exception. [iajc.task] Ranges must be updated with an enclosing instructionList [iajc.task] Ranges must be updated with an enclosing instructionList [iajc.task] java.lang.RuntimeException: Ranges must be updated with an enclosing instructionList [iajc.task] at org.aspectj.weaver.bcel.Range.updateTarget Range.java:170 [iajc.task] at org.aspectj.weaver.bcel.BcelShadow.retargetFrom BcelShadow.java:235 [iajc.task] at org.aspectj.weaver.bcel.BcelShadow.deleteNewAndDup BcelShadow.java:212 [iajc.task] at org.aspectj.weaver.bcel.BcelShadow.prepareForMungers BcelShadow.java:252 [iajc.task] at org.aspectj.weaver.Shadow.implement Shadow.java:374 [iajc.task] at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:1754 [iajc.task] at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:393 [iajc.task] at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:96 [iajc.task] at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1372 [iajc.task] at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1337 [iajc.task] at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1114 [iajc.task] at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1001 [iajc.task] at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:286 [iajc.task] at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:165 [iajc.task] at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 [iajc.task] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 [iajc.task] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:728 [iajc.task] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:206 [iajc.task] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:140 [iajc.task] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 [iajc.task] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 [iajc.task] at org.aspectj.tools.ajc.Main.run Main.java:324 [iajc.task] at org.aspectj.tools.ajc.Main.runMain Main.java:238 [iajc.task] at org.aspectj.tools.ajc.Main.main Main.java:82 [iajc.task] 1 fail|abort BUILD FAILED /home/sbhatti/workspace/devint/build.xml:100: The following error occurred while executing this line: /home/sbhatti/workspace/devint/build.xml:164: The following error occurred while executing this line: /home/sbhatti/workspace/devint/modules/novo/build.xml:59: The following error occurred while executing this line: /opt/sbhatti/dev/current/novo/build.xml:326: failure[-1] running ajc</description>
    <commit commitTime="2005-12-08 11:43:16" id="94159f9e80233497e02899c91a126ea5a3b605cc"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="109728" reportTime="2005-09-16 08:45:00">
    <summary>Unable to build a good version of shadows with -1.4 or -1.5</summary>
    <description>Building shadows is normally done with -1.3 but by accident I tried it with 1.4 and then deliberately with 1.5. In the 1.4 case it builds ok but the resultant jars contain code in ClassFile that fails verification. In the 1.5 case we fail with "cant find type [I".</description>
    <commit commitTime="2005-09-19 15:12:36" id="eb39196938a01554927e21e8fcf95c25021530c6"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/FieldOrMethod.java</file>
    </fixedFiles>
  </bug>
  <bug id="110465" reportTime="2005-09-23 12:10:00">
    <summary>Continue AST work</summary>
    <description>See bug 88861 . That bug describes how the infrastructure is now in place for the AspectJ AST there is also an example in that bug . This bug is to capture future work that needs doing, effectively a brain dump from me: 1. LOADS more testcases. See ASTVisitorTest in the org.aspectj.ajdt.core, there are loads more examples that could be written that include more sophisticated constructs, it also seems incorrect that the pointcut expressions the bit after the 'pointcut p :' is ignored in the existing testcases. 2. All 'basic' designators e.g. call/execution/etc - all the ones that don't next other designators are captured at the moment as DefaultPointcut. This isn't right, there should be a subtype of PointcutDesignator for *all* the aspectj designators. and possibly, going further than that with different nodes for each piece of each pointcut too ... typepattern/etc 3. We need much more support in the AjASTRewriteAnalyzer if refactorings are going to be possible. Unfortunately the analyzer requires more *stuff* to be around and so testcases for it have to be written in the AJDT core.tests plugin : If anyone has a particular use case that they need to get working, please mention it in this bug and we'll raise the priority of 'that piece' of the AST.</description>
    <commit commitTime="2005-11-10 11:06:07" id="e433d6704633b9c3293f1b4c8507592ad987f2b8"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/InterTypeMethodDeclaration.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/tools/ajc/ASTVisitorTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="110788" reportTime="2005-09-27 08:51:00">
    <summary>Should not be able to mark a class as implementing multiple parameterizations of a generic type using decp</summary>
    <description>This program: interface A&amp;lt;T&amp;gt; {} interface B&amp;lt;T&amp;gt; extends A&amp;lt;T&amp;gt; {} class C implements A&amp;lt;String&amp;gt; {} class D extends C implements B&amp;lt;Number&amp;gt;{} produces: K:\ws\aspectj_ws3\tests\bugs150\pr110307&amp;gt;ajc MultipleParameterizations1.java -1.5 K:\ws\aspectj_ws3\tests\bugs150\pr110307\MultipleParameterizations1.java:7 [error] The interface A cannot be implemented more than once with different arguments: A&amp;lt;String&amp;gt; and A&amp;lt;Number&amp;gt; class D extends C implements B&amp;lt;Number&amp;gt;{} This program: interface A&amp;lt;T&amp;gt; {} interface B&amp;lt;T&amp;gt; extends A&amp;lt;T&amp;gt; {} class C implements A&amp;lt;String&amp;gt; { } class D extends C { } aspect X { declare parents: D implements B&amp;lt;Number&amp;gt;; } compiles fine - it should report the same error.</description>
    <commit commitTime="2005-09-28 09:49:10" id="fc51daa12dd7952e3b6a2f486e7d0162323c91b4"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="111317" reportTime="2005-10-03 04:04:00">
    <summary>Move the AST rewrite analyzer to AJDT so we can remove the horrible jface text dependency.</summary>
    <description/>
    <commit commitTime="2005-11-28 11:35:50" id="50abc1d34b7685a08d08302fcfbf15819ea8d8c7"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/core/dom/rewrite/AjASTRewriteAnalyzerFactory.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/internal/core/dom/rewrite/AjASTRewriteAnalyzer.java</file>
    </fixedFiles>
  </bug>
  <bug id="111481" reportTime="2005-10-04 12:25:00">
    <summary>varargs doesn't work for ITD'd constructors</summary>
    <description>The following program doesn't compile: class MyClass { public static void main String []argv { new MyClass new Object[]{"a","b","c"} ; new MyClass "a","b","c" ; } } aspect A { public MyClass.new Object... names { System.out.println names[0] ; } } this is similar to bug 110906</description>
    <commit commitTime="2005-10-05 08:12:20" id="2b0e6755030eb378e612a00fcb80d7bdca2c55ee"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeConstructorDeclaration.java</file>
    </fixedFiles>
  </bug>
  <bug id="111667" reportTime="2005-10-05 14:34:00">
    <summary>Produce a compile warning when default advice precedence is applied</summary>
    <description>I propose that the compiler spit out a warning anytime that it has to apply the default advice precedence. Also, it should spit out the recommendation that default ordering is not guaranteed from release to release of the compiler. You can see the thread on aspectj-dev titled "change in runtime execution order" and the one on aspectj-users titled "AJDT 1.3 and aspectj" for the reasoning behind why this is a good thing.</description>
    <commit commitTime="2005-11-30 17:23:35" id="2c8190702e95baf0489e384767c816f30d870c86"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/Lint.java</file>
      <file>weaver/src/org/aspectj/weaver/Shadow.java</file>
      <file>weaver/src/org/aspectj/weaver/World.java</file>
    </fixedFiles>
  </bug>
  <bug id="111915" reportTime="2005-10-07 11:14:00">
    <summary>illegal change to pointcut declaration</summary>
    <description>org.aspectj.weaver.BCException at org.aspectj.weaver.patterns.ReferencePointcut.concretize1 ReferencePointcut.java:306 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:229 at org.aspectj.weaver.patterns.ReferencePointcut.concretize1 ReferencePointcut.java:331 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:229 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:216 at org.aspectj.weaver.Advice.concretize Advice.java:273 at org.aspectj.weaver.bcel.BcelAdvice.concretize BcelAdvice.java:83 at org.aspectj.weaver.CrosscuttingMembers.addShadowMunger CrosscuttingMembers.java:84 at org.aspectj.weaver.CrosscuttingMembers.addShadowMungers CrosscuttingMembers.java:78 at org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers ResolvedType.java:462 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect CrosscuttingMembersSet.java:62 at org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave BcelWeaver.java:426 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:283 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:178 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:760 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:225 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:151 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 BCException thrown: illegal change to pointcut declaration: spike.np.CommandCase.handleCommand BindingTypePattern spike.np.OtherHandler$MyWorld, 0 when batch building BuildConfig[/home/guido/workspace/.metadata/.plugins/org.eclipse.ajdt.core/np.generated.lst] #Files=11</description>
    <commit commitTime="2005-10-21 06:56:11" id="3021284f5d910a406d26a01ce836bbb5f5cd6bfc"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="112027" reportTime="2005-10-08 02:49:00">
    <summary>unexpected error unboundFormalInPC</summary>
    <description>In 1.5.0M4, I get error "the parameter tis is not bound in [all branches of] pointcut". Not true of 1.2.1. Untested in other development versions of 1.5.0. No branches all &amp;amp;&amp;amp; but duplicate specification of this .. . ------------------------------------------ package demo; /** * PerThis */ public class PerThis { public static void main String[] args { new This .test ; } } aspect PerThisTest perthis pc { // TutIndex example-basic-perthis pointcut pc : this This &amp;amp;&amp;amp; !within PerThisTest &amp;amp;&amp;amp; call void run ; before This tis : pc &amp;amp;&amp;amp; this tis { System.out.println "bef " + this + " &amp;lt;-- " + tis ; } } class This { int i; void test { run ; } void run { System.out.println "run " + this ; } }</description>
    <commit commitTime="2005-10-18 15:40:35" id="ae612d9752200a3784de33ea6b79815e77aabaed"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/BindingTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java</file>
    </fixedFiles>
  </bug>
  <bug id="112098" reportTime="2005-10-10 05:58:00">
    <summary>version checking for aspectjrt.jar can get confused</summary>
    <description>there's no bugzilla version for 1.5.0M4 Release builds of aspectj have extra version checking that dev builds dont have, and this can cause problems in an AJDT environment. For example, I can't use AJDT with M3a to build AJDT with M4, because the installed aspectj M3a gets to the aspectjrt.jar in the workspace, and aborts because it's got a version of M4. Maybe the checking could be more sophisticated, or maybe it could be just a warning, and not abort compilation?</description>
    <commit commitTime="2006-08-23 13:05:09" id="0f98c3d06b755e1474a556cea2928e6ccd49f041"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java</file>
    </fixedFiles>
  </bug>
  <bug id="112105" reportTime="2005-10-10 07:11:00">
    <summary>summary of ITD generics work.</summary>
    <description/>
    <commit commitTime="2005-10-11 08:25:03" id="0a69e42808527ec7daa32ec2d4bbf183ca8b4f4b"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/AjdeInteractionTestbed.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/AllTestsAspectJ150.java</file>
      <file>aspectj5rt/java5-testsrc/org/aspectj/internal/lang/reflect/AjTypeTestsWithAspects.java</file>
      <file>weaver/src/org/aspectj/weaver/TypeVariableReferenceType.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
      <file>weaver/src/org/aspectj/weaver/UnresolvedType.java</file>
      <file>weaver/src/org/aspectj/weaver/JoinPointSignature.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedMember.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedTypeMunger.java</file>
      <file>weaver/src/org/aspectj/weaver/TypeVariableDeclaringElement.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java</file>
      <file>weaver/src/org/aspectj/weaver/UnresolvedTypeVariableReferenceType.java</file>
      <file>weaver/src/org/aspectj/weaver/World.java</file>
      <file>weaver/src/org/aspectj/weaver/TypeVariable.java</file>
    </fixedFiles>
  </bug>
  <bug id="112243" reportTime="2005-10-11 14:27:00">
    <summary>Compiler Core Dump with Apparent Fix</summary>
    <description>I am seeing this exception when using ajc to do binary weaving: [iajc] Exception thrown from AspectJ 1.5.0M4 [iajc] This might be logged as a bug already -- find current bugs at [iajc] http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component =Compiler [iajc] Bugs for exceptions thrown have titles File:line from the top stack, [iajc] e.g., "SomeFile.java:243" [iajc] If you don't find the exception below in a bug, please add a new bug [iajc] at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ [iajc] To make the bug a priority, please include a test program [iajc] that can reproduce this exception. [iajc] org.aspectj.weaver.MissingResolvedTypeWithKnownSignature [iajc] when batch building with classpath: ... [iajc] org.aspectj.weaver.MissingResolvedTypeWithKnownSignature [iajc] java.lang.ClassCastException: org.aspectj.weaver.MissingResolvedType WithKnownSignature [iajc] at org.aspectj.weaver.bcel.BcelWorld.addSourceObjectType BcelWor ld.java:277 [iajc] at org.aspectj.weaver.bcel.BcelWeaver.addClassFile BcelWeaver.ja va:373 [iajc] at org.aspectj.weaver.bcel.BcelWeaver.addJarFile BcelWeaver.java :306 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.initBce lWorld AjBuildManager.java:598 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:204 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBu ild AjBuildManager.java:151 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:1 12 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java: 60 [iajc] at org.aspectj.tools.ajc.Main.run Main.java:326 [iajc] at org.aspectj.tools.ajc.Main.runMain Main.java:240 [iajc] at org.aspectj.tools.ajc.Main.main Main.java:83 [iajc] 1 fail|abort I see this also in HEAD and used the debugger to determine it is trying to resolve the type that it's trying to load! I am able to get it to finish the weave with no errors by changing BcelWorld as follows: public BcelObjectType addSourceObjectType JavaClass jc { BcelObjectType ret = null; String signature = UnresolvedType.forName jc.getClassName .getSignature ; ReferenceType nameTypeX = null; Object lookup = typeMap.get signature ; if lookup instanceof ReferenceType { nameTypeX = ReferenceType lookup; } Instead of just casting. Then the result is null and it falls through to the usual lookup unresolved type logic. Is this fix correct? I suspect it would take a few hours to narrow down a test case for this one.</description>
    <commit commitTime="2005-10-13 10:44:13" id="04e8dca2fc16f5f834e124b7abea5847d90c3366"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
      <file>weaver/src/org/aspectj/weaver/World.java</file>
    </fixedFiles>
  </bug>
  <bug id="112458" reportTime="2005-10-13 07:31:00">
    <summary>Property Editor still shows the properties of layout items when switch to Master page viewer.</summary>
    <description>Description: Property Editor still shows the properties of layout items when switch to Master page viewer. Steps to reproduce: 1. New a report and insert a label. 2. Select the label. Property Editor shows label's properties 3. Switch to Master Page. Expected result: Property Editor changs to reflect Master Page properties. Actual result: It still showed the label's properties. This will confuse customers if they thought it as Master Page Editor and set properties without click Master Page viewer at first.</description>
    <commit commitTime="2006-01-10 09:44:47" id="53284da53f628e7c5071b87888f0624aa7528697"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/AllTests15.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/AllTestsAspectJ150.java</file>
      <file>weaver/src/org/aspectj/weaver/TypeFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="112476" reportTime="2005-10-13 09:44:00">
    <summary>"declare parents" does not work with bytecode weaving</summary>
    <description>1. download and unpack http://www.fuurou.org/downloads/aspectjtest.zip I couldn't find a way of attaching it 2. copy the aspectj jars into the lib directory 3. run ant The ant file executes both source code and byte code weaving and then it veryfies that the class hierarchy was changed. As you can see from the output in case of source weaving the test is: [java] Is [class lib.C] subcass of [class weaved.SuperC]? true while when weaving bytecode: [java] Is [class lib.C] subcass of [class weaved.SuperC]? false</description>
    <commit commitTime="2005-11-04 10:47:47" id="a7e13f10303623cbab5f84e8d9cecd882308b52a"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="112514" reportTime="2005-10-13 13:24:00">
    <summary>ajc compile crash, not giving information which class file cause it</summary>
    <description>I run ajc compile on a directory that contains many class file. In the dump file, it doesn't give me information on which class causes the compile to crash. If this information is given, it will be a real big help to find the problem. Is there any configuration that I overlook that might provides better error message? And the dump message is following: ---- AspectJ Properties --- AspectJ Compiler 1.2.1 built on Friday Nov 5, 2004 at 12:30:41 GMT ---- Dump Properties --- Dump file: ajcore.20051012.173235.117.txt Dump reason: org.aspectj.apache.bcel.classfile.ClassFormatException Dump on exception: true Dump at exit condition: abort ---- Exception Information --- org.aspectj.apache.bcel.classfile.ClassFormatException: Invalid byte tag in constant pool: 0 at org.aspectj.apache.bcel.classfile.Constant.readConstant Constant.java:145 at org.aspectj.apache.bcel.classfile.ConstantPool.&amp;lt;init&amp;gt; ConstantPool.java:103 at org.aspectj.apache.bcel.classfile.ClassParser.readConstantPool ClassParser.java:254 at org.aspectj.apache.bcel.classfile.ClassParser.parse ClassParser.java:162 at org.aspectj.weaver.bcel.Utility.makeJavaClass Utility.java:365 at org.aspectj.weaver.bcel.UnwovenClassFile.getJavaClass UnwovenClassFile.java:63 at org.aspectj.weaver.bcel.BcelWeaver.addClassFile BcelWeaver.java:280 at org.aspectj.weaver.bcel.BcelWeaver.addClassFile BcelWeaver.java:295 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.initBcelWorld AjBuildManager.java:533 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:151 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:102 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:109 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:291 at com.fortify.appdefense.cmd.Instrumenter.runWeaver Instrumenter.java:432 at com.fortify.appdefense.cmd.Instrumenter.instrumentClasses Instrumenter.java:400 at com.fortify.appdefense.cmd.Instrumenter.instrumentApplication Instrumenter.java:144 at com.fortify.appdefense.cmd.Instrumenter.instrument Instrumenter.java:118 at com.fortify.appdefense.cmd.Main.run Main.java:207 at com.fortify.appdefense.cmd.Main.main Main.java:177 ---- System Properties --- java.runtime.name=Java TM 2 Runtime Environment, Standard Edition sun.boot.library.path=C:\Program Files\Java\jre1.5.0_04\bin java.vm.version=1.5.0_04-b05 java.vm.vendor=Sun Microsystems Inc. java.vendor.url= http://java.sun.com/ path.separator=; java.vm.name=Java HotSpot TM Client VM file.encoding.pkg=sun.io user.country=US sun.os.patch.level=Service Pack 2 java.vm.specification.name=Java Virtual Machine Specification user.dir=c:\p4sandbox\main\_stage\win32\ADS_EE com.fortify.appdefense.instrumenter.ignoreJars= java.runtime.version=1.5.0_04-b05 java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment java.endorsed.dirs=C:\Program Files\Java\jre1.5.0_04\lib\endorsed os.arch=x86 java.io.tmpdir=C:\DOCUME~1\mxue\LOCALS~1\Temp\ line.separator= java.vm.specification.vendor=Sun Microsystems Inc. user.variant= os.name=Windows XP sun.jnu.encoding=Cp1252 FORTIFY_HOME=c:\p4sandbox\main\_stage\win32\ADS_EE\Core java.library.path=c:\WINDOWS\system32;.;C:\WINDOWS\system32;C:\WINDOWS;C:\cygwin\usr\local\bin;C:\cygwin\bin;C:\cygwin\bin;C:\cygwin\usr\X11R6\bin;c:\WINDOWS\system32;c:\WINDOWS;c:\WINDOWS\System32\Wbem;c:\Program Files\Perforce;C:\cygwin\bin;c:\mysql\bin;c:\Program Files\Microsoft SQL Server\90\Tools\binn\;c:\Program Files\Microsoft Visual Studio 8\Common7\IDE\;c:\Program Files\Microsoft Visual Studio 8\VC\bin;c:\app\apache-ant-1.6.5\bin java.specification.name=Java Platform API Specification java.class.version=49.0 sun.management.compiler=HotSpot Client Compiler os.version=5.1 user.home=C:\Documents and Settings\mxue user.timezone=America/Los_Angeles java.awt.printerjob=sun.awt.windows.WPrinterJob file.encoding=Cp1252 java.specification.version=1.5 java.class.path=;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\activation.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\ad_engine.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\antlr-2.7.5H3.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\appdefense.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\appdefensert.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\asm-attrs.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\asm.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\aspectjrt.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\aspectjtools.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\castor-0.9.5.4.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\cglib-2.1.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\cglib-nodep-2.1_2.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\common.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\commons-codec-1.3.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\commons-collections-3.1.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\commons-dbcp-1.2.1.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\commons-logging-1.0.4.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\commons-pool-1.2.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\dom4j-1.6.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\ehcache-1.1.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\fortify-tools.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\hibernate3.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\hsqldb.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\intellijui.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\jakarta-oro-2.0.8.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\jargs-0.5.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\jdbc2_0-stdext.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\jsp-api.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\jsr173_1.0_api.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\jsr173_1.0_ri.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\jta.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\jug.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\junit.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\JWizardComponent.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\log4j-1.2.9.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\log4j.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\mail.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\servlet-api.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\spring.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\struts.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\xercesImpl-2.6.2.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\xmlParserAPIs-2.6.2.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\config;c:\p4sandbox\main\_stage\win32\ADS_EE\Core user.name=mxue com.fortify.Home=C:\p4sandbox\main\_stage\win32\ADS_EE\Core java.vm.specification.version=1.0 java.home=C:\Program Files\Java\jre1.5.0_04 sun.arch.data.model=32 user.language=en java.specification.vendor=Sun Microsystems Inc. awt.toolkit=sun.awt.windows.WToolkit java.vm.info=mixed mode, sharing java.version=1.5.0_04 java.ext.dirs=C:\Program Files\Java\jre1.5.0_04\lib\ext sun.boot.class.path=C:\Program Files\Java\jre1.5.0_04\lib\rt.jar;C:\Program Files\Java\jre1.5.0_04\lib\i18n.jar;C:\Program Files\Java\jre1.5.0_04\lib\sunrsasign.jar;C:\Program Files\Java\jre1.5.0_04\lib\jsse.jar;C:\Program Files\Java\jre1.5.0_04\lib\jce.jar;C:\Program Files\Java\jre1.5.0_04\lib\charsets.jar;C:\Program Files\Java\jre1.5.0_04\classes java.vendor=Sun Microsystems Inc. file.separator=\ java.vendor.url.bug= http://java.sun.com/cgi-bin/bugreport.cgi sun.io.unicode.encoding=UnicodeLittle sun.cpu.endian=little sun.desktop=windows sun.cpu.isalist= ---- Command Line --- -cp C:\p4sandbox\main\_stage\win32\ADS_EE\Core/lib/aspectjrt.jar;C:\p4sandbox\main\_stage\win32\ADS_EE\Core/lib/struts.jar;C:\p4sandbox\main\_stage\win32\ADS_EE\Core/lib/servlet-api.jar;C:\p4sandbox\main\_stage\win32\ADS_EE\Core/lib/jsp-api.jar;;C:\DOCUME~1\mxue\LOCALS~1\Temp\fortify47533.tmp\_libraries\activation.jar;C:\DOCUME~1\mxue\LOCALS~1\Temp\fortify47533.tmp\_libraries\jTDS2.jar;C:\DOCUME~1\mxue\LOCALS~1\Temp\fortify47533.tmp\_libraries\jconn2.jar;C:\DOCUME~1\mxue\LOCALS~1\Temp\fortify47533.tmp\_libraries\ldapfilt.jar;C:\DOCUME~1\mxue\LOCALS~1\Temp\fortify47533.tmp\_libraries\ldapjdk.jar;C:\DOCUME~1\mxue\LOCALS~1\Temp\fortify47533.tmp\_libraries\mail.jar -inpath C:\DOCUME~1\mxue\LOCALS~1\Temp\fortify47533.tmp\original_archive\WEB-INF\classes -d C:\DOCUME~1\mxue\LOCALS~1\Temp\fortify47533.tmp\original_archive\WEB-INF\classes -aspectpath C:\p4sandbox\main\_stage\win32\ADS_EE\Core/lib/appdefensert.jar -showWeaveInfo ---- Full Classpath --- Empty ---- Compiler Messages --- info zipfile classpath entry does not exist: C:\Program Files\Java\jre1.5.0_04\lib\i18n.jar info zipfile classpath entry does not exist: C:\Program Files\Java\jre1.5.0_04\lib\sunrsasign.jar info directory classpath entry does not exist: C:\Program Files\Java\jre1.5.0_04\classes abort ABORT -- ClassFormatException Invalid byte tag in constant pool: 0 Invalid byte tag in constant pool: 0 org.aspectj.apache.bcel.classfile.ClassFormatException: Invalid byte tag in constant pool: 0 at org.aspectj.apache.bcel.classfile.Constant.readConstant Constant.java:145 at org.aspectj.apache.bcel.classfile.ConstantPool.&amp;lt;init&amp;gt; ConstantPool.java:103 at org.aspectj.apache.bcel.classfile.ClassParser.readConstantPool ClassParser.java:254 at org.aspectj.apache.bcel.classfile.ClassParser.parse ClassParser.java:162 at org.aspectj.weaver.bcel.Utility.makeJavaClass Utility.java:365 at org.aspectj.weaver.bcel.UnwovenClassFile.getJavaClass UnwovenClassFile.java:63 at org.aspectj.weaver.bcel.BcelWeaver.addClassFile BcelWeaver.java:280 at org.aspectj.weaver.bcel.BcelWeaver.addClassFile BcelWeaver.java:295 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.initBcelWorld AjBuildManager.java:533 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:151 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:102 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:109 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:291 at com.fortify.appdefense.cmd.Instrumenter.runWeaver Instrumenter.java:432 at com.fortify.appdefense.cmd.Instrumenter.instrumentClasses Instrumenter.java:400 at com.fortify.appdefense.cmd.Instrumenter.instrumentApplication Instrumenter.java:144 at com.fortify.appdefense.cmd.Instrumenter.instrument Instrumenter.java:118 at com.fortify.appdefense.cmd.Main.run Main.java:207 at com.fortify.appdefense.cmd.Main.main Main.java:177 ---- org.aspectj.weaver.bcel.BcelWorld ---- Shadow mungers: around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.UnhandledException &amp;amp;&amp;amp; execution void javax.servlet.http.HttpServlet.* javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse &amp;amp;&amp;amp; args BindingTypePattern javax.servlet.http.HttpServletRequest, 0 , BindingTypePattern javax.servlet.http.HttpServletResponse, 1 -&amp;gt;void com.fortify.appdefense.runtime.aspects.UnhandledException.ajc$around$com_fortify_appdefense_runtime_aspects_UnhandledException$1$29b5f492 javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.UnhandledException &amp;amp;&amp;amp; execution org.apache.struts.action.ActionForward org.apache.struts.action.Action.* org.apache.struts.action.ActionMapping, org.apache.struts.action.ActionForm, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse &amp;amp;&amp;amp; args BindingTypePattern org.apache.struts.action.ActionMapping, 0 , BindingTypePattern org.apache.struts.action.ActionForm, 1 , BindingTypePattern javax.servlet.http.HttpServletRequest, 2 , BindingTypePattern javax.servlet.http.HttpServletResponse, 3 -&amp;gt;org.apache.struts.action.ActionForward com.fortify.appdefense.runtime.aspects.UnhandledException.ajc$around$com_fortify_appdefense_runtime_aspects_UnhandledException$2$5d7db7b0 org.apache.struts.action.ActionMapping, org.apache.struts.action.ActionForm, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.SQLInjection &amp;amp;&amp;amp; call java.sql.ResultSet java.sql.Statement.executeQuery java.lang.String &amp;amp;&amp;amp; args BindingTypePattern java.lang.String, 0 -&amp;gt;java.sql.ResultSet com.fortify.appdefense.runtime.aspects.SQLInjection.ajc$around$com_fortify_appdefense_runtime_aspects_SQLInjection$1$6ee9ac24 java.lang.String, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void javax.servlet.ServletContext.log java.lang.String &amp;amp;&amp;amp; args BindingTypePattern java.lang.String, 0 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$1$7a5aaa2a java.lang.String, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void javax.servlet.ServletContext.log java.lang.String, java.lang.Throwable &amp;amp;&amp;amp; args BindingTypePattern java.lang.String, 0 , BindingTypePattern java.lang.Throwable, 1 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$2$3b51861a java.lang.String, java.lang.Throwable, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.lang.System.setOut java.io.PrintStream &amp;amp;&amp;amp; args BindingTypePattern java.io.PrintStream, 0 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$3$ea55ab8a java.io.PrintStream, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.lang.System.setErr java.io.PrintStream &amp;amp;&amp;amp; args BindingTypePattern java.io.PrintStream, 0 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$4$14017ea1 java.io.PrintStream, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.util.logging.Logger.info java.lang.String &amp;amp;&amp;amp; args BindingTypePattern java.lang.String, 0 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$5$426f2ff4 java.lang.String, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.util.logging.Logger.log java.util.logging.Level, java.lang.String &amp;amp;&amp;amp; args BindingTypePattern java.util.logging.Level, 0 , BindingTypePattern java.lang.String, 1 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$6$765ad887 java.util.logging.Level, java.lang.String, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.util.logging.Logger.log java.util.logging.Level, java.lang.String, java.lang.Object &amp;amp;&amp;amp; args BindingTypePattern java.util.logging.Level, 0 , BindingTypePattern java.lang.String, 1 , BindingTypePattern java.lang.Object, 2 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$7$44505c35 java.util.logging.Level, java.lang.String, java.lang.Object, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.util.logging.Logger.log java.util.logging.Level, java.lang.String, java.lang.Object[] &amp;amp;&amp;amp; args BindingTypePattern java.util.logging.Level, 0 , BindingTypePattern java.lang.String, 1 , BindingTypePattern java.lang.Object[], 2 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$8$c880a936 java.util.logging.Level, java.lang.String, java.lang.Object[], org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.util.logging.Logger.log java.util.logging.Level, java.lang.String, java.lang.Throwable &amp;amp;&amp;amp; args BindingTypePattern java.util.logging.Level, 0 , BindingTypePattern java.lang.String, 1 , BindingTypePattern java.lang.Throwable, 2 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$9$4cb0f637 java.util.logging.Level, java.lang.String, java.lang.Throwable, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.util.logging.Logger.logp java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String &amp;amp;&amp;amp; args BindingTypePattern java.util.logging.Level, 0 , BindingTypePattern java.lang.String, 1 , BindingTypePattern java.lang.String, 2 , BindingTypePattern java.lang.String, 3 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$10$bf9e1536 java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.util.logging.Logger.logp java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Object &amp;amp;&amp;amp; args BindingTypePattern java.util.logging.Level, 0 , BindingTypePattern java.lang.String, 1 , BindingTypePattern java.lang.String, 2 , BindingTypePattern java.lang.String, 3 , BindingTypePattern java.lang.Object, 4 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$11$a907c742 java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Object, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.util.logging.Logger.logp java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Object[] &amp;amp;&amp;amp; args BindingTypePattern java.util.logging.Level, 0 , BindingTypePattern java.lang.String, 1 , BindingTypePattern java.lang.String, 2 , BindingTypePattern java.lang.String, 3 , BindingTypePattern java.lang.Object[], 4 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$12$d6e061a1 java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Object[], org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.util.logging.Logger.logp java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Throwable &amp;amp;&amp;amp; args BindingTypePattern java.util.logging.Level, 0 , BindingTypePattern java.lang.String, 1 , BindingTypePattern java.lang.String, 2 , BindingTypePattern java.lang.String, 3 , BindingTypePattern java.lang.Throwable, 4 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$13$4b8fc00 java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Throwable, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.util.logging.Logger.logrb java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String &amp;amp;&amp;amp; args BindingTypePattern java.util.logging.Level, 0 , BindingTypePattern java.lang.String, 1 , BindingTypePattern java.lang.String, 2 , BindingTypePattern java.lang.String, 3 , BindingTypePattern java.lang.String, 4 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$14$ab6fcbcf java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.util.logging.Logger.logrb java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Object &amp;amp;&amp;amp; args BindingTypePattern java.util.logging.Level, 0 , BindingTypePattern java.lang.String, 1 , BindingTypePattern java.lang.String, 2 , BindingTypePattern java.lang.String, 3 , BindingTypePattern java.lang.String, 4 , BindingTypePattern java.lang.Object, 5 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$15$c8323e5b java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Object, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.util.logging.Logger.logrb java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Object[] &amp;amp;&amp;amp; args BindingTypePattern java.util.logging.Level, 0 , BindingTypePattern java.lang.String, 1 , BindingTypePattern java.lang.String, 2 , BindingTypePattern java.lang.String, 3 , BindingTypePattern java.lang.String, 4 , BindingTypePattern java.lang.Object[], 5 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$16$4693423a java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Object[], org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.util.logging.Logger.logrb java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Throwable &amp;amp;&amp;amp; args BindingTypePattern java.util.logging.Level, 0 , BindingTypePattern java.lang.String, 1 , BindingTypePattern java.lang.String, 2 , BindingTypePattern java.lang.String, 3 , BindingTypePattern java.lang.String, 4 , BindingTypePattern java.lang.Throwable, 5 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$17$c4f44619 java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Throwable, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void org.apache.log4j.Logger.warn java.lang.Object || call void org.apache.log4j.Logger.debug java.lang.Object || call void org.apache.log4j.Logger.info java.lang.Object || call void org.apache.log4j.Logger.error java.lang.Object || call void org.apache.log4j.Logger.fatal java.lang.Object &amp;amp;&amp;amp; args BindingTypePattern java.lang.Object, 0 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$18$e4a81d46 java.lang.Object, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.CrossSiteScripting &amp;amp;&amp;amp; call java.lang.String java.sql.ResultSet+.getString .. -&amp;gt;java.lang.String com.fortify.appdefense.runtime.aspects.CrossSiteScripting.ajc$around$com_fortify_appdefense_runtime_aspects_CrossSiteScripting$1$e6d7e248 org.aspectj.runtime.internal.AroundClosure Type mungers: BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void javax.servlet.http.HttpServletRequest. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void javax.servlet.http.HttpServletResponse. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void org.apache.struts.action.ActionMapping. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void org.apache.struts.action.ActionForm. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void javax.servlet.http.HttpServletRequest. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void javax.servlet.http.HttpServletResponse. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.Throwable. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.io.PrintStream. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.io.PrintStream. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.util.logging.Level. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.util.logging.Level. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.Object. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.util.logging.Level. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.Object[]. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.util.logging.Level. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.Throwable. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.util.logging.Level. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.util.logging.Level. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.Object. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.util.logging.Level. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.Object[]. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.util.logging.Level. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.Throwable. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.util.logging.Level. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.util.logging.Level. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.Object. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.util.logging.Level. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.Object[]. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.util.logging.Level. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.Throwable. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.Object.</description>
    <commit commitTime="2005-10-14 08:39:32" id="999d9b0c88d4cae8f94025a09641343714cf5d83"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/ClassParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="112529" reportTime="2005-10-13 14:20:00">
    <summary>NullPointerException during build from Eclipse 3.1</summary>
    <description>Using the same AspectJ from an ANT task, has no problems. But form within Eclipse every compile results in the error below. I feel this is a major problem, escpecially since it is M4. java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1015 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:300 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:178 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspect j_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:759 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:249 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:158 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 NullPointerException thrown: null</description>
    <commit commitTime="2005-10-14 08:17:53" id="4aad0473b4681fab8e2f73515c48fc30943fc847"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="112602" reportTime="2005-10-14 04:13:00">
    <summary>ClassCastException with generic wildcard</summary>
    <description>I'm using AJDT dev build 20051012172335 and am getting the following error : java.lang.ClassCastException at org.aspectj.weaver.World.resolveGenericWildcardFor World.java:369 at org.aspectj.weaver.World.resolveToReferenceType World.java:284 at org.aspectj.weaver.World.resolve World.java:209 at org.aspectj.weaver.World.resolve World.java:131 at org.aspectj.weaver.World.resolve World.java:162 at org.aspectj.weaver.TypeFactory.createParameterizedType TypeFactory.java:47 at org.aspectj.weaver.World.resolveToReferenceType World.java:273 at org.aspectj.weaver.World.resolve World.java:209 at org.aspectj.weaver.World.resolve World.java:131 at org.aspectj.weaver.UnresolvedType.resolve UnresolvedType.java:636 at org.aspectj.weaver.ResolvedMemberImpl.resolve ResolvedMemberImpl.java:429 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember EclipseFactory.java:475 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember EclipseFactory.java:424 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.genBytecodeInfo AsmHierarchyBuilder.java:525 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.visit AsmHierarchyBuilder.java:400 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse MethodDeclaration.java:185 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse TypeDeclaration.java:1183 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse CompilationUnitDeclaration.java:339 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.internalBuild AsmHierarchyBuilder.java:142 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.buildStructureForCompilationUnit AsmHierarchyBuilder.java:82 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishedCompilationUnit EclipseFactory.java:720 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing AjCompilerAdapter.java:195 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$4$6b855184 CompilerAdapter.aj:89 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:528 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:759 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:249 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:158 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 ClassCastException thrown: org.aspectj.weaver.MissingResolvedTypeWithKnownSignature the following is my test classes : public interface GenericInterface&amp;lt;O&amp;gt; { public O doSomething Class&amp;lt;? extends O&amp;gt; type ; } the implementation of the above interface : import java.util.Collection; public class Implementation implements GenericInterface&amp;lt;Collection&amp;lt;?&amp;gt;&amp;gt;{ public Collection&amp;lt;?&amp;gt; doSomething Class&amp;lt;? extends Collection&amp;lt;?&amp;gt;&amp;gt; type { return null; } } granted, the Class&amp;lt;? extends O&amp;gt; in the interface is probably unnecessary for this example, but still this *is* valid Java and the same problem probably surfaces in similar valid circumstances.</description>
    <commit commitTime="2005-10-17 10:09:45" id="9d4353100afe702ed324dcc5e297f1216bc08caa"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="112615" reportTime="2005-10-14 08:26:00">
    <summary>-XhasMember is not processed correctly when passed from AJDT</summary>
    <description>To test this in AJDT install the bean example, add a new interface called I and then add the following line to BoundPoint.aj: declare parents: hasmethod * set* .. implements I; Now open the AspectJ Compiler preference page and select "Has Member" on the advanced tab. Click OK, rebuild and if the option was working the project would build correctly. As it stands there is an error: the type pattern hasmethod * set* .. can only be used when the -XhasMember option is set</description>
    <commit commitTime="2005-10-25 12:40:39" id="cc6862f2b54c3333d645a0efb28f5366b0a2bcc3"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/BuildConfigurationTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="112736" reportTime="2005-10-15 14:15:00">
    <summary>Bogus Compiler Warnings when Converting file extensions</summary>
    <description>If you convert file extensions between .aj and .java, the compiler doesn't properly clear its symbol table, generating bogus warnings about conflicting inter-type declarations. It should avoid this. Work around: full rebuild. See screenshot for an example. After recompiling the "errors" go away...</description>
    <commit commitTime="2005-11-25 14:56:21" id="361757b0fcfc845efaa75ed062e9a6178d050764"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="112756" reportTime="2005-10-16 23:56:00">
    <summary>ajdt compiler generate false warnings</summary>
    <description>I was working on aspect that should raise an error for junit test methods that didn't use any assertions. Apparently I had to use pointcut like "call void Assert+.assert* .. " on which ajdt compiler complained about using "assert" keyword. I don't think such warning should be shown in such case. Anyway, here is the complete aspect code. import junit.framework.Test; import junit.framework.Assert; import junit.framework.AssertionFailedError; public aspect AssertionCounter { private ThreadLocal counts = new ThreadLocal ; public pointcut testMethodExecution : execution void Test+.test* ; public pointcut assertCall : cflow testMethodExecution &amp;amp;&amp;amp; call void Assert+.assert* .. ; void around : testMethodExecution { counts.set new Counter ; proceed ; if Counter counts.get .getCount ==0 { throw new AssertionFailedError "No assertions had been called" ; } } before : assertCall { Counter counts.get .inc ; } }</description>
    <commit commitTime="2005-11-09 10:37:51" id="7a1002aba3960caddb4c50ef7e66cc9ac6fb1f58"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="112783" reportTime="2005-10-17 09:27:00">
    <summary>Problem with constructor ITDs</summary>
    <description>The following program produces a NullPointerException when built: public aspect ConstructorInjection { public NotYetABean.new { this new Long 1 ; } } public class NotYetABean { public NotYetABean Long l { } } The Exception: java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.lookup.OwningClassSupportForMethodBindings.a jc$interMethodDispatch1 $org_aspectj_ajdt_internal_compiler_lookup_OwningClassSupportForMethodBindings$ org_aspectj_org_eclipse_jdt_internal_compiler_lookup_MethodBinding$getOwningCla ss OwningClassSupportForMethodBindings.aj at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AllocationExpression.declarin gClass_aroundBody5$advice AllocationExpression.java:171 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AllocationExpression.generate Code AllocationExpression.java:97 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.ArrayInitializer.generateCode ArrayInitializer.java:99 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression.gen erateCode ArrayAllocationExpression.java:62 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.ReturnStatement.generateCode ReturnStatement.java:116 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.gen erateCode AbstractMethodDeclaration.java:226 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.gen erateCode AbstractMethodDeclaration.java:173 at org.aspectj.ajdt.internal.compiler.ast.InterTypeConstructorDeclaration.generate Code InterTypeConstructorDeclaration.java:282 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode TypeDeclaration.java:567 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.generateCode AspectDeclaration.java:279 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode TypeDeclaration.java:628 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.ge nerateCode CompilationUnitDeclaration.java:184 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:520 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:759 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:249 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:158 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191</description>
    <commit commitTime="2005-11-07 10:54:42" id="297b594087644bf3566a865584766f8410ca4286"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>tests/bugs150/pr113066/Consts.java</file>
    </fixedFiles>
  </bug>
  <bug id="112830" reportTime="2005-10-17 14:01:00">
    <summary>Warning "couldn't find aspectjrt.jar on classpath"</summary>
    <description>The compiler makes this warning if "aspectrt.jar" file has a different name like "aspectrt-1.3.jar", which is the case when compiling with maven.</description>
    <commit commitTime="2005-11-08 16:41:54" id="1f5149913ee859e466602f99a210dd76e0ade8ed"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="113066" reportTime="2005-10-19 08:28:00">
    <summary>NullPointerException when compiling project</summary>
    <description>Hello, Sorry by my english. It´s very, very bad. The error is: when I try to compile my project I receive the following error: ------------------------------------------------------------------------------ [ajc] C:\GrupoStela\cgee\Integracao Continua\empresa\temp_src\br\org\cgee\inovacao\favoritos\controle\dao\favoritoRe sultado\FavoritoResultadoDAOImpl.java [error] Internal compiler error [ajc] java.lang.NullPointerException [ajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.FieldBinding.canBeSeenBy FieldBinding.java:144 [ajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.FieldBinding.getVisibleBind ing FieldBinding.java:324 [ajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.findField Scope.java:814 [ajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.findSi ngleStaticImport CompilationUnitScope.java:482 [ajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.findSi ngleImport CompilationUnitScope.java:465 [ajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.faultI nImports CompilationUnitScope.java:331 [ajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.faultI nTypes CompilationUnitScope.java:400 [ajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:507 [ajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 [ajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:759 [ajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:225 [ajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:151 [ajc] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 [ajc] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 [ajc] at org.aspectj.tools.ajc.Main.run Main.java:326 [ajc] at org.aspectj.tools.ant.taskdefs.Ajc10.spoon Ajc10.java:598 [ajc] at org.aspectj.tools.ant.taskdefs.Ajc10.execute Ajc10.java:484 [ajc] at org.apache.tools.ant.UnknownElement.execute UnknownElement.java:275 [ajc] at org.apache.tools.ant.Task.perform Task.java:364 [ajc] at org.apache.tools.ant.Target.execute Target.java:341 [ajc] at org.apache.tools.ant.Target.performTasks Target.java:369 [ajc] at org.apache.tools.ant.Project.executeSortedTargets Project.java:1216 [ajc] at org.apache.tools.ant.Project.executeTarget Project.java:1185 [ajc] at org.apache.tools.ant.helper.DefaultExecutor.executeTargets DefaultExecutor.java:40 [ajc] at org.apache.tools.ant.Project.executeTargets Project.java:1068 [ajc] at org.apache.tools.ant.Main.runBuild Main.java:668 [ajc] at org.apache.tools.ant.Main.startAnt Main.java:187 [ajc] at org.apache.tools.ant.launch.Launcher.run Launcher.java:246 [ajc] at org.apache.tools.ant.launch.Launcher.main Launcher.java:67 [ajc] [ajc] no source information available [ajc] ABORT [ajc] [ajc] Exception thrown from AspectJ 1.5.0M4 [ajc] [ajc] This might be logged as a bug already -- find current bugs at [ajc] http://bugs.eclipse.org/bugs/buglist.cgi ? product=AspectJ&amp;amp;component=Compiler [ajc] [ajc] Bugs for exceptions thrown have titles File:line from the top stack, [ajc] e.g., "SomeFile.java:243" [ajc] [ajc] If you don't find the exception below in a bug, please add a new bug [ajc] at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ [ajc] To make the bug a priority, please include a test program [ajc] that can reproduce this exception. [ajc] [ajc] when processing compilation unit C:\GrupoStela\cgee\Integracao Continua\empresa\temp_src\br\org\cgee\inovacao\favoritos\controle\dao\favoritoRe sultado\FavoritoResultadoDAOImpl.java [ajc] when batch building with classpath: C:\Arquivos de programas\Java\jdk1.5.0_04\jre\lib\ext\dnsns.jar;C:\Arquivos de programas\Java\jdk1.5.0_04\jre\lib\ext\localedata.jar;C:\Arquivos de programas\Java\jdk1.5.0_04\jre\lib\ext\sunjce_provider.jar;C:\Arquivos de programas\Java\jdk1.5.0_04 \jre\lib\ext\sunpkcs11.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\AspectjLogger.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\CargaXMLEmpresa.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\FWStelaDataSet.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\FWStelaDynApi.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\StelaMail.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\StelaTextGenerator.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\activation.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\ajl.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\ant.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\aspectjrt.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\catalina-optional.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\catalina.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\classes12.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\commons-beanutils.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\commons-collections- 3.1.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\commons- collections.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\commons- dbcp-1.2.1.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\commons- digester.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\commons- el.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\commons- logging.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\commons- modeler.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\commons- pool-1.2.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\jakarta- regexp-1.3.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\jasper- compiler.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\jasper- runtime.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\jsp- api.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\logUsuario.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\mail.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\mini-concurrent.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\mini-j2ee.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\mx4j-jmx.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\naming-common.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\naming-factory.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\naming-java.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\naming-resources.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\ojdbc14.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\saxon8.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\servlet-api.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\servlets-common.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\servlets-default.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\servlets-invoker.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\tomcat-coyote.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\tomcat-http11.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\tomcat-jk2.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\tomcat-util.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\velocity-1.4.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\velocity-dep-1.4.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\winstone_v0.6.4.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\xalan.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\temp_lib\xml-apis.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\aspectjlogger\AspectjLogger.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\aspectjlogger\aspectjrt.jar;C:\GrupoStela\cgee\Integracao Continua\empresa\aspectjlogger\junit.jar; [ajc] null [ajc] java.lang.NullPointerException [ajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.FieldBinding.canBeSeenBy FieldBinding.java:144 [ajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.FieldBinding.getVisibleBind ing FieldBinding.java:324 [ajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.findField Scope.java:814 [ajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.findSi ngleStaticImport CompilationUnitScope.java:482 [ajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.findSi ngleImport CompilationUnitScope.java:465 [ajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.faultI nImports CompilationUnitScope.java:331 [ajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.faultI nTypes CompilationUnitScope.java:400 [ajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:507 [ajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 [ajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:759 [ajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:225 [ajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:151 [ajc] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 [ajc] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 [ajc] at org.aspectj.tools.ajc.Main.run Main.java:326 [ajc] at org.aspectj.tools.ant.taskdefs.Ajc10.spoon Ajc10.java:598 [ajc] at org.aspectj.tools.ant.taskdefs.Ajc10.execute Ajc10.java:484 [ajc] at org.apache.tools.ant.UnknownElement.execute UnknownElement.java:275 [ajc] at org.apache.tools.ant.Task.perform Task.java:364 [ajc] at org.apache.tools.ant.Target.execute Target.java:341 [ajc] at org.apache.tools.ant.Target.performTasks Target.java:369 [ajc] at org.apache.tools.ant.Project.executeSortedTargets Project.java:1216 [ajc] at org.apache.tools.ant.Project.executeTarget Project.java:1185 [ajc] at org.apache.tools.ant.helper.DefaultExecutor.executeTargets DefaultExecutor.java:40 [ajc] at org.apache.tools.ant.Project.executeTargets Project.java:1068 [ajc] at org.apache.tools.ant.Main.runBuild Main.java:668 [ajc] at org.apache.tools.ant.Main.startAnt Main.java:187 [ajc] at org.apache.tools.ant.launch.Launcher.run Launcher.java:246 [ajc] at org.apache.tools.ant.launch.Launcher.main Launcher.java:67 ------------------------------------------------------------------------------ The code that launch de error is: ------------------------------------------------------------------------------ package br.org.cgee.inovacao.favoritos.controle.dao.favoritoResultado; import static br.org.cgee.inovacao.favoritos.controle.dao.favoritoResultado.FavoritoResultadoC onsts.SQL_DELETE_BY_PRIMARY_KEY; import static br.org.cgee.inovacao.favoritos.controle.dao.favoritoResultado.FavoritoResultadoC onsts.SQL_DELETE_BY_SEQ_ID_FAVORITO; import static br.org.cgee.inovacao.favoritos.controle.dao.favoritoResultado.FavoritoResultadoC onsts.SQL_INSERT; import static br.org.cgee.inovacao.favoritos.controle.dao.favoritoResultado.FavoritoResultadoC onsts.SQL_SELECT_BY_SEQ_ID_FAVORITO; import static br.org.cgee.inovacao.favoritos.controle.dao.favoritoResultado.FavoritoResultadoC onsts.SQL_UPDATE_BY_SEQ_ID_RESULTADO; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.Statement; import java.util.LinkedList; import java.util.List; import br.org.cgee.inovacao.favoritos.modelo.Favorito; import br.org.cgee.inovacao.favoritos.modelo.FavoritoResultado; import br.org.cgee.inovacao.favoritos.util.ConnectionFactory; /** * &amp;lt;p&amp;gt;Title: Implementação da interface FavoritoResultadoDAO&amp;lt;/p&amp;gt; * &amp;lt;p&amp;gt;Description: Classe que implementa a interface FavoritoResultadoDAO para realizar o CRUD create, read, update e delete na * entidade FavoritoResultado. Esta classe não deve ser instanciada diretamente, deve-se utilizar a interface * FavoritoResultadoDAO e obter uma implementação através da factory br.org.cgee.inovacao.favoritos.fao.DAOFactory. * &amp;lt;/p&amp;gt; * Exemplo: * &amp;lt;/p&amp;gt; * FavoritoResultadoDAO objFavoritoResultado = * DAOFactory.newInstance .getFavoritoResultadoDAO ; * * &amp;lt;/p&amp;gt; * &amp;lt;p&amp;gt;Copyright: Copyright c 2005&amp;lt;/p&amp;gt; * &amp;lt;p&amp;gt;Company: Institulo Stela&amp;lt;/p&amp;gt; * @see Favorito * @author Alessandro * @version 1.0 */ public class FavoritoResultadoDAOImpl implements FavoritoResultadoDAO { private Connection conexao; private boolean isTx; /** * Construtor default */ public FavoritoResultadoDAOImpl { this.isTx = false; } /** * Construtor que aceita uma Connection. Deve ser usado quando for necessário controle de transação * * @param contTx uma conexão com "autoCommit" igual a false */ public FavoritoResultadoDAOImpl Connection conTx { this.conexao = conTx; this.isTx = true; } /** * Recupera uma instância da entidade FavoritoResultado a partir de seus * dois campos de identificação: seqIdFavorito e seqIdResultadoBusca * * @param seqIdFavorito um dos campos de identificação de FavoritoResultado * @param seqIdResultadoBusca um dos campos de identificação de FavoritoResultado * @return objeto que representa a entidade FavoritoResultado * @throws FavoritoResultadoDAOException qualquer erro ocorrido * @see FavoritoResultado */ public List&amp;lt;FavoritoResultado&amp;gt; read int seqIdFavorito throws FavoritoResultadoDAOException { List&amp;lt;FavoritoResultado&amp;gt; lista = new LinkedList&amp;lt;FavoritoResultado&amp;gt; ; PreparedStatement pst = null; ResultSet rs = null; try { this.carregarConexao ; pst = this.conexao.prepareStatement SQL_SELECT_BY_SEQ_ID_FAVORITO ; pst.setInt 1, seqIdFavorito ; rs = pst.executeQuery ; while rs.next lista.add new FavoritoResultado seqIdFavorito, rs.getInt "SEQ_ID_RESULTADO_BUSCA" ; } catch Exception e { throw new FavoritoResultadoDAOException "Erro em " + this.getClass .getName + ".read int seqIdFavorito : " + e.toString , e ; }finally { this.liberarRecursos rs, pst ; this.liberarConexao ; } return lista; } /** * Persiste uma instância da entidade FavoritoResultado * * @param entidade objeto que representa a entidade FavoritoResultado * @throws FavoritoResultadoDAOException qualquer erro ocorrido * @see FavoritoResultado */ public void create FavoritoResultado entidade throws FavoritoResultadoDAOException { PreparedStatement pst = null; try{ this.carregarConexao ; pst = this.conexao.prepareStatement SQL_INSERT ; pst.setInt 1, entidade.getSeqIdFavorito ; pst.setInt 2, entidade.getSeqIdResultadoBusca ; pst.executeUpdate ; this.commit ; }catch Exception e { this.rollBack ; throw new FavoritoResultadoDAOException "Erro em " + this.getClass .getName + ".create FavoritoResultado entidade ", e ; }finally { this.liberarRecursos pst ; this.liberarConexao ; } } /** * Atualiza uma instância da entidade FavoritoResultado * * @param entidade objeto que representa a entidade FavoritoResultado * @throws FavoritoResultadoDAOException qualquer erro ocorrido * @see FavoritoResultado */ public void update FavoritoResultado entidade throws FavoritoResultadoDAOException { PreparedStatement pst = null; try{ this.carregarConexao ; pst = this.conexao.prepareStatement SQL_UPDATE_BY_SEQ_ID_RESULTADO ; pst.setInt 1, entidade.getSeqIdFavorito ; // Campo a ser atualizado pst.setInt 2, entidade.getSeqIdResultadoBusca ; // Campo usado para localizar o registro pst.executeUpdate ; this.commit ; }catch Exception e { throw new FavoritoResultadoDAOException e ; }finally { this.liberarRecursos pst ; this.liberarConexao ; } } /** * Exclui uma instância da entidade FavoritoResultado a partir de seus * dois campos de identificação: seqIdFavorito e seqIdResultadoBusca * * @param seqIdFavorito um dos campos de identificação de FavoritoResultado * @param seqIdResultadoBusca um dos campos de identificação de FavoritoResultado * @throws FavoritoResultadoDAOException qualquer erro ocorrido * @see FavoritoResultado */ public void delete int seqIdFavorito, int seqIdResultadoBusca throws FavoritoResultadoDAOException { PreparedStatement pst = null; try{ this.carregarConexao ; pst = this.conexao.prepareStatement SQL_DELETE_BY_PRIMARY_KEY ; pst.setInt 1, seqIdFavorito ; pst.setInt 2, seqIdResultadoBusca ; pst.executeUpdate ; this.commit ; }catch Exception e { throw new FavoritoResultadoDAOException "Erro em " + this.getClass .getName + ".delete int seqIdFavorito, int seqIdResultadoBusca ", e ; }finally { this.liberarRecursos pst ; this.liberarConexao ; } } public void delete int seqIdFavorito throws FavoritoResultadoDAOException { PreparedStatement pst = null; try{ this.carregarConexao ; pst = this.conexao.prepareStatement SQL_DELETE_BY_SEQ_ID_FAVORITO ; pst.setInt 1, seqIdFavorito ; pst.executeUpdate ; this.commit ; }catch Exception e { throw new FavoritoResultadoDAOException "Erro em " + this.getClass .getName + ".delete int seqIdFavorito ",e ; }finally { this.liberarRecursos pst ; this.liberarConexao ; } } /** * Realiza o commit. Só realmente realizará o commit quando a operação realizada não fizer * parte uma transação. Isso ocorre quando um objeto desta classe é instanciado com o construtor default. * * @throws qualquer erro ocorrido */ private void commit throws Exception { if !this.isTx this.conexao.commit ; } /** * Realiza o rollback. Só realmente realizará o rollback quando a operação realizada não fizer * parte uma transação. Isso ocorre quando um objeto desta classe é instanciado com o construtor default. * */ private void rollBack { try { if !this.isTx this.conexao.rollback ; } catch Exception e {} } /** * Carrega uma conexao do pool. Só realmente carregará essa conexao se operação a ser realizada não fizer * parte uma transação. Isso ocorre quando um objeto desta classe é instanciado com o construtor default. * * @throws qualquer erro ocorrido */ private void carregarConexao throws Exception { if !this.isTx this.conexao = ConnectionFactory.getConnection ; } /** * Libera a conexao para o pool. Isso só realmente ocorrerá se a operação que está sendo realizada não fizer * parte uma transação. Isso ocorre quando um objeto desta classe é instanciado com o construtor default. */ private void liberarConexao { try { if !this.isTx ConnectionFactory.liberarConnection this.conexao ; } catch Exception e {} } /** * Libera os recursos utilizados no acesso ao banco de dados. * * @param rs objeto ResultSet * @param st objeto Statement * * @see java.sql.ResultSet * @see java.sql.Statement */ private void liberarRecursos ResultSet rs, Statement st { try { if rs != null { rs.close ; rs = null; } if st != null { st.close ; st = null; } } catch Exception ex {} } /** * Libera o objeto statement utilizado no acesso ao banco de dados * * @param st objeto Statement * * @see Statement */ private void liberarRecursos Statement st { try { if st != null { st.close ; st = null; } } catch Exception ex {} } } ------------------------------------------------------------------------------ Thanks, Lucas Nazário</description>
    <commit commitTime="2005-11-07 08:33:35" id="85cde56e2795a70ddc79e59a74652b66218385e0"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="113073" reportTime="2005-10-19 09:24:00">
    <summary>weaveinfo messages not reported if applying declare @method on an ITD'd method</summary>
    <description>Given the following class: @interface Annotation{} aspect B { declare @method : public * C.anotherMethod .. : @Annotation; } class C { } aspect D { public void C.anotherMethod String s { } public void C.anotherMethod { } } I would expect a two weaveinfo messages of the form: weaveinfo 'public void C.anotherMethod ' pr99191_4.java is annotated with @Annotation method annotation from 'B' pr99191_4.java:3 weaveinfo 'public void C.anotherMethod String ' pr99191_4.java is annotated with @Annotation method annotation from 'B' pr99191_4.java:3 However, only the two "intertyped" messages are coming out.</description>
    <commit commitTime="2005-10-20 13:54:50" id="f06df41e4038bbde47a9934b240a3c064aa26099"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="113118" reportTime="2005-10-19 14:01:00">
    <summary>ClassFormatException with tracing aspect</summary>
    <description>Build id: 20051017111807 AspectJ version: 1.5.0.200510141300 The following aspect resulted in the CFE: public aspect CallTrace { /** * A marker interface used to pick the classes to trace. Declare any class you want to * trace to implement this interface. The best way is using an aspect like the one in * the class comment block above. */ public static interface Traced {} /** * A marker annoation, can be used instead of {@link Traced}. */ @Documented @Retention RetentionPolicy.RUNTIME @Target {ElementType.TYPE, ElementType.ANNOTATION_TYPE} public @interface TracedAnno {} private static Level level = Level.INFO; /** * Set the global logging level used for reporting traced calls. Defaults to INFO. * @param newLevel */ public static void setLevel Level newLevel { level = newLevel; } /** * @return the Level used for writing traced output. */ public static Level getLevel { return level; } private static Logger log = Logger.getLogger Traced.class ; private int nesting = 0; private static StringBuffer prefixStr = null; static { new StringBuffer 1024 ; for int i=0; i&amp;lt;128; i++ { // stuff with "+". prefixStr.append "++++++++" ; } } public pointcut exclusions : within CallTrace || within *Tracer ; // Distinguish between initialization JPs and other method calls, to work // around AJ limitation that around advice isn't supported for initializations. public pointcut traceIntfInit : initialization Traced+.new .. ; public pointcut traceIntf : call * Traced+.* .. ; public pointcut traceAnnoInit : initialization com.adteractive..*.new .. &amp;amp;&amp;amp; @target TracedAnno ; public pointcut traceAnno : call * com.adteractive..*.* .. &amp;amp;&amp;amp; @target TracedAnno ; public pointcut traceInit : !exclusions &amp;amp;&amp;amp; traceIntfInit || traceAnnoInit ; public pointcut trace : !exclusions &amp;amp;&amp;amp; traceIntf || traceAnno ; before : traceInit { nesting++; String pre = prefixStr.substring 0,nesting ; log.log level, pre+"&amp;gt; "+thisJoinPointStaticPart ; } after : traceInit { String pre = prefixStr.substring 0,nesting ; log.log level, pre+"&amp;lt; "+thisJoinPointStaticPart ; nesting--; } Object around : trace { nesting++; String pre = prefixStr.substring 0,nesting ; log.log level, pre+"&amp;gt; "+thisJoinPointStaticPart ; Object result = proceed ; log.log level, pre+"&amp;lt; "+thisJoinPointStaticPart ; nesting--; return result; } } A separate aspect is used to "declare parent" or "declare @type" either the marker interface or annotation, thereby adding tracing to the user-specified classes. E.g., public aspect CallTraceTestTracer { // declare @type: com.me.foo..*: @CallTrace.TracedAnno; declare parents: com.me.foo..* implements CallTrace.Traced; } The exception wasn't thrown in a previous version when I used just before advice for both the "trace" and "traceInit" pointcuts. org.aspectj.apache.bcel.classfile.ClassFormatException at org.aspectj.apache.bcel.classfile.Utility.typeOfSignature Utility.java:1293 at org.aspectj.apache.bcel.generic.Type.getTypeInternal Type.java:166 at org.aspectj.apache.bcel.generic.Type.getTypeInternal Type.java:174 at org.aspectj.apache.bcel.generic.Type.getType Type.java:155 at org.aspectj.weaver.bcel.BcelWorld.makeBcelType BcelWorld.java:198 at org.aspectj.weaver.bcel.BcelShadow.createMethodGen BcelShadow.java:2999 at org.aspectj.weaver.bcel.BcelShadow.extractMethod BcelShadow.java:2826 at org.aspectj.weaver.bcel.BcelShadow.weaveAroundInline BcelShadow.java:2020 at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:211 at org.aspectj.weaver.Shadow.implementMungers Shadow.java:514 at org.aspectj.weaver.Shadow.implement Shadow.java:391 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:1781 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:394 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:98 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1464 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1429 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1203 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1039 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:300 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:178 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.a jdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:759 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:249 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:158 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 trouble in: public class com.adteractive.framework.test.ConditionTestFilterTest extends junit.framework.TestCase: com.adteractive.framework.ConditionTestFilter ctf [Signature Lcom/adteractive/framework/ConditionTestFilter&amp;lt;Lcom/adteractive/framework/test/InputStub;Lcom/adteractive/framework/test/OutputStub;&amp;gt;; ] static Class class$0 private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0 public void &amp;lt;init&amp;gt; : ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 16 INVOKESPECIAL junit.framework.TestCase.&amp;lt;init&amp;gt; V constructor-execution void com.adteractive.framework.test.ConditionTestFilterTest.&amp;lt;init&amp;gt; | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 17 | ACONST_NULL | PUTFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | RETURN line 16 constructor-execution void com.adteractive.framework.test.ConditionTestFilterTest.&amp;lt;init&amp;gt; end public void &amp;lt;init&amp;gt; protected void setUp throws java.lang.Exception org.aspectj.weaver.MethodDeclarationLineNumber: 23:543 : method-execution void com.adteractive.framework.test.ConditionTestFilterTest.setUp | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 24 | INVOKESPECIAL junit.framework.TestCase.setUp V | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 25 | NEW com.adteractive.framework.test.ConditionTestFilterStub | DUP | LDC "ctf" | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this | ASTORE_1 | method-call com.adteractive.framework.Filter[] com.adteractive.framework.test.ConditionTestFilterTest.makeBranches | | ALOAD_1 | | INVOKESPECIAL com.adteractive.framework.test.ConditionTestFilterTest.makeBranches [Lcom/adteractive/framework/Filter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.test.ConditionTestFilterTest.makeBranches | INVOKESPECIAL com.adteractive.framework.test.ConditionTestFilterStub.&amp;lt;init&amp;gt; Ljava/lang/String;[Lcom/adteractive/framework/Filter; V | PUTFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | RETURN line 26 method-execution void com.adteractive.framework.test.ConditionTestFilterTest.setUp end protected void setUp throws java.lang.Exception public void testExecute org.aspectj.weaver.MethodDeclarationLineNumber: 31:754 : method-execution void com.adteractive.framework.test.ConditionTestFilterTest.testExecute | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 32 | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | NEW com.adteractive.framework.test.InputStub | DUP | INVOKESPECIAL com.adteractive.framework.test.InputStub.&amp;lt;init&amp;gt; V | method-call com.adteractive.framework.Output com.adteractive.framework.ConditionTestFilter.execute com.adteractive.framework.Input | | INVOKEVIRTUAL com.adteractive.framework.ConditionTestFilter.execute Lcom/adteractive/framework/Input; Lcom/adteractive/framework/Output; | method-call com.adteractive.framework.Output com.adteractive.framework.ConditionTestFilter.execute com.adteractive.framework.Input | CHECKCAST com.adteractive.framework.test.OutputStub | ASTORE_1 | LDC "bf12" line 33 | ALOAD_1 // com.adteractive.framework.test.OutputStub output | method-call com.adteractive.framework.Status com.adteractive.framework.test.OutputStub.getStatus | | INVOKEVIRTUAL com.adteractive.framework.test.OutputStub.getStatus Lcom/adteractive/framework/Status; | method-call com.adteractive.framework.Status com.adteractive.framework.test.OutputStub.getStatus | method-call java.lang.String com.adteractive.framework.Status.getAdditionalMessage | | INVOKEINTERFACE com.adteractive.framework.Status.getAdditionalMessage Ljava/lang/String; | method-call java.lang.String com.adteractive.framework.Status.getAdditionalMessage | method-call void junit.framework.Assert.assertEquals java.lang.String, java.lang.String | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertEquals Ljava/lang/String;Ljava/lang/String; V | method-call void junit.framework.Assert.assertEquals java.lang.String, java.lang.String | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 34 | NEW com.adteractive.framework.test.ConditionTestFilterStub | DUP | INVOKESPECIAL com.adteractive.framework.test.ConditionTestFilterStub.&amp;lt;init&amp;gt; V | PUTFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 35 | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | NEW com.adteractive.framework.test.InputStub | DUP | INVOKESPECIAL com.adteractive.framework.test.InputStub.&amp;lt;init&amp;gt; V | method-call com.adteractive.framework.Output com.adteractive.framework.ConditionTestFilter.execute com.adteractive.framework.Input | | INVOKEVIRTUAL com.adteractive.framework.ConditionTestFilter.execute Lcom/adteractive/framework/Input; Lcom/adteractive/framework/Output; | method-call com.adteractive.framework.Output com.adteractive.framework.ConditionTestFilter.execute com.adteractive.framework.Input | CHECKCAST com.adteractive.framework.test.OutputStub | ASTORE_1 // com.adteractive.framework.test.OutputStub output | ALOAD_1 // com.adteractive.framework.test.OutputStub output line 36 | method-call void junit.framework.Assert.assertNotNull java.lang.Object | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertNotNull Ljava/lang/Object; V | method-call void junit.framework.Assert.assertNotNull java.lang.Object | RETURN line 37 method-execution void com.adteractive.framework.test.ConditionTestFilterTest.testExecute end public void testExecute public void testGetFilterBranches org.aspectj.weaver.MethodDeclarationLineNumber: 42:1111 : method-execution void com.adteractive.framework.test.ConditionTestFilterTest.testGetFilterBranches | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 43 | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | | INVOKEVIRTUAL com.adteractive.framework.ConditionTestFilter.getFilterBranches [Lcom/adteractive/framework/Filter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | method-call void junit.framework.Assert.assertNotNull java.lang.Object | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertNotNull Ljava/lang/Object; V | method-call void junit.framework.Assert.assertNotNull java.lang.Object | ICONST_3 line 44 | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | | INVOKEVIRTUAL com.adteractive.framework.ConditionTestFilter.getFilterBranches [Lcom/adteractive/framework/Filter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | ARRAYLENGTH | method-call void junit.framework.Assert.assertEquals int, int | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertEquals II V | method-call void junit.framework.Assert.assertEquals int, int | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 45 | NEW com.adteractive.framework.test.ConditionTestFilterStub | DUP | INVOKESPECIAL com.adteractive.framework.test.ConditionTestFilterStub.&amp;lt;init&amp;gt; V | PUTFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 46 | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | | INVOKEVIRTUAL com.adteractive.framework.ConditionTestFilter.getFilterBranches [Lcom/adteractive/framework/Filter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | method-call void junit.framework.Assert.assertNull java.lang.Object | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertNull Ljava/lang/Object; V | method-call void junit.framework.Assert.assertNull java.lang.Object | RETURN line 47 method-execution void com.adteractive.framework.test.ConditionTestFilterTest.testGetFilterBranches end public void testGetFilterBranches public void testSetFilterBranches org.aspectj.weaver.MethodDeclarationLineNumber: 52:1441 : method-execution void com.adteractive.framework.test.ConditionTestFilterTest.testSetFilterBranches | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 53 | method-call com.adteractive.framework.Filter[] com.adteractive.framework.test.ConditionTestFilterTest.makeBranches | | INVOKESPECIAL com.adteractive.framework.test.ConditionTestFilterTest.makeBranches [Lcom/adteractive/framework/Filter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.test.ConditionTestFilterTest.makeBranches | ASTORE_1 | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 54 | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | ALOAD_1 // com.adteractive.framework.Filter[] branches | method-call void com.adteractive.framework.ConditionTestFilter.setFilterBranches com.adteractive.framework.Filter[] | | INVOKEVIRTUAL com.adteractive.framework.ConditionTestFilter.setFilterBranches [Lcom/adteractive/framework/Filter; V | method-call void com.adteractive.framework.ConditionTestFilter.setFilterBranches com.adteractive.framework.Filter[] | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 55 | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | | INVOKEVIRTUAL com.adteractive.framework.ConditionTestFilter.getFilterBranches [Lcom/adteractive/framework/Filter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | method-call void junit.framework.Assert.assertNotNull java.lang.Object | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertNotNull Ljava/lang/Object; V | method-call void junit.framework.Assert.assertNotNull java.lang.Object | ICONST_3 line 56 | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | | INVOKEVIRTUAL com.adteractive.framework.ConditionTestFilter.getFilterBranches [Lcom/adteractive/framework/Filter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | ARRAYLENGTH | method-call void junit.framework.Assert.assertEquals int, int | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertEquals II V | method-call void junit.framework.Assert.assertEquals int, int | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 57 | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | ACONST_NULL | method-call void com.adteractive.framework.ConditionTestFilter.setFilterBranches com.adteractive.framework.Filter[] | | INVOKEVIRTUAL com.adteractive.framework.ConditionTestFilter.setFilterBranches [Lcom/adteractive/framework/Filter; V | method-call void com.adteractive.framework.ConditionTestFilter.setFilterBranches com.adteractive.framework.Filter[] | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 58 | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | | INVOKEVIRTUAL com.adteractive.framework.ConditionTestFilter.getFilterBranches [Lcom/adteractive/framework/Filter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | method-call void junit.framework.Assert.assertNull java.lang.Object | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertNull Ljava/lang/Object; V | method-call void junit.framework.Assert.assertNull java.lang.Object | RETURN line 59 method-execution void com.adteractive.framework.test.ConditionTestFilterTest.testSetFilterBranches end public void testSetFilterBranches public void testConditionTestFilter org.aspectj.weaver.MethodDeclarationLineNumber: 64:1847 : method-execution void com.adteractive.framework.test.ConditionTestFilterTest.testConditionTestFilter | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 65 | NEW com.adteractive.framework.test.ConditionTestFilterStub | DUP | INVOKESPECIAL com.adteractive.framework.test.ConditionTestFilterStub.&amp;lt;init&amp;gt; V | PUTFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 66 | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | | INVOKEVIRTUAL com.adteractive.framework.ConditionTestFilter.getFilterBranches [Lcom/adteractive/framework/Filter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | method-call void junit.framework.Assert.assertNull java.lang.Object | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertNull Ljava/lang/Object; V | method-call void junit.framework.Assert.assertNull java.lang.Object | LDC com.adteractive.framework.test.ConditionTestFilterStub line 67 | method-call java.lang.String java.lang.Class.getSimpleName | | INVOKEVIRTUAL java.lang.Class.getSimpleName Ljava/lang/String; | method-call java.lang.String java.lang.Class.getSimpleName | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | method-call java.lang.String com.adteractive.framework.FilterHelper.getName | | INVOKEVIRTUAL com.adteractive.framework.FilterHelper.getName Ljava/lang/String; | method-call java.lang.String com.adteractive.framework.FilterHelper.getName | method-call void junit.framework.Assert.assertEquals java.lang.String, java.lang.String | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertEquals Ljava/lang/String;Ljava/lang/String; V | method-call void junit.framework.Assert.assertEquals java.lang.String, java.lang.String | RETURN line 68 method-execution void com.adteractive.framework.test.ConditionTestFilterTest.testConditionTestFilter end public void testConditionTestFilter public void testConditionTestFilterString org.aspectj.weaver.MethodDeclarationLineNumber: 73:2158 : method-execution void com.adteractive.framework.test.ConditionTestFilterTest.testConditionTestFilterString | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 74 | NEW com.adteractive.framework.test.ConditionTestFilterStub | DUP | LDC "foo" | INVOKESPECIAL com.adteractive.framework.test.ConditionTestFilterStub.&amp;lt;init&amp;gt; Ljava/lang/String; V | PUTFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 75 | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | | INVOKEVIRTUAL com.adteractive.framework.ConditionTestFilter.getFilterBranches [Lcom/adteractive/framework/Filter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | method-call void junit.framework.Assert.assertNull java.lang.Object | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertNull Ljava/lang/Object; V | method-call void junit.framework.Assert.assertNull java.lang.Object | LDC "foo" line 76 | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | method-call java.lang.String com.adteractive.framework.FilterHelper.getName | | INVOKEVIRTUAL com.adteractive.framework.FilterHelper.getName Ljava/lang/String; | method-call java.lang.String com.adteractive.framework.FilterHelper.getName | method-call void junit.framework.Assert.assertEquals java.lang.String, java.lang.String | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertEquals Ljava/lang/String;Ljava/lang/String; V | method-call void junit.framework.Assert.assertEquals java.lang.String, java.lang.String | RETURN line 77 method-execution void com.adteractive.framework.test.ConditionTestFilterTest.testConditionTestFilterString end public void testConditionTestFilterString public void testConditionTestFilterStringFilterOfIOArray org.aspectj.weaver.MethodDeclarationLineNumber: 82:2456 : method-execution void com.adteractive.framework.test.ConditionTestFilterTest.testConditionTestFilterStringFilterOfIOArray | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 83 | NEW com.adteractive.framework.test.ConditionTestFilterStub | DUP | LDC "foo" | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this | method-call com.adteractive.framework.Filter[] com.adteractive.framework.test.ConditionTestFilterTest.makeBranches | | INVOKESPECIAL com.adteractive.framework.test.ConditionTestFilterTest.makeBranches [Lcom/adteractive/framework/Filter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.test.ConditionTestFilterTest.makeBranches | INVOKESPECIAL com.adteractive.framework.test.ConditionTestFilterStub.&amp;lt;init&amp;gt; Ljava/lang/String;[Lcom/adteractive/framework/Filter; V | PUTFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 84 | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | | INVOKEVIRTUAL com.adteractive.framework.ConditionTestFilter.getFilterBranches [Lcom/adteractive/framework/Filter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | method-call void junit.framework.Assert.assertNotNull java.lang.Object | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertNotNull Ljava/lang/Object; V | method-call void junit.framework.Assert.assertNotNull java.lang.Object | ICONST_3 line 85 | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | | INVOKEVIRTUAL com.adteractive.framework.ConditionTestFilter.getFilterBranches [Lcom/adteractive/framework/Filter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | ARRAYLENGTH | method-call void junit.framework.Assert.assertEquals int, int | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertEquals II V | method-call void junit.framework.Assert.assertEquals int, int | LDC "foo" line 86 | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | method-call java.lang.String com.adteractive.framework.FilterHelper.getName | | INVOKEVIRTUAL com.adteractive.framework.FilterHelper.getName Ljava/lang/String; | method-call java.lang.String com.adteractive.framework.FilterHelper.getName | method-call void junit.framework.Assert.assertEquals java.lang.String, java.lang.String | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertEquals Ljava/lang/String;Ljava/lang/String; V | method-call void junit.framework.Assert.assertEquals java.lang.String, java.lang.String | RETURN line 87 method-execution void com.adteractive.framework.test.ConditionTestFilterTest.testConditionTestFilterStringFilterOfIOArray end public void testConditionTestFilterStringFilterOfIOArray private com.adteractive.framework.Filter[] makeBranches org.aspectj.weaver.MethodDeclarationLineNumber: 89:2749 : method-execution com.adteractive.framework.Filter[] com.adteractive.framework.test.ConditionTestFilterTest.makeBranches | ICONST_3 line 90 | ANEWARRAY com.adteractive.framework.test.FilterHelperStub | ASTORE_1 | ALOAD_1 // com.adteractive.framework.Filter[] branches line 91 | ICONST_0 | NEW com.adteractive.framework.test.FilterHelperStub | DUP | LDC "bf1" | INVOKESPECIAL com.adteractive.framework.test.FilterHelperStub.&amp;lt;init&amp;gt; Ljava/lang/String; V | AASTORE | ALOAD_1 // com.adteractive.framework.Filter[] branches line 92 | ICONST_1 | NEW com.adteractive.framework.test.FilterHelperStub | DUP | LDC "bf12" | INVOKESPECIAL com.adteractive.framework.test.FilterHelperStub.&amp;lt;init&amp;gt; Ljava/lang/String; V | AASTORE | ALOAD_1 // com.adteractive.framework.Filter[] branches line 93 | ICONST_2 | NEW com.adteractive.framework.test.FilterHelperStub | DUP | LDC "bf" | INVOKESPECIAL com.adteractive.framework.test.FilterHelperStub.&amp;lt;init&amp;gt; Ljava/lang/String; V | AASTORE | ALOAD_1 // com.adteractive.framework.Filter[] branches line 94 | ARETURN method-execution com.adteractive.framework.Filter[] com.adteractive.framework.test.ConditionTestFilterTest.makeBranches end private com.adteractive.framework.Filter[] makeBranches end public class com.adteractive.framework.test.ConditionTestFilterTest when implementing on shadow method-call com.adteractive.framework.Filter[] com.adteractive.framework.test.ConditionTestFilterTest.makeBranches when weaving type com.adteractive.framework.test.ConditionTestFilterTest when weaving classes when weaving when incrementally building BuildConfig[C:\cygwin\home\dwampler\work\workspace\.metadata\.plugins\org.eclipse.ajdt.core\adserver-service.generated.lst] #Files=259</description>
    <commit commitTime="2005-11-11 15:13:33" id="d7d5947ddd5a3b4f5c3bcaed6114b5445f0d6a01"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="113447" reportTime="2005-10-22 04:03:00">
    <summary>VerifyError overriding pointcut with context used in around advice</summary>
    <description>Get ---- java.lang.VerifyError: class: bugs/DoubleAround, method: one signature: V Unable to pop operand off an empty stack ---- running ---- public class DoubleAround { public static void main String[] args { DoubleAround me = new DoubleAround ; me.one ; // me.two ; } void one {} //void two {} static abstract aspect Super { int count = 0; pointcut pc DoubleAround s : this s &amp;amp;&amp;amp; execution void one ; void around DoubleAround s : pc s { proceed s ; System.out.println thisJoinPoint + " count: " + count++ + " by " + this + " of " + s ; } } static aspect Sub extends Super { // no VerifyError if this is commented out pointcut pc DoubleAround s : Super.pc s || this s &amp;amp;&amp;amp; execution void two ; } } ----</description>
    <commit commitTime="2005-10-27 13:49:34" id="6ab78ee0e1d49a0e3f882ddf604061dc572cb427"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="113510" reportTime="2005-10-24 05:36:00">
    <summary>readAspect</summary>
    <description>clearly define what the goal for readAspect is old byte per byte reading cause NPE in some test case current impl is hashcode for aspect name + classloader - ie unstable across startups.</description>
    <commit commitTime="2005-11-02 10:36:05" id="62d16d52c25f7b5ff389ee2de603bbb3dc186c8e"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="113511" reportTime="2005-10-24 05:39:00">
    <summary>LTW enhancements</summary>
    <description>Alex, here is the basic patch that is working well before you leave for the weekend ;- I'll let Matthew post it officially to bugzilla since it was his idea. The earlier return from !enabled is a small addition I made that seems to help further. It would be great to have this in HEAD so I can report performance numbers based on it in part 2 of my article on developerworks ;- Hope you are enjoying your new addition! Thanks! Index: ClassLoaderWeavingAdaptor.java =================================================================== RCS file: /home/technology/org.aspectj/modules/loadtime/src/org/aspectj/weaver/loadtim e/ClassLoaderWeavingAdaptor.java,v retrieving revision 1.18 diff -u -r1.18 ClassLoaderWeavingAdaptor.java --- ClassLoaderWeavingAdaptor.java 19 Oct 2005 13:11:36 -0000 1.18 +++ ClassLoaderWeavingAdaptor.java 21 Oct 2005 16:04:41 -0000 @@ -107,8 +107,13 @@ // register the definitions registerDefinitions weaver, loader ; + if !enabled { + return; + } messageHandler = bcelWorld.getMessageHandler ; + bcelWorld.setResolutionLoader ClassLoader null ;//loader.getParent ; + // after adding aspects weaver.prepareForWeave ; } @@ -148,7 +153,11 @@ definitions.add DocumentParser.parse xml ; } } - + if definitions.isEmpty { + enabled = false; + return; + } + // still go thru if definitions is empty since we will configure // the default message handler in there registerOptions weaver, loader, definitions ;</description>
    <commit commitTime="2005-10-24 09:48:39" id="70888ddc862b717646b236db2767e11a586b6157"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Aj.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="113531" reportTime="2005-10-24 09:22:00">
    <summary>NullPointerException during incremental compilation of aspect</summary>
    <description>Eclipse 3.1.1 AJDT: org.eclipse.aspectj_1.2.1.20050624095428 The NPE seems to occur during an incremental compilation if there is an outstanding error from a previous incremental compilation java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1015 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:300 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:178 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspec tj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:759 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:249 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:158 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 NullPointerException thrown: null 1. Create the attached project 2. Swap the commented lines in SwtThreadSafetey and incrementally compile save . You will get an error 3. Create a new aspect in the default package</description>
    <commit commitTime="2005-11-07 11:22:49" id="0b6d41c5a5a35c567f6ef391d4579c701d65d7be"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/AjdeInteractionTestbed.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="113554" reportTime="2005-10-24 11:54:00">
    <summary>support ajsym file generation for command line builds</summary>
    <description>This has been requested by Ron and several others, and will enable browsing crosscutting structure e.g. via the AspectJ Browser for builds done via the command line or Ant, and possibly via AJDT with some minor extensions to that.</description>
    <commit commitTime="2005-11-08 02:33:59" id="9fe6c2bc5c7d9950fc3edeadb0d9cfb8c1f28495"/>
    <fixedFiles>
      <file>ajde/testsrc/org/aspectj/ajde/AjdeTests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java</file>
    </fixedFiles>
  </bug>
  <bug id="113630" reportTime="2005-10-25 02:09:00">
    <summary>IncompatibleClassChangeError - AspectJ5 syntax - mixins</summary>
    <description>The attached test case throws this error while executing using Eclipse 3.1 and AJDT 1.3.0</description>
    <commit commitTime="2005-10-26 12:28:26" id="ea305990eec2a76cfd286d060b52cab76f47def6"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="113861" reportTime="2005-10-26 14:01:00">
    <summary>[generics] field-get problems when generic field is used.</summary>
    <description>Hi, When i'm compiling the following example, i'm getting this errors: TestAspect.aj:21 [error] incompatible return type applying to field-get java.util.Set com.mprv.secsph.Test.intsSet Test.java:18 [error] incompatible return type applying to field-get java.util.Set com.mprv.secsph.Test.intsSet Here is the example ------------------- Java Code: package com; public class Test { Set&amp;lt;Integer&amp;gt; intsSet; public Set&amp;lt;Integer&amp;gt; foo { 18: return intsSet; } } Aspect: public privileged aspect TestAspect { pointcut gettingMember Test t : target t &amp;amp;&amp;amp; get !public Set&amp;lt;Integer&amp;gt; com.*.* &amp;amp;&amp;amp; !within TestAspect ; 21: Set&amp;lt;Integer&amp;gt; around Test t : gettingMemberCollection t { Set s = proceed t ; return s; } } I've tried many kinds of workarounds, and the only thing which worked, is defining the member field without using generics regular Set ... One more disturbing is, that this fiture worked ! in M2 release. This is an example of the functionality that worked in my project with M2 , but now, also reports the same error: Java code is the same, Aspect is: public privileged aspect TestAspect { pointcut gettingMember Test t : target t &amp;amp;&amp;amp; get !public Set com.*.* &amp;amp;&amp;amp; !within TestAspect ; Set around Test t : gettingMemberCollection t { Set s = proceed t ; return s; } } Is it a bug? Or am i doing something wrong? Thanks! Misha.</description>
    <commit commitTime="2005-10-27 18:01:54" id="8cea30fedf7a74133c67623ec9286ac9578c9a88"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/Member.java</file>
      <file>weaver/src/org/aspectj/weaver/MemberImpl.java</file>
      <file>weaver/src/org/aspectj/weaver/Advice.java</file>
    </fixedFiles>
  </bug>
  <bug id="114005" reportTime="2005-10-27 13:23:00">
    <summary>annotated ITD fields on interfaces have no annotation</summary>
    <description>As stated in the notebook it is allowed to annotate field ITDs. This seems not to work properly with interfaces. public interface TestInterface { } @Retention RetentionPolicy.RUNTIME public @interface SampleAnnotation { } public aspect Declaration { declare parents: @SampleAnnotation * implements TestInterface; // this is fine @SampleAnnotation public transient String Test.firstProperty; / this does not work @SampleAnnotation public transient String TestInterface.secondProperty; // this also does not work declare @field: * TestInterface+.*: @SampleAnnotation; } secondProperty has no Annotation as one can see with: public class Test implements TestInterface { public static void main String[] args { for Field field: Test.class.getFields { System.err.println field.toString .concat " " .concat String.valueOf field.isAnnotationPresent SampleAnnotation.class ; } } } I did not try whether this is also the case for method ITS on interfaces. Secondly the field name is ajc$interField$test_Declaration$test_TestInterface$secondProperty instead of simply secondProperty. Is this what is meant with bug 73507 ? What is with private and package protected ITD of fields and runtime reflection? Because the field name is mangled Test.class.getField "firstProperty" raises a NoSuchFieldException when declared private or package protected . Also "declare @field: * Test+.*: @SampleAnnotation;" is not applied for private or package protected declarations. So should one only annotate public field IDTs supported by compiler warnings to have useful runtime behaviour with runtime RetentionPolicy annotations ? So it is strange that the introductory example on annotations shows annotated private field ITDs on interfaces :- Thank you very much for your help, Vincenz</description>
    <commit commitTime="2005-11-08 12:13:05" id="d9757d7c41bf2661455422ce3234e4794c9f533e"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="114054" reportTime="2005-10-27 23:03:00">
    <summary>NPE in CContentOutlinePage.createContentProvider</summary>
    <description>CUIPlugin.getActiveWorkbenchWindow .getActivePage can return null.</description>
    <commit commitTime="2005-11-23 16:20:19" id="a4caeb95261431c81f7beb0cddbff3b0865e614d"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/PerThisOrTargetPointcutVisitor.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="114332" reportTime="2005-10-31 03:42:00">
    <summary>Reflection API not detecting ITD method correctly in all circumstances</summary>
    <description>As reported on the aspectj mailing list: Hi, I'm using the 'getDeclaredITDMethods' method available in the reflection api to find all ITD methods in the Billing aspect from the aspectj examples . The Billing aspect contains 4 ITD methods Connection.callRate, LongDistance.callRate, Local.callRate and Customer.addCharge , but I got only 3 of them using this method. The 'Connection.callRate' is not returned by the 'getDeclaredITDMethods' method maybe because it is abstract . In the implementation of method 'getDeclaredITDMethods' in 'org.aspectj.internal.lang.reflect.AjTypeImpl' there is the following condition: if !m.getName .contains "ajc$interMethod$" continue; Looking the names in the debbuger, I could not find a: public static long telecom.Billing.ajc$interMethod$telecom_Billing$telecom_Connection$callRate telecom.Connection But only: public static long telecom.Billing.ajc$interMethodDispatch1$telecom_Billing$telecom_Connection$callRate telecom.Connection if a take a concrete method, I get two objects, named: public static long telecom.Billing.ajc$interMethod$telecom_Billing$telecom_LongDistance$callRate telecom.LongDistance public static long telecom.Billing.ajc$interMethodDispatch1$telecom_Billing$telecom_LongDistance$callRate telecom.LongDistance One of them satisfies the predicate !m.getName .contains "ajc$interMethod$" . Is this behavior correct? ps.: I'm using the example bellow. ---------------------------------------------------------------- public aspect Billing { ... public abstract long Connection.callRate ; public long LongDistance.callRate { return LONG_DISTANCE_RATE; } public long Local.callRate { return LOCAL_RATE; } public void Customer.addCharge long charge { totalCharge += charge; } ... } --------------------------------------------------------------------------------------- - import org.aspectj.lang.reflect.AjType; import org.aspectj.lang.reflect.AjTypeSystem; import org.aspectj.lang.reflect.InterTypeMethodDeclaration; import telecom.Billing; public class Test { public static void main String args[] throws ClassNotFoundException{ AjType c = AjTypeSystem.getAjType Billing.class ; InterTypeMethodDeclaration[] itdmethods = c.getDeclaredITDMethods ; for int i = 0; i &amp;lt; itdmethods.length; i++ { System.out.println "ITD Method:" + itdmethods[i].getTargetType .getName +"."+itdmethods[i].getName ; } } } ---------------------------------------------------------------- Output: ITD Method:telecom.LongDistance.callRate ITD Method:telecom.Local.callRate ITD Method:telecom.Customer.addCharge Expected Output: ITD Method:telecom.Connection.callRate ITD Method:telecom.LongDistance.callRate ITD Method:telecom.Local.callRate ITD Method:telecom.Customer.addCharge I'm using ajde 1.5.0.20051014142856. Regards, Eduardo Piveta http://www.inf.ufrgs.br/~epiveta</description>
    <commit commitTime="2005-11-21 22:05:46" id="735d94f91a02e08bf5a1a86185b9318de4bd4319"/>
    <fixedFiles>
      <file>aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/InterTypeFieldDeclarationImpl.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/InterTypeDeclarationImpl.java</file>
      <file>aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/InterTypeMethodDeclarationImpl.java</file>
      <file>aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/AjTypeImpl.java</file>
      <file>aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/InterTypeConstructorDeclarationImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="114343" reportTime="2005-10-31 07:22:00">
    <summary>[generics] field-get problems when generic field is used.</summary>
    <description>Hi guys! I've downloaded DEVELOPMENT-20051029200407. There is some issue that I think is still open. Take a look at the example: Java Code: ---------- public class Test1 { Set&amp;lt;Integer&amp;gt; intsSet; public Set&amp;lt;Integer&amp;gt; foo { return intsSet; } } public class Test2 { Set&amp;lt;Double&amp;gt; dSet; public Set&amp;lt;Double&amp;gt; foo { return dSet; } } Aspect: ------- public privileged aspect TestAspect { pointcut gettingMemberCollection Test t : target t &amp;amp;&amp;amp; get !public Set&amp;lt;Number+&amp;gt; com.*.* &amp;amp;&amp;amp; !within TestAspect ; Set around Test t : gettingMemberCollection t { Set s = proceed t ; return s; } } As you can see, I would like to replace access to member Set of something which derives from Number. But the problem is that around advice is stricted to return exact type of the member, and I'm getting the same error as earlier. incompatible return type applying to field-get java.util.Set com.mprv.secsph.Test.intsSet incompatible return type applying to field-get java.util.Set com.mprv.secsph.Test.dSet In the M2 I just declared the advice this way and it worked fine. May be now, you should allow to declare the advice this way: Set&amp;lt;? extends Number&amp;gt; around Test t : gettingMemberCollection t { Set s = proceed t ; return s; } Thanks! Misha.</description>
    <commit commitTime="2005-11-01 11:22:49" id="2483e609ca9c0d9f5c43b60c0f32d7b9cdf51adc"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/Lint.java</file>
      <file>weaver/src/org/aspectj/weaver/Advice.java</file>
    </fixedFiles>
  </bug>
  <bug id="114495" reportTime="2005-11-01 05:43:00">
    <summary>unqualified superaspect&lt;T&gt; pointcut sortafunny in subaspect</summary>
    <description>Advice not applied in subaspect using parameterized superaspect pointcut without qualifying with type parameter. Declare error using same locution works. Doc ambiguous: "All references to a pointcut declared in a generic type from outside of that type must be via a parameterized type reference, and not a raw type reference." I get no compiler error in either case, so perhaps "outside of that type or subtypes." But can't interfaces can be parameterized and pointcuts declared on interfaces? Eek! This was disconcerting because the declare warning showed the pointcut was correct, but still the advice was not being applied. My initial aspect was a perthis , so I thought that was the problem. Not sure if this is treated by bug 112105 or any other generics bugs is there a tag for them? ------------------------------------------------------- package bugs; public class ParameterizedTypeInPointcut { public static void main String[] args { C.go ; } static class C { static void go {} } } abstract aspect AA_ParameterizedTypeInPointcut&amp;lt;Target&amp;gt; { pointcut going :call void Target.go ; before : going { System.out.println "AA.going " ; } } aspect A_ParameterizedTypeInPointcut extends AA_ParameterizedTypeInPointcut&amp;lt;ParameterizedTypeInPointcut.C&amp;gt;{ declare warning : going : "going "; // works fine before : going { // advice not applied System.out.println "A.going " ; } }</description>
    <commit commitTime="2005-11-23 19:21:03" id="86880f7281e04ed0c79781b5ddf2613821718b79"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</file>
      <file>weaver/src/org/aspectj/weaver/ReferenceType.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedType.java</file>
    </fixedFiles>
  </bug>
  <bug id="114744" reportTime="2005-11-02 07:56:00">
    <summary>NPE at CaptureBinding.java on wildcard in intertype field type</summary>
    <description>When compiling this program with ajc -1.5 public aspect Wildcard { Class&amp;lt;? extends Wildcard&amp;gt; Wildcard.cl; void foo throws Exception { Wildcard ci = cl.newInstance ; } } ajc throws this exception java.lang.NullPointerException at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CaptureBinding.initializeBounds CaptureBinding.java:75 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding.capture ParameterizedTypeBinding.java:105 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.SingleNameReference.resolveType SingleNameReference.java:772 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType MessageSend.java:293 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.resolve LocalDeclaration.java:199 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements AbstractMethodDeclaration.java:422 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements MethodDeclaration.java:178 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve AbstractMethodDeclaration.java:400 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1076 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.resolve AspectDeclaration.java:114 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1125 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve CompilationUnitDeclaration.java:305 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:514 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:759 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:225 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:151 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:326 at org.aspectj.tools.ajc.Main.runMain Main.java:240 at org.aspectj.tools.ajc.Main.main Main.java:83</description>
    <commit commitTime="2005-11-02 16:16:29" id="ade32bc38c17b38811b617f54828feb43a4b7048"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="114875" reportTime="2005-11-03 00:25:00">
    <summary>@Pointcut - throws java.lang.NullPointerException</summary>
    <description>Eclipse 3.1 AJDT 1.3.0.20051102174241 package com.aspectj.test; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.Before; import org.aspectj.lang.annotation.Pointcut; @Aspect public abstract class Base { @Pointcut --&amp;gt;Seems to be the problem abstract void method ; public static void main String args[] { } } package com.aspectj.test; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.Before; import org.aspectj.lang.annotation.Pointcut; @Aspect public class Sub extends Base{ @Pointcut "execution * com.aspectj.test.Base.main .. " void method {}; @Before "method " public void test { } } The code above shows java.lang.NullPointerException at org.aspectj.weaver.patterns.BasicTokenSource.makeTokenSource BasicTokenSource.java:84 at org.aspectj.weaver.patterns.PatternParser.&amp;lt;init&amp;gt; PatternParser.java:1373 at org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVisitor.conv ertToPointcutDeclaration ValidateAtAspectJAnnotationsVisitor.java:493 at org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVisitor.visi t ValidateAtAspectJAnnotationsVisitor.java:188 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse MethodDeclaration.java:185 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse TypeDeclaration.java:1183 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.tr averse CompilationUnitDeclaration.java:339 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.beforeAnalysing AjCompilerAdapter.java:154 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$before$org_aspectj_ajdt_ internal_compiler_CompilerAdapter$7$db78446d CompilerAdapter.aj:101 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:517 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:759 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:225 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:180 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:158 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 The syntax @Pointcut "" is shown as error too. If this is not a bug then a proper message instead of an exception is helpful.</description>
    <commit commitTime="2005-11-07 10:50:55" id="e9e0a7be5be07919d74f7da12fa59232a8b81a1e"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjSyntaxTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="115038" reportTime="2005-11-04 04:25:00">
    <summary>NPE in ensureScopeSetup .. on type parm in ITD - expected error</summary>
    <description>Compiling the following produces a BCException rather than a compiler error: ------------------------------------------------------------ public abstract aspect AObserver&amp;lt;Observable, Observer, Event&amp;gt; { public boolean Observer.handle Observable o, Event e { return true; } } ------------------------------------------------------------ when collecting itds and declares AObserver when completing type bindings when batch building with classpath: c:\home\apps\jdk15\jre\lib\ext\dnsns.jar;c:\home\apps\jdk15\jre\lib\ext\localedata.jar;c:\home\apps\jdk15\jre\lib\ext\sunjce_provider.jar;c:\home\apps\jdk15\jre\lib\ext\sunpkcs11.jar;C:\home\apps\aspectj-1.5\lib\aspectjrt.jar; null java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.ast.InterTypeDeclaration.ensureScopeSetup InterTypeDeclaration.java:361 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.resolveTypesFor SourceTypeBinding.java:1279 at org.aspectj.ajdt.internal.compiler.ast.InterTypeMethodDeclaration.build InterTypeMethodDeclaration.java:175 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTypeAndPerClause AspectDeclaration.java:1053 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildInterTypeAndPerClause AjLookupEnvironment.java:427 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.collectAllITDsAndDeclares AjLookupEnvironment.java:311 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:166 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:301 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:315 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:759 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:225 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:151 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:326 at org.aspectj.tools.ajc.Main.runMain Main.java:240 at org.aspectj.tools.ajc.Main.main Main.java:83 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:585 at org.aspectj.tools.ajbrowser.Main.compilerMain Main.java:55 at org.aspectj.tools.ajbrowser.Main.main Main.java:32</description>
    <commit commitTime="2005-11-04 10:05:05" id="bf51fe3e3fded74ae0ba424fdcf8f07394e665b5"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeDeclaration.java</file>
    </fixedFiles>
  </bug>
  <bug id="115204" reportTime="2005-11-05 06:03:00">
    <summary>WildAnnotationTypePattern.java:61 NPE after renaming method-annotation class</summary>
    <description>Sorry I don't have a small test case. It looks like the NPE happens when the annotation refered to by a compiled? aspect no longer exists because it was renamed. The class being woven is the first one alphabetically , and the method being woven does not have the annotation on it. Let me know if you need a test case. And sorry for the late bugs - I'm just now writing the article. ------------------------------------------------------------------ java.lang.NullPointerException at org.aspectj.weaver.patterns.WildAnnotationTypePattern.matches WildAnnotationTypePattern.java:61 at org.aspectj.weaver.patterns.SignaturePattern.matchesAnnotations SignaturePattern.java:321 at org.aspectj.weaver.patterns.SignaturePattern.matchesExactly SignaturePattern.java:169 at org.aspectj.weaver.patterns.SignaturePattern.matches SignaturePattern.java:131 at org.aspectj.weaver.patterns.WithincodePointcut.matchInternal WithincodePointcut.java:73 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:143 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:55 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:143 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:55 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:143 at org.aspectj.weaver.ShadowMunger.match ShadowMunger.java:64 at org.aspectj.weaver.Advice.match Advice.java:109 at org.aspectj.weaver.bcel.BcelAdvice.match BcelAdvice.java:97 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:1749 at org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction BcelClassWeaver.java:1736 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:1533 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:1359 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:382 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:98 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1478 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1443 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1217 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1021 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:300 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:178 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:759 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:225 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:151 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 trouble in: public class com.isberg.articles.aop7.bean.ABeanTest$APlus extends java.lang.Object: TypeMungers: [ BcelTypeMunger ResolvedTypeMunger Method, java.lang.String com.isberg.articles.aop7.bean.ABeanTest$CPlus.propertyName java.lang.String ] declares: [declare parents: com.isberg.articles.aop7.bean.ABeanTest$CPlus extends com.isberg.articles.aop7.bean.ABean$IBean ;] private static Throwable ajc$initFailureCause public static final com.isberg.articles.aop7.bean.ABeanTest$APlus ajc$perSingletonInstance static void &amp;lt;clinit&amp;gt; : staticinitialization void com.isberg.articles.aop7.bean.ABeanTest$APlus.&amp;lt;clinit&amp;gt; | catch java.lang.Throwable -&amp;gt; E0 | | INVOKESTATIC com.isberg.articles.aop7.bean.ABeanTest$APlus.ajc$postClinit V line 125 | catch java.lang.Throwable -&amp;gt; E0 | GOTO L0 | E0: ASTORE_0 | ALOAD_0 | PUTSTATIC com.isberg.articles.aop7.bean.ABeanTest$APlus.ajc$initFailureCause Ljava/lang/Throwable; | L0: RETURN staticinitialization void com.isberg.articles.aop7.bean.ABeanTest$APlus.&amp;lt;clinit&amp;gt; end static void &amp;lt;clinit&amp;gt; void &amp;lt;init&amp;gt; : ALOAD_0 // com.isberg.articles.aop7.bean.ABeanTest$APlus this line 125 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V constructor-execution void com.isberg.articles.aop7.bean.ABeanTest$APlus.&amp;lt;init&amp;gt; | RETURN constructor-execution void com.isberg.articles.aop7.bean.ABeanTest$APlus.&amp;lt;init&amp;gt; end void &amp;lt;init&amp;gt; void ajc$declare_parents_1 org.aspectj.weaver.MethodDeclarationLineNumber: 127:3678 : RETURN line 127 end void ajc$declare_parents_1 public static String ajc$interMethod$com_isberg_articles_aop7_bean_ABeanTest$APlus$com_isberg_articles_aop7_bean_ABeanTest$CPlus$propertyName com.isberg.articles.aop7.bean.ABeanTest$CPlus, String EffectiveSignatureAttribute java.lang.String com.isberg.articles.aop7.bean.ABeanTest$CPlus.propertyName java.lang.String , method-execution : method-execution java.lang.String com.isberg.articles.aop7.bean.ABeanTest$CPlus.propertyName java.lang.String | ALOAD_0 // com.isberg.articles.aop7.bean.ABeanTest$CPlus ajc$this_ line 132 | ALOAD_1 // java.lang.String methodName | INVOKESTATIC com.isberg.articles.aop7.bean.ABean.ajc$interMethod$com_isberg_articles_aop7_bean_ABean$com_isberg_articles_aop7_bean_ABean$IBean$propertyName Lcom/isberg/articles/aop7/bean/ABean$IBean;Ljava/lang/String; Ljava/lang/String; | ASTORE_2 | LDC "something" line 133 | ALOAD_2 // java.lang.String result | method-call boolean java.lang.String.equals java.lang.Object | | INVOKEVIRTUAL java.lang.String.equals Ljava/lang/Object; Z | method-call boolean java.lang.String.equals java.lang.Object | IFEQ L0 | LDC "a" line 134 | ASTORE_2 // java.lang.String result | L0: ALOAD_2 // java.lang.String result line 136 | ARETURN method-execution java.lang.String com.isberg.articles.aop7.bean.ABeanTest$CPlus.propertyName java.lang.String end public static String ajc$interMethod$com_isberg_articles_aop7_bean_ABeanTest$APlus$com_isberg_articles_aop7_bean_ABeanTest$CPlus$propertyName com.isberg.articles.aop7.bean.ABeanTest$CPlus, String public static String ajc$interMethodDispatch1$com_isberg_articles_aop7_bean_ABeanTest$APlus$com_isberg_articles_aop7_bean_ABeanTest$CPlus$propertyName com.isberg.articles.aop7.bean.ABeanTest$CPlus, String EffectiveSignatureAttribute java.lang.String com.isberg.articles.aop7.bean.ABeanTest$CPlus.propertyName java.lang.String , method-call : ALOAD_0 ALOAD_1 INVOKEVIRTUAL com.isberg.articles.aop7.bean.ABeanTest$CPlus.propertyName Ljava/lang/String; Ljava/lang/String; ARETURN end public static String ajc$interMethodDispatch1$com_isberg_articles_aop7_bean_ABeanTest$APlus$com_isberg_articles_aop7_bean_ABeanTest$CPlus$propertyName com.isberg.articles.aop7.bean.ABeanTest$CPlus, String public static com.isberg.articles.aop7.bean.ABeanTest$APlus aspectOf org.aspectj.weaver.AjAttribute$AjSynthetic@591171 : GETSTATIC com.isberg.articles.aop7.bean.ABeanTest$APlus.ajc$perSingletonInstance Lcom/isberg/articles/aop7/bean/ABeanTest$APlus; IFNONNULL L0 NEW org.aspectj.lang.NoAspectBoundException DUP LDC "com_isberg_articles_aop7_bean_ABeanTest$APlus" GETSTATIC com.isberg.articles.aop7.bean.ABeanTest$APlus.ajc$initFailureCause Ljava/lang/Throwable; INVOKESPECIAL org.aspectj.lang.NoAspectBoundException.&amp;lt;init&amp;gt; Ljava/lang/String;Ljava/lang/Throwable; V ATHROW L0: GETSTATIC com.isberg.articles.aop7.bean.ABeanTest$APlus.ajc$perSingletonInstance Lcom/isberg/articles/aop7/bean/ABeanTest$APlus; ARETURN end public static com.isberg.articles.aop7.bean.ABeanTest$APlus aspectOf public static boolean hasAspect org.aspectj.weaver.AjAttribute$AjSynthetic@16e3eb3 : GETSTATIC com.isberg.articles.aop7.bean.ABeanTest$APlus.ajc$perSingletonInstance Lcom/isberg/articles/aop7/bean/ABeanTest$APlus; IFNULL L0 ICONST_1 IRETURN L0: ICONST_0 IRETURN end public static boolean hasAspect private static void ajc$postClinit org.aspectj.weaver.AjAttribute$AjSynthetic@d7cf62 : NEW com.isberg.articles.aop7.bean.ABeanTest$APlus DUP INVOKESPECIAL com.isberg.articles.aop7.bean.ABeanTest$APlus.&amp;lt;init&amp;gt; V PUTSTATIC com.isberg.articles.aop7.bean.ABeanTest$APlus.ajc$perSingletonInstance Lcom/isberg/articles/aop7/bean/ABeanTest$APlus; RETURN end private static void ajc$postClinit end public class com.isberg.articles.aop7.bean.ABeanTest$APlus when matching pointcut withincode @ Parallel * * .. &amp;amp;&amp;amp; call void * .. &amp;amp;&amp;amp; percflow com.isberg.articles.aop7.concurrent.ParallelMethodImpl on execution @ Parallel * * .. when matching shadow method-call boolean java.lang.String.equals java.lang.Object when weaving type com.isberg.articles.aop7.bean.ABeanTest$APlus when weaving aspects when weaving when batch building BuildConfig[c:\home\ws\main-31\.metadata\.plugins\org.eclipse.ajdt.core\devworks-fall.generated.lst] #Files=70</description>
    <commit commitTime="2005-11-18 10:09:32" id="557f5b4676f6484dc9b43e2d1a5a8172ef76d5cf"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java</file>
    </fixedFiles>
  </bug>
  <bug id="115235" reportTime="2005-11-06 07:26:00">
    <summary>StackOverflowError on circular pointcut iff aspect parameterized</summary>
    <description>The code below overflows when concretizing a circular pointcut from a parameterized aspect. Not true when the aspect is not parameterized. --------------------------------------------- public class SelfPC { public static void main String[] args { new C .foo ; } static class C { pointcut doit : C.doit ; // CE expected void foo {} } // ------------ pertarget&amp;lt;T&amp;gt; static abstract aspect PT_PARM&amp;lt;T&amp;gt; pertarget pc { abstract protected pointcut pc ; before : pc {} } static aspect CPT_PARM extends PT_PARM&amp;lt;C&amp;gt; { protected pointcut pc : C.doit ; } // // ------------ issingleton&amp;lt;T&amp;gt; // static abstract aspect IS_PARM&amp;lt;T&amp;gt; { // abstract protected pointcut pc ; // before : pc {} // } // static aspect CIS_PARM extends IS_PARM&amp;lt;C&amp;gt; { // protected pointcut pc : C.doit ; // } // // ------------ pertarget // static abstract aspect PT pertarget pc { // abstract protected pointcut pc ; // before : pc {} // } // static aspect CPT extends PT{ // protected pointcut pc : C.doit ; // } // // ------------ issingleton // static abstract aspect SIS { // abstract protected pointcut pc ; // before : pc {} // } // static aspect CSIS extends SIS { // protected pointcut pc : C.doit ; // } } --------------------------------------------- java.lang.StackOverflowError at java.lang.StringBuffer.append StringBuffer.java:225 at org.aspectj.weaver.UnresolvedType.nameToSignature UnresolvedType.java:734 at org.aspectj.weaver.UnresolvedType.forName UnresolvedType.java:308 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding EclipseFactory.java:302 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromEclipse EclipseFactory.java:129 at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.getSuperclass EclipseSourceType.java:119 at org.aspectj.weaver.ReferenceType.getSuperclass ReferenceType.java:481 at org.aspectj.weaver.ResolvedType.getDirectSupertypes ResolvedType.java:65 at org.aspectj.weaver.ResolvedType$6.get ResolvedType.java:447 at org.aspectj.weaver.Iterators$4.next Iterators.java:148 at org.aspectj.weaver.Iterators$3$1.hasNext Iterators.java:117 at org.aspectj.weaver.Iterators$3.hasNext Iterators.java:128 at org.aspectj.weaver.ResolvedType.findPointcut ResolvedType.java:466 at org.aspectj.weaver.patterns.ReferencePointcut.concretize1 ReferencePointcut.java:269 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:229 at org.aspectj.weaver.patterns.ReferencePointcut.concretize1 ReferencePointcut.java:326 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:229 ... ---------------------------------------------</description>
    <commit commitTime="2005-11-14 10:38:47" id="4b8bed7cff98b2aca5586e604a138c3674453c90"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/Pointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="115237" reportTime="2005-11-06 08:09:00">
    <summary>no aspectOf on parameterized perobject aspects</summary>
    <description>Assuming without adk15 objection that parameterized aspects can be instantiated per-object, I am not seeing an aspectOf .. method, only aspectof . Not true of unparameterized types. -------------------------------------------------------- public class PerTarget { public static void main String[] args { C c = new C ; c.go ; A a = A.aspectOf c ; // ok, illegal - aspectOf only on concrete aspects? // AA aa = AA.aspectOf c ; // hmm - n/a for parameterized types? //CAPT capt = CAPT.aspectOf c ; // unexpected compile error here //System.out.println "A " + a + " capt " + capt ; } static class C { void go {} } abstract static aspect AA pertarget pc { abstract pointcut pc ; before : pc { System.out.println "go " ; } } static aspect A extends AA { pointcut pc : call void C.go ; } abstract static aspect APT&amp;lt;T&amp;gt; pertarget pc { abstract pointcut pc ; before : pc { System.out.println "go " ; } } static aspect CAPT extends APT&amp;lt;C&amp;gt; { pointcut pc : call void C.go ; } }</description>
    <commit commitTime="2005-11-17 08:37:16" id="a7e84c66fc7ced725454c0135fffdb237c899403"/>
    <fixedFiles>
      <file>tests/java5/generics/bugs/lists/case1/IdentifiableAspect.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="115251" reportTime="2005-11-06 21:36:00">
    <summary>BCException when compiling incrementally on constructor-call shadow</summary>
    <description>I get the same BCException when I build incrementally but not after cleaning the project. The code is correct I think and runs fine after clean-and-build. AJDT Build id: 20051104134042 AspectJ version: 1.5.0.200510241400 Sorry if this is another manifestation of a different bug or an AJDT bug. --------------------------------------------------------------- ----------------- Singleton.java package com.isberg.articles.aop7.patterns; /** * CODE article singleton variant without eager/lazy */ public abstract aspect Singleton&amp;lt;Target&amp;gt; pertypewithin Target { private final Object lock = new Object ; private Target singleton; /** * Subaspects define this. All join points must return type Target. */ abstract protected pointcut creation ; pointcut creating : cflow within Singleton+ &amp;amp;&amp;amp; adviceexecution ; Target around : creation &amp;amp;&amp;amp; !creating { synchronized lock { if singleton == null { singleton = proceed ; } return singleton; } } } ----------------- SingletonTest.java package com.isberg.articles.aop7.patterns; import junit.framework.TestCase; public class SingletonTest extends TestCase { public void testSingleton throws Exception { C[] cs = {C.create , new C , C.create }; for int i = 1; i &amp;lt; cs.length; i++ { assertEquals cs[0], cs[i] ; } } static class C { static C create {return new C ;} C {} } static aspect A extends Singleton&amp;lt;C&amp;gt; { protected pointcut creation : execution static C C.create || call C.new ; } } --------------------------------------------------------------- trouble in:public class com.isberg.articles.aop7.patterns.SingletonTest extends junit.framework.TestCase: public void &amp;lt;init&amp;gt; : ALOAD_0 // com.isberg.articles.aop7.patterns.SingletonTest this line 5 INVOKESPECIAL junit.framework.TestCase.&amp;lt;init&amp;gt; V constructor-execution void com.isberg.articles.aop7.patterns.SingletonTest.&amp;lt;init&amp;gt; | RETURN constructor-execution void com.isberg.articles.aop7.patterns.SingletonTest.&amp;lt;init&amp;gt; end public void &amp;lt;init&amp;gt; public void testSingleton throws java.lang.Exception org.aspectj.weaver.MethodDeclarationLineNumber: 6:142 : method-execution void com.isberg.articles.aop7.patterns.SingletonTest.testSingleton | ICONST_3 line 7 | ANEWARRAY com.isberg.articles.aop7.patterns.SingletonTest$C | DUP | ICONST_0 | method-call com.isberg.articles.aop7.patterns.SingletonTest$C com.isberg.articles.aop7.patterns.SingletonTest$C.create | | INVOKESTATIC com.isberg.articles.aop7.patterns.SingletonTest$C.create Lcom/isberg/articles/aop7/patterns/SingletonTest$C; | method-call com.isberg.articles.aop7.patterns.SingletonTest$C com.isberg.articles.aop7.patterns.SingletonTest$C.create | AASTORE | DUP | ICONST_1 | constructor-call void com.isberg.articles.aop7.patterns.SingletonTest$C.&amp;lt;init&amp;gt; | | NEW com.isberg.articles.aop7.patterns.SingletonTest$C | | DUP | | INVOKESPECIAL com.isberg.articles.aop7.patterns.SingletonTest$C.&amp;lt;init&amp;gt; V | constructor-call void com.isberg.articles.aop7.patterns.SingletonTest$C.&amp;lt;init&amp;gt; | AASTORE | DUP | ICONST_2 | method-call com.isberg.articles.aop7.patterns.SingletonTest$C com.isberg.articles.aop7.patterns.SingletonTest$C.create | | INVOKESTATIC com.isberg.articles.aop7.patterns.SingletonTest$C.create Lcom/isberg/articles/aop7/patterns/SingletonTest$C; | method-call com.isberg.articles.aop7.patterns.SingletonTest$C com.isberg.articles.aop7.patterns.SingletonTest$C.create | AASTORE | ASTORE_1 | ICONST_1 line 8 | ISTORE_2 | GOTO L1 | L0: ALOAD_1 // com.isberg.articles.aop7.patterns.SingletonTest$C[] cs line 9 | ICONST_0 | AALOAD | ALOAD_1 // com.isberg.articles.aop7.patterns.SingletonTest$C[] cs | ILOAD_2 // int i | AALOAD | method-call void junit.framework.Assert.assertEquals java.lang.Object, java.lang.Object | | INVOKESTATIC com.isberg.articles.aop7.patterns.SingletonTest.assertEquals Ljava/lang/Object;Ljava/lang/Object; V | method-call void junit.framework.Assert.assertEquals java.lang.Object, java.lang.Object | IINC 2 1 // int i line 8 | L1: ILOAD_2 // int i | ALOAD_1 // com.isberg.articles.aop7.patterns.SingletonTest$C[] cs | ARRAYLENGTH | IF_ICMPLT L0 | RETURN line 11 method-execution void com.isberg.articles.aop7.patterns.SingletonTest.testSingleton end public void testSingleton throws java.lang.Exception end public class com.isberg.articles.aop7.patterns.SingletonTest when implementing on shadow constructor-call void com.isberg.articles.aop7.patterns.SingletonTest$C.&amp;lt;init&amp;gt; when weaving type com.isberg.articles.aop7.patterns.SingletonTest when weaving classes when weaving when incrementally building BuildConfig[c:\home\ws\main-31\.metadata\.plugins\org.eclipse.ajdt.core\devworks-fall.generated.lst] #Files=90 org.aspectj.weaver.BCException: Class com.isberg.articles.aop7.patterns.Singleton does not have a method ajc$around$com_isberg_articles_aop7_patterns_Singleton$1$51e13820 with signature Lorg/aspectj/runtime/internal/AroundClosure; Ljava/lang/Object; when implementing on shadow constructor-call void com.isberg.articles.aop7.patterns.SingletonTest$C.&amp;lt;init&amp;gt; when weaving type com.isberg.articles.aop7.patterns.SingletonTest when weaving classes when weaving when incrementally building BuildConfig[c:\home\ws\main-31\.metadata\.plugins\org.eclipse.ajdt.core\devworks-fall.generated.lst] #Files=90 at org.aspectj.weaver.bcel.LazyClassGen.getLazyMethodGen LazyClassGen.java:1161 at org.aspectj.weaver.bcel.LazyClassGen.getLazyMethodGen LazyClassGen.java:1146 at org.aspectj.weaver.bcel.BcelShadow.weaveAroundInline BcelShadow.java:1973 at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:211 at org.aspectj.weaver.Shadow.implementMungers Shadow.java:514 at org.aspectj.weaver.Shadow.implement Shadow.java:391 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:1782 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:394 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:98 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1478 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1443 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1217 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1039 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:300 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:178 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:759 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:249 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:158 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191</description>
    <commit commitTime="2005-11-23 12:34:51" id="e05df7e5ac7fb91031d8f98d4b93e361918e4b56"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java</file>
    </fixedFiles>
  </bug>
  <bug id="115275" reportTime="2005-11-07 04:14:00">
    <summary>aop.xml aspect include</summary>
    <description>I have a question about load-time weaving in AspectJ. According to the AspectJ 5 Development Kit Developer's Notebook, the &amp;lt;aspects&amp;gt; element can have an &amp;lt;include within="[pattern]"&amp;gt; child element http://eclipse.org/aspectj/doc/next/adk15notebook/ltw-configuration.html . However, when I include that element as a child to the &amp;lt;aspects&amp;gt; element in my aop.xml file, I get a SAX exception: org.xml.sax.SAXException: Unknown element while parsing &amp;lt;aspectj&amp;gt; element: include Is the &amp;lt;include&amp;gt; element currently supported within the &amp;lt;aspects&amp;gt; element? Or do I have to explicitly list every aspect I want woven at load time using an &amp;lt;aspect name="..."&amp;gt; for each aspect? Basically I do not wish to explicitly ennumerate every aspect in the aop.xml file for the load-time weaver. Rather, I want to use a wildcard pattern to capture them all.</description>
    <commit commitTime="2005-11-07 10:04:00" id="e2db71535154c6564fb30bebf2f51fc321a94f7c"/>
    <fixedFiles>
      <file>loadtime/testsrc/org/aspectj/weaver/loadtime/test/DocumentParserTest.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/definition/Definition.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java</file>
      <file>tests/java5/ataspectj/ataspectj/ConcreteAtAspectTest.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="115607" reportTime="2005-11-09 04:35:00">
    <summary>Incorrect structure model for simple declare @type program?</summary>
    <description>This program: ---8&amp;lt;----- @interface I {} class Simple {} public aspect C { declare @type: Simple : @I; } ---8&amp;lt;----- all in a file called C.java, open with the AJ editor when built shows incorrect gutter markers, it shows a double headed arrow on Simple implying that it annotates itself - rather than something outgoing from the declare statement and something incoming on the Simple type.</description>
    <commit commitTime="2005-11-21 16:33:56" id="9ed75a10abaca8a6c8569ead1b74eaaadc980b07"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceLocation.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="115788" reportTime="2005-11-10 05:09:00">
    <summary>NPE CodeStream.java:3463</summary>
    <description>See attached file.</description>
    <commit commitTime="2005-11-14 09:50:22" id="563ab1bc7659edf2d42bed64f131b2a6df1ac56a"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/PerThisOrTargetPointcutVisitor.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="116229" reportTime="2005-11-14 09:49:00">
    <summary>[waiting-on-build] PointcutParser interface cannot be used in LTW environment</summary>
    <description>The PointcutParser interface and the RecflectionWorld on which it depends cannot be used in a run-time environment where the user application and AspectJ are loaded by separate class loaders. This is because the ReflectionWorld uses an unqualified Class.forName call. The existing RuntimePointcuts testcase passes because the current harness incorrectly loads the testcase and AspectJ with the same class loader see AjcTestCase.run . The attached modification to the XML script simulates a more realistic environment. The ReflectionWorld needs to be explicitly created with a class loader. Using Thread.getContextClassLoader is a traditional solution but problematic for both the test harness and environments like OSGi that do not associate a new thread with each application.</description>
    <commit commitTime="2005-11-19 17:08:48" id="522911ec81aeb3ec5b600939d3a2ee6e6297fd0c"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>tests/java5/ataspectj/annotationGen/RuntimePointcuts.java</file>
      <file>weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegate.java</file>
      <file>weaver/src/org/aspectj/weaver/reflect/ReflectionBasedResolvedMemberImpl.java</file>
      <file>weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java</file>
      <file>weaver/src/org/aspectj/weaver/reflect/ReflectionVar.java</file>
      <file>weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java</file>
      <file>weaver/src/org/aspectj/weaver/reflect/ReflectionShadow.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/tools/PointcutParserTest.java</file>
      <file>weaver/src/org/aspectj/weaver/reflect/ReflectionWorld.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
      <file>weaver5/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java</file>
      <file>weaver/src/org/aspectj/weaver/reflect/AnnotationFinder.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/tools/ToolsTests.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/PointcutParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="116254" reportTime="2005-11-14 11:16:00">
    <summary>AjTypeSystem interface cannot be used in LTW environment</summary>
    <description>This API uses unqualified calls to Class.forName . See bug 116229 for more details. The attached patches better simulate a run-time environment and a fix that uses the class loader associated with the type provided by the user.</description>
    <commit commitTime="2005-11-23 13:14:22" id="81e6b60e4eabeaf322651941c65f9f24a0ea80a9"/>
    <fixedFiles>
      <file>aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/StringToType.java</file>
      <file>aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/DeclareSoftImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="116255" reportTime="2005-11-14 11:17:00">
    <summary>XML Linkage Error with LTW</summary>
    <description>I am trying out a recent dev build of AspectJ and am now seeing a new linkage error when I load a Web app that contains an XML deployment descriptor. I'm trying to narrow down the date when this error first appeared. If I build and run with the Sept. 23 dev build all works properly. If I build and run with the Nov. 14 dev build it fails like this ... Here's the output: SEVERE: Error deploying configuration descriptor jpetstore.xml java.lang.LinkageError: org/apache/xerces/jaxp/SAXParserFactoryImpl : already defined in loader at java.lang.ClassLoader.defineClass Ljava.lang.String; [BIILjava.security.ProtectionDomain; Ljava.lang.Class; Unknown Source at java.security.SecureClassLoader.defineClass SecureClassLoader.java:124 at org.apache.catalina.loader.WebappClassLoader.findClassInternal WebappClassLoader.java:1629 at org.apache.catalina.loader.WebappClassLoader.findClass WebappClassLoader.java:850 at org.apache.catalina.loader.WebappClassLoader.loadClass WebappClassLoader.java:1299 at org.apache.catalina.loader.WebappClassLoader.loadClass WebappClassLoader.java:1181 at javax.xml.parsers.FactoryFinder.newInstance FactoryFinder.java:88 at javax.xml.parsers.FactoryFinder.findJarServiceProvider FactoryFinder.java:278 at javax.xml.parsers.FactoryFinder.find FactoryFinder.java:185 at javax.xml.parsers.SAXParserFactory.newInstance SAXParserFactory.java:107 at org.apache.tomcat.util.digester.Digester.getFactory Digester.java:486 at org.apache.tomcat.util.digester.Digester.getParser Digester.java:691 at org.apache.tomcat.util.digester.Digester.getXMLReader Digester.java:899 at org.apache.tomcat.util.digester.Digester.parse Digester.java:1561 at org.apache.catalina.startup.TldConfig.tldScanStream TldConfig.java:513 at org.apache.catalina.startup.TldConfig.tldScanTld TldConfig.java:545 at org.apache.catalina.startup.TldConfig.execute TldConfig.java:300 at org.apache.catalina.core.StandardContext.processTlds StandardContext.java:4193 at org.apache.catalina.core.StandardContext.start StandardContext.java:4049 at org.apache.catalina.core.ContainerBase.addChildInternal ContainerBase.java:759 at org.apache.catalina.core.ContainerBase.addChild ContainerBase.java:739 at org.apache.catalina.core.StandardHost.addChild StandardHost.java:524 at org.apache.catalina.startup.HostConfig.deployDescriptor HostConfig.java:589 at org.apache.catalina.startup.HostConfig.deployDescriptors HostConfig.java:536 at org.apache.catalina.startup.HostConfig.deployApps HostConfig.java:471 at org.apache.catalina.startup.HostConfig.start HostConfig.java:1102 at org.apache.catalina.startup.HostConfig.lifecycleEvent HostConfig.java:311 at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent LifecycleSupport.java:119 at org.apache.catalina.core.ContainerBase.start ContainerBase.java:1020 at org.apache.catalina.core.StandardHost.start StandardHost.java:718 at org.apache.catalina.core.ContainerBase.start ContainerBase.java:1012 error can't determine implemented interfaces of missing type javax.xml.rpc.Call when matching pointcut within * &amp;amp;&amp;amp; call public * javax.xml.rpc.Call.invoke* .. &amp;amp;&amp;amp; target BindingTypePattern java.lang.Object , 0 &amp;amp;&amp;amp; if boolean glassbox.inspector.monitor.resource.RemoteCallMonitor.ajc$if_12 &amp;amp;&amp;amp; persingleton glassbox.inspector.monitor. resource.RemoteCallMonitor when matching shadow method-call boolean org.apache.crimson.parser.ContentModel.empty when weaving type org.apache.crimson.parser.ContentModel when weaving classes when weaving abort trouble in: final class org.apache.crimson.parser.ContentModel extends java.lang.Object: public char type public Object content public org.apache.crimson.parser.ContentModel next private org.apache.crimson.parser.SimpleHashtable cache public void &amp;lt;init&amp;gt; String : ALOAD_0 // org.apache.crimson.parser.ContentModel this line 116 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V constructor-execution void org.apache.crimson.parser.ContentModel.&amp;lt;init&amp;gt; java.lang.String | ALOAD_0 // org.apache.crimson.parser.ContentModel this line 110 | NEW org.apache.crimson.parser.SimpleHashtable | DUP | constructor-call void org.apache.crimson.parser.SimpleHashtable.&amp;lt;init&amp;gt; | | INVOKESPECIAL org.apache.crimson.parser.SimpleHashtable.&amp;lt;init&amp;gt; V | constructor-call void org.apache.crimson.parser.SimpleHashtable.&amp;lt;init&amp;gt; | PUTFIELD org.apache.crimson.parser.ContentModel.cache Lorg/apache/crimson/parser/SimpleHashtable; | ALOAD_0 // org.apache.crimson.parser.ContentModel this line 117 | ICONST_0 | PUTFIELD org.apache.crimson.parser.ContentModel.type C | ALOAD_0 // org.apache.crimson.parser.ContentModel this line 118 | ALOAD_1 // java.lang.String element | PUTFIELD org.apache.crimson.parser.ContentModel.content Ljava/lang/Object; | RETURN line 119 constructor-execution void org.apache.crimson.parser.ContentModel.&amp;lt;init&amp;gt; java.lang.String end public void &amp;lt;init&amp;gt; String public void &amp;lt;init&amp;gt; char, org.apache.crimson.parser.ContentModel : ALOAD_0 // org.apache.crimson.parser.ContentModel this line 125 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V constructor-execution void org.apache.crimson.parser.ContentModel.&amp;lt;init&amp;gt; char, org.apache.crimson.parser.ContentModel | ALOAD_0 // org.apache.crimson.parser.ContentModel this line 110 | NEW org.apache.crimson.parser.SimpleHashtable | DUP | constructor-call void org.apache.crimson.parser.SimpleHashtable.&amp;lt;init&amp;gt; | | INVOKESPECIAL org.apache.crimson.parser.SimpleHashtable.&amp;lt;init&amp;gt; V | constructor-call void org.apache.crimson.parser.SimpleHashtable.&amp;lt;init&amp;gt; | PUTFIELD org.apache.crimson.parser.ContentModel.cache Lorg/apache/crimson/parser/SimpleHashtable; | ALOAD_0 // org.apache.crimson.parser.ContentModel this line 126 | ILOAD_1 // char type | PUTFIELD org.apache.crimson.parser.ContentModel.type C | ALOAD_0 // org.apache.crimson.parser.ContentModel this line 127 | ALOAD_2 // org.apache.crimson.parser.ContentModel content | PUTFIELD org.apache.crimson.parser.ContentModel.content Ljava/lang/Object; | RETURN line 128 constructor-execution void org.apache.crimson.parser.ContentModel.&amp;lt;init&amp;gt; char, org.apache.crimson.parser.ContentModel end public void &amp;lt;init&amp;gt; char, org.apache.crimson.parser.ContentModel public boolean empty : method-execution boolean org.apache.crimson.parser.ContentModel.empty | ALOAD_0 // org.apache.crimson.parser.ContentModel this line 137 | GETFIELD org.apache.crimson.parser.ContentModel.type C | LOOKUPSWITCH | 0: L1 | 42: L0 | 43: L1 | 44: L7 | 63: L0 | 124: L2 | default: L13 | L0: ICONST_1 line 140 | IRETURN | L1: ICONST_0 line 144 | IRETURN | L2: ALOAD_0 // org.apache.crimson.parser.ContentModel this line 147 | GETFIELD org.apache.crimson.parser.ContentModel.content Ljava/lang/Object; | INSTANCEOF org.apache.crimson.parser.ContentModel | IFEQ L3 | ALOAD_0 // org.apache.crimson.parser.ContentModel this | GETFIELD org.apache.crimson.parser.ContentModel.content Ljava/lang/Object; | CHECKCAST org.apache.crimson.parser.ContentModel | method-call boolean org.apache.crimson.parser.ContentModel.empty | | INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.empty Z | method-call boolean org.apache.crimson.parser.ContentModel.empty | IFEQ L3 | ICONST_1 line 149 | IRETURN | L3: ALOAD_0 // org.apache.crimson.parser.ContentModel this line 151 | GETFIELD org.apache.crimson.parser.ContentModel.next Lorg/apache/crimson/parser/ContentModel; | ASTORE_1 | GOTO L6 | L4: ALOAD_1 // org.apache.crimson.parser.ContentModel m line 154 | INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.empty Z | IFEQ L5 | ICONST_1 line 155 | IRETURN | L5: ALOAD_1 // org.apache.crimson.parser.ContentModel m line 153 | GETFIELD org.apache.crimson.parser.ContentModel.next Lorg/apache/crimson/parser/ContentModel; | ASTORE_1 // org.apache.crimson.parser.ContentModel m | L6: ALOAD_1 // org.apache.crimson.parser.ContentModel m line 152 | IFNONNULL L4 | ICONST_0 line 157 | IRETURN | L7: ALOAD_0 // org.apache.crimson.parser.ContentModel this line 160 | GETFIELD org.apache.crimson.parser.ContentModel.content Ljava/lang/Object; | INSTANCEOF org.apache.crimson.parser.ContentModel | IFEQ L8 | ALOAD_0 // org.apache.crimson.parser.ContentModel this line 161 | GETFIELD org.apache.crimson.parser.ContentModel.content Ljava/lang/Object; | CHECKCAST org.apache.crimson.parser.ContentModel | INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.empty Z | IFNE L9 | ICONST_0 line 162 | IRETURN | L8: ICONST_0 line 165 | IRETURN | L9: ALOAD_0 // org.apache.crimson.parser.ContentModel this line 167 | GETFIELD org.apache.crimson.parser.ContentModel.next Lorg/apache/crimson/parser/ContentModel; | ASTORE_2 | GOTO L12 | L10: ALOAD_2 // org.apache.crimson.parser.ContentModel m line 170 | INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.empty Z | IFNE L11 | ICONST_0 line 171 | IRETURN | L11: ALOAD_2 // org.apache.crimson.parser.ContentModel m line 169 | GETFIELD org.apache.crimson.parser.ContentModel.next Lorg/apache/crimson/parser/ContentModel; | ASTORE_2 // org.apache.crimson.parser.ContentModel m | L12: ALOAD_2 // org.apache.crimson.parser.ContentModel m line 168 | IFNONNULL L10 | ICONST_1 line 173 | IRETURN | L13: NEW java.lang.InternalError line 176 | DUP | INVOKESPECIAL java.lang.InternalError.&amp;lt;init&amp;gt; V | ATHROW method-execution boolean org.apache.crimson.parser.ContentModel.empty end public boolean empty public boolean first String : ALOAD_0 // org.apache.crimson.parser.ContentModel this line 186 GETFIELD org.apache.crimson.parser.ContentModel.cache Lorg/apache/crimson/parser/SimpleHashtable; ALOAD_1 // java.lang.String token INVOKEVIRTUAL org.apache.crimson.parser.SimpleHashtable.get Ljava/lang/String; Ljava/lang/Object; CHECKCAST java.lang.Boolean ASTORE_2 ALOAD_2 // java.lang.Boolean b line 189 IFNULL L0 ALOAD_2 // java.lang.Boolean b line 190 INVOKEVIRTUAL java.lang.Boolean.booleanValue Z IRETURN L0: ALOAD_0 // org.apache.crimson.parser.ContentModel this line 193 GETFIELD org.apache.crimson.parser.ContentModel.type C LOOKUPSWITCH 0: L1 42: L1 43: L1 44: L5 63: L1 124: L12 default: L16 L1: ALOAD_0 // org.apache.crimson.parser.ContentModel this line 198 GETFIELD org.apache.crimson.parser.ContentModel.content Ljava/lang/Object; INSTANCEOF java.lang.String IFEQ L4 ALOAD_0 // org.apache.crimson.parser.ContentModel this line 199 GETFIELD org.apache.crimson.parser.ContentModel.content Ljava/lang/Object; ALOAD_1 // java.lang.String token IF_ACMPNE L2 ICONST_1 GOTO L3 L2: ICONST_0 L3: ISTORE_3 GOTO L17 L4: ALOAD_0 // org.apache.crimson.parser.ContentModel this line 201 GETFIELD org.apache.crimson.parser.ContentModel.content Ljava/lang/Object; CHECKCAST org.apache.crimson.parser.ContentModel ALOAD_1 // java.lang.String token INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.first Ljava/lang/String; Z ISTORE_3 // boolean retval GOTO L17 line 202 L5: ALOAD_0 // org.apache.crimson.parser.ContentModel this line 205 GETFIELD org.apache.crimson.parser.ContentModel.content Ljava/lang/Object; INSTANCEOF java.lang.String IFEQ L8 ALOAD_0 // org.apache.crimson.parser.ContentModel this line 206 GETFIELD org.apache.crimson.parser.ContentModel.content Ljava/lang/Object; ALOAD_1 // java.lang.String token IF_ACMPNE L6 ICONST_1 GOTO L7 L6: ICONST_0 L7: ISTORE_3 // boolean retval GOTO L17 L8: ALOAD_0 // org.apache.crimson.parser.ContentModel this line 207 GETFIELD org.apache.crimson.parser.ContentModel.content Ljava/lang/Object; CHECKCAST org.apache.crimson.parser.ContentModel ALOAD_1 // java.lang.String token INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.first Ljava/lang/String; Z IFEQ L9 ICONST_1 line 208 ISTORE_3 // boolean retval GOTO L17 L9: ALOAD_0 // org.apache.crimson.parser.ContentModel this line 209 GETFIELD org.apache.crimson.parser.ContentModel.content Ljava/lang/Object; CHECKCAST org.apache.crimson.parser.ContentModel INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.empty Z IFNE L10 ICONST_0 line 210 ISTORE_3 // boolean retval GOTO L17 L10: ALOAD_0 // org.apache.crimson.parser.ContentModel this line 211 GETFIELD org.apache.crimson.parser.ContentModel.next Lorg/apache/crimson/parser/ContentModel; IFNULL L11 ALOAD_0 // org.apache.crimson.parser.ContentModel this line 212 GETFIELD org.apache.crimson.parser.ContentModel.next Lorg/apache/crimson/parser/ContentModel; ALOAD_1 // java.lang.String token INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.first Ljava/lang/String; Z ISTORE_3 // boolean retval GOTO L17 L11: ICONST_0 line 214 ISTORE_3 // boolean retval GOTO L17 line 215 L12: ALOAD_0 // org.apache.crimson.parser.ContentModel this line 218 GETFIELD org.apache.crimson.parser.ContentModel.content Ljava/lang/Object; INSTANCEOF java.lang.String IFEQ L13 ALOAD_0 // org.apache.crimson.parser.ContentModel this GETFIELD org.apache.crimson.parser.ContentModel.content Ljava/lang/Object; ALOAD_1 // java.lang.String token IF_ACMPNE L13 ICONST_1 line 219 ISTORE_3 // boolean retval GOTO L17 L13: ALOAD_0 // org.apache.crimson.parser.ContentModel this line 220 GETFIELD org.apache.crimson.parser.ContentModel.content Ljava/lang/Object; CHECKCAST org.apache.crimson.parser.ContentModel ALOAD_1 // java.lang.String token INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.first Ljava/lang/String; Z IFEQ L14 ICONST_1 line 221 ISTORE_3 // boolean retval GOTO L17 L14: ALOAD_0 // org.apache.crimson.parser.ContentModel this line 222 GETFIELD org.apache.crimson.parser.ContentModel.next Lorg/apache/crimson/parser/ContentModel; IFNULL L15 ALOAD_0 // org.apache.crimson.parser.ContentModel this line 223 GETFIELD org.apache.crimson.parser.ContentModel.next Lorg/apache/crimson/parser/ContentModel; ALOAD_1 // java.lang.String token INVOKEVIRTUAL org.apache.crimson.parser.ContentModel.first Ljava/lang/String; Z ISTORE_3 // boolean retval GOTO L17 L15: ICONST_0 line 225 ISTORE_3 // boolean retval GOTO L17 line 226 L16: NEW java.lang.InternalError line 229 DUP INVOKESPECIAL java.lang.InternalError.&amp;lt;init&amp;gt; V ATHROW L17: ILOAD_3 // boolean retval line 233 IFEQ L18 ALOAD_0 // org.apache.crimson.parser.ContentModel this line 234 GETFIELD org.apache.crimson.parser.ContentModel.cache Lorg/apache/crimson/parser/SimpleHashtable; ALOAD_1 // java.lang.String token GETSTATIC java.lang.Boolean.TRUE Ljava/lang/Boolean; INVOKEVIRTUAL org.apache.crimson.parser.SimpleHashtable.put Ljava/lang/Object;Ljava/lang/Object; Ljava/lang/Obj ect; POP GOTO L19 L18: ALOAD_0 // org.apache.crimson.parser.ContentModel this line 236 GETFIELD org.apache.crimson.parser.ContentModel.cache Lorg/apache/crimson/parser/SimpleHashtable; ALOAD_1 // java.lang.String token GETSTATIC java.lang.Boolean.FALSE Ljava/lang/Boolean; INVOKEVIRTUAL org.apache.crimson.parser.SimpleHashtable.put Ljava/lang/Object;Ljava/lang/Object; Ljava/lang/Obj ect; POP L19: ILOAD_3 // boolean retval line 238 IRETURN end public boolean first String end final class org.apache.crimson.parser.ContentModel</description>
    <commit commitTime="2005-11-15 17:04:00" id="fabf1598298cb56705e20b4d6a6d64f5c72798eb"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="116305" reportTime="2005-11-14 14:16:00">
    <summary>Unexpected error: can't determine implemented interfaces of missing type</summary>
    <description>I have reusable library code that imports a type a JAX-RPC Call in this case for use in two ways: 1 matching in a method signature. 2 casting and use in an advice body It used to work properly when I used it in a load-time weaving configuration without the Call type being available on the classpath I think it broke in the last week . However, I am now getting an abort error "can't determine implemented interfaces of missing type" when weaving this aspect into another type when the imported Call type isn’t visible in a classloader. I tried changing the code to remove the import and to use a fully qualified name in the pointcut and a reflective invocation in the advice body . However, this still fails in the same way. These pointcuts are presumably causing the error: public abstract aspect AbstractRequestMonitor { protected pointcut scope : within * ;//if true ; protected pointcut monitorEnabled : isMonitorEnabled &amp;amp;&amp;amp; scope ; protected abstract pointcut isMonitorEnabled ; ... } public abstract aspect AbstractResourceMonitor extends AbstractRequestMonitor { ... } public aspect RemoteCallMonitor extends AbstractResourceMonitor { protected pointcut isMonitorEnabled : if aspectOf .isEnabled ; public pointcut jaxRpcClientCall Object wsCallObj : call public * javax.xml.rpc.Call.invoke* .. &amp;amp;&amp;amp; target wsCallObj ; Object around final Object wsCallObj : jaxRpcClientCall wsCallObj &amp;amp;&amp;amp; monitorEnabled { ... Here is the output: org.aspectj.bridge.AbortException: can't determine implemented interfaces of missing type javax.xml.rpc.Call when matching pointcut within * &amp;amp;&amp;amp; call public * javax.xml.rpc.Call.invoke* .. &amp;amp;&amp;amp; target BindingTypePattern java.lang.Object, 0 &amp;amp;&amp;amp; if boolean glassbox.inspector.monitor.resource.RemoteCallMonitor.ajc$if_12 &amp;amp;&amp;amp; persingleton glassbox.inspector.monitor.resource.RemoteCallMonitor when matching shadow method-call java.util.Locale java.util.Locale.getDefault when weaving type org.apache.struts.action.ActionServlet when weaving classes when weaving at org.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHandler.handleMessa ge WeavingAdaptor.java:364 at org.aspectj.bridge.MessageUtil.error MessageUtil.java:81 at org.aspectj.weaver.MissingResolvedTypeWithKnownSignature.raiseCantFindType MissingResolvedTypeWithKnownSignature.java:195 at org.aspectj.weaver.MissingResolvedTypeWithKnownSignature.getDeclaredInterfaces MissingResolvedTypeWithKnownSignature.java:77 at org.aspectj.weaver.ResolvedType.getDirectSupertypes ResolvedType.java:64 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:312 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:236 at org.aspectj.weaver.patterns.KindedPointcut.warnOnConfusingSig KindedPointcut.java:151 at org.aspectj.weaver.patterns.KindedPointcut.matchInternal KindedPointcut.java:108 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:145 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:57 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:145 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:55 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:145 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:55 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:145 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:55 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:145 at org.aspectj.weaver.ShadowMunger.match ShadowMunger.java:64 at org.aspectj.weaver.Advice.match Advice.java:109 at org.aspectj.weaver.bcel.BcelAdvice.match BcelAdvice.java:98 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2098 at org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction BcelClassWeaver.java:2085 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:1867 at org.aspectj.weaver.bcel.BcelClassWeaver.matchInit BcelClassWeaver.java:1731 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:1660 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:445 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:101 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1531 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1485 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1266 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1088 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:266 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:198 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:67 at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform ClassPreProcessorAgentAdapter.java:52 …</description>
    <commit commitTime="2005-11-15 09:15:14" id="676aa089feb829d744fa054b52af39f83e22952f"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="116626" reportTime="2005-11-16 03:54:00">
    <summary>Load-time weaving - exception from the weaver</summary>
    <description>Hi again :- I'm trying to use loadtime weaving and getting an exception. Please look at the testcase: Java code: ========== public class Test&amp;lt;T&amp;gt; { Set&amp;lt;T&amp;gt; intsSet; public Test { this.intsSet = new HashSet&amp;lt;T&amp;gt; ; } public &amp;lt;T&amp;gt; T[] getObjs T[] a { return intsSet.toArray a ; } public static void main String[] args { System.out.println "AAA :- " ; new TTT .foo ; } } class TTT { public void foo { Test&amp;lt;Object&amp;gt; mt = new Test&amp;lt;Object&amp;gt; ; Object[] arr = mt.getObjs new Object[]{} ; } } Aspect: ======= public privileged aspect TestAspect { pointcut TestToArray Test mt : target mt &amp;amp;&amp;amp; !within TestAspect ; Object[] around Test mt, Object[] objs : TestToArray mt &amp;amp;&amp;amp; args objs &amp;amp;&amp;amp; execution Object[] com.mprv.secsph.Test.getObjs Object[] { objs = proceed mt, objs ; System.out.println "GO Aspects!" ; return objs; } } aop.xml ======= &amp;lt;aspectj&amp;gt; &amp;lt;aspects&amp;gt; &amp;lt;aspect name="com.mprv.secsph.TestAspect"/&amp;gt; &amp;lt;/aspects&amp;gt; &amp;lt;weaver options="-verbose -XlazyTjp -showWeaveInfo"&amp;gt; &amp;lt;include within="com.mprv.*"/&amp;gt; &amp;lt;/weaver&amp;gt; &amp;lt;/aspectj&amp;gt; Program output: ============== AAA :- info weaving 'com/mprv/secsph/TestAspect' java.lang.NullPointerException at org.aspectj.weaver.tools.WeavingAdaptor$WeavingClassFileProvider.getBytes WeavingAdaptor.java:390 at org.aspectj.weaver.tools.WeavingAdaptor.getAtAspectJAspectBytes WeavingAdaptor.java:259 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:181 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:66 at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform ClassPreProcessorAgentAdapter.java:52 at sun.instrument.TransformerManager.transform TransformerManager.java:122 at sun.instrument.InstrumentationImpl.transform InstrumentationImpl.java:155 at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:620 at java.security.SecureClassLoader.defineClass SecureClassLoader.java:124 at java.net.URLClassLoader.defineClass URLClassLoader.java:260 at java.net.URLClassLoader.access$100 URLClassLoader.java:56 at java.net.URLClassLoader$1.run URLClassLoader.java:195 at java.security.AccessController.doPrivileged Native Method at java.net.URLClassLoader.findClass URLClassLoader.java:188 at java.lang.ClassLoader.loadClass ClassLoader.java:306 at sun.misc.Launcher$AppClassLoader.loadClass Launcher.java:268 at java.lang.ClassLoader.loadClass ClassLoader.java:251 at java.lang.ClassLoader.loadClassInternal ClassLoader.java:319 at com.mprv.secsph.Test.getObjs Test.java:1 at com.mprv.secsph.TTT.foo Test.java:34 at com.mprv.secsph.Test.main Test.java:27 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:585 at com.intellij.rt.execution.application.AppMain.main AppMain.java:86 GO Aspects! ==== This exception doesn't happen all the time ... but if you will try a few times, you will probably get it. May you can understand what is the problem event without running the test case. Anyway, I took a look at your code, and have a guess but it's only the guess - My aspect is in the application classpath. Actually it's in the same package, so may be you are trying to weave the aspect with itself somehow ... Thanks! Misha.</description>
    <commit commitTime="2005-11-18 09:01:17" id="c7608950f0deb6f9951435f58209ad60aaf28e06"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="116679" reportTime="2005-11-16 11:07:00">
    <summary>Targetting 1.2.1 runtime when building with the 1.5.0 compiler.</summary>
    <description>Some products are now shipping aspectjrt.jar from the 1.2.1 compiler. We would like the users of these products to benefit from all the latest and greatest enhancements in the tools and compiler when developing their code - however, they will need to deploy this code on a runtime containing the 1.2.1 aspectjrt. We have made some enhancements in the 1.5.0 runtime that affect compatibility - one that springs to mind is changing the signature of the code that builds join point objects to save memory at runtime. We need to enable users to specify they want to deploy on a back level aspectj - something like a "-ajruntimetarget 1.2.1" option only with a better name - this would generate code that ran against the 1.2.1 aspectjrt.jar. At the same time I think we should perhaps if they aren't there already reinstate the old way of building join point objects so that code targetting a 1.2.1 runtime will run happily if it finds a 1.5.0 runtime around.</description>
    <commit commitTime="2005-11-29 13:21:24" id="385d9ef905eb07bdd37fd25887ad0a8e69e06f45"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AspectJBuilder.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java</file>
      <file>weaver/src/org/aspectj/weaver/Constants.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java</file>
      <file>weaver/src/org/aspectj/weaver/World.java</file>
    </fixedFiles>
  </bug>
  <bug id="116755" reportTime="2005-11-16 20:19:00">
    <summary>PointcutParser is not configurable</summary>
    <description>I'm testing the reflection and weaver tools APIs. When I using following code: PointcutParser parse = new PointcutParser ; String expr = "call public * main.hello .. "; PointcutExpression pex = parse.parsePointcutExpression expr ; Whenever I use a full qualified class name in pointcut expression, an exception is throwed out: java.lang.IllegalArgumentException: warning no match for this type name: obj [Xlint:invalidAbsoluteTypeName] I try to turn off this Lint exception. But it seems I must access to world field of PointcutParser. This is inconvenient because world field is not exposed by PointcutParser. The existing PointcutParser interface implicitly creates a World and does not allow any configuration including classpath or lint. But developers may need this kind of control.</description>
    <commit commitTime="2005-11-19 17:08:48" id="522911ec81aeb3ec5b600939d3a2ee6e6297fd0c"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>tests/java5/ataspectj/annotationGen/RuntimePointcuts.java</file>
      <file>weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegate.java</file>
      <file>weaver/src/org/aspectj/weaver/reflect/ReflectionBasedResolvedMemberImpl.java</file>
      <file>weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java</file>
      <file>weaver/src/org/aspectj/weaver/reflect/ReflectionVar.java</file>
      <file>weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java</file>
      <file>weaver/src/org/aspectj/weaver/reflect/ReflectionShadow.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/tools/PointcutParserTest.java</file>
      <file>weaver/src/org/aspectj/weaver/reflect/ReflectionWorld.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
      <file>weaver5/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java</file>
      <file>weaver/src/org/aspectj/weaver/reflect/AnnotationFinder.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/tools/ToolsTests.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/PointcutParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="116890" reportTime="2005-11-17 10:59:00">
    <summary>enums make the ajdt compiler to throw a npe</summary>
    <description>I'm trying to encapsulate the SWT thread safety in an aspect using the new annotation style but I've verified that rewriting the aspect using the "normal" syntax changes nothing . My aspect is: package it.uniba.di.cdg.xcore.ui; import it.uniba.di.cdg.xcore.util.RunnableWithReturn; import org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.annotation.Around; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.Pointcut; import org.eclipse.swt.widgets.Display; @Aspect public class SwtThreadSafety { @Pointcut "call @SwtSynchExec * *.* .. " protected void uiSynchMethods {} @Pointcut "call @SwtAsynchExec * *.* .. " protected void uiAsynchMethods {} @Around "uiSynchMethods " public Object wrapSynchMethods final ProceedingJoinPoint thisJoinPoint { RunnableWithReturn r = new RunnableWithReturn { public void run { try { _returnValue = thisJoinPoint.proceed ; } catch Throwable e { throw new RuntimeException e ; // Soft the exception ... } } }; Display.getCurrent .asyncExec r ; return r.getReturnValue ; } @Around "uiAsynchMethods " public void wrapAsynchMethods final ProceedingJoinPoint thisJoinPoint { Runnable r = new Runnable { public void run { try { thisJoinPoint.proceed ; } catch Throwable e { throw new RuntimeException e ; // Soft the exception ... } } }; Display.getCurrent .asyncExec r ; } } @SwtAsynchExec and @SwtSynchExec are plain markers which define no property. When I save the file the exception is thrown see the uploaded stacktrace . This is the interface containing the enum type: package it.uniba.di.cdg.xcore.ui.views; public interface IMessageBoard { enum LookType { SYSTEM, LOCAL_USER, BUDDY }; void appendMessage LookType look, String message ; } If I change LookType to be a classe, the npe goes away it is generated every time I try to save the file and restarting the JDT changes nothing .</description>
    <commit commitTime="2005-11-18 10:09:32" id="557f5b4676f6484dc9b43e2d1a5a8172ef76d5cf"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java</file>
    </fixedFiles>
  </bug>
  <bug id="116899" reportTime="2005-11-17 12:31:00">
    <summary>Using -verbose in aop.xml does not yield info messages</summary>
    <description>The interpretation of the -verbose option for LTW is not consistent with other uses in AspectJ e.g. ajc, iajc. It should allow info as well as warining and error messages to be output. The option parser and testcase need to be updated.</description>
    <commit commitTime="2005-11-24 09:27:06" id="76d7e83c7fdce7555ce9d9c6ca5bfaaf31d234db"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Options.java</file>
      <file>tests/java5/ataspectj/ataspectj/ltwlog/MessageHolder.java</file>
    </fixedFiles>
  </bug>
  <bug id="116949" reportTime="2005-11-17 17:09:00">
    <summary>[waitingOnAJDTdrop]Exception thrown from AspectJ compiler</summary>
    <description>java.lang.ClassCastException at org.aspectj.weaver.bcel.BcelClassWeaver.checkForOverride BcelClassWeaver.java:607 at org.aspectj.weaver.bcel.BcelClassWeaver.calculateAnyRequiredBridgeMethods BcelClassWeaver.java:676 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1537 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1485 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1266 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1088 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:300 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:178 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspect j_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:809 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:254 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:163 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 trouble in: public class ts.simul.client.AbstractClient$OptionSetter extends ts.util.CmdLineProgram$OptionSetterBase: final ts.simul.client.AbstractClient this$0 private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0 public void &amp;lt;init&amp;gt; ts.simul.client.AbstractClient org.aspectj.weaver.MethodDeclarationLineNumber: 59:1411 : ALOAD_0 // ts.simul.client.AbstractClient$OptionSetter this line 60 ALOAD_1 PUTFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 Lts/simul/client/AbstractClient; ALOAD_0 // ts.simul.client.AbstractClient$OptionSetter this line 59 ALOAD_1 INVOKESPECIAL ts.util.CmdLineProgram$OptionSetterBase.&amp;lt;init&amp;gt; Lts/util/CmdLineProgram; V constructor-execution void ts.simul.client.AbstractClient$OptionSetter.&amp;lt;init&amp;gt; ts.simul.client.AbstractClient | RETURN constructor-execution void ts.simul.client.AbstractClient$OptionSetter.&amp;lt;init&amp;gt; ts.simul.client.AbstractClient end public void &amp;lt;init&amp;gt; ts.simul.client.AbstractClient public boolean setOption_file String throws ts.util.IllegalProgramArgumentException org.aspectj.weaver.MethodDeclarationLineNumber: 62:1469 : method-execution boolean ts.simul.client.AbstractClient$OptionSetter.setOption_file java.lang.String | ALOAD_1 // java.lang.String optParam line 65 | method-call int java.lang.String.length | | INVOKEVIRTUAL java.lang.String.length I | method-call int java.lang.String.length | IFLE L1 | ALOAD_0 // ts.simul.client.AbstractClient$OptionSetter this line 66 | GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 Lts/simul/client/AbstractClient; | ALOAD_1 // java.lang.String optParam | PUTFIELD ts.simul.client.AbstractClient.fileName Ljava/lang/String; | NEW java.io.File line 67 | DUP | ALOAD_0 // ts.simul.client.AbstractClient$OptionSetter this | GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 Lts/simul/client/AbstractClient; | GETFIELD ts.simul.client.AbstractClient.fileName Ljava/lang/String; | constructor-call void java.io.File.&amp;lt;init&amp;gt; java.lang.String | | INVOKESPECIAL java.io.File.&amp;lt;init&amp;gt; Ljava/lang/String; V | constructor-call void java.io.File.&amp;lt;init&amp;gt; java.lang.String | ASTORE_2 | ALOAD_2 // java.io.File file line 68 | method-call boolean java.io.File.exists | | INVOKEVIRTUAL java.io.File.exists Z | method-call boolean java.io.File.exists | IFNE L0 | NEW ts.util.IllegalProgramArgumentException line 69 | DUP | NEW java.lang.StringBuilder | DUP | LDC "Cannot find file: [" | constructor-call void java.lang.StringBuilder.&amp;lt;init&amp;gt; java.lang.String | | INVOKESPECIAL java.lang.StringBuilder.&amp;lt;init&amp;gt; Ljava/lang/String; V | constructor-call void java.lang.StringBuilder.&amp;lt;init&amp;gt; java.lang.String | ALOAD_0 // ts.simul.client.AbstractClient$OptionSetter this | GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 Lts/simul/client/AbstractClient; | GETFIELD ts.simul.client.AbstractClient.fileName Ljava/lang/String; | method-call java.lang.StringBuilder java.lang.StringBuilder.append java.lang.String | | INVOKEVIRTUAL java.lang.StringBuilder.append Ljava/lang/String; Ljava/lang/StringBuilder; | method-call java.lang.StringBuilder java.lang.StringBuilder.append java.lang.String | LDC "]" | method-call java.lang.StringBuilder java.lang.StringBuilder.append java.lang.String | | INVOKEVIRTUAL java.lang.StringBuilder.append Ljava/lang/String; Ljava/lang/StringBuilder; | method-call java.lang.StringBuilder java.lang.StringBuilder.append java.lang.String | method-call java.lang.String java.lang.StringBuilder.toString | | INVOKEVIRTUAL java.lang.StringBuilder.toString Ljava/lang/String; | method-call java.lang.String java.lang.StringBuilder.toString | constructor-call void ts.util.IllegalProgramArgumentException.&amp;lt;init&amp;gt; java.lang.String | | INVOKESPECIAL ts.util.IllegalProgramArgumentException.&amp;lt;init&amp;gt; Ljava/lang/String; V | constructor-call void ts.util.IllegalProgramArgumentException.&amp;lt;init&amp;gt; java.lang.String | ATHROW | L0: ICONST_1 line 70 | IRETURN | L1: ICONST_0 line 73 | IRETURN method-execution boolean ts.simul.client.AbstractClient$OptionSetter.setOption_file java.lang.String end public boolean setOption_file String throws ts.util.IllegalProgramArgumentException public boolean setOption_class String throws ts.util.IllegalProgramArgumentException org.aspectj.weaver.MethodDeclarationLineNumber: 76:1971 : method-execution boolean ts.simul.client.AbstractClient$OptionSetter.setOption_class java.lang.String | ALOAD_1 // java.lang.String optParam line 79 | method-call int java.lang.String.length | | INVOKEVIRTUAL java.lang.String.length I | method-call int java.lang.String.length | IFLE L1 | ALOAD_0 // ts.simul.client.AbstractClient$OptionSetter this line 80 | GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 Lts/simul/client/AbstractClient; | ALOAD_1 // java.lang.String optParam | PUTFIELD ts.simul.client.AbstractClient.className Ljava/lang/String; | catch ts.simul.SimulationException -&amp;gt; E0 | | ALOAD_0 // ts.simul.client.AbstractClient$OptionSetter this line 82 | | GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 Lts/simul/client/AbstractClient; | | ALOAD_0 // ts.simul.client.AbstractClient$OptionSetter this | | GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 Lts/simul/client/AbstractClient; | | GETFIELD ts.simul.client.AbstractClient.className Ljava/lang/String; | | method-call java.lang.Class ts.simul.SceneFactory.getSceneClass java.lang.String | | | INVOKESTATIC ts.simul.SceneFactory.getSceneClass Ljava/lang/String; Ljava/lang/Class; | | method-call java.lang.Class ts.simul.SceneFactory.getSceneClass java.lang.String | | PUTFIELD ts.simul.client.AbstractClient.sceneClass Ljava/lang/Class; | | ALOAD_0 // ts.simul.client.AbstractClient$OptionSetter this line 83 | | GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 Lts/simul/client/AbstractClient; | | method-call void ts.simul.client.AbstractClient.setBeanInfoSearchPath | | | INVOKESTATIC ts.simul.Architecture.aspectOf Lts/simul/Architecture; | | | GETSTATIC ts.simul.client.AbstractClient$OptionSetter.ajc$tjp_0 Lorg/aspectj/lang/JoinPoint$StaticPart; | | | INVOKEVIRTUAL ts.simul.Architecture.ajc$before$ts_simul_Architecture$1$ae285a4d Lorg/aspectj/lang/JoinPoint$StaticPart; V | | | INVOKEVIRTUAL ts.simul.client.AbstractClient.setBeanInfoSearchPath V | | method-call void ts.simul.client.AbstractClient.setBeanInfoSearchPath | | GOTO L0 | catch ts.simul.SimulationException -&amp;gt; E0 | E0: ASTORE_2 line 85 | NEW ts.util.IllegalProgramArgumentException line 86 | DUP | ALOAD_2 // ts.simul.SimulationException e | method-call java.lang.String ts.simul.SimulationException.getMessage | | INVOKEVIRTUAL ts.simul.SimulationException.getMessage Ljava/lang/String; | method-call java.lang.String ts.simul.SimulationException.getMessage | constructor-call void ts.util.IllegalProgramArgumentException.&amp;lt;init&amp;gt; java.lang.String | | INVOKESPECIAL ts.util.IllegalProgramArgumentException.&amp;lt;init&amp;gt; Ljava/lang/String; V | constructor-call void ts.util.IllegalProgramArgumentException.&amp;lt;init&amp;gt; java.lang.String | ATHROW | L0: ICONST_1 line 88 | IRETURN | L1: ICONST_0 line 91 | IRETURN method-execution boolean ts.simul.client.AbstractClient$OptionSetter.setOption_class java.lang.String end public boolean setOption_class String throws ts.util.IllegalProgramArgumentException public boolean setOption_name String org.aspectj.weaver.MethodDeclarationLineNumber: 94:2593 : method-execution boolean ts.simul.client.AbstractClient$OptionSetter.setOption_name java.lang.String | ALOAD_0 // ts.simul.client.AbstractClient$OptionSetter this line 96 | GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 Lts/simul/client/AbstractClient; | ALOAD_1 // java.lang.String optParam | PUTFIELD ts.simul.client.AbstractClient.sceneName Ljava/lang/String; | ICONST_1 line 97 | IRETURN method-execution boolean ts.simul.client.AbstractClient$OptionSetter.setOption_name java.lang.String end public boolean setOption_name String public boolean setOption_actors String org.aspectj.weaver.MethodDeclarationLineNumber: 100:2739 : method-execution boolean ts.simul.client.AbstractClient$OptionSetter.setOption_actors java.lang.String | catch java.lang.NumberFormatException -&amp;gt; E0 | | ALOAD_1 // java.lang.String optParam line 103 | | method-call int java.lang.Integer.parseInt java.lang.String | | | INVOKESTATIC java.lang.Integer.parseInt Ljava/lang/String; I | | method-call int java.lang.Integer.parseInt java.lang.String | | ISTORE_2 | | GOTO L0 | catch java.lang.NumberFormatException -&amp;gt; E0 | E0: ASTORE_2 // int n line 105 | ICONST_0 line 106 | IRETURN | L0: ICONST_1 line 108 | IRETURN method-execution boolean ts.simul.client.AbstractClient$OptionSetter.setOption_actors java.lang.String end public boolean setOption_actors String end public class ts.simul.client.AbstractClient$OptionSetter when weaving type ts.simul.client.AbstractClient$OptionSetter when weaving classes when weaving when incrementally building BuildConfig [c:\Projects\eclipse\.metadata\.plugins\org.eclipse.ajdt.core\TS.generated.lst] #Files=79</description>
    <commit commitTime="2005-11-18 09:17:56" id="dd9a9b284ab44b14ea3735d2663e85afb861220b"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="117189" reportTime="2005-11-19 13:05:00">
    <summary>Contribution: reduce overhead when no aspects define</summary>
    <description>This patch to the ClassLoaderWeavingAdaptor adds two optimizations when enabled is false for the adaptor: it immediately returns false for accept and it also avoids the overhead of constructing a weaver or world. It also contains commented out code that was letting me improve performance by loading reflective proxies instead of creating BCEL objects for a resolution loader which is currently broken since reflective proxies now require a ReflectionWorld...</description>
    <commit commitTime="2005-11-23 09:01:53" id="a5ac5af396426f2049abe52036748bd344a7d1fe"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="117209" reportTime="2005-11-20 01:07:00">
    <summary>None</summary>
    <description>AspectJ compiler version: 1.5M5 AJDT plugin version: 1.3.0 This is the same error as reported by Bug#69706 , even the bug is resolved I'm still experiencing problem by using the classes attached at the bottom. // RUNTIME ERROR MESSAGE ======================== Exception in thread "main" java.lang.VerifyError: class: DefaultInterfaceImplementationRecipe, method: &amp;lt;clinit&amp;gt; signature: V Stack size too large at MyClass_ch16.main MyClass_ch16.java:15 // MyClass_ch16.java ==================== public class MyClass_ch16 { public void foo int number, String name { System.out.println "Inside foo int, String with args: " + number + ":" + name ; } public static void main String[] args { // Create an instance of MyClass MyInterface_ch16 myObject = MyInterface_ch16 new MyClass_ch16 ; // Make the call to foo myObject.bar "Russ" ; } } //MyInterface_ch16.java ======================= public interface MyInterface_ch16 { public void bar String name ; } // DefaultInterfaceImplementationRecipe.aj ========================================== public aspect DefaultInterfaceImplementationRecipe { declare parents : MyClass_ch16 implements MyInterface_ch16; // Declare the default implementation of the bar method public void MyInterface_ch16.bar String name { System.out.println "bar String called on " + this ; } }</description>
    <commit commitTime="2005-11-30 19:51:24" id="551b9ca14c28b843c1dbbc14a48427bf4bb9f097"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/AjdeInteractionTestbed.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="117614" reportTime="2005-11-22 20:57:00">
    <summary>ajc crashes on common-logging-1.0.4.jar</summary>
    <description>--- Dump Properties --- Dump file: ajcore.20051122.152749.326.txt Dump reason: org.aspectj.weaver.BCException Dump on exception: true Dump at exit condition: abort ---- Exception Information --- org.aspectj.weaver.BCException: bad resolve of void org.apache.log4j.Category.log java.lang.String, org.apache.log4j.Level, java.lang.Object, java.lang.Throwable at org.aspectj.weaver.World.getModifiers World.java:216 at org.aspectj.weaver.Member.getModifiers Member.java:406 at org.aspectj.weaver.patterns.KindedPointcut.warnOnConfusingSig KindedPointcut.java:109 at org.aspectj.weaver.patterns.KindedPointcut.match KindedPointcut.java:69 at org.aspectj.weaver.patterns.OrPointcut.match OrPointcut.java:44 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:43 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:43 at org.aspectj.weaver.ShadowMunger.match ShadowMunger.java:62 at org.aspectj.weaver.Advice.match Advice.java:91 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:1126 at org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction BcelClassWeaver.java:1115 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:987 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:827 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:348 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:83 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:742 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:707 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:634 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:577 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:243 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:118 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:383 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:680 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:168 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:102 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:109 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:291</description>
    <commit commitTime="2005-11-24 14:28:27" id="6eb77c5a3b8328e67a047bc6410a858302a3c714"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</file>
      <file>weaver/src/org/aspectj/weaver/Lint.java</file>
      <file>weaver/src/org/aspectj/weaver/MissingResolvedTypeWithKnownSignature.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/World.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="117622" reportTime="2005-11-22 22:17:00">
    <summary>Test Failures in Reflection 1.5 World Delegate Implementation</summary>
    <description>See attached test case for the weaver5 project, to be placed in java5-testsrc/org/aspectj/weaver/reflect Running it produces similar stack traces for all tests: java.lang.StackOverflowError at java.lang.Class.forName Ljava.lang.String;ZLjava.lang.ClassLoader; Ljava.lang.Class; Unknown Source at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createDelegate ReflectionBasedReferenceTypeDelegateFactory.java:39 at org.aspectj.weaver.reflect.ReflectionWorld.resolveDelegate ReflectionWorld.java:102 at org.aspectj.weaver.World.resolveToReferenceType World.java:296 at org.aspectj.weaver.World.resolve World.java:213 at org.aspectj.weaver.World.resolve World.java:134 at org.aspectj.weaver.World.resolve World.java:261 at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.fromType Java15ReflectionBasedReferenceTypeDelegate.java:270 at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.fromType Java15ReflectionBasedReferenceTypeDelegate.java:273 at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.fromTypes Java15ReflectionBasedReferenceTypeDelegate.java:312 at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.fromType Java15ReflectionBasedReferenceTypeDelegate.java:280 at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.getTypeVariables Java15ReflectionBasedReferenceTypeDelegate.java:140 at org.aspectj.weaver.World.makeGenericTypeFrom World.java:365 at org.aspectj.weaver.World.resolveToReferenceType World.java:302 at org.aspectj.weaver.World.resolve World.java:213 at org.aspectj.weaver.World.resolve World.java:134 at org.aspectj.weaver.World.resolve World.java:261 at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.fromType Java15ReflectionBasedReferenceTypeDelegate.java:270 at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.fromType Java15ReflectionBasedReferenceTypeDelegate.java:273 at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.fromTypes Java15ReflectionBasedReferenceTypeDelegate.java:312 at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.fromType Java15ReflectionBasedReferenceTypeDelegate.java:280 at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.getTypeVariables Java15ReflectionBasedReferenceTypeDelegate.java:140 at org.aspectj.weaver.World.makeGenericTypeFrom World.java:365 at org.aspectj.weaver.World.resolveToReferenceType World.java:302 at org.aspectj.weaver.World.resolve World.java:213 at org.aspectj.weaver.World.resolve World.java:134</description>
    <commit commitTime="2005-11-23 16:30:16" id="5cba2054c0bbfb4bdf2f00f044e841741055282c"/>
    <fixedFiles>
      <file>weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java</file>
      <file>weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java</file>
    </fixedFiles>
  </bug>
  <bug id="117681" reportTime="2005-11-23 04:27:00">
    <summary>VerifyError when using annotations to define inter-type annotation</summary>
    <description>Using Sun JDK1.5.0_04 Audit.java public interface Audit { public String getLastUpdatedBy ; public void setLastUpdatedBy String un ; } AuditImpl.java public class AuditImpl implements Audit { private String lastUpdatedBy; public String getLastUpdatedBy { return lastUpdatedBy; } public void setLastUpdatedBy String un { lastUpdatedBy = un; } } TestAspect.java import org.aspectj.lang.annotation.*; Test.java @Aspect public class TestAspect { @DeclareParents "Test" public static Audit introduced = new AuditImpl ; } public class Test { public static void main String[] args { Test t = new Test ; Audit a = Audit t; a.setLastUpdatedBy "username" ; System.out.println "Username ="+a.getLastUpdatedBy ; } } files.lst Audit.java AuditImpl.java TestAspect.java Test.java Compiled using the following command d:\aspectj1.5\bin\ajc -classpath "d:\aspectj1.5\lib\aspectjrt.jar" -argfi le files.lst -1.5 d:\aspectj1.5\bin\aj5 Test Exception in thread "main" java.lang.VerifyError: class: Test, method: setLastUpdatedBy signature: Ljava/lang/String; V Incompatible argument to function d:\aspectj1.5\bin\aj5 -noverify Test Username=</description>
    <commit commitTime="2005-11-23 12:54:02" id="11ab99f1c46007b084873d1050da2f9e78e43c82"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="117854" reportTime="2005-11-24 04:06:00">
    <summary>LTW with Hibernate/CGLIB/ASM</summary>
    <description>Hi, I've enabled LTW in my project which is using Hibernate. Hibernate's framework produces cglib generated proxies for several classes. The problem is, when LTW is enabled the generated proxies throw this exception: proxy.CGLIBLazyInitializer CGLIBLazyInitializer.java:104 - CGLIB Enhancement failed: com.mprv.secsph.profile.domain.UrlItem java.lang.VerifyError: class: com/mprv/secsph/profile/domain/UrlItem$$EnhancerByCGLIB$$859d1101, method: changeItemMode signature: Lcom/mprv/secsph/profile/domain/ProfileItem$ItemStatus;Lcom/mprv/secsph/profile/domain/ProfileItem$StatusReason;Z Z Inconsistent stack height 2 at java.lang.Class.getDeclaredMethods0 Native Method at java.lang.Class.privateGetDeclaredMethods Class.java:2365 at java.lang.Class.getDeclaredMethod Class.java:1907 at net.sf.cglib.proxy.Enhancer.getCallbacksSetter Enhancer.java:597 at net.sf.cglib.proxy.Enhancer.setCallbacksHelper Enhancer.java:585 at net.sf.cglib.proxy.Enhancer.setThreadCallbacks Enhancer.java:579 at net.sf.cglib.proxy.Enhancer.createUsingReflection Enhancer.java:601 at net.sf.cglib.proxy.Enhancer.firstInstance Enhancer.java:532 at net.sf.cglib.core.AbstractClassGenerator.create AbstractClassGenerator.java:220 at net.sf.cglib.proxy.Enhancer.createHelper Enhancer.java:373 at net.sf.cglib.proxy.Enhancer.create Enhancer.java:281 at net.sf.cglib.proxy.Enhancer.create Enhancer.java:640 at org.hibernate.proxy.CGLIBLazyInitializer.getProxyFactory CGLIBLazyInitializer.java:95 at org.hibernate.proxy.CGLIBProxyFactory.postInstantiate CGLIBProxyFactory.java:42 at org.hibernate.tuple.PojoTuplizer.buildProxyFactory PojoTuplizer.java:144 at org.hibernate.tuple.AbstractTuplizer.&amp;lt;init&amp;gt; AbstractTuplizer.java:83 at org.hibernate.tuple.PojoTuplizer.&amp;lt;init&amp;gt; PojoTuplizer.java:54 at org.hibernate.tuple.TuplizerLookup.create TuplizerLookup.java:47 at org.hibernate.tuple.EntityMetamodel.&amp;lt;init&amp;gt; EntityMetamodel.java:218 at org.hibernate.persister.entity.BasicEntityPersister.&amp;lt;init&amp;gt; BasicEntityPersister.java:400 at org.hibernate.persister.entity.SingleTableEntityPersister.&amp;lt;init&amp;gt; SingleTableEntityPersister.java:104 at org.hibernate.persister.PersisterFactory.createClassPersister PersisterFactory.java:55 at org.hibernate.impl.SessionFactoryImpl.&amp;lt;init&amp;gt; SessionFactoryImpl.java:211 at org.hibernate.cfg.Configuration.buildSessionFactory Configuration.java:1005 … Notice: class com/mprv/secsph/profile/domain/UrlItem$$EnhancerByCGLIB$$859d1101 was woven by AspectJ. According to the long discussion in the mailing list http://dev.eclipse.org/mhonarc/lists/aspectj-dev/msg01869.html , I understand that the problem with AjAttribute should affect only AspectJ functionality, because someone who is "lower" in the stack ASM or whatever ignores those attributes on it's way. But here we are seeing something else. CGLIB is the one which fails … Is it something new, or I'm running into the same bug? Thanks a lot! Misha. P.S. Andy, i think that binary weaving wouldn't cause this problem, because generated classes doesn't exist at this point. Thanks!</description>
    <commit commitTime="2005-11-26 16:36:23" id="3ce492be631f9f598bbf9d1e045e4d9637885bf1"/>
    <fixedFiles>
      <file>loadtime/testsrc/org/aspectj/weaver/loadtime/test/DocumentParserTest.java</file>
      <file>tests/java5/ataspectj/ataspectj/DumpTest.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/definition/Definition.java</file>
      <file>tests/java5/ataspectj/ataspectj/DumpTestTheDump.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Aj.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="117882" reportTime="2005-11-24 06:05:00">
    <summary>[waiting-on-build] NullPointerException with declare annotations and incremental compilation</summary>
    <description>Test program included and stack trace shown below: java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareAnnotations AjLookupEnvironment.java:742 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:556 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:483 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doPendingWeaves AjLookupEnvironment.java:350 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:177 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:301 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:315 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:809 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:254 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:163 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 NullPointerException thrown: null</description>
    <commit commitTime="2005-12-02 15:30:37" id="1b111328220bc522194ecc7361f282d169d781f3"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/annotation/Annotation.java</file>
    </fixedFiles>
  </bug>
  <bug id="118149" reportTime="2005-11-27 01:01:00">
    <summary>AspectJ compiler crahses possibly due to poincut context binding issue</summary>
    <description>I am using the latest version of AJDT 1.3.0.20051125115230 . The reason is not entirely clear, but I have a pointcut of form public pointcut realPC Common entity : pc1 entity || pc2 entity ; Just a few hours back, I used to get an error regarding incompatible binding of entity in the || poincut. When I got that error, Eclipse was frozen to the point that clicking "Details" on exception report made Eclipse hang and had to kill it using the task manager. So I modified the program to avoid || expression in pointcut, after unsuccessfully trying various ways to express the pointcut. It was an ugly thing to do, since I essentially had to duplicate the advice for both pointcuts. Anyway... Then I tried to reproduce on a smaller project to provide a minimal program to reproduced the bug. However, it worked just fine on that project and I couldn't see any material difference in the pointcuts or the classes involved . Encouraged by this, I retried the or-ed version of the pointcut on the real project. This time, I get the crash and can acccess the stack trace. java.lang.NullPointerException at org.aspectj.weaver.ast.Test.makeInstanceof Test.java:78 at org.aspectj.weaver.patterns.IfPointcut.findResidueInternal IfPointcut.java:181 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java:267 at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal AndPointcut.java:97 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java:267 at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal AndPointcut.java:97 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java:267 at org.aspectj.weaver.patterns.OrPointcut.findResidueInternal OrPointcut.java:99 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java:267 at org.aspectj.weaver.patterns.OrPointcut.findResidueInternal OrPointcut.java:99 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java:267 at org.aspectj.weaver.bcel.BcelAdvice.specializeOn BcelAdvice.java:133 at org.aspectj.weaver.bcel.BcelShadow.prepareForMungers BcelShadow.java:308 at org.aspectj.weaver.Shadow.implement Shadow.java:404 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:2146 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:467 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:102 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1534 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1485 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1266 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1088 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:300 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:178 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:809 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:230 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:156 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 trouble in: public abstract class com.aspectivity.mgmt.web.entity.ManageEntity extends com.aspectivity.mgmt.web.TemplatePage: public void &amp;lt;init&amp;gt; com.aspectivity.mgmt.model.Entity, boolean, String, String, String, String, String org.aspectj.weaver.MethodDeclarationLineNumber: 19:557 : ALOAD_0 // com.aspectivity.mgmt.web.entity.ManageEntity this line 19 INVOKESPECIAL com.aspectivity.mgmt.web.TemplatePage.&amp;lt;init&amp;gt; V ALOAD_1 ASTORE 9 ILOAD_2 ISTORE 10 ALOAD_3 ASTORE 11 ALOAD 4 ASTORE 12 ALOAD 5 ASTORE 13 ALOAD 6 ASTORE 14 ALOAD 7 ASTORE 15 constructor-execution void com.aspectivity.mgmt.web.entity.ManageEntity.&amp;lt;init&amp;gt; com.aspectivity.mgmt.model.Entity, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String | ALOAD_0 // com.aspectivity.mgmt.web.entity.ManageEntity this line 23 | ALOAD_3 // java.lang.String pageTitle | INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.setPageTitle Ljava/lang/String; V | ALOAD_0 // com.aspectivity.mgmt.web.entity.ManageEntity this line 25 | ALOAD_0 // com.aspectivity.mgmt.web.entity.ManageEntity this | ALOAD_1 // com.aspectivity.mgmt.model.Entity entity | ALOAD 5 // java.lang.String addEntityLinkText | INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.getEntitiesListView Lcom/aspectivity/mgmt/model/Entity;Ljava/lang/String; Lwicket/markup/html/list/ListView; | INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.add Lwicket/Component; Lwicket/MarkupContainer; | POP | ALOAD_0 // com.aspectivity.mgmt.web.entity.ManageEntity this line 27 | LDC "addEntityLink" | ACONST_NULL | INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.getEditLink Ljava/lang/String;Lcom/aspectivity/mgmt/model/Entity; Lwicket/markup/html/link/Link; | ASTORE 8 | ALOAD_0 // com.aspectivity.mgmt.web.entity.ManageEntity this line 28 | ALOAD 8 // wicket.markup.html.link.Link addEntityLink | INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.add Lwicket/Component; Lwicket/MarkupContainer; | POP | ALOAD 8 // wicket.markup.html.link.Link addEntityLink line 29 | NEW wicket.markup.html.basic.Label | DUP | LDC "addEntityLinkText" | ALOAD 5 // java.lang.String addEntityLinkText | INVOKESPECIAL wicket.markup.html.basic.Label.&amp;lt;init&amp;gt; Ljava/lang/String;Ljava/lang/String; V | INVOKEVIRTUAL wicket.markup.html.link.Link.add Lwicket/Component; Lwicket/MarkupContainer; | POP | ILOAD_2 // boolean isInitialView line 31 | IFEQ L0 | ALOAD_0 // com.aspectivity.mgmt.web.entity.ManageEntity this line 32 | NEW wicket.markup.html.basic.Label | DUP | LDC "editEntity" | LDC "" | INVOKESPECIAL wicket.markup.html.basic.Label.&amp;lt;init&amp;gt; Ljava/lang/String;Ljava/lang/String; V | INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.add Lwicket/Component; Lwicket/MarkupContainer; | POP | GOTO L1 | L0: ALOAD_0 // com.aspectivity.mgmt.web.entity.ManageEntity this line 34 | ALOAD_0 // com.aspectivity.mgmt.web.entity.ManageEntity this | ALOAD_1 // com.aspectivity.mgmt.model.Entity entity | ILOAD_2 // boolean isInitialView | ALOAD 6 // java.lang.String addPanelTtile | ALOAD 7 // java.lang.String editPanelTitle | INVOKESPECIAL com.aspectivity.mgmt.web.entity.ManageEntity.getEditPanel Lcom/aspectivity/mgmt/model/Entity;ZLjava/lang/String;Ljava/lang/String; Lwicket/Component; | INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.add Lwicket/Component; Lwicket/MarkupContainer; | POP | L1: ALOAD_0 // com.aspectivity.mgmt.web.entity.ManageEntity this line 37 | NEW wicket.markup.html.basic.Label | DUP | LDC "listViewTitle" | ALOAD 4 // java.lang.String listViewTitle | INVOKESPECIAL wicket.markup.html.basic.Label.&amp;lt;init&amp;gt; Ljava/lang/String;Ljava/lang/String; V | INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.add Lwicket/Component; Lwicket/MarkupContainer; | POP | RETURN line 38 constructor-execution void com.aspectivity.mgmt.web.entity.ManageEntity.&amp;lt;init&amp;gt; com.aspectivity.mgmt.model.Entity, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String end public void &amp;lt;init&amp;gt; com.aspectivity.mgmt.model.Entity, boolean, String, String, String, String, String protected abstract com.aspectivity.mgmt.model.Entity createNewEntity org.aspectj.weaver.MethodDeclarationLineNumber: 40:1233 ; protected abstract void removeEntity com.aspectivity.mgmt.model.Entity org.aspectj.weaver.MethodDeclarationLineNumber: 41:1278 ; protected abstract java.util.List getAllEntities org.aspectj.weaver.MethodDeclarationLineNumber: 42:1351 ; protected abstract com.aspectivity.mgmt.web.entity.ManageEntity createNewPage com.aspectivity.mgmt.model.Entity, boolean org.aspectj.weaver.MethodDeclarationLineNumber: 44:1406 ; protected abstract wicket.Component createEditPanel String, String, com.aspectivity.mgmt.model.Entity org.aspectj.weaver.MethodDeclarationLineNumber: 45:1490 ; protected wicket.markup.html.list.ListView getEntitiesListView com.aspectivity.mgmt.model.Entity, String org.aspectj.weaver.MethodDeclarationLineNumber: 47:1581 : NEW com.aspectivity.mgmt.web.entity.EntityListView line 48 DUP ALOAD_0 // com.aspectivity.mgmt.web.entity.ManageEntity this LDC "entityList" ALOAD_0 // com.aspectivity.mgmt.web.entity.ManageEntity this INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.getAllEntities Ljava/util/List; ALOAD_1 // com.aspectivity.mgmt.model.Entity entity INVOKESPECIAL com.aspectivity.mgmt.web.entity.EntityListView.&amp;lt;init&amp;gt; Lcom/aspectivity/mgmt/web/entity/ManageEntity;Ljava/lang/String;Ljava/util/List;Lcom/aspectivity/mgmt/model/Entity; V ARETURN end protected wicket.markup.html.list.ListView getEntitiesListView com.aspectivity.mgmt.model.Entity, String protected wicket.markup.html.link.Link getEditLink String, com.aspectivity.mgmt.model.Entity org.aspectj.weaver.MethodDeclarationLineNumber: 51:1743 : NEW wicket.markup.html.link.PageLink line 52 DUP ALOAD_1 // java.lang.String name NEW com.aspectivity.mgmt.web.entity.ManageEntity$1 DUP ALOAD_0 // com.aspectivity.mgmt.web.entity.ManageEntity this ALOAD_2 // com.aspectivity.mgmt.model.Entity entity INVOKESPECIAL com.aspectivity.mgmt.web.entity.ManageEntity$1.&amp;lt;init&amp;gt; Lcom/aspectivity/mgmt/web/entity/ManageEntity;Lcom/aspectivity/mgmt/model/Entity; V INVOKESPECIAL wicket.markup.html.link.PageLink.&amp;lt;init&amp;gt; Ljava/lang/String;Lwicket/markup/html/link/IPageLink; V ARETURN end protected wicket.markup.html.link.Link getEditLink String, com.aspectivity.mgmt.model.Entity protected wicket.markup.html.link.Link getRemoveLink String, wicket.markup.html.list.ListItem org.aspectj.weaver.MethodDeclarationLineNumber: 63:2013 : NEW com.aspectivity.mgmt.web.entity.ManageEntity$2 line 64 DUP ALOAD_0 // com.aspectivity.mgmt.web.entity.ManageEntity this ALOAD_1 // java.lang.String id ALOAD_2 // wicket.markup.html.list.ListItem item INVOKESPECIAL com.aspectivity.mgmt.web.entity.ManageEntity$2.&amp;lt;init&amp;gt; Lcom/aspectivity/mgmt/web/entity/ManageEntity;Ljava/lang/String;Lwicket/markup/html/list/ListItem; V ARETURN end protected wicket.markup.html.link.Link getRemoveLink String, wicket.markup.html.list.ListItem private wicket.Component getEditPanel com.aspectivity.mgmt.model.Entity, boolean, String, String org.aspectj.weaver.MethodDeclarationLineNumber: 75:2376 : ALOAD_1 // com.aspectivity.mgmt.model.Entity entity line 77 IFNONNULL L0 ALOAD_3 // java.lang.String addPanelTtile GOTO L1 L0: ALOAD 4 // java.lang.String editPanelTitle L1: ASTORE 5 ALOAD_1 // com.aspectivity.mgmt.model.Entity entity line 78 IFNONNULL L2 ALOAD_0 // com.aspectivity.mgmt.web.entity.ManageEntity this line 79 INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.createNewEntity Lcom/aspectivity/mgmt/model/Entity; ASTORE_1 // com.aspectivity.mgmt.model.Entity entity L2: ALOAD_0 // com.aspectivity.mgmt.web.entity.ManageEntity this line 81 LDC "editEntity" ALOAD 5 // java.lang.String panelTitle ALOAD_1 // com.aspectivity.mgmt.model.Entity entity INVOKEVIRTUAL com.aspectivity.mgmt.web.entity.ManageEntity.createEditPanel Ljava/lang/String;Ljava/lang/String;Lcom/aspectivity/mgmt/model/Entity; Lwicket/Component; ARETURN end private wicket.Component getEditPanel com.aspectivity.mgmt.model.Entity, boolean, String, String end public abstract class com.aspectivity.mgmt.web.entity.ManageEntity when implementing on shadow constructor-execution void com.aspectivity.mgmt.web.entity.ManageEntity.&amp;lt;init&amp;gt; com.aspectivity.mgmt.model.Entity, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String when weaving type com.aspectivity.mgmt.web.entity.ManageEntity when weaving classes when weaving when batch building BuildConfig[C:\work\projects\workspace\.metadata\.plugins\org.eclipse.ajdt.core\Aspectivity.generated.lst] #Files=87</description>
    <commit commitTime="2005-12-06 03:20:59" id="d43e74b5c919ebaef67a4b7551a464b8db3b289a"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/IfPointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="118192" reportTime="2005-11-28 02:07:00">
    <summary>Missing superclass for java.io.Serializable in reflection 1.5 delegate impl</summary>
    <description>See attached patch for a failing junit test case.</description>
    <commit commitTime="2005-11-28 15:52:50" id="97b5f52b520f534ac712d1ce3cff7b6ed5cca14f"/>
    <fixedFiles>
      <file>weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java</file>
      <file>weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java</file>
      <file>weaver/src/org/aspectj/weaver/UnresolvedType.java</file>
    </fixedFiles>
  </bug>
  <bug id="118337" reportTime="2005-11-28 20:24:00">
    <summary>Use weaver's ClassLoader not the usingClassLoader in 1.5 factory</summary>
    <description>In ReflectionBasedReferenceTypeDelegateFactory this line 44 of code is breaking my use of the weaver for looking up bootstrap classes where the classloader is null and the AspectJ weaver isn't accessible to the bootstrap loader . The commented out code works just fine for me. Is there a real need to resolve the AspectJ runtime from a different classloader than the one that was already used to load this class from the AspectJ runtime? Class delegateClass = Class.forName "org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate",false,usingClassLoader ;//ReflectionBasedReferenceTypeDelegate.class.getClassLoader ;</description>
    <commit commitTime="2005-11-29 19:35:57" id="d1a295c3205f87277ed9ae5b3dd70ca50e3a806e"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="118698" reportTime="2005-11-30 15:18:00">
    <summary>Not Allowing Access to Private ITD inside Nested Type</summary>
    <description>AspectJ is failing to allow access to a private ITD field from a type nested inside the aspect, which is inconsistent with Java's access rules. Here is the source. See also the follow up patch to tests that integrates it into the ajc150 test suite. public aspect prUnknown { private static interface Marker {} private class Foo implements Marker { public Foo { bar = null; // allowed listener = null; // should also be allowed this.listener = null; // so should this Marker.this.listener = null; // and this Marker this .listener = null; // and this } } private Object Marker.listener; private Object bar; }</description>
    <commit commitTime="2005-12-02 11:06:37" id="6d94d09c4bba8431d810019fe09e989fd026c3d1"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeFieldBinding.java</file>
    </fixedFiles>
  </bug>
  <bug id="118715" reportTime="2005-11-30 16:53:00">
    <summary>Load Time Weaving wipes out Xlint files if no Xlint values</summary>
    <description>In ClassLoaderWeavingAdaptor if weaverOption.lint is null, then a loaded Xlint properties file gets overwritten by the default Xlint properties. See attached patch to fix this problem.</description>
    <commit commitTime="2005-12-06 13:02:38" id="1e1bbb3f2e7aab4757d715d76730cb68cceb3b87"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/ltw/LTWTests.java</file>
      <file>testing/newsrc/org/aspectj/testing/OutputSpec.java</file>
      <file>testing/newsrc/org/aspectj/testing/RunSpec.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</file>
      <file>weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
      <file>testing/newsrc/org/aspectj/testing/XMLBasedAjcTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="118781" reportTime="2005-12-01 03:43:00">
    <summary>[waiting-on-build]VerifyError in AspectJ</summary>
    <description>I'm fairly new to AspectJ, so this is probably not going to be well explained. I've started working on a project that was working fine. Then I added methods to classes that take a 2-dimensional string array parameter and suddenly I'm getting a VerifyError exception. java.lang.VerifyError: class: com/drkw/cpds/obligor/facades/version_1_00/ObligorDetailFacade_1_00, method: searchForObligorSummariesByGroup_aroundBody24 signature: Lcom/drkw/cpds/obligor/facades/version_1_00/ObligorDetailFacade_1_00;[[[Ljava/lang/String;Ljava/lang/String;LjavaÀ &amp;amp;#130; at com.drkw.cpds.obligor.facades.version_1_00.obligor.ObligorManager.&amp;lt;clinit&amp;gt; ObligorManager.java:48 at com.drkw.cpds.obligor.integration.version_1_00.obligor.GetObligorDetailsGroupingTest.testGetObligorDetailsUsingGroups GetObligorDetailsGroupingTest.java:45 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke Unknown Source at sun.reflect.DelegatingMethodAccessorImpl.invoke Unknown Source</description>
    <commit commitTime="2005-12-01 15:00:22" id="a75b7fa48b233e41ed7aeb7d50fbdd411eadd8e6"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/World.java</file>
    </fixedFiles>
  </bug>
  <bug id="119210" reportTime="2005-12-05 02:49:00">
    <summary>NullPointerException with around advice on field-set</summary>
    <description>I met NullPointerException when weaving. Doesn't Aj support this situations? public class TestLib { private static int myInt; static { myInt = 1; } public static void main String[] args { // TODO Auto-generated method stub System.out.println "myInt="+myInt ; } } public aspect ThreadAspectLib { pointcut setThreadLocalsField :set private int TestLib.myInt ; Integer around :setThreadLocalsField { try{ return new Integer 2 ; } catch Exception e { e.printStackTrace ; return null; } } } ---- AspectJ Properties --- AspectJ Compiler DEVELOPMENT built on Tuesday Jun 14, 2005 at 15:41:05 GMT ---- Dump Properties --- Dump file: ajcore.20051205.145247.250.txt Dump reason: java.lang.NullPointerException Dump on exception: true Dump at exit condition: abort ---- Exception Information --- java.lang.NullPointerException at org.aspectj.weaver.ResolvedTypeX$Primitive.isAssignableFrom ResolvedTypeX.java:985 at org.aspectj.weaver.ResolvedTypeX.isAssignableFrom ResolvedTypeX.java:96 at org.aspectj.weaver.Advice.match Advice.java:143 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:1673 at org.aspectj.weaver.bcel.BcelClassWeaver.matchSetInstruction BcelClassWeaver.java:1543 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java Compiled Code at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java Compiled Code at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:377 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:94 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1362 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1327 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1106 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:993 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:286 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:165 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:368 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:727 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:206 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:140 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:318 at org.aspectj.tools.ajc.Main.runMain Main.java:228 at org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM AjcTask.java:1194 at org.aspectj.tools.ant.taskdefs.AjcTask.execute AjcTask.java:985 at org.apache.tools.ant.UnknownElement.execute UnknownElement.java:275 at org.apache.tools.ant.Task.perform Task.java:364 at org.apache.tools.ant.Target.execute Target.java:341 at org.apache.tools.ant.Target.performTasks Target.java:369 at org.apache.tools.ant.Project.executeTarget Project.java:1214 at org.apache.tools.ant.Project.executeTargets Project.java:1062 at org.apache.tools.ant.Main.runBuild Main.java:690 at org.apache.tools.ant.Main.startAnt Main.java:200 at org.apache.tools.ant.launch.Launcher.run Launcher.java:196 at org.apache.tools.ant.launch.Launcher.main Launcher.java:55 ---- System Properties --- java.assistive=ON java.runtime.name=Java TM 2 Runtime Environment, Standard Edition sun.boot.library.path=C:\Program Files\IBM\Java141\jre\bin java.vm.version=1.4.1 java.vm.vendor=IBM Corporation java.vendor.url= http://www.ibm.com/ path.separator=; java.vm.name=Classic VM file.encoding.pkg=sun.io</description>
    <commit commitTime="2005-12-08 15:32:36" id="f5f36e2dd0f1318f44397f691c480967c57dbfb4"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="119352" reportTime="2005-12-05 23:04:00">
    <summary>AjType.getSupertype breaks for null</summary>
    <description>I ran into this while using reflection proxies with LTW... See attached patches for these test cases and my fix: public void testObjectSupertype { AjType&amp;lt;?&amp;gt; objectSuper = AjTypeSystem.getAjType Object.class .getSupertype ; assertNull objectSuper ; } public void testInterfaceSupertype { AjType&amp;lt;?&amp;gt; serializableSuper = AjTypeSystem.getAjType Serializable.class .getSupertype ; assertNull serializableSuper ; } public AjType&amp;lt;? super T&amp;gt; getSupertype { Class&amp;lt;? super T&amp;gt; superclass = clazz.getSuperclass ; return superclass==null ? null : AjType&amp;lt;? super T&amp;gt; new AjTypeImpl superclass ; }</description>
    <commit commitTime="2005-12-06 15:39:08" id="6e8bf5292686224d2110cbf8c2184e2568bcabe3"/>
    <fixedFiles>
      <file>aspectj5rt/java5-testsrc/org/aspectj/internal/lang/reflect/AjTypeTests.java</file>
      <file>aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/AjTypeImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="119353" reportTime="2005-12-05 23:11:00">
    <summary>Inconsistent Implementations of ReferenceType.getDeclaredMethods</summary>
    <description>I am running into a problem in load-time weaving when I use reflection delegates because the weaver is generating an incorrect bridge method when I perform an inter-type declaration on Struts.ActionServlet for the init method. On investigation, the BCEL world is recognizing this as an overriding method, because its version of getDeclaredMethods is returning the declared methods for all ancestor superclasses. However, the reflection world is returning only the declared methods for this one class. It therefore appears that the weaver expects getDeclaredMethods to return all of them making the name quite misleading . I think previously the method was being implemented inconsistently between 1.5 reflection and &amp;lt;1.5 reflection delegates. But it looks like it needs to be handled consistently to include all superclass methods. However, I don’t know what other places e.g., the MAP are really expecting getDeclaredMethods and its siblings to behave like Java reflection's version… I started work on adding a getAllDeclaredMethods method to ReferenceType and delegates, as an alternative to provide the weaver the ability to check method overriding as in this case, but it's a little bit involved and I wanted to flag the issue first. Here's a test that fails and illustrates the issue: Index: ReflectionBasedReferenceTypeDelegateTest.java =================================================================== RCS file: /home/technology/org.aspectj/modules/weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java,v retrieving revision 1.5 diff -u -r1.5 ReflectionBasedReferenceTypeDelegateTest.java --- ReflectionBasedReferenceTypeDelegateTest.java 28 Nov 2005 17:44:40 -0000 1.5 +++ ReflectionBasedReferenceTypeDelegateTest.java 6 Dec 2005 04:11:41 -0000 @@ -238,6 +238,18 @@ assertTrue "Superclass for Map generic type should be Object but was "+rt2,rt2.equals UnresolvedType.OBJECT ; } + public void testCompareSubclassDelegates { + world.setBehaveInJava5Way true ; + + BcelWorld bcelWorld = new BcelWorld ; + bcelWorld.setBehaveInJava5Way true ; + UnresolvedType javaUtilHashMap = UnresolvedType.forName "java.util.HashMap" ; + ReferenceType rawType = ReferenceType bcelWorld.resolve javaUtilHashMap ; + + ReferenceType rawReflectType = ReferenceType world.resolve javaUtilHashMap ; + assertEquals rawType.getDelegate .getDeclaredMethods .length, rawReflectType.getDelegate .getDeclaredMethods .length ; + } + // todo: array of int protected void setUp throws Exception { This results in: junit.framework.AssertionFailedError: expected:&amp;lt;41&amp;gt; but was:&amp;lt;29&amp;gt; at junit.framework.Assert.fail Assert.java:47 at junit.framework.Assert.failNotEquals Assert.java:282 at junit.framework.Assert.assertEquals Assert.java:64 at junit.framework.Assert.assertEquals Assert.java:201 at junit.framework.Assert.assertEquals Assert.java:207 at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateTest.testCompareSubclassDelegates ReflectionBasedReferenceTypeDelegateTest.java:250 at java.lang.reflect.Method.invoke Native Method at junit.framework.TestCase.runTest TestCase.java:154 at junit.framework.TestCase.runBare TestCase.java:127 at junit.framework.TestResult$1.protect TestResult.java:106 at junit.framework.TestResult.runProtected TestResult.java:124 at junit.framework.TestResult.run TestResult.java:109 at junit.framework.TestCase.run TestCase.java:118 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests RemoteTestRunner.java:478 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run RemoteTestRunner.java:344 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main RemoteTestRunner.java:196</description>
    <commit commitTime="2005-12-09 08:40:12" id="b52515fc2319ca34a045a0823ca0f5c8ffeaa2de"/>
    <fixedFiles>
      <file>weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java</file>
      <file>weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java</file>
      <file>weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java</file>
    </fixedFiles>
  </bug>
  <bug id="119451" reportTime="2005-12-06 12:39:00">
    <summary>AJDoc produces incorrect warning for package accessed aspects</summary>
    <description>// Main.java package bug; public class Main { } aspect LogMain { } Generating ajdoc through Eclipse AJDT 1.3.0.20051206092602, AspectJ 1.5.0.20051206103951 generate incorrect warning for the LogMain aspect: &amp;gt; Calling ajc... &amp;gt; Building signature files... &amp;gt; Calling javadoc... Loading source file C:\work\aop\src\ajdocworkingdir\bug\Main.java... Constructing Javadoc information... C:\work\aop\src\ajdocworkingdir\bug\Main.java:11: class LogMain is public, should be declared in a file named LogMain.java public class LogMain { ^ Standard Doclet version 1.5.0_04 Building tree for all the packages and classes... Generating c:\work\aop\src\workspace\AJDocPackageAspect\doc\bug/\LogMain.html... Generating c:\work\aop\src\workspace\AJDocPackageAspect\doc\bug/\Main.html... Generating c:\work\aop\src\workspace\AJDocPackageAspect\doc\bug/\package-frame.html... Generating c:\work\aop\src\workspace\AJDocPackageAspect\doc\bug/\package-summary.html... Generating c:\work\aop\src\workspace\AJDocPackageAspect\doc\bug/\package-tree.html... Generating c:\work\aop\src\workspace\AJDocPackageAspect\doc\constant-values.html... Building index for all the packages and classes... Generating c:\work\aop\src\workspace\AJDocPackageAspect\doc\overview-tree.html... Generating c:\work\aop\src\workspace\AJDocPackageAspect\doc\index-all.html... Generating c:\work\aop\src\workspace\AJDocPackageAspect\doc\deprecated-list.html... Building index for all classes... Generating c:\work\aop\src\workspace\AJDocPackageAspect\doc\allclasses-frame.html... Generating c:\work\aop\src\workspace\AJDocPackageAspect\doc\allclasses-noframe.html... Generating c:\work\aop\src\workspace\AJDocPackageAspect\doc\index.html... Generating c:\work\aop\src\workspace\AJDocPackageAspect\doc\help-doc.html... Generating c:\work\aop\src\workspace\AJDocPackageAspect\doc\stylesheet.css... 1 warning &amp;gt; Decorating html files... &amp;gt; Decorating C:\work\aop\src\workspace\AJDocPackageAspect\doc\bug\Main.html... &amp;gt; Removing generated tags this may take a while ... &amp;gt; Finished.</description>
    <commit commitTime="2005-12-09 10:32:57" id="5f8d2cdff480ac9d04cc73a4a69eb11563a0bb01"/>
    <fixedFiles>
      <file>ajde/testsrc/org/aspectj/ajde/AsmDeclarationsTest.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java</file>
    </fixedFiles>
  </bug>
  <bug id="119543" reportTime="2005-12-06 21:14:00">
    <summary>[waiting-on-build] StringIndexOutOfBoundsException, perhaps due to nested aspects and targets</summary>
    <description>Code and exception below. Same result for HEAD and AspectJ 1.5.0.20051206103951 via AJDT. ------------------------------- bugs/CachedToString.java package bugs; import java.lang.ref.SoftReference; import junit.framework.TestCase; public class CachedToString { /** * @param args */ public static void main String[] args { new CacheGetterTest .testToString ; } public static class CacheGetterTest extends TestCase { static boolean runAdvice; public void testToString { RandomToString me = new RandomToString ; runAdvice = false; String one = me.toString ; String two = me.toString ; assertFalse one.equals two ; runAdvice = true; one = me.toString ; two = me.toString ; assertTrue one.equals two ; } static class RandomToString { static aspect CacheToString extends CachedItem&amp;lt;String&amp;gt; { public pointcut context : if runAdvice ; public pointcut caching : execution String RandomToString.toString ; } Random random = new Random -1 ; public String toString { return "" + random.nextFloat ; } } } public abstract static aspect CachedItem&amp;lt;Result&amp;gt; pertarget results { SoftReference&amp;lt;Result&amp;gt; cache; boolean nullCache; // CODE writing pointcut trifecta separate context if extended and errors // getcode declaring-pointcuts-to-extend-with-caching START /** * Define join points to cache. * Must override, with staticly-determinable pointcuts * that pick out join points that are permitted. */ protected abstract pointcut caching ; /** ok to use Result field-get or return value */ private pointcut permitted : get Result * || execution Result * || call Result * || call Result.new .. ; /** Subaspects may add dynamic tests for the join points. */ pointcut context : !disabled ; private pointcut disabled ; // fyi, undefined == none // getcode results START /** the pointcut composed from the user, as permitted, with context */ pointcut results : caching &amp;amp;&amp;amp; permitted &amp;amp;&amp;amp; context ; // getcode results END Result around : results { // ... } // getcode declaring-pointcuts-to-extend-with-caching END Result result; if nullCache { result = null; } else if null == cache || null == result = cache.get { result = proceed ; if null == result { nullCache = true; } else { cache = new SoftReference result ; } } return result; } } } ------------------------------- exception C:\home\ws\main-31\my-ajbugs\aspectj-src\bugs\CachedToString.java [error] Internal compiler error java.lang.StringIndexOutOfBoundsException: String index out of range: -2 at java.lang.String.substring String.java:1768 at org.aspectj.weaver.TypeFactory.createTypeFromSignature TypeFactory.java:86 at org.aspectj.weaver.UnresolvedType.forSignature UnresolvedType.java:426 at org.aspectj.weaver.UnresolvedType.getOutermostType UnresolvedType.java:601 at org.aspectj.weaver.ResolvedType.isVisible ResolvedType.java:1259 at org.aspectj.weaver.ResolvedType.addPointcutsResolvingConflicts ResolvedType.java:1743 at org.aspectj.weaver.ResolvedType.getExposedPointcuts ResolvedType.java:1716 at org.aspectj.weaver.ResolvedType.getExposedPointcuts ResolvedType.java:1710 at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.checkPointcutDeclarations EclipseSourceType.java:293 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.resolvePointcutDeclarations AjLookupEnvironment.java:414 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.resolvePointcutDeclarations AjLookupEnvironment.java:419 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.resolvePointcutDeclarations AjLookupEnvironment.java:419 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.resolvePointcutDeclarations AjLookupEnvironment.java:419 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:231 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:301 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:315 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:811 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:230 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:156 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:326 at org.aspectj.tools.ajc.Main.runMain Main.java:240 at org.aspectj.tools.ajc.Main.main Main.java:83 no source information available ABORT Exception thrown from AspectJ DEVELOPMENT This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. String index out of range: -2 when resolving pointcut declarations CachedToString when completing type bindings when batch building with classpath: c:\home\apps\jdk15\jre\lib\ext\dnsns.jar;c:\home\apps\jdk15\jre\lib\ext\localedata.jar;c:\home\apps\jdk15\jre\lib\ext\sunjce_provider.jar;c:\home\apps\jdk15\jre\lib\ext\sunpkcs11.jar;C:\home\ws\main-31\lib\junit\junit.jar;C:\home\wes\dev\tools\aspectj-1.5\lib\aspectjrt.jar; String index out of range: -2 java.lang.StringIndexOutOfBoundsException: String index out of range: -2 at java.lang.String.substring String.java:1768 at org.aspectj.weaver.TypeFactory.createTypeFromSignature TypeFactory.java:86 at org.aspectj.weaver.UnresolvedType.forSignature UnresolvedType.java:426 at org.aspectj.weaver.UnresolvedType.getOutermostType UnresolvedType.java:601 at org.aspectj.weaver.ResolvedType.isVisible ResolvedType.java:1259 at org.aspectj.weaver.ResolvedType.addPointcutsResolvingConflicts ResolvedType.java:1743 at org.aspectj.weaver.ResolvedType.getExposedPointcuts ResolvedType.java:1716 at org.aspectj.weaver.ResolvedType.getExposedPointcuts ResolvedType.java:1710 at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.checkPointcutDeclarations EclipseSourceType.java:293 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.resolvePointcutDeclarations AjLookupEnvironment.java:414 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.resolvePointcutDeclarations AjLookupEnvironment.java:419 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.resolvePointcutDeclarations AjLookupEnvironment.java:419 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.resolvePointcutDeclarations AjLookupEnvironment.java:419 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:231 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:301 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:315 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:811 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:230 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:156 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:326 at org.aspectj.tools.ajc.Main.runMain Main.java:240 at org.aspectj.tools.ajc.Main.main Main.java:83 1 fail|abort, 1 error Signal 127</description>
    <commit commitTime="2005-12-07 17:15:13" id="a7bc19f804487d6160c5f29eec94e2442e38957e"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="119570" reportTime="2005-12-07 00:00:00">
    <summary>spurious override method warning, failure of declare-parents in subaspect</summary>
    <description>bug 1 : Get warning on declare parents in a subaspect of a parameterized aspect that erroneously? declares same parents: "The method TaggedTexts.PC.ajc$declare_parents_1 does not override the inherited method from NodeImpl&amp;lt;TaggedTexts.Tag,TaggedTexts.Tag&amp;gt; since it is private to a different package." bug 2 : The subaspect must declare parents on the concrete types. -------------------- package util; public abstract aspect NodeImpl&amp;lt;Parent, Child&amp;gt; { declare parents : Child implements INode&amp;lt;Parent, Child&amp;gt;; declare parents : Parent implements INode&amp;lt;Parent, Child&amp;gt;; ... } -------------------- // somewhere else in the far reaches of the universe... static aspect PC extends NodeImpl&amp;lt;Tag, Tag&amp;gt; { // bug 1 : required, though it shouldn't be // bug 2 : spurious error on this line declare parents : Tag implements INode&amp;lt;Tag,Tag&amp;gt;; ... } Let me know if you need a more complete test. I believe you're working in this area and know about it, but can't tell. AspectJ version 1.5.0.20051206103951, via AJDT</description>
    <commit commitTime="2005-12-09 09:20:36" id="ca47cacdacf7da5789446bb3ed9b70e26462206e"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="119882" reportTime="2005-12-08 10:53:00">
    <summary>BCException when deleting a java-source-file</summary>
    <description>org.aspectj.weaver.BCException at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1087 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:300 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:178 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:811 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:254 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:163 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 BCException thrown: Can't find bcel delegate for training.casino.Konto type=class org.aspectj.weaver.ReferenceType when weaving classes when weaving when incrementally building BuildConfig[C:\Documents and Settings\mheidt\workspace 3.1.1\.metadata\.plugins\org.eclipse.ajdt.core\AspJTraining.generated.lst] #Files=11 deleted a java-source-file before but not the class-file , possibly pointed by a LogAspect. Created a new source file. Error occurs after saving the new file.</description>
    <commit commitTime="2006-02-13 10:51:11" id="0b39aa5dd0218561f11258ac272112ada447065e"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="120351" reportTime="2005-12-12 05:17:00">
    <summary>cflowbelow issue when binding, in @AJ</summary>
    <description>Sam wrote: &amp;gt; I'm trying something and it works from .aj but not from .java. When &amp;gt; I try it with annotation based stuff I get a nasty exception: &amp;gt; &amp;gt; [iajc] trouble in: &amp;gt; [iajc] public class gsc.repository.IdentifierTest extends &amp;gt; junit.framework.TestCase: &amp;gt; [iajc] private static final org.aspectj.lang.JoinPoint &amp;gt; $StaticPart ajc$tjp_0 &amp;gt; [iajc] public void &amp;lt;init&amp;gt; : &amp;gt; [iajc] ALOAD_0 &amp;gt; [iajc] INVOKESPECIAL &amp;gt; junit.framework.TestCase.&amp;lt;init&amp;gt; V &amp;gt; [iajc] constructor-execution void &amp;gt; gsc.repository.IdentifierTest.&amp;lt;init&amp;gt; &amp;gt; [iajc] | RETURN &amp;gt; [iajc] constructor-execution void &amp;gt; gsc.repository.IdentifierTest.&amp;lt;init&amp;gt; &amp;gt; [iajc] end public void &amp;lt;init&amp;gt; &amp;gt; &amp;gt; [iajc] public void testIdentifierExactMatch throws &amp;gt; java.security.NoSuchAlgorithmException, java.io.IOException: &amp;gt; [iajc] method-execution void &amp;gt; gsc.repository.IdentifierTest.testIdentifierExactMatch &amp;gt; [iajc] | NEW java.io.File &amp;gt; [iajc] | DUP &amp;gt; [iajc] | LDC "test-repository/ant-test/jars/ &amp;gt; ant-1.6.2.jar" &amp;gt; [iajc] | INVOKESPECIAL java.io.File.&amp;lt;init&amp;gt; &amp;gt; Ljava/lang/String; V &amp;gt; [iajc] | INVOKESTATIC &amp;gt; gsc.repository.Identifier.interrogate Ljava/io/File; Ljava/util/List; &amp;gt; [iajc] | ASTORE_1 &amp;gt; [iajc] | ALOAD_1 &amp;gt; [iajc] | ICONST_0 &amp;gt; [iajc] | INVOKEINTERFACE java.util.List.get &amp;gt; I Ljava/lang/Object; &amp;gt; [iajc] | CHECKCAST gsc.repository.ejb.Jar &amp;gt; [iajc] | ASTORE_2 &amp;gt; [iajc] | ALOAD_2 &amp;gt; [iajc] | INVOKEVIRTUAL &amp;gt; gsc.repository.ejb.Jar.getVersion Ljava/lang/String; &amp;gt; [iajc] | LDC "1.6.2" &amp;gt; [iajc] | INVOKESTATIC &amp;gt; gsc.repository.IdentifierTest.assertEquals Ljava/lang/String;Ljava/ &amp;gt; lang/String; V &amp;gt; [iajc] | RETURN &amp;gt; [iajc] method-execution void &amp;gt; gsc.repository.IdentifierTest.testIdentifierExactMatch &amp;gt; [iajc] end public void testIdentifierExactMatch throws &amp;gt; java.security.NoSuchAlgorithmException, java.io.IOException &amp;gt; &amp;gt; [iajc] public void testIdentifierExactSameClasses throws &amp;gt; java.security.NoSuchAlgorithmException, java.io.IOException: &amp;gt; [iajc] method-execution void &amp;gt; gsc.repository.IdentifierTest.testIdentifierExactSameClasses &amp;gt; [iajc] | NEW java.io.File &amp;gt; [iajc] | DUP &amp;gt; [iajc] | LDC "test-jars/ant-1.6.2-test.jar" &amp;gt; [iajc] | INVOKESPECIAL java.io.File.&amp;lt;init&amp;gt; &amp;gt; Ljava/lang/String; V &amp;gt; [iajc] | INVOKESTATIC &amp;gt; gsc.repository.Identifier.interrogate Ljava/io/File; Ljava/util/List; &amp;gt; [iajc] | ASTORE_1 &amp;gt; [iajc] | ALOAD_1 &amp;gt; [iajc] | ICONST_0 &amp;gt; [iajc] | INVOKEINTERFACE java.util.List.get &amp;gt; I Ljava/lang/Object; &amp;gt; [iajc] | CHECKCAST gsc.repository.ejb.Jar &amp;gt; [iajc] | ASTORE_2 &amp;gt; [iajc] | ALOAD_2 &amp;gt; [iajc] | INVOKEVIRTUAL &amp;gt; gsc.repository.ejb.Jar.getVersion Ljava/lang/String; &amp;gt; [iajc] | LDC "1.6.2" &amp;gt; [iajc] | INVOKESTATIC &amp;gt; gsc.repository.IdentifierTest.assertEquals Ljava/lang/String;Ljava/ &amp;gt; lang/String; V &amp;gt; [iajc] | RETURN &amp;gt; [iajc] method-execution void &amp;gt; gsc.repository.IdentifierTest.testIdentifierExactSameClasses &amp;gt; [iajc] end public void testIdentifierExactSameClasses &amp;gt; throws java.security.NoSuchAlgorithmException, java.io.IOException &amp;gt; &amp;gt; [iajc] public void testIdentifierMixedUp throws &amp;gt; java.security.NoSuchAlgorithmException, java.io.IOException: &amp;gt; [iajc] method-execution void &amp;gt; gsc.repository.IdentifierTest.testIdentifierMixedUp &amp;gt; [iajc] | NEW java.io.File &amp;gt; [iajc] | DUP &amp;gt; [iajc] | LDC "test-jars/groovy-1.0-beta-4-and- &amp;gt; commons-logging-1.0.2.jar" &amp;gt; [iajc] | INVOKESPECIAL java.io.File.&amp;lt;init&amp;gt; &amp;gt; Ljava/lang/String; V &amp;gt; [iajc] | INVOKESTATIC &amp;gt; gsc.repository.Identifier.interrogate Ljava/io/File; Ljava/util/List; &amp;gt; [iajc] | ASTORE_1 &amp;gt; [iajc] | ALOAD_1 &amp;gt; [iajc] | INVOKEINTERFACE java.util.List.size I &amp;gt; [iajc] | ICONST_2 &amp;gt; [iajc] | INVOKESTATIC &amp;gt; gsc.repository.IdentifierTest.assertEquals II V &amp;gt; [iajc] | ICONST_2 &amp;gt; [iajc] | ISTORE_2 &amp;gt; [iajc] | ALOAD_1 &amp;gt; [iajc] | INVOKEINTERFACE &amp;gt; java.util.List.iterator Ljava/util/Iterator; &amp;gt; [iajc] | ASTORE_3 &amp;gt; [iajc] | L0: ALOAD_3 &amp;gt; [iajc] | INVOKEINTERFACE &amp;gt; java.util.Iterator.hasNext Z &amp;gt; [iajc] | IFEQ L3 &amp;gt; [iajc] | ALOAD_3 &amp;gt; [iajc] | INVOKEINTERFACE &amp;gt; java.util.Iterator.next Ljava/lang/Object; &amp;gt; [iajc] | CHECKCAST gsc.repository.ejb.Jar &amp;gt; [iajc] | ASTORE 4 &amp;gt; [iajc] | ALOAD 4 &amp;gt; [iajc] | INVOKEVIRTUAL &amp;gt; gsc.repository.ejb.Jar.getGroupid Ljava/lang/String; &amp;gt; [iajc] | LDC "groovy" &amp;gt; [iajc] | INVOKEVIRTUAL &amp;gt; java.lang.String.equals Ljava/lang/Object; Z &amp;gt; [iajc] | IFEQ L1 &amp;gt; [iajc] | ALOAD 4 &amp;gt; [iajc] | INVOKEVIRTUAL &amp;gt; gsc.repository.ejb.Jar.getGroupid Ljava/lang/String; &amp;gt; [iajc] | LDC "groovy" &amp;gt; [iajc] | INVOKESTATIC &amp;gt; gsc.repository.IdentifierTest.assertEquals Ljava/lang/String;Ljava/ &amp;gt; lang/String; V &amp;gt; [iajc] | ALOAD 4 &amp;gt; [iajc] | INVOKEVIRTUAL &amp;gt; gsc.repository.ejb.Jar.getArtifactid Ljava/lang/String; &amp;gt; [iajc] | LDC "groovy" &amp;gt; [iajc] | INVOKESTATIC &amp;gt; gsc.repository.IdentifierTest.assertEquals Ljava/lang/String;Ljava/ &amp;gt; lang/String; V &amp;gt; [iajc] | ALOAD 4 &amp;gt; [iajc] | INVOKEVIRTUAL &amp;gt; gsc.repository.ejb.Jar.getVersion Ljava/lang/String; &amp;gt; [iajc] | LDC "1.0-beta-4" &amp;gt; [iajc] | INVOKESTATIC &amp;gt; gsc.repository.IdentifierTest.assertEquals Ljava/lang/String;Ljava/ &amp;gt; lang/String; V &amp;gt; [iajc] | IINC 2 -1 &amp;gt; [iajc] | GOTO L2 &amp;gt; [iajc] | L1: ALOAD 4 &amp;gt; [iajc] | INVOKEVIRTUAL &amp;gt; gsc.repository.ejb.Jar.getGroupid Ljava/lang/String; &amp;gt; [iajc] | LDC "commons-logging" &amp;gt; [iajc] | INVOKESTATIC &amp;gt; gsc.repository.IdentifierTest.assertEquals Ljava/lang/String;Ljava/ &amp;gt; lang/String; V &amp;gt; [iajc] | ALOAD 4 &amp;gt; [iajc] | INVOKEVIRTUAL &amp;gt; gsc.repository.ejb.Jar.getArtifactid Ljava/lang/String; &amp;gt; [iajc] | LDC "commons-logging" &amp;gt; [iajc] | INVOKESTATIC &amp;gt; gsc.repository.IdentifierTest.assertEquals Ljava/lang/String;Ljava/ &amp;gt; lang/String; V &amp;gt; [iajc] | ALOAD 4 &amp;gt; [iajc] | INVOKEVIRTUAL &amp;gt; gsc.repository.ejb.Jar.getVersion Ljava/lang/String; &amp;gt; [iajc] | LDC "1.0.2" &amp;gt; [iajc] | INVOKESTATIC &amp;gt; gsc.repository.IdentifierTest.assertEquals Ljava/lang/String;Ljava/ &amp;gt; lang/String; V &amp;gt; [iajc] | IINC 2 -1 &amp;gt; [iajc] | L2: GOTO L0 &amp;gt; [iajc] | L3: ILOAD_2 &amp;gt; [iajc] | ICONST_0 &amp;gt; [iajc] | INVOKESTATIC &amp;gt; gsc.repository.IdentifierTest.assertEquals II V &amp;gt; [iajc] | RETURN &amp;gt; [iajc] method-execution void &amp;gt; gsc.repository.IdentifierTest.testIdentifierMixedUp &amp;gt; [iajc] end public void testIdentifierMixedUp throws &amp;gt; java.security.NoSuchAlgorithmException, java.io.IOException &amp;gt; &amp;gt; [iajc] end public class gsc.repository.IdentifierTest &amp;gt; &amp;gt; [iajc] &amp;gt; [iajc] Exception thrown from AspectJ 1.5.0M5 &amp;gt; &amp;gt; [iajc] This might be logged as a bug already -- find current &amp;gt; bugs at &amp;gt; [iajc] http://bugs.eclipse.org/bugs/buglist.cgi ? &amp;gt; product=AspectJ&amp;amp;component=Compiler &amp;gt; &amp;gt; [iajc] Bugs for exceptions thrown have titles File:line from &amp;gt; the top stack, &amp;gt; [iajc] e.g., "SomeFile.java:243" &amp;gt; &amp;gt; [iajc] If you don't find the exception below in a bug, please &amp;gt; add a new bug &amp;gt; [iajc] at http://bugs.eclipse.org/bugs/enter_bug.cgi ? &amp;gt; product=AspectJ &amp;gt; [iajc] To make the bug a priority, please include a test program &amp;gt; [iajc] that can reproduce this exception. &amp;gt; [iajc] Incorrectly attempting counter operation on stacked cflow &amp;gt; &amp;gt; [iajc] when implementing on shadow method-execution void &amp;gt; gsc.repository.IdentifierTest.testIdentifierExactMatch &amp;gt; [iajc] when weaving type gsc.repository.IdentifierTest &amp;gt; [iajc] when weaving classes &amp;gt; [iajc] when weaving &amp;gt; [iajc] when batch building with classpath: /Users/sam/Library/ &amp;gt; Java/Extensions/jsk-policy.jar:/System/Library/Java/Extensions/ &amp;gt; CoreAudio.jar:/System/Library/Java/Extensions/dns_sd.jar:/System/ &amp;gt; Library/Java/Extensions/j3daudio.jar:/System/Library/Java/Extensions/ &amp;gt; j3dcore.jar:/System/Library/Java/Extensions/j3dutils.jar:/System/ &amp;gt; Library/Java/Extensions/jai_codec.jar:/System/Library/Java/Extensions/ &amp;gt; jai_core.jar:/System/Library/Java/Extensions/mlibwrapper_jai.jar:/ &amp;gt; System/Library/Java/Extensions/MRJToolkit.jar:/System/Library/Java/ &amp;gt; Extensions/QTJava.zip:/System/Library/Java/Extensions/QTJSupport.jar:/ &amp;gt; System/Library/Java/Extensions/vecmath.jar:/System/Library/Frameworks/ &amp;gt; JavaVM.framework/Versions/1.5.0/Home/lib/ext/apple_provider.jar:/ &amp;gt; System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Home/lib/ &amp;gt; ext/dnsns.jar:/System/Library/Frameworks/JavaVM.framework/Versions/ &amp;gt; 1.5.0/Home/lib/ext/localedata.jar:/System/Library/Frameworks/ &amp;gt; JavaVM.framework/Versions/1.5.0/Home/lib/ext/sunjce_provider.jar:/ &amp;gt; Users/sam/gs/squire/jardb/.aspectj-lib/aspectjrt-1.5.0_M5.jar:/Users/ &amp;gt; sam/gs/squire/jardb/.aspectj-lib/aspectjtools-1.5.0_M5.jar:/Users/sam/ &amp;gt; gs/squire/jardb/target/classes:/Users/sam/gs/squire/jardb/target/test- &amp;gt; classes:/Users/sam/gs/squire/jardb/.lib/antlr-2.7.5.jar:/Users/sam/gs/ &amp;gt; squire/jardb/.lib/asm-1.5.3.jar:/Users/sam/gs/squire/jardb/.lib/ &amp;gt; cglib-2.1_2.jar:/Users/sam/gs/squire/jardb/.lib/commons- &amp;gt; collections-2.1.1.jar:/Users/sam/gs/squire/jardb/.lib/commons- &amp;gt; logging-1.0.4.jar:/Users/sam/gs/squire/jardb/.lib/dom4j-1.6.jar:/ &amp;gt; Users/sam/gs/squire/jardb/.lib/ehcache-1.1.jar:/Users/sam/gs/squire/ &amp;gt; jardb/.lib/ejb3-persistence-pr.jar:/Users/sam/gs/squire/jardb/.lib/ &amp;gt; emma-2.0.latest.jar:/Users/sam/gs/squire/jardb/.lib/ &amp;gt; emma_ant-2.0.latest.jar:/Users/sam/gs/squire/jardb/.lib/ &amp;gt; hibernate-3.1alpha1.jar:/Users/sam/gs/squire/jardb/.lib/hibernate- &amp;gt; annotations-3.1beta3.jar:/Users/sam/gs/squire/jardb/.lib/hibernate- &amp;gt; entitymanager-3.1beta1.jar:/Users/sam/gs/squire/jardb/.lib/ &amp;gt; jta-1.0.jar:/Users/sam/gs/squire/jardb/.lib/junit-3.8.1.jar:/Users/ &amp;gt; sam/gs/squire/jardb/.lib/postgresql-7.4.1-jdbc3.jar:/Users/sam/gs/ &amp;gt; squire/jardb/.lib/svn-javahl-1.2.0.jar:/Users/sam/gs/squire/jardb/lib/ &amp;gt; testng-4.2-jdk15.jar:/Users/sam/gs/squire/jardb/target/aspects.jar: &amp;gt; [iajc] Incorrectly attempting counter operation on stacked cflow &amp;gt; [iajc] java.lang.RuntimeException: Incorrectly attempting &amp;gt; counter operation on stacked cflow &amp;gt; [iajc] at org.aspectj.weaver.bcel.BcelShadow.weaveCflowEntry &amp;gt; BcelShadow.java:1890 &amp;gt; [iajc] at org.aspectj.weaver.bcel.BcelAdvice.implementOn &amp;gt; BcelAdvice.java:231 &amp;gt; [iajc] at org.aspectj.weaver.Shadow.implementMungers &amp;gt; Shadow.java:514 &amp;gt; [iajc] at org.aspectj.weaver.Shadow.implement Shadow.java:391 &amp;gt; [iajc] at org.aspectj.weaver.bcel.BcelClassWeaver.implement &amp;gt; BcelClassWeaver.java:2142 &amp;gt; [iajc] at org.aspectj.weaver.bcel.BcelClassWeaver.weave &amp;gt; BcelClassWeaver.java:467 &amp;gt; [iajc] at org.aspectj.weaver.bcel.BcelClassWeaver.weave &amp;gt; BcelClassWeaver.java:102 &amp;gt; [iajc] at org.aspectj.weaver.bcel.BcelWeaver.weave &amp;gt; BcelWeaver.java:1534 &amp;gt; [iajc] at &amp;gt; org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java: &amp;gt; 1485 &amp;gt; [iajc] at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify &amp;gt; BcelWeaver.java:1266 &amp;gt; [iajc] at org.aspectj.weaver.bcel.BcelWeaver.weave &amp;gt; BcelWeaver.java:1088 &amp;gt; [iajc] at &amp;gt; org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave &amp;gt; AjCompilerAdapter.java:300 &amp;gt; [iajc] at &amp;gt; org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling &amp;gt; AjCompilerAdapter.java:178 &amp;gt; [iajc] at &amp;gt; org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning &amp;gt; $org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 &amp;gt; CompilerAdapter.aj:70 &amp;gt; [iajc] at &amp;gt; org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile &amp;gt; Compiler.java:367 &amp;gt; [iajc] at &amp;gt; org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation &amp;gt; AjBuildManager.java:809 &amp;gt; [iajc] at &amp;gt; org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild &amp;gt; AjBuildManager.java:230 &amp;gt; [iajc] at &amp;gt; org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild &amp;gt; AjBuildManager.java:156 &amp;gt; [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand &amp;gt; AjdtCommand.java:112 &amp;gt; [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand &amp;gt; AjdtCommand.java:60 &amp;gt; [iajc] at org.aspectj.tools.ajc.Main.run Main.java:326 &amp;gt; [iajc] at org.aspectj.tools.ajc.Main.runMain Main.java:240 &amp;gt; [iajc] at &amp;gt; org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM AjcTask.java: &amp;gt; 1210 &amp;gt; [iajc] at org.aspectj.tools.ant.taskdefs.AjcTask.execute &amp;gt; AjcTask.java:1001 &amp;gt; [iajc] at org.apache.tools.ant.UnknownElement.execute &amp;gt; UnknownElement.java:275 &amp;gt; [iajc] at org.apache.tools.ant.Task.perform Task.java:364 &amp;gt; [iajc] at org.apache.tools.ant.taskdefs.Sequential.execute &amp;gt; Sequential.java:64 &amp;gt; [iajc] at org.apache.tools.ant.UnknownElement.execute &amp;gt; UnknownElement.java:275 &amp;gt; [iajc] at org.apache.tools.ant.Task.perform Task.java:364 &amp;gt; [iajc] at &amp;gt; org.apache.tools.ant.taskdefs.MacroInstance.execute &amp;gt; MacroInstance.java:378 &amp;gt; [iajc] at org.apache.tools.ant.UnknownElement.execute &amp;gt; UnknownElement.java:275 &amp;gt; [iajc] at org.apache.tools.ant.Task.perform Task.java:364 &amp;gt; [iajc] at org.apache.tools.ant.Target.execute Target.java:341 &amp;gt; [iajc] at org.apache.tools.ant.Target.performTasks &amp;gt; Target.java:369 &amp;gt; [iajc] at org.apache.tools.ant.Project.executeSortedTargets &amp;gt; Project.java:1216 &amp;gt; [iajc] at org.apache.tools.ant.Project.executeTarget &amp;gt; Project.java:1185 &amp;gt; [iajc] at &amp;gt; org.apache.tools.ant.helper.DefaultExecutor.executeTargets &amp;gt; DefaultExecutor.java:40 &amp;gt; [iajc] at org.apache.tools.ant.Project.executeTargets &amp;gt; Project.java:1068 &amp;gt; [iajc] at org.apache.tools.ant.Main.runBuild Main.java:668 &amp;gt; [iajc] at org.apache.tools.ant.Main.startAnt Main.java:187 &amp;gt; [iajc] at org.apache.tools.ant.launch.Launcher.run &amp;gt; Launcher.java:246 &amp;gt; [iajc] at org.apache.tools.ant.launch.Launcher.main &amp;gt; Launcher.java:67 &amp;gt; &amp;gt; &amp;gt; package gsc.aspects.testing; &amp;gt; &amp;gt; import junit.framework.*; &amp;gt; import java.io.*; &amp;gt; import java.util.*; &amp;gt; &amp;gt; import org.aspectj.lang.annotation.Pointcut; &amp;gt; import org.aspectj.lang.annotation.Before; &amp;gt; import org.aspectj.lang.annotation.Aspect; &amp;gt; import org.aspectj.lang.annotation.After; &amp;gt; import org.aspectj.lang.JoinPoint; &amp;gt; &amp;gt; @Aspect &amp;gt; public class TestMethodMapperAnnotations { &amp;gt; &amp;gt; @Pointcut "this testCase &amp;amp;&amp;amp; this TestCase &amp;amp;&amp;amp; execution void &amp;gt; test* " &amp;gt; public void inTestClass TestCase testCase { &amp;gt; } &amp;gt; &amp;gt; private Map&amp;lt;String, Map&amp;lt;String, Integer&amp;gt;&amp;gt; coverage; &amp;gt; &amp;gt; @Before "cflowbelow inTestClass testCase &amp;amp;&amp;amp; execution * * .. " &amp;gt; public void beforeMethodExecution JoinPoint thisJoinPoint, &amp;gt; TestCase testCase { &amp;gt; String testname = testCase.getClass .getName ; &amp;gt; String methodSignature = thisJoinPoint.getStaticPart &amp;gt; .getSignature .toString ; &amp;gt; Map&amp;lt;String, Integer&amp;gt; tests = coverage.get methodSignature ; &amp;gt; if tests == null { &amp;gt; tests = new HashMap&amp;lt;String, Integer&amp;gt; ; &amp;gt; coverage.put methodSignature, tests ; &amp;gt; } &amp;gt; Integer count = tests.get testname ; &amp;gt; if count == null { &amp;gt; count = 1; &amp;gt; } else { &amp;gt; count++; &amp;gt; } &amp;gt; tests.put testname, count ; &amp;gt; } &amp;gt; &amp;gt; @Before "inTestClass testCase " &amp;gt; public void beforeExecutingTestMethod TestCase testCase { &amp;gt; try { &amp;gt; File file = new File "results.ser" ; &amp;gt; if file.exists { &amp;gt; ObjectInputStream ois = new ObjectInputStream new &amp;gt; FileInputStream file ; &amp;gt; coverage = Map&amp;lt;String, Map&amp;lt;String, Integer&amp;gt;&amp;gt; &amp;gt; ois.readObject ; &amp;gt; ois.close ; &amp;gt; } else { &amp;gt; coverage = new HashMap&amp;lt;String, Map&amp;lt;String, Integer&amp;gt;&amp;gt; ; &amp;gt; } &amp;gt; } catch Exception e { &amp;gt; e.printStackTrace ; &amp;gt; } &amp;gt; } &amp;gt; &amp;gt; @After "inTestClass testCase " &amp;gt; public void afterExecutingTestMethod TestCase testCase { &amp;gt; try { &amp;gt; File file = new File "results.ser" ; &amp;gt; ObjectOutputStream oos = new ObjectOutputStream new &amp;gt; FileOutputStream file ; &amp;gt; oos.writeObject coverage ; &amp;gt; oos.close ; &amp;gt; } catch Exception e { &amp;gt; e.printStackTrace ; &amp;gt; } &amp;gt; } &amp;gt; &amp;gt; } &amp;gt; &amp;gt; vs. &amp;gt; &amp;gt; package gsc.aspects.testing; &amp;gt; &amp;gt; import junit.framework.*; &amp;gt; import java.io.*; &amp;gt; import java.util.*; &amp;gt; &amp;gt; public aspect TestMethodMapper { &amp;gt; &amp;gt; pointcut inTestClass TestCase testCase : this testCase &amp;amp;&amp;amp; this &amp;gt; TestCase &amp;amp;&amp;amp; execution void test* ; &amp;gt; private Map&amp;lt;String, Map&amp;lt;String, Integer&amp;gt;&amp;gt; coverage; &amp;gt; &amp;gt; before TestCase testCase : cflowbelow inTestClass testCase &amp;amp;&amp;amp; &amp;gt; execution * * .. { &amp;gt; String testname = testCase.getClass .getName ; &amp;gt; String methodSignature = thisJoinPointStaticPart.getSignature &amp;gt; .toString ; &amp;gt; Map&amp;lt;String, Integer&amp;gt; tests = coverage.get methodSignature ; &amp;gt; if tests == null { &amp;gt; tests = new HashMap&amp;lt;String, Integer&amp;gt; ; &amp;gt; coverage.put methodSignature, tests ; &amp;gt; } &amp;gt; Integer count = tests.get testname ; &amp;gt; if count == null { &amp;gt; count = 1; &amp;gt; } else { &amp;gt; count++; &amp;gt; } &amp;gt; tests.put testname, count ; &amp;gt; } &amp;gt; &amp;gt; before TestCase testCase : inTestClass testCase { &amp;gt; try { &amp;gt; File file = new File "results.ser" ; &amp;gt; if file.exists { &amp;gt; ObjectInputStream ois = new ObjectInputStream new FileInputStream &amp;gt; file ; &amp;gt; coverage = Map&amp;lt;String, Map&amp;lt;String, Integer&amp;gt;&amp;gt; ois.readObject ; &amp;gt; ois.close ; &amp;gt; } else { &amp;gt; coverage = new HashMap&amp;lt;String, Map&amp;lt;String, Integer&amp;gt;&amp;gt; ; &amp;gt; } &amp;gt; } catch Exception e { &amp;gt; e.printStackTrace ; &amp;gt; } &amp;gt; } &amp;gt; &amp;gt; after TestCase testCase : inTestClass testCase { &amp;gt; try { &amp;gt; File file = new File "results.ser" ; &amp;gt; ObjectOutputStream oos = new ObjectOutputStream new &amp;gt; FileOutputStream file ; &amp;gt; oos.writeObject coverage ; &amp;gt; oos.close ; &amp;gt; } catch Exception e { &amp;gt; e.printStackTrace ; &amp;gt; } &amp;gt; } &amp;gt; &amp;gt; } &amp;gt; &amp;gt; &amp;gt;</description>
    <commit commitTime="2005-12-12 10:48:46" id="979124d0fe6ac23df1dd5ee41838056bbaed6789"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="120356" reportTime="2005-12-12 07:07:00">
    <summary>@AJ decl err/warn does not show cross structure view</summary>
    <description>Perhaps an issue in the ASM struct for DEOW since cross struct. is empty in AJDT , despite error / warning gutter and message is ok.</description>
    <commit commitTime="2006-02-10 11:25:44" id="f743fb210e1b7aa8cdb45e7bda53aa336f912edf"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="120363" reportTime="2005-12-12 08:42:00">
    <summary>LTW weaver include and exclude does not behave correctly</summary>
    <description>According to the specification http://www.eclipse.org/aspectj/doc/next/adk15notebook/ltw-configuration.html "The set of types to be woven are those types matched by at least one weaver include element and not matched by any weaver exclude element." However if an includ elemement can be fast matched e.g. "com.foo..*" any exclude elements are ignored see bug 117854 . There is no explicit test in the harness for this feature.</description>
    <commit commitTime="2005-12-12 15:42:19" id="9edb4b6f9e8ca59b309ac382e6049321832d0700"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="120375" reportTime="2005-12-12 10:43:00">
    <summary>Support Load-Time Weaving and HotSwap</summary>
    <description>LTW can be used in a development environment when the JVM is run under the debugger. If a class is modified it may be recompiled, submitted to the JVM being debugged and "HotSwapped" see bug 117854 . The AspectJ 5 javaagent used for LTW is made aware of this through the JVMTI http://java.sun.com/j2se/1.5.0/docs/api/java/lang/instrument/ClassFileTransformer.html but current implementation throws an exception. There may be a limited number of transformations we could safely perfrom especially if the aspects involved only implement dynamic cross-cutting.</description>
    <commit commitTime="2009-11-19 18:33:01" id="19355dd4021dae5388a4a6178f08d57595b59b1d"/>
    <fixedFiles>
      <file>loadtime5/java5-src/org/aspectj/weaver/loadtime/ClassPreProcessorAgentAdapter.java</file>
    </fixedFiles>
  </bug>
  <bug id="120401" reportTime="2005-12-12 12:11:00">
    <summary>add signature to UnresolvedType.parameterize .. exception</summary>
    <description>I keep getting UnresolvedType UnsupportedOperationException unhelpful message "resolve this type first," so I'm adding the signature to the message without permission, hence the bug as notice . throw new UnsupportedOperationException "unable to parameterize unresolved type: " + signature ; ------------------------------- java.lang.UnsupportedOperationException at org.aspectj.weaver.UnresolvedType.parameterize UnresolvedType.java:218 at org.aspectj.weaver.patterns.ExactTypePattern.parameterizeWith ExactTypePattern.java:242 at org.aspectj.weaver.patterns.TypePatternList.parameterizeWith TypePatternList.java:195 at org.aspectj.weaver.patterns.DeclareParents.parameterizeWith DeclareParents.java:77 at org.aspectj.weaver.ReferenceType.getDeclares ReferenceType.java:484 at org.aspectj.weaver.ResolvedType.collectDeclares ResolvedType.java:523 at org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers ResolvedType.java:488 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect CrosscuttingMembersSet.java:60 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addCrosscuttingStructures AjLookupEnvironment.java:378 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addCrosscuttingStructures AjLookupEnvironment.java:388 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.collectAllITDsAndDeclares AjLookupEnvironment.java:314 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:168 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:301 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:315 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:811 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:230 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:185 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:163 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 UnsupportedOperationException thrown: resolve this type first</description>
    <commit commitTime="2005-12-12 17:13:35" id="3ac46270398a3e9ddde620e03c9dc2123cbe78d0"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/UnresolvedType.java</file>
    </fixedFiles>
  </bug>
  <bug id="120474" reportTime="2005-12-12 20:24:00">
    <summary>Don't dump stack trace when loading $Proxy classes</summary>
    <description>I am seeing a BCException that gets caught and prints a stack trace in Aj.preProcess when loading a class named "$Proxy4" This occurs in UnresolvedType.nameToSignature because the string it receives from ResolvedType.getDeclaringType is "" i.e., it strips off the leading $, treating the type as if it were a nested type of nothing . I'm not sure of the best resolution, but maybe the loop in ResolvedType should just say while lastDollar &amp;gt; 0 . This would handle the "leading $" case as an identifier rather than trying to look up the empty string. This might help with Hibernate's $$ types too... Here is the stack when it happens: UnresolvedType.nameToSignature String line: 774 UnresolvedType.forName String line: 309 ReferenceType ResolvedType .getDeclaringType line: 1255 WithinPointcut.isWithinType ResolvedType line: 50 WithinPointcut.fastMatch FastMatchInfo line: 67 AndPointcut.fastMatch FastMatchInfo line: 51 AndPointcut.fastMatch FastMatchInfo line: 51 AndPointcut.fastMatch FastMatchInfo line: 51 AndPointcut.fastMatch FastMatchInfo line: 51 AndPointcut.fastMatch FastMatchInfo line: 51 BcelWeaver.fastMatch List, ResolvedType line: 1635 BcelWeaver.weave UnwovenClassFile, BcelObjectType, boolean line: 1516 BcelWeaver.weaveWithoutDump UnwovenClassFile, BcelObjectType line: 1494 BcelWeaver.weaveAndNotify UnwovenClassFile, BcelObjectType, IWeaveRequestor line: 1275 BcelWeaver.weave IClassFileProvider line: 1097 ClassLoaderWeavingAdaptor WeavingAdaptor .getWovenBytes String, byte[] line: 261 ClassLoaderWeavingAdaptor WeavingAdaptor .weaveClass String, byte[] line: 194 Aj.preProcess String, byte[], ClassLoader line: 65</description>
    <commit commitTime="2005-12-13 08:24:13" id="3339edbae5d6891cfbde6952329a4ff2808a7901"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedType.java</file>
    </fixedFiles>
  </bug>
  <bug id="120521" reportTime="2005-12-13 03:18:00">
    <summary>named pointcut not resolved in pertarget pointcut</summary>
    <description>Get incorrect error "can't find pointcut ..." when declaring pertarget pointcut using pointcut declared outside the aspect. True of HEAD right now. Not true of pointcuts declared inside the aspect or issingleton aspects. I thought this was reported and fixed, but I couldn't find the bug. Sorry if it is a duplicate. ------------------------------------------------- package bugs; public class PerTargetSubaspectError { public static void main String[] args { C.run ; } static class C { static void run {} } pointcut doit : execution void C.run ; // no error if not pertarget static aspect CPT pertarget pc { // no error if doit defined in CPT protected pointcut pc : doit ; // unexpected CE before : doit {} // no CE } }</description>
    <commit commitTime="2005-12-13 09:25:38" id="ae500c6ac89fef8b7bb6cf4bd2a9cf1ec16cdd6a"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="120527" reportTime="2005-12-13 04:59:00">
    <summary>declare-parents should qualify as "use"</summary>
    <description>For the code below, I get incorrect warning that the interface I is unused, when it is used by declare-parents. ----------------------------------------------- package bugs; public class DeclareParentsOnParameterizedType { public static void main String[] args { System.out.println "" + new C ; // + instanceof A.I ; } static class C{} static aspect A { private interface I {} declare parents : C implements I; } }</description>
    <commit commitTime="2006-02-15 11:10:19" id="81228854e0cd74f3a771aafbffb06b264fdac59f"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
    </fixedFiles>
  </bug>
  <bug id="120543" reportTime="2005-12-13 06:40:00">
    <summary>Issue version message during load-time weaving</summary>
    <description>It would be very useful to know exactly which version of the weaver is being used for LTW. An informational message could be issued when each WeavingAdaptor instance is created it is possible to have multiple versions of AspectJ in a system . This message could be similar to the that issued by "ajc -version".</description>
    <commit commitTime="2005-12-13 14:03:53" id="9d32b76c9b48e6a2593bff77dc120eb8c5f17cff"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="120693" reportTime="2005-12-13 15:03:00">
    <summary>Contribution: More Efficient Lint Warnings: ~15% Performance Increase</summary>
    <description>In profiling a load-time weaving configuration from HEAD, I found that 9% of total time over 10% of weaving time is spent in org.aspectj.weaver.Lint.clearSuppressions , mostly from use inside BcelClassWeaver.match I made a small change in the parts of BcelAdvice that clear suppressions to save the list that was cleared and to only clear these. This alone saves about 15% of total CPU time in start up on my sample configuration.</description>
    <commit commitTime="2005-12-13 21:04:36" id="bdafe3184768eb8b76ab653ef2e9f57b0399ca07"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</file>
      <file>weaver/src/org/aspectj/weaver/Lint.java</file>
    </fixedFiles>
  </bug>
  <bug id="120739" reportTime="2005-12-13 16:10:00">
    <summary>LTW Optimization: Disable World if it has No Aspects</summary>
    <description>This optimization disables weaving for a ClassLoader where there are no aspects defined. This is actually useful if you have aspect exclusions that exclude all the aspects defined in a parent class loader. It is also helpful in the trivial/rare case where there is an aop.xml definition with no aspect definitions.</description>
    <commit commitTime="2006-06-01 16:30:21" id="4513e921c89fb3b8f037418a901e49906724e7bd"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="120826" reportTime="2005-12-14 03:53:00">
    <summary>Varargs causes a NullPointerException</summary>
    <description>The included test program causes a NullPointerException when I have AspectJ nature set for my Eclipse Project. I am using Eclipse 3.2 M3 and AJDT downloaded from here: http://www.eclipse.org/downloads/download.php?file=/technology/ajdt/32/dev/update/ajdt_1.3.0.20051117105200_archive.zip . import java.util.Arrays; import junit.framework.TestCase; /** * @author Pekka Enberg */ public class TestVarargs extends TestCase { public void testVarargs throws Exception { Arrays.asList String.class, Integer.class, Long.class ; } } This is the error: java.lang.NullPointerException at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.lowerUpperBound Scope.java:2999 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.leastContainingTypeArgument Scope.java:2961 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.leastContainingInvocation Scope.java:2879 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.lowerUpperBound Scope.java:3019 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.lowerUpperBound Scope.java:2979 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding.resolveSubstituteConstraints ParameterizedGenericMethodBinding.java:245 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding.inferFromArgumentTypes ParameterizedGenericMethodBinding.java:167 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding.computeCompatibleMethod ParameterizedGenericMethodBinding.java:63 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod Scope.java:352 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod Scope.java:1159 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.getMethod Scope.java:2165 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveMethodBinding MessageSend.java:480 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType MessageSend.java:347 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Expression.resolve Expression.java:829 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements AbstractMethodDeclaration.java:422 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements MethodDeclaration.java:178 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve AbstractMethodDeclaration.java:400 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1088 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1137 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve CompilationUnitDeclaration.java:305 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:514 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:809 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:254 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:163 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 NullPointerException thrown: null</description>
    <commit commitTime="2005-12-14 11:06:03" id="bb8a6c47fa01cd869076c39d6f52ffde83f7c3a0"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="120909" reportTime="2005-12-14 11:58:00">
    <summary>Test failures using IBM Java 5</summary>
    <description>1. ReflectionBasedReferenceTypeDelegateTest.testCompareSubclassDelegates junit.framework.AssertionFailedError: Errors:Couldn't find void java.util.HashMap.onEntry in the bcel set Couldn't find void java.util.HashMap.onExit in the bcel set Couldn't find void java.util.HashMap.transfer0 java.util.HashMap$Entry[] in the bcel set         at junit.framework.Assert.fail Assert.java:47         at junit.framework.Assert.assertTrue Assert.java:20         at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateTest.testCompareSubclassDelegates ReflectionBasedReferenceTypeDelegateTest.java:278         at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method         at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:64         at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:43         at java.lang.reflect.Method.invoke Method.java:615         at junit.framework.TestCase.runTest TestCase.java:154         at junit.framework.TestCase.runBare TestCase.java:127         at junit.framework.TestResult$1.protect TestResult.java:106         at junit.framework.TestResult.runProtected TestResult.java:124         at junit.framework.TestResult.run TestResult.java:109         at junit.framework.TestCase.run TestCase.java:118         at junit.framework.TestSuite.runTest TestSuite.java:208         at junit.framework.TestSuite.run TestSuite.java:203         at junit.framework.TestSuite.runTest TestSuite.java:208         at junit.framework.TestSuite.run TestSuite.java:203         at junit.framework.TestSuite.runTest TestSuite.java:208         at junit.framework.TestSuite.run TestSuite.java:203         at junit.framework.TestSuite.runTest TestSuite.java:208         at junit.framework.TestSuite.run TestSuite.java:203         at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests RemoteTestRunner.java:478         at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run RemoteTestRunner.java:344         at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main RemoteTestRunner.java:196 This failure occures because when we compare BeclWorld with ReflectionWorld we are still picking up the default Sun version of HashMap in JRE15_LIB for BCEL. The solution is to create both worlds with the same class loader. 2. Ajc150Tests.testModifierOverrides junit.framework.AssertionFailedError: Expecting output: execution void pr119749.C.m : execMe[@pr119749$Me ] execution void pr119749.C.m : execEx But found output: execution void pr119749.C.m : execMe[@pr119749.Me ] execution void pr119749.C.m : execEx First difference is on line 1         at junit.framework.Assert.fail Assert.java:47         at org.aspectj.testing.OutputSpec.matchAgainst OutputSpec.java:58         at org.aspectj.testing.RunSpec.execute RunSpec.java:61         at org.aspectj.testing.AjcTest.runTest AjcTest.java:68         at org.aspectj.testing.XMLBasedAjcTestCase.runTest XMLBasedAjcTestCase.java:111         at org.aspectj.systemtest.ajc150.Ajc150Tests.testModifierOverrides Ajc150Tests.java:852         at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method         at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:64         at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:43         at java.lang.reflect.Method.invoke Method.java:615         at junit.framework.TestCase.runTest TestCase.java:154         at junit.framework.TestCase.runBare TestCase.java:127         at junit.framework.TestResult$1.protect TestResult.java:106         at junit.framework.TestResult.runProtected TestResult.java:124         at junit.framework.TestResult.run TestResult.java:109         at junit.framework.TestCase.run TestCase.java:118         at junit.framework.TestSuite.runTest TestSuite.java:208         at junit.framework.TestSuite.run TestSuite.java:203         at junit.framework.TestSuite.runTest TestSuite.java:208         at junit.framework.TestSuite.run TestSuite.java:203         at junit.extensions.TestDecorator.basicRun TestDecorator.java:22         at junit.extensions.TestSetup$1.protect TestSetup.java:19         at junit.framework.TestResult.runProtected TestResult.java:124         at junit.extensions.TestSetup.run TestSetup.java:23         at junit.framework.TestSuite.runTest TestSuite.java:208         at junit.framework.TestSuite.run TestSuite.java:203         at junit.framework.TestSuite.runTest TestSuite.java:208         at junit.framework.TestSuite.run TestSuite.java:203         at junit.framework.TestSuite.runTest TestSuite.java:208         at junit.framework.TestSuite.run TestSuite.java:203         at junit.framework.TestSuite.runTest TestSuite.java:208         at junit.framework.TestSuite.run TestSuite.java:203         at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests RemoteTestRunner.java:478         at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run RemoteTestRunner.java:344         at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main RemoteTestRunner.java:196 This failure is due a difference between JDKs in the implementation of toString for annotations.</description>
    <commit commitTime="2005-12-15 15:57:36" id="9abfc4044b23629af408459a3a5c638d7978e443"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/reflect/ReflectionWorld.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/reflect/ReflectionWorldTest.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/DefaultWeavingContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="120916" reportTime="2005-12-14 12:47:00">
    <summary>test suite failures on jrockit 1.5.0_03 with RC 1</summary>
    <description>Running the full suite on JRockit 1.5.0_03 shows up a number of problems some to do with fragile string comparisons, but others more serious.... ================ testReflectionOfAbstractITDs org.aspectj.systemtest.ajc150.Ajc150Tests ================ junit.framework.AssertionFailedError: Expecting output: public abstract long Connection.callRate public long LongDistance.callRate public long Local.callRate public void Customer.addCharge long public Customer Connection.payer public long Customer.totalCharge But found output: public void Customer.addCharge long public long Local.callRate public long LongDistance.callRate public abstract long Connection.callRate public long Customer.totalCharge public Customer Connection.payer First difference is on line 1 at junit.framework.Assert.fail Assert.java:47 at org.aspectj.testing.OutputSpec.matchAgainst OutputSpec.java:58 at org.aspectj.testing.RunSpec.execute RunSpec.java:61 at org.aspectj.testing.AjcTest.runTest AjcTest.java:68 at org.aspectj.testing.XMLBasedAjcTestCase.runTest XMLBasedAjcTestCase.java:111 at org.aspectj.systemtest.ajc150.Ajc150Tests.testReflectionOfAbstractITDs Ajc150Tests.java:746 at jrockit.reflect.VirtualNativeMethodInvoker.invoke Ljava.lang.Object;[Ljava.lang.Object; Ljava.lang.Object; Unknown Source at jrockit.reflect.InitialMethodInvoker.invoke Ljava.lang.Object;[Ljava.lang.Object; Ljava.lang.Object; Unknown Source at java.lang.reflect.Method.invoke Ljava.lang.Object;[Ljava.lang.Object;I Ljava.lang.Object; Unknown Source at junit.framework.TestCase.runTest TestCase.java:154 at junit.framework.TestCase.runBare TestCase.java:127 at junit.framework.TestResult$1.protect TestResult.java:106 at junit.framework.TestResult.runProtected TestResult.java:124 at junit.framework.TestResult.run TestResult.java:109 at junit.framework.TestCase.run TestCase.java:118 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.extensions.TestDecorator.basicRun TestDecorator.java:22 at junit.extensions.TestSetup$1.protect TestSetup.java:19 at junit.framework.TestResult.runProtected TestResult.java:124 at junit.extensions.TestSetup.run TestSetup.java:23 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 ================ testCloneMethod_pr83311 org.aspectj.systemtest.ajc150.Ajc150Tests ================ junit.framework.AssertionFailedError: test "overriding/polymorphism error on interface method introduction" failed test "overriding/polymorphism error on interface method introduction" failed Unexpected error messages: error at Type 'java.lang.Object' no debug info available ::0 can't override java.lang.Object I.clone with java.lang.Object java.lang.Object.clone visibility is reduced error at public abstract Object I.clone ; ^^^^ C:\temp\ajcSandbox\ajcTest50786.tmp\pr83311.aj:2:0::0 can't override java.lang.Object I.clone with java.lang.Object java.lang.Object.clone visibility is reduced command was: ajc -classpath C:\cygwin\home\Adrian\projects\aspectjdev\lib\test\aspectjrt.jar;..\testing-client\bin;..\runtime\bin;..\aspectj5rt\bin;..\lib\junit\junit.jar;..\bridge\bin;..\loadtime\bin;..\weaver\bin;..\weaver5\bin;..\aj-build\jars\bridge.jar;..\aj-build\jars\util.jar;..\aj-build\jars\loadtime.jar;..\aj-build\jars\weaver.jar;..\aj-build\jars\weaver5.jar;..\aj-build\jars\asm.jar;..\lib\test\testing-client.jar;..\lib\test\aspectjrt.jar;C:\temp\ajcSandbox\ajcTest50786.tmp C:\temp\ajcSandbox\ajcTest50786.tmp\pr83311.aj -d C:\temp\ajcSandbox\ajcTest50786.tmp at junit.framework.Assert.fail Assert.java:47 at org.aspectj.tools.ajc.AjcTestCase.assertMessages AjcTestCase.java:452 at org.aspectj.testing.CompileSpec.execute CompileSpec.java:56 at org.aspectj.testing.AjcTest.runTest AjcTest.java:68 at org.aspectj.testing.XMLBasedAjcTestCase.runTest XMLBasedAjcTestCase.java:111 at org.aspectj.systemtest.ajc150.Ajc150Tests.testCloneMethod_pr83311 Ajc150Tests.java:255 at jrockit.reflect.VirtualNativeMethodInvoker.invoke Ljava.lang.Object;[Ljava.lang.Object; Ljava.lang.Object; Unknown Source at jrockit.reflect.InitialMethodInvoker.invoke Ljava.lang.Object;[Ljava.lang.Object; Ljava.lang.Object; Unknown Source at java.lang.reflect.Method.invoke Ljava.lang.Object;[Ljava.lang.Object;I Ljava.lang.Object; Unknown Source at junit.framework.TestCase.runTest TestCase.java:154 at junit.framework.TestCase.runBare TestCase.java:127 at junit.framework.TestResult$1.protect TestResult.java:106 at junit.framework.TestResult.runProtected TestResult.java:124 at junit.framework.TestResult.run TestResult.java:109 at junit.framework.TestCase.run TestCase.java:118 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.extensions.TestDecorator.basicRun TestDecorator.java:22 at junit.extensions.TestSetup$1.protect TestSetup.java:19 at junit.framework.TestResult.runProtected TestResult.java:124 at junit.extensions.TestSetup.run TestSetup.java:23 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 ================ testGenericDecpParameterized org.aspectj.systemtest.ajc150.GenericsTests ================ java.lang.ClassFormatError: Basic6 : duplicate attribute Signature at java.lang.ClassLoader.defineClass Ljava.lang.String;[BIILjava.security.ProtectionDomain; Ljava.lang.Class; Unknown Source at java.security.SecureClassLoader.defineClass SecureClassLoader.java:124 at java.net.URLClassLoader.defineClass URLClassLoader.java:260 at java.net.URLClassLoader.access$100 URLClassLoader.java:56 at java.net.URLClassLoader$1.run URLClassLoader.java:195 at java.net.URLClassLoader.findClass URLClassLoader.java:188 at java.lang.ClassLoader.loadClass Ljava.lang.String;Z Ljava.lang.Class; Unknown Source at java.lang.ClassLoader.loadClass Ljava.lang.String; Ljava.lang.Class; Unknown Source at org.aspectj.tools.ajc.AjcTestCase.run AjcTestCase.java:607 at org.aspectj.testing.RunSpec.execute RunSpec.java:56 at org.aspectj.testing.AjcTest.runTest AjcTest.java:68 at org.aspectj.testing.XMLBasedAjcTestCase.runTest XMLBasedAjcTestCase.java:111 at org.aspectj.systemtest.ajc150.GenericsTests.testGenericDecpParameterized GenericsTests.java:584 at jrockit.reflect.VirtualNativeMethodInvoker.invoke Ljava.lang.Object;[Ljava.lang.Object; Ljava.lang.Object; Unknown Source at jrockit.reflect.InitialMethodInvoker.invoke Ljava.lang.Object;[Ljava.lang.Object; Ljava.lang.Object; Unknown Source at java.lang.reflect.Method.invoke Ljava.lang.Object;[Ljava.lang.Object;I Ljava.lang.Object; Unknown Source at junit.framework.TestCase.runTest TestCase.java:154 at junit.framework.TestCase.runBare TestCase.java:127 at junit.framework.TestResult$1.protect TestResult.java:106 at junit.framework.TestResult.runProtected TestResult.java:124 at junit.framework.TestResult.run TestResult.java:109 at junit.framework.TestCase.run TestCase.java:118 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.extensions.TestDecorator.basicRun TestDecorator.java:22 ================ testPR96220_GenericDecp org.aspectj.systemtest.ajc150.GenericsTests ================ java.lang.ClassFormatError: Basic : duplicate attribute Signature at java.lang.ClassLoader.defineClass Ljava.lang.String;[BIILjava.security.ProtectionDomain; Ljava.lang.Class; Unknown Source at java.security.SecureClassLoader.defineClass SecureClassLoader.java:124 at java.net.URLClassLoader.defineClass URLClassLoader.java:260 at java.net.URLClassLoader.access$100 URLClassLoader.java:56 at java.net.URLClassLoader$1.run URLClassLoader.java:195 at java.net.URLClassLoader.findClass URLClassLoader.java:188 at java.lang.ClassLoader.loadClass Ljava.lang.String;Z Ljava.lang.Class; Unknown Source at java.lang.ClassLoader.loadClass Ljava.lang.String; Ljava.lang.Class; Unknown Source at org.aspectj.tools.ajc.AjcTestCase.run AjcTestCase.java:607 at org.aspectj.testing.RunSpec.execute RunSpec.java:56 at org.aspectj.testing.AjcTest.runTest AjcTest.java:68 at org.aspectj.testing.XMLBasedAjcTestCase.runTest XMLBasedAjcTestCase.java:111 at org.aspectj.systemtest.ajc150.GenericsTests.testPR96220_GenericDecp GenericsTests.java:540 at jrockit.reflect.VirtualNativeMethodInvoker.invoke Ljava.lang.Object;[Ljava.lang.Object; Ljava.lang.Object; Unknown Source at jrockit.reflect.InitialMethodInvoker.invoke Ljava.lang.Object;[Ljava.lang.Object; Ljava.lang.Object; Unknown Source at java.lang.reflect.Method.invoke Ljava.lang.Object;[Ljava.lang.Object;I Ljava.lang.Object; Unknown Source at junit.framework.TestCase.runTest TestCase.java:154 at junit.framework.TestCase.runBare TestCase.java:127 at junit.framework.TestResult$1.protect TestResult.java:106 at junit.framework.TestResult.runProtected TestResult.java:124 at junit.framework.TestResult.run TestResult.java:109 at junit.framework.TestCase.run TestCase.java:118 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.extensions.TestDecorator.basicRun TestDecorator.java:22 ================ testITDs org.aspectj.systemtest.ajc150.ataspectj.AtAjAnnotationGenTests ================ junit.framework.AssertionFailedError: Exception thrown by a.b.c.ITDTest.main String[] :java.lang.RuntimeException: expecting method name a, got: c at junit.framework.Assert.fail Assert.java:47 at org.aspectj.tools.ajc.AjcTestCase.run AjcTestCase.java:619 at org.aspectj.testing.RunSpec.execute RunSpec.java:56 at org.aspectj.testing.AjcTest.runTest AjcTest.java:68 at org.aspectj.testing.XMLBasedAjcTestCase.runTest XMLBasedAjcTestCase.java:111 at org.aspectj.systemtest.ajc150.ataspectj.AtAjAnnotationGenTests.testITDs AtAjAnnotationGenTests.java:157 at jrockit.reflect.VirtualNativeMethodInvoker.invoke Ljava.lang.Object;[Ljava.lang.Object; Ljava.lang.Object; Unknown Source at jrockit.reflect.InitialMethodInvoker.invoke Ljava.lang.Object;[Ljava.lang.Object; Ljava.lang.Object; Unknown Source at java.lang.reflect.Method.invoke Ljava.lang.Object;[Ljava.lang.Object;I Ljava.lang.Object; Unknown Source at junit.framework.TestCase.runTest TestCase.java:154 at junit.framework.TestCase.runBare TestCase.java:127 at junit.framework.TestResult$1.protect TestResult.java:106 at junit.framework.TestResult.runProtected TestResult.java:124 at junit.framework.TestResult.run TestResult.java:109 at junit.framework.TestCase.run TestCase.java:118 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.extensions.TestDecorator.basicRun TestDecorator.java:22 at junit.extensions.TestSetup$1.protect TestSetup.java:19 at junit.framework.TestResult.runProtected TestResult.java:124 at junit.extensions.TestSetup.run TestSetup.java:23 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 ================ testDecAnnotation org.aspectj.systemtest.ajc150.ataspectj.AtAjAnnotationGenTests ================ junit.framework.AssertionFailedError: Exception thrown by DeclareAnnotationTest.main String[] :java.lang.RuntimeException: expecting @type at junit.framework.Assert.fail Assert.java:47 at org.aspectj.tools.ajc.AjcTestCase.run AjcTestCase.java:619 at org.aspectj.testing.RunSpec.execute RunSpec.java:56 at org.aspectj.testing.AjcTest.runTest AjcTest.java:68 at org.aspectj.testing.XMLBasedAjcTestCase.runTest XMLBasedAjcTestCase.java:111 at org.aspectj.systemtest.ajc150.ataspectj.AtAjAnnotationGenTests.testDecAnnotation AtAjAnnotationGenTests.java:153 at jrockit.reflect.VirtualNativeMethodInvoker.invoke Ljava.lang.Object;[Ljava.lang.Object; Ljava.lang.Object; Unknown Source at jrockit.reflect.InitialMethodInvoker.invoke Ljava.lang.Object;[Ljava.lang.Object; Ljava.lang.Object; Unknown Source at java.lang.reflect.Method.invoke Ljava.lang.Object;[Ljava.lang.Object;I Ljava.lang.Object; Unknown Source at junit.framework.TestCase.runTest TestCase.java:154 at junit.framework.TestCase.runBare TestCase.java:127 at junit.framework.TestResult$1.protect TestResult.java:106 at junit.framework.TestResult.runProtected TestResult.java:124 at junit.framework.TestResult.run TestResult.java:109 at junit.framework.TestCase.run TestCase.java:118 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.extensions.TestDecorator.basicRun TestDecorator.java:22 at junit.extensions.TestSetup$1.protect TestSetup.java:19 at junit.framework.TestResult.runProtected TestResult.java:124 at junit.extensions.TestSetup.run TestSetup.java:23 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 ================ testDeows org.aspectj.systemtest.ajc150.ataspectj.AtAjAnnotationGenTests ================ junit.framework.AssertionFailedError: Exception thrown by Deow.main String[] :java.lang.RuntimeException: Expecting a warning at junit.framework.Assert.fail Assert.java:47 at org.aspectj.tools.ajc.AjcTestCase.run AjcTestCase.java:619 at org.aspectj.testing.RunSpec.execute RunSpec.java:56 at org.aspectj.testing.AjcTest.runTest AjcTest.java:68 at org.aspectj.testing.XMLBasedAjcTestCase.runTest XMLBasedAjcTestCase.java:111 at org.aspectj.systemtest.ajc150.ataspectj.AtAjAnnotationGenTests.testDeows AtAjAnnotationGenTests.java:127 at jrockit.reflect.VirtualNativeMethodInvoker.invoke Ljava.lang.Object;[Ljava.lang.Object; Ljava.lang.Object; Unknown Source at jrockit.reflect.InitialMethodInvoker.invoke Ljava.lang.Object;[Ljava.lang.Object; Ljava.lang.Object; Unknown Source at java.lang.reflect.Method.invoke Ljava.lang.Object;[Ljava.lang.Object;I Ljava.lang.Object; Unknown Source at junit.framework.TestCase.runTest TestCase.java:154 at junit.framework.TestCase.runBare TestCase.java:127 at junit.framework.TestResult$1.protect TestResult.java:106 at junit.framework.TestResult.runProtected TestResult.java:124 at junit.framework.TestResult.run TestResult.java:109 at junit.framework.TestCase.run TestCase.java:118 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.extensions.TestDecorator.basicRun TestDecorator.java:22 at junit.extensions.TestSetup$1.protect TestSetup.java:19 at junit.framework.TestResult.runProtected TestResult.java:124 at junit.extensions.TestSetup.run TestSetup.java:23 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203</description>
    <commit commitTime="2005-12-15 10:36:22" id="332eef9ebd79970f5ac2fe671c4e0efdce85974a"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="121312" reportTime="2005-12-17 02:53:00">
    <summary>[performance]Contribution: Refactoring to Support LTW World with Reflection Delegates for Bootstrap Types</summary>
    <description>This patch adds an IReflectionWorld interface, changes the various places in code where casts are made to ReflectionWorld to use that interface, creates some common methods and creates an LTWWorld that implements this interface, and sets up the ClassLoaderWeavingAdaptor to use it. It's important that the LTWWorld have just one type map for performance and memory efficiency.</description>
    <commit commitTime="2006-02-23 11:34:16" id="cafdecb1028a9a72bfb4beb0e57a91f42c5c35cb"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/reflect/ReflectionWorld.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/reflect/ReflectionWorldTest.java</file>
      <file>weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java</file>
      <file>weaver/src/org/aspectj/weaver/ltw/LTWWorld.java</file>
      <file>weaver/src/org/aspectj/weaver/reflect/ReflectionShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="121385" reportTime="2005-12-19 05:32:00">
    <summary>around advice does not work when LTW</summary>
    <description>I defined a aop.xml and a aspect, I have already copy aspectjweaver.jar D:\work\BTM\lib\aspectjweaver.jar, and added -javaagent:D:\work\BTM\lib\aspectjweaver.jar option to the JVM in Eclipse, it works fine if there are before and after advice in aspect, but it will be wrong once I used around advice. if I use compile-time weaving, this around advice works fine. my Eclipse env: eclipse 3.0.2 + AJDT 1.2.1 RC1 release + Sun JDK 1.5.0. aspect file: import org.aspectj.lang.Signature; import org.aspectj.lang.JoinPoint; public abstract aspect World { //private Object result; pointcut greeting : execution * Hello.sayWorld .. ; Object around : greeting { System.out.println "around start!" ; Object result = proceed ; System.out.println "around end!" ; return result; } // before : greeting { // Signature signature = thisJoinPoint.getSignature ; // System.out.println "before " + signature.getName ; // } // after returning : greeting { // Signature signature = thisJoinPoint.getSignature ; // System.out.println "after " + signature.getName ; // } } aop.xml file: &amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt; &amp;lt;aspectj&amp;gt; &amp;lt;aspects&amp;gt; &amp;lt;aspect name="World"/&amp;gt; &amp;lt;concrete-aspect name="World1" extends="World"&amp;gt; &amp;lt;pointcut name="greeting" expression="execution * Hello.sayWorld .. || execution * Hello.sayHello .. "/&amp;gt; &amp;lt;/concrete-aspect&amp;gt; &amp;lt;/aspects&amp;gt; &amp;lt;weaver options="-Xreweavable -verbose -XlazyTjp -showWeaveInfo"&amp;gt; &amp;lt;include within="Hello"/&amp;gt; &amp;lt;/weaver&amp;gt; &amp;lt;/aspectj&amp;gt; around advice error message in eclipse console as below: info register aspect World info generating class 'World1' info weaving 'Hello' info weaver operating in reweavable mode. Need to verify any required types exist. abort trouble in: public class Hello extends java.lang.Object: public void &amp;lt;init&amp;gt; : ALOAD_0 // Hello this line 2 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V constructor-execution void Hello.&amp;lt;init&amp;gt; | RETURN constructor-execution void Hello.&amp;lt;init&amp;gt; end public void &amp;lt;init&amp;gt; public static void main String[] org.aspectj.weaver.MethodDeclarationLineNumber: 7:75 : INVOKESTATIC Hello.sayHello V line 9 RETURN line 10 end public static void main String[] public static void sayHello org.aspectj.weaver.MethodDeclarationLineNumber: 12:180 : end public static void sayHello public static int sayWorld org.aspectj.weaver.MethodDeclarationLineNumber: 17:268 : method-execution int Hello.sayWorld | GETSTATIC java.lang.System.out Ljava/io/PrintStream; line 18 | LDC "World" | INVOKEVIRTUAL java.io.PrintStream.println Ljava/lang/String; V | ICONST_0 line 19 | IRETURN method-execution int Hello.sayWorld end public static int sayWorld static final void sayHello_aroundBody0 : GETSTATIC java.lang.System.out Ljava/io/PrintStream; line 13 LDC "Hello" INVOKEVIRTUAL java.io.PrintStream.println Ljava/lang/String; V INVOKESTATIC Hello.sayWorld I line 14 POP RETURN line 15 end static final void sayHello_aroundBody0 end public class Hello public class Hello$AjcClosure1 extends org.aspectj.runtime.internal.AroundClosure: public void &amp;lt;init&amp;gt; Object[] : ALOAD_0 ALOAD_1 INVOKESPECIAL org.aspectj.runtime.internal.AroundClosure.&amp;lt;init&amp;gt; [Ljava/lang/Object; V RETURN end public void &amp;lt;init&amp;gt; Object[] public Object run Object[] : ALOAD_0 GETFIELD org.aspectj.runtime.internal.AroundClosure.state [Ljava/lang/Object; ASTORE_2 INVOKESTATIC Hello.sayHello_aroundBody0 V ACONST_NULL ARETURN end public Object run Object[] end public class Hello$AjcClosure1 -- NullPointerException null null java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelAdvice.getAdviceArgSetup BcelAdvice.java:457 at org.aspectj.weaver.bcel.BcelShadow.weaveAroundClosure BcelShadow.java:2685 at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:230 at org.aspectj.weaver.Shadow.implementMungers Shadow.java:588 at org.aspectj.weaver.Shadow.implement Shadow.java:405 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:2146 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:467 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:102 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1543 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1494 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1275 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1097 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:263 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:196 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:65 at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform ClassPreProcessorAgentAdapter.java:52 at sun.instrument.TransformerManager.transform TransformerManager.java:122 at sun.instrument.InstrumentationImpl.transform InstrumentationImpl.java:155 at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:620 at java.security.SecureClassLoader.defineClass SecureClassLoader.java:124 at java.net.URLClassLoader.defineClass URLClassLoader.java:260 at java.net.URLClassLoader.access$100 URLClassLoader.java:56 at java.net.URLClassLoader$1.run URLClassLoader.java:195 at java.security.AccessController.doPrivileged Native Method at java.net.URLClassLoader.findClass URLClassLoader.java:188 at java.lang.ClassLoader.loadClass ClassLoader.java:306 at sun.misc.Launcher$AppClassLoader.loadClass Launcher.java:268 at java.lang.ClassLoader.loadClass ClassLoader.java:251 at java.lang.ClassLoader.loadClassInternal ClassLoader.java:319 Message: abort trouble in: public class Hello extends java.lang.Object: public void &amp;lt;init&amp;gt; : ALOAD_0 // Hello this line 2 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V constructor-execution void Hello.&amp;lt;init&amp;gt; | RETURN constructor-execution void Hello.&amp;lt;init&amp;gt; end public void &amp;lt;init&amp;gt; public static void main String[] org.aspectj.weaver.MethodDeclarationLineNumber: 7:75 : INVOKESTATIC Hello.sayHello V line 9 RETURN line 10 end public static void main String[] public static void sayHello org.aspectj.weaver.MethodDeclarationLineNumber: 12:180 : end public static void sayHello public static int sayWorld org.aspectj.weaver.MethodDeclarationLineNumber: 17:268 : method-execution int Hello.sayWorld | GETSTATIC java.lang.System.out Ljava/io/PrintStream; line 18 | LDC "World" | INVOKEVIRTUAL java.io.PrintStream.println Ljava/lang/String; V | ICONST_0 line 19 | IRETURN method-execution int Hello.sayWorld end public static int sayWorld static final void sayHello_aroundBody0 : GETSTATIC java.lang.System.out Ljava/io/PrintStream; line 13 LDC "Hello" INVOKEVIRTUAL java.io.PrintStream.println Ljava/lang/String; V INVOKESTATIC Hello.sayWorld I line 14 POP RETURN line 15 end static final void sayHello_aroundBody0 end public class Hello public class Hello$AjcClosure1 extends org.aspectj.runtime.internal.AroundClosure: public void &amp;lt;init&amp;gt; Object[] : ALOAD_0 ALOAD_1 INVOKESPECIAL org.aspectj.runtime.internal.AroundClosure.&amp;lt;init&amp;gt; [Ljava/lang/Object; V RETURN end public void &amp;lt;init&amp;gt; Object[] public Object run Object[] : ALOAD_0 GETFIELD org.aspectj.runtime.internal.AroundClosure.state [Ljava/lang/Object; ASTORE_2 INVOKESTATIC Hello.sayHello_aroundBody0 V ACONST_NULL ARETURN end public Object run Object[] end public class Hello$AjcClosure1 -- NullPointerException null null java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelAdvice.getAdviceArgSetup BcelAdvice.java:457 at org.aspectj.weaver.bcel.BcelShadow.weaveAroundClosure BcelShadow.java:2685 at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:230 at org.aspectj.weaver.Shadow.implementMungers Shadow.java:588 at org.aspectj.weaver.Shadow.implement Shadow.java:405 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:2146 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:467 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:102 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1543 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1494 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1275 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1097 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:263 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:196 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:65 at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform ClassPreProcessorAgentAdapter.java:52 at sun.instrument.TransformerManager.transform TransformerManager.java:122 at sun.instrument.InstrumentationImpl.transform InstrumentationImpl.java:155 at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:620 at java.security.SecureClassLoader.defineClass SecureClassLoader.java:124 at java.net.URLClassLoader.defineClass URLClassLoader.java:260 at java.net.URLClassLoader.access$100 URLClassLoader.java:56 at java.net.URLClassLoader$1.run URLClassLoader.java:195 at java.security.AccessController.doPrivileged Native Method at java.net.URLClassLoader.findClass URLClassLoader.java:188 at java.lang.ClassLoader.loadClass ClassLoader.java:306 at sun.misc.Launcher$AppClassLoader.loadClass Launcher.java:268 at java.lang.ClassLoader.loadClass ClassLoader.java:251 at java.lang.ClassLoader.loadClassInternal ClassLoader.java:319 org.aspectj.bridge.AbortException: trouble in: public class Hello extends java.lang.Object: public void &amp;lt;init&amp;gt; : ALOAD_0 // Hello this line 2 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V constructor-execution void Hello.&amp;lt;init&amp;gt; | RETURN constructor-execution void Hello.&amp;lt;init&amp;gt; end public void &amp;lt;init&amp;gt; public static void main String[] org.aspectj.weaver.MethodDeclarationLineNumber: 7:75 : INVOKESTATIC Hello.sayHello V line 9 RETURN line 10 end public static void main String[] public static void sayHello org.aspectj.weaver.MethodDeclarationLineNumber: 12:180 : end public static void sayHello public static int sayWorld org.aspectj.weaver.MethodDeclarationLineNumber: 17:268 : method-execution int Hello.sayWorld | GETSTATIC java.lang.System.out Ljava/io/PrintStream; line 18 | LDC "World" | INVOKEVIRTUAL java.io.PrintStream.println Ljava/lang/String; V | ICONST_0 line 19 | IRETURN method-execution int Hello.sayWorld end public static int sayWorld static final void sayHello_aroundBody0 : GETSTATIC java.lang.System.out Ljava/io/PrintStream; line 13 LDC "Hello" INVOKEVIRTUAL java.io.PrintStream.println Ljava/lang/String; V INVOKESTATIC Hello.sayWorld I line 14 POP RETURN line 15 end static final void sayHello_aroundBody0 end public class Hello public class Hello$AjcClosure1 extends org.aspectj.runtime.internal.AroundClosure: public void &amp;lt;init&amp;gt; Object[] : ALOAD_0 ALOAD_1 INVOKESPECIAL org.aspectj.runtime.internal.AroundClosure.&amp;lt;init&amp;gt; [Ljava/lang/Object; V RETURN end public void &amp;lt;init&amp;gt; Object[] public Object run Object[] : ALOAD_0 GETFIELD org.aspectj.runtime.internal.AroundClosure.state [Ljava/lang/Object; ASTORE_2 INVOKESTATIC Hello.sayHello_aroundBody0 V ACONST_NULL ARETURN end public Object run Object[] end public class Hello$AjcClosure1 at org.aspectj.bridge.MessageWriter.handleMessage MessageWriter.java:47 at org.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHandler.handleMessage WeavingAdaptor.java:395 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1554 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1494 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1275 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1097 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:263 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:196 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:65 at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform ClassPreProcessorAgentAdapter.java:52 at sun.instrument.TransformerManager.transform TransformerManager.java:122 at sun.instrument.InstrumentationImpl.transform InstrumentationImpl.java:155 at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:620 at java.security.SecureClassLoader.defineClass SecureClassLoader.java:124 at java.net.URLClassLoader.defineClass URLClassLoader.java:260 at java.net.URLClassLoader.access$100 URLClassLoader.java:56 at java.net.URLClassLoader$1.run URLClassLoader.java:195 at java.security.AccessController.doPrivileged Native Method at java.net.URLClassLoader.findClass URLClassLoader.java:188 at java.lang.ClassLoader.loadClass ClassLoader.java:306 at sun.misc.Launcher$AppClassLoader.loadClass Launcher.java:268 at java.lang.ClassLoader.loadClass ClassLoader.java:251 at java.lang.ClassLoader.loadClassInternal ClassLoader.java:319 Hello World</description>
    <commit commitTime="2005-12-21 17:21:57" id="a778ac41009cdc13412ca79cf7a1649ccec93571"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</file>
    </fixedFiles>
  </bug>
  <bug id="121395" reportTime="2005-12-19 06:28:00">
    <summary>invalid aspectj path throws filenotfoundexception</summary>
    <description>An invalid aspectj path missing jar file throws an filenotfoundexception: java.io.FileNotFoundException at java.io.FileInputStream.open Native Method at java.io.FileInputStream.&amp;lt;init&amp;gt; FileInputStream.java:106 at org.aspectj.weaver.bcel.BcelWeaver.addAspectsFromJarFile BcelWeaver.java:202 at org.aspectj.weaver.bcel.BcelWeaver.addLibraryJarFile BcelWeaver.java:192 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.initBcelWorld AjBuildManager.java:623 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:209 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:185 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:163 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 FileNotFoundException thrown: /Users/frankstolle/Documents/workspace/lib_aspects/deploy/lib_aspects.jar No such file or directory should generate an problem entry in the problems-list.</description>
    <commit commitTime="2006-01-27 12:30:21" id="551b446bec83bef0f7df1f57353fdb4297bc14a6"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/AjdeInteractionTestbed.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="121616" reportTime="2005-12-20 14:58:00">
    <summary>[@AspectJ]Lacking import for JoinPoint crahes the compiler</summary>
    <description>Encountered during a JavaPolis demo. I was using a pre-release development version. However, reproducable with latest post-release development version as well. Create the following source file: package banking; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.Pointcut; public class Main { public static void main String[] args { System.out.println "Main" ; } } @Aspect class MainLogger { @Pointcut "execution * main .. " public void log JoinPoint thisJoinPoint { System.out.println "Before " thisJoinPoint" ; } } Note that the import statement for JoinPoint is lacking. Compiling this source file crahses the compiler. Adding import statement for JoinPoint makes it work fine. C:\work\aop\src\workspace\CallDebugBug&amp;gt;ajc -version AspectJ Compiler DEVELOPMENT built on Tuesday Dec 20, 2005 at 13:58:29 GMT C:\work\aop\src\workspace\CallDebugBug&amp;gt;ajc -1.5 banking\Main.java C:\work\aop\src\workspace\CallDebugBug\banking\Main.java [error] Internal compil er error java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVi sitor.buildFormalAdviceBindingsFrom ValidateAtAspectJAnnotationsVisitor.java:417 at org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVi sitor.convertToPointcutDeclaration ValidateAtAspectJAnnotationsVisitor.java:513 at org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVi sitor.visit ValidateAtAspectJAnnotationsVisitor.java:188 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.t raverse MethodDeclaration.java:185 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.tra verse TypeDeclaration.java:1195 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDecl aration.traverse CompilationUnitDeclaration.java:339 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.beforeAnalysing AjCompilerAdapter.java:154 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$before$org_asp ectj_ajdt_internal_compiler_CompilerAdapter$7$db78446d CompilerAdapter.aj:101 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compil er.java:517 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compil er.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:811 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:230 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:156 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:326 at org.aspectj.tools.ajc.Main.runMain Main.java:240 at org.aspectj.tools.ajc.Main.main Main.java:83 no source information available C:\work\aop\src\workspace\CallDebugBug\banking\Main.java:16 [error] JoinPoint ca nnot be resolved to a type public void log JoinPoint thisJoinPoint { ^^^^^^^ C:\work\aop\src\workspace\CallDebugBug\banking\Main.java:17 [error] Syntax error , insert " " to complete MethodInvocation System.out.println "Before " thisJoinPoint" ; C:\work\aop\src\workspace\CallDebugBug\banking\Main.java:17 [error] Syntax error , insert ";" to complete BlockStatements System.out.println "Before " thisJoinPoint" ; ABORT Exception thrown from AspectJ DEVELOPMENT This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. when validating @AspectJ annotations log when analysing types defined in compilation unit C:\work\aop\src\workspace\CallD ebugBug\banking\Main.java when processing compilation unit C:\work\aop\src\workspace\CallDebugBug\banking\ Main.java when batch building with classpath: c:\java\jdk1.5.0_04\jre\lib\ext\dnsns.jar;c: \java\jdk1.5.0_04\jre\lib\ext\localedata.jar;c:\java\jdk1.5.0_04\jre\lib\ext\sun jce_provider.jar;c:\java\jdk1.5.0_04\jre\lib\ext\sunpkcs11.jar;c:\java\jdk1.5.0_ 04\lib\tools.jar;c:\java\jdk1.5.0_04\jre\lib\rt.jar;C:\java\aspectj\aspectj5\lib \aspectjrt.jar;C:\java\log4j\jakarta-log4j-1.2.8\dist\lib\log4j-1.2.8.jar;C:\jav a\jess\Jess61p5\jess.jar;c:\java\j2sdkee1.3.1\lib\system\cloudscape.jar;c:\java\ j2sdkee1.3.1\lib\system\tools.jar;c:\java\j2sdkee1.3.1\lib\cloudscape\RmiJdbc.ja r;c:\java\j2sdkee1.3.1\lib\cloudscape\cloudclient.jar;c:\java\j2sdkee1.3.1\lib\c lasses;c:\java\j2sdkee1.3.1\classes;c:\java\j2sdkee1.3.1\lib\j2ee.jar;c:\java\j2 sdkee1.3.1\lib\toolclasses;c:\java\j2sdkee1.3.1\lib\j2eetools.jar;c:\java\j2sdke e1.3.1\lib\locale;c:\java\j2sdkee1.3.1\lib\j2ee.jar;c:\java\j2sdkee1.3.1\lib\jha ll.jar;c:\java\j2sdkee1.3.1\lib\locale;c:\java\jdk1.5.0_04\lib\tools.jar;c:\java \j2sdkee1.3.1\lib\jhall.jar;C:\java\ws\axis\axis-1_1\lib\axis.jar;C:\java\ws\axi s\axis-1_1\lib\axis-ant.jar;C:\java\ws\axis\axis-1_1\lib\commons-discovery.jar;C :\java\ws\axis\axis-1_1\lib\commons-logging.jar;C:\java\ws\axis\axis-1_1\lib\jax rpc.jar;C:\java\ws\axis\axis-1_1\lib\saaj.jar;C:\java\ws\axis\axis-1_1\lib\log4j -1.2.8.jar;C:\java\ws\axis\axis-1_1\lib\wsdl4j.jar;C:\java\concurrency\concurren cy.jar;C:\java\junit\junit3.8.1\junit.jar;.; null java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVi sitor.buildFormalAdviceBindingsFrom ValidateAtAspectJAnnotationsVisitor.java:417 at org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVi sitor.convertToPointcutDeclaration ValidateAtAspectJAnnotationsVisitor.java:513 at org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVi sitor.visit ValidateAtAspectJAnnotationsVisitor.java:188 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.t raverse MethodDeclaration.java:185 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.tra verse TypeDeclaration.java:1195 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDecl aration.traverse CompilationUnitDeclaration.java:339 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.beforeAnalysing AjCompilerAdapter.java:154 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$before$org_asp ectj_ajdt_internal_compiler_CompilerAdapter$7$db78446d CompilerAdapter.aj:101 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compil er.java:517 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compil er.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:811 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:230 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:156 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:326 at org.aspectj.tools.ajc.Main.runMain Main.java:240 at org.aspectj.tools.ajc.Main.main Main.java:83 1 fail|abort, 4 errors</description>
    <commit commitTime="2006-02-16 09:33:38" id="d4219e12eaa86ed810392364931a92324dc2a67f"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java</file>
    </fixedFiles>
  </bug>
  <bug id="121711" reportTime="2005-12-21 05:45:00">
    <summary>refactor ajdoc tests to use the sandbox directory</summary>
    <description>A comment in bug 119453 was: &amp;gt; It is a shame all the ajdoc tests don't use the sandbox directory like the &amp;gt; harness tests - then there wouldn't be problems with ensuring we tidy up after &amp;gt; completion. The multiprojectincremental tests run outside of the harness but &amp;gt; use a /temp sandbox mechanism - we should think about using that here too. This enhancement is being raised to cover this work. Also, to be included is the tidy up of the checking of ajdoc output. Rather than having large check methods within the various tests it would be better to have a helper class which you could pass a string saying "check this string is in the ajdoc output" or pass two strings saying "check that string1 appears after string2 in the ajdoc output". This can then be used by the other tests to ensure the output is correct.</description>
    <commit commitTime="2006-01-13 14:44:59" id="ab2150f267eef2ec565cc596b2e0e0412a3bd290"/>
    <fixedFiles>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/FullyQualifiedArgumentTest.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/AjdocTests.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/Main.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/PatternsTestCase.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/ExecutionTestCase.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/JDKVersionTest.java</file>
      <file>ajdoc/testdata/coverage/foo/PlainJava.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/EnumTest.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/SpacewarTestCase.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/DeclareFormsTest.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/PointcutVisibilityTest.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/ITDTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="122248" reportTime="2005-12-28 09:35:00">
    <summary>BUG for ajdt_1.3_for_eclipse_3.1.zip</summary>
    <description>Hi !! I use ajdt_1.3_for_eclipse_3.1.zip with eclipse 3.1.1 and fick this error when the eclipse try to make the workbrench: java.lang.IllegalStateException at org.aspectj.weaver.TypeFactory.createParameterizedType TypeFactory.java:42 at org.aspectj.weaver.bcel.BcelGenericSignatureToTypeXConverter.classTypeSignature2TypeX BcelGenericSignatureToTypeXConverter.java:82 at org.aspectj.weaver.bcel.BcelGenericSignatureToTypeXConverter.classTypeSignature2TypeX BcelGenericSignatureToTypeXConverter.java:42 at org.aspectj.weaver.bcel.BcelObjectType.unpackGenericSignature BcelObjectType.java:657 at org.aspectj.weaver.bcel.BcelObjectType.getSuperclass BcelObjectType.java:181 at org.aspectj.weaver.ReferenceType.getSuperclass ReferenceType.java:514 at org.aspectj.weaver.bcel.BcelWeaver.weaveParentsFor BcelWeaver.java:1192 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1047 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:300 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:178 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:811 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:230 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:156 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 IllegalStateException thrown: Expecting raw type</description>
    <commit commitTime="2006-01-15 21:33:55" id="3f77e755e504d24e0dc6fd640972d56de15a6bef"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/MemberTestCase15.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelField.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelMethod.java</file>
    </fixedFiles>
  </bug>
  <bug id="122370" reportTime="2005-12-30 00:54:00">
    <summary>[@AspectJ] @DeclareParents/declare parents not equivalent</summary>
    <description>Adding a setter to the Moody example makes it clear that the annotation style @DeclareParents results in different behavior than the classic declare parents style. Calling the setter in a "declare parents"-advised object behaves as one would expect. However, calling the setter with a "@DeclareParents"-advised object has no effect -- that is, you can call the setter and see that it's been called and immediately call the getter, only to find that the value didn't change. The following examples all in "package moody;" illustrate: public enum Mood { HAPPY, JOLLY } Classic style: ------------- public aspect ClassicMoodIndicator { public interface Moody { Mood getMood ; void setMood Mood mood ; } private Mood Moody.mood = Mood.HAPPY; public Mood Moody.getMood { return mood; } public void Moody.setMood Mood mood { this.mood = mood; } declare parents : moody.ClassicMoodImplementor implements Moody; } public class ClassicMoodImplementor { } Annotation style: ---------------- import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.DeclareParents; @Aspect public class AnnotationMoodIndicator { public interface Moody { Mood getMood ; void setMood Mood mood ; } public static class MoodyImpl implements Moody { private Mood mood = Mood.HAPPY; public Mood getMood { return mood; } public void setMood Mood mood { this.mood = mood; } } @DeclareParents value="moody.AnnotationMoodImplementor",defaultImpl=MoodyImpl.class private Moody implementedInterface; } public class AnnotationMoodImplementor { } JUnit TestCase: -------------- import junit.framework.TestCase; public class MoodTester extends TestCase { public MoodTester String name { super name ; } public void testClassic { ClassicMoodImplementor cmi0 = new ClassicMoodImplementor ; ClassicMoodImplementor cmi1 = new ClassicMoodImplementor ; assertEquals "cmi0 should be HAPPY", Mood.HAPPY, cmi0.getMood ; cmi1.setMood Mood.JOLLY ; assertEquals "cmi1 should be JOLLY", Mood.JOLLY, cmi1.getMood ; assertEquals "cmi0 should be *still* be HAPPY", Mood.HAPPY, cmi0.getMood ; } public void testAnnotation { AnnotationMoodImplementor ami0 = new AnnotationMoodImplementor ; AnnotationMoodImplementor ami1 = new AnnotationMoodImplementor ; assertEquals "ami0 should be HAPPY", Mood.HAPPY, AnnotationMoodIndicator.Moody ami0 .getMood ; AnnotationMoodIndicator.Moody ami1 .setMood Mood.JOLLY ; assertEquals "ami1 should be JOLLY", Mood.JOLLY, AnnotationMoodIndicator.Moody ami1 .getMood ; assertEquals "ami0 should be *still* be HAPPY", Mood.HAPPY, AnnotationMoodIndicator.Moody ami0 .getMood ; } } Result: ------ The test run is as follows: ..F Time: 0.021 There was 1 failure: 1 testAnnotation moody.MoodTester junit.framework.AssertionFailedError: ami1 should be JOLLY expected:&amp;lt;JOLLY&amp;gt; but was:&amp;lt;HAPPY&amp;gt; at moody.MoodTester.testAnnotation MoodTester.java:27 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at moody.MoodTester.main MoodTester.java:7 FAILURES!!! Tests run: 2, Failures: 1, Errors: 0 For classic, you can see that cmi1.setMood was successful and cmi0/cmi1 are decoupled that is, calling setMood on cmi1 has no impact on cmi0 . The annotation style, however, fails because ami1.setMood appears to have done nothing. The result should have been that ami1 is JOLLY and ami0 HAPPY I include the second assert because both ami0 &amp;amp; ami1 ended up JOLLY in RC1 . The current behavior makes @DeclareParents unusable for retaining field state near as I can tell, it retains state throughout the method invocation, but not beyond it, like it is creating and discarding a backing object with each method invocation .</description>
    <commit commitTime="2006-02-16 16:50:34" id="e87458179ab929aae2bc6966a6e092813bdd14a3"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="122417" reportTime="2005-12-31 05:11:00">
    <summary>[waiting-on-website-doc-refresh] Typo in org.aspectj.lang.JoinPoint String constant symbolic name</summary>
    <description>Methinks the n_a_m_e of the preinitialization constant is misspelled JoinPoint.PREINTIALIZATION is lacking an "I" between the N and the T JoinPoint.PREINITIALIZATION might be the correct version Note: The value of the constant "preinitialization" is spelled correctly. Sorry for the inconvenience. Harald</description>
    <commit commitTime="2006-01-10 16:19:56" id="a9ef1b01b21e35c6fa43f24b095edf8bf36afe7c"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/Shadow.java</file>
      <file>runtime/src/org/aspectj/lang/JoinPoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="122452" reportTime="2006-01-02 06:35:00">
    <summary>NPE in ResolvedType.findPointcut ResolvedType.java:479</summary>
    <description>I wrote below wrong aspect: and NPE is thrown public aspect TracePoint { pointcut greeting : call * Point.sayHello .. ; pointcut greeting2 : call * related.Hello.sayHello .. ; after returning : greeting* { System.out.println " World!" ; } } java.lang.NullPointerException at org.aspectj.weaver.ResolvedType.findPointcut ResolvedType.java:479 at org.aspectj.weaver.patterns.ReferencePointcut.resolveBindings ReferencePointcut.java:148 at org.aspectj.weaver.patterns.Pointcut.resolve Pointcut.java:195 at org.aspectj.ajdt.internal.compiler.ast.PointcutDesignator.finishResolveTypes PointcutDesignator.java:84 at org.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration.resolveStatements AdviceDeclaration.java:118 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve AbstractMethodDeclaration.java:400 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1088 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.resolve AspectDeclaration.java:115 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1137 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve CompilationUnitDeclaration.java:305 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:514 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java Compiled Code at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:230 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:185 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:163 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 NullPointerException thrown: null</description>
    <commit commitTime="2006-01-25 09:04:53" id="1f4956a4e31ac88bcc97a98da3f84c89413cd0a1"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="122458" reportTime="2006-01-02 12:16:00">
    <summary>java.lang.StringIndexOutOfBoundsException when compiling build no.: 20051220093604</summary>
    <description>This exception occurs using the ajdt eclipse plugin when compiling a project the first time I add the ajdt nature. There are no aspects defined in the project. I suppose the exception occurs when compiling a class sorry I can't post the entire source code with this signature: public class FixedWidthParser&amp;lt;T&amp;gt; extends TabularDataParser&amp;lt;T&amp;gt; The only noticeable things about this class are the presence of an inherited type parameter and redefined with same name some custom annotations on methods and a varags on a method parameter, but all of this things are present on other classes in the same project that AspectJ apprently compiles well I'm not sure about the fact it compiles them . Hope I helped you with this clues, here's the complete stacktrace. java.lang.StringIndexOutOfBoundsException at java.lang.String.substring Unknown Source at org.aspectj.weaver.TypeFactory.createTypeFromSignature TypeFactory.java:86 at org.aspectj.weaver.TypeFactory.createTypeFromSignature TypeFactory.java:116 at org.aspectj.weaver.UnresolvedType.forSignature UnresolvedType.java:430 at org.aspectj.weaver.UnresolvedType.makeArray UnresolvedType.java:286 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding EclipseFactory.java:214 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember EclipseFactory.java:516 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember EclipseFactory.java:494 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember EclipseFactory.java:451 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.genBytecodeInfo AsmHierarchyBuilder.java:525 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.visit AsmHierarchyBuilder.java:400 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse MethodDeclaration.java:185 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse TypeDeclaration.java:1195 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse CompilationUnitDeclaration.java:339 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.internalBuild AsmHierarchyBuilder.java:142 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.buildStructureForCompilationUnit AsmHierarchyBuilder.java:82 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishedCompilationUnit EclipseFactory.java:926 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing AjCompilerAdapter.java:195 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$4$6b855184 CompilerAdapter.aj:89 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:528 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:811 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:230 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:156 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 StringIndexOutOfBoundsException thrown: String index out of range: -2</description>
    <commit commitTime="2006-01-10 09:47:15" id="24a785febccd12facf9fefceef03a2b7ab693bd9"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/TypeFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="122460" reportTime="2006-01-02 12:23:00">
    <summary>Why is checking a modifier so code intensive</summary>
    <description>I have a modifier ast node in hand and want to find out if it is a public modifier. The code I have to write is: Modifier.isPublic modifier.getKeyword .toFlagValue why can't I simply write: modifier.isPublic</description>
    <commit commitTime="2010-05-03 17:47:58" id="999f15a41b72aa10f05dd8762f70a2f4de00f30d"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/DefaultWeavingContext.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="122580" reportTime="2006-01-03 20:19:00">
    <summary>Fix &amp; Bug: Circularity Failure for Verbose Loading on JRockit 1.4.2_08 Agent</summary>
    <description>Here is a stack trace I am getting when I try to use AspectJ 1.5.0 final release's load-time weaving with JRockIt 1.4.2_08 using -Xmanagement:class=org.aspectj.weaver.loadtime.JRockitAgent to load Weblogic Server 8.1 SP2. I debugged the code in Eclipse and discovered that the weaver was being initialized while loading IMessage$Kind, so the JRockIt VM simply hasn't run staticinitialization yet, making IMessage.INFO null. I was able to fix this stack trace by hoisting the check for loading AspectJ code up BEFORE initializing a weaving adaptor i.e., changing line 55 of Aj.java to be if loader == null || className == null || className.startsWith "org/aspectj/" { I then commented out line 251 of WeavingAdaptor to avoid a duplicate check: private boolean shouldWeaveName String name { return ! /* name.startsWith "org.apache.bcel." ||//FIXME AV why ? bcel is wrapped in org.aspectj. name.startsWith "org.aspectj." ||*/ // now checked earlier, to avoid circularity issues in initialization name.startsWith "java." || name.startsWith "javax." //|| name.startsWith "$Proxy" //JDK proxies//FIXME AV is that 1.3 proxy ? fe. ataspect.$Proxy0 is a java5 proxy... || name.startsWith "sun.reflect." ;//JDK reflect } Note that this bug does NOT occur when using a JRockIt 1.5.0 VM, even with the -Xmanagement command line argument. Stack Trace: java.lang.IllegalArgumentException: null kind at org.aspectj.bridge.Message.&amp;lt;init&amp;gt; Ljava/lang/String;Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Lorg/aspectj/bridge/ISourceLocation;Ljava/lang/Throwable;[Lorg/aspectj/bridge/ISourceLocation;ZIII V Message.java:89 at org.aspectj.bridge.Message.&amp;lt;init&amp;gt; Ljava/lang/String;Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Lorg/aspectj/bridge/ISourceLocation;Ljava/lang/Throwable;[Lorg/aspectj/bridge/ISourceLocation; V Message.java:67 at org.aspectj.bridge.Message.&amp;lt;init&amp;gt; Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Ljava/lang/Throwable;Lorg/aspectj/bridge/ISourceLocation; V Message.java:110 at org.aspectj.bridge.MessageUtil.info Ljava/lang/String; Lorg/aspectj/bridge/IMessage; MessageUtil.java:211 at org.aspectj.bridge.MessageUtil.info Lorg/aspectj/bridge/IMessageHandler;Ljava/lang/String; Z MessageUtil.java:98 at org.aspectj.weaver.tools.WeavingAdaptor.info Ljava/lang/String; Z WeavingAdaptor.java:343 at org.aspectj.weaver.tools.WeavingAdaptor.createMessageHandler V WeavingAdaptor.java:168 at org.aspectj.weaver.tools.WeavingAdaptor.&amp;lt;init&amp;gt; V WeavingAdaptor.java:80 at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.&amp;lt;init&amp;gt; Ljava/lang/ClassLoader;Lorg/aspectj/weaver/loadtime/IWeavingContext; V ClassLoaderWeavingAdaptor.java:70 at org.aspectj.weaver.loadtime.Aj$WeaverContainer.getWeaver Ljava/lang/ClassLoader;Lorg/aspectj/weaver/loadtime/IWeavingContext; Lorg/aspectj/weaver/tools/WeavingAdaptor; Aj.java:94 at org.aspectj.weaver.loadtime.Aj.preProcess Ljava/lang/String;[BLjava/lang/ClassLoader; [B Aj.java:61 at org.aspectj.weaver.loadtime.JRockitAgent.preProcess Ljava/lang/ClassLoader;Ljava/lang/String;[B [B JRockitAgent.java:74 at jrockit.vm.ClassPreProcessorManager.notifyClassPreProcessor ILjava/lang/String;[B [B Unknown Source at jrockit.vm.Classes.defineClass0 ILjava/lang/String;[BII I Unknown Source at jrockit.vm.Classes.defineClass Ljava/lang/ClassLoader;Ljava/lang/String;[BII Ljava/lang/Class; Unknown Source at java.lang.ClassLoader.defineClass Ljava/lang/String;[BIILjava/security/ProtectionDomain; Ljava/lang/Class; Unknown Source at java.security.SecureClassLoader.defineClass Ljava/lang/String;[BIILjava/security/CodeSource; Ljava/lang/Class; SecureClassLoader.java:123 at java.net.URLClassLoader.defineClass Ljava/lang/String;Lsun/misc/Resource; Ljava/lang/Class; URLClassLoader.java:251 at java.net.URLClassLoader.access$100 Ljava/net/URLClassLoader;Ljava/lang/String;Lsun/misc/Resource; Ljava/lang/Class; URLClassLoader.java:55 at java.net.URLClassLoader$1.run Ljava/lang/Object; URLClassLoader.java:194 at jrockit.vm.AccessController.do_privileged_exc Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;I Ljava/lang/Object; Unknown Source at jrockit.vm.AccessController.doPrivileged Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext; Ljava/lang/Object; Unknown Source at java.net.URLClassLoader.findClass Ljava/lang/String; Ljava/lang/Class; URLClassLoader.java:187 at java.lang.ClassLoader.loadClass Ljava/lang/String;Z Ljava/lang/Class; Unknown Source at sun.misc.Launcher$AppClassLoader.loadClass Ljava/lang/String;Z Ljava/lang/Class; Launcher.java:274 at java.lang.ClassLoader.loadClass Ljava/lang/String; Ljava/lang/Class; Unknown Source at java.lang.ClassLoader.loadClassFromNative II Ljava/lang/Class; Unknown Source at jrockit.vm.RNI.getRunnableCode I I Unknown Source at jrockit.vm.RNI.trampoline V Unknown Source at org.aspectj.bridge.MessageUtil.info Ljava/lang/String; Lorg/aspectj/bridge/IMessage; MessageUtil.java:??? at org.aspectj.bridge.MessageUtil.info Lorg/aspectj/bridge/IMessageHandler;Ljava/lang/String; Z MessageUtil.java:98 at org.aspectj.weaver.tools.WeavingAdaptor.info Ljava/lang/String; Z WeavingAdaptor.java:343 java.lang.IllegalArgumentException: null kind at org.aspectj.bridge.Message.&amp;lt;init&amp;gt; Ljava/lang/String;Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Lorg/aspectj/bridge/ISourceLocation;Ljava/lang/Throwable;[Lorg/aspectj/bridge/ISourceLocation;ZIII V Message.java:89 at org.aspectj.bridge.Message.&amp;lt;init&amp;gt; Ljava/lang/String;Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Lorg/aspectj/bridge/ISourceLocation;Ljava/lang/Throwable;[Lorg/aspectj/bridge/ISourceLocation; V Message.java:67 at org.aspectj.bridge.Message.&amp;lt;init&amp;gt; Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Ljava/lang/Throwable;Lorg/aspectj/bridge/ISourceLocation; V Message.java:110 at org.aspectj.bridge.MessageUtil.info Ljava/lang/String; Lorg/aspectj/bridge/IMessage; MessageUtil.java:211 at org.aspectj.bridge.MessageUtil.info Lorg/aspectj/bridge/IMessageHandler;Ljava/lang/String; Z MessageUtil.java:98 at org.aspectj.weaver.tools.WeavingAdaptor.info Ljava/lang/String; Z WeavingAdaptor.java:343 at org.aspectj.weaver.tools.WeavingAdaptor.createMessageHandler V WeavingAdaptor.java:168 at org.aspectj.weaver.tools.WeavingAdaptor.&amp;lt;init&amp;gt; V WeavingAdaptor.java:80 at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.&amp;lt;init&amp;gt; Ljava/lang/ClassLoader;Lorg/aspectj/weaver/loadtime/IWeavingContext; V ClassLoaderWeavingAdaptor.java:70 at org.aspectj.weaver.loadtime.Aj$WeaverContainer.getWeaver Ljava/lang/ClassLoader;Lorg/aspectj/weaver/loadtime/IWeavingContext; Lorg/aspectj/weaver/tools/WeavingAdaptor; Aj.java:94 at org.aspectj.weaver.loadtime.Aj.preProcess Ljava/lang/String;[BLjava/lang/ClassLoader; [B Aj.java:61 at org.aspectj.weaver.loadtime.JRockitAgent.preProcess Ljava/lang/ClassLoader;Ljava/lang/String;[B [B JRockitAgent.java:74 at jrockit.vm.ClassPreProcessorManager.notifyClassPreProcessor ILjava/lang/String;[B [B Unknown Source at jrockit.vm.Classes.defineClass0 ILjava/lang/String;[BII I Unknown Source at jrockit.vm.Classes.defineClass Ljava/lang/ClassLoader;Ljava/lang/String;[BII Ljava/lang/Class; Unknown Source at java.lang.ClassLoader.defineClass Ljava/lang/String;[BIILjava/security/ProtectionDomain; Ljava/lang/Class; Unknown Source at java.security.SecureClassLoader.defineClass Ljava/lang/String;[BIILjava/security/CodeSource; Ljava/lang/Class; SecureClassLoader.java:123 at java.net.URLClassLoader.defineClass Ljava/lang/String;Lsun/misc/Resource; Ljava/lang/Class; URLClassLoader.java:251 at java.net.URLClassLoader.access$100 Ljava/net/URLClassLoader;Ljava/lang/String;Lsun/misc/Resource; Ljava/lang/Class; URLClassLoader.java:55 at java.net.URLClassLoader$1.run Ljava/lang/Object; URLClassLoader.java:194 at jrockit.vm.AccessController.do_privileged_exc Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;I Ljava/lang/Object; Unknown Source at jrockit.vm.AccessController.doPrivileged Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext; Ljava/lang/Object; Unknown Source at java.net.URLClassLoader.findClass Ljava/lang/String; Ljava/lang/Class; URLClassLoader.java:187 at java.lang.ClassLoader.loadClass Ljava/lang/String;Z Ljava/lang/Class; Unknown Source at sun.misc.Launcher$AppClassLoader.loadClass Ljava/lang/String;Z Ljava/lang/Class; Launcher.java:274 at java.lang.ClassLoader.loadClass Ljava/lang/String; Ljava/lang/Class; Unknown Source at java.lang.ClassLoader.loadClassFromNative II Ljava/lang/Class; Unknown Source at jrockit.vm.RNI.getRunnableCode I I Unknown Source at jrockit.vm.RNI.trampoline V Unknown Source at org.aspectj.bridge.MessageUtil.info Lorg/aspectj/bridge/IMessageHandler;Ljava/lang/String; Z MessageUtil.java:??? at org.aspectj.weaver.tools.WeavingAdaptor.info Ljava/lang/String; Z WeavingAdaptor.java:343 at org.aspectj.weaver.tools.WeavingAdaptor.createMessageHandler V WeavingAdaptor.java:168</description>
    <commit commitTime="2006-06-09 10:56:50" id="75afb31e38f75e61de5c15058d3332f3dac0df15"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/JRockitAgent.java</file>
      <file>loadtime/testsrc/LoadtimeModuleTests.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Aj.java</file>
    </fixedFiles>
  </bug>
  <bug id="122728" reportTime="2006-01-05 03:21:00">
    <summary>ajdoc crashes</summary>
    <description>When trying to run ajdoc on a moderate size code base 266 classes / interfaces / aspects , ajdoc crashes. Here's what happens: D:\work\napa\jnapa\core&amp;gt;ajdoc -source 1.5 -classpath D:\work\napa\jnapa\core\lib\aspectjrt.jar;D:\work\napa\jnapa\core\l ib\dom4j-1.5.2.jar;D:\work\napa\jnapa\core\lib\groovy-all-1.0-jsr-03.jar -d D:\work\napa\jnapa\core\build\doc\internal - author -package -argfile D:\work\napa\jnapa\core\jnapafilelist34352.lst &amp;gt; Calling ajc... D:\work\napa\jnapa\commons\utils\src\fi\napa\util\aspects\CachingAspect.aj:72 [warning] advice defined in fi.napa.util.a spects.CachingAspect has not been applied [Xlint:adviceDidNotMatch] 1 warning &amp;gt; Building signature files... An internal error occured in ajdoc Please copy the following text into an email message and send it, along with any additional information you can add to: aspectj-dev@eclipse.org java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 at java.util.ArrayList.RangeCheck ArrayList.java:546 at java.util.ArrayList.get ArrayList.java:321 at org.aspectj.tools.ajdoc.StubFileGenerator.processMembers StubFileGenerator.java:124 at org.aspectj.tools.ajdoc.StubFileGenerator.processTypeDeclaration StubFileGenerator.java:99 at org.aspectj.tools.ajdoc.StubFileGenerator.processMembers StubFileGenerator.java:113 at org.aspectj.tools.ajdoc.StubFileGenerator.processTypeDeclaration StubFileGenerator.java:99 at org.aspectj.tools.ajdoc.StubFileGenerator.processFile StubFileGenerator.java:61 at org.aspectj.tools.ajdoc.StubFileGenerator.doFiles StubFileGenerator.java:38 at org.aspectj.tools.ajdoc.Main.main Main.java:157 The file jnapafilelist34352.lst contains only file entries w/ absolute paths, e.g. D:\work\napa\jnapa\core\src\fi\napa\core\tableprocessing\transfer\mapping\Transformation.java I am using ajc and ajdoc 1.5.0 release version. I'll be happy to provide any other information that may help in solving this issue. D:\work\napa\jnapa\core&amp;gt;ajdoc -v ajdoc version 1.5.0 D:\work\napa\jnapa\core&amp;gt;ajc -v AspectJ Compiler 1.5.0 built on Tuesday Dec 20, 2005 at 12:05:54 GMT</description>
    <commit commitTime="2006-01-09 13:31:55" id="d69ce9aebb3ed4410f07e9992105748b69a0ff5e"/>
    <fixedFiles>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/AjdocTests.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java</file>
    </fixedFiles>
  </bug>
  <bug id="122742" reportTime="2006-01-05 06:31:00">
    <summary>[@AspectJ] VerifyError with @AfterThrowing/@AfterReturning and extra JoinPoint argument</summary>
    <description>If an @AspectJ aspect advises itself using after throwing advice that itself throws an exception running the resulting program causes a VerifyError: java.lang.VerifyError: class: A, method: stop signature: V catch_type not a subclass of Throwable at java.lang.Class.getDeclaredMethods0 Native Method at java.lang.Class.privateGetDeclaredMethods Class.java:2365 at java.lang.Class.getMethod0 Class.java:2611 at java.lang.Class.getMethod Class.java:1579 at org.aspectj.tools.ajc.AjcTestCase.run AjcTestCase.java:608 at org.aspectj.testing.RunSpec.execute RunSpec.java:56 at org.aspectj.testing.AjcTest.runTest AjcTest.java:68 at org.aspectj.testing.XMLBasedAjcTestCase.runTest XMLBasedAjcTestCase.java:111 at org.aspectj.systemtest.ajc150.Ajc150Tests.testError Ajc150Tests.java:877 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:585 at junit.framework.TestCase.runTest TestCase.java:154 at junit.framework.TestCase.runBare TestCase.java:127 at junit.framework.TestResult$1.protect TestResult.java:106 at junit.framework.TestResult.runProtected TestResult.java:124 at junit.framework.TestResult.run TestResult.java:109 at junit.framework.TestCase.run TestCase.java:118 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests RemoteTestRunner.java:478 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run RemoteTestRunner.java:344 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main RemoteTestRunner.java:196</description>
    <commit commitTime="2006-02-21 16:13:44" id="3fa1bddb79a5e20a38cb39555e932df46f3d4dfa"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/Advice.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="123212" reportTime="2006-01-10 04:12:00">
    <summary>Skip subversion resources when copying files from input to output folders</summary>
    <description>Exception when compile a project under svn. java.io.FileNotFoundException at java.io.FileOutputStream.open Native Method at java.io.FileOutputStream.&amp;lt;init&amp;gt; FileOutputStream.java:179 at java.io.FileOutputStream.&amp;lt;init&amp;gt; FileOutputStream.java:131 at org.aspectj.util.FileUtil.makeOutputStream FileUtil.java:1258 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.writeResource AjBuildManager.java:466 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesFromFile AjBuildManager.java:444 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesToDestination AjBuildManager.java:386 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:298 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:185 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:163 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 FileNotFoundException thrown: /home/chomats/Fede/svn/fede-repos/Tool.Product.ProductServer/classes/.svn/format Permission non accordée</description>
    <commit commitTime="2006-02-10 07:55:32" id="d856e4fedb65e12104851967690ef751b2c7b09b"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="123423" reportTime="2006-01-11 09:08:00">
    <summary>RFE: Expose withinType for pertypewithin aspects</summary>
    <description>Per type within aspects have a generated field ajc$withinType. Almost any time I ever use one of them, I'd like to access this field. Sometimes, e.g., for deferred initialization, I have to create a duplicate field that initializes this as such: private Class managedClass; after returning: staticinitialization * { managedClass = thisJoinPointStaticPart.getSignature .getDeclaringType ; ... It would be nice if there were a method with the signature Class getWithinType defined on any pertypewithin aspect.</description>
    <commit commitTime="2006-01-30 10:22:10" id="2b5329c2a672ff32f8c941f0c56e475ea58ce5f3"/>
    <fixedFiles>
      <file>tests/bugs151/pr125475/TestEmptyPointcutAtAspect.java</file>
    </fixedFiles>
  </bug>
  <bug id="123553" reportTime="2006-01-12 00:56:00">
    <summary>Can't use named pointcut in advice decl. in generic aspect</summary>
    <description>When defining a generic aspect with a paramterized PC, using that PC in an advice declaration causes an 'incompatible type' error. Example: public abstract aspect GenericAspect&amp;lt;Par1&amp;gt; { abstract pointcut checkpoint Par1 par1 ; // advice declaration causes error after Par1 par1 : checkpoint par1 {// do something} } Using 1.3.0.20051220093604 and AspectJ 1.5.0, the compiler complains: "incompatible type, expected java.lang.Object found BindingTypePattern TPar1;, 0 . Check the type specified in your pointcut" Since it is possible to paramterize a named PC in subaspects: public abstract aspect GenericAspect&amp;lt;Par1&amp;gt; { abstract pointcut checkpoint Par1 par1 ; } public aspect SubAspect1 extends GenericAspect&amp;lt;Main&amp;gt;{ pointcut checkpoint Main main : call void Main.test &amp;amp;&amp;amp; target main ; after Main main : checkpoint main { System.out.println "Caught by 1." ; } } public aspect SubAspect2 extends GenericAspect&amp;lt;Main2&amp;gt;{ pointcut checkpoint Main2 main : call void Main2.test &amp;amp;&amp;amp; target main ; after Main2 main : checkpoint main { System.out.println "Caught by 2." ; } } ... and since it is possible to use generic PC utilizing unnamed PCs in a generic aspect: public abstract aspect GenericAspect&amp;lt;Par1&amp;gt; { // works after Par1 par1 : call void Par1.test &amp;amp;&amp;amp; target par1 {// something } } ... it seems that this is a bug.</description>
    <commit commitTime="2006-02-17 19:41:52" id="1f1ace1f842758b1235bd471d66715238a653ae2"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="123612" reportTime="2006-01-12 11:08:00">
    <summary>ArrayIndexOutOfBoundsException with incremental and declare @type</summary>
    <description>Given the following code: ------------------------------------------------- public aspect A { declare @type : C : @MyAnnotation; } @interface MyAnnotation { } class C { } ------------------------------------------------- if you comment out the declare @type statement and do an incremental build, then the following ArrayIndexOutOfBoundsException occurs: java.lang.ArrayIndexOutOfBoundsException: 0 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareAnnotations AjLookupEnvironment.java:754 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:571 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveIntertypes AjLookupEnvironment.java:357 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:209 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:301 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:315 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:811 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:254 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:163 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 This is against the latest code in HEAD.</description>
    <commit commitTime="2006-01-17 15:32:20" id="ab2f89bd7314680eda5ff5efeb7e97409ff878d1"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
      <file>weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java</file>
    </fixedFiles>
  </bug>
  <bug id="123901" reportTime="2006-01-15 08:39:00">
    <summary>NPE in AccessForInlineVisitor.endVisit AccessForInlineVisitor.java:105</summary>
    <description>java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.ast.AccessForInlineVisitor.endVisit AccessForInlineVisitor.java:105 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference.traverse QualifiedNameReference.java Compiled Code at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse MessageSend.java Compiled Code at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse MessageSend.java Compiled Code at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse MethodDeclaration.java Compiled Code at org.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration.resolveStatements AdviceDeclaration.java:172 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve AbstractMethodDeclaration.java Compiled Code at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java Compiled Code at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.resolve AspectDeclaration.java:115 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java Inlined Compiled Code at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve CompilationUnitDeclaration.java Compiled Code at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:514 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java Compiled Code at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:230 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:185 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:163 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 NullPointerException thrown: null</description>
    <commit commitTime="2006-01-29 10:12:10" id="693945fed3ea7482c5c312063dfac881f0d0d1c9"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="124399" reportTime="2006-01-18 16:59:00">
    <summary>AJDT AspectJ Internal Compiler Error</summary>
    <description>In Eclipse 3.1.1 with AJDT 1.3 the December 20th 2005 release I got this message in an error dialog: org.aspectj.weaver.BCException at org.aspectj.weaver.bcel.LazyClassGen.getLazyMethodGen LazyClassGen.java:1216 at org.aspectj.weaver.bcel.LazyClassGen.getLazyMethodGen LazyClassGen.java:1201 at org.aspectj.weaver.bcel.BcelShadow.weaveAroundInline BcelShadow.java:2048 at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:232 at org.aspectj.weaver.Shadow.implementMungers Shadow.java:588 at org.aspectj.weaver.Shadow.implement Shadow.java:405 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:2146 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:467 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:102 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1543 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1494 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1275 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1097 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:300 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:178 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:811 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:254 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:163 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 trouble in: public class edu.ucsd.aosd.MyApplication extends java.lang.Object: public void &amp;lt;init&amp;gt; : ALOAD_0 // edu.ucsd.aosd.MyApplication this line 5 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V constructor-execution void edu.ucsd.aosd.MyApplication.&amp;lt;init&amp;gt; | RETURN constructor-execution void edu.ucsd.aosd.MyApplication.&amp;lt;init&amp;gt; end public void &amp;lt;init&amp;gt; public static void main String[] org.aspectj.weaver.MethodDeclarationLineNumber: 8:124 : method-execution void edu.ucsd.aosd.MyApplication.main java.lang.String[] | ALOAD_0 // java.lang.String[] args line 9 | ASTORE 4 | ICONST_0 | ISTORE_2 | ALOAD 4 | ARRAYLENGTH | ISTORE_3 | GOTO L1 | L0: ALOAD 4 | ILOAD_2 | AALOAD | ASTORE_1 | GETSTATIC java.lang.System.out Ljava/io/PrintStream; line 10 | NEW java.lang.StringBuilder | DUP | LDC "got: " | INVOKESPECIAL java.lang.StringBuilder.&amp;lt;init&amp;gt; Ljava/lang/String; V | ALOAD_1 // java.lang.String arg | method-call java.lang.StringBuilder java.lang.StringBuilder.append java.lang.String | | INVOKEVIRTUAL java.lang.StringBuilder.append Ljava/lang/String; Ljava/lang/StringBuilder; | method-call java.lang.StringBuilder java.lang.StringBuilder.append java.lang.String | method-call java.lang.String java.lang.StringBuilder.toString | | INVOKEVIRTUAL java.lang.StringBuilder.toString Ljava/lang/String; | method-call java.lang.String java.lang.StringBuilder.toString | ASTORE 5 | ASTORE 6 | method-call void java.io.PrintStream.println java.lang.String | | ALOAD 6 | | ALOAD 5 | | INVOKEVIRTUAL java.io.PrintStream.println Ljava/lang/String; V | method-call void java.io.PrintStream.println java.lang.String | GETSTATIC java.lang.System.out Ljava/io/PrintStream; line 11 | LDC "got: %s\n" | ICONST_1 | ANEWARRAY java.lang.Object | DUP | ICONST_0 | ALOAD_1 // java.lang.String arg | AASTORE | method-call java.io.PrintStream java.io.PrintStream.printf java.lang.String, java.lang.Object[] | | INVOKEVIRTUAL java.io.PrintStream.printf Ljava/lang/String;[Ljava/lang/Object; Ljava/io/PrintStream; | method-call java.io.PrintStream java.io.PrintStream.printf java.lang.String, java.lang.Object[] | POP | IINC 2 1 line 9 | L1: ILOAD_2 | ILOAD_3 | IF_ICMPLT L0 | RETURN line 13 method-execution void edu.ucsd.aosd.MyApplication.main java.lang.String[] end public static void main String[] end public class edu.ucsd.aosd.MyApplication when implementing on shadow method-call void java.io.PrintStream.println java.lang.String when weaving type edu.ucsd.aosd.MyApplication when weaving classes when weaving when incrementally building BuildConfig[C:\EclipseWorkspace\.metadata\.plugins\org.eclipse.ajdt.core\AspectJSemanticsTest.generated.lst] #Files=2 It occured when I editing this file, in an AspectJ project with an recently renamed .aj extension: package edu.ucsd.aosd; import java.io.PrintStream; public class MyApplication { // main public static void main String[] args { for String arg : args { System.out.println "got: " + arg ; System.out.printf "got: %s\n", arg ; } } } aspect Printing { pointcut printlnCalls PrintStream ps, String out : call * PrintStream+.println String &amp;amp;&amp;amp; target ps &amp;amp;&amp;amp; args out ; Object around PrintStream ps, String out : printlnCalls ps, out &amp;amp;&amp;amp; !adviceexecution { return proceed ps, out ; } pointcut printfCalls PrintStream ps, String fmt, Object[] objs : call * PrintStream+.printf String, Object...##### &amp;amp;&amp;amp; target ps &amp;amp;&amp;amp; args fmt, objs ; } Where "#####" is where my cursor was when I saved. My previously saved version didn't have the printfCalls pointcut nor the call to printf in the main. Thus, you might want to try the println version first, save it, and then make the new additions. Though, I hope the debug information is enough.</description>
    <commit commitTime="2006-01-24 09:59:17" id="d916002f3d0ba392915ec323ff7ae189a5bdb474"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="124654" reportTime="2006-01-20 10:32:00">
    <summary>Capture method annotation in generic aspect does not compile</summary>
    <description>The following aspect won't compile with aspect 1.5: package aj; import java.lang.annotation.Annotation; public abstract aspect GenericAnnotation&amp;lt;A extends Annotation&amp;gt; { pointcut annotatedCall A a : call @A * *.* .. &amp;amp;&amp;amp; @annotation a ; /* does not compile */ before A a : annotatedCall a { System.out.println a.annotationType ; } /* */ /* OK */ before A a : call @A * *.* .. &amp;amp;&amp;amp; @annotation a { System.out.println a.annotationType ; } } ---------------------- &amp;gt;ajc -1.5 -d aj src\aj\* ...\src\aj\GenericAnnotation.aj:10 [error] incompatible type, expected java.lang.annotation.Annotation found BindingTypePattern TA;, 0 . Check the type specified in your pointcut before A a : annotatedCall a { 1 error ---------------- Commenting out the first advice lets this program run as expected: package aj; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; public class Main { @Retention RetentionPolicy.RUNTIME @interface MyAnnotation { } static aspect ConcreteAnnotation extends GenericAnnotation&amp;lt;MyAnnotation&amp;gt; { } public static void main String[] args { someMethod ; } @MyAnnotation private static void someMethod { } }</description>
    <commit commitTime="2006-01-23 15:21:18" id="28f8c695ccc8513e9dcbe0c4fb6ebdc71cf84313"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="124803" reportTime="2006-01-22 09:50:00">
    <summary>[generics] mixing and matching numbers of type variables/parameters in a hierarchy</summary>
    <description>Hi guys! I didn't talk to you for a while, but I've found several new issues related to generics. Here is the first and the most annoying one: 1 Just compile the testcase with iajc and you will get "java.lang.IllegalStateException: Wrong number of type parameters supplied" Java Code: ========= public interface Generic1&amp;lt;T extends Number&amp;gt; { public void foo T p ; } public interface Generic2&amp;lt;T extends Number, Y extends Number&amp;gt; extends Generic1&amp;lt;T&amp;gt; { public void foo2 Y p ; } public class Test&amp;lt;Y extends Number&amp;gt; implements Generic2&amp;lt;Y,Y&amp;gt;{ public void foo2 Y p { } public void foo Y p { } } Aspect: ======= public privileged aspect TestAspect { pointcut TestInheritance Test test : target test &amp;amp;&amp;amp; execution * com.mprv.secsph.Generic1.* .. ; after Test test : TestInheritance test { System.out.println "GO Aspects!" ; } } Exception: ========== iajc abort trouble in: public class com.mprv.secsph.Test extends java.lang.Object implements com.mprv.secsph.Generic2: public void &amp;lt;init&amp;gt; : ALOAD_0 // com.mprv.secsph.Test this line 10 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V constructor-execution void com.mprv.secsph.Test.&amp;lt;init&amp;gt; | RETURN constructor-execution void com.mprv.secsph.Test.&amp;lt;init&amp;gt; end public void &amp;lt;init&amp;gt; public void foo2 Number org.aspectj.weaver.MethodDeclarationLineNumber: 11:259 : RETURN line 12 end public void foo2 Number public void foo Number org.aspectj.weaver.MethodDeclarationLineNumber: 13:287 : RETURN line 14 end public void foo Number end public class com.mprv.secsph.Test -- IllegalStateException Wrong number of type parameters supplied Wrong number of type parameters supplied java.lang.IllegalStateException: Wrong number of type parameters supplied at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith ResolvedMemberImpl.java:609 at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith ResolvedMemberImpl.java:590 at org.aspectj.weaver.ReferenceType.getDeclaredMethods ReferenceType.java:472 at org.aspectj.weaver.ResolvedType.addAndRecurse ResolvedType.java:262 at org.aspectj.weaver.ResolvedType.addAndRecurse ResolvedType.java:301 at org.aspectj.weaver.ResolvedType.getMethodsWithoutIterator ResolvedType.java:257 at org.aspectj.weaver.ResolvedType.lookupResolvedMember ResolvedType.java:375 at org.aspectj.weaver.JoinPointSignatureIterator.findSignaturesFromSupertypes JoinPointSignatureIterator.java:177 at org.aspectj.weaver.JoinPointSignatureIterator.hasNext JoinPointSignatureIterator.java:68 at org.aspectj.weaver.patterns.SignaturePattern.matches SignaturePattern.java:286 at org.aspectj.weaver.patterns.KindedPointcut.matchInternal KindedPointcut.java:106 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:145 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:55 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:145 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:55 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:145 at org.aspectj.weaver.ShadowMunger.match ShadowMunger.java:64 at org.aspectj.weaver.Advice.match Advice.java:109 at org.aspectj.weaver.bcel.BcelAdvice.match BcelAdvice.java:104 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2149 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:1716 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:458 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:105 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1543 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1494 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1275 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1097 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:300 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:178 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:819 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:234 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:157 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:326 at org.aspectj.tools.ajc.Main.runMain Main.java:240 at org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM AjcTask.java:1254 at org.aspectj.tools.ant.taskdefs.AjcTask.execute AjcTask.java:1048 at org.apache.tools.ant.UnknownElement.execute UnknownElement.java:275 at org.apache.tools.ant.Task.perform Task.java:364 at org.apache.tools.ant.Target.execute Target.java:341 at org.apache.tools.ant.Target.performTasks Target.java:369 at org.apache.tools.ant.Project.executeSortedTargets Project.java:1216 at org.apache.tools.ant.Project.executeTarget Project.java:1185 at org.apache.tools.ant.helper.DefaultExecutor.executeTargets DefaultExecutor.java:40 at org.apache.tools.ant.Project.executeTargets Project.java:1068 at org.apache.tools.ant.Main.runBuild Main.java:668 at org.apache.tools.ant.Main.startAnt Main.java:187 at org.apache.tools.ant.launch.Launcher.run Launcher.java:246 at org.apache.tools.ant.launch.Launcher.main Launcher.java:67 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:585 at com.intellij.rt.ant.execution.AntMain2.main AntMain2.java:16 warning at after Test test : TestInheritance test { ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ /root/IdeaProjects/aspectsTest/src/com/mprv/secsph/TestAspect.aj:44:0::0 advice defined in com.mprv.secsph.TestAspect has not been applied [Xlint:adviceDidNotMatch]</description>
    <commit commitTime="2006-01-23 10:47:29" id="8676df9bca4e5e169206f314c8ad5d3da38bc28e"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/ReferenceType.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="124808" reportTime="2006-01-22 11:12:00">
    <summary>[generics] detecting field-get of field of parameterized type.</summary>
    <description>Hi, Here is the second generics issue: Java code: ========== public class Test&amp;lt;T extends Integer&amp;gt; { Set&amp;lt;T&amp;gt; ints = new HashSet&amp;lt;T&amp;gt; ; public Set&amp;lt;T&amp;gt; foo { return ints; } public static void main String[] args { Test&amp;lt;Integer&amp;gt; t = new Test&amp;lt;Integer&amp;gt; ; Set&amp;lt;Integer&amp;gt; ints = t.foo ; } } Aspect: ======= public privileged aspect TestAspect { pointcut gettingMemberCollection Test t : target t &amp;amp;&amp;amp; get !public Set&amp;lt;Number+&amp;gt; com.mprv.secsph.*.* &amp;amp;&amp;amp; !within TestAspect ; after Test test : gettingMemberCollection test { System.out.println "GO Aspects!" ; } } Compiler output: ================ warning at after Test test : gettingMemberCollection test { ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ /root/IdeaProjects/aspectsTest/src/com/mprv/secsph/TestAspect.aj:19:0::0 advice defined in com.mprv.secsph.TestAspect has not been applied [Xlint:adviceDidNotMatch] I would expect "gettingMemberCollection" to catch access to "ints" member of "Test" ... Thanks a lot! Misha.</description>
    <commit commitTime="2006-01-23 14:25:06" id="01a8b2eb36e1a34c80697c2034f9657b74dc281a"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/TypePattern.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java</file>
    </fixedFiles>
  </bug>
  <bug id="124999" reportTime="2006-01-24 08:41:00">
    <summary>[generics] Incorrect call to generic inherited method in around advice</summary>
    <description>The following case produces a runtime error: package aj; public abstract aspect GenericInheritedMethod&amp;lt;T&amp;gt; { protected final T getSomething { return null; } } package aj; aspect UseInheritedMethod extends GenericInheritedMethod&amp;lt;Integer&amp;gt; { // works as expected before : execution void someMethod { System.out.println getSomething ; } // Runtime Error void around : execution void someMethod { System.out.println getSomething ; } public static void main String[] args { someMethod ; } private static void someMethod { } } &amp;gt;java aj.UseInheritedMethod null Exception in thread "main" java.lang.NoSuchMethodError: aj.UseInheritedMethod.getSomething Ljava/lang/Integer; at aj.UseInheritedMethod.ajc$inlineAccessMethod$aj_UseInheritedMethod$aj_UseInheritedMethod$getSomething UseInheritedMethod.aj at aj.UseInheritedMethod.ajc$around$aj_UseInheritedMethod$2$c74e36b7 UseInheritedMethod.aj:12 at aj.UseInheritedMethod.someMethod UseInheritedMethod.aj:1 at aj.UseInheritedMethod.main UseInheritedMethod.aj:16 The "inlineAccessMethod" should call "getSomething Ljava/lang/Object;" as the before advice does.</description>
    <commit commitTime="2006-01-24 16:47:42" id="a4bd19d25597a31e1b76cc5fc188c3112bf0f5ff"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="125027" reportTime="2006-01-24 12:10:00">
    <summary>declare errors and warnings do not have their end position set correctly</summary>
    <description>Declare error and declare warning statements do not have their end positions set correctly by the PatternParser. All other declare statements do. This was found whilst working on bug 110465 the AST work when I need to set the source range for the different ast nodes and setting this for the declare warning and declare error threw an exception because the start value &amp;gt; 0 and the end value == 0.</description>
    <commit commitTime="2006-01-25 11:28:51" id="99eb7f8654eef884dfb204f8fdc0ea00fe849cec"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/patterns/DeclareErrorOrWarningTestCase.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PatternParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="125080" reportTime="2006-01-24 17:14:00">
    <summary>[generics] Problem with abstract, generic aspects and "extends"</summary>
    <description>The following code causes AJC to throw an ArrayOutOfBoundsException: &amp;gt; public interface AspectInterface&amp;lt;T, S extends Number&amp;gt; { } &amp;gt; &amp;gt; public abstract aspect AbstractAspect&amp;lt;T&amp;gt; &amp;gt; implements AspectInterface&amp;lt;T, Integer&amp;gt; {} &amp;gt; &amp;gt; public aspect ConcreteAspect extends AbstractAspect&amp;lt;Student&amp;gt; { } as ususal, details of Student do not matter . I will attach a complete code example and the full error report is given below. Cheers, David J. Pearce === BEGIN ERROR REPORT === ajc -1.5 AspectInterface.java Student.java ConcreteAspect.aj AbstractAspect.aj /am/state-opera/home/djp/projects/RelationsForJava/test/example/AbstractAspect.aj [error] Internal compiler error java.lang.ArrayIndexOutOfBoundsException: 1 at org.aspectj.weaver.ResolvedType.getMemberParameterizationMap ResolvedType.java:691 at org.aspectj.weaver.ResolvedType.getAjMemberParameterizationMap ResolvedType.java:2065 at org.aspectj.weaver.ReferenceType.getDeclares ReferenceType.java:575 at org.aspectj.weaver.ResolvedType.collectDeclares ResolvedType.java:539 at org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers ResolvedType.java:504 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect CrosscuttingMembersSet.java:61 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addCrosscuttingStructures AjLookupEnvironment.java:391 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.collectAllITDsAndDeclares AjLookupEnvironment.java:327 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:168 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:301 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:315 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:819 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:234 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:157 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:326 at org.aspectj.tools.ajc.Main.runMain Main.java:240 at org.aspectj.tools.ajc.Main.main Main.java:83 no source information available ABORT Exception thrown from AspectJ DEVELOPMENT This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. 1 when collecting itds and declares ConcreteAspect when completing type bindings when batch building with classpath: /usr/pkg/java/sun-1.5/lib/ext/sunjce_provider.jar:/usr/pkg/java/sun-1.5/lib/ext/sunpkcs11.jar:/usr/pkg/java/sun-1.5/lib/ext/dnsns.jar:/usr/pkg/java/sun-1.5/lib/ext/localedata.jar:/usr/pkg/java/sun-1.5/lib/tools.jar:.:/u/staff/djp/src/mocha/mocha.zip:/u/staff/djp/pkg/aspectj1.5-DEVEL250106/lib/aspectjrt.jar:/mnt/scratch/djp/specjvm98:/u/staff/djp/teaching/comp463/soot/sootclasses-2.2.1.jar:/u/staff/djp/teaching/comp463/soot/polyglotclasses-1.3.jar:/u/staff/djp/pkg/antlr/antlr-2.7.5.jar: 1 java.lang.ArrayIndexOutOfBoundsException: 1 at org.aspectj.weaver.ResolvedType.getMemberParameterizationMap ResolvedType.java:691 at org.aspectj.weaver.ResolvedType.getAjMemberParameterizationMap ResolvedType.java:2065 at org.aspectj.weaver.ReferenceType.getDeclares ReferenceType.java:575 at org.aspectj.weaver.ResolvedType.collectDeclares ResolvedType.java:539 at org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers ResolvedType.java:504 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect CrosscuttingMembersSet.java:61 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addCrosscuttingStructures AjLookupEnvironment.java:391 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.collectAllITDsAndDeclares AjLookupEnvironment.java:327 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:168 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:301 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:315 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:819 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:234 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:157 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:326 at org.aspectj.tools.ajc.Main.runMain Main.java:240 at org.aspectj.tools.ajc.Main.main Main.java:83 1 fail|abort, 1 error gmake: *** [all] Error 255 === END ===</description>
    <commit commitTime="2006-01-25 10:32:05" id="8ce00642b4c8b1bb0233125e64f798283ebb3e90"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/ReferenceType.java</file>
    </fixedFiles>
  </bug>
  <bug id="125101" reportTime="2006-01-24 19:40:00">
    <summary>StackOverFlow in ReferenceType.isAssignableFrom</summary>
    <description>Hi. I am weaving two aspects into a jar file "jar-to-jar". ajc 1.5.0 gives me a huge error message see attachement . Would be great if I could get any recommendations on this. Thanks! Eric</description>
    <commit commitTime="2006-01-25 17:41:21" id="efb20c5a3eeecb85c059110b3494f7b39593ab28"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
    </fixedFiles>
  </bug>
  <bug id="125295" reportTime="2006-01-26 04:12:00">
    <summary>None</summary>
    <description>The fix for bug 58520 has caused two AJDT marker tests to fail. The reason for the failures is that the test is checking that the markers have a specific message i.e. advises Demo.foo int, Object runtime test . However, due to the fix for bug 58520 , the message is now saying advises Demo.foo int, java.lang.Object runtime test . Since everything in AJDT works of the same model, the xref view is also showing the fully qualified arguments. However, this is inconsistent with the Outline view. The fix is along the lines of adding the capability to choose whether you want the fully qualified name or not.</description>
    <commit commitTime="2006-01-26 15:32:48" id="7e40a6094541d2191f09d810b3330c4858ed8952"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/IProgramElement.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
      <file>asm/src/org/aspectj/asm/internal/ProgramElement.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java</file>
    </fixedFiles>
  </bug>
  <bug id="125475" reportTime="2006-01-27 09:38:00">
    <summary>[@AspectJ] ajc cannot compile empty @Pointcut</summary>
    <description>I get this error: C:\temp\ajcSandbox\ajcTest27856.tmp\TestEmptyPointcutAtAspect.java:8:0::0 Method annotated with @Pointcut for abstract pointcut must be abstract when compiling this aspect with ajc it's fine with javac : @Aspect public class TestEmptyPointcutAtAspect { @Pointcut "" protected void scope {} }</description>
    <commit commitTime="2006-01-29 10:12:10" id="693945fed3ea7482c5c312063dfac881f0d0d1c9"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="125480" reportTime="2006-01-27 09:48:00">
    <summary>[ltw] aop.xml aspect generator treats abstract methods as pointcuts</summary>
    <description>An aop.xml aspect cannot inherit an abstract method but it should inherit one that has already been made concrete in a super-aspect. At the moment an abstract method "test " causes the follow error during LTW: info AspectJ Weaver Version DEVELOPMENT built on info register classloader org.aspectj.weaver.loadtime.WeavingURLClassLoader info using /C:/temp/ajcSandbox/ajcTest6462.tmp/META-INF/aop.xml error Abstract pointcut 'test' not configured: &amp;lt;concrete-aspect name='TraceHelloWorld' extends='ConcreteMethods'/&amp;gt; in aop.xml warning register definition failed -- AbortException Abstract pointcut 'test' not configured: &amp;lt;concrete-aspect name='TraceHelloWorld' extends='ConcreteMethods'/&amp;gt; in aop.xml Abstract pointcut 'test' not configured: &amp;lt;concrete-aspect name='TraceHelloWorld' extends='ConcreteMethods'/&amp;gt; in aop.xml Message: error Abstract pointcut 'test' not configured: &amp;lt;concrete-aspect name='TraceHelloWorld' extends='ConcreteMethods'/&amp;gt; in aop.xml org.aspectj.bridge.AbortException: Abstract pointcut 'test' not configured: &amp;lt;concrete-aspect name='TraceHelloWorld' extends='ConcreteMethods'/&amp;gt; in aop.xml</description>
    <commit commitTime="2006-01-30 10:22:10" id="2b5329c2a672ff32f8c941f0c56e475ea58ce5f3"/>
    <fixedFiles>
      <file>tests/bugs151/pr125475/TestEmptyPointcutAtAspect.java</file>
    </fixedFiles>
  </bug>
  <bug id="125699" reportTime="2006-01-30 09:54:00">
    <summary>[@AspectJ]@Aspect cannot inherit advice using this PCD and thisJoinPoint</summary>
    <description>Inherting the following advice in an @aspect causes an unexpected error. before Object obj : execution * * .. &amp;amp;&amp;amp; this obj { System.out.println thisJoinPoint ; } "erre the parameter thisJoinPoint is not bound in [all branches of] pointcut"</description>
    <commit commitTime="2006-02-01 15:20:37" id="1d41626c3d8489acf9a630d9236a9ecdf912363d"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="125809" reportTime="2006-01-31 06:23:00">
    <summary>AjTypeDeclaration in the dom shouldn't have the properties of it's subtype AspectDeclaration</summary>
    <description>The AjTypeDeclaration should not have the properties 'privileged' and 'perClause' which it's subtype AspectDeclaration has. This was shown up whilst building an aspectj for ajdt and a failure in one of the visitor tests.</description>
    <commit commitTime="2006-01-31 12:53:10" id="eec4990f7d6cad43994490193a4f76be5c580f9f"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/tools/ajc/AjASTTest.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AspectDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AjTypeDeclaration.java</file>
    </fixedFiles>
  </bug>
  <bug id="125810" reportTime="2006-01-31 06:26:00">
    <summary>Missing error when inherited abstract pointcut not made concrete in sub-@aspect</summary>
    <description>An error is issued when a sub-aspect does not implement an inherited abstract pointcut. This is missing for a sub-@aspect.</description>
    <commit commitTime="2006-02-01 15:20:37" id="1d41626c3d8489acf9a630d9236a9ecdf912363d"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="125981" reportTime="2006-02-01 02:01:00">
    <summary>Declare Soft not Working on Anonymous Class</summary>
    <description>This code should compile with AspectJ but AspectJ 1.5.0 doesn't soften the exception properly. Here's the output I see: C:\devel\scratch&amp;gt;ajc SampleTest.aj C:\devel\scratch\SampleTest.aj:10 [error] Unhandled exception type IOException str.read ;//comment out to see that it matches declare warning ^^^^ 1 error C:\devel\scratch&amp;gt;ajc -version AspectJ Compiler 1.5.0 built on Tuesday Dec 20, 2005 at 12:05:54 GMT public class SampleTest { public interface ByteReadingStrategy { void readBytes java.io.InputStream str ; } public ByteReadingStrategy byteReadingStrategy; private final ByteReadingStrategy offsetBuf = new ByteReadingStrategy { public void readBytes java.io.InputStream str { str.read ; } }; private class NamedByteReadingStrategy { public void readBytes java.io.InputStream str { str.read ; } }; public void foo {} } aspect Soften { pointcut softenedTests : within SampleTest+ &amp;amp;&amp;amp; execution * * .. &amp;amp;&amp;amp; !execution * * .. throws Exception+ ; declare soft: Exception+: softenedTests ; declare warning: softenedTests : "softened test"; }</description>
    <commit commitTime="2006-09-22 14:57:29" id="aefa777dfd64a8a90e2730ff442ebf99f832162f"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="126167" reportTime="2006-02-02 06:29:00">
    <summary>[@AspectJ] @AJ around advice does not behave like code style</summary>
    <description>Note: This could be just a doc thing, where we need to document the limitations that annotation style around advice has compared to code style. A user raised an issue on the list, here is He looked at this documentation: http://www.eclipse.org/aspectj/doc/released/adk15notebook/ataspectj-pcadvice.html and was looking how to use around advice and ProceedingJoinPoint. I just tried the same aspect too: import org.aspectj.lang.*; import org.aspectj.lang.annotation.*; @Aspect public class ProceedAspect { @Pointcut "call * setAge .. &amp;amp;&amp;amp; args i " void setAge int i {} @Around "setAge i " public Object twiceAsOld ProceedingJoinPoint thisJoinPoint, int i { System.err.println "advice running" ; return thisJoinPoint.proceed new Object[]{i*2} ; } } public class Foo { int a; public void setAge int i { System.err.println "Setting age to "+i ; a=i; } public static void main String[]argv { new Foo .setAge 5 ; } } &amp;gt; java Foo advice running Exception in thread "main" java.lang.ClassCastException: java.lang.Integer at Foo.setAge_aroundBody1$advice Foo.java:112 at Foo.main Foo.java:8 Before it will work, you need to supply the target in the proceed call array in the advice: @Around "setAge i " public Object twiceAsOld ProceedingJoinPoint thisJoinPoint, int i { return thisJoinPoint.proceed new Object[]{thisJoinPoint.getTarget ,i*2} ; //using Java 5 autoboxing } &amp;gt;java Foo advice running Setting age to 10 Maybe thats just something to document... but then let's change the pointcut from call to execution: @Aspect public class ProceedAspect { @Pointcut "execution * setAge .. &amp;amp;&amp;amp; args i " void setAge int i {} @Around "setAge i " public Object twiceAsOld ProceedingJoinPoint thisJoinPoint, int i { System.err.println "advice running" ; return thisJoinPoint.proceed new Object[]{thisJoinPoint.getTarget ,i*2} ; } } &amp;gt;java Foo Exception in thread "main" java.lang.ClassCastException: Foo can not be converted to int at org.aspectj.runtime.internal.Conversions.intValue Conversions.java:57 at Foo.setAge_aroundBody1$advice Foo.java:113 at Foo.setAge Foo.java:1 at Foo.main Foo.java:11 oh ... let's now remove that getTarget call we put in the advice: &amp;gt;java Foo advice running Setting age to 10 I know many of the problems here are that we can't do compile time type checking of the object array passed to proceed in the source - we would have to generate sophisticated code to handle it at runtime. There are numerous combinations, all failing in different ways so I tried to rationalise it and coded 11 testcases in code style and @AJ style to see what happens. It seems in all but the most basic cases, we get into trouble. I'm particularly worried about cases like those above where the code in the advice depends directly on the matched join point kind... Anyway, the tests are all checked in, see AtAroundTests.</description>
    <commit commitTime="2006-02-02 11:31:58" id="5f10ab1ee6592619b75d8f157f937d620f92d698"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc151/AllTestsAspectJ151.java</file>
    </fixedFiles>
  </bug>
  <bug id="126328" reportTime="2006-02-03 06:17:00">
    <summary>IlegalStateException : zip file closed</summary>
    <description>If there are &amp;gt; 1000 jars on the combination of classpath, aspectpath, and inpath, it is possible for a ZipFile to be closed and not successfully reopened before trying to read from it again.</description>
    <commit commitTime="2006-02-03 11:52:01" id="8933b6a6c18860da97a4c89eb113d44bc67525ad"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/ClassPathManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="128128" reportTime="2006-02-15 19:39:00">
    <summary>iajc doesn't fail Ant build when compile errors occur.</summary>
    <description>The iajc ant task doesn't failonerror anymore. The most relevant line is AjcTask.java:1256 with holder.numMessages IMessage.ERROR, false always returning 0. The holder:MessageHandler instance delegates messages to an interceptor AntMessageHandler. The AntMessageHandler is almost always consuming the messages, leaving the MessageHandler.java:108 to return without recording any messages itself. I would have liked to submit a patch with this bug report but I'm not yet sure what the correct interceptor.handleMessage message behavior should be in this case. Note: The AntMessageHandler properly reporting message priorities "error" vs. "warn" is welcome functionality - thanks.</description>
    <commit commitTime="2006-02-16 22:57:18" id="da562415d5349c7e1bb7e7d794cbc7c463e5a5ca"/>
    <fixedFiles>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="128237" reportTime="2006-02-16 11:21:00">
    <summary>[@AspectJ] NPE on @AJ code with pointcut which contains logical OR operation.</summary>
    <description>I got NullPointerException during compilation of any @AspectJ code with pointcut which contains logical OR operation. -----Here is my test case for this bug---------------- import java.io.IOException; import org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.annotation.Around; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.Pointcut; @Aspect class AbstractTracer { @Pointcut " execution public * Foo+.* .. || execution public * Foo+.blablabla .. &amp;amp;&amp;amp; !execution public Foo+.new .. " // @Pointcut " execution public * Foo+.* .. &amp;amp;&amp;amp; !execution public Foo+.new .. " protected void methodCall {}; @Pointcut "methodCall &amp;amp;&amp;amp; this obj " private void objectCall Object obj { }; @Around "objectCall obj " public Object aroundMethodCall ProceedingJoinPoint thisJoinPoint, Object obj throws Throwable { System.out.println "Before "+thisJoinPoint.getSignature .toString ; if thisJoinPoint.getSignature .toString .indexOf "A" != -1 { throw new IOException "Hello from Aspect!" ; // throw new Exception "Hello from Aspect!" ; } Object result = thisJoinPoint.proceed ; System.out.println "After "+thisJoinPoint.getSignature .toString ; return result; } } public class Foo { public void methodA throws IOException { throw new IOException "Foo.methodA" ; } public void methodB boolean b throws Exception { if b { throw new Exception "Foo.methodB" ; } } /** * @param args */ public static void main String[] args { Foo obj = new Foo ; try { obj.methodA ; System.out.println "Something going wrong!" ; } catch IOException e { System.out.println "All right! We got exception" ; e.printStackTrace System.out ; } try { obj.methodB false ; System.out.println "All right!" ; } catch Exception e { System.out.println "Something going wrong! We got exception" ; e.printStackTrace System.out ; } } } ------------------------------------------------------ and here is acj error log ------------------------------------------------------ ---- AspectJ Properties --- AspectJ Compiler 1.5.0 built on Tuesday Dec 20, 2005 at 12:05:54 GMT ---- Dump Properties --- Dump file: ajcore.20060216.175147.608.txt Dump reason: java.lang.NullPointerException Dump on exception: true Dump at exit condition: abort ---- Exception Information --- java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelWeaver.validateOrBranch BcelWeaver.java:611 at org.aspectj.weaver.bcel.BcelWeaver.validateBindings BcelWeaver.java:579 at org.aspectj.weaver.bcel.BcelWeaver.rewritePointcuts BcelWeaver.java:511 at org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave BcelWeaver.java:449 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:283 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:178 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:811 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:230 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:156 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:326 at org.aspectj.tools.ajc.Main.runMain Main.java:240 at org.aspectj.tools.ajc.Main.main Main.java:83 ---- System Properties --- java.runtime.name=Java TM 2 Runtime Environment, Standard Edition sun.boot.library.path=/opt/Java/jdk1.5.0_04/jre/lib/i386 java.vm.version=1.5.0_04-b05 java.vm.vendor=Sun Microsystems Inc. java.vendor.url= http://java.sun.com/ path.separator=: java.vm.name=Java HotSpot TM Client VM file.encoding.pkg=sun.io user.country=RU sun.os.patch.level=unknown java.vm.specification.name=Java Virtual Machine Specification user.dir=/home/kei/ajdt-workspace/AspectJTests java.runtime.version=1.5.0_04-b05 java.awt.graphicsenv=sun.awt.X11GraphicsEnvironment java.endorsed.dirs=/opt/Java/jdk1.5.0_04/jre/lib/endorsed os.arch=i386 java.io.tmpdir=/tmp line.separator= java.vm.specification.vendor=Sun Microsystems Inc. os.name=Linux sun.jnu.encoding=UTF-8 java.library.path=/opt/Java/jdk1.5.0_04/jre/lib/i386/client:/opt/Java/jdk1.5.0_04/jre/lib/i386:/opt/Java/jdk1.5.0_04/jre/../lib/i386:.: java.specification.name=Java Platform API Specification java.class.version=49.0 sun.management.compiler=HotSpot Client Compiler os.version=2.6.15-1.1831_FC4 user.home=/home/kei user.timezone=Europe/Kiev java.awt.printerjob=sun.print.PSPrinterJob file.encoding=UTF-8 java.specification.version=1.5 java.class.path=components/aspectjweaver.jar:components/aspectjtools.jar:components/aspectjrt.jar:components/aspectjlib.jar:/build/auroratest.jar:/opt/Java/aspectj1.5/lib/aspectjtools.jar:/opt/Java/jdk1.5.0_04/lib/tools.jar user.name=kei java.vm.specification.version=1.0 java.home=/opt/Java/jdk1.5.0_04/jre sun.arch.data.model=32 user.language=ru java.specification.vendor=Sun Microsystems Inc. java.vm.info=mixed mode, sharing java.version=1.5.0_04 java.ext.dirs=/opt/Java/jdk1.5.0_04/jre/lib/ext sun.boot.class.path=/opt/Java/jdk1.5.0_04/jre/lib/rt.jar:/opt/Java/jdk1.5.0_04/jre/lib/i18n.jar:/opt/Java/jdk1.5.0_04/jre/lib/sunrsasign.jar:/opt/Java/jdk1.5.0_04/jre/lib/jsse.jar:/opt/Java/jdk1.5.0_04/jre/lib/jce.jar:/opt/Java/jdk1.5.0_04/jre/lib/charsets.jar:/opt/Java/jdk1.5.0_04/jre/classes java.vendor=Sun Microsystems Inc. file.separator=/ java.vendor.url.bug= http://java.sun.com/cgi-bin/bugreport.cgi sun.io.unicode.encoding=UnicodeLittle sun.cpu.endian=little sun.cpu.isalist= ---- Command Line --- -1.5 Foo.java ---- Full Classpath --- /opt/Java/jdk1.5.0_04/jre/lib/rt.jar 39713589 bytes /opt/Java/jdk1.5.0_04/jre/lib/i18n.jar missing /opt/Java/jdk1.5.0_04/jre/lib/sunrsasign.jar missing /opt/Java/jdk1.5.0_04/jre/lib/jsse.jar 549315 bytes /opt/Java/jdk1.5.0_04/jre/lib/jce.jar 81799 bytes /opt/Java/jdk1.5.0_04/jre/lib/charsets.jar 8627836 bytes /opt/Java/jdk1.5.0_04/jre/classes missing /opt/Java/jdk1.5.0_04/jre/lib/ext/localedata.jar 802502 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/sunpkcs11.jar 175414 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/dnsns.jar 8176 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/sunjce_provider.jar 153235 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/bctsp-jdk15-129.jar 38357 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/bcprov-jdk15-129.jar 1168795 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/j3daudio.jar 1386793 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/bcmail-jdk15-129.jar 124831 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/j3dcore.jar 2514820 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/j3dutils.jar 1401997 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/vecmath.jar 290018 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/bcprov-jdk14-129.jar 1157625 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/bcmail-jdk14-129.jar 126679 bytes /home/kei/ajdt-workspace/AspectJTests/components/aspectjweaver.jar 1746917 bytes /home/kei/ajdt-workspace/AspectJTests/components/aspectjrt.jar 108647 bytes /home/kei/ajdt-workspace/AspectJTests/components/aspectjlib.jar 7845 bytes /build/auroratest.jar missing /opt/Java/jdk1.5.0_04/lib/tools.jar 7015499 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/localedata.jar 802502 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/sunpkcs11.jar 175414 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/dnsns.jar 8176 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/sunjce_provider.jar 153235 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/bctsp-jdk15-129.jar 38357 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/bcprov-jdk15-129.jar 1168795 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/j3daudio.jar 1386793 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/bcmail-jdk15-129.jar 124831 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/j3dcore.jar 2514820 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/j3dutils.jar 1401997 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/vecmath.jar 290018 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/bcprov-jdk14-129.jar 1157625 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/bcmail-jdk14-129.jar 126679 bytes /home/kei/ajdt-workspace/AspectJTests/components/aspectjweaver.jar 1746917 bytes /home/kei/ajdt-workspace/AspectJTests/components/aspectjrt.jar 108647 bytes /home/kei/ajdt-workspace/AspectJTests/components/aspectjlib.jar 7845 bytes /build/auroratest.jar missing /opt/Java/jdk1.5.0_04/lib/tools.jar 7015499 bytes ---- Compiler Messages --- abort ABORT -- NullPointerException null null java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelWeaver.validateOrBranch BcelWeaver.java:611 at org.aspectj.weaver.bcel.BcelWeaver.validateBindings BcelWeaver.java:579 at org.aspectj.weaver.bcel.BcelWeaver.rewritePointcuts BcelWeaver.java:511 at org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave BcelWeaver.java:449 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:283 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:178 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:811 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:230 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:156 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:326 at org.aspectj.tools.ajc.Main.runMain Main.java:240 at org.aspectj.tools.ajc.Main.main Main.java:83 ---- org.aspectj.weaver.bcel.BcelWorld ---- Shadow mungers: around extraFlags: 2 : persingleton AbstractTracer &amp;amp;&amp;amp; execution public * Foo+.* .. || execution public * Foo+.blablabla .. &amp;amp;&amp;amp; !execution public Foo+.new .. &amp;amp;&amp;amp; this BindingTypePattern java.lang.Object, 1 -&amp;gt;java.lang.Object AbstractTracer.aroundMethodCall org.aspectj.lang.ProceedingJoinPoint, java.lang.Object Type mungers: BcelTypeMunger null BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.Object. Late Type mungers: BcelTypeMunger null ------------------------------------------------------------------ I got same error with latest aspectj-DEVELOPMENT-20060216105006 night build.</description>
    <commit commitTime="2006-02-21 15:55:33" id="ba42a09551519a4b611ab06edb161ecb0c629f53"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="128618" reportTime="2006-02-20 06:36:00">
    <summary>[incremental] XLint warnings in the wrong place with incremental compilation</summary>
    <description>The zip file I am about to attach contains two AspectJ project, one depending on the other. If you make a small change to MainClass.java in 'Test Project' and save you will see a strange warning in that class - "advice defined in ras.FFDC has not been applied [Xlint:adviceDidNotMatch]". If you do a full build the warning goes away. Note that the error would be on line 36 if there were 36 lines in the class, which relates to a line in the FFDC aspect that contains advice.</description>
    <commit commitTime="2006-02-21 16:07:04" id="89d66dc89110db0f89538a7b78308db61e5539cc"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverMessageHandler.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="128650" reportTime="2006-02-20 09:46:00">
    <summary>Performance and memory usage</summary>
    <description>This bug will track the work done to address these issues, and include some stats.</description>
    <commit commitTime="2006-02-21 10:49:15" id="3b4d09438dd366cf4bb90c9d19cc8134853a347d"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/Range.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/MethodGen.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/ShadowRange.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/Utility.java</file>
    </fixedFiles>
  </bug>
  <bug id="128655" reportTime="2006-02-20 09:53:00">
    <summary>[annotations]Compiler crashes possibly due to declare @type</summary>
    <description>AJDT version: 1.3.1 20060214104738 AspectJ version: 1.5.1.20060131132251 Not very sure of the reason and couldn't reproduce on a smaller code base. The compiler crashes on incremental compilation, but never when I do full "clean" build. Here is the stack trace: java.lang.NullPointerException at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodBinding.getAnnotationTagBits MethodBinding.java:447 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareAnnotations AjLookupEnvironment.java:754 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:571 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:498 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doPendingWeaves AjLookupEnvironment.java:365 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:179 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:301 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:315 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:824 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:258 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:164 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 NullPointerException thrown: null</description>
    <commit commitTime="2006-02-21 09:25:09" id="67a3319816f88e64f933f1ab3d87f02ca446bc15"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/AjdeInteractionTestbed.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="128699" reportTime="2006-02-20 13:08:00">
    <summary>Incorrect error on "declare" statements</summary>
    <description>The error associated with the declare construct is incorrect. The current message is: "expected one of error, warning, parents, soft, dominates" dominates should be changed to "precendence" and new annotation related declararions should be mentioned. Here is a suggestion: "expected one of error, warning, parents, soft, precedence, @type, @method, @constructor, @field"</description>
    <commit commitTime="2006-02-20 19:32:59" id="f95d2c96edd293b98c27a19bb9f3cc2748b365cb"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/PatternParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="128744" reportTime="2006-02-20 23:38:00">
    <summary>LTW doesn't work using JRE1.4 in Eclipse</summary>
    <description>LTW doesn't work using JRE1.4 in Eclipse now I want to support JRE1.4 when LTW. I defined a aop.xml file in application META-INF path, it works fine using JRE1.4 in command-line, aop.xml file is used when LTW, the command as below: "D:\work\BTM\eclipse 3.1.1\eclipse-SDK-3.1.1-win32\eclipse-1.4.2\jre\bin\java" -classpath "C:\aspectj1.5\lib\aspectjweaver.jar" "-Djava.system.class.loader=org.aspectj.weaver.loadtime.WeavingURLClassLoader" "-Daj.class.path=D:\work\BTM\eclipse 3.1.1\jre1.4.2\myTest;C:\aspectj1.5\doc\examples\armtest\jar\btm-deps-e3.1.jar;C:\aspectj1.5\doc\examples\armtest\jar\btm-rt.jar" Hello but it doesn't work in Eclipse, I added upper command to VM arguments, it can't find aop.xml, because if I changed aop.xml to be wrong, there is no any error when execute the application in Eclipse , but there will be error when execute it in command-line, based on this point, I think that aop.xml didn't be used in Eclipse, I also tried to add "-Daj.aspect.path=D:\work\BTM\eclipse 3.1.1\jre1.4.2\myTest", but it is still. so I want to confirm if AspectJ only supports command-line for JRE1.4? doesn't support Eclipse for JRE1.4? BTW, my Eclipse env: eclipse 3.1.1 + ajdt_1.3_for_eclipse_3.1 + Sun JDK 1.4.2. I also tried to use eclipse 3.1.2, but this problem is still existed.</description>
    <commit commitTime="2006-02-21 15:52:36" id="7a2087ef985e8af73045bac1e7e0195bb87c7f40"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="129163" reportTime="2006-02-23 09:55:00">
    <summary>full build occurs when only class file change</summary>
    <description>This was highlighted when running the AJDT core tests with the latest aspectj. The failing test AJBuilderTest.testIncrementalBuildWithSrcFolder uses the TJP Example, adds a comment to the Demo.java file and saves. It then checks that an incremental build happened. With the latest AspectJ this fails since a full build occurs instead. Unfortunately this test only fails when run as part of AJBuilderTest rather than on its own. The reason this is happening is the change to the logic in AjCompilerAdapter.weave line 288. If there have been changes marked against the weaver and we're not a batch build then we used to just add all the classes to the list of classes to weave and continue. What now happens is that we force a full build because we believe an aspect has changed. The reason we believe that an aspect has changed comes from the call to AjState.getModifiedFiles long lastBuildTime . Here we iterate over the files in the build config and check whether they were last modified before or after the lastBuildTime. The logic is: long modTime = file.lastModified ; // need to add 1000 since lastModTime is only accurate to a second on some all? platforms if modTime + 1000 &amp;gt; lastBuildTime { ret.add file ; } In the failing case, modTime &amp;lt; lastBuildTime but modTime + 1000 &amp;gt; lastBuildTime for the aspect. Therefore, it's added to the list of modified files and the test fails. When run on its own the aspect returns modTime + 1000 &amp;gt; lastBuildTime so we only think we've modified a class - which is correct. Clearly, removing the "+ 1000" fixes the problem and running the AJ test suite against this causes no failures. However, this doesn't fix the problem that the "+1000" was put in to fix. Doing the same thing and running the AJDT core test suite on my linux box does occasionally cause a failure with one of the tests - we didn't notice that the file had changed because of the timestamp, didn't do a build and consequently the test failed. This again is not recreatable on its own and if you add print statments. This is not a new bug since I've run the ajdt test suite against the AJ 1.5.0 release and even though we're saying we want to reweave the world we're not doing a full build. Therefore there could have been cases where we were weaving everything when we needn't have - the changes to go back to source if an aspect changed have just hightlighted the problem. Finally, I have been unable as yet to write a filing testcase for the AJ testsuite for this bug.</description>
    <commit commitTime="2006-03-06 11:32:02" id="d7424a46cd2dc56a52d3556b7247f07b6e9379d6"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/PerObject.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerTypeWithin.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerSingleton.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerCflow.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="129298" reportTime="2006-02-24 03:45:00">
    <summary>Contribution: Remove Memory Consuming Declared Signature</summary>
    <description>The code for weaver.Member#getDeclaredSignature is never used in the weaver. My memory analysis showed this can pin several megabytes of memory in a large system. This patch removes it. YAGNI :-</description>
    <commit commitTime="2006-02-24 12:11:15" id="a116142da250286f414946a76112c907e59c6beb"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/JoinPointSignature.java</file>
      <file>weaver/src/org/aspectj/weaver/Member.java</file>
      <file>weaver/src/org/aspectj/weaver/MemberImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="129525" reportTime="2006-02-27 03:18:00">
    <summary>Don't Dump Bytecodes to Syserr in LTW</summary>
    <description>The load-time weaving system can produce truly massive quantities of output when there's a weaving error, since the system dumps the bytecode to syserr. It would be much better to produce an ajcore file and just point to it, or use some other log.</description>
    <commit commitTime="2006-08-24 17:32:00" id="04fa1dcce12934cc5cfe1e5e8b66523c10e93672"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/WeavingURLClassLoader.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="129566" reportTime="2006-02-27 08:43:00">
    <summary>ArrayIndexOutOfBoundsException with regular Java class</summary>
    <description>After "upgrading" to eclipse 3.2M5a and AJDT 20060224163227 I repeatedly get the following stack trace on a regular Java class: java.lang.ArrayIndexOutOfBoundsException at org.aspectj.weaver.ReferenceType.determineThoseTypesToUse ReferenceType.java:465 at org.aspectj.weaver.ReferenceType.getDeclaredInterfaces ReferenceType.java:411 at org.aspectj.weaver.bcel.BcelWeaver.weaveParentsFor BcelWeaver.java:1199 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1047 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:300 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:178 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:824 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:234 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:157 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 ArrayIndexOutOfBoundsException thrown: -1 This happens even when the class is the only file in a fresh project without any aspects! ; existing AJ projects work fine as soon as this class is excluded from the build path. When the class is moved into a different project and referenced as dependency everything works as expected. This used to work fine with previous versions of AJDT up to the last release for eclipse 3.1.</description>
    <commit commitTime="2006-03-01 08:21:56" id="5053f266ee41bce94fa7f2d34c5b83992bd3ff13"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="129704" reportTime="2006-02-27 20:32:00">
    <summary>BCException</summary>
    <description>org.aspectj.weaver.BCException at org.aspectj.weaver.bcel.BcelShadow.initializeKindedAnnotationVars BcelShadow.java:1553 at org.aspectj.weaver.bcel.BcelShadow.getKindedAnnotationVar BcelShadow.java:995 at org.aspectj.weaver.patterns.AnnotationPointcut.findResidueInternal AnnotationPointcut.java:196 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java:268 at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal AndPointcut.java:97 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java:268 at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal AndPointcut.java:97 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java:268 at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal AndPointcut.java:97 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java:268 at org.aspectj.weaver.bcel.BcelAdvice.specializeOn BcelAdvice.java:132 at org.aspectj.weaver.bcel.BcelShadow.prepareForMungers BcelShadow.java:313 at org.aspectj.weaver.Shadow.implement Shadow.java:404 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:2146 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:467 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:102 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1543 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1494 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1275 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1097 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:300 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:178 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:811 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:230 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:156 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 trouble in: public class com.ytg.bilette.client.core.providers.DomainContentProvider extends java.lang.Object implements com.ytg.bilette.client.core.providers.IRefreshableStructuredContentProvider: private java.util.HashSet listeners [Signature Ljava/util/HashSet&amp;lt;Lcom/ytg/bilette/client/core/providers/IDomainObjectChangeListener&amp;lt;TT;&amp;gt;;&amp;gt;; ] private com.ytg.bilette.client.core.providers.DomainContentProvider$State state [Signature Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; ] private Class clazz [Signature Ljava/lang/Class&amp;lt;+Lcom/ytg/bilette/model/GenericDomainObject;&amp;gt;; ] private boolean deletable private java.util.List summaries [Signature Ljava/util/List&amp;lt;TT;&amp;gt;; ] static Class class$0 public void &amp;lt;init&amp;gt; Class org.aspectj.weaver.MethodDeclarationLineNumber: 47:1136 : ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 47 &amp;amp;#304;NVOKESPEC&amp;amp;#304;AL java.lang.Object.&amp;lt;init&amp;gt; V constructor-execution void com.ytg.bilette.client.core.providers.DomainContentProvider.&amp;lt;init&amp;gt; java.lang.Class | ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 34 | NEW java.util.HashSet | DUP | &amp;amp;#304;NVOKESPEC&amp;amp;#304;AL java.util.HashSet.&amp;lt;init&amp;gt; V | PUTF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.listeners Ljava/util/HashSet; | ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 36 | GETSTAT&amp;amp;#304;C com.ytg.bilette.client.core.providers.DomainContentProvider$State.NOT_INITIALIZED Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; | PUTF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.state Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; | ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 40 | &amp;amp;#304;CONST_0 | PUTF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.deletable Z | ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 48 | ALOAD_1 // java.lang.Class clazz | PUTF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.clazz Ljava/lang/Class; | ALOAD_1 // java.lang.Class clazz line 50 | &amp;amp;#304;NVOKEV&amp;amp;#304;RTUAL java.lang.Class.getInterfaces [Ljava/lang/Class; | ASTORE_2 | &amp;amp;#304;CONST_0 line 51 | &amp;amp;#304;STORE_3 | GOTO L2 | L0: ALOAD_2 // java.lang.Class[] interfaces line 52 | &amp;amp;#304;LOAD_3 // int i | AALOAD | LDC com.ytg.bilette.model.Deletable | &amp;amp;#304;NVOKEV&amp;amp;#304;RTUAL java.lang.Object.equals Ljava/lang/Object; Z | &amp;amp;#304;FEQ L1 | ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 53 | &amp;amp;#304;CONST_1 | PUTF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.deletable Z | GOTO L3 line 54 | L1: &amp;amp;#304;&amp;amp;#304;NC 3 1 // int i line 51 | L2: &amp;amp;#304;LOAD_3 // int i | ALOAD_2 // java.lang.Class[] interfaces | ARRAYLENGTH | &amp;amp;#304;F_&amp;amp;#304;CMPLT L0 | L3: RETURN line 57 constructor-execution void com.ytg.bilette.client.core.providers.DomainContentProvider.&amp;lt;init&amp;gt; java.lang.Class end public void &amp;lt;init&amp;gt; Class public Object[] getElements Object org.aspectj.weaver.MethodDeclarationLineNumber: 65:1611 : ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 66 ALOAD_1 // java.lang.Object input &amp;amp;#304;NVOKESPEC&amp;amp;#304;AL com.ytg.bilette.client.core.providers.DomainContentProvider.checkInput Ljava/lang/Object; Z &amp;amp;#304;STORE_2 ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 68 &amp;amp;#304;LOAD_2 // boolean includeDeleted &amp;amp;#304;NVOKEV&amp;amp;#304;RTUAL com.ytg.bilette.client.core.providers.DomainContentProvider.getSummaries Z Ljava/util/List; &amp;amp;#304;NVOKE&amp;amp;#304;NTERFACE java.util.List.toArray [Ljava/lang/Object; ARETURN end public Object[] getElements Object private void checkInitialized boolean org.aspectj.weaver.MethodDeclarationLineNumber: 71:1759 : GETSTAT&amp;amp;#304;C com.ytg.bilette.client.core.providers.DomainContentProvider$State.NOT_INITIALIZED Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; line 72 ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this GETF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.state Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; &amp;amp;#304;NVOKEV&amp;amp;#304;RTUAL com.ytg.bilette.client.core.providers.DomainContentProvider$State.equals Ljava/lang/Object; Z &amp;amp;#304;FNE L0 GETSTAT&amp;amp;#304;C com.ytg.bilette.client.core.providers.DomainContentProvider$State.LIGHT_INITIALIZED Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; line 73 ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this GETF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.state Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; &amp;amp;#304;NVOKEV&amp;amp;#304;RTUAL com.ytg.bilette.client.core.providers.DomainContentProvider$State.equals Ljava/lang/Object; Z &amp;amp;#304;FEQ L1 &amp;amp;#304;LOAD_1 // boolean includeDeleted &amp;amp;#304;FEQ L1 L0: ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 74 ACONST_NULL ACONST_NULL &amp;amp;#304;LOAD_1 // boolean includeDeleted &amp;amp;#304;NVOKESPEC&amp;amp;#304;AL com.ytg.bilette.client.core.providers.DomainContentProvider.getData Lcom/ytg/bilette/dao/SummaryDAO;Lorg/eclipse/core/runtime/IProgressMonitor;Z V L1: RETURN line 75 end private void checkInitialized boolean private boolean checkInput Object org.aspectj.weaver.MethodDeclarationLineNumber: 83:2060 : ALOAD_1 // java.lang.Object input line 84 &amp;amp;#304;NSTANCEOF java.lang.Boolean LDC "Input for generic content provider must be Boolean value" line 85 &amp;amp;#304;NVOKESTAT&amp;amp;#304;C org.eclipse.jface.util.Assert.isTrue ZLjava/lang/String; Z line 84 POP ALOAD_1 // java.lang.Object input line 86 CHECKCAST java.lang.Boolean &amp;amp;#304;NVOKEV&amp;amp;#304;RTUAL java.lang.Boolean.booleanValue Z &amp;amp;#304;STORE_2 ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 87 GETF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.deletable Z &amp;amp;#304;FNE L1 ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 88 GETF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.deletable Z &amp;amp;#304;FNE L0 &amp;amp;#304;LOAD_2 // boolean includeDeleted &amp;amp;#304;FEQ L1 L0: &amp;amp;#304;CONST_0 GOTO L2 L1: &amp;amp;#304;CONST_1 L2: LDC "Nondeletable object yet deleted flag!" line 89 &amp;amp;#304;NVOKESTAT&amp;amp;#304;C org.eclipse.jface.util.Assert.isLegal ZLjava/lang/String; Z line 87 POP &amp;amp;#304;LOAD_2 // boolean includeDeleted line 91 &amp;amp;#304;RETURN end private boolean checkInput Object public void dispose org.aspectj.weaver.MethodDeclarationLineNumber: 99:2522 : RETURN line 101 end public void dispose public void inputChanged org.eclipse.jface.viewers.Viewer, Object, Object org.aspectj.weaver.MethodDeclarationLineNumber: 109:2747 : RETURN line 111 end public void inputChanged org.eclipse.jface.viewers.Viewer, Object, Object private void getData com.ytg.bilette.dao.SummaryDAO, org.eclipse.core.runtime.IProgressMonitor, boolean org.aspectj.weaver.MethodDeclarationLineNumber: 115:2954 : ALOAD_1 ASTORE 4 ALOAD_2 ASTORE 5 &amp;amp;#304;LOAD_3 &amp;amp;#304;STORE 6 method-execution void com.ytg.bilette.client.core.providers.DomainContentProvider.getData com.ytg.bilette.dao.SummaryDAO, org.eclipse.core.runtime.IProgressMonitor, boolean | ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 117 | ALOAD_1 // com.ytg.bilette.dao.SummaryDAO dao | ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this | GETF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.clazz Ljava/lang/Class; | &amp;amp;#304;LOAD_3 // boolean includeDeleted | &amp;amp;#304;NVOKE&amp;amp;#304;NTERFACE com.ytg.bilette.dao.SummaryDAO.getSummaries Ljava/lang/Class;Z Ljava/util/List; | PUTF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.summaries Ljava/util/List; | &amp;amp;#304;LOAD_3 // boolean includeDeleted line 118 | &amp;amp;#304;FEQ L0 | ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 119 | GETSTAT&amp;amp;#304;C com.ytg.bilette.client.core.providers.DomainContentProvider$State.FULL_INITIALIZED Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; | PUTF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.state Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; | GOTO L1 | L0: ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 121 | GETSTAT&amp;amp;#304;C com.ytg.bilette.client.core.providers.DomainContentProvider$State.LIGHT_INITIALIZED Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; | PUTF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.state Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; | L1: RETURN line 122 method-execution void com.ytg.bilette.client.core.providers.DomainContentProvider.getData com.ytg.bilette.dao.SummaryDAO, org.eclipse.core.runtime.IProgressMonitor, boolean end private void getData com.ytg.bilette.dao.SummaryDAO, org.eclipse.core.runtime.IProgressMonitor, boolean public java.util.List getSummaries boolean org.aspectj.weaver.MethodDeclarationLineNumber: 128:3308 : ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 129 &amp;amp;#304;LOAD_1 // boolean includeDeleted &amp;amp;#304;NVOKESPEC&amp;amp;#304;AL com.ytg.bilette.client.core.providers.DomainContentProvider.checkInitialized Z V &amp;amp;#304;LOAD_1 // boolean includeDeleted line 131 &amp;amp;#304;FNE L0 GETSTAT&amp;amp;#304;C com.ytg.bilette.client.core.providers.DomainContentProvider$State.LIGHT_INITIALIZED Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this GETF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.state Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; &amp;amp;#304;NVOKEV&amp;amp;#304;RTUAL com.ytg.bilette.client.core.providers.DomainContentProvider$State.equals Ljava/lang/Object; Z &amp;amp;#304;FEQ L1 L0: ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 132 GETF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.summaries Ljava/util/List; ARETURN L1: ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 134 GETF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.summaries Ljava/util/List; &amp;amp;#304;NVOKE&amp;amp;#304;NTERFACE java.util.List.iterator Ljava/util/Iterator; ASTORE_2 NEW java.util.ArrayList line 135 DUP &amp;amp;#304;NVOKESPEC&amp;amp;#304;AL java.util.ArrayList.&amp;lt;init&amp;gt; V ASTORE_3 GOTO L3 line 136 L2: ALOAD_2 // java.util.Iterator i line 137 &amp;amp;#304;NVOKE&amp;amp;#304;NTERFACE java.util.Iterator.next Ljava/lang/Object; CHECKCAST com.ytg.bilette.model.Deletable CHECKCAST com.ytg.bilette.model.Deletable ASTORE 4 ALOAD 4 // com.ytg.bilette.model.Deletable object line 138 &amp;amp;#304;NVOKE&amp;amp;#304;NTERFACE com.ytg.bilette.model.Deletable.isDeleted Z &amp;amp;#304;FNE L3 ALOAD_3 // java.util.ArrayList list line 139 ALOAD 4 // com.ytg.bilette.model.Deletable object CHECKCAST com.ytg.bilette.model.GenericDomainObject &amp;amp;#304;NVOKEV&amp;amp;#304;RTUAL java.util.ArrayList.add Ljava/lang/Object; Z POP L3: ALOAD_2 // java.util.Iterator i line 136 &amp;amp;#304;NVOKE&amp;amp;#304;NTERFACE java.util.Iterator.hasNext Z &amp;amp;#304;FNE L2 ALOAD_3 // java.util.ArrayList list line 142 ARETURN end public java.util.List getSummaries boolean public synchronized void refresh org.aspectj.weaver.MethodDeclarationLineNumber: 148:3783 : ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 149 GETSTAT&amp;amp;#304;C com.ytg.bilette.client.core.providers.DomainContentProvider$State.NOT_INITIALIZED Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; PUTF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.state Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; &amp;amp;#304;CONST_0 line 150 &amp;amp;#304;STORE_1 ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 152 GETF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.deletable Z &amp;amp;#304;FEQ L2 ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 153 GETF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.listeners Ljava/util/HashSet; &amp;amp;#304;NVOKEV&amp;amp;#304;RTUAL java.util.HashSet.iterator Ljava/util/Iterator; ASTORE_2 GOTO L1 line 154 L0: ALOAD_2 // java.util.Iterator i line 155 &amp;amp;#304;NVOKE&amp;amp;#304;NTERFACE java.util.Iterator.next Ljava/lang/Object; CHECKCAST com.ytg.bilette.client.core.providers.IDomainObjectChangeListener ASTORE_3 ALOAD_3 // com.ytg.bilette.client.core.providers.IDomainObjectChangeListener listener line 156 &amp;amp;#304;NVOKE&amp;amp;#304;NTERFACE com.ytg.bilette.client.core.providers.IDomainObjectChangeListener.isIncludeDeleted Z &amp;amp;#304;FEQ L1 &amp;amp;#304;CONST_1 line 157 &amp;amp;#304;STORE_1 // boolean includeDeleted GOTO L2 line 158 L1: ALOAD_2 // java.util.Iterator i line 154 &amp;amp;#304;NVOKE&amp;amp;#304;NTERFACE java.util.Iterator.hasNext Z &amp;amp;#304;FNE L0 L2: ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 163 ACONST_NULL ACONST_NULL &amp;amp;#304;LOAD_1 // boolean includeDeleted &amp;amp;#304;NVOKESPEC&amp;amp;#304;AL com.ytg.bilette.client.core.providers.DomainContentProvider.getData Lcom/ytg/bilette/dao/SummaryDAO;Lorg/eclipse/core/runtime/IProgressMonitor;Z V ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 165 ACONST_NULL ACONST_NULL &amp;amp;#304;NVOKESPEC&amp;amp;#304;AL com.ytg.bilette.client.core.providers.DomainContentProvider.notifyAllListeners Lcom/ytg/bilette/model/GenericDomainObject;Lcom/ytg/bilette/model/GenericDomainObject; V RETURN line 166 end public synchronized void refresh private synchronized void notifyAllListeners com.ytg.bilette.model.GenericDomainObject, com.ytg.bilette.model.GenericDomainObject org.aspectj.weaver.MethodDeclarationLineNumber: 174:4356 : ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 175 GETF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.listeners Ljava/util/HashSet; &amp;amp;#304;NVOKEV&amp;amp;#304;RTUAL java.util.HashSet.iterator Ljava/util/Iterator; ASTORE_3 GOTO L2 line 176 L0: ALOAD_3 // java.util.Iterator i line 177 &amp;amp;#304;NVOKE&amp;amp;#304;NTERFACE java.util.Iterator.next Ljava/lang/Object; CHECKCAST com.ytg.bilette.client.core.providers.IDomainObjectChangeListener ASTORE 4 ALOAD_1 // com.ytg.bilette.model.GenericDomainObject oldObj line 178 &amp;amp;#304;FNONNULL L1 ALOAD_2 // com.ytg.bilette.model.GenericDomainObject newObj &amp;amp;#304;FNONNULL L1 ALOAD 4 // com.ytg.bilette.client.core.providers.IDomainObjectChangeListener listener line 179 &amp;amp;#304;NVOKE&amp;amp;#304;NTERFACE com.ytg.bilette.client.core.providers.IDomainObjectChangeListener.fullRefresh V GOTO L2 L1: ALOAD 4 // com.ytg.bilette.client.core.providers.IDomainObjectChangeListener listener line 181 ALOAD_1 // com.ytg.bilette.model.GenericDomainObject oldObj ALOAD_2 // com.ytg.bilette.model.GenericDomainObject newObj &amp;amp;#304;NVOKE&amp;amp;#304;NTERFACE com.ytg.bilette.client.core.providers.IDomainObjectChangeListener.concessionChanged Lcom/ytg/bilette/model/GenericDomainObject;Lcom/ytg/bilette/model/GenericDomainObject; V L2: ALOAD_3 // java.util.Iterator i line 176 &amp;amp;#304;NVOKE&amp;amp;#304;NTERFACE java.util.Iterator.hasNext Z &amp;amp;#304;FNE L0 RETURN line 183 end private synchronized void notifyAllListeners com.ytg.bilette.model.GenericDomainObject, com.ytg.bilette.model.GenericDomainObject public synchronized void addListener com.ytg.bilette.client.core.providers.IDomainObjectChangeListener org.aspectj.weaver.MethodDeclarationLineNumber: 185:4715 : ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 186 GETF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.listeners Ljava/util/HashSet; ALOAD_1 // com.ytg.bilette.client.core.providers.IDomainObjectChangeListener listener &amp;amp;#304;NVOKEV&amp;amp;#304;RTUAL java.util.HashSet.add Ljava/lang/Object; Z POP RETURN line 187 end public synchronized void addListener com.ytg.bilette.client.core.providers.IDomainObjectChangeListener public synchronized void removeListener com.ytg.bilette.client.core.providers.IDomainObjectChangeListener org.aspectj.weaver.MethodDeclarationLineNumber: 189:4831 : ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 190 GETF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.listeners Ljava/util/HashSet; ALOAD_1 // com.ytg.bilette.client.core.providers.IDomainObjectChangeListener listener &amp;amp;#304;NVOKEV&amp;amp;#304;RTUAL java.util.HashSet.remove Ljava/lang/Object; Z POP RETURN line 191 end public synchronized void removeListener com.ytg.bilette.client.core.providers.IDomainObjectChangeListener end public class com.ytg.bilette.client.core.providers.DomainContentProvider when implementing on shadow method-execution void com.ytg.bilette.client.core.providers.DomainContentProvider.getData com.ytg.bilette.dao.SummaryDAO, org.eclipse.core.runtime.IProgressMonitor, boolean when weaving type com.ytg.bilette.client.core.providers.DomainContentProvider when weaving classes when weaving when batch building BuildConfig[F:\java\Bilette\.metadata\.plugins\org.eclipse.ajdt.core\com.ytg.bilette.client.core.generated.lst] #Files=22</description>
    <commit commitTime="2006-05-12 10:41:42" id="3ca976f0ce48a49cdcef98b7f72ce2ce23b9ef4d"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="130300" reportTime="2006-03-03 06:27:00">
    <summary>Remove, hide or obfuscate -XnoWeave</summary>
    <description>This option is redundant apart from use in AspectJ development and maintenance. It is confusing to users and is a source new problems for LTW.</description>
    <commit commitTime="2006-03-05 17:00:04" id="b2259116b8731725743d255a85c894d6f998afb1"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java</file>
      <file>testing/src/org/aspectj/testing/harness/bridge/CompilerRun.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BcweaverJarMaker.java</file>
      <file>taskdefs/testsrc/org/aspectj/tools/ant/taskdefs/AjcTaskTest.java</file>
      <file>tests/src/org/aspectj/systemtest/inpath/InPathTests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/core/AspectJCore.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/core/builder/AjCompilerOptionsTest.java</file>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/BuildConfigurationTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="130722" reportTime="2006-03-07 05:53:00">
    <summary>poincut references in percflow instantiation model aspects can not be resolved</summary>
    <description>Take these two aspects and this litte class: // source1 package test1; import test.Test; public aspect PointcutProvider { public pointcut test : execution * Test.* .. ; } // source2 package test; import test1.PointcutProvider; public aspect PointcutConsumer percflow flow { // compiler issues the following line with // can not find pointcut test on test.PointcutConsumer pointcut mytest : PointcutProvider.test ; // this also does not work with the same error message pointcut mytest : test1.PointcutProvider.test ; pointcut flow : mytest ; } // source3 package test; public class Test { public void foo { } } Changing the consumer aspect to singleton instantiation model works.</description>
    <commit commitTime="2006-05-16 15:43:08" id="b166a7e6163889eb951f82655f0f49bfc26a49f0"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/GenericITDsDesign.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/bcel/NonstaticWeaveTestCase.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedType.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/bcel/PointcutResidueTestCase.java</file>
      <file>weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/bcel/WeaveOrderTestCase.java</file>
      <file>weaver/src/org/aspectj/weaver/CrosscuttingMembers.java</file>
    </fixedFiles>
  </bug>
  <bug id="130837" reportTime="2006-03-07 19:52:00">
    <summary>Exception while trying to edit Annotation based Aspect Class normal Java class</summary>
    <description>java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVisitor.buildFormalAdviceBindingsFrom ValidateAtAspectJAnnotationsVisitor.java:417 at org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVisitor.resolveAndSetPointcut ValidateAtAspectJAnnotationsVisitor.java:364 at org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVisitor.validateAdvice ValidateAtAspectJAnnotationsVisitor.java:336 at org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVisitor.visit ValidateAtAspectJAnnotationsVisitor.java:186 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse MethodDeclaration.java:185 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse TypeDeclaration.java:1195 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse CompilationUnitDeclaration.java:339 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.beforeAnalysing AjCompilerAdapter.java:154 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$before$org_aspectj_ajdt_internal_compiler_CompilerAdapter$7$db78446d CompilerAdapter.aj:101 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:517 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:824 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:234 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:189 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:164 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 NullPointerException thrown: null</description>
    <commit commitTime="2006-03-28 08:09:10" id="41f1f3a4174de86413942cd8f2c2e7c45d9824d7"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java</file>
    </fixedFiles>
  </bug>
  <bug id="130869" reportTime="2006-03-08 04:05:00">
    <summary>Pointcut resolution fails against type variables</summary>
    <description>Ok, so I'm on the bleeding edge of aspect design here... but I have a generic aspect of the form public abstract aspect MyAspect&amp;lt;T extends Bar&amp;gt; { declare warning : T.somePC : "a match"; } and Bar is defined as: public abstract aspect Bar { public abstract pointcut somePC ; } yes, what that enables is indeed unbelievably cool . We fail perhaps unsurprisingly when compiling the generic aspect because we can't find the pointcut somePC in T. We should of course be looking in the upper bound when searching for a pointcut in a type variable...</description>
    <commit commitTime="2006-03-08 10:59:06" id="103733b9c277f980d30db27710ea359974e45c81"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="131505" reportTime="2006-03-13 05:37:00">
    <summary>Generated aop.xml files contain aspects for all the projects ever built</summary>
    <description>Using the -outxml option in AJDT the generated aop.xml files are not correct after the first build and contain all the aspects that have ever been built including those in different projects and duplicates if an aspect has been built twice . It seems that there is a global list of aspects aspectNames in AjBuildManager that is never cleared.</description>
    <commit commitTime="2006-03-15 12:34:48" id="b3cd01d587219969e7c7b58ecda5b1aeb7722c2e"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="131932" reportTime="2006-03-15 09:45:00">
    <summary>structure model bug: generic method ITD</summary>
    <description>import java.util.List; public aspect Slide74 { public X Bar&amp;lt;X&amp;gt;.getFirst { return lts.get 0 ; } static class Bar&amp;lt;T&amp;gt; { List&amp;lt;T&amp;gt; lts; } } in AJDT, this program incorrectly shows the relationship from the TYPE to the Bar class rather than from the ITD to the Bar class.</description>
    <commit commitTime="2006-03-16 15:34:26" id="e2703cf67fe6c68cc0e91aecdbfa4e07e51c6fc7"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/NewConstructorTypeMunger.java</file>
      <file>weaver/src/org/aspectj/weaver/NewFieldTypeMunger.java</file>
      <file>weaver/src/org/aspectj/weaver/NewMethodTypeMunger.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="131933" reportTime="2006-03-15 09:46:00">
    <summary>grotty ClassCastException on referring to pointcut in generic type</summary>
    <description>import java.util.List; public aspect Slide71 { before : GenericType&amp;lt;String&amp;gt;.foo {} before : GenericType&amp;lt;MyList&amp;gt;.foo {} //before : GenericType.foo {} } class GenericType&amp;lt;T&amp;gt; { public pointcut foo : execution * T.* .. ; } that programs gives: because MyList is not a known type java.lang.ClassCastException at org.aspectj.weaver.patterns.TypePattern.resolveExactType TypePattern.java:193 at org.aspectj.weaver.patterns.ReferencePointcut.resolveBindings ReferencePointcut.java:130 at org.aspectj.weaver.patterns.Pointcut.resolve Pointcut.java:194 at org.aspectj.ajdt.internal.compiler.ast.PointcutDesignator.finishResolveTypes PointcutDesignator.java:84 at org.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration.resolveStatements AdviceDeclaration.java:118 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve AbstractMethodDeclaration.java:400 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1088 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.resolve AspectDeclaration.java:116 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1137 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve CompilationUnitDeclaration.java:305 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:514 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:843 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:268 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:170 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 ClassCastException thrown: org.aspectj.weaver.patterns.WildTypePattern</description>
    <commit commitTime="2006-03-16 11:01:54" id="f2cd94f88a9976fc98786955a764522a8ccb37f1"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/TypePattern.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="132080" reportTime="2006-03-15 23:01:00">
    <summary>LTW concrete-aspect definitions not exposed to weaver</summary>
    <description>I have a concrete aspect that implements an interface that is affected by an ITD TemplateOperationMonitor in the Glassbox Inspector . However, the weaver chokes when trying to generate the concrete aspect. From inspection, the code for the concrete aspect generator doesn't weave into concrete aspects. Sample error output: error Abstract method 'getLogger' cannot be concretized as a pointcut illegal signature, must have no arguments, must return void : &amp;lt;concrete-aspect name='glassbox.inspector.monitor.operation.test.TestMonitor' extends='glassbox.inspector.monitor.operation.TemplateOperationMonitor'/&amp;gt; in aop.xml warning register definition failed -- AbortException Abstract method 'getLogger' cannot be concretized as a pointcut illegal signature, must have no arguments, must return void : &amp;lt;concrete-aspect name='glassbox.inspector.monitor.operation.test.TestMonitor' extends='glassbox.inspector.monitor.operation.TemplateOperationMonitor'/&amp;gt; in aop.xml Abstract method 'getLogger' cannot be concretized as a pointcut illegal signature, must have no arguments, must return void : &amp;lt;concrete-aspect name='glassbox.inspector.monitor.operation.test.TestMonitor' extends='glassbox.inspector.monitor.operation.TemplateOperationMonitor'/&amp;gt; in aop.xml Message: error Abstract method 'getLogger' cannot be concretized as a pointcut illegal signature, must have no arguments, must return void : &amp;lt;concrete-aspect name='glassbox.inspector.monitor.operation.test.TestMonitor' extends='glassbox.inspector.monitor.operation.TemplateOperationMonitor'/&amp;gt; in aop.xml org.aspectj.bridge.AbortException: Abstract method 'getLogger' cannot be concretized as a pointcut illegal signature, must have no arguments, must return void : &amp;lt;concrete-aspect name='glassbox.inspector.monitor.operation.test.TestMonitor' extends='glassbox.inspector.monitor.operation.TemplateOperationMonitor'/&amp;gt; in aop.xml at org.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHandler.handleMessage WeavingAdaptor.java:417 at org.aspectj.weaver.loadtime.ConcreteAspectCodeGen.reportError ConcreteAspectCodeGen.java:332 at org.aspectj.weaver.loadtime.ConcreteAspectCodeGen.validate ConcreteAspectCodeGen.java:169 at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.registerAspects ClassLoaderWeavingAdaptor.java:372 at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.registerDefinitions ClassLoaderWeavingAdaptor.java:195 at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.initialize ClassLoaderWeavingAdaptor.java:136 at org.aspectj.weaver.loadtime.WeavingURLClassLoader.defineClass WeavingURLClassLoader.java:120 at org.aspectj.weaver.ExtensibleURLClassLoader.defineClass ExtensibleURLClassLoader.java:80 at org.aspectj.weaver.ExtensibleURLClassLoader.findClass ExtensibleURLClassLoader.java:46 at java.lang.ClassLoader.loadClass ClassLoader.java:306 at java.lang.ClassLoader.loadClass ClassLoader.java:251 at java.lang.ClassLoader.loadClassInternal ClassLoader.java:319 at java.lang.Class.forName0 Native Method at java.lang.Class.forName Class.java:242 at glassbox.inspector.monitor.operation.TestTemplateOperationMonitor.testTemplateMonitor TestTemplateOperationMonitor.java:19 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:585 at junit.framework.TestCase.runTest TestCase.java:154 at junit.framework.TestCase.runBare TestCase.java:127 at junit.framework.TestResult$1.protect TestResult.java:106 at junit.framework.TestResult.runProtected TestResult.java:124 at junit.framework.TestResult.run TestResult.java:109 at junit.framework.TestCase.run TestCase.java:118 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests RemoteTestRunner.java:478 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run RemoteTestRunner.java:344 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main RemoteTestRunner.java:196</description>
    <commit commitTime="2006-10-04 13:35:09" id="6b31b32ae338cdecea6e20aa87fe05ca0cc2fb57"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="132087" reportTime="2006-03-15 23:56:00">
    <summary>NPE from unbound variable in advice</summary>
    <description>I get this error from having an unbound reference to a variable in an aspect. See attached AJDT project for an example. java.lang.NullPointerException at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.visit AsmHierarchyBuilder.java:412 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse MethodDeclaration.java:185 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse TypeDeclaration.java:1250 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.traverse QualifiedAllocationExpression.java:392 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.traverse LocalDeclaration.java:242 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse MethodDeclaration.java:212 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse TypeDeclaration.java:1195 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse CompilationUnitDeclaration.java:339 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.internalBuild AsmHierarchyBuilder.java:143 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.buildStructureForCompilationUnit AsmHierarchyBuilder.java:82 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishedCompilationUnit EclipseFactory.java:927 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing AjCompilerAdapter.java:201 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$4$6b855184 CompilerAdapter.aj:90 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:528 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:843 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:243 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:163 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 NullPointerException thrown: null</description>
    <commit commitTime="2006-03-27 21:39:46" id="fa2ed1b8d8350afe051a21a510fb4fc929d5f43d"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</file>
    </fixedFiles>
  </bug>
  <bug id="132130" reportTime="2006-03-16 06:24:00">
    <summary>Missing relationship for declare @method when annotating a co-located method</summary>
    <description>For this program when all entered into *one* file I don't see a marker from the declare to the annotated method. If the annotated method is in another file, I do... not sure if fields/ctors/types are also a problem.. public aspect basic { declare @method: * debit .. : @Secured role="supervisor" ; } class BankAccount { public void debit long accId,long amount { } } @interface Secured { String role ; }</description>
    <commit commitTime="2006-03-17 16:47:06" id="9dca72e7c63a5623f3d442bf43bb88810368a65a"/>
    <fixedFiles>
      <file>ajde/testsrc/org/aspectj/ajde/AsmDeclarationsTest.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/AsmRelationshipsTest.java</file>
      <file>asm/src/org/aspectj/asm/internal/ProgramElement.java</file>
    </fixedFiles>
  </bug>
  <bug id="132160" reportTime="2006-03-16 09:52:00">
    <summary>NPE in SingleTypeReference</summary>
    <description>I was C&amp;amp;P'ing the guts of another aspect into a new file from another project that I'm porting over . There are a number of errors in the aspect as most of the references point to the other project . I just changed an object from one type in the other project to a type in the project that the file is in. Eclipse SDK Version: 3.1.2 Build id: M20060118-1600 Version: 1.3.0 Build id: 20051220093604 AspectJ version: 1.5.0 ---------------------------------------------------------------- java.lang.NullPointerException at org.aspectj.org.eclipse.jdt.internal.compiler.ast.SingleTypeReference.getTypeBinding SingleTypeReference.java:39 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.getTypeBindingPublic TypeReference.java:98 at org.aspectj.ajdt.internal.core.builder.AsmElementFormatter.genLabelAndKind AsmElementFormatter.java:230 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.visit AsmHierarchyBuilder.java:399 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse MethodDeclaration.java:185 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse TypeDeclaration.java:1250 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.traverse QualifiedAllocationExpression.java:392 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.traverse LocalDeclaration.java:242 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse MethodDeclaration.java:212 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse TypeDeclaration.java:1195 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse CompilationUnitDeclaration.java:339 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.internalBuild AsmHierarchyBuilder.java:142 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.buildStructureForCompilationUnit AsmHierarchyBuilder.java:82 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishedCompilationUnit EclipseFactory.java:926 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing AjCompilerAdapter.java:195 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$4$6b855184 CompilerAdapter.aj:89 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:528 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:811 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:230 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:185 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:163 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 NullPointerException thrown: null</description>
    <commit commitTime="2006-03-27 19:11:57" id="91473b3badbc89811be8c6223adc6b6641e496d2"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java</file>
    </fixedFiles>
  </bug>
  <bug id="132349" reportTime="2006-03-17 10:54:00">
    <summary>Inter-Type Declaration on nested class in generic type: IllegalStateException</summary>
    <description>Using the 1.5 compiler from the 20th of December or Eclipse with the AJDT plugin 1.5.0.20051220093604 to compile the following code: public class TopLevelType&amp;lt;E&amp;gt; { public static class NestedType {} } aspect SomeAspect { public void TopLevelType.NestedType.someMethod { } } results in: C:\Dokumente und Einstellungen\Michi\Eigene Dateien\Temp\tmp\TopLevelType.java [error] Internal compiler error java.lang.IllegalStateException: Use generic type, not parameterized type at org.aspectj.weaver.ResolvedTypeMunger.&amp;lt;init&amp;gt; ResolvedTypeMunger.java:69 at org.aspectj.weaver.NewMethodTypeMunger.&amp;lt;init&amp;gt; NewMethodTypeMunger.java:28 at org.aspectj.ajdt.internal.compiler.ast.InterTypeMethodDeclaration.build InterTypeMethodDeclaration.java:197 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTypeAndPerClause AspectDeclaration.java:1066 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildInterTypeAndPerClause AjLookupEnvironment.java:442 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.collectAllITDsAndDeclares AjLookupEnvironment.java:326 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:168 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:301 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:315 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:811 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:230 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:156 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:326 at org.aspectj.tools.ajc.Main.runMain Main.java:240 at org.aspectj.tools.ajc.Main.main Main.java:83 no source information available ABORT Exception thrown from AspectJ 1.5.0 This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. Use generic type, not parameterized type when collecting itds and declares SomeAspect when completing type bindings when batch building with classpath: C:\Programme\Java\jre1.5.0_06\lib\ext\dnsns.jar;C:\Programme\Java\jre1.5.0_06\lib\ext\localedata.jar;C:\Programme\Java\jre1.5.0_06\lib\ext\sunjce_provider.jar;C:\Programme\Java\jre1.5.0_06\lib\ext\sunpkcs11.jar;C:\Programme\Java\aspectj1.5\lib\aspectjrt.jar; Use generic type, not parameterized type java.lang.IllegalStateException: Use generic type, not parameterized type at org.aspectj.weaver.ResolvedTypeMunger.&amp;lt;init&amp;gt; ResolvedTypeMunger.java:69 at org.aspectj.weaver.NewMethodTypeMunger.&amp;lt;init&amp;gt; NewMethodTypeMunger.java:28 at org.aspectj.ajdt.internal.compiler.ast.InterTypeMethodDeclaration.build InterTypeMethodDeclaration.java:197 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTypeAndPerClause AspectDeclaration.java:1066 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildInterTypeAndPerClause AjLookupEnvironment.java:442 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.collectAllITDsAndDeclares AjLookupEnvironment.java:326 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:168 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:301 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:315 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:811 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:230 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:156 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:326 at org.aspectj.tools.ajc.Main.runMain Main.java:240 at org.aspectj.tools.ajc.Main.main Main.java:83 1 fail|abort, 1 error</description>
    <commit commitTime="2006-03-28 09:34:35" id="4cbd5456f8d8886579970939d58992d32a1746bd"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/SimpleScope.java</file>
    </fixedFiles>
  </bug>
  <bug id="132591" reportTime="2006-03-20 15:51:00">
    <summary>Duplicate exception with aop.xml file on aspectpath</summary>
    <description>See also bug #57666 which is related but has to do with manifests : I have a META-INF/aop.xml file in my aspectpath and another one in the source path. That shouldn't even be a duplicate, because the aspectpath resource should NOT be copied to output at all. In AspectJ build: 1.5.1.20060309143651 I am now getting: java.util.zip.ZipException at java.util.zip.ZipOutputStream.putNextEntry ZipOutputStream.java:163 at java.util.jar.JarOutputStream.putNextEntry JarOutputStream.java:90 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.writeOutxmlFile AjBuildManager.java:549 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:320 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:163 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 ZipException thrown: duplicate entry: META-INF/aop.xml</description>
    <commit commitTime="2006-06-02 12:47:08" id="319a0d15703c098b74335ecb9672f58166bf3c5b"/>
    <fixedFiles>
      <file>ajde/testsrc/org/aspectj/ajde/NullIdeProperties.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/OutxmlTest.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="132926" reportTime="2006-03-22 20:05:00">
    <summary>Compiler crashes processing annotations</summary>
    <description>Just upgraded to latest AJDT Version: 1.3.1, Build id: 20060322082516 AspectJ version: 1.5.1.20060320075953 and the compiler crashed while rebulding the project which used to work fine using using the March 16th version . Retrying with 'clean' build produced the same crash. java.lang.NullPointerException at org.aspectj.weaver.AnnotationX.ensureAtTargetInitialized AnnotationX.java:158 at org.aspectj.weaver.AnnotationX.specifiesTarget AnnotationX.java:98 at org.aspectj.weaver.bcel.BcelWeaver.verifyTargetIsOK BcelWeaver.java:1450 at org.aspectj.weaver.bcel.BcelWeaver.applyDeclareAtType BcelWeaver.java:1417 at org.aspectj.weaver.bcel.BcelWeaver.weaveParentTypeMungers BcelWeaver.java:1366 at org.aspectj.weaver.bcel.BcelWeaver.weaveParentsFor BcelWeaver.java:1223 at org.aspectj.weaver.bcel.BcelWeaver.weaveParentsFor BcelWeaver.java:1211 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1058 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:311 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:183 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:845 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:241 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:161 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 NullPointerException thrown: null</description>
    <commit commitTime="2006-03-24 10:10:02" id="2fb86fe604b613774492df5185b1c5717c434d29"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/AnnotationX.java</file>
    </fixedFiles>
  </bug>
  <bug id="133117" reportTime="2006-03-24 04:47:00">
    <summary>Lots of warnings with noGuardForLazyTjp</summary>
    <description>When the noGuardForLazyTjp compiler option is set to warning or error and a piece of advice causes this warning to show up, you get one warning for every join point matched by the advice. I think just one would probably be enough...</description>
    <commit commitTime="2006-05-12 15:34:39" id="3fa4d24ac16e94ee40b824fe27830fe7a34866a3"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</file>
      <file>weaver/src/org/aspectj/weaver/Lint.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="133298" reportTime="2006-03-26 12:24:00">
    <summary>Method/ctor targetted for multiple annotations via declare @ only gets one of them.</summary>
    <description>reported on the list by Brian Ericson in the thread "Introduction advice &amp;amp; annotations"</description>
    <commit commitTime="2006-03-26 18:15:39" id="f963fc4dcd3f0391e6eb234c3346d16eb5bdb891"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
      <file>tests/bugs151/Deca/DecA.java</file>
    </fixedFiles>
  </bug>
  <bug id="133307" reportTime="2006-03-26 21:05:00">
    <summary>declare parents implementing generic interface referencing same type</summary>
    <description>I have the following construct: public interface TestIF&amp;lt;T extends TestIF&amp;gt; {} public class TestClass {} public aspect TestAspect { declare parents: TestClass implements TestIF&amp;lt;TestClass&amp;gt;; } The later aspect does not compile, although public class TestClass implements TestIF&amp;lt;TestClass&amp;gt; { } is a valid class.</description>
    <commit commitTime="2006-03-27 13:42:23" id="c9a60e519d73bb7aa4d8cf4615445089202bd3ad"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
      <file>weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java</file>
    </fixedFiles>
  </bug>
  <bug id="134063" reportTime="2006-03-30 08:03:00">
    <summary>ajdoc is broken</summary>
    <description>Using aspectj-DEVELOPMENT-20060329133605.jar from doc/examples/spacewar: ajdoc -private @demo.lst gives the usual Generating and Decorating etc messages for a while, but then falls over: An internal error occured in ajdoc Please copy the following text into an email message and send it, along with any additional information you can add to: aspectj-dev@eclipse.org java.lang.OutOfMemoryError: Java heap space java.lang.OutOfMemoryError: Java heap space this is with a 1.5.0 jvm why say email the dev list, instead of saying raise a bug?</description>
    <commit commitTime="2006-03-31 14:38:58" id="c3f3a995af26e148d4dd497ed0eff4ebb0787d83"/>
    <fixedFiles>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/AjdocTestCase.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/SpacewarTestCase.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/StructureUtil.java</file>
    </fixedFiles>
  </bug>
  <bug id="134371" reportTime="2006-04-01 12:05:00">
    <summary>ClassCastException in AjState.recordClassFile</summary>
    <description>I got this exception while working on a static inner aspect. A full rebuild avoided the problem. java.lang.ClassCastException: org.aspectj.weaver.MissingResolvedTypeWithKnownSignature at org.aspectj.ajdt.internal.core.builder.AjState.recordClassFile AjState.java:774 at org.aspectj.ajdt.internal.core.builder.AjState.noteResult AjState.java:627 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$3.acceptResult AjBuildManager.java:867 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing AjCompilerAdapter.java:206 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$4$6b855184 CompilerAdapter.aj:90 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:528 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:845 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:266 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:168 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191</description>
    <commit commitTime="2006-05-05 09:46:43" id="299c3a4f2c5205102b89d63c4a8f1bccb158eef1"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="134471" reportTime="2006-04-03 05:32:00">
    <summary>adding whitespace to an aspect loses crosscutting</summary>
    <description>Given the following aspect: package pkg; public aspect A { pointcut p : call * pkg.*.* .. ; before : p { } } Adding a whitespace or anything else in the aspect and saving results in an incremental build and all crosscutting information is lost. Everything is regainded after a full build. This is a regression from AspectJ 1.5.0 and could be related to bug 133532 .</description>
    <commit commitTime="2006-05-04 07:24:47" id="c82cca35c5df8536fb7fd38a8db9eb757a03ed0d"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="134541" reportTime="2006-04-03 12:03:00">
    <summary>adviceDidNotMatch's line number doesn't keep up with line number of advice</summary>
    <description>When advice doesn't match in a 1.5.0 enabled project, there is an adviceDidNotMatch warning against the line number of the advice. If you insert a line before this advice and save then the warning stays associated with the original line and not the new one. Full building puts the warning against the new line. This is a regression and didn't happen in AJ 1.5.0.</description>
    <commit commitTime="2006-04-06 10:44:14" id="94d8b82fbf3cb18a14d77508b3adad6d50434080"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
      <file>weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java</file>
      <file>weaver/src/org/aspectj/weaver/CrosscuttingMembers.java</file>
    </fixedFiles>
  </bug>
  <bug id="135001" reportTime="2006-04-05 07:10:00">
    <summary>NPE at at org.aspectj.weaver.bcel.BcelShadow.weaveAroundInline</summary>
    <description>java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelShadow.weaveAroundInline BcelShadow.java:2109 at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:232 at org.aspectj.weaver.Shadow.implementMungers Shadow.java:639 at org.aspectj.weaver.Shadow.implement Shadow.java:456 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:2236 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:491 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:109 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1560 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1511 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1291 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1113 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:311 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:183 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:862 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:242 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:161 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191</description>
    <commit commitTime="2006-04-06 11:45:02" id="1a6f69583137f03d2a8052148a17eebe8e79e162"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
      <file>tests/src/org/aspectj/systemtest/AllTests15.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/bcel/AsmDelegateTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="135052" reportTime="2006-04-05 11:36:00">
    <summary>AJDT crashes during compilation</summary>
    <description>Just upgraded to the latest AJDT Build: 20060405045058 with AspectJ 1.5.1 . AJDT is crashing during compilation. java.lang.NullPointerException at org.aspectj.ajdt.internal.core.builder.AsmElementFormatter.setParameters AsmElementFormatter.java:302 at org.aspectj.ajdt.internal.core.builder.AsmElementFormatter.genLabelAndKind AsmElementFormatter.java:254 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.visit AsmHierarchyBuilder.java:390 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse MethodDeclaration.java:185 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse TypeDeclaration.java:1250 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.traverse QualifiedAllocationExpression.java:392 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse MessageSend.java:467 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.traverse ConstructorDeclaration.java:480 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse TypeDeclaration.java:1195 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse CompilationUnitDeclaration.java:339 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.internalBuild AsmHierarchyBuilder.java:143 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.buildStructureForCompilationUnit AsmHierarchyBuilder.java:85 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishedCompilationUnit EclipseFactory.java:927 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing AjCompilerAdapter.java:201 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$4$6b855184 CompilerAdapter.aj:90 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:528 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:862 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:242 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:161 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 NullPointerException thrown: null</description>
    <commit commitTime="2006-04-06 08:18:53" id="e9a7c5036c3f5b68ba55e7b5ba56db27ee31149e"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/ResolvedType.java</file>
    </fixedFiles>
  </bug>
  <bug id="135068" reportTime="2006-04-05 12:15:00">
    <summary>VerifyError with LTW and @AJ style aspects</summary>
    <description>I get "VerifyError: Incompatible object argument for function call" error when using LTW with @Aspect stype aspects. Interestingly enough, LTW works as expected with equivalent .aj style aspect. Compile time weaving works with both aspect styles. Tested on Linux with AspectJ 1.5.0, 1.5.1 and DEVELOPMENT-20060404163823 and SUN 1.5.0_06 and IBM 1.5.0SR1 JVMs. I will attach example project shortly.</description>
    <commit commitTime="2006-05-16 07:38:53" id="9ffc63b51aa49fa3bb67a4a1c40dd7d1fe4c97ae"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java</file>
    </fixedFiles>
  </bug>
  <bug id="135780" reportTime="2006-04-09 22:27:00">
    <summary>Java 1.2 dependency in aspectjrt.jar bug with fix</summary>
    <description>The thisJoinPoint.printString fails on a 1.1 VM because it relies on a java.lang.ref.SoftReference. I need this to work because we're using AspectJ on an embedded device that is still using a pre-1.2 VM. The problem lies in org.aspectj.runtime.reflect.SignatureImpl. The attached patch fixes it and passes all the tests. I tested the failing program manually on a 1.1 VM, but automating the test would require adding a 1.1 VM to the regression test infrastructure. Sample: public aspect Java11Test { before : execution * * .. { System.out.println thisJoinPoint.toString ; } public static void main String args[] {} } &amp;gt;ajc -target 1.1 Java11Test.aj &amp;gt;\java\jre1.1.8_010\bin\jre -cp .;%CLASSPATH% Java11Test Exception in thread "main" java.lang.NoClassDefFoundError: java/lang/ref/SoftRef erence at org.aspectj.runtime.reflect.JoinPointImpl$StaticPartImpl.toString Joi nPointImpl.java:43 at org.aspectj.runtime.reflect.JoinPointImpl$StaticPartImpl.toString Joi nPointImpl.java:48 at Java11Test.ajc$before$Java11Test$1$3444dde4 Java11Test.aj:3 at Java11Test.main Java11Test.aj</description>
    <commit commitTime="2006-05-03 16:18:25" id="cb5dfe759852d4965c692934ed7e14c41f61b715"/>
    <fixedFiles>
      <file>runtime/src/org/aspectj/runtime/reflect/SignatureImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="136026" reportTime="2006-04-10 21:41:00">
    <summary>cflow VerifyError</summary>
    <description>While following up a mailing list question, I blundered into a bug I don't understand. Same result in 1.5.1 command-line and 1.5.1a via AJDT 1.3.1 . ---------------- output Starting CflowOrder.main .. Exception in thread "main" java.lang.VerifyError: class: bugs/CflowOrder$A, method: foo signature: V Incompatible object argument for function call at bugs.CflowOrder.main CflowOrder.java:20 ---------------- bugs/CflowOrder.java package bugs; import java.io.PrintStream; import java.lang.annotation.*; import org.aspectj.lang.JoinPoint; public class CflowOrder { public static void main String[] args { Log.print "Starting CflowOrder.main .. " ; A.main null ; Log.print "Ending CflowOrder.main .. " ; } @Retention value = RetentionPolicy.RUNTIME @interface Annotation { String value ; } static class A { @Annotation "A.foo" void foo { new B .foo ; Log.print "A.foo " ; } public static void main String[] args { new A .foo ; Log.print "A.main .. " ; } } static class B { @Annotation "B.foo" void foo { Log.print "B.foo " ; } } static class Log implements IAspect { static final PrintStream out = System.err; static void print String label { out.println label ; } static void print String label, JoinPoint tjp, JoinPoint.StaticPart sp, Object a { out.println label ; out.println "\tJoin point: " + tjp ; out.println "\tEnclosing join point: " + sp ; out.println "\tAnnotation: " + a ; } } static aspect Logger implements IAspect { //declare error: execution * * .. &amp;amp;&amp;amp; !within Log : "er"; // before : cflow execution void CflowOrder.main String[] // &amp;amp;&amp;amp; !call * IAspect+.* .. &amp;amp;&amp;amp; ! within IAspect+ { // Log.print "cflow ..main .. ", thisJoinPoint, // thisEnclosingJoinPointStaticPart, null ; // } } interface IAspect {} static aspect MyAspect implements IAspect { pointcut annotated Annotation a : call @Annotation * * .. &amp;amp;&amp;amp; @annotation a ; pointcut belowAnnotated : cflowbelow annotated Annotation ; pointcut topAnnotated Annotation a : annotated a &amp;amp;&amp;amp; !belowAnnotated ; pointcut notTopAnnotated Annotation a, Annotation aTop : annotated a &amp;amp;&amp;amp; cflowbelow annotated aTop ; // pointcut topAnnotated Annotation a : annotated a // &amp;amp;&amp;amp; !cflowbelow annotated Annotation ; // // pointcut notTopAnnotated Annotation a, Annotation aTop : annotated a // &amp;amp;&amp;amp; cflowbelow topAnnotated aTop ; // if this first, then no nonTopAnnotated advice before Annotation a : topAnnotated a { Log.print "topAnnotated", thisJoinPoint, thisEnclosingJoinPointStaticPart, a ; } // if topAnnotated is first, this does not run before Annotation a, Annotation aTop : notTopAnnotated a, aTop { Log.print "nonTopAnnotated", thisJoinPoint, thisEnclosingJoinPointStaticPart, a ; } } }</description>
    <commit commitTime="2006-05-12 12:32:42" id="64d321521a3e66e39510c2c150ba6b06ca40cc68"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="136258" reportTime="2006-04-11 23:29:00">
    <summary>Stack Overflow in compiler On Valid 100% Pure Java</summary>
    <description>I closed some projects to get rid of nagging exceptions from duplicate META-INF/aop.xml files. I'm using the latest dev build with 3.2M6. Incremental recompilation produced: java.lang.StackOverflowError at java.util.Vector.addElement Vector.java:581 at java.util.Stack.push Stack.java:44 at org.aspectj.bridge.context.CompilationAndWeavingContext.enteringPhase CompilationAndWeavingContext.java:178 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.collectAllITDsAndDeclares AjLookupEnvironment.java:319 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doSupertypesFirst AjLookupEnvironment.java:301 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.collectAllITDsAndDeclares AjLookupEnvironment.java:329 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doSupertypesFirst AjLookupEnvironment.java:301 at ... repeats many times at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doSupertypesFirst AjLookupEnvironment.java:301 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.collectAllITDsAndDeclares AjLookupEnvironment.java:322 StackOverflowError thrown: null</description>
    <commit commitTime="2006-04-13 09:24:46" id="dc4e07a6b04b5b44cbb2134119f9b223add3ca65"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
    </fixedFiles>
  </bug>
  <bug id="136585" reportTime="2006-04-13 05:38:00">
    <summary>NullPointerException in PerObjectInterfaceTypeMunger.java:33</summary>
    <description>AspectJ 1.5.1a + AJDT 1.4.0-dev on Eclipse 3.2M6 Using the Sapcewar example, open Game.java and add: public void foo {} save and an incremental build will fail with: java.lang.NullPointerException at org.aspectj.weaver.PerObjectInterfaceTypeMunger.equals PerObjectInterfaceTypeMunger.java:33 at org.aspectj.weaver.bcel.BcelTypeMunger.equals BcelTypeMunger.java:1672 at java.util.AbstractList.equals AbstractList.java:610 at org.aspectj.weaver.CrosscuttingMembers.replaceWith CrosscuttingMembers.java:321 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect CrosscuttingMembersSet.java:73 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addCrosscuttingStructures AjLookupEnvironment.java:397 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.collectAllITDsAndDeclares AjLookupEnvironment.java:333 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:173 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:301 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:315 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:862 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:269 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:168 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 NullPointerException thrown: null</description>
    <commit commitTime="2006-04-19 13:36:39" id="1535ee721c16509713642e20316b226ece69fda9"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/PerObjectInterfaceTypeMunger.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="136665" reportTime="2006-04-13 11:34:00">
    <summary>Bug: ajc fails on missing classpath entries with fix</summary>
    <description>[iajc] error at no source information available [iajc] File.aj:0::0 Internal compiler error [iajc] org.aspectj.weaver.BCException: Can't open archive: missingjar [iajc] when resolving types defined in compilation unit File.aj [iajc] when processing compilation unit File.aj [iajc] when batch building BuildConfig[null] #Files=14 [iajc] [iajc] at org.aspectj.weaver.bcel.ClassPathManager$ZipFileEntry.ensureO pen ClassPathManager.java:258 [iajc] at org.aspectj.weaver.bcel.ClassPathManager$ZipFileEntry.find Cl assPathManager.java:225 [iajc] at org.aspectj.weaver.bcel.ClassPathManager.find ClassPathManage r.java:92 [iajc] at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate BcelWorld.j ava:287 [iajc] at org.aspectj.weaver.World.resolveToReferenceType World.java:33 5 [iajc] at org.aspectj.weaver.World.resolve World.java:251 [iajc] at org.aspectj.weaver.patterns.WildTypePattern.lookupTypeInWorld WildTypePattern.java:716 [iajc] at org.aspectj.weaver.patterns.WildTypePattern.resolveBindingsFr omFullyQualifiedTypeName WildTypePattern.java:690 [iajc] at org.aspectj.weaver.patterns.WildTypePattern.resolveBindings W ildTypePattern.java:623 [iajc] at org.aspectj.weaver.patterns.SignaturePattern.resolveBindings SignaturePattern.java:82 [iajc] at org.aspectj.weaver.patterns.KindedPointcut.resolveBindings Ki ndedPointcut.java:259 [iajc] at org.aspectj.weaver.patterns.AndPointcut.resolveBindings AndPo intcut.java:74 [iajc] at org.aspectj.weaver.patterns.Pointcut.resolve Pointcut.java:19 4 [iajc] at org.aspectj.ajdt.internal.compiler.ast.PointcutDesignator.fin ishResolveTypes PointcutDesignator.java:84 [iajc] at org.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration.reso lveStatements AdviceDeclaration.java:118 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMet hodDeclaration.resolve AbstractMethodDeclaration.java:400 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclara tion.resolve TypeDeclaration.java:1088 [iajc] at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.reso lve AspectDeclaration.java:116 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclara tion.resolve TypeDeclaration.java:1137 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Compilation UnitDeclaration.resolve CompilationUnitDeclaration.java:305 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.proces s Compiler.java:514 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compil e Compiler.java:329 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.perform Compilation AjBuildManager.java:845 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:241 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBu ild AjBuildManager.java:161 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:1 12 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java: 60 [iajc] at org.aspectj.tools.ajc.Main.run Main.java:356 [iajc] at org.aspectj.tools.ajc.Main.runMain Main.java:246 [iajc] at org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM AjcTas k.java:1262 [iajc] at org.aspectj.tools.ant.taskdefs.AjcTask.execute AjcTask.java:1 056 [iajc] at org.apache.tools.ant.UnknownElement.execute UnknownElement.ja va:275 [iajc] at org.apache.tools.ant.Task.perform Task.java:364 [iajc] at org.apache.tools.ant.Target.execute Target.java:341 [iajc] at org.apache.tools.ant.Target.performTasks Target.java:369 [iajc] at org.apache.tools.ant.Project.executeTarget Project.java:1214 [iajc] at org.apache.tools.ant.taskdefs.Ant.execute Ant.java:386 [iajc] at org.apache.tools.ant.taskdefs.CallTarget.execute CallTarget.j ava:106 [iajc] at org.apache.tools.ant.UnknownElement.execute UnknownElement.ja va:275 [iajc] at org.apache.tools.ant.Task.perform Task.java:364 [iajc] at org.apache.tools.ant.Target.execute Target.java:341 [iajc] at org.apache.tools.ant.Target.performTasks Target.java:369 [iajc] at org.apache.tools.ant.Project.executeTarget Project.java:1214 [iajc] at org.apache.tools.ant.Project.executeTargets Project.java:1062 [iajc] at org.apache.tools.ant.Main.runBuild Main.java:673 [iajc] at org.apache.tools.ant.Main.startAnt Main.java:188 [iajc] at org.apache.tools.ant.launch.Launcher.run Launcher.java:196 [iajc] at org.apache.tools.ant.launch.Launcher.main Launcher.java:55 [iajc] Caused by: java.util.zip.ZipException: error in opening zip file [iajc] java.util.zip.ZipException: error in opening zip file [iajc] at java.util.zip.ZipFile.open Native Method [iajc] at java.util.zip.ZipFile.&amp;lt;init&amp;gt; ZipFile.java:111 [iajc] at java.util.zip.ZipFile.&amp;lt;init&amp;gt; ZipFile.java:127 [iajc] at org.aspectj.weaver.bcel.ClassPathManager$ZipFileEntry.ensureO pen ClassPathManager.java:252 [iajc] at org.aspectj.weaver.bcel.ClassPathManager$ZipFileEntry.find Cl assPathManager.java:225 [iajc] at org.aspectj.weaver.bcel.ClassPathManager.find ClassPathManage r.java:92 [iajc] at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate BcelWorld.j ava:287 [iajc] at org.aspectj.weaver.World.resolveToReferenceType World.java:33 5 [iajc] at org.aspectj.weaver.World.resolve World.java:251 [iajc] at org.aspectj.weaver.patterns.WildTypePattern.lookupTypeInWorld WildTypePattern.java:716 [iajc] at org.aspectj.weaver.patterns.WildTypePattern.resolveBindingsFr omFullyQualifiedTypeName WildTypePattern.java:690 [iajc] at org.aspectj.weaver.patterns.WildTypePattern.resolveBindings W ildTypePattern.java:623 [iajc] at org.aspectj.weaver.patterns.SignaturePattern.resolveBindings SignaturePattern.java:82 [iajc] at org.aspectj.weaver.patterns.KindedPointcut.resolveBindings Ki ndedPointcut.java:259 [iajc] at org.aspectj.weaver.patterns.AndPointcut.resolveBindings AndPo intcut.java:74 [iajc] at org.aspectj.weaver.patterns.Pointcut.resolve Pointcut.java:19 4 [iajc] at org.aspectj.ajdt.internal.compiler.ast.PointcutDesignator.fin ishResolveTypes PointcutDesignator.java:84 [iajc] at org.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration.reso lveStatements AdviceDeclaration.java:118 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMet hodDeclaration.resolve AbstractMethodDeclaration.java:400 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclara tion.resolve TypeDeclaration.java:1088 [iajc] at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.reso lve AspectDeclaration.java:116 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclara tion.resolve TypeDeclaration.java:1137 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Compilation UnitDeclaration.resolve CompilationUnitDeclaration.java:305 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.proces s Compiler.java:514 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compil e Compiler.java:329 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.perform Compilation AjBuildManager.java:845 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:241 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBu ild AjBuildManager.java:161 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:1 12 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java: 60 [iajc] at org.aspectj.tools.ajc.Main.run Main.java:356 [iajc] at org.aspectj.tools.ajc.Main.runMain Main.java:246 [iajc] at org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM AjcTas k.java:1262 [iajc] at org.aspectj.tools.ant.taskdefs.AjcTask.execute AjcTask.java:1 056 [iajc] at org.apache.tools.ant.UnknownElement.execute UnknownElement.ja va:275 [iajc] at org.apache.tools.ant.Task.perform Task.java:364 [iajc] at org.apache.tools.ant.Target.execute Target.java:341 [iajc] at org.apache.tools.ant.Target.performTasks Target.java:369 [iajc] at org.apache.tools.ant.Project.executeTarget Project.java:1214 [iajc] at org.apache.tools.ant.taskdefs.Ant.execute Ant.java:386 [iajc] at org.apache.tools.ant.taskdefs.CallTarget.execute CallTarget.j ava:106 [iajc] at org.apache.tools.ant.UnknownElement.execute UnknownElement.ja va:275 [iajc] at org.apache.tools.ant.Task.perform Task.java:364 [iajc] at org.apache.tools.ant.Target.execute Target.java:341 [iajc] at org.apache.tools.ant.Target.performTasks Target.java:369 [iajc] at org.apache.tools.ant.Project.executeTarget Project.java:1214 [iajc] at org.apache.tools.ant.Project.executeTargets Project.java:1062 [iajc] at org.apache.tools.ant.Main.runBuild Main.java:673 [iajc] at org.apache.tools.ant.Main.startAnt Main.java:188 [iajc] at org.apache.tools.ant.launch.Launcher.run Launcher.java:196 [iajc] at org.apache.tools.ant.launch.Launcher.main Launcher.java:55 [iajc] abort ABORT -- BCException Can't open archive: wissing.jar [iajc] when resolving types defined in compilation unit File.aj [iajc] when processing compilation unit File.aj [iajc] when batch building BuildConfig[null] #Files=14</description>
    <commit commitTime="2006-04-18 10:51:38" id="d1a252e911bd19747b0cd6815291f62706f202d6"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/ClassPathManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="136707" reportTime="2006-04-13 14:23:00">
    <summary>iajc should print summary like javac</summary>
    <description>The iajc ant task should produce a summary of what it is doing, like the javac task does: [javac] Compiling 189 source files to C:\project\classes</description>
    <commit commitTime="2006-06-13 19:45:44" id="008efca98bdfe5cda6c32ec75575facf7da2c687"/>
    <fixedFiles>
      <file>taskdefs/testsrc/org/aspectj/tools/ant/taskdefs/AjcTaskTest.java</file>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="137235" reportTime="2006-04-18 11:17:00">
    <summary>AJC can't resolve non-jar classpath entries</summary>
    <description>I am currently using the maven aspectj plugin, and all of my jar artifacts are are re-named to .bndl for reasons beyond my control . Using the aj compiler, I am getting errors when using these .bndl artifacts in the classpath. I would expect that ajc would behave consistently with javac, and not make a distinction solely based on the extension of the classpath entry. Furthermore, I should be able to name an output directory "classes.jar", and be able to use it as a classpath entry. The message "directory classpath entry does not exist" is inaccurate, since the .bndl entry isn't a directory and it does exist. C:\NGST\app\java\util\maven-target&amp;gt;ajc -verbose @classesbuilddef.lst zipfile classpath entry does not exist: C:\j2sdk1.4.2_10\jre\lib\i18n.jar directory classpath entry does not exist: C:\j2sdk1.4.2_10\jre\classes directory classpath entry does not exist: C:\NGST\app\java\logging\maven-target\logging-1.20-SNAPSHOT.bndl compiling C:\NGST\app\java\util\src\com\dcx\NGST\beancontainer\BeanFactoryLevel.java compiling C:\NGST\app\java\util\src\com\dcx\NGST\core\exceptions\UnSupportedMethodException.java</description>
    <commit commitTime="2006-05-04 07:14:47" id="5a01932b9dbdf81fe41e029fa56ede17364a2c2e"/>
    <fixedFiles>
      <file>ajde/testsrc/org/aspectj/ajde/internal/LstBuildConfigManagerTest.java</file>
      <file>loadtime/testsrc/org/aspectj/weaver/loadtime/WeavingURLClassLoaderTest.java</file>
      <file>testing/newsrc/org/aspectj/testing/RunSpec.java</file>
      <file>testing/src/org/aspectj/testing/harness/bridge/Sandbox.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/ClassPathManager.java</file>
      <file>taskdefs/testsrc/org/aspectj/tools/ant/taskdefs/AjcTaskTest.java</file>
      <file>util/src/org/aspectj/util/FileUtil.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/ResourceCopyTestCase.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/tools/ajc/AjcTestCase.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/ltw/LTWTests.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
      <file>util/src/org/aspectj/util/Reflection.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/NullIdeProperties.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java</file>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</file>
      <file>testing/newsrc/org/aspectj/testing/CompileSpec.java</file>
    </fixedFiles>
  </bug>
  <bug id="137479" reportTime="2006-04-19 07:45:00">
    <summary>Problems checking override/hiding rules for LTW of decp</summary>
    <description>Errors like this are possible: info weaving 'com.ibm.ws.classloader.CompoundClassLoader' info weaver operating in reweavajc -1able mode. Need to verify any required types exist. error at com\ibm\ws\classloader\CompoundClassLoader.java::0 The return type is incompatible with java.lang.ClassLoader.access$000 Where access$000 is static...</description>
    <commit commitTime="2006-04-19 11:45:46" id="980483b367011c75ed7e90b2ddb5a06b34199731"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="137496" reportTime="2006-04-19 10:29:00">
    <summary>pointcut not recognized when using generics in interface method</summary>
    <description>I use AspectJ version 1.5.0.20051220093604 and I also tried it with version 1.5.120060410063641. When we have an interface that uses generics and that defines a method with generics as follow: public interface ParentGeneric&amp;lt;ENTITY&amp;gt; { public ENTITY callParentMethod ENTITY myEntity ; } If another interface extends this interface, for example: public interface Child extends ParentGeneric&amp;lt;String&amp;gt; { public void callChildMethod ; } ... and we use this interface to call the parent's method, the aspectJ compiler doesn't recognize the call. For example, assume the following method: public static void main String[] args { Child test = Child new Object ; test.callParentMethod "myString" ; } In such an example, if I declare a pointcut to catch up the call to "callParentMethod", the compiler doesn't recognize it and no match exists for the defined advises. In this example, the following pointcut doesn't match the call made by our main method: pointcut parentMock : call * callParentMethod .. ; In the main method, if I use a class that implements Child and I use this class instead of a Child instance, the compiler recognize the call defined by our pointcut. Here's an example of something that would work: public class MyClass implements Child { public void callChildMethod {} public String callParentMethod String myString { return null; } } public class MyMainClass { public static void main String[] args { MyClass test = new MyClass ; test.callParentMethod "myString" ; } } Again, if instead we use the interface, the pointcut doesn't match anything. Thanks Phil</description>
    <commit commitTime="2006-04-21 17:55:11" id="5b354c21ff2b4754522f75324f8094958804a753"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="138215" reportTime="2006-04-24 12:22:00">
    <summary>Reference pointcut fails inside @DeclareWarning</summary>
    <description>When a pointcut expression used with an @DeclareWarning construct contains a reference pointcut, the warning is correctly produced at matched join points, but the compiler also gives an error saying that the referenced pointcut cannot be found.</description>
    <commit commitTime="2006-04-24 17:46:06" id="6b2526fdda56e30d8a151ca0b9bd16ecb690d3d0"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="138219" reportTime="2006-04-24 12:47:00">
    <summary>Can't use a FQ Reference pointcut in any pointcut expression referenced by a per-clause</summary>
    <description>A pointcut expression for a per-clause fails to resolve if it contains any reference pointcuts referring to pointcut expressions defined in other types. Even if that is indirectly, through a local named pointcut .</description>
    <commit commitTime="2006-05-16 15:43:08" id="b166a7e6163889eb951f82655f0f49bfc26a49f0"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/GenericITDsDesign.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/bcel/NonstaticWeaveTestCase.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedType.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/bcel/PointcutResidueTestCase.java</file>
      <file>weaver/src/org/aspectj/weaver/CrosscuttingMembersSet.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/bcel/WeaveOrderTestCase.java</file>
      <file>weaver/src/org/aspectj/weaver/CrosscuttingMembers.java</file>
    </fixedFiles>
  </bug>
  <bug id="138223" reportTime="2006-04-24 13:17:00">
    <summary>Compiler crash on two binding @xxx pcds in one compound expression</summary>
    <description>junit.framework.AssertionFailedError: test "Double at annotation matching no binding " failed test "Double at annotation matching no binding " failed Unexpected warning messages: warning at before : transactionalOperation { ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ /private/tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj:20:0::0 advice defined in DoubleAnnotationMatching has not been applied [Xlint:adviceDidNotMatch] Unexpected fail messages: abort trouble in: class Foo extends java.lang.Object: void &amp;lt;init&amp;gt; : ALOAD_0 // LFoo; this line 26 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V constructor-execution void Foo.&amp;lt;init&amp;gt; | RETURN constructor-execution void Foo.&amp;lt;init&amp;gt; end void &amp;lt;init&amp;gt; public void foo org.aspectj.weaver.MethodDeclarationLineNumber: 28:533 : method-execution void Foo.foo | RETURN line 28 method-execution void Foo.foo end public void foo public void bar org.aspectj.weaver.MethodDeclarationLineNumber: 30:563 : method-execution void Foo.bar | RETURN line 30 method-execution void Foo.bar end public void bar end class Foo -- BCException Impossible! annotation=[Tx] shadow=[method-execution void Foo.foo at /private/tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj:28::533] pointcut is at [/private/tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj:15::316] when implementing on shadow method-execution void Foo.foo when weaving type Foo when weaving classes when weaving when batch building BuildConfig[null] #Files=1 Impossible! annotation=[Tx] shadow=[method-execution void Foo.foo at /private/tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj:28::533] pointcut is at [/private/tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj:15::316] when implementing on shadow method-execution void Foo.foo when weaving type Foo when weaving classes when weaving when batch building BuildConfig[null] #Files=1 org.aspectj.weaver.BCException: Impossible! annotation=[Tx] shadow=[method-execution void Foo.foo at /private/tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj:28::533] pointcut is at [/private/tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj:15::316] when implementing on shadow method-execution void Foo.foo when weaving type Foo when weaving classes when weaving when batch building BuildConfig[null] #Files=1 at org.aspectj.weaver.patterns.AnnotationPointcut.findResidueInternal AnnotationPointcut.java:201 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java:267 at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal AndPointcut.java:93 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java:267 at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal AndPointcut.java:93 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java:267 at org.aspectj.weaver.patterns.IfPointcut.findResidueInternal IfPointcut.java:173 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java:267 at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal AndPointcut.java:93 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java:267 at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal AndPointcut.java:93 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java:267 at org.aspectj.weaver.patterns.OrPointcut.findResidueInternal OrPointcut.java:96 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java:267 at org.aspectj.weaver.bcel.BcelAdvice.specializeOn BcelAdvice.java:132 at org.aspectj.weaver.bcel.BcelShadow.prepareForMungers BcelShadow.java:325 at org.aspectj.weaver.Shadow.implement Shadow.java:455 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:2236 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:491 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:109 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1560 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1511 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1291 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1113 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:311 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:183 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:862 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:242 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:161 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:114 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:367 at org.aspectj.tools.ajc.Main.runMain Main.java:246 at org.aspectj.tools.ajc.Ajc.compile Ajc.java:199 at org.aspectj.tools.ajc.Ajc.compile Ajc.java:163 at org.aspectj.tools.ajc.AjcTestCase.ajc AjcTestCase.java:510 at org.aspectj.testing.CompileSpec.execute CompileSpec.java:53 at org.aspectj.testing.AjcTest.runTest AjcTest.java:68 at org.aspectj.testing.XMLBasedAjcTestCase.runTest XMLBasedAjcTestCase.java:111 at org.aspectj.systemtest.ajc152.Ajc152Tests.testDoubleAnnotationMatching_pr138221 Ajc152Tests.java:37 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:585 at junit.framework.TestCase.runTest TestCase.java:154 at junit.framework.TestCase.runBare TestCase.java:127 at junit.framework.TestResult$1.protect TestResult.java:106 at junit.framework.TestResult.runProtected TestResult.java:124 at junit.framework.TestResult.run TestResult.java:109 at junit.framework.TestCase.run TestCase.java:118 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests RemoteTestRunner.java:478 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run RemoteTestRunner.java:344 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main RemoteTestRunner.java:196 command was: ajc -classpath /Users/adrian/projects/aspectjdev/lib/test/aspectjrt.jar:../testing-client/bin:../runtime/bin:../aspectj5rt/bin:../lib/junit/junit.jar:../bridge/bin:../loadtime/bin:../weaver/bin:../weaver5/bin:../aj-build/jars/bridge.jar:../aj-build/jars/util.jar:../aj-build/jars/loadtime.jar:../aj-build/jars/weaver.jar:../aj-build/jars/weaver5.jar:../aj-build/jars/asm.jar:../lib/test/testing-client.jar:../lib/test/aspectjrt.jar:/tmp/ajcSandbox/ajcTest18924.tmp -1.5 /tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj -d /tmp/ajcSandbox/ajcTest18924.tmp at junit.framework.Assert.fail Assert.java:47 at org.aspectj.tools.ajc.AjcTestCase.assertMessages AjcTestCase.java:452 at org.aspectj.testing.CompileSpec.execute CompileSpec.java:56 at org.aspectj.testing.AjcTest.runTest AjcTest.java:68 at org.aspectj.testing.XMLBasedAjcTestCase.runTest XMLBasedAjcTestCase.java:111 at org.aspectj.systemtest.ajc152.Ajc152Tests.testDoubleAnnotationMatching_pr138221 Ajc152Tests.java:37 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:585 at junit.framework.TestCase.runTest TestCase.java:154 at junit.framework.TestCase.runBare TestCase.java:127 at junit.framework.TestResult$1.protect TestResult.java:106 at junit.framework.TestResult.runProtected TestResult.java:124 at junit.framework.TestResult.run TestResult.java:109 at junit.framework.TestCase.run TestCase.java:118 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests RemoteTestRunner.java:478 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run RemoteTestRunner.java:344 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main RemoteTestRunner.java:196</description>
    <commit commitTime="2006-05-17 15:48:34" id="6b2d9ae90158bd4e5cda5ecea5f3787400bab5af"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="138286" reportTime="2006-04-24 18:29:00">
    <summary>perthis causes ClassCastException</summary>
    <description>When using perthis with an aspect, I see the following Internal Compiler AJDT 1.3.1 / AspectJ 1.5.1a Build 20060406092046 Eclipse 3.1.2, Windows XP, JDK 1.5 Error: java.lang.ClassCastException at org.aspectj.weaver.patterns.PerThisOrTargetPointcutVisitor.getPerTypePointcut PerThisOrTargetPointcutVisitor.java:41 at org.aspectj.weaver.patterns.PerThisOrTargetPointcutVisitor.visit PerThisOrTargetPointcutVisitor.java:108 at org.aspectj.weaver.patterns.AndPointcut.accept AndPointcut.java:119 at org.aspectj.weaver.patterns.PerThisOrTargetPointcutVisitor.getPerTypePointcut PerThisOrTargetPointcutVisitor.java:41 at org.aspectj.weaver.PerObjectInterfaceTypeMunger.getTestTypePattern PerObjectInterfaceTypeMunger.java:64 at org.aspectj.weaver.PerObjectInterfaceTypeMunger.matches PerObjectInterfaceTypeMunger.java:85 at org.aspectj.weaver.ConcreteTypeMunger.matches ConcreteTypeMunger.java:65 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:508 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:109 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1560 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1511 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1291 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1089 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:311 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:183 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:862 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:242 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:161 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:278 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:168 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 trouble in: public abstract class org.apache.tapestry.internal.aspects.AbstractClassTargetting extends java.lang.Object: public void &amp;lt;init&amp;gt; : ALOAD_0 // Lorg/apache/tapestry/internal/aspects/AbstractClassTargetting; this line 10 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V initialization void org.apache.tapestry.internal.aspects.AbstractClassTargetting.&amp;lt;init&amp;gt; | ALOAD_0 | INVOKEVIRTUAL java.lang.Object.getClass Ljava/lang/Class; | LDC org.apache.tapestry.internal.annotations.Synchronized | INVOKEVIRTUAL java.lang.Class.isAnnotationPresent Ljava/lang/Class; Z | IFEQ L0 | ALOAD_0 | INVOKESTATIC org.apache.tapestry.internal.aspects.InternalSynchronization.ajc$perObjectBind Ljava/lang/Object; V | constructor-execution void org.apache.tapestry.internal.aspects.AbstractClassTargetting.&amp;lt;init&amp;gt; | | L0: ALOAD_0 | | INVOKEVIRTUAL java.lang.Object.getClass Ljava/lang/Class; | | LDC org.apache.tapestry.internal.annotations.Synchronized | | INVOKEVIRTUAL java.lang.Class.isAnnotationPresent Ljava/lang/Class; Z | | IFEQ L1 | | ALOAD_0 | | INVOKESTATIC org.apache.tapestry.internal.aspects.InternalSynchronization.ajc$perObjectBind Ljava/lang/Object; V | | L1: RETURN | constructor-execution void org.apache.tapestry.internal.aspects.AbstractClassTargetting.&amp;lt;init&amp;gt; initialization void org.apache.tapestry.internal.aspects.AbstractClassTargetting.&amp;lt;init&amp;gt; end public void &amp;lt;init&amp;gt; abstract void ajc$pointcut$$targetClasses$274 org.aspectj.weaver.MethodDeclarationLineNumber: 16:628 ; end public abstract class org.apache.tapestry.internal.aspects.AbstractClassTargetting when weaving type org.apache.tapestry.internal.aspects.AbstractClassTargetting when weaving aspects when weaving when batch building BuildConfig[C:\workspace\.metadata\.plugins\org.eclipse.ajdt.core\tapestry5.generated.lst] #Files=70 I'll attach the corresponding files.</description>
    <commit commitTime="2006-04-26 16:45:17" id="c667bcb5088379d74b89c3dc8556b87429e4efb7"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerThisOrTargetPointcutVisitor.java</file>
    </fixedFiles>
  </bug>
  <bug id="138384" reportTime="2006-04-25 10:58:00">
    <summary>java.lang.ClassFormatError: Invalid method Code length 83071 in class file org/eclipse/jdt/internal/compiler/impl/Constant</summary>
    <description>The weaver generates invalid bytecode when weaving a large method. Instead it should issue an error or even split the method . The problem has been reported before but for a different reason: bug 113796 .</description>
    <commit commitTime="2006-05-12 08:17:43" id="5d2b5b8892cc6e714565326b70d7c6a4b7007129"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/InstructionList.java</file>
    </fixedFiles>
  </bug>
  <bug id="138540" reportTime="2006-04-25 20:18:00">
    <summary>Patch to add support for -Xset: options</summary>
    <description>I needed to add X="set:activateLightweightDelegates=false” to my ant build configuration, to troubleshoot the out of memory permgen condition. However, the ant task support doesn't currently support adding the new -Xset style options Andy added. Here is a small patch to pass any -Xset: options through, that worked for me.</description>
    <commit commitTime="2006-04-26 07:25:49" id="99882cb91a94c468c185cf11cd6a728604e95bdb"/>
    <fixedFiles>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="138798" reportTime="2006-04-26 20:53:00">
    <summary>BCException on invalid annotation match</summary>
    <description>This unfortunately invalid code: before Throwable throwable, NormalException normalException : handler * &amp;amp;&amp;amp; args throwable &amp;amp;&amp;amp; @withincode normalException { ... Generates this exception in AJDT with post-1.5.1a AspectJ org.aspectj.weaver.BCException at org.aspectj.weaver.bcel.BcelRenderer.visit BcelRenderer.java:237 at org.aspectj.weaver.ast.Literal.accept Literal.java:29 at org.aspectj.weaver.bcel.BcelRenderer.recur BcelRenderer.java:153 at org.aspectj.weaver.bcel.BcelRenderer.renderTest BcelRenderer.java:119 at org.aspectj.weaver.bcel.BcelAdvice.getTestInstructions BcelAdvice.java:537 at org.aspectj.weaver.bcel.BcelAdvice.getAdviceInstructions BcelAdvice.java:376 at org.aspectj.weaver.bcel.BcelShadow.weaveBefore BcelShadow.java:1690 at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:208 at org.aspectj.weaver.Shadow.implementMungers Shadow.java:639 at org.aspectj.weaver.Shadow.implement Shadow.java:456 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:2236 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:491 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:109 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1560 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1511 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1291 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1113 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:311 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:183 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:862 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:242 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:161 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 trouble in: public class glassbox.client.ConnectionManager extends java.lang.Object: public static String propnameNum public static String propnameDefault public static String propnameViewed public static String propnameNickPrefix public static String propnameUrlPrefix public static String propnameViewedPrefix private static String propFilename private static String localhostNickname public static String localhostURL private java.util.List connectionList [Signature Ljava/util/List&amp;lt;Lglassbox/client/ConnectionManager$AgentConnection;&amp;gt;; ] private int defaultConnectionIndex private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0 static void &amp;lt;clinit&amp;gt; : staticinitialization void glassbox.client.ConnectionManager.&amp;lt;clinit&amp;gt; | LDC "glassbox.connections.num" line 13 | PUTSTATIC glassbox.client.ConnectionManager.propnameNum Ljava/lang/String; | LDC "glassbox.connections.default" line 14 | PUTSTATIC glassbox.client.ConnectionManager.propnameDefault Ljava/lang/String; | LDC "glassbox.connections.viewed" line 15 | PUTSTATIC glassbox.client.ConnectionManager.propnameViewed Ljava/lang/String; | LDC "glassbox.connections.nickname_" line 16 | PUTSTATIC glassbox.client.ConnectionManager.propnameNickPrefix Ljava/lang/String; | LDC "glassbox.connections.url_" line 17 | PUTSTATIC glassbox.client.ConnectionManager.propnameUrlPrefix Ljava/lang/String; | LDC "glassbox.connections.viewed_" line 18 | PUTSTATIC glassbox.client.ConnectionManager.propnameViewedPrefix Ljava/lang/String; | LDC "connection.properties" line 20 | PUTSTATIC glassbox.client.ConnectionManager.propFilename Ljava/lang/String; | LDC "localhost" line 21 | PUTSTATIC glassbox.client.ConnectionManager.localhostNickname Ljava/lang/String; | LDC "service:jmx:rmi://localhost:7131/jndi/rmi://localhost:7132/GlassboxTroubleshooter" line 22 | PUTSTATIC glassbox.client.ConnectionManager.localhostURL Ljava/lang/String; | RETURN line 11 staticinitialization void glassbox.client.ConnectionManager.&amp;lt;clinit&amp;gt; end static void &amp;lt;clinit&amp;gt; public void &amp;lt;init&amp;gt; org.aspectj.weaver.MethodDeclarationLineNumber: 23:966 : ALOAD_0 // Lglassbox/client/ConnectionManager; this line 23 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V constructor-execution void glassbox.client.ConnectionManager.&amp;lt;init&amp;gt; | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 24 | INVOKEVIRTUAL glassbox.client.ConnectionManager.init V | RETURN line 25 constructor-execution void glassbox.client.ConnectionManager.&amp;lt;init&amp;gt; end public void &amp;lt;init&amp;gt; public void init org.aspectj.weaver.MethodDeclarationLineNumber: 67:1992 : method-execution void glassbox.client.ConnectionManager.init | catch java.lang.RuntimeException -&amp;gt; E0 | | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 69 | | INVOKEVIRTUAL glassbox.client.ConnectionManager.readFromFile V | | GOTO L0 | catch java.lang.RuntimeException -&amp;gt; E0 | E0: ASTORE_2 | exception-handler void glassbox.client.ConnectionManager.&amp;lt;catch&amp;gt; java.lang.RuntimeException | | ALOAD_2 | exception-handler void glassbox.client.ConnectionManager.&amp;lt;catch&amp;gt; java.lang.RuntimeException | ASTORE_1 line 70 | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 71 | INVOKEVIRTUAL glassbox.client.ConnectionManager.createDefaultList V | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 72 | INVOKEVIRTUAL glassbox.client.ConnectionManager.writeToFile V | L0: RETURN line 74 method-execution void glassbox.client.ConnectionManager.init end public void init public void createDefaultList org.aspectj.weaver.MethodDeclarationLineNumber: 76:2134 : method-execution void glassbox.client.ConnectionManager.createDefaultList | NEW glassbox.client.ConnectionManager$AgentConnection line 77 | DUP | ALOAD_0 // Lglassbox/client/ConnectionManager; this | GETSTATIC glassbox.client.ConnectionManager.localhostNickname Ljava/lang/String; | GETSTATIC glassbox.client.ConnectionManager.localhostURL Ljava/lang/String; | ICONST_1 | INVOKESPECIAL glassbox.client.ConnectionManager$AgentConnection.&amp;lt;init&amp;gt; Lglassbox/client/ConnectionManager;Ljava/lang/String;Ljava/lang/String;Z V | ASTORE_1 | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 78 | NEW java.util.ArrayList | DUP | INVOKESPECIAL java.util.ArrayList.&amp;lt;init&amp;gt; V | PUTFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 79 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | ALOAD_1 // Lglassbox/client/ConnectionManager$AgentConnection; localhost | INVOKEINTERFACE java.util.List.add Ljava/lang/Object; Z | POP | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 80 | ICONST_0 | PUTFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I | RETURN line 81 method-execution void glassbox.client.ConnectionManager.createDefaultList end public void createDefaultList public void writeToFile org.aspectj.weaver.MethodDeclarationLineNumber: 84:2433 : method-execution void glassbox.client.ConnectionManager.writeToFile | NEW java.util.Properties line 85 | DUP | INVOKESPECIAL java.util.Properties.&amp;lt;init&amp;gt; V | ASTORE_1 | ALOAD_1 // Ljava/util/Properties; properties line 86 | GETSTATIC glassbox.client.ConnectionManager.propnameNum Ljava/lang/String; | ALOAD_0 // Lglassbox/client/ConnectionManager; this | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | INVOKEINTERFACE java.util.List.size I | INVOKESTATIC java.lang.String.valueOf I Ljava/lang/String; | INVOKEVIRTUAL java.util.Properties.setProperty Ljava/lang/String;Ljava/lang/String; Ljava/lang/Object; | POP | ALOAD_1 // Ljava/util/Properties; properties line 87 | GETSTATIC glassbox.client.ConnectionManager.propnameDefault Ljava/lang/String; | ALOAD_0 // Lglassbox/client/ConnectionManager; this | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | ALOAD_0 // Lglassbox/client/ConnectionManager; this | GETFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I | INVOKEINTERFACE java.util.List.get I Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname Ljava/lang/String; | INVOKEVIRTUAL java.util.Properties.setProperty Ljava/lang/String;Ljava/lang/String; Ljava/lang/Object; | POP | ICONST_0 line 88 | ISTORE_2 | GOTO L1 | L0: ALOAD_1 // Ljava/util/Properties; properties line 89 | NEW java.lang.StringBuilder | DUP | GETSTATIC glassbox.client.ConnectionManager.propnameNickPrefix Ljava/lang/String; | INVOKESTATIC java.lang.String.valueOf Ljava/lang/Object; Ljava/lang/String; | INVOKESPECIAL java.lang.StringBuilder.&amp;lt;init&amp;gt; Ljava/lang/String; V | ILOAD_2 // I i | INVOKEVIRTUAL java.lang.StringBuilder.append I Ljava/lang/StringBuilder; | INVOKEVIRTUAL java.lang.StringBuilder.toString Ljava/lang/String; | ALOAD_0 // Lglassbox/client/ConnectionManager; this | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | ILOAD_2 // I i | INVOKEINTERFACE java.util.List.get I Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname Ljava/lang/String; | INVOKEVIRTUAL java.util.Properties.setProperty Ljava/lang/String;Ljava/lang/String; Ljava/lang/Object; | POP | ALOAD_1 // Ljava/util/Properties; properties line 90 | NEW java.lang.StringBuilder | DUP | GETSTATIC glassbox.client.ConnectionManager.propnameUrlPrefix Ljava/lang/String; | INVOKESTATIC java.lang.String.valueOf Ljava/lang/Object; Ljava/lang/String; | INVOKESPECIAL java.lang.StringBuilder.&amp;lt;init&amp;gt; Ljava/lang/String; V | ILOAD_2 // I i | INVOKEVIRTUAL java.lang.StringBuilder.append I Ljava/lang/StringBuilder; | INVOKEVIRTUAL java.lang.StringBuilder.toString Ljava/lang/String; | ALOAD_0 // Lglassbox/client/ConnectionManager; this | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | ILOAD_2 // I i | INVOKEINTERFACE java.util.List.get I Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getUrl Ljava/lang/String; | INVOKEVIRTUAL java.util.Properties.setProperty Ljava/lang/String;Ljava/lang/String; Ljava/lang/Object; | POP | ALOAD_1 // Ljava/util/Properties; properties line 91 | NEW java.lang.StringBuilder | DUP | GETSTATIC glassbox.client.ConnectionManager.propnameViewedPrefix Ljava/lang/String; | INVOKESTATIC java.lang.String.valueOf Ljava/lang/Object; Ljava/lang/String; | INVOKESPECIAL java.lang.StringBuilder.&amp;lt;init&amp;gt; Ljava/lang/String; V | ILOAD_2 // I i | INVOKEVIRTUAL java.lang.StringBuilder.append I Ljava/lang/StringBuilder; | INVOKEVIRTUAL java.lang.StringBuilder.toString Ljava/lang/String; | ALOAD_0 // Lglassbox/client/ConnectionManager; this | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | ILOAD_2 // I i | INVOKEINTERFACE java.util.List.get I Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.isViewed Z | INVOKESTATIC java.lang.String.valueOf Z Ljava/lang/String; | INVOKEVIRTUAL java.util.Properties.setProperty Ljava/lang/String;Ljava/lang/String; Ljava/lang/Object; | POP | IINC 2 1 // I i line 88 | L1: ILOAD_2 // I i | ALOAD_0 // Lglassbox/client/ConnectionManager; this | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | INVOKEINTERFACE java.util.List.size I | IF_ICMPLT L0 | catch java.io.IOException -&amp;gt; E0 | | NEW java.io.File line 94 | | DUP | | GETSTATIC glassbox.client.ConnectionManager.propFilename Ljava/lang/String; | | INVOKESPECIAL java.io.File.&amp;lt;init&amp;gt; Ljava/lang/String; V | | ASTORE_2 | | NEW java.io.FileOutputStream line 95 | | DUP | | ALOAD_2 // Ljava/io/File; f | | ICONST_0 | | INVOKESPECIAL java.io.FileOutputStream.&amp;lt;init&amp;gt; Ljava/io/File;Z V | | ASTORE_3 | | ALOAD_1 // Ljava/util/Properties; properties line 96 | | ALOAD_3 // Ljava/io/FileOutputStream; fos | | ACONST_NULL | | INVOKEVIRTUAL java.util.Properties.store Ljava/io/OutputStream;Ljava/lang/String; V | | ALOAD_3 // Ljava/io/FileOutputStream; fos line 97 | | INVOKEVIRTUAL java.io.FileOutputStream.close V | | GOTO L2 | catch java.io.IOException -&amp;gt; E0 | E0: ASTORE_2 line 98 | GETSTATIC java.lang.System.err Ljava/io/PrintStream; line 99 | LDC "Failed to write connection.properties file" | INVOKEVIRTUAL java.io.PrintStream.println Ljava/lang/String; V | GETSTATIC java.lang.System.err Ljava/io/PrintStream; line 100 | ALOAD_2 // Ljava/io/IOException; e | INVOKEVIRTUAL java.io.IOException.toString Ljava/lang/String; | INVOKEVIRTUAL java.io.PrintStream.println Ljava/lang/String; V | L2: RETURN line 102 method-execution void glassbox.client.ConnectionManager.writeToFile end public void writeToFile public void readFromFile org.aspectj.weaver.MethodDeclarationLineNumber: 105:3495 : method-execution void glassbox.client.ConnectionManager.readFromFile | NEW java.util.ArrayList line 107 | DUP | INVOKESPECIAL java.util.ArrayList.&amp;lt;init&amp;gt; V | ASTORE_1 | NEW java.util.Properties line 108 | DUP | INVOKESPECIAL java.util.Properties.&amp;lt;init&amp;gt; V | ASTORE_2 | NEW java.io.File line 110 | DUP | GETSTATIC glassbox.client.ConnectionManager.propFilename Ljava/lang/String; | INVOKESPECIAL java.io.File.&amp;lt;init&amp;gt; Ljava/lang/String; V | ASTORE 4 | catch java.io.IOException -&amp;gt; E0 | | ALOAD_2 // Ljava/util/Properties; properties line 112 | | NEW java.io.FileInputStream | | DUP | | ALOAD 4 // Ljava/io/File; f | | INVOKESPECIAL java.io.FileInputStream.&amp;lt;init&amp;gt; Ljava/io/File; V | | INVOKEVIRTUAL java.util.Properties.load Ljava/io/InputStream; V | | GOTO L0 | catch java.io.IOException -&amp;gt; E0 | E0: ASTORE 5 line 113 | NEW java.lang.RuntimeException line 116 | DUP | NEW java.lang.StringBuilder | DUP | LDC "Can't open " | INVOKESPECIAL java.lang.StringBuilder.&amp;lt;init&amp;gt; Ljava/lang/String; V | ALOAD 4 // Ljava/io/File; f | INVOKEVIRTUAL java.io.File.getAbsolutePath Ljava/lang/String; | INVOKEVIRTUAL java.lang.StringBuilder.append Ljava/lang/String; Ljava/lang/StringBuilder; | INVOKEVIRTUAL java.lang.StringBuilder.toString Ljava/lang/String; | INVOKESPECIAL java.lang.RuntimeException.&amp;lt;init&amp;gt; Ljava/lang/String; V | ATHROW | catch java.lang.Exception -&amp;gt; E1 | | L0: ALOAD_2 // Ljava/util/Properties; properties line 119 | | GETSTATIC glassbox.client.ConnectionManager.propnameNum Ljava/lang/String; | | INVOKEVIRTUAL java.util.Properties.getProperty Ljava/lang/String; Ljava/lang/String; | | INVOKESTATIC java.lang.Integer.valueOf Ljava/lang/String; Ljava/lang/Integer; | | INVOKEVIRTUAL java.lang.Integer.intValue I | | ISTORE 5 | | ALOAD_2 // Ljava/util/Properties; properties line 120 | | GETSTATIC glassbox.client.ConnectionManager.propnameDefault Ljava/lang/String; | | INVOKEVIRTUAL java.util.Properties.getProperty Ljava/lang/String; Ljava/lang/String; | | ASTORE 6 | | ALOAD 6 // Ljava/lang/String; defNickname line 121 | | IFNONNULL L1 | | NEW java.lang.RuntimeException | | DUP | | NEW java.lang.StringBuilder | | DUP | | LDC "missing " | | INVOKESPECIAL java.lang.StringBuilder.&amp;lt;init&amp;gt; Ljava/lang/String; V | | GETSTATIC glassbox.client.ConnectionManager.propnameDefault Ljava/lang/String; | | INVOKEVIRTUAL java.lang.StringBuilder.append Ljava/lang/String; Ljava/lang/StringBuilder; | | INVOKEVIRTUAL java.lang.StringBuilder.toString Ljava/lang/String; | | INVOKESPECIAL java.lang.RuntimeException.&amp;lt;init&amp;gt; Ljava/lang/String; V | | ATHROW | | L1: ILOAD 5 // I num line 122 | | ICONST_1 | | IF_ICMPGE L2 | | NEW java.lang.RuntimeException | | DUP | | NEW java.lang.StringBuilder | | DUP | | LDC "Bad " | | INVOKESPECIAL java.lang.StringBuilder.&amp;lt;init&amp;gt; Ljava/lang/String; V | | GETSTATIC glassbox.client.ConnectionManager.propnameNum Ljava/lang/String; | | INVOKEVIRTUAL java.lang.StringBuilder.append Ljava/lang/String; Ljava/lang/StringBuilder; | | LDC "=" | | INVOKEVIRTUAL java.lang.StringBuilder.append Ljava/lang/String; Ljava/lang/StringBuilder; | | ILOAD 5 // I num | | INVOKEVIRTUAL java.lang.StringBuilder.append I Ljava/lang/StringBuilder; | | INVOKEVIRTUAL java.lang.StringBuilder.toString Ljava/lang/String; | | INVOKESPECIAL java.lang.RuntimeException.&amp;lt;init&amp;gt; Ljava/lang/String; V | | ATHROW | | L2: ICONST_0 line 123 | | ISTORE 7 | | GOTO L9 | | L3: ALOAD_2 // Ljava/util/Properties; properties line 124 | | NEW java.lang.StringBuilder | | DUP | | GETSTATIC glassbox.client.ConnectionManager.propnameNickPrefix Ljava/lang/String; | | INVOKESTATIC java.lang.String.valueOf Ljava/lang/Object; Ljava/lang/String; | | INVOKESPECIAL java.lang.StringBuilder.&amp;lt;init&amp;gt; Ljava/lang/String; V | | ILOAD 7 // I i | | INVOKEVIRTUAL java.lang.StringBuilder.append I Ljava/lang/StringBuilder; | | INVOKEVIRTUAL java.lang.StringBuilder.toString Ljava/lang/String; | | INVOKEVIRTUAL java.util.Properties.getProperty Ljava/lang/String; Ljava/lang/String; | | ASTORE 8 | | ALOAD 8 // Ljava/lang/String; nickname line 125 | | IFNONNULL L4 | | NEW java.lang.RuntimeException | | DUP | | NEW java.lang.StringBuilder | | DUP | | LDC "missing " | | INVOKESPECIAL java.lang.StringBuilder.&amp;lt;init&amp;gt; Ljava/lang/String; V | | GETSTATIC glassbox.client.ConnectionManager.propnameNickPrefix Ljava/lang/String; | | INVOKEVIRTUAL java.lang.StringBuilder.append Ljava/lang/String; Ljava/lang/StringBuilder; | | ILOAD 7 // I i | | INVOKEVIRTUAL java.lang.StringBuilder.append I Ljava/lang/StringBuilder; | | INVOKEVIRTUAL java.lang.StringBuilder.toString Ljava/lang/String; | | INVOKESPECIAL java.lang.RuntimeException.&amp;lt;init&amp;gt; Ljava/lang/String; V | | ATHROW | | L4: ALOAD_2 // Ljava/util/Properties; properties line 126 | | NEW java.lang.StringBuilder | | DUP | | GETSTATIC glassbox.client.ConnectionManager.propnameUrlPrefix Ljava/lang/String; | | INVOKESTATIC java.lang.String.valueOf Ljava/lang/Object; Ljava/lang/String; | | INVOKESPECIAL java.lang.StringBuilder.&amp;lt;init&amp;gt; Ljava/lang/String; V | | ILOAD 7 // I i | | INVOKEVIRTUAL java.lang.StringBuilder.append I Ljava/lang/StringBuilder; | | INVOKEVIRTUAL java.lang.StringBuilder.toString Ljava/lang/String; | | INVOKEVIRTUAL java.util.Properties.getProperty Ljava/lang/String; Ljava/lang/String; | | ASTORE 9 | | ALOAD 9 // Ljava/lang/String; url line 127 | | IFNONNULL L5 | | NEW java.lang.RuntimeException | | DUP | | NEW java.lang.StringBuilder | | DUP | | LDC "missing " | | INVOKESPECIAL java.lang.StringBuilder.&amp;lt;init&amp;gt; Ljava/lang/String; V | | GETSTATIC glassbox.client.ConnectionManager.propnameUrlPrefix Ljava/lang/String; | | INVOKEVIRTUAL java.lang.StringBuilder.append Ljava/lang/String; Ljava/lang/StringBuilder; | | ILOAD 7 // I i | | INVOKEVIRTUAL java.lang.StringBuilder.append I Ljava/lang/StringBuilder; | | INVOKEVIRTUAL java.lang.StringBuilder.toString Ljava/lang/String; | | INVOKESPECIAL java.lang.RuntimeException.&amp;lt;init&amp;gt; Ljava/lang/String; V | | ATHROW | | L5: ALOAD_2 // Ljava/util/Properties; properties line 128 | | NEW java.lang.StringBuilder | | DUP | | GETSTATIC glassbox.client.ConnectionManager.propnameViewedPrefix Ljava/lang/String; | | INVOKESTATIC java.lang.String.valueOf Ljava/lang/Object; Ljava/lang/String; | | INVOKESPECIAL java.lang.StringBuilder.&amp;lt;init&amp;gt; Ljava/lang/String; V | | ILOAD 7 // I i | | INVOKEVIRTUAL java.lang.StringBuilder.append I Ljava/lang/StringBuilder; | | INVOKEVIRTUAL java.lang.StringBuilder.toString Ljava/lang/String; | | INVOKEVIRTUAL java.util.Properties.getProperty Ljava/lang/String; Ljava/lang/String; | | ASTORE 10 | | ALOAD 10 // Ljava/lang/String; viewedStr line 129 | | LDC "true" | | INVOKEVIRTUAL java.lang.String.contentEquals Ljava/lang/CharSequence; Z | | IFEQ L6 | | ICONST_1 | | GOTO L7 | | L6: ICONST_0 | | L7: ISTORE_3 | | ALOAD 9 // Ljava/lang/String; url line 130 | | IFNONNULL L8 | | NEW java.lang.RuntimeException | | DUP | | NEW java.lang.StringBuilder | | DUP | | LDC "missing " | | INVOKESPECIAL java.lang.StringBuilder.&amp;lt;init&amp;gt; Ljava/lang/String; V | | GETSTATIC glassbox.client.ConnectionManager.propnameViewedPrefix Ljava/lang/String; | | INVOKEVIRTUAL java.lang.StringBuilder.append Ljava/lang/String; Ljava/lang/StringBuilder; | | ILOAD 7 // I i | | INVOKEVIRTUAL java.lang.StringBuilder.append I Ljava/lang/StringBuilder; | | INVOKEVIRTUAL java.lang.StringBuilder.toString Ljava/lang/String; | | INVOKESPECIAL java.lang.RuntimeException.&amp;lt;init&amp;gt; Ljava/lang/String; V | | ATHROW | | L8: ALOAD_1 // Ljava/util/List; agcon line 131 | | NEW glassbox.client.ConnectionManager$AgentConnection | | DUP | | ALOAD_0 // Lglassbox/client/ConnectionManager; this | | ALOAD 8 // Ljava/lang/String; nickname | | ALOAD 9 // Ljava/lang/String; url | | ILOAD_3 // Z viewed | | INVOKESPECIAL glassbox.client.ConnectionManager$AgentConnection.&amp;lt;init&amp;gt; Lglassbox/client/ConnectionManager;Ljava/lang/String;Ljava/lang/String;Z V | | INVOKEINTERFACE java.util.List.add Ljava/lang/Object; Z | | POP | | IINC 7 1 // I i line 123 | | L9: ILOAD 7 // I i | | ILOAD 5 // I num | | IF_ICMPLT L3 | | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 133 | | ICONST_M1 | | PUTFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I | | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 134 | | ALOAD_1 // Ljava/util/List; agcon | | PUTFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 135 | | ALOAD 6 // Ljava/lang/String; defNickname | | INVOKEVIRTUAL glassbox.client.ConnectionManager.setAsDefault Ljava/lang/String; V | | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 136 | | GETFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I | | ICONST_M1 | | IF_ICMPNE L10 | | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 137 | | ICONST_0 | | PUTFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I | | GOTO L10 | catch java.lang.Exception -&amp;gt; E1 | E1: ASTORE 5 line 140 | GETSTATIC java.lang.System.err Ljava/io/PrintStream; line 141 | LDC "Failed to read connection.properties file" | INVOKEVIRTUAL java.io.PrintStream.println Ljava/lang/String; V | ALOAD 5 // Ljava/lang/Exception; e2 line 142 | INVOKEVIRTUAL java.lang.Exception.printStackTrace V | NEW java.lang.RuntimeException line 143 | DUP | ALOAD 5 // Ljava/lang/Exception; e2 | INVOKESPECIAL java.lang.RuntimeException.&amp;lt;init&amp;gt; Ljava/lang/Throwable; V | ATHROW | L10: RETURN line 145 method-execution void glassbox.client.ConnectionManager.readFromFile end public void readFromFile public void delete String org.aspectj.weaver.MethodDeclarationLineNumber: 147:5452 : method-execution void glassbox.client.ConnectionManager.delete java.lang.String | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 148 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | INVOKEINTERFACE java.util.List.size I | ICONST_1 | IF_ICMPGT L0 | RETURN | L0: ALOAD_0 // Lglassbox/client/ConnectionManager; this line 149 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | INVOKEINTERFACE java.util.List.iterator Ljava/util/Iterator; | ASTORE_3 | GOTO L3 | L1: ALOAD_3 | INVOKEINTERFACE java.util.Iterator.next Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | ASTORE_2 | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con line 151 | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname Ljava/lang/String; | ALOAD_1 // Ljava/lang/String; nickname | INVOKEVIRTUAL java.lang.String.equals Ljava/lang/Object; Z | IFEQ L3 | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 152 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con | INVOKEINTERFACE java.util.List.lastIndexOf Ljava/lang/Object; I | ALOAD_0 // Lglassbox/client/ConnectionManager; this | GETFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I | IF_ICMPNE L2 | ALOAD_0 // Lglassbox/client/ConnectionManager; this | ICONST_0 | PUTFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I | L2: ALOAD_0 // Lglassbox/client/ConnectionManager; this line 154 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con | INVOKEINTERFACE java.util.List.remove Ljava/lang/Object; Z | POP | GOTO L4 line 155 | L3: ALOAD_3 line 149 | INVOKEINTERFACE java.util.Iterator.hasNext Z | IFNE L1 | L4: RETURN line 158 method-execution void glassbox.client.ConnectionManager.delete java.lang.String end public void delete String public void setAsDefault String org.aspectj.weaver.MethodDeclarationLineNumber: 160:5880 : method-execution void glassbox.client.ConnectionManager.setAsDefault java.lang.String | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 161 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | INVOKEINTERFACE java.util.List.iterator Ljava/util/Iterator; | ASTORE_3 | GOTO L1 | L0: ALOAD_3 | INVOKEINTERFACE java.util.Iterator.next Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | ASTORE_2 | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con line 162 | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname Ljava/lang/String; | ALOAD_1 // Ljava/lang/String; nickname | INVOKEVIRTUAL java.lang.String.equals Ljava/lang/Object; Z | IFEQ L1 | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 163 | ALOAD_0 // Lglassbox/client/ConnectionManager; this | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con | INVOKEINTERFACE java.util.List.lastIndexOf Ljava/lang/Object; I | PUTFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con line 164 | ICONST_1 | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.setViewed Z V | GOTO L2 line 165 | L1: ALOAD_3 line 161 | INVOKEINTERFACE java.util.Iterator.hasNext Z | IFNE L0 | L2: RETURN line 168 method-execution void glassbox.client.ConnectionManager.setAsDefault java.lang.String end public void setAsDefault String public void setSelectViewed String, boolean org.aspectj.weaver.MethodDeclarationLineNumber: 170:6156 : method-execution void glassbox.client.ConnectionManager.setSelectViewed java.lang.String, boolean | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 171 | INVOKEVIRTUAL glassbox.client.ConnectionManager.getDefaultNick Ljava/lang/String; | ASTORE_3 | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 172 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | INVOKEINTERFACE java.util.List.iterator Ljava/util/Iterator; | ASTORE 5 | GOTO L2 | L0: ALOAD 5 | INVOKEINTERFACE java.util.Iterator.next Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | ASTORE 4 | ALOAD 4 // Lglassbox/client/ConnectionManager$AgentConnection; con line 173 | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname Ljava/lang/String; | ALOAD_1 // Ljava/lang/String; nickname | INVOKEVIRTUAL java.lang.String.equals Ljava/lang/Object; Z | IFEQ L2 | ILOAD_2 // Z val line 174 | IFNE L1 | ALOAD_3 // Ljava/lang/String; defNick | ALOAD 4 // Lglassbox/client/ConnectionManager$AgentConnection; con | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname Ljava/lang/String; | IF_ACMPEQ L2 | L1: ALOAD 4 // Lglassbox/client/ConnectionManager$AgentConnection; con line 177 | ILOAD_2 // Z val | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.setViewed Z V | GOTO L3 line 178 | L2: ALOAD 5 line 172 | INVOKEINTERFACE java.util.Iterator.hasNext Z | IFNE L0 | L3: RETURN line 182 method-execution void glassbox.client.ConnectionManager.setSelectViewed java.lang.String, boolean end public void setSelectViewed String, boolean public boolean getSelectViewed String org.aspectj.weaver.MethodDeclarationLineNumber: 184:6636 : method-execution boolean glassbox.client.ConnectionManager.getSelectViewed java.lang.String | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 185 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | INVOKEINTERFACE java.util.List.iterator Ljava/util/Iterator; | ASTORE_3 | GOTO L1 | L0: ALOAD_3 | INVOKEINTERFACE java.util.Iterator.next Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | ASTORE_2 | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con line 186 | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname Ljava/lang/String; | ALOAD_1 // Ljava/lang/String; nickname | INVOKEVIRTUAL java.lang.String.equals Ljava/lang/Object; Z | IFEQ L1 | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con line 187 | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.isViewed Z | IRETURN | L1: ALOAD_3 line 185 | INVOKEINTERFACE java.util.Iterator.hasNext Z | IFNE L0 | ICONST_0 line 190 | IRETURN method-execution boolean glassbox.client.ConnectionManager.getSelectViewed java.lang.String end public boolean getSelectViewed String public String getNicknameFromURL String org.aspectj.weaver.MethodDeclarationLineNumber: 193:6903 : method-execution java.lang.String glassbox.client.ConnectionManager.getNicknameFromURL java.lang.String | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 194 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | INVOKEINTERFACE java.util.List.iterator Ljava/util/Iterator; | ASTORE_3 | GOTO L1 | L0: ALOAD_3 | INVOKEINTERFACE java.util.Iterator.next Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | ASTORE_2 | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con line 195 | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getUrl Ljava/lang/String; | ALOAD_1 // Ljava/lang/String; url | INVOKEVIRTUAL java.lang.String.equals Ljava/lang/Object; Z | IFEQ L1 | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con line 196 | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname Ljava/lang/String; | ARETURN | L1: ALOAD_3 line 194 | INVOKEINTERFACE java.util.Iterator.hasNext Z | IFNE L0 | LDC_W " " line 199 | ARETURN method-execution java.lang.String glassbox.client.ConnectionManager.getNicknameFromURL java.lang.String end public String getNicknameFromURL String public glassbox.client.ConnectionManager$AgentConnection getAgentConnectionFromURL String org.aspectj.weaver.MethodDeclarationLineNumber: 202:7168 : method-execution glassbox.client.ConnectionManager$AgentConnection glassbox.client.ConnectionManager.getAgentConnectionFromURL java.lang.String | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 203 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | INVOKEINTERFACE java.util.List.iterator Ljava/util/Iterator; | ASTORE_3 | GOTO L1 | L0: ALOAD_3 | INVOKEINTERFACE java.util.Iterator.next Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | ASTORE_2 | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con line 204 | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getUrl Ljava/lang/String; | ALOAD_1 // Ljava/lang/String; url | INVOKEVIRTUAL java.lang.String.equals Ljava/lang/Object; Z | IFEQ L1 | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con line 205 | ARETURN | L1: ALOAD_3 line 203 | INVOKEINTERFACE java.util.Iterator.hasNext Z | IFNE L0 | ACONST_NULL line 209 | ARETURN method-execution glassbox.client.ConnectionManager$AgentConnection glassbox.client.ConnectionManager.getAgentConnectionFromURL java.lang.String end public glassbox.client.ConnectionManager$AgentConnection getAgentConnectionFromURL String public glassbox.client.ConnectionManager$AgentConnection getAgentConnectionFromNick String org.aspectj.weaver.MethodDeclarationLineNumber: 212:7429 : method-execution glassbox.client.ConnectionManager$AgentConnection glassbox.client.ConnectionManager.getAgentConnectionFromNick java.lang.String | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 213 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | INVOKEINTERFACE java.util.List.iterator Ljava/util/Iterator; | ASTORE_3 | GOTO L1 | L0: ALOAD_3 | INVOKEINTERFACE java.util.Iterator.next Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | ASTORE_2 | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con line 214 | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname Ljava/lang/String; | ALOAD_1 // Ljava/lang/String; nickname | INVOKEVIRTUAL java.lang.String.equals Ljava/lang/Object; Z | IFEQ L1 | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con line 215 | ARETURN | L1: ALOAD_3 line 213 | INVOKEINTERFACE java.util.Iterator.hasNext Z | IFNE L0 | ACONST_NULL line 218 | ARETURN method-execution glassbox.client.ConnectionManager$AgentConnection glassbox.client.ConnectionManager.getAgentConnectionFromNick java.lang.String end public glassbox.client.ConnectionManager$AgentConnection getAgentConnectionFromNick String public String getURLFromNick String org.aspectj.weaver.MethodDeclarationLineNumber: 221:7695 : method-execution java.lang.String glassbox.client.ConnectionManager.getURLFromNick java.lang.String | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 222 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | INVOKEINTERFACE java.util.List.iterator Ljava/util/Iterator; | ASTORE_3 | GOTO L1 | L0: ALOAD_3 | INVOKEINTERFACE java.util.Iterator.next Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | ASTORE_2 | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con line 223 | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname Ljava/lang/String; | ALOAD_1 // Ljava/lang/String; nick | INVOKEVIRTUAL java.lang.String.equals Ljava/lang/Object; Z | IFEQ L1 | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con line 224 | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getUrl Ljava/lang/String; | ARETURN | L1: ALOAD_3 line 222 | INVOKEINTERFACE java.util.Iterator.hasNext Z | IFNE L0 | LDC_W " " line 227 | ARETURN method-execution java.lang.String glassbox.client.ConnectionManager.getURLFromNick java.lang.String end public String getURLFromNick String public void edit String, String org.aspectj.weaver.MethodDeclarationLineNumber: 231:7947 : method-execution void glassbox.client.ConnectionManager.edit java.lang.String, java.lang.String | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 232 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | INVOKEINTERFACE java.util.List.iterator Ljava/util/Iterator; | ASTORE 4 | GOTO L1 | L0: ALOAD 4 | INVOKEINTERFACE java.util.Iterator.next Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | ASTORE_3 | ALOAD_3 // Lglassbox/client/ConnectionManager$AgentConnection; con line 233 | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname Ljava/lang/String; | ALOAD_1 // Ljava/lang/String; nickname | INVOKEVIRTUAL java.lang.String.equals Ljava/lang/Object; Z | IFEQ L1 | ALOAD_3 // Lglassbox/client/ConnectionManager$AgentConnection; con line 234 | ALOAD_2 // Ljava/lang/String; newurl | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.setUrl Ljava/lang/String; V | GOTO L2 line 235 | L1: ALOAD 4 line 232 | INVOKEINTERFACE java.util.Iterator.hasNext Z | IFNE L0 | L2: RETURN line 238 method-execution void glassbox.client.ConnectionManager.edit java.lang.String, java.lang.String end public void edit String, String public void add String, String, boolean, boolean org.aspectj.weaver.MethodDeclarationLineNumber: 240:8150 : method-execution void glassbox.client.ConnectionManager.add java.lang.String, java.lang.String, boolean, boolean | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 241 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | INVOKEINTERFACE java.util.List.iterator Ljava/util/Iterator; | ASTORE 6 | GOTO L1 | L0: ALOAD 6 | INVOKEINTERFACE java.util.Iterator.next Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | ASTORE 5 | ALOAD 5 // Lglassbox/client/ConnectionManager$AgentConnection; con line 242 | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname Ljava/lang/String; | ALOAD_1 // Ljava/lang/String; nickname | INVOKEVIRTUAL java.lang.String.equals Ljava/lang/Object; Z | IFEQ L1 | RETURN | L1: ALOAD 6 line 241 | INVOKEINTERFACE java.util.Iterator.hasNext Z | IFNE L0 | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 244 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | NEW glassbox.client.ConnectionManager$AgentConnection | DUP | ALOAD_0 // Lglassbox/client/ConnectionManager; this | ALOAD_1 // Ljava/lang/String; nickname | ALOAD_2 // Ljava/lang/String; url | ILOAD_3 // Z viewed | INVOKESPECIAL glassbox.client.ConnectionManager$AgentConnection.&amp;lt;init&amp;gt; Lglassbox/client/ConnectionManager;Ljava/lang/String;Ljava/lang/String;Z V | INVOKEINTERFACE java.util.List.add Ljava/lang/Object; Z | POP | ILOAD 4 // Z makeDefault line 245 | IFEQ L2 | ALOAD_0 // Lglassbox/client/ConnectionManager; this | ALOAD_0 // Lglassbox/client/ConnectionManager; this | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | INVOKEINTERFACE java.util.List.size I | ICONST_1 | ISUB | PUTFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I | L2: RETURN line 246 method-execution void glassbox.client.ConnectionManager.add java.lang.String, java.lang.String, boolean, boolean end public void add String, String, boolean, boolean public int getDefaultIndex org.aspectj.weaver.MethodDeclarationLineNumber: 248:8519 : method-execution int glassbox.client.ConnectionManager.getDefaultIndex | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 249 | GETFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I | IRETURN method-execution int glassbox.client.ConnectionManager.getDefaultIndex end public int getDefaultIndex public java.util.List getConnectionList org.aspectj.weaver.MethodDeclarationLineNumber: 252:8611 : method-execution java.util.List glassbox.client.ConnectionManager.getConnectionList | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 253 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | ARETURN method-execution java.util.List glassbox.client.ConnectionManager.getConnectionList end public java.util.List getConnectionList public String getDefaultURL org.aspectj.weaver.MethodDeclarationLineNumber: 256:8683 : method-execution java.lang.String glassbox.client.ConnectionManager.getDefaultURL | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 257 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | ALOAD_0 // Lglassbox/client/ConnectionManager; this | GETFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I | INVOKEINTERFACE java.util.List.get I Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getUrl Ljava/lang/String; | ARETURN method-execution java.lang.String glassbox.client.ConnectionManager.getDefaultURL end public String getDefaultURL public String getDefaultNick org.aspectj.weaver.MethodDeclarationLineNumber: 260:8793 : method-execution java.lang.String glassbox.client.ConnectionManager.getDefaultNick | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 261 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | ALOAD_0 // Lglassbox/client/ConnectionManager; this | GETFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I | INVOKEINTERFACE java.util.List.get I Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname Ljava/lang/String; | ARETURN method-execution java.lang.String glassbox.client.ConnectionManager.getDefaultNick end public String getDefaultNick end public class glassbox.client.ConnectionManager when implementing on shadow exception-handler void glassbox.client.ConnectionManager.&amp;lt;catch&amp;gt; java.lang.RuntimeException when weaving type glassbox.client.ConnectionManager when weaving classes when weaving when batch building BuildConfig[C:\devel\glassbox\.metadata\.plugins\org.eclipse.ajdt.core\crankjClient.generated.lst] #Files=52</description>
    <commit commitTime="2006-04-27 07:06:30" id="c5c18aaea1700d75e8f92a530133ae371924f33c"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="139749" reportTime="2006-05-02 12:34:00">
    <summary>@AspectJ aspect causes verify error if call to super method is made in around advice body</summary>
    <description>Given an @AspectJ aspect that extends from some super class, for example: class ASuperClass { protected void takesAPjp ProceedingJoinPoint pjp { //... } } @Aspect public class AroundAdvicePassingPjpAsArgToSuper extends ASuperClass { @Around "execution * foo " public Object passesPjp ProceedingJoinPoint pjp throws Throwable { takesAPjp pjp ; Object ret = pjp.proceed ; return ret; } } The resulting compiled class gives a verify error on the generated ajc$inlineAccessMethod. Overriding the method inside the aspect and calling super within the overriden method works just fine.</description>
    <commit commitTime="2006-05-02 17:02:25" id="18c308fb3c26227f7cae5ad728d3565079edd4b5"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="139936" reportTime="2006-05-03 08:56:00">
    <summary>[ltw] WeavingAdaptor.generatedClassesExist cannot cope with additional class weaving</summary>
    <description>If a closure is generate during LTW it is immediately defined to the JVM. The existing interface allows agents to determine whether a closure was generated. However when a class is defined additonal classes may be loaded, argument types used for the around advice for example, which may in turn be woven. The existing interface does not allow an agent to determine for which class a closure was generated.</description>
    <commit commitTime="2006-05-03 13:18:16" id="0d1771f1f8698c35fdd5b4a0b74690d1e4c81b67"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="140357" reportTime="2006-05-05 09:43:00">
    <summary>NPE or StackOverflow when resolving reference pointcut in ReflectionWorld</summary>
    <description>Given a type such as : private static class NamedPointcutResolution { @Pointcut "execution * * .. " public void a {} @Pointcut "this org.aspectj.weaver.tools.Java15PointcutExpressionTest.A " public void b {} @Pointcut "a &amp;amp;&amp;amp; b " public void c {} } The reflection based delegate is unable to resolve the pointcut c failing with either 1 an NPE, or 2 a StackOverflow, depending on the order of the pointcut definitions in the type. The problem occurs because in resolving "c " we get all the pointcuts in the type, which gets a , b , and c , and tries to resolve them...</description>
    <commit commitTime="2006-05-05 14:08:35" id="b954b2664c25a74062a5a75b3d99a99e5ddf176d"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/tools/PointcutParser.java</file>
      <file>weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java</file>
      <file>weaver5/java5-testsrc/org/aspectj/weaver/tools/Java15PointcutExpressionTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="140695" reportTime="2006-05-08 17:21:00">
    <summary>Use LTWWorld not BcelWorld for load-time weaving</summary>
    <description>Please update AspectJ load-time weaving to use the LTWWorld instead of the BcelWorld, to take advantage of the load-time weaving optimizations it provides. Here is a patch for doing that. A possible alternative would be to add an -Xset: option to allow disabling the use of LTWWorld in case there is a problem...</description>
    <commit commitTime="2006-06-13 19:54:54" id="94e8e649569246be91bc9af895080f1b1c15ba53"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateFactory.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/tools/ajc/AjcTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="141556" reportTime="2006-05-12 11:15:00">
    <summary>Warnings disappearing after an incremental build without changes</summary>
    <description>AJDT 1.4.0.20060512075430 for Eclipse 3.2RC3 AspectJ version: 1.5.2.20060511130959 - Create the Tracing Example and activate the "tracelib.ajproperties" config - Make sure the XLint for "No guard for lazy tjp" is set to "Warning" - Open AbstractTrace.aj - there should be lots of "no guard" warnings - Now type a space somewhere in the file, and then delete the space, so that the contents of the file is *exactly* the same as before - Save the file to trigger an incremental build - The "no guard" warnings disappear both markers and problems view entries The warnings reappear after a full build, and after an incremental build where a change has been made to the file even just a whitespace change</description>
    <commit commitTime="2006-08-03 10:03:43" id="b7ccac980f81164b32042522e85834c498f14b94"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/Lint.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/AjdeInteractionTestbed.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/AbstractMultiProjectIncrementalAjdeInteractionTestbed.java</file>
      <file>ajde/src/org/aspectj/ajde/internal/AspectJBuildManager.java</file>
      <file>ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="141730" reportTime="2006-05-15 05:19:00">
    <summary>new handleProvider required which doesn't depend on sourcelocations</summary>
    <description>Problems are occuring when incrementally compiling due to a reliance on sourcelocations in the iprogramelement handles. For example, if an extra line is inserted into an aspect then the sourcelocations have changed however the advice hasn't. The proposal is to have handles which are similar to the ones the jdt has and that AJDT uses . For example: - a method: =TJP Example/src&amp;lt;tjp{Demo.java[Demo~main - an aspect: =TJP Example/src&amp;lt;tjp*GetInfo.aj}GetInfo - some advice: =TJP Example/src&amp;lt;tjp*GetInfo.aj}GetInfo&amp;amp;around - an ITD: =Bean Example/src&amp;lt;bean*BoundPoint.aj}BoundPoint Point.hasListeners QString; - the 2 declare parents in an aspect: =Bean Example/src&amp;lt;bean*BoundPoint.aj}BoundPoint`declare parents!2 - a pointcut: =Spacewar Example/src&amp;lt;spacewar*Ship.aj[Ship+helmCommandsCut+QShip; - a method call: =Bean Example/src&amp;lt;bean{Demo.java[Demo~main~\\[QString;?method-call void bean.Point.setX int !37!0!0!0!I In the case of 2 pieces of before advice with the same signature and the same pointcut the handles would differ by the second one ending in "!2". The Advice knows which number advice it is in the file and so this could be used to get this number rather than keeping a separate record . The examples above are taken from AJDT and include the project as the top level prefix of the handle. For starters we can use the config file name.</description>
    <commit commitTime="2006-06-06 08:38:28" id="5e74f35fa0ac6002b0a291259b88c1b0017fbf40"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
      <file>asm/src/org/aspectj/asm/AsmManager.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/IncrementalStateManager.java</file>
      <file>asm/src/org/aspectj/asm/IProgramElement.java</file>
      <file>asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
      <file>asm/src/org/aspectj/asm/internal/ProgramElement.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java</file>
      <file>asm/src/org/aspectj/asm/IHierarchy.java</file>
    </fixedFiles>
  </bug>
  <bug id="141945" reportTime="2006-05-16 04:10:00">
    <summary>Compiler issues message concerning aop.xml even when not doing LTW</summary>
    <description>From the mailing list: ============= I am executing the command as below, COMMAND: ajc -inpath woven_hello1.jar -aspectpath aspect2.jar -outjar woven_hello2.jar I am getting same old error, woven_hello1.jar [error] aspect 'aspect1' woven into 'Hello' must be declared in an aop.xml file. no source information available I have placed both aspect1.class and aspect2.class in CLASSPATH system variable. ============== We shouldn't be putting out messages about aop.xml when we are not doing LTW - this message points the user to a solution that will not work in this case!</description>
    <commit commitTime="2006-05-16 12:30:08" id="fc7db25dad5d302221669c7cfdb4890f061d2e9e"/>
    <fixedFiles>
      <file>tests/java5/ataspectj/ataspectj/ltwreweavable/MainReweavableLogging.java</file>
    </fixedFiles>
  </bug>
  <bug id="141956" reportTime="2006-05-16 05:12:00">
    <summary>Null Pointer Exception when trying to skip Parent Mungers.</summary>
    <description>I don't know much about the internal workings of aspectJ but this bug keeps popping up so I went through the trouble of checking of trying to debug it so that I could hopefully provide enough information to get it fixed. This happens while using eclipse AJDT. It never happens if I fully do a clean before rebuild. It only seems to happen when doing incrmental builds using the project-&amp;gt;build automatically setting . The error happens in the iterator that recursively builds a list of methods to return for matching. The error is triggered here: // we need to know if it is an interface from Parent kind munger // as those are used for @AJ ITD and we precisely want to skip those boolean shouldSkip = false; for int j = 0; j &amp;lt; rtx.interTypeMungers.size ; j++ { ConcreteTypeMunger munger = ConcreteTypeMunger rtx.interTypeMungers.get j ; if munger.getMunger .getKind == ResolvedTypeMunger.Parent { shouldSkip = true; break; } } munger.getMunger returns null because the munger instance is a BcelPerClauseAspectAdder. My naive fix would be to check munger.getMunger == null or check munger.getKind . I'm assuming that BcelPerClausAspectAdder is one that should be skipped since it is related to @AJ ??? Again, I don't know very much about the internal architecture of the weaver magic so I hope this is enough information. I would appreciate it if someone who knows more of the internals could speculate as to why this bug would never pop up on a clean build but only on incremental builds? Also it's not on all incremental builds and I haven't been able to isolate what kind of changes or compiles it triggers this, although it seems that once I got the exception once, I keep getting it on every build until I do a clean. java.lang.NullPointerException at org.aspectj.weaver.ResolvedType.addAndRecurse ResolvedType.java:288 at org.aspectj.weaver.ResolvedType.getMethodsWithoutIterator ResolvedType.java:257 at org.aspectj.weaver.ResolvedType.lookupResolvedMember ResolvedType.java:378 at org.aspectj.weaver.JoinPointSignatureIterator.findSignaturesFromSupertypes JoinPointSignatureIterator.java:178 at org.aspectj.weaver.JoinPointSignatureIterator.hasNext JoinPointSignatureIterator.java:69 at org.aspectj.weaver.patterns.SignaturePattern.matches SignaturePattern.java:287 at org.aspectj.weaver.patterns.KindedPointcut.matchInternal KindedPointcut.java:103 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:144 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:51 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:144 at org.aspectj.weaver.ShadowMunger.match ShadowMunger.java:64 at org.aspectj.weaver.Advice.match Advice.java:109 at org.aspectj.weaver.bcel.BcelAdvice.match BcelAdvice.java:104 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2210 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:1752 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:479 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:109 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1574 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1525 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1305 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1127 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:321 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:192 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:862 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:269 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:168 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191</description>
    <commit commitTime="2006-05-17 11:38:39" id="5f6a6b12c560f80dd720a943c4c63cf8dc182cc3"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/ResolvedType.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="142466" reportTime="2006-05-18 07:32:00">
    <summary>[ltw] Fail at runtime if abstract methods are not implemented in a hierarchy that finishes with an XML aspect</summary>
    <description>see pr125480 - copying the test for that will be a good basis for a test for this bug. We don't check that when defining a concrete aspect there are no unimplemented abstract methods in the aspect we are concretizing.</description>
    <commit commitTime="2006-05-23 07:55:53" id="69e24e90d4fee7115ecbc8c7786915b1f741471b"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="143924" reportTime="2006-05-26 06:17:00">
    <summary>Missing relationship for declare @method when annotating a method with non primitive argument</summary>
    <description>Given this program there is no marker from the declare to the annotated method, although this is being woven since there is output from -showWeaveInfo: ---------------------------------------------------------------- public aspect DeclareAnnotation { declare @method : * debit .. : @Secured role="supervisor" ; } class BankAccount { public void debit String accId,long amount { } } @interface Secured { String role ; }</description>
    <commit commitTime="2006-05-30 09:59:53" id="26a8a862994acefb10a57d561b18c94ffeba41a4"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java</file>
    </fixedFiles>
  </bug>
  <bug id="143930" reportTime="2006-05-26 07:12:00">
    <summary>create constructor ipe in same was as method ipes</summary>
    <description>At the moment the way the constructor ipes are constructed is different to that of methods. For example, for a method which has signature public void myMethod String s, int i the corresponding ipe is firstly constructed with name "myMethod" and then the arguments are added. Adding the arguments results in an ipe with name "myMethod java.lang.String,int ". With a constructor that has signature public MyClass String s, int i the corresponding ipe is constructed with name "MyClass String,int " and no arguments are associated with it. Up until now there hasn't been a use case to change this. However, due to enhancement bug 141730 updating handles not to rely on source locations it is necessary for the constructor ipes to have arguments associated with them. Also, if the ipes of methods and constructors had similar properties then the processing for creating the new handles can be the same.</description>
    <commit commitTime="2006-05-30 09:59:53" id="26a8a862994acefb10a57d561b18c94ffeba41a4"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java</file>
    </fixedFiles>
  </bug>
  <bug id="144465" reportTime="2006-05-30 11:15:00">
    <summary>-XserialVersionUID option ignored in LTW</summary>
    <description>Can't supply -XserialVersionUID when LTW</description>
    <commit commitTime="2006-05-30 16:09:31" id="b4a28a99e4e7afbf3cefb3b43a6432b24525d7b2"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="144602" reportTime="2006-05-31 03:34:00">
    <summary>[@AspectJ] perthis aspect fails with repetitive field in woven class</summary>
    <description>Received on email: Sorry if I'm not going through the proper channels, but I ran into an issue and found the following Bugzilla bug and it is strikingly familiar to my problem, and I was hoping you could help me out, or point me in the right direction. Basically I have an aspect using the @AspectJ style , and all is fine and good until I change it from being singleton to perthis . The aspect is not abstract, nor does it derive from anything. I'm getting the following exception, much like the other bug: java.lang.ClassFormatError: Repetitive field name/signature in class file com/yada/yada/yada/MyAspect And this is some partial output from decompiling the class: private transient MyAspect ajc$com_yada_yada_yada_MyAspect$perObjectField; private static Throwable ajc$initFailureCause; private transient MyAspect ajc$com_yada_yada_yada_MyAspect$perObjectField; My aspect looks like this: @Aspect "perthis call * com.yada.yada.yada.SomeClass.someMethod .. " public class MyAspect { @Pointcut "call * com.yada.yada.yada.SomeClass.someMethod .. &amp;amp;&amp;amp; args j,k, * " public void pointcut int j, int k {} @Before "pointcut j,k " public void advice int j, int k { … } } The exact same code, with @Aspect instead of @Aspect "perthis … works fine. Any enlightenment you can provide would be really helpful, here is the bugzilla bug link I found through Google: https://bugs.eclipse.org/bugs/show_bug.cgi?id=114436</description>
    <commit commitTime="2006-05-31 09:31:45" id="10f097893bfb615d3d7952252ab68bba1a1ad002"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="144717" reportTime="2006-05-31 12:43:00">
    <summary>org.aspectj.weaver.BCException: Do not call nameToSignature with something that looks like a signature descriptor : '[Ljava.lang.String;'</summary>
    <description>The exception below is produced when parsing a pointcut that uses an array type in args using the reflection world pointcut parser support. org.aspectj.weaver.BCException: Do not call nameToSignature with something that looks like a signature descriptor : '[Ljava.lang.String;' at org.aspectj.weaver.UnresolvedType.nameToSignature UnresolvedType.java:741 at org.aspectj.weaver.UnresolvedType.forName UnresolvedType.java:311 at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.getDeclaredPointcuts Java15ReflectionBasedReferenceTypeDelegate.java:260 at org.aspectj.weaver.ReferenceType.getDeclaredPointcuts ReferenceType.java:526 at org.aspectj.weaver.ResolvedType$7.get ResolvedType.java:468 at org.aspectj.weaver.Iterators$6.hasNext Iterators.java:118 at org.aspectj.weaver.Iterators$5.hasNext Iterators.java:128 at org.aspectj.weaver.ResolvedType.findPointcut ResolvedType.java:479 at org.aspectj.weaver.patterns.ReferencePointcut.resolveBindings ReferencePointcut.java:151 at org.aspectj.weaver.patterns.Pointcut.resolve Pointcut.java:194 at org.aspectj.weaver.tools.PointcutParser.resolvePointcutExpression PointcutParser.java:330 at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression PointcutParser.java:308 at org.aspectj.weaver.tools.Java15PointcutExpressionTest.testArrayTypeInArgs Java15PointcutExpressionTest.java:304 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:585 at junit.framework.TestCase.runTest TestCase.java:154 at junit.framework.TestCase.runBare TestCase.java:127 at junit.framework.TestResult$1.protect TestResult.java:106 at junit.framework.TestResult.runProtected TestResult.java:124 at junit.framework.TestResult.run TestResult.java:109 at junit.framework.TestCase.run TestCase.java:118 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests RemoteTestRunner.java:478 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run RemoteTestRunner.java:344 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main RemoteTestRunner.java:196</description>
    <commit commitTime="2006-05-31 17:32:36" id="97cd71ae811def2ee79d34567f60acb9f76ebf0c"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/tools/PointcutParser.java</file>
      <file>weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java</file>
      <file>weaver5/java5-testsrc/org/aspectj/weaver/tools/Java15PointcutExpressionTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="145086" reportTime="2006-06-02 11:35:00">
    <summary>NPE when weak reference set in signature</summary>
    <description>Simon ran into the same problem in setting the values. I will attach a patch to fix this, with test cases to properly verify it works in both cases. java.lang.NullPointerException at org.aspectj.runtime.reflect.SignatureImpl$CacheImpl.set SignatureImpl.java:224 at org.aspectj.runtime.reflect.SignatureImpl.toString SignatureImpl.java:57 at org.aspectj.runtime.reflect.SignatureImpl.toString SignatureImpl.java:62</description>
    <commit commitTime="2006-06-03 08:27:06" id="f821ca3dae5681758d23a2a0531d0d42f017152e"/>
    <fixedFiles>
      <file>runtime/src/org/aspectj/runtime/reflect/SignatureImpl.java</file>
      <file>runtime/testsrc/org/aspectj/runtime/reflect/JoinPointImplTest.java</file>
      <file>runtime/testsrc/org/aspectj/runtime/reflect/SignatureTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="145322" reportTime="2006-06-05 08:12:00">
    <summary>Failure of testCompareSubclassDelegates on J9 1.5.0 SR1</summary>
    <description>This would appear to be a regression of bug 120909 which was fixed for 1.5.0. The latest J9 can be obtained here http://www-128.ibm.com/developerworks/java/jdk/index.html . TESTROOT RunTheseBeforeYouCommitTests AllTests BcweaverModuleTests15 org.aspectj.weaver.TestJava5ReflectionBasedReferenceTypeDelegate testCompareSubclassDelegates org.aspectj.weaver.TestJava5ReflectionBasedReferenceTypeDelegate junit.framework.AssertionFailedError: Should be one extra clinit in BCEL case, but bcel=41 reflect=41 at junit.framework.Assert.fail Assert.java:47 at junit.framework.Assert.assertTrue Assert.java:20 at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateTest.testCompareSubclassDelegates ReflectionBasedReferenceTypeDelegateTest.java:286 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:64 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:43 at java.lang.reflect.Method.invoke Method.java:615 at junit.framework.TestCase.runTest TestCase.java:154 at junit.framework.TestCase.runBare TestCase.java:127 at junit.framework.TestResult$1.protect TestResult.java:106 at junit.framework.TestResult.runProtected TestResult.java:124 at junit.framework.TestResult.run TestResult.java:109 at junit.framework.TestCase.run TestCase.java:118 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run JUnit3TestReference.java:128 at org.eclipse.jdt.internal.junit.runner.TestExecution.run TestExecution.java:38 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests RemoteTestRunner.java:460 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests RemoteTestRunner.java:673 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run RemoteTestRunner.java:386 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main RemoteTestRunner.java:196</description>
    <commit commitTime="2006-06-06 08:40:16" id="3e0650d8a084248c4eb93f22cd8abfdabe6ba2a8"/>
    <fixedFiles>
      <file>weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="145442" reportTime="2006-06-05 19:24:00">
    <summary>The line number is missing for an advised class.</summary>
    <description>In the java stack trace line number is missing: javax.resource.ResourceException: java.lang.UnsupportedOperationException: Content is text. Use method getBytes charset instead to extract content as bytes  at com.ibm.j2ca.flatfile.FlatFileInteraction.execute_aroundBody0 FlatFileInteraction.java:237  at com.ibm.j2ca.flatfile.FlatFileInteraction.execute_aroundBody1$advice FlatFileInteraction.java:287  at com.ibm.j2ca.flatfile.FlatFileInteraction.execute FlatFileInteraction.java  at com.ibm.ws.sca.internal.j2c.J2CMethodBindingImpl.invoke J2CMethodBindingImpl.java:157  at com.ibm.ws.sca.internal.j2c.J2CInterfaceBindingImpl.invoke J2CInterfaceBindingImpl.java:102  at com.ibm.ws.sca.internal.j2c.handler.J2CImportHandler.invokeDynamicImport J2CImportHandler.java:616  at com.ibm.ws.sca.internal.j2c.handler.J2CImportHandler.processMessage J2CImportHandler.java:329  at com.ibm.ws.sca.internal.message.impl.MessageDispatcherImpl.processMessage MessageDispatcherImpl.java:397  at com.ibm.ws.sca.internal.message.impl.ManagedMessageImpl.process ManagedMessageImpl.java:476  at com.ibm.wsspi.sca.ejb.module.impl.ModuleSessionBean.processUOWMessage ModuleSessionBean.java:335  at</description>
    <commit commitTime="2006-07-11 07:56:23" id="5c5803307fcc99fa0f830b55000adadef3d857c9"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="145689" reportTime="2006-06-07 00:17:00">
    <summary>Compile Errors Still Sometimes not Shown in Problems View</summary>
    <description>I converted a fairly large pure Java project to be an AspectJ project and find that when I get syntax errors the AspectJ compile stops short without producing an outjar but no problems are listed for it in the problems view. This is with no aspects involved: this is actually a defect in AJDT acting as a pure Java builder. This is with a recent dev build 20060512123514 .</description>
    <commit commitTime="2006-07-24 11:05:49" id="beaeab3dbf69175b3f08c30bb6ae82aa6b4eb728"/>
    <fixedFiles>
      <file>ajde/testsrc/org/aspectj/ajde/ReweavableTestCase.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/BuildCancellingTest.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/AjdeInteractionTestbed.java</file>
      <file>ajde/src/org/aspectj/ajde/internal/AspectJBuildManager.java</file>
      <file>ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/NullIdeProgressMonitor.java</file>
      <file>ajde/src/org/aspectj/ajde/BuildProgressMonitor.java</file>
      <file>testing/src/org/aspectj/testing/ajde/CompileCommand.java</file>
      <file>ajde/src/org/aspectj/ajde/ui/swing/DefaultBuildProgressMonitor.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/ShowWeaveMessagesTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="145950" reportTime="2006-06-08 03:57:00">
    <summary>-XaddSerialVersionUID doesn't work if there is an indirect route to Serializable in the hierarchy</summary>
    <description>-XaddSerialVersionUID fails to add a serialversionuid field to a type if Serializable isn't a direct parent. this case fails: class X implements I { } // X will not get the field if woven interface I implements Serializable {} this works: class X implements Serializable {} // X will get the field if woven there is a mistake in the code that checks for the serializable interface</description>
    <commit commitTime="2006-06-08 08:27:34" id="afe41a56ebf6c0dcbe69285a263f0e5739d58028"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="145963" reportTime="2006-06-08 05:44:00">
    <summary>add injar aspects to the model</summary>
    <description>Aspects which come from injars are currently not in the model. Instead, whenever the model is asked for the IPE corresponding to advice which is in an injar then an IPE for the source file is returned. The consequence is within AJDT the relationships are marked as coming from "injar aspect &amp;lt;filename&amp;gt;".</description>
    <commit commitTime="2006-06-12 13:09:51" id="4dcb8f3d88ed5e464bf31378d9c222fdf791ff4a"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/ShadowMunger.java</file>
      <file>asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java</file>
      <file>weaver/src/org/aspectj/weaver/Advice.java</file>
      <file>weaver/src/org/aspectj/weaver/Checker.java</file>
      <file>weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc152/AllTestsAspectJ152.java</file>
      <file>asm/src/org/aspectj/asm/internal/ProgramElement.java</file>
      <file>weaver/src/org/aspectj/weaver/World.java</file>
    </fixedFiles>
  </bug>
  <bug id="146546" reportTime="2006-06-12 07:59:00">
    <summary>Remove hard coded dependency on "|" in getFileName .. methods</summary>
    <description>As part of bug 141730 we need to remove the hard coded dependency on "|" in methods which use handles to get the filename. These methods are: AsmManager.getFileName String AspectJElementHierarchy.getFileName String</description>
    <commit commitTime="2006-06-12 14:00:02" id="38cc0dd2f77eaea1778ede835e7da0aa9d871de7"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/AsmManager.java</file>
      <file>asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java</file>
    </fixedFiles>
  </bug>
  <bug id="146781" reportTime="2006-06-13 04:17:00">
    <summary>[pipeline] Efficient pipelining compilation system</summary>
    <description>Moving to a pipelining architecture in AspectJ is hard. The interplay between static crosscutting constructs ITDs, declares makes it hard to process types one at a time - that's why we have the current model of: 1. compile everything 2. fix up the type system based on ITDs 3. weave everything At step 2 we are consuming a large amount of memory. In the ideal pipeline system we move to a model where we compile and weave one file at a time obviously compiling the aspects first so that weaving can be done correctly . A first step towards pipelining could ignore the complexities of ITDs/declares and say that if the user is simply using pointcuts and advice dynamic crosscutting then we pipeline, if they are using the more complex constructs then we operate as today. This would mean that new users that always start with just pointcuts and advice would get the best initial experience using AJDT.</description>
    <commit commitTime="2006-07-19 12:06:04" id="2e81a3f807c74a9bbae7c66e19b2a94cc9c90c08"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/Type.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/InvokeInstruction.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/Utility.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/FieldInstruction.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/ObjectType.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/util/SyntheticRepository.java</file>
    </fixedFiles>
  </bug>
  <bug id="147711" reportTime="2006-06-19 08:15:00">
    <summary>Add an option to generate aj-synthetics with true synthetic flag</summary>
    <description>In a number of cases tools are getting confused over generated aj members that are "aj-synthetic" but not marked with the synthetic attribute because in the past, this has upset other tools . The most recent example was a JAXB posting on the list - by having a perthis clause in an aspect that matched a type with JAXB 2 annotations the user was no longer able to use JAXB. This is a serious issue, and will prevent the usage of JAXB 2 with any type into which we introduce properties as aj-synthetic members. The JAXB 2 solution to ignore such fields is to annotate them with @XmlTransient, but since the field does not exist in the user program they can't even do this!</description>
    <commit commitTime="2006-06-24 11:36:59" id="c9f311aeeb11fb1427ec8857c24cfe3ffa6c7c9d"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/DeclareDeclaration.java</file>
      <file>weaver/src/org/aspectj/weaver/NameMangler.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AdviceDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="147801" reportTime="2006-06-19 18:07:00">
    <summary>java.lang.ClassFormatError: Repetitive method name/signature</summary>
    <description>I get a ClassFormatError trying to perform runtime-weaving on a DB2 class. The class being woven is COM.ibm.db2.jdbc.app.DB2PreparedStatement. The full message exception is: java.lang.ClassFormatError: Repetitive method name/signature in class file COM/ibm/db2/jdbc/app/DB2PreparedStatement. In examining the post-weave class file, it looks as if Aspectj is defining a duplicate method within the class called getParameterMetaData . Here are the messages from the weaver: 04:21:13,640 INFO [STDOUT] info weaving 'COM.ibm.db2.jdbc.app.DB2CallableStatement' 04:21:13,640 INFO [STDOUT] info weaver operating in reweavable mode. Need to verify any required types exist. 04:21:13,671 INFO [STDOUT] info weaving 'COM.ibm.db2.jdbc.app.DB2PreparedStatement' 04:21:13,671 INFO [STDOUT] info weaver operating in reweavable mode. Need to verify any required types exist. 04:21:13,703 INFO [STDOUT] weaveinfo Join point 'method-execution java.sql.ResultSet COM.ibm.db2.jdbc.app.DB2PreparedStatement.executeQuery ' in Type 'COM.ibm.db2.jdbc.app.DB2PreparedStatement' DB2PreparedStatement.java:1679 advised by before advice from 'com.ibm.tivoli.itcam.toolkit.ai.aspectj.captureJDBC.CaptureSQLStatement' CaptureSQLStatement.aj:747 [with runtime test] 04:21:13,703 INFO [STDOUT] weaveinfo Join point 'method-execution java.sql.ResultSet COM.ibm.db2.jdbc.app.DB2PreparedStatement.executeQuery ' in Type 'COM.ibm.db2.jdbc.app.DB2PreparedStatement' DB2PreparedStatement.java:1679 advised by afterReturning advice from 'com.ibm.tivoli.itcam.toolkit.ai.aspectj.captureJDBC.CaptureSQLStatement' CaptureSQLStatement.aj:946 [with runtime test] 04:21:13,718 INFO [STDOUT] weaveinfo Join point 'method-execution java.sql.ResultSet COM.ibm.db2.jdbc.app.DB2PreparedStatement.executeQuery ' in Type 'COM.ibm.db2.jdbc.app.DB2PreparedStatement' DB2PreparedStatement.java:1679 advised by afterThrowing advice from 'com.ibm.tivoli.itcam.toolkit.ai.aspectj.captureJDBC.CaptureSQLStatement' CaptureSQLStatement.aj:971 [with runtime test] 04:21:13,718 INFO [STDOUT] weaveinfo Join point 'method-execution boolean COM.ibm.db2.jdbc.app.DB2PreparedStatement.execute ' in Type 'COM.ibm.db2.jdbc.app.DB2PreparedStatement' DB2PreparedStatement.java:3971 advised by before advice from 'com.ibm.tivoli.itcam.toolkit.ai.aspectj.captureJDBC.CaptureSQLStatement' CaptureSQLStatement.aj:833 [with runtime test] 04:21:13,718 INFO [STDOUT] weaveinfo Join point 'method-execution boolean COM.ibm.db2.jdbc.app.DB2PreparedStatement.execute ' in Type 'COM.ibm.db2.jdbc.app.DB2PreparedStatement' DB2PreparedStatement.java:3971 advised by afterReturning advice from 'com.ibm.tivoli.itcam.toolkit.ai.aspectj.captureJDBC.CaptureSQLStatement' CaptureSQLStatement.aj:946 [with runtime test]</description>
    <commit commitTime="2006-06-21 11:33:21" id="13dde4efd453d32bb4f25781a8fa7aafc2cef850"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
      <file>weaver/src/org/aspectj/weaver/World.java</file>
    </fixedFiles>
  </bug>
  <bug id="147845" reportTime="2006-06-20 06:16:00">
    <summary>Generic abstract aspect hierarchies 3 deep or higher can fail when type parameters have bounds</summary>
    <description>The program below should compile happily, but fails with: [error] Type B does not meet the specification for type parameter 1 A extends MyBase in generic type Base abstract aspect Middle&amp;lt;B extends MyBase&amp;gt; extends Base&amp;lt;B&amp;gt; {} ^^^^^ The test program: ------------------ interface MyBase {}; interface MyMarker extends MyBase {} abstract aspect Base&amp;lt;A extends MyBase&amp;gt; {} abstract aspect Middle&amp;lt;B extends MyBase&amp;gt; extends Base&amp;lt;B&amp;gt; {} aspect Sub extends Middle&amp;lt;MyMarker&amp;gt; {}</description>
    <commit commitTime="2006-06-20 11:12:49" id="791f8a7c3f37d9b10b8ad1692df998733bbc2f20"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/TypeVariable.java</file>
    </fixedFiles>
  </bug>
  <bug id="148007" reportTime="2006-06-21 05:27:00">
    <summary>boolean methods with after advice return incorrect result on JRockit under WLS</summary>
    <description>n 21/06/06, Stearns, Randy &amp;lt; RStearns@knowledgestorm.com &amp;gt; wrote: I've been able to create a reproducible test. My really pared down aspect: public aspect LoggingAspect { pointcut logPointcut : execution * *.* .. &amp;amp;&amp;amp; !within LoggingAspect ; before : logPointcut { System.out.println "entering" ; } after : logPointcut { System.out.println "exiting" ; } } As it only appears in JRockit *while running in WebLogic*, I created a test servlet below As long as there is an after advice, tests 2 and 5 in the servlet return incorrect results. If I remove it, everything works. Also, if tests 2 and 5 return Boolean objects, it works. It appears AJ not like after advice on methods returning primitives. Is there a way to bypass them? Randy package test; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; import java.io.PrintWriter; /** * Hello world! */ public class TestServlet extends HttpServlet { protected void service HttpServletRequest request, HttpServletResponse response throws ServletException, IOException { booleanTest response ; } private void booleanTest HttpServletResponse response throws ServletException { PrintWriter out = null; try { out = response.getWriter ; } catch IOException ioe { throw new ServletException "Could not get writer." ; } out.println "Test 1a. Should be false. Was: " + invert1a ; out.println "Test 1b. Should be true. Was: " + invert1b ; out.println "Test 2. Should be false. Was: " + invert2 ; out.println "Test 3. Should be true. Was: " + invert3 ; out.println "Test 4. Should be true. Was: " + invert4 ; out.println "Test 5. Should be false. Was: " + invert5 ; } private boolean invert1a { return ! true; } private boolean invert1b { return ! false; } private boolean invert2 { return ! isTrue ; } private boolean invert3 { return ! isFalse ; } private boolean invert4 { boolean temp = isFalse ; return ! temp; } private boolean invert5 { boolean temp = isTrue ; return ! temp; } private boolean isTrue { return true; } private boolean isFalse { return false; } }</description>
    <commit commitTime="2006-06-22 04:49:26" id="426cbdccfdf8fcfcda07b86d8e524d1034b2d0b7"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/Utility.java</file>
    </fixedFiles>
  </bug>
  <bug id="148190" reportTime="2006-06-22 06:55:00">
    <summary>revisit the interface tools are expected to use to invoke the compiler</summary>
    <description>Whilst putting the last version of AspectJ in AJDT too many changes were required within AJDT to cope with updates in AspectJ. This is due to problems on both sides. On AJ's side the interfaces we expect AJDT to use aren't clear enough. The javadoc for many of the methods either isn't there or gives the wrong information. One has to look at the implementation to work out what should be returned see IHierachy for example . Also, looking at IHierachy there are a lot of methods "findElementForXXX". Depending on which one you use depends on whether or not a file node is created if the element can't be found. This is generally not documented although it would be better if there was consistent behaviour. IRelationshipMap also needs to be looked at for example the get methods. For debugging the model, AJDT has a method dumpAJDEstructureModel which uses the get IProgramElement method rather than get String version. These two methods return different things if the relationship end is in an injar. Consequently AJDT doesn't get hold of the end of the relationship which is contained in the jar file. AspectJ should also be able to change the implementation and not affect AJDT. This is particularly related to IProgramElement handles and filling in the structure model for injar aspects. Idealy AJDT should be able to cope with these programelements as they are filled in within the aspectj structure model. At the moment this is not the case. On AJDT's side AJDT is too reliant on specific answers from AspectJ. For example AJDT's AJRelationshipManager class which keeps a record of all relationships. Should AJDT need to have its own list of relationships? Wouldn't it be better for AJDT to be able to ask AspectJ for the relationships it's providing and then deal with those? To compound matters at the moment AJDT uses an array of the relationships and in the persisting of the model relies on particular relationships to be in a specific place within the array. As it turns out in the case of removing uses pointcut/pointcut used by relationship this was ok since they were at the end of the array, however, this is not ideal. Models that were created with the uses pointcut/pointcut used by relationship should be able to be read since all we've done is remove a relationship but it needs to be able to cope with the all be it unlikely event that a new relationship was added. Again, earlier models should be able to be read since they just don't include this new relationship but the hard requirement of the index within the array makes this hard especially if the uses pointcut/pointcut used by relationship isn't returned - bug 148027 .</description>
    <commit commitTime="2007-01-11 11:29:46" id="18d0d458a36ef2760495723b0dd90c285b8f03fe"/>
    <fixedFiles>
      <file>testing/testsrc/org/aspectj/testing/util/UtilTests.java</file>
      <file>testing/src/org/aspectj/testing/harness/bridge/IncCompilerRun.java</file>
    </fixedFiles>
  </bug>
  <bug id="148219" reportTime="2006-06-22 10:05:00">
    <summary>Wrong warning is reported</summary>
    <description>I used ajdt_1.3.1_for_eclipse_3.1.zip on Eclipse 3.1.2. Below is my aspectj code. public aspect MyMessages { pointcut getResourceString String key : args key, .. &amp;amp;&amp;amp; call * CommonPlugin.getResourceString String, .. ; String around String key :getResourceString key { return key; } } The warning message is The parameter key is never read. See my screenshot.</description>
    <commit commitTime="2006-08-08 15:37:36" id="07c2189bdb6d133886056ea1c02a302975f1e724"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="148381" reportTime="2006-06-23 08:56:00">
    <summary>[@AspectJ] Bindings through argNames doesn't seem to work</summary>
    <description>I have a simple aspect with bound arguments to advice. It all works fine with 'ajc' as the compiler or with 'javac -g', but not when I try with argNames and 'javac' without -g. Here is the aspect: package test; import org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.annotation.Around; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.Pointcut; @Aspect class Monitor { @Pointcut value="execution @PerformanceMonitor * * .. &amp;amp;&amp;amp; @annotation monitoringAnnot ", argNames="monitoringAnnot" public void monitored PerformanceMonitor monitoringAnnot {} @Around value="monitored monitoringAnnot ", argNames="pjp, monitoringAnnot" public Object flagExpectationMismatch ProceedingJoinPoint pjp, PerformanceMonitor monitoringAnnot throws Throwable { long start = System.nanoTime ; Object ret = pjp.proceed ; long end = System.nanoTime ; if end - start &amp;gt; monitoringAnnot.expected { System.out.println "Method " + pjp.getSignature .toShortString + " took longer than expected\n\t" + "Max expected = " + monitoringAnnot.expected + ", actual = " + end-start ; } return ret; } } And here is a class: package test; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; public class Main { public static void main String[] args { new Main .foo ; } @PerformanceMonitor expected=1000 public void foo { } } @Retention RetentionPolicy.RUNTIME @Target ElementType.METHOD @interface PerformanceMonitor { public int expected ; } And here is META-INF/aop.xml: &amp;lt;aspectj&amp;gt; &amp;lt;aspects&amp;gt; &amp;lt;aspect name="test.Monitor"/&amp;gt; &amp;lt;/aspects&amp;gt; &amp;lt;/aspectj&amp;gt; &amp;gt; ajc -source 1.5 test\*.java &amp;gt; java test.Main ... normal &amp;gt; javac -g:vars test\Monitor.java &amp;gt; javac test\Main.java &amp;gt; java -javaagent:%ASPECTJ_LIB_HOME%\aspectjweaver.jar test.Main ... normal &amp;gt; javac test\*.java &amp;gt; java -javaagent:%ASPECTJ_LIB_HOME%\aspectjweaver.jar test.Main error at &amp;lt;Unknown&amp;gt;::0 Cannot read debug info for @Aspect to handle formal bindin g in pointcuts please compile with 'javac -g' or '&amp;lt;javac debug='true'.../&amp;gt;' in Ant warning register definition failed</description>
    <commit commitTime="2007-11-08 15:33:36" id="6ae7fbf008528f4c24b2d63933ee4504a64164c7"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc154/Ajc154Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="148388" reportTime="2006-06-23 09:55:00">
    <summary>LTW weaver produces a debug message at the begining</summary>
    <description>Using the code in bug #148381 with any of the working options , LT weaver produces what seems a debug message: "? WeavingClassFileProvider.acceptResult test.Main-&amp;gt;test.Main$AjcClosure1" &amp;gt; java -javaagent:%ASPECTJ_LIB_HOME%\aspectjweaver.jar test.Main ? WeavingClassFileProvider.acceptResult test.Main-&amp;gt;test.Main$AjcClosure1 Method Main.foo took longer than expected Max expected = 1000, actual = 65371</description>
    <commit commitTime="2006-06-27 18:28:17" id="99d1c184fdbaafc772ae290d7af3b3430e33d33b"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="148409" reportTime="2006-06-23 12:29:00">
    <summary>[generics] ClassCastException in UnresolvedType.java:348</summary>
    <description>I am using AspectJ load time weaving with Spring 2.0 RC1 to inject my entities, and I am getting the following exception: java.lang.ClassCastException: org.aspectj.apache.bcel.classfile.Signature$TypeVariableSignature at org.aspectj.weaver.UnresolvedType.forGenericTypeSignature UnresolvedType.java:348 at org.aspectj.weaver.bcel.BcelWorld.addSourceObjectType BcelWorld.java:385 at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.accept ClassLoaderWeavingAdaptor.java:492 at org.aspectj.weaver.tools.WeavingAdaptor.shouldWeave WeavingAdaptor.java:230 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:210 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:65 at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform ClassPreProcessorAgentAdapter.java:55 at sun.instrument.TransformerManager.transform TransformerManager.java:122 at sun.instrument.InstrumentationImpl.transform InstrumentationImpl.java:155 at java.lang.ClassLoader.defineClass1 Native Method . . . Having examined the call stack under the debugger, this seems to happening when the weaver is attempting to determine whether a particular class should be weaved. The exception is thrown in the following method, at the cast highlighted below. public static UnresolvedType forGenericTypeSignature String sig,String declaredGenericSig { UnresolvedType ret = UnresolvedType.forSignature sig ; ret.typeKind=TypeKind.GENERIC; ClassSignature csig = new GenericSignatureParser .parseAsClassSignature declaredGenericSig ; Signature.FormalTypeParameter[] ftps = csig.formalTypeParameters; ret.typeVariables = new TypeVariable[ftps.length]; for int i = 0; i &amp;lt; ftps.length; i++ { Signature.FormalTypeParameter parameter = ftps[i]; Signature.ClassTypeSignature cts = Signature.ClassTypeSignature parameter.classBound; // EXCEPTION HERE! ret.typeVariables[i]=new TypeVariable ftps[i].identifier,UnresolvedType.forSignature cts.outerType.identifier+";" ; } ret.signatureErasure = sig; ret.signature = ret.signatureErasure; return ret; } The class in question which is not one that requires weaving , has the following signature: public class HibernateEntityDAO&amp;lt;interfaceT extends SecurityEntity, concreteT extends interfaceT&amp;gt; extends HibernateDaoSupport implements EntityDAO&amp;lt;interfaceT&amp;gt; The exception is happening because the parameter.classBound member is not of type Signature.ClassTypeSignature, but an instance of Signature.TypeVariableSignature. The loop variable i is 1, and parameter.identifier is “concreteT”, so it looks like it's the signature of the second type parameter concreteT that is tripping up the weaver.</description>
    <commit commitTime="2006-07-06 12:12:07" id="369de870280d4ae4f1e984a7bd8a76affb4ed0a2"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/UnresolvedType.java</file>
    </fixedFiles>
  </bug>
  <bug id="148508" reportTime="2006-06-24 01:58:00">
    <summary>[matching] subtype array type pattern support is broken</summary>
    <description>Excerpt from AspectJ Programmer's Guide: &amp;gt; Array type patterns &amp;gt; A type name pattern or subtype pattern can be &amp;gt; followed by one or more sets of square brackets &amp;gt; to make array type patterns. So Object[] is an &amp;gt; array type pattern, and so is com.xerox..*[][], &amp;gt; and so is Object+[]. Both of these pointcut definitions cause syntax errors: pointcut broken1 : execution * * Object+[] ; pointcut broken2 : execution * * * &amp;amp;&amp;amp; args Object+[] ; The compiler complains that it is expecting a ' ' instead of the '['. What gives?</description>
    <commit commitTime="2008-09-30 20:10:11" id="aca78f796d64583e8d17aac0bff6f6e502bbafa4"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc162/Ajc162Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="148693" reportTime="2006-06-26 13:29:00">
    <summary>woven class does not pass org.apache.bcel.verifier.statics.Pass2Verifier</summary>
    <description>'Number of LocalVariableTable attributes of Code attribute '&amp;lt;CODE&amp;gt;' method 'public static mypackage.MyAspect aspectOf [ Unknown attribute org.aspectj.weaver.AjSynthetic ]' exceeds number of local variable slots '0' 'There may be no more than one LocalVariableTable attribute per local variable in the Code attribute.' .'. ================================================= package mypackage; public aspect MyAspect { pointcut executeMethod : within TestClass &amp;amp;&amp;amp; execution * * .. ; before : executeMethod { System.out.println "Enter "+thisJoinPointStaticPart ; } after : executeMethod { System.out.println "Leave "+thisJoinPointStaticPart ; } } class TestClass { public static void main String[] args { } } ================================================ JustIce by Enver Haase, C 2001-2002. &amp;lt; http://bcel.sourceforge.net &amp;gt; &amp;lt; http://jakarta.apache.org/bcel &amp;gt; Now verifying: mypackage.TestClass Pass 1: VERIFIED_OK Passed verification. Pass 2: VERIFIED_OK Passed verification. Pass 3a, method number 0 ['public void &amp;lt;init&amp;gt; ']: VERIFIED_OK Passed verification. Pass 3b, method number 0 ['public void &amp;lt;init&amp;gt; ']: VERIFIED_OK Passed verification. Pass 3a, method number 1 ['public static void main String[] args [ Unknown attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00 00 00 46 ]']: VERIFIED_REJECTED Instruction invokestatic[184] 3 28 constraint violated: Return type class/interface could not be verified successfully: 'Number of LocalVariableTable attributes of Code attribute '&amp;lt;CODE&amp;gt;' method 'public static mypackage.MyAspect aspectOf [ Unknown attribute org.aspectj.weaver.AjSynthetic ]' exceeds number of local variable slots '0' 'There may be no more than one LocalVariableTable attribute per local variable in the Code attribute.' .'. Pass 3b, method number 1 ['public static void main String[] args [ Unknown attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00 00 00 46 ]']: VERIFIED_NOTYET Not yet verified. Pass 3a, method number 2 ['static void &amp;lt;clinit&amp;gt; ']: VERIFIED_OK Passed verification. Pass 3b, method number 2 ['static void &amp;lt;clinit&amp;gt; ']: VERIFIED_OK Passed verification. Warnings: Pass 2: Attribute ' Unknown attribute org.aspectj.weaver.WeaverVersion: 00 03 00 00 00 00 00 00 00 00... truncated ' as an attribute of the ClassFile structure 'public class mypackage.TestClass extends java.lang.Object filename mypackage.TestClass compiled from TestClass.java compiler version 46.0 access flags 33 constant pool 69 entries ACC_SUPER flag true Attribute s : SourceFile TestClass.java Unknown attribute org.aspectj.weaver.WeaverVersion: 00 03 00 00 00 00 00 00 00 00... truncated Unknown attribute org.aspectj.weaver.WeaverState: 53 00 00 00 01 00 12 6d 79 70... truncated 1 fields: private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0 3 methods: public void &amp;lt;init&amp;gt; public static void main String[] args [ Unknown attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00 00 00 46 ] static void &amp;lt;clinit&amp;gt; ' is unknown and will therefore be ignored. Pass 2: Attribute ' Unknown attribute org.aspectj.weaver.WeaverState: 53 00 00 00 01 00 12 6d 79 70... truncated ' as an attribute of the ClassFile structure 'public class mypackage.TestClass extends java.lang.Object filename mypackage.TestClass compiled from TestClass.java compiler version 46.0 access flags 33 constant pool 69 entries ACC_SUPER flag true Attribute s : SourceFile TestClass.java Unknown attribute org.aspectj.weaver.WeaverVersion: 00 03 00 00 00 00 00 00 00 00... truncated Unknown attribute org.aspectj.weaver.WeaverState: 53 00 00 00 01 00 12 6d 79 70... truncated 1 fields: private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0 3 methods: public void &amp;lt;init&amp;gt; public static void main String[] args [ Unknown attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00 00 00 46 ] static void &amp;lt;clinit&amp;gt; ' is unknown and will therefore be ignored. Pass 2: Attribute '&amp;lt;LocalVariableTable: LocalVariable start_pc = 0, length = 5, index = 0:mypackage.TestClass this &amp;gt;' as an attribute of Code attribute '&amp;lt;CODE&amp;gt;' method 'public void &amp;lt;init&amp;gt; ' will effectively be ignored and is only useful for debuggers and such. Pass 2: Attribute '&amp;lt;LineNumberTable: LineNumber 0, 3 &amp;gt;' as an attribute of Code attribute '&amp;lt;CODE&amp;gt;' method 'public void &amp;lt;init&amp;gt; ' will effectively be ignored and is only useful for debuggers and such. Pass 2: Attribute ' Unknown attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00 00 00 46 ' as an attribute of Method 'public static void main String[] args [ Unknown attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00 00 00 46 ]' is unknown and will therefore be ignored. Pass 2: Attribute ' Unknown attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00 00 00 46 ' as an attribute of Method 'public static void main String[] args [ Unknown attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00 00 00 46 ]' is neither Code nor Exceptions and is therefore only of use for debuggers and such. Pass 2: Unknown attribute ' Unknown attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00 00 00 46 '. This attribute is not known in any context! Pass 2: Attribute '&amp;lt;LocalVariableTable: LocalVariable start_pc = 9, length = 0, index = 0:String[] args &amp;gt;' as an attribute of Code attribute '&amp;lt;CODE&amp;gt;' method 'public static void main String[] args [ Unknown attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00 00 00 46 ]' will effectively be ignored and is only useful for debuggers and such. Pass 2: Attribute '&amp;lt;LineNumberTable: LineNumber 9, 6 &amp;gt;' as an attribute of Code attribute '&amp;lt;CODE&amp;gt;' method 'public static void main String[] args [ Unknown attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00 00 00 46 ]' will effectively be ignored and is only useful for debuggers and such. Pass 2: Class or interface initialization method 'static void &amp;lt;clinit&amp;gt; ' has superfluous access modifier s set: everything but ACC_STRICT is ignored. Pass 2: Attribute '&amp;lt;LineNumberTable: LineNumber 0, 1 &amp;gt;' as an attribute of Code attribute '&amp;lt;CODE&amp;gt;' method 'static void &amp;lt;clinit&amp;gt; ' will effectively be ignored and is only useful for debuggers and such. Pass 2: Unknown attribute ' Unknown attribute org.aspectj.weaver.WeaverVersion: 00 03 00 00 00 00 00 00 00 00... truncated '. This attribute is not known in any context! Pass 2: Unknown attribute ' Unknown attribute org.aspectj.weaver.WeaverState: 53 00 00 00 01 00 12 6d 79 70... truncated '. This attribute is not known in any context!</description>
    <commit commitTime="2006-07-05 08:22:55" id="82f217fa97084beaa1c4c88ec2e96e4cf83e8aad"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="148727" reportTime="2006-06-26 16:46:00">
    <summary>Can't call synthetic aspectOf method on aspect in library jar</summary>
    <description>Separate compilation of the following program breaks on 1.5.2rc1 because of the recent change to marking aspect methods as synthetic: public aspect Asp { } public class Client { public static void main String argz[] { System.out.println "Can call aspectOf? "+Asp.aspectOf ; } } C:\devel\scratch\synthetic&amp;gt;ajc -classpath asp.jar;%CLASSPATH% Client.java C:\devel\scratch\synthetic\Client.java:3 [error] The method aspectOf is undefi ned for the type Asp System.out.println "Can call aspectOf? "+Asp.aspectOf ; 1 error C:\devel\scratch\synthetic&amp;gt;javac -classpath asp.jar;%CLASSPATH% Client.java Client.java:3: cannot find symbol symbol : method aspectOf location: class Asp System.out.println "Can call aspectOf? "+Asp.aspectOf ; ^ 1 error Clearly it's vital that external users of a library be able to call API methods like aspectOf on library aspects. This works: C:\devel\scratch\synthetic&amp;gt;ajc *.aj Client.java C:\devel\scratch\synthetic&amp;gt;java Client Can call aspectOf? Asp@b89838 Patch with test integrated into CVS tree to follow...</description>
    <commit commitTime="2006-06-28 09:16:01" id="21e06a69892469bab688d2315e7e034047431082"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/NameMangler.java</file>
    </fixedFiles>
  </bug>
  <bug id="148737" reportTime="2006-06-26 20:09:00">
    <summary>IllegalStateException for non-generic type</summary>
    <description>I believe this is similar to 112880. The message and stack trace I am getting are -- IllegalStateException Can't ask to parameterize a member of non-generic type: com...object kind raw Can't ask to parameterize a member of non-generic type: com...object kind raw java.lang.IllegalStateException: Can't ask to parameterize a member of non-generic type: com....object kind raw at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith ResolvedMemberImpl.java:612 at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith ResolvedMemberImpl.java:597 at org.aspectj.weaver.ReferenceType.getDeclaredMethods ReferenceType.java:508 at org.aspectj.weaver.ResolvedType$4.get ResolvedType.java:225 at org.aspectj.weaver.Iterators$3$1.hasNext Iterators.java:118 at org.aspectj.weaver.Iterators$5.hasNext Iterators.java:171 at org.aspectj.weaver.Iterators$3.hasNext Iterators.java:128 at org.aspectj.weaver.ResolvedType.lookupMember ResolvedType.java:345 at org.aspectj.weaver.ResolvedType.lookupMethod ResolvedType.java:326 . . . The same code was able to be weaved under 1.5.0. The reason why this is a major issue is 1.5.0 suffers from a StackOverflowException.</description>
    <commit commitTime="2006-07-03 13:49:07" id="f6834c7692082a20e94f7d88841e6c7c3f96c26a"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="148786" reportTime="2006-06-27 05:42:00">
    <summary>new array construction join point can fail for freaky array constructors</summary>
    <description>Took me a while to discover how to recreate this problem, but this class: public class A { public static void main String []argv { byte[][] bytes = new byte[][]{{0},{1}}; } } causes this bytecode: 0: iconst_2 1: anewarray #18; //class "[B" and this causes the newarray joinpoint code to go bang. eg. before : call *[].new .. {} java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelWorld.fromBcel BcelWorld.java:236 at org.aspectj.weaver.bcel.BcelWorld.makeJoinPointSignatureForArrayConstruction BcelWorld.java:483 at org.aspectj.weaver.bcel.BcelShadow.makeArrayConstructorCall BcelShadow.java:801 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2510 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2325 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:490 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:115 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1574 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1525 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1305 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1127</description>
    <commit commitTime="2006-06-27 11:34:41" id="792d1dfd50e8b9ca5df70ea84c0b35de9cfba0f3"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
    </fixedFiles>
  </bug>
  <bug id="148906" reportTime="2006-06-27 18:33:00">
    <summary>Support -Xlintfile for ajdoc</summary>
    <description>It would be helpful for ajdoc to be able to parse valid AspectJ code with the same options that are usually used to compile it. High on that list would be support for -Xlintfile. This is an issue for the command line tool and the AJDT support both.</description>
    <commit commitTime="2006-10-23 12:49:11" id="70dda814951a9cf2f79e958b2bd93f66f390b6da"/>
    <fixedFiles>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/AjdocTestCase.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/AjdocTests.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/Main.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/Config.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/CompilerWrapper.java</file>
    </fixedFiles>
  </bug>
  <bug id="148908" reportTime="2006-06-27 18:41:00">
    <summary>incorrect source signature for field ipe with qualified allocation expression</summary>
    <description>Ajdoc chokes on interfaces with initializers for final fields it doesn't preserve the initializer value . See attached AJDT project that fails when you run ajdoc with the default options on it: &amp;gt; Calling ajc... &amp;gt; Building signature files... &amp;gt; Calling javadoc... Loading source file C:\eclipse\3.2\ajdocworkingdir\BadInterface.java... 1 error &amp;gt; Decorating html files... &amp;gt; Removing generated tags this may take a while ... &amp;gt; Finished. C:\eclipse\3.2\ajdocworkingdir\BadInterface.java:9: = expected static final Comparator MY_COMPARATOR; ^</description>
    <commit commitTime="2006-09-26 09:26:33" id="fc39df195868a601e071f4fec900ab1854c43549"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="148911" reportTime="2006-06-27 19:29:00">
    <summary>NPR compiling Spring</summary>
    <description>The Spring 2.0 RC1 project contains two directories with aspects. Since the eclipse project does not compile cleanly with just the java nature, I decided to try adding the aspectj nature and giving the aspectj builder a shot. I don't have any idea what might be the trigger to the problem, but simply checking out Spring 2.0 RC1 and adding the aspectj nature should be able to reproduce. If I learn more I will add to this bug. ---- java.lang.NullPointerException at org.aspectj.org.eclipse.jdt.internal.compiler.ast.SingleTypeReference.getTypeBinding SingleTypeReference.java:39 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType TypeReference.java:132 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType TypeReference.java:123 at org.aspectj.ajdt.internal.core.builder.AsmElementFormatter.setParameters AsmElementFormatter.java:311 at org.aspectj.ajdt.internal.core.builder.AsmElementFormatter.genLabelAndKind AsmElementFormatter.java:258 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.visit AsmHierarchyBuilder.java:392 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse MethodDeclaration.java:185 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse TypeDeclaration.java:1250 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.traverse QualifiedAllocationExpression.java:392 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.traverse LocalDeclaration.java:242 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse MethodDeclaration.java:212 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse TypeDeclaration.java:1195 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse CompilationUnitDeclaration.java:339 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.internalBuild AsmHierarchyBuilder.java:145 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.buildStructureForCompilationUnit AsmHierarchyBuilder.java:87 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishedCompilationUnit EclipseFactory.java:941 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing AjCompilerAdapter.java:210 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$4$6b855184 CompilerAdapter.aj:91 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:533 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:887 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:244 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:163 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 NullPointerException thrown: null</description>
    <commit commitTime="2006-06-28 07:32:35" id="b59b036af89c28616efeda9b4cef1043c34337d6"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java</file>
    </fixedFiles>
  </bug>
  <bug id="148972" reportTime="2006-06-28 07:24:00">
    <summary>problems with binary weaving declare parents in mixed environment.</summary>
    <description>These have been reported to me on a large system doing some intricate weaving where some classes are 1.2, some 1.4, some 1.5 and the VM is 1.5. Binary weaving declare parents sometimes refuses to allow the modification of the hierarchy because it sees a clash between two methods when there is none. The two cases I'm fixing are: 1. sometimes the signatures of the return types differ with the '.' or '/' problem fix == be consistent 2. sometimes the syntheticness of the methods in the relationship isn't determined correctly</description>
    <commit commitTime="2006-06-28 11:44:10" id="2f2f5683643a0f1e0856ac43fa590c4b39f1be26"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="149289" reportTime="2006-06-30 05:54:00">
    <summary>Support system and user aop.xml configuration files</summary>
    <description>Both AJDT Bug 71066 and AspectJ Bug 95516 support the generation of an aop.xml to declare the set of know aspects for LTW. However if the user modifies the file to add options etc then the changes can be over-written. There is a need to allow the user to provide their own configuration in a separate file.</description>
    <commit commitTime="2006-08-23 14:34:28" id="fa7ca52b5278bd824a43a08e3ecd5f038696bb1a"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/OutxmlTest.java</file>
      <file>taskdefs/testsrc/org/aspectj/tools/ant/taskdefs/AjcTaskTest.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="149293" reportTime="2006-06-30 08:20:00">
    <summary>declare annotation problem: AIOOBE at ProblemReporter.java:2992</summary>
    <description>This has been happening a lot, but I'm having trouble figuring out why it's happening. It's always "5". It happens both in Eclipse and from the command line. java.lang.ArrayIndexOutOfBoundsException at org.aspectj.org.eclipse.jdt.internal.compiler.problem.ProblemReporter.invalidType ProblemReporter.java:2992 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.reportInvalidType TypeReference.java:170 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType TypeReference.java:136 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType TypeReference.java:123 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Annotation.resolveType Annotation.java:214 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode.resolveAnnotations ASTNode.java:436 at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.getAnnotationTypes EclipseSourceType.java:443 at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.isAnnotationStyleAspect EclipseSourceType.java:123 at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.isAspect EclipseSourceType.java:108 at org.aspectj.weaver.ReferenceType.isAspect ReferenceType.java:159 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.verifyAnyTypeParametersMeetBounds AjLookupEnvironment.java:269 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:228 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:301 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:315 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:887 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:244 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:163 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 ArrayIndexOutOfBoundsException thrown: 5</description>
    <commit commitTime="2006-10-17 08:08:12" id="bc2f36fdbf0e0a8d59e9613b69a3b4639b1dd668"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="149560" reportTime="2006-07-04 07:47:00">
    <summary>[@AspectJ] Incorrect weaving of static initialization join point</summary>
    <description>This error occurs if static initialization of one aspect class is woven with an advice from another aspect. It worked fine in version 1.5.0 - see the decompiled code snippet: static { Object obj = new Factory "ItoMonitoringAspect.java", Class.forName "cz.kb.usermanagement.ito.ItoMonitoringAspect" ; ajc$tjp_0 = Factory obj .makeSJP "staticinitialization", Factory obj .makeInitializerSig "8", "cz.kb.usermanagement.ito.ItoMonitoringAspect" , 0 ; obj = Factory.makeJP ajc$tjp_0, null, null ; // the static initialization of this aspect class is deliberately woven using // advice from another aspect defined elsewhere. try { UserManagementLogAspect.aspectOf .beforeClassInit org.aspectj.lang.JoinPoint obj ; } catch Throwable throwable { if throwable instanceof ExceptionInInitializerError { throw ExceptionInInitializerError throwable; } else { UserManagementLogAspect.aspectOf .afterClassInit ; throw throwable; } } UserManagementLogAspect.aspectOf .afterClassInit ; // this line below was there when compiling using AspectJ 1.5.0 // but is missing in when using AJC 1.5.2. Note: the line is, however, present if the static // initialization of this aspect class is NOT woven by advice from the other aspect . ajc$postClinit ; } As a result of the missing call to ajc$postClinit the aspect instance is not created and it's method .aspectOf throws org.aspectj.lang.NoAspectBoundException.</description>
    <commit commitTime="2006-08-22 15:22:06" id="945a257776a5879251ccb1b90cf24fd1d89bcfe6"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/PerSingleton.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelPerClauseAspectAdder.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="149908" reportTime="2006-07-06 17:24:00">
    <summary>NPE in org.aspectj.weaver.MemberImpl.getModifiers MemberImpl.java:526</summary>
    <description>java.lang.NullPointerException at org.aspectj.weaver.MemberImpl.getModifiers MemberImpl.java:526 at org.aspectj.weaver.MemberImpl.getMethodSignatureString MemberImpl.java:824 at org.aspectj.weaver.MemberImpl.getSignatureString MemberImpl.java:753 at org.aspectj.weaver.bcel.LazyClassGen.initializeTjp LazyClassGen.java:1039 at org.aspectj.weaver.bcel.LazyClassGen.initializeAllTjps LazyClassGen.java:1016 at org.aspectj.weaver.bcel.LazyClassGen.addAjcInitializers LazyClassGen.java:964 at org.aspectj.weaver.bcel.LazyClassGen.writeBack LazyClassGen.java:502 at org.aspectj.weaver.bcel.LazyClassGen.getJavaClassBytesIncludingReweavable LazyClassGen.java:652 at org.aspectj.weaver.bcel.BcelWeaver.getClassFilesFor BcelWeaver.java:1337 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1309 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1127 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:284 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:212 at org.aspectj.weaver.loadtime.WeavingURLClassLoader.defineClass WeavingURLClassLoader.java:125 at org.aspectj.weaver.ExtensibleURLClassLoader.defineClass ExtensibleURLClassLoader.java:80 at org.aspectj.weaver.ExtensibleURLClassLoader.findClass ExtensibleURLClassLoader.java:46 at java.lang.ClassLoader.loadClass ClassLoader.java:306 at java.lang.ClassLoader.loadClass ClassLoader.java:251 at java.lang.ClassLoader.loadClassInternal ClassLoader.java:319 Exception in thread "main" public aspect JoinPointTraceAspect { private int _callDepth = -1; pointcut tracePoints : !within JoinPointTraceAspect ; before : tracePoints { _callDepth++; print "Before", thisJoinPoint ; } after : tracePoints { print "After", thisJoinPoint ; _callDepth--; } private void print String prefix, Object message { for int i = 0, spaces = _callDepth * 2; i &amp;lt; spaces; i++ { System.out.print " " ; } System.out.println prefix + ": " + message ; } } aspect EdtRuleChecker { private boolean isStressChecking = true; public pointcut anySwingMethods JComponent c : target c &amp;amp;&amp;amp; call * * .. ; public pointcut threadSafeMethods : call * repaint .. || call * revalidate || call * invalidate || call * getListeners .. || call * add*Listener .. || call * remove*Listener .. ; //calls of any JComponent method, including subclasses before JComponent c : anySwingMethods c &amp;amp;&amp;amp; !threadSafeMethods &amp;amp;&amp;amp; !within EdtRuleChecker { if !SwingUtilities.isEventDispatchThread &amp;amp;&amp;amp; isStressChecking || c.isShowing { System.err.println thisJoinPoint.getSourceLocation ; System.err.println thisJoinPoint.getSignature ; System.err.println ; } } //calls of any JComponent constructor, including subclasses before : call JComponent+.new .. { if isStressChecking &amp;amp;&amp;amp; !SwingUtilities.isEventDispatchThread { System.err.println thisJoinPoint.getSourceLocation ; System.err.println thisJoinPoint.getSignature + " *constructor*" ; System.err.println ; } } } Running with SwingSet2.</description>
    <commit commitTime="2006-10-23 11:55:54" id="757004ca6702a97369aac2ba62532f13ac5ced36"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/MemberImpl.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="150095" reportTime="2006-07-09 09:51:00">
    <summary>[generics] compile error with declare parents and generics</summary>
    <description>Using aspectJ 1.5 and JDK 6b2, this code : public class MyClass {} public aspect BCSAspect { declare parents : MyClass extends java.beans.context.BeanContextSupport; } gives a compile error saying that the method toArray [[T must be implemented in MyClass, whereas toArray Object is implemented in BeanContextSupport.</description>
    <commit commitTime="2006-07-10 14:54:08" id="76097cb5054c43c7f1f5ea28aa3183d71eba2573"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="150131" reportTime="2006-07-10 09:19:00">
    <summary>org.aspectj.ajde.core testcases create "out" directory in project root</summary>
    <description>Certain tests e.g. BasicCommandTestCase use a directory called "out" for compilation results. This is created in the project root and after a refresh becomes an outgoing CVS change. The tests should use ajcSandbox.</description>
    <commit commitTime="2006-08-02 12:53:35" id="9b96943ffeac0c120464cc268a0cd98b7667869c"/>
    <fixedFiles>
      <file>tests/java5/ataspectj/ataspectj/bugs/CflowBelowStackTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="150254" reportTime="2006-07-11 09:55:00">
    <summary>Provide context for LTW verbose messages</summary>
    <description>The verbose LTW messages currently provide information about AspectJ version, what aspects are registered and which classes are woven as well as lower level details such as class loader identity. However in a large system with multiple weaving classloaders messages can become interleaved and it is impossible to determine which classloader/weaver is involved. This enhancement would use the IWeavingContext to add an identifier, by default the classloader ID, to every message.</description>
    <commit commitTime="2006-07-12 14:26:21" id="928cb4a192b7f8acdfe706a35a6e329cc0dff13c"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/IWeavingContext.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/DefaultWeavingContext.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="150271" reportTime="2006-07-11 11:31:00">
    <summary>Allow multiple levels of LTW information</summary>
    <description>It would be nice if basic information about load-time weaving what version of AspectJ is being used, what loaders are doing weaving and what configuration is being used was available without all of the -verbose information listing of all classes woven or not woven. It's also unfortunate that the flags for weaving level are 2 quite different ones: -Daj.weaving.verbose -Dorg.aspectj.weaver.showWeaveInfo Why not something like -Dorg.aspectj.weaver.level=[none|summary|info|verbose] summary: just what configuration is used info: list affected join points etc. like showWeaveInfo verbose: all like verbose now</description>
    <commit commitTime="2006-08-23 11:52:22" id="8549d861b124c20eba114b658e886bfbaf5d231c"/>
    <fixedFiles>
      <file>tests/java5/ataspectj/ataspectj/TestHelper.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/DefaultMessageHandler.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Options.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="150487" reportTime="2006-07-13 06:00:00">
    <summary>Tracing and Logging Framework</summary>
    <description>With the growing popularity of load-time weaving it is becoming increasing difficult to diagnose complex problems given the limited diagnostic information available: stack trace, verbose output, and dumped byte-code. For compiler errors it is usually possible for the bug raiser to attach a simple testcase but this is not possible when the problem may concern the environment or integration with middleware. I therefore propose we implement a tracing/logging mechanism that will capture low level entry/exit information as well as existing informational messages see Ron’s comment in Bug 150271 “Allow multiple levels of LTW information” and route them to one of the existing logging infrastructures such as JDK 1.4 or Jakarta Commons logging.</description>
    <commit commitTime="2006-07-14 17:39:46" id="b15cda7add8a6d7f288ce6132c9c2cd328bba7bc"/>
    <fixedFiles>
      <file>loadtime/testsrc/LoadtimeModuleTests.java</file>
      <file>weaver/src/org/aspectj/weaver/Lint.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/DefaultWeavingContext.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/ClassPathManager.java</file>
      <file>weaver/src/org/aspectj/weaver/World.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Aj.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="150671" reportTime="2006-07-14 12:19:00">
    <summary>declare error on set of volatile field does not work</summary>
    <description>When an aspect has a declare error statement involving a pointcut that captures the setting of a volatile field, a compilation error is not produced. This bug can be reproduced as follows. Consider the following class: class A { private volatile int state; public void foo { state = 0; } } Now consider this aspect: aspect FSM { declare error: set * A.state : "Changing state"; } The setting of the state field in method foo does not result in a compilation error as expected. I originally noticed this bug when using AJDT 1.4 with Eclipse 3.2. However this has been reproduced and confirmed with the aspectj 1.5.2 compiler.</description>
    <commit commitTime="2006-07-25 07:46:13" id="357bbe9eeb34748f7c8c2ff85049230db2adbbf2"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="151182" reportTime="2006-07-20 02:50:00">
    <summary>NPE in BcelWeaver using LTW</summary>
    <description>Hi, I created a logging aspect for our application some time ago using 1.5.0 of AspectJ. I enabled this from time to time using Load Time Weaving. I have recently recompiled the aspect using 1.5.2 and tried to run it also using the 1.5.2 weaver jar, but it fails with a NullPointerException. This is part of one of the many stacktraces: 20 jul 2006 07:42:49,046 - java.lang.NullPointerException 20 jul 2006 07:42:49,062 - at org.aspectj.weaver.bcel.BcelWeaver.weaveParentTypeMungers BcelWeaver.java:1367 20 jul 2006 07:42:49,062 - at org.aspectj.weaver.bcel.BcelWeaver.weaveParentsFor BcelWeaver.java:1237 20 jul 2006 07:42:49,062 - at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1072 20 jul 2006 07:42:49,062 - at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:284 20 jul 2006 07:42:49,062 - at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:212 20 jul 2006 07:42:49,062 - at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:65 20 jul 2006 07:42:49,062 - at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform ClassPreProcessorAgentAdapter.java:55 20 jul 2006 07:42:49,062 - at sun.instrument.TransformerManager.transform Unknown Source 20 jul 2006 07:42:49,062 - at sun.instrument.InstrumentationImpl.transform Unknown Source 20 jul 2006 07:42:49,062 - at java.lang.ClassLoader.defineClass1 Native Method 20 jul 2006 07:42:49,062 - at java.lang.ClassLoader.defineClass Unknown Source I then tried with the 1.5.0 weaver jar although the aspect was compiled using 1.5.2 and this ran without problems.</description>
    <commit commitTime="2006-07-27 09:25:50" id="397a19d441eaf7fdc67e841232b410358b48ba11"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Aj.java</file>
    </fixedFiles>
  </bug>
  <bug id="151673" reportTime="2006-07-25 05:45:00">
    <summary>Incorrect weaving of after returning when 'input' bytecode is of a strange form</summary>
    <description>We have had a user report a problem where after advice being woven into a particular method is producing code that does not verify. The problem occurs if the bytecode being input to the weaving process includes a subroutine that contains the return from the method. Here is the problematic snippet produced by some unknown compiler: 200: invokespecial #17; //Method com/MyException."&amp;lt;init&amp;gt;": Ljava/lang/String; V 203: athrow 204: aload_3 205: astore 6 207: jsr 234 210: aload 6 212: areturn 213: astore 4 215: aload 4 217: invokevirtual #79; //Method java/lang/Throwable.printStackTrace: V 220: jsr 234 223: goto 238 226: astore 7 228: jsr 234 231: aload 7 233: athrow 234: astore 8 236: aload_3 237: areturn 238: return Exception table: from to target type 2 213 213 Class javax/ejb/FinderException 2 226 226 any see the jsr's jump to 234, but before the subroutine return at 238 there is an areturn out of the method this method returns a String . After weaving we get something like this: 200: invokespecial #17; //Method com/MyException."&amp;lt;init&amp;gt;": Ljava/lang/String; V 203: athrow 204: aload_3 205: astore 6 207: jsr 238 210: aload 6 212: astore 9 214: goto 248 217: astore 4 219: aload 4 221: invokevirtual #79; //Method java/lang/Throwable.printStackTrace: V 224: jsr 238 227: goto 246 230: astore 7 232: jsr 238 235: aload 7 237: athrow 238: astore 8 240: aload_3 241: astore 9 243: goto 248 246: astore 9 248: invokestatic #299; //Method After.aspectOf: LAfter; 251: invokevirtual #302; //Method After.ajc$afterReturning$After$1$26d6d4a7: V 254: aload 9 256: return see how the areturn has been lost - this code will blow up with a verify error the string is on the stack, we just ignore it and 'return' normally</description>
    <commit commitTime="2006-07-27 09:57:26" id="e4ab0ae5762be7d9869e0eee350677ac79749150"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="151772" reportTime="2006-07-25 17:29:00">
    <summary>Declare Soft Half Applying and Improperly on Anonymous Class</summary>
    <description>AspectJ 1.5.2 compiles this code without error, whereas the declare soft shouldn't have any effect, in particular it shouldn't allow the run method on the anonymous class to throw an undeclared checked exception. Interestingly the runtime catch and coversion to a SoftException is NOT performed in this case, just removing the need to declare the exception. import java.sql.SQLException; public class SoftenInner { public static void main String args[] { new SoftenInner .foo ; } public void foo { new Runnable { public void run { throw new SQLException "test" ; } }.run ; } } public aspect Softener { declare soft: Throwable: execution * SoftenInner.foo ; }</description>
    <commit commitTime="2006-09-22 14:57:29" id="aefa777dfd64a8a90e2730ff442ebf99f832162f"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="151845" reportTime="2006-07-26 09:44:00">
    <summary>NPE while building</summary>
    <description>Building of a large project fails while weaving. NPE in EclipseSourceContext.removeUnnecessaryProblems .. The project was just migrated to Eclipse 3.2 Eclipse newly installed with Eclipse SDK and via Update manager with AJDT, CDT, Web/J2EE tools, SubClipse, SpringIDE. Same Project workes in Eclipse 3.1. Simple Test AspectJ-Project workes OK Building with Ant/AspectJ compiler as external Tools Launch in Eclipse works. I tried the following, but got the error anyway: - Checked out as a new AspectJ Project - upgraded to the developement Version of AJDT</description>
    <commit commitTime="2006-07-27 09:27:55" id="54f7bb4f25792e717eadf21421c81ae1dc8e0718"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseSourceContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="151938" reportTime="2006-07-26 19:33:00">
    <summary>Handle Duplicate -javaagent entries more gracefully</summary>
    <description>If you start a java 5 VM with AspectJ's load-time weaver specified more than once using the -javaagent flag, if there is an aop.xml file defined, it chokes badly: it tries to reweave the woven AspectJ code and emits massive amounts of bytecode. It would be better if AspectJ detected that it was specified more than once and gave a warning then disabled all but one of the agents. Failing that, it would be better to fail and give an error message than emit the bytecode. This issue came up for our automated installer, which adds a -javaagent flag to VM startup commands. If the script is wrapped twice, it can generate a duplicate. We are making our scripts more intelligent to avoid this issue, but we are probably not the only people who will hit this issue e.g., if someone manually edits both setclasspath.bat and catalina.bat to add the flag for a Tomcat instance...</description>
    <commit commitTime="2006-08-01 20:41:52" id="bebb3640698bf2c465b64d9565123ec699dac45d"/>
    <fixedFiles>
      <file>loadtime5/java5-src/org/aspectj/weaver/loadtime/Agent.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="151978" reportTime="2006-07-27 07:15:00">
    <summary>[3.2compiler] Generics program fails to compile</summary>
    <description>generics problem, reported on newsgroup by Thomas Darimont //package de.tutorials.aspectj; public interface IMessage { void publish ; } interface IErrorMessage extends IMessage{ StackTraceElement[] getStackTrace ; } interface IObjectFactory&amp;lt;E&amp;gt; { public &amp;lt;T extends E&amp;gt; T create Class&amp;lt;T&amp;gt; theObjectType, Object[] theParameters ; } class MessageFactory implements IObjectFactory&amp;lt;IMessage&amp;gt;{ public &amp;lt;T extends IMessage&amp;gt; T create Class&amp;lt;T&amp;gt; theObjectType, Object[] theParameters { return null; } } class Main { public static void main String[] args { IErrorMessage message = new MessageFactory .create IErrorMessage.class, new Object[]{"Foo","Bar"} ; } }</description>
    <commit commitTime="2006-07-28 13:17:57" id="68c36e3ac9b5fc031a956800158aee15b0d44301"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="151991" reportTime="2006-07-27 08:58:00">
    <summary>Missing copyright/license in recently added modules</summary>
    <description>BuildModuleTests does not test for licenses in ajdoc, loadtime, loadtime5, weaver5. When I added the necessary logic there were a couple of failures. Could the owners please step forward ... epl-cpl-ibm|parc|xerox|others LICENSE FAIL: C:\workspaces\org.aspectj-Restructure\weaver5\java5-src\org\aspectj\weaver\reflect\DeferredResolvedPointcutDefinition.java epl-cpl-ibm|parc|xerox|others COPYRIGHT FAIL: C:\workspaces\org.aspectj-Restructure\weaver5\java5-src\org\aspectj\weaver\reflect\DeferredResolvedPointcutDefinition.java epl-cpl-ibm|parc|xerox|others LICENSE FAIL: C:\workspaces\org.aspectj-Restructure\weaver5\java5-src\org\aspectj\weaver\reflect\InternalUseOnlyPointcutParser.java epl-cpl-ibm|parc|xerox|others COPYRIGHT FAIL: C:\workspaces\org.aspectj-Restructure\weaver5\java5-src\org\aspectj\weaver\reflect\InternalUseOnlyPointcutParser.java Total passed: 7 failed: 2 I also noticed the following messages. Does anyone know what they mean? BuildModuleTest: Define "run.build.tests" as a system property to run tests to build run-all-junit-tests this is the only warning class org.aspectj.internal.build.BuildModuleTest.testNoDuplicates incomplete error building module weaver at org.aspectj.internal.tools.ant.taskdefs.BuildModule.build BuildModule.java:145 at org.aspectj.internal.tools.ant.taskdefs.BuildModule.execute BuildModule.java:117 at org.aspectj.internal.build.BuildModuleTest.doTask BuildModuleTest.java:445 at org.aspectj.internal.build.BuildModuleTest.testNoDuplicates BuildModuleTest.java:178 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:585 at junit.framework.TestCase.runTest TestCase.java:154 at junit.framework.TestCase.runBare TestCase.java:127 at junit.framework.TestResult$1.protect TestResult.java:106 at junit.framework.TestResult.runProtected TestResult.java:124 Module at junit.framework.TestResult.run TestResult.java:109 at junit.framework.TestCase.run TestCase.java:118 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run JUnit3TestReference.java:128 at org.eclipse.jdt.internal.junit.runner.TestExecution.run TestExecution.java:38 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests RemoteTestRunner.java:460 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests RemoteTestRunner.java:673 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run RemoteTestRunner.java:386 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main RemoteTestRunner.java:196</description>
    <commit commitTime="2006-08-03 15:51:04" id="7aa6cfeed1b51b7290a059de6a2f34009274e6f0"/>
    <fixedFiles>
      <file>build/testsrc/org/aspectj/build/BuildModuleTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="152161" reportTime="2006-07-28 11:51:00">
    <summary>Contribution: Support -Xset in Load-Time Weaving Configuration</summary>
    <description>I needed this to try out a setting in the pipelined compilation -Xset:runMinimalMemory=true ... I was able to verify that it parsed and set an option correctly in the debugger. I also have included a test that sets all the currently available options.</description>
    <commit commitTime="2006-08-08 13:50:57" id="039be6888f9ec674a0bbb0f5fc37486f8565fece"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/ltw/LTWTests.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Options.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="152257" reportTime="2006-07-29 14:18:00">
    <summary>Incremental compiler doesn't handle exception declaration correctly</summary>
    <description>Incrementally compiling code with advice throwing an excpetion gives errors stating that the exception can't be thrown. Full compilation compiles the code successfully. AJDT Version: 1.4.1 Build id: 20060727081607 AspectJ version: 1.5.3.20060726092219 Here is the minimum code the reproduce the behavior. // Main.java package test; import java.io.IOException; public class Main { public void testMethod throws IOException { methodThatThrows ; } public static void methodThatThrows throws IOException { System.out.println "Inside method that may throw an IOException" ; } } // IOExceptionInjector.aj package test; import java.io.IOException; public aspect IOExceptionInjector { pointcut faultInjection : call void methodThatThrows throws IOException ; void around throws IOException : faultInjection { throw new IOException "Exception injected by aspect." ; } } 1. Modify something in Main.java add and delete a space, for example . 2. Save to compile incremetally. An error is issued for the call to methodThatThrows stating "Severity and Description Path Resource Location Creation Time Id can't throw checked exception 'java.io.IOException' at this join point 'method-call void test.Main.methodThatThrows ' IncrementalCompilerHandlingException/src/test Main.java line 7 1154196826350 7956 " Do a full rebuild and the error goes away.</description>
    <commit commitTime="2006-07-31 14:03:17" id="f1f468907e99cf8fcc0ec9a3dedd467a4f78e1f3"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="152366" reportTime="2006-07-31 14:44:00">
    <summary>LTW Within Patterns Should Accept AND For Consistency</summary>
    <description>The load-time weaving definition system accepts AND in addition to &amp;amp;amp;&amp;amp;amp; for pointcuts, but it silently accepts and then fails to work with type patterns that use AND. Such type patterns are important when creating exceptions e.g., excluding weblogic..* &amp;amp;amp;&amp;amp;amp; !weblogic.jdbc..* and using AND is also helpful here. I've attached a patch to support this and tests to show it's working.</description>
    <commit commitTime="2006-10-03 14:30:21" id="7b831ff7356725b9872a9635d1e0eeb035f2790b"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/ltw/LTWTests.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="152388" reportTime="2006-07-31 18:31:00">
    <summary>NPE in MessageUtil.addExtraSourceLocations</summary>
    <description>I get this message from an error in a recent dev build of AspectJ with load-time weaving. I don't know how there is a null source location associated with this message, but either it shouldn't be there or MessageUtil line 806 should use this patch: Index: src/org/aspectj/bridge/MessageUtil.java =================================================================== RCS file: /home/technology/org.aspectj/modules/bridge/src/org/aspectj/bridge/MessageUtil.java,v retrieving revision 1.11 diff -u -r1.11 MessageUtil.java --- src/org/aspectj/bridge/MessageUtil.java 1 Jun 2006 09:36:37 -0000 1.11 +++ src/org/aspectj/bridge/MessageUtil.java 31 Jul 2006 22:32:16 -0000 @@ -803,7 +803,7 @@ writer.println baseMessage ; for Iterator iter = message.getExtraSourceLocations .iterator ; iter.hasNext ; { ISourceLocation element = ISourceLocation iter.next ; - writer.print "\tsee also: " + element.toString ; + writer.print "\tsee also: " + element ; if iter.hasNext { writer.println ; } NPE follows: java.lang.NullPointerException at org.aspectj.bridge.MessageUtil.addExtraSourceLocations MessageUtil.java:806 at org.aspectj.bridge.MessageUtil.renderMessage MessageUtil.java:793 at org.aspectj.bridge.Message.toString Message.java:177 at org.aspectj.bridge.MessageWriter.render MessageWriter.java:73 at org.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHandler.render WeavingAdaptor.java:471 at org.aspectj.bridge.MessageWriter.handleMessage MessageWriter.java:41 at org.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHandler.handleMessage WeavingAdaptor.java:425 at org.aspectj.weaver.bcel.BcelTypeMunger.error BcelTypeMunger.java:378 at org.aspectj.weaver.bcel.BcelTypeMunger.enforceDecpRule1_abstractMethodsImplemented BcelTypeMunger.java:273 at org.aspectj.weaver.bcel.BcelTypeMunger.mungeNewParent BcelTypeMunger.java:194 at org.aspectj.weaver.bcel.BcelTypeMunger.munge BcelTypeMunger.java:106 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:450 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:115 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1613 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1564 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1341 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1163 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:288 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:214 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:76 at org.aspectj.ext.ltw13.ClassPreProcessorAdapter.preProcess ClassPreProcessorAdapter.java:65 at org.codehaus.aspectwerkz.hook.impl.ClassPreProcessorHelper.defineClass0Pre ClassPreProcessorHelper.java:107 at java.lang.ClassLoader.defineClass ClassLoader.java:539 ... NOTE: I'm using Alex Vasseur's adaptor to invoke AspectJ LTW from a 1.4 VM, but with recursion protection added. I don't think that should change the expected behavior of Aj.</description>
    <commit commitTime="2006-08-08 13:48:32" id="a38edd39a8e998a22b41a0cf1928493aa0755e65"/>
    <fixedFiles>
      <file>bridge/src/org/aspectj/bridge/MessageUtil.java</file>
    </fixedFiles>
  </bug>
  <bug id="152589" reportTime="2006-08-02 09:33:00">
    <summary>[pipeline] adding a whitespace results in adviceDidNotMatch warning</summary>
    <description>Given the following ------------------------------------------------------------ public aspect A { after throwing Throwable th : execution * * .. { System.err.println thisEnclosingJoinPointStaticPart ; } } class C1 { public void anotherMethod { } } -------------------------------------------------- adding a whitespace before the aspect declaration results in an adviceDidNotMatch warning even though weaving took place and the advice clearly matches. Output from the AJDT event trace shows: 14:38:23 =========================================================================================== 14:38:23 Build kind = AUTOBUILD 14:38:23 Project= bug92895 , kind of build requested=Incremental AspectJ compilation 14:38:23 build: Examined delta - source file changes in required project bug92895 14:38:23 Classpath=/home/hawkinsh/eclipse/workspace32/runtime-New_configuration/ bug92895 /bin:/home/hawkinsh/javas/jdk1.5.0_05/jre/lib/rt.jar:/home/hawkinsh/javas/jdk1.5.0_05/jre/lib/jsse.jar:/home/hawkinsh/javas/jdk1.5.0_05/jre/lib/jce.jar:/home/hawkinsh/javas/jdk1.5.0_05/jre/lib/charsets.jar:/home/hawkinsh/javas/jdk1.5.0_05/jre/lib/ext/sunjce_provider.jar:/home/hawkinsh/javas/jdk1.5.0_05/jre/lib/ext/sunpkcs11.jar:/home/hawkinsh/javas/jdk1.5.0_05/jre/lib/ext/dnsns.jar:/home/hawkinsh/javas/jdk1.5.0_05/jre/lib/ext/localedata.jar:/home/hawkinsh/eclipse/eclipse32/plugins/org.aspectj.runtime_1.5.3.20060801095103/aspectjrt.jar: 14:38:23 Preparing for build: planning to be an incremental build 14:38:23 Starting incremental compilation loop 1 of possibly 5 14:38:23 AJC: compiling source files 14:38:23 Timer event: 215ms: Time to first compiled message 14:38:23 AJC: compiled: /home/hawkinsh/eclipse/workspace32/runtime-New_configuration/ bug92895 /src/pack/A.aj 14:38:23 addSourcelineTask message=advice defined in pack.A has not been applied [Xlint:adviceDidNotMatch] file=/home/hawkinsh/eclipse/workspace32/runtime-New_configuration/ bug92895 /src/pack/A.aj line=4 14:38:23 Dropping back to full build 14:38:23 Preparing for build: not going to be incremental because no successful previous full build 14:38:23 AJC: compiling source files 14:38:23 AJC: compiled: /home/hawkinsh/eclipse/workspace32/runtime-New_configuration/ bug92895 /src/pack/A.aj 14:38:23 AJC: processing reweavable state 14:38:23 AJC: adding type mungers 14:38:23 Timer event: 452ms: Time to first woven message 14:38:23 AJC: woven aspect pack.A from /home/hawkinsh/eclipse/workspace32/runtime-New_configuration/ bug92895 /src/pack/A.aj 14:38:23 AJC: woven class pack.C1 from /home/hawkinsh/eclipse/workspace32/runtime-New_configuration/ bug92895 /src/pack/A.aj 14:38:23 AspectJ reports build successful, build was: FULL 14:38:23 AJDE Callback: finish. Was full build: true 14:38:23 Timer event: 517ms: Total time spent in AJDE 14:38:23 Timer event: 6ms: Create element map 2 rels in project: bug92895 14:38:23 Types affected during build = 1 14:38:23 Timer event: 3ms: Add markers 2 markers 14:38:24 Timer event: 1274ms: Total time spent in AJBuilder.build namely, the adviceDidNotMatch warning was added and then we fell back to a full build and the warning wasn't cleared. Performing a "clean" build fixes the problem. This is since the pipelining changes.</description>
    <commit commitTime="2006-08-03 07:23:55" id="9664058bcdaeb4934a01969f4e5f651bc6e8cd71"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjPipeliningCompilerAdapter.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="152631" reportTime="2006-08-02 13:26:00">
    <summary>Problem with decp on an aspect using cflow</summary>
    <description>This occurs in the AspectJ build in AJDT from August 1 but not from July 31: java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelTypeMunger.enforceDecpRule1_abstractMethodsImplemented BcelTypeMunger.java:250 at org.aspectj.weaver.bcel.BcelTypeMunger.mungeNewParent BcelTypeMunger.java:194 at org.aspectj.weaver.bcel.BcelTypeMunger.munge BcelTypeMunger.java:106 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:454 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:119 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1597 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1548 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1328 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1124 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:451 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving AjPipeliningCompilerAdapter.java:389 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:377 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:98 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:533 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:891 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:246 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:165 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 trouble in:public class glassbox.agent.ErrorContainmentTest$ErrorMockAspect extends java.lang.Object implements glassbox.agent.api.NotSerializable: private static Throwable ajc$initFailureCause [Synthetic] public static final glassbox.agent.ErrorContainmentTest$ErrorMockAspect ajc$perSingletonInstance [Synthetic] static void &amp;lt;clinit&amp;gt; : catch java.lang.Throwable -&amp;gt; E0 | INVOKESTATIC glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$postClinit V line 60 catch java.lang.Throwable -&amp;gt; E0 GOTO L0 E0: ASTORE_0 ALOAD_0 PUTSTATIC glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$initFailureCause Ljava/lang/Throwable; L0: RETURN end static void &amp;lt;clinit&amp;gt; void &amp;lt;init&amp;gt; : ALOAD_0 // Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect; this line 60 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V RETURN end void &amp;lt;init&amp;gt; public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$1$9589fc AdviceAttribute before, scope &amp;amp;&amp;amp; call * hook1 , 0, 1670 : NEW java.lang.RuntimeException line 64 DUP LDC "rte" INVOKESPECIAL java.lang.RuntimeException.&amp;lt;init&amp;gt; Ljava/lang/String; V ATHROW end public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$1$9589fc public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$2$f75db3e2 AdviceAttribute before, execution * glassbox.agent.ErrorContainmentTest.hook5 , 0, 1764 : NEW java.lang.RuntimeException line 67 DUP LDC "rte" INVOKESPECIAL java.lang.RuntimeException.&amp;lt;init&amp;gt; Ljava/lang/String; V ATHROW end public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$2$f75db3e2 public void ajc$around$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$3$a3a17d org.aspectj.runtime.internal.AroundClosure AdviceAttribute around, scope &amp;amp;&amp;amp; call * hook2 , 1, 1913 : NEW java.lang.Error line 71 DUP LDC "foo" INVOKESPECIAL java.lang.Error.&amp;lt;init&amp;gt; Ljava/lang/String; V ATHROW end public void ajc$around$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$3$a3a17d org.aspectj.runtime.internal.AroundClosure static void ajc$around$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$3$a3a17dproceed org.aspectj.runtime.internal.AroundClosure throws java.lang.Throwable org.aspectj.weaver.AjAttribute$AjSynthetic@19a01f9 : ALOAD_0 // Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect; this line 1 ICONST_0 ANEWARRAY java.lang.Object INVOKEVIRTUAL org.aspectj.runtime.internal.AroundClosure.run [Ljava/lang/Object; Ljava/lang/Object; INVOKESTATIC org.aspectj.runtime.internal.Conversions.voidValue Ljava/lang/Object; Ljava/lang/Object; RETURN end static void ajc$around$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$3$a3a17dproceed org.aspectj.runtime.internal.AroundClosure throws java.lang.Throwable public void ajc$after$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$4$bfd07f AdviceAttribute after, scope &amp;amp;&amp;amp; call * hook4 , 0, 1991 : NEW org.aspectj.lang.SoftException line 74 DUP ACONST_NULL INVOKESPECIAL org.aspectj.lang.SoftException.&amp;lt;init&amp;gt; Ljava/lang/Throwable; V ATHROW end public void ajc$after$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$4$bfd07f public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$5$e5bddfdc AdviceAttribute before, logErrorInTest , 0, 2446 : GETSTATIC glassbox.agent.ErrorContainmentTest.logCount I line 84 ICONST_1 IADD PUTSTATIC glassbox.agent.ErrorContainmentTest.logCount I RETURN line 85 end public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$5$e5bddfdc public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$6$16ecfe62 AdviceAttribute before, adviceexecution * * &amp;amp;&amp;amp; within glassbox.util.logging.api.LogManagement &amp;amp;&amp;amp; cflow logError &amp;amp;&amp;amp; cflow execution * testLoggingError .. &amp;amp;&amp;amp; within glassbox.agent.ErrorContainmentTest , 0, 2506 : GETSTATIC java.lang.System.err Ljava/io/PrintStream; line 87 LDC "match" INVOKEVIRTUAL java.io.PrintStream.println Ljava/lang/String; V RETURN line 88 end public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$6$16ecfe62 public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$7$e9ae8482 AdviceAttribute before, adviceexecution * * &amp;amp;&amp;amp; within glassbox.util.logging.api.LogManagement &amp;amp;&amp;amp; cflow execution * testLoggingError .. &amp;amp;&amp;amp; within glassbox.agent.ErrorContainmentTest , 0, 2721 : GETSTATIC java.lang.System.err Ljava/io/PrintStream; line 90 LDC "match in test" INVOKEVIRTUAL java.io.PrintStream.println Ljava/lang/String; V RETURN line 91 end public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$7$e9ae8482 public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$8$c6ac5351 AdviceAttribute before, adviceexecution * * &amp;amp;&amp;amp; within glassbox.util.logging.api.LogManagement &amp;amp;&amp;amp; cflow logError , 0, 2923 : GETSTATIC java.lang.System.err Ljava/io/PrintStream; line 93 LDC "match in log" INVOKEVIRTUAL java.io.PrintStream.println Ljava/lang/String; V RETURN line 94 end public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$8$c6ac5351 public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$9$16ecfe62 AdviceAttribute before, adviceexecution * * &amp;amp;&amp;amp; within glassbox.util.logging.api.LogManagement &amp;amp;&amp;amp; cflow logError &amp;amp;&amp;amp; cflow execution * testLoggingError .. &amp;amp;&amp;amp; within glassbox.agent.ErrorContainmentTest , 0, 3069 : GETSTATIC glassbox.agent.ErrorContainmentTest.recursiveThrows I line 96 ICONST_1 IADD PUTSTATIC glassbox.agent.ErrorContainmentTest.recursiveThrows I GETSTATIC glassbox.agent.ErrorContainmentTest.recursiveThrows I line 97 ICONST_2 IF_ICMPGE L0 NEW java.lang.RuntimeException line 98 DUP LDC "recursive logging failure" INVOKESPECIAL java.lang.RuntimeException.&amp;lt;init&amp;gt; Ljava/lang/String; V ATHROW L0: RETURN line 100 end public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$9$16ecfe62 public static glassbox.agent.ErrorContainmentTest$ErrorMockAspect aspectOf org.aspectj.weaver.AjAttribute$AjSynthetic@3cd8fe : GETSTATIC glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$perSingletonInstance Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect; line 1 IFNONNULL L0 NEW org.aspectj.lang.NoAspectBoundException DUP LDC "glassbox_agent_ErrorContainmentTest$ErrorMockAspect" GETSTATIC glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$initFailureCause Ljava/lang/Throwable; INVOKESPECIAL org.aspectj.lang.NoAspectBoundException.&amp;lt;init&amp;gt; Ljava/lang/String;Ljava/lang/Throwable; V ATHROW L0: GETSTATIC glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$perSingletonInstance Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect; ARETURN end public static glassbox.agent.ErrorContainmentTest$ErrorMockAspect aspectOf public static boolean hasAspect org.aspectj.weaver.AjAttribute$AjSynthetic@1bd4f6 : GETSTATIC glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$perSingletonInstance Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect; line 1 IFNULL L0 ICONST_1 IRETURN L0: ICONST_0 IRETURN end public static boolean hasAspect private static void ajc$postClinit org.aspectj.weaver.AjAttribute$AjSynthetic@1febf91 : NEW glassbox.agent.ErrorContainmentTest$ErrorMockAspect line 1 DUP INVOKESPECIAL glassbox.agent.ErrorContainmentTest$ErrorMockAspect.&amp;lt;init&amp;gt; V PUTSTATIC glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$perSingletonInstance Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect; RETURN end private static void ajc$postClinit end public class glassbox.agent.ErrorContainmentTest$ErrorMockAspect when type munging with BcelTypeMunger ResolvedTypeMunger Parent, null when weaving aspects when weaving when batch building BuildConfig[C:\devel\glassbox\.metadata\.plugins\org.eclipse.ajdt.core\glassboxMonitor.generated.lst] #Files=107 The source is: public class ErrorContainmentTest extends TestCase { ... static aspect ErrorMockAspect implements NotSerializable { ... I will try to narrow this down if the problem isn't obvious.</description>
    <commit commitTime="2006-08-04 10:29:04" id="ff2377a7f3b3d2148d107a7c411cf8308d254136"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="152835" reportTime="2006-08-04 06:00:00">
    <summary>ArrayIndexOutOfBoundsException in EclipseAdapterUtils.makeLocationContext</summary>
    <description>Got the following exception during startup of Eclipse java.lang.ArrayIndexOutOfBoundsException at org.aspectj.ajdt.internal.core.builder.EclipseAdapterUtils.makeLocationContext EclipseAdapterUtils.java:65 at org.aspectj.ajdt.internal.core.builder.EclipseAdapterUtils.makeSourceLocation EclipseAdapterUtils.java:121 at org.aspectj.ajdt.internal.core.builder.EclipseAdapterUtils.makeMessage EclipseAdapterUtils.java:130 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$4.acceptResult AjBuildManager.java:959 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.acceptResult AjPipeliningCompilerAdapter.java:402 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:375 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:98 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:533 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:891 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:246 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:165 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 ArrayIndexOutOfBoundsException thrown: -2</description>
    <commit commitTime="2006-08-04 11:02:38" id="908b4054bff043f50d8bcf12afb6801e0d2913d4"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java</file>
    </fixedFiles>
  </bug>
  <bug id="152873" reportTime="2006-08-04 15:21:00">
    <summary>Optimize shouldWeaveAnnotationStyleAspect with Patch</summary>
    <description>The current implementation of shouldWeaveAnnotationStyleAspect is surprising because it weaves annotation aspects without regard as to whether they are registered in an aop.xml file. If an annotation-style aspect is loaded, it is always woven, even if it doesn't match the for what classes should be woven in the aop.xml file, and even if not registered therein. This is both unexpected and it imposes significant overhead on configurations where they aren't used and simple fast match exclusions prevent weaving see bug #152871 . Is there really a need to weave annotation style aspects like this? Why can't it be done by using the aop.xml configuration mechanism that all other aspects use? In a large system, the CPU overhead of parsing and creating BCEL objects for all loaded classes should be avoided where possible.</description>
    <commit commitTime="2006-08-08 07:59:54" id="f239f2a2ac6a887fd46e6d95e8fb4ec93e2e159d"/>
    <fixedFiles>
      <file>testing/newsrc/org/aspectj/testing/AntSpec.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java</file>
      <file>weaver/src/org/aspectj/weaver/World.java</file>
    </fixedFiles>
  </bug>
  <bug id="152979" reportTime="2006-08-07 11:04:00">
    <summary>Optimization: Reference Use and URL Caching in ClassLoader Repository</summary>
    <description>I have found that a lot of memory can get pinned by the BCEL ClassLoaderRepository. For example, on a test configuration of Glassbox with WebLogic over 40 megabytes were pinned in memory due to this loader. * I also notice that some of the time spent with loading and parsing redundant classes for shared weaving configuration could be reduced by having a global cache of bytes for URL's instead, i.e., the ClassLoaderRepository is local to a loader, so even if the same class on disk is resolved multiple times in different loaders, it isn't read from cache. This latter issue will be reduced if loading types from a parent loader use reflection delegates instead but BCEL still has to be used for aspects on &amp;lt;1.5 VM's... The attached patch has some metrics in it to measure what's happening and it also uses SoftReferences to cache without pinning the reference types and uses a two-step look up process to maintain a global URL cache. When I run this on WebLogic 9.2 with Glassbox and view their admin console and some smaller apps I get this output: BCEL repository total load time: 7733 ms, in url: 6029 ms for 1427 url cache hits = 1683 missEvicted = 0 missUrlEvicted= 0 all misses = 1427, loader hits = 0 On Tomcat 5.5 with some different sample apps: BCEL repository total load time: 4945 ms, in url: 4319 ms for 636 url cache hits = 548 missEvicted = 0 missUrlEvicted= 190 all misses= 446, loader hits = 3 So at least in my configuration the URL-based cache is quite effective with almost a 50% hit rate whereas the loader-based cache provides little value. From what I've seen, it's worth considering not even using the loader-based BCEL cache at all but others may have configurations where it helps. * This test was on a development build of AspectJ which I had modified so that the LTWWorld evicts classes after loading</description>
    <commit commitTime="2006-08-08 11:26:28" id="387c3ac6f23a39aebbc4044093c793009dfea8f6"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/util/ClassLoaderRepository.java</file>
      <file>bcel-builder/testsrc/org/aspectj/apache/bcel/classfile/tests/AllTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="152982" reportTime="2006-08-07 12:21:00">
    <summary>org.aspectj Restructure - Phase 2: Move tests</summary>
    <description>This enhancement explores Phase 2 of the proposed solution to Bug 113948 . JUnit tests must pass under the JDK used to build the associated bundle. Currently tests that require Java 5 are excluded on an ad-hoc basis under JDK 1.3, pass because of Classpath Variables like JRE15_LIB or cannot be run under Eclipse because the wrong version of XML is used. For example any test in org.aspectj.weaver.tests must pass under JDK 1.3. Any test that requires Java 5 support, even if not itself built using Java 5, must live in org.aspectj.weaver5.tests.</description>
    <commit commitTime="2006-08-07 16:38:53" id="51ace9a1a3bbcb24fd2a0f08ff6fdbec27f47738"/>
    <fixedFiles>
      <file>loadtime/testsrc/org/aspectj/weaver/loadtime/JRockitAgentTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="153380" reportTime="2006-08-09 23:39:00">
    <summary>[pipeline] ClassCastException matching annotations</summary>
    <description>I get that error dialog, with the Details panel as below. This is after updating to the latest AJDT via the update site, for an existing project that was working fine. Eclipse Version: 3.2.0 Build id: M20060628-1325 AJDT plugin: org.aspectj 1.5.3.20060802071129 org.eclipse.aspectj 1.4.1.20060802071129 java.lang.ClassCastException at org.aspectj.weaver.patterns.SignaturePattern.matchesAnnotations SignaturePattern.java:477 at org.aspectj.weaver.patterns.SignaturePattern.matchesExactly SignaturePattern.java:332 at org.aspectj.weaver.patterns.SignaturePattern.matches SignaturePattern.java:289 at org.aspectj.weaver.patterns.KindedPointcut.matchInternal KindedPointcut.java:106 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:51 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:51 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.ShadowMunger.match ShadowMunger.java:71 at org.aspectj.weaver.Advice.match Advice.java:112 at org.aspectj.weaver.bcel.BcelAdvice.match BcelAdvice.java:107 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2805 at org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction BcelClassWeaver.java:2746 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2505 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2331 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:494 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:119 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1597 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1548 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1328 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1124 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:451 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving AjPipeliningCompilerAdapter.java:389 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:377 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:98 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:533 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:891 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:246 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:165 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 trouble in: public class org.jrig.keyvalue.KvbMixin extends java.lang.Object: TypeMungers: [ BcelTypeMunger ResolvedTypeMunger Field, java.util.Map org.jrig.keyvalue.KvbMixinImpl.bindings , BcelTypeMunger ResolvedTypeMunger Method, void org.jrig.keyvalue.KvbMixinImpl.bind java.lang.String, java.lang.Object, java.lang.String, java.util.Map , BcelTypeMunger ResolvedTypeMunger Method, void org.jrig.keyvalue.KvbMixinImpl.unbind java.lang.String , BcelTypeMunger ResolvedTypeMunger Method, org.jrig.keyvalue.IKeyValueBinding$BindingInfo org.jrig.keyvalue.KvbMixinImpl.infoForBinding java.lang.String , BcelTypeMunger ResolvedTypeMunger Method, java.util.List org.jrig.keyvalue.KvbMixinImpl.exposedBindings , BcelTypeMunger ResolvedTypeMunger Method, java.lang.Class org.jrig.keyvalue.KvbMixinImpl.valueClassForBinding java.lang.String ] declares: [declare parents: @org.jrig.keyvalue.annotation.KeyValue * extends org.jrig.keyvalue.IKeyValueBinding, org.jrig.keyvalue.KvbMixinImpl ;] private static Throwable ajc$initFailureCause public static final org.jrig.keyvalue.KvbMixin ajc$perSingletonInstance static void &amp;lt;clinit&amp;gt; : staticinitialization void org.jrig.keyvalue.KvbMixin.&amp;lt;clinit&amp;gt; | catch java.lang.Throwable -&amp;gt; E0 | | INVOKESTATIC org.jrig.keyvalue.KvbMixin.ajc$postClinit V line 31 | catch java.lang.Throwable -&amp;gt; E0 | GOTO L0 | E0: ASTORE_0 | ALOAD_0 | PUTSTATIC org.jrig.keyvalue.KvbMixin.ajc$initFailureCause Ljava/lang/Throwable; | L0: RETURN staticinitialization void org.jrig.keyvalue.KvbMixin.&amp;lt;clinit&amp;gt; end static void &amp;lt;clinit&amp;gt; public void &amp;lt;init&amp;gt; : ALOAD_0 // Lorg/jrig/keyvalue/KvbMixin; this line 31 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V constructor-execution void org.jrig.keyvalue.KvbMixin.&amp;lt;init&amp;gt; | RETURN constructor-execution void org.jrig.keyvalue.KvbMixin.&amp;lt;init&amp;gt; end public void &amp;lt;init&amp;gt; void ajc$declare_parents_1 org.aspectj.weaver.MethodDeclarationLineNumber: 33:1043 : RETURN line 33 end void ajc$declare_parents_1 public static void ajc$interFieldInit$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$bindings org.jrig.keyvalue.KvbMixinImpl org.aspectj.weaver.MethodDeclarationLineNumber: 35:1149 : method-execution void org.jrig.keyvalue.KvbMixin.ajc$interFieldInit$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$bindings org.jrig.keyvalue.KvbMixinImpl | ALOAD_0 // Lorg/jrig/keyvalue/KvbMixinImpl; ajc$this_ line 35 | NEW java.util.HashMap | DUP | INVOKESPECIAL java.util.HashMap.&amp;lt;init&amp;gt; V | field-set java.util.Map org.jrig.keyvalue.KvbMixinImpl.bindings | | INVOKEINTERFACE org.jrig.keyvalue.KvbMixinImpl.ajc$interFieldSet$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$bindings Ljava/util/Map; V | field-set java.util.Map org.jrig.keyvalue.KvbMixinImpl.bindings | RETURN method-execution void org.jrig.keyvalue.KvbMixin.ajc$interFieldInit$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$bindings org.jrig.keyvalue.KvbMixinImpl end public static void ajc$interFieldInit$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$bindings org.jrig.keyvalue.KvbMixinImpl public static java.util.Map ajc$interFieldGetDispatch$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$bindings org.jrig.keyvalue.KvbMixinImpl EffectiveSignatureAttribute java.util.Map org.jrig.keyvalue.KvbMixinImpl.bindings, field-get : ALOAD_0 INVOKEINTERFACE org.jrig.keyvalue.KvbMixinImpl.ajc$interFieldGet$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$bindings Ljava/util/Map; ARETURN end public static java.util.Map ajc$interFieldGetDispatch$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$bindings org.jrig.keyvalue.KvbMixinImpl public static void ajc$interFieldSetDispatch$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$bindings org.jrig.keyvalue.KvbMixinImpl, java.util.Map EffectiveSignatureAttribute java.util.Map org.jrig.keyvalue.KvbMixinImpl.bindings, field-set : ALOAD_0 ALOAD_1 INVOKEINTERFACE org.jrig.keyvalue.KvbMixinImpl.ajc$interFieldSet$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$bindings Ljava/util/Map; V RETURN end public static void ajc$interFieldSetDispatch$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$bindings org.jrig.keyvalue.KvbMixinImpl, java.util.Map public static void ajc$interMethod$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$bind org.jrig.keyvalue.KvbMixinImpl, String, Object, String, java.util.Map EffectiveSignatureAttribute void org.jrig.keyvalue.KvbMixinImpl.bind java.lang.String, java.lang.Object, java.lang.String, java.util.Map , method-execution : ALOAD_0 // Lorg/jrig/keyvalue/KvbMixinImpl; ajc$this_ line 45 INVOKESTATIC org.jrig.keyvalue.KvbMixin.ajc$interFieldGetDispatch$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$bindings Lorg/jrig/keyvalue/KvbMixinImpl; Ljava/util/Map; ALOAD_0 // Lorg/jrig/keyvalue/KvbMixinImpl; ajc$this_ ALOAD_1 // Ljava/lang/String; binding ALOAD_2 // Ljava/lang/Object; observable ALOAD_3 // Ljava/lang/String; key ALOAD 4 // Ljava/util/Map; options INVOKESTATIC org.jrig.keyvalue.KeyValueBinding.bind Ljava/util/Map;Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/String;Ljava/util/Map; V RETURN line 46 end public static void ajc$interMethod$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$bind org.jrig.keyvalue.KvbMixinImpl, String, Object, String, java.util.Map public static void ajc$interMethodDispatch1$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$bind org.jrig.keyvalue.KvbMixinImpl, String, Object, String, java.util.Map EffectiveSignatureAttribute void org.jrig.keyvalue.KvbMixinImpl.bind java.lang.String, java.lang.Object, java.lang.String, java.util.Map , method-call : ALOAD_0 ALOAD_1 ALOAD_2 ALOAD_3 ALOAD 4 INVOKEINTERFACE org.jrig.keyvalue.KvbMixinImpl.bind Ljava/lang/String;Ljava/lang/Object;Ljava/lang/String;Ljava/util/Map; V RETURN end public static void ajc$interMethodDispatch1$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$bind org.jrig.keyvalue.KvbMixinImpl, String, Object, String, java.util.Map public static void ajc$interMethod$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$unbind org.jrig.keyvalue.KvbMixinImpl, String EffectiveSignatureAttribute void org.jrig.keyvalue.KvbMixinImpl.unbind java.lang.String , method-execution : ALOAD_0 // Lorg/jrig/keyvalue/KvbMixinImpl; ajc$this_ line 49 INVOKESTATIC org.jrig.keyvalue.KvbMixin.ajc$interFieldGetDispatch$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$bindings Lorg/jrig/keyvalue/KvbMixinImpl; Ljava/util/Map; ALOAD_1 // Ljava/lang/String; binding INVOKESTATIC org.jrig.keyvalue.KeyValueBinding.unbind Ljava/util/Map;Ljava/lang/String; V RETURN line 50 end public static void ajc$interMethod$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$unbind org.jrig.keyvalue.KvbMixinImpl, String public static void ajc$interMethodDispatch1$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$unbind org.jrig.keyvalue.KvbMixinImpl, String EffectiveSignatureAttribute void org.jrig.keyvalue.KvbMixinImpl.unbind java.lang.String , method-call : ALOAD_0 ALOAD_1 INVOKEINTERFACE org.jrig.keyvalue.KvbMixinImpl.unbind Ljava/lang/String; V RETURN end public static void ajc$interMethodDispatch1$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$unbind org.jrig.keyvalue.KvbMixinImpl, String public static org.jrig.keyvalue.IKeyValueBinding$BindingInfo ajc$interMethod$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$infoForBinding org.jrig.keyvalue.KvbMixinImpl, String EffectiveSignatureAttribute org.jrig.keyvalue.IKeyValueBinding$BindingInfo org.jrig.keyvalue.KvbMixinImpl.infoForBinding java.lang.String , method-execution : ALOAD_0 // Lorg/jrig/keyvalue/KvbMixinImpl; ajc$this_ line 55 INVOKESTATIC org.jrig.keyvalue.KvbMixin.ajc$interFieldGetDispatch$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$bindings Lorg/jrig/keyvalue/KvbMixinImpl; Ljava/util/Map; ALOAD_1 // Ljava/lang/String; binding INVOKESTATIC org.jrig.keyvalue.KeyValueBinding.infoForBinding Ljava/util/Map;Ljava/lang/String; Lorg/jrig/keyvalue/IKeyValueBinding$BindingInfo; ARETURN end public static org.jrig.keyvalue.IKeyValueBinding$BindingInfo ajc$interMethod$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$infoForBinding org.jrig.keyvalue.KvbMixinImpl, String public static org.jrig.keyvalue.IKeyValueBinding$BindingInfo ajc$interMethodDispatch1$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$infoForBinding org.jrig.keyvalue.KvbMixinImpl, String EffectiveSignatureAttribute org.jrig.keyvalue.IKeyValueBinding$BindingInfo org.jrig.keyvalue.KvbMixinImpl.infoForBinding java.lang.String , method-call : ALOAD_0 ALOAD_1 INVOKEINTERFACE org.jrig.keyvalue.KvbMixinImpl.infoForBinding Ljava/lang/String; Lorg/jrig/keyvalue/IKeyValueBinding$BindingInfo; ARETURN end public static org.jrig.keyvalue.IKeyValueBinding$BindingInfo ajc$interMethodDispatch1$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$infoForBinding org.jrig.keyvalue.KvbMixinImpl, String public static java.util.List ajc$interMethod$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$exposedBindings org.jrig.keyvalue.KvbMixinImpl EffectiveSignatureAttribute java.util.List org.jrig.keyvalue.KvbMixinImpl.exposedBindings , method-execution : ALOAD_0 // Lorg/jrig/keyvalue/KvbMixinImpl; ajc$this_ line 61 INVOKESTATIC org.jrig.keyvalue.KeyValueBinding.exposedBindings Ljava/lang/Object; Ljava/util/List; ARETURN end public static java.util.List ajc$interMethod$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$exposedBindings org.jrig.keyvalue.KvbMixinImpl public static java.util.List ajc$interMethodDispatch1$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$exposedBindings org.jrig.keyvalue.KvbMixinImpl EffectiveSignatureAttribute java.util.List org.jrig.keyvalue.KvbMixinImpl.exposedBindings , method-call : ALOAD_0 INVOKEINTERFACE org.jrig.keyvalue.KvbMixinImpl.exposedBindings Ljava/util/List; ARETURN end public static java.util.List ajc$interMethodDispatch1$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$exposedBindings org.jrig.keyvalue.KvbMixinImpl public static Class ajc$interMethod$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$valueClassForBinding org.jrig.keyvalue.KvbMixinImpl, String EffectiveSignatureAttribute java.lang.Class org.jrig.keyvalue.KvbMixinImpl.valueClassForBinding java.lang.String , method-execution : ALOAD_0 // Lorg/jrig/keyvalue/KvbMixinImpl; ajc$this_ line 65 ALOAD_1 // Ljava/lang/String; binding INVOKESTATIC org.jrig.keyvalue.KeyValueBinding.valueClassForBinding Ljava/lang/Object;Ljava/lang/String; Ljava/lang/Class; ARETURN end public static Class ajc$interMethod$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$valueClassForBinding org.jrig.keyvalue.KvbMixinImpl, String public static Class ajc$interMethodDispatch1$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$valueClassForBinding org.jrig.keyvalue.KvbMixinImpl, String EffectiveSignatureAttribute java.lang.Class org.jrig.keyvalue.KvbMixinImpl.valueClassForBinding java.lang.String , method-call : ALOAD_0 ALOAD_1 INVOKEINTERFACE org.jrig.keyvalue.KvbMixinImpl.valueClassForBinding Ljava/lang/String; Ljava/lang/Class; ARETURN end public static Class ajc$interMethodDispatch1$org_jrig_keyvalue_KvbMixin$org_jrig_keyvalue_KvbMixinImpl$valueClassForBinding org.jrig.keyvalue.KvbMixinImpl, String public static org.jrig.keyvalue.KvbMixin aspectOf org.aspectj.weaver.AjAttribute$AjSynthetic@33d8ad : GETSTATIC org.jrig.keyvalue.KvbMixin.ajc$perSingletonInstance Lorg/jrig/keyvalue/KvbMixin; line 1 IFNONNULL L0 NEW org.aspectj.lang.NoAspectBoundException DUP LDC "org_jrig_keyvalue_KvbMixin" GETSTATIC org.jrig.keyvalue.KvbMixin.ajc$initFailureCause Ljava/lang/Throwable; INVOKESPECIAL org.aspectj.lang.NoAspectBoundException.&amp;lt;init&amp;gt; Ljava/lang/String;Ljava/lang/Throwable; V ATHROW L0: GETSTATIC org.jrig.keyvalue.KvbMixin.ajc$perSingletonInstance Lorg/jrig/keyvalue/KvbMixin; ARETURN end public static org.jrig.keyvalue.KvbMixin aspectOf public static boolean hasAspect org.aspectj.weaver.AjAttribute$AjSynthetic@16dc7e : GETSTATIC org.jrig.keyvalue.KvbMixin.ajc$perSingletonInstance Lorg/jrig/keyvalue/KvbMixin; line 1 IFNULL L0 ICONST_1 IRETURN L0: ICONST_0 IRETURN end public static boolean hasAspect private static void ajc$postClinit org.aspectj.weaver.AjAttribute$AjSynthetic@1abd9d : NEW org.jrig.keyvalue.KvbMixin line 1 DUP INVOKESPECIAL org.jrig.keyvalue.KvbMixin.&amp;lt;init&amp;gt; V PUTSTATIC org.jrig.keyvalue.KvbMixin.ajc$perSingletonInstance Lorg/jrig/keyvalue/KvbMixin; RETURN end private static void ajc$postClinit end public class org.jrig.keyvalue.KvbMixin when weaving aspects when weaving when batch building BuildConfig[/Users/paul/Documents/workspace/.metadata/.plugins/org.eclipse.ajdt.core/JRigLocal.generated.lst] #Files=114</description>
    <commit commitTime="2006-08-10 10:31:23" id="1b7aa6a076390963293aad9c716880ddd2821442"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="153535" reportTime="2006-08-11 03:34:00">
    <summary>Bug in reflection delegate signature for array of object type</summary>
    <description>The following problem is interesting because the advice weaves correctly with Java 1.5 LTW and also using Java 1.4 with build-time weaving. However, the following call pointcut isn't matching the expected call site in Java 1.4 load-time weaving * . Pointcut: private pointcut inExecQuery : within uk.ltd.getahead.dwr.impl.ExecuteQuery || within uk.ltd.getahead.dwr.ExecuteQuery ; public pointcut dwrQuery Method method, Object receiver, Object[] params : inExecQuery &amp;amp;&amp;amp; withincode * execute .. &amp;amp;&amp;amp; call * Method.invoke .. &amp;amp;&amp;amp; args receiver, params &amp;amp;&amp;amp; target method ; protected pointcut monitorEnd : dwrQuery *, *, * ; Matching call site: Object reply = method.invoke object, params ; I've tracked it down to failing to find the method in ResolvedType.matches. On line 405: "m1.getSignature "= " Ljava/lang/Object;[Ljava.lang.Object; Ljava/lang/Object;" "m2.getSignature "= " Ljava/lang/Object;[Ljava/lang/Object; Ljava/lang/Object;" Note the difference between . and / ^ ^ It looks to me like the signature for array types in the reflection delegate is erroneously using . instead of /. I have attached a patch to the ReflectionBasedReferenceTypeDelegateTest that isolates this unexpected signature return. Hopefully you agree that this is not correct. If not, some more information follows. Here's the stack trace where the match fails: ResolvedType.matches Member, Member line: 405 ReferenceType ResolvedType .lookupMember Member, Iterator line: 347 ReferenceType ResolvedType .lookupMethod Member line: 326 LTWWorld World .resolve Member line: 504 MemberImpl.resolve World line: 93 JoinPointSignatureIterator.addSignaturesUpToFirstDefiningMember line: 109 JoinPointSignatureIterator.&amp;lt;init&amp;gt; Member, World line: 51 MemberImpl.getJoinPointSignatures World line: 943 SignaturePattern.matches Member, World, boolean line: 286 KindedPointcut.matchInternal Shadow line: 106 KindedPointcut Pointcut .match Shadow line: 146 AndPointcut.matchInternal Shadow line: 53 AndPointcut Pointcut .match Shadow line: 146 AndPointcut.matchInternal Shadow line: 51 AndPointcut Pointcut .match Shadow line: 146 AndPointcut.matchInternal Shadow line: 51 AndPointcut Pointcut .match Shadow line: 146 AndPointcut.matchInternal Shadow line: 51 AndPointcut Pointcut .match Shadow line: 146 OrPointcut.matchInternal Shadow line: 50 OrPointcut Pointcut .match Shadow line: 146 BcelAdvice ShadowMunger .match Shadow, World line: 71 BcelAdvice Advice .match Shadow, World line: 112 BcelAdvice.match Shadow, World line: 107 BcelClassWeaver.match BcelShadow, List line: 2806 BcelClassWeaver.matchInvokeInstruction LazyMethodGen, InstructionHandle, InvokeInstruction, BcelShadow, List line: 2768 BcelClassWeaver.match LazyMethodGen, InstructionHandle, BcelShadow, List line: 2506 BcelClassWeaver.match LazyMethodGen line: 2332 BcelClassWeaver.weave line: 494 BcelClassWeaver.weave BcelWorld, LazyClassGen, List, List, List line: 119 BcelWeaver.weave UnwovenClassFile, BcelObjectType, boolean line: 1613 BcelWeaver.weaveWithoutDump UnwovenClassFile, BcelObjectType line: 1564 BcelWeaver.weaveAndNotify UnwovenClassFile, BcelObjectType, IWeaveRequestor line: 1341 BcelWeaver.weave IClassFileProvider line: 1163 ClassLoaderWeavingAdaptor WeavingAdaptor .getWovenBytes String, byte[] line: 319 ClassLoaderWeavingAdaptor WeavingAdaptor .weaveClass String, byte[] line: 225 Aj.preProcess String, byte[], ClassLoader line: 77 ClassPreProcessorAdapter.preProcess String, byte[], ClassLoader line: 67 ClassPreProcessorHelper.defineClass0Pre ClassLoader, String, byte[], int, int, ProtectionDomain line: 107 WebappClassLoader ClassLoader .defineClass String, byte[], int, int, ProtectionDomain line: 539 WebappClassLoader SecureClassLoader .defineClass String, byte[], int, int, CodeSource line: 123 WebappClassLoader.findClassInternal String line: 1786 WebappClassLoader.findClass String line: 1048 WebappClassLoader.loadClass String, boolean line: 1506 WebappClassLoader.loadClass String line: 1385 WebappClassLoader ClassLoader .loadClassInternal String line: 302 Class.forName0 String, boolean, ClassLoader line: not available [native method] Class.forName String line: 141 InitializeLog.setWarnLogging String line: 121 InitializeLog.initializeLogging line: 96 ContextLoaderServlet.init line: 13 ContextLoaderServlet GenericServlet .init ServletConfig line: 212 StandardWrapper.loadServlet line: 879 StandardWrapper.load line: 767 StandardContext.loadOnStartup Container[] line: 3483 StandardContext.start line: 3709 StandardHost ContainerBase .addChildInternal Container line: 776 StandardHost ContainerBase .addChild Container line: 759 StandardHost.addChild Container line: 537 StandardHostDeployer.install String, URL line: 260 StandardHost.install String, URL line: 730 HostConfig.deployWARs File, String[] line: 558 HostConfig.deployApps line: 373 HostConfig.start line: 784 HostConfig.lifecycleEvent LifecycleEvent line: 330 LifecycleSupport.fireLifecycleEvent String, Object line: 119 StandardHost ContainerBase .start line: 1155 StandardHost.start line: 696 StandardEngine ContainerBase .start line: 1147 StandardEngine.start line: 310 StandardService.start line: 449 StandardServer.start line: 2212 Catalina.start line: 458 Catalina.execute line: 345 Catalina.process String[] line: 129 NativeMethodAccessorImpl.invoke0 Method, Object, Object[] line: not available [native method] NativeMethodAccessorImpl.invoke Object, Object[] line: 39 DelegatingMethodAccessorImpl.invoke Object, Object[] line: 25 Method.invoke Object, Object[] line: 324 Bootstrap.main String[] line: 150 I'm using a modified version of Alex Vasseur's LTW plugin for a Java 1.4 VM although I haven't tested on the JRockIt plugin for a 1.4 VM: my guess is that this would fail there too.</description>
    <commit commitTime="2006-08-15 11:51:21" id="82e3e13c66720ed17399821d478c31151b2d2234"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/reflect/ReflectionWorld.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java</file>
      <file>weaver5/java5-testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="153572" reportTime="2006-08-11 10:15:00">
    <summary>LTW with Spring 2.0rc3 fails using @Configurable</summary>
    <description>I'm currently testing the Spring @Configurable feature and LTW. Everything worked/works fine with the Spring 2.0rc2 distribution. This morning I then tried to use Spring rc2 togehter with AspectJ 1.5.2 and had problems. Then I upgraded Spring to the latest 2.0rc3 distribution and I'm getting the same problems. With Spring 2.0rc3 I get the following stack trace: info AspectJ Weaver Version 1.5.2 built on Friday Jun 30, 2006 at 09:30:27 GMT info register classloader sun.misc.Launcher$AppClassLoader@10469011 info using configuration /C:/workspace/trivadis-subversion/SpringBook/trunk/java/eurojourney-snippets/target/classes/META-INF/aop.xml info using configuration file:/C:/java/spring-framework-2.0-rc3/dist/spring-aspects.jar!/META-INF/aop.xml info register aspect org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect info register aspect org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect info register aspect org.springframework.transaction.aspectj.AnnotationTransactionAspect info not weaving 'org/eclipse/jdt/internal/junit/runner/RemoteTestRunner' info not weaving 'org/eclipse/jdt/internal/junit/runner/MessageSender' info not weaving 'org/eclipse/jdt/internal/junit/runner/IVisitsTestTrees' info not weaving 'org/eclipse/jdt/internal/junit/runner/IListensToTestExecutions' info not weaving 'org/eclipse/jdt/internal/junit/runner/IClassifiesThrowables' info not weaving 'org/eclipse/jdt/internal/junit/runner/TestIdMap' info not weaving 'org/eclipse/jdt/internal/junit/runner/junit3/JUnit3TestLoader' info not weaving 'org/eclipse/jdt/internal/junit/runner/ITestLoader' info not weaving 'junit/framework/Test' info not weaving 'org/eclipse/jdt/internal/junit/runner/FailuresFirstPrioritizer' info not weaving 'org/eclipse/jdt/internal/junit/runner/ITestPrioritizer' info not weaving 'org/eclipse/jdt/internal/junit/runner/NullPrioritizer' info not weaving 'org/eclipse/jdt/internal/junit/runner/RemoteTestRunner$ReaderThread' info not weaving 'org/eclipse/jdt/internal/junit/runner/FirstRunExecutionListener' info not weaving 'org/eclipse/jdt/internal/junit/runner/TestExecution' info not weaving 'org/eclipse/jdt/internal/junit/runner/DefaultClassifier' info not weaving 'com/trivadis/aop/configurable/ConfigurableTest' info not weaving 'org/springframework/test/AbstractDependencyInjectionSpringContextTests' info not weaving 'org/springframework/test/AbstractSpringContextTests' info not weaving 'org/springframework/test/ConditionalTestCase' info not weaving 'junit/framework/TestCase' info not weaving 'junit/framework/Assert' info not weaving 'org/eclipse/jdt/internal/junit/runner/ITestReference' info not weaving 'junit/framework/ComparisonFailure' info not weaving 'junit/framework/AssertionFailedError' info not weaving 'org/springframework/context/ConfigurableApplicationContext' info not weaving 'org/springframework/context/ApplicationContext' info not weaving 'org/springframework/beans/factory/ListableBeanFactory' info not weaving 'org/springframework/beans/factory/BeanFactory' info not weaving 'org/springframework/beans/factory/HierarchicalBeanFactory' info not weaving 'org/springframework/context/MessageSource' info not weaving 'org/springframework/context/ApplicationEventPublisher' info not weaving 'org/springframework/core/io/support/ResourcePatternResolver' info not weaving 'org/springframework/core/io/ResourceLoader' info not weaving 'org/springframework/context/Lifecycle' info not weaving 'org/springframework/beans/factory/NoSuchBeanDefinitionException' info not weaving 'org/springframework/beans/BeansException' info not weaving 'org/springframework/core/NestedRuntimeException' info not weaving 'junit/framework/TestResult' info not weaving 'junit/framework/TestSuite' info not weaving 'org/apache/commons/logging/LogFactory' info not weaving 'org/apache/commons/logging/LogConfigurationException' info not weaving 'org/apache/commons/logging/impl/WeakHashtable' info not weaving 'org/apache/commons/logging/LogFactory$1' info not weaving 'org/apache/commons/logging/impl/WeakHashtable$Referenced' info not weaving 'org/apache/commons/logging/impl/WeakHashtable$WeakKey' info not weaving 'org/apache/commons/logging/LogFactory$4' info not weaving 'org/apache/commons/logging/LogFactory$3' info not weaving 'org/apache/commons/logging/LogFactory$2' info not weaving 'org/apache/commons/logging/impl/LogFactoryImpl' info not weaving 'org/apache/commons/logging/impl/Log4JLogger' info not weaving 'org/apache/commons/logging/Log' info not weaving 'org/apache/log4j/Category' info not weaving 'org/apache/log4j/spi/AppenderAttachable' info not weaving 'org/apache/log4j/Logger' info not weaving 'org/apache/log4j/Priority' info not weaving 'org/apache/log4j/Level' info not weaving 'org/apache/log4j/LogManager' info not weaving 'org/apache/log4j/spi/RootLogger' info not weaving 'org/apache/log4j/spi/LoggerRepository' info not weaving 'org/apache/log4j/spi/RepositorySelector' info not weaving 'org/apache/log4j/Hierarchy' info not weaving 'org/apache/log4j/spi/RendererSupport' info not weaving 'org/apache/log4j/ProvisionNode' info not weaving 'org/apache/log4j/spi/LoggerFactory' info not weaving 'org/apache/log4j/or/RendererMap' info not weaving 'org/apache/log4j/or/ObjectRenderer' info not weaving 'org/apache/log4j/or/DefaultRenderer' info not weaving 'org/apache/log4j/DefaultCategoryFactory' info not weaving 'org/apache/log4j/spi/DefaultRepositorySelector' info not weaving 'org/apache/log4j/helpers/OptionConverter' info not weaving 'org/apache/log4j/spi/Configurator' info not weaving 'org/apache/log4j/helpers/Loader' info not weaving 'org/apache/log4j/helpers/LogLog' info not weaving 'org/apache/log4j/PropertyConfigurator' info not weaving 'org/apache/log4j/helpers/FileWatchdog' info not weaving 'org/apache/log4j/PropertyWatchdog' info not weaving 'org/apache/log4j/Appender' info not weaving 'org/apache/log4j/ConsoleAppender' info not weaving 'org/apache/log4j/WriterAppender' info not weaving 'org/apache/log4j/AppenderSkeleton' info not weaving 'org/apache/log4j/spi/OptionHandler' info not weaving 'org/apache/log4j/spi/ErrorHandler' info not weaving 'org/apache/log4j/helpers/QuietWriter' info not weaving 'org/apache/log4j/ConsoleAppender$SystemErrStream' info not weaving 'org/apache/log4j/ConsoleAppender$SystemOutStream' info not weaving 'org/apache/log4j/Layout' info not weaving 'org/apache/log4j/helpers/OnlyOnceErrorHandler' info not weaving 'org/apache/log4j/PatternLayout' info not weaving 'org/apache/log4j/helpers/PatternParser' info not weaving 'org/apache/log4j/helpers/PatternParser$CategoryPatternConverter' info not weaving 'org/apache/log4j/helpers/PatternParser$NamedPatternConverter' info not weaving 'org/apache/log4j/helpers/PatternConverter' info not weaving 'org/apache/log4j/helpers/PatternParser$ClassNamePatternConverter' info not weaving 'org/apache/log4j/helpers/ISO8601DateFormat' info not weaving 'org/apache/log4j/helpers/AbsoluteTimeDateFormat' info not weaving 'org/apache/log4j/helpers/DateTimeDateFormat' info not weaving 'org/apache/log4j/helpers/PatternParser$DatePatternConverter' info not weaving 'org/apache/log4j/helpers/PatternParser$LocationPatternConverter' info not weaving 'org/apache/log4j/helpers/PatternParser$BasicPatternConverter' info not weaving 'org/apache/log4j/helpers/PatternParser$MDCPatternConverter' info not weaving 'org/apache/log4j/helpers/PatternParser$LiteralPatternConverter' info not weaving 'org/apache/log4j/helpers/FormattingInfo' info not weaving 'org/apache/log4j/config/PropertySetter' info not weaving 'org/apache/log4j/config/PropertySetterException' info not weaving 'org/apache/log4j/spi/LoggingEvent' info not weaving 'org/apache/log4j/helpers/AppenderAttachableImpl' info not weaving 'org/apache/log4j/CategoryKey' info not weaving 'org/eclipse/jdt/internal/junit/runner/junit3/JUnit3TestReference' info not weaving 'junit/extensions/TestDecorator' info not weaving 'org/eclipse/jdt/internal/junit/runner/ITestIdentifier' info not weaving 'junit/framework/TestListener' info not weaving 'org/eclipse/jdt/internal/junit/runner/IStopListener' info not weaving 'org/eclipse/jdt/internal/junit/runner/junit3/JUnit3Identifier' info not weaving 'org/eclipse/jdt/internal/junit/runner/JUnitMessages' info not weaving 'junit/framework/Protectable' info not weaving 'org/eclipse/jdt/internal/junit/runner/junit3/JUnit3Listener' info not weaving 'org/eclipse/jdt/internal/junit/runner/junit3/JUnit3TestReference$1' info not weaving 'junit/framework/TestResult$1' info not weaving 'org/springframework/util/StringUtils' info not weaving 'org/apache/log4j/NDC' info not weaving 'org/springframework/context/support/ClassPathXmlApplicationContext' info not weaving 'org/springframework/context/support/AbstractXmlApplicationContext' 0 [main] INFO com.trivadis.aop.configurable.ConfigurableTest - Loading config for: classpath:com/trivadis/aop/configurable/applicationContext.xml info not weaving 'org/springframework/context/support/AbstractRefreshableApplicationContext' info not weaving 'org/springframework/context/support/AbstractApplicationContext' info not weaving 'org/springframework/beans/factory/DisposableBean' info not weaving 'org/springframework/core/io/DefaultResourceLoader' info not weaving 'org/springframework/core/io/Resource' info not weaving 'org/springframework/core/io/InputStreamSource' info not weaving 'org/springframework/context/ApplicationEvent' info not weaving 'org/springframework/context/event/ContextClosedEvent' info not weaving 'org/springframework/context/support/AbstractApplicationContext$1' info not weaving 'org/springframework/context/event/ApplicationEventMulticaster' info not weaving 'org/springframework/beans/factory/config/BeanPostProcessor' info not weaving 'org/springframework/beans/factory/config/ConfigurableListableBeanFactory' info not weaving 'org/springframework/beans/factory/config/AutowireCapableBeanFactory' info not weaving 'org/springframework/beans/factory/config/ConfigurableBeanFactory' info not weaving 'org/springframework/beans/factory/config/SingletonBeanRegistry' info not weaving 'org/springframework/beans/PropertyEditorRegistrar' info not weaving 'org/springframework/context/event/ContextRefreshedEvent' info not weaving 'org/springframework/context/ApplicationContextException' info not weaving 'org/springframework/beans/FatalBeanException' info not weaving 'org/springframework/beans/factory/support/BeanDefinitionRegistry' info not weaving 'org/springframework/util/ClassUtils' info not weaving 'org/springframework/core/io/support/PathMatchingResourcePatternResolver' info not weaving 'org/springframework/util/PathMatcher' info not weaving 'org/springframework/util/AntPathMatcher' info not weaving 'org/springframework/util/Assert' info not weaving 'org/springframework/beans/factory/support/DefaultListableBeanFactory' info not weaving 'org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory' info not weaving 'org/springframework/beans/factory/support/AbstractBeanFactory' info not weaving 'org/springframework/beans/factory/support/DefaultSingletonBeanRegistry' info not weaving 'org/springframework/beans/factory/BeanCreationNotAllowedException' info not weaving 'org/springframework/beans/factory/BeanCreationException' info not weaving 'org/springframework/beans/factory/FactoryBeanNotInitializedException' info not weaving 'org/springframework/beans/factory/BeanCurrentlyInCreationException' info not weaving 'org/springframework/beans/factory/BeanIsNotAFactoryException' info not weaving 'org/springframework/beans/factory/BeanNotOfRequiredTypeException' info not weaving 'org/springframework/beans/factory/BeanIsAbstractException' info not weaving 'org/springframework/beans/factory/BeanDefinitionStoreException' info not weaving 'org/springframework/beans/PropertyEditorRegistry' info not weaving 'org/springframework/beans/factory/CannotLoadBeanClassException' info not weaving 'org/springframework/beans/factory/support/AbstractBeanDefinition' info not weaving 'org/springframework/beans/factory/config/BeanDefinition' info not weaving 'org/springframework/core/AttributeAccessor' info not weaving 'org/springframework/core/AttributeAccessorSupport' info not weaving 'org/springframework/beans/factory/support/ChildBeanDefinition' info not weaving 'org/springframework/beans/factory/ObjectFactory' info not weaving 'org/springframework/beans/PropertyValues' info not weaving 'org/springframework/beans/factory/UnsatisfiedDependencyException' info not weaving 'org/springframework/beans/MutablePropertyValues' info not weaving 'org/springframework/beans/factory/support/ConstructorResolver' info not weaving 'org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory$ConstructorResolverAdapter' info not weaving 'org/springframework/beans/BeanWrapper' info not weaving 'org/springframework/beans/ConfigurablePropertyAccessor' info not weaving 'org/springframework/beans/PropertyAccessor' info not weaving 'org/springframework/beans/factory/support/BeanDefinitionValidationException' info not weaving 'org/springframework/beans/factory/support/InstantiationStrategy' info not weaving 'org/springframework/core/CollectionFactory' info not weaving 'org/springframework/core/JdkVersion' info not weaving 'org/springframework/core/CollectionFactory$Jdk14CollectionFactory' info not weaving 'org/springframework/beans/factory/support/CglibSubclassingInstantiationStrategy' info not weaving 'org/springframework/beans/factory/support/SimpleInstantiationStrategy' 328 [main] INFO org.springframework.core.CollectionFactory - JDK 1.4+ collections available info not weaving 'org/springframework/beans/factory/BeanNameAware' info not weaving 'org/springframework/beans/factory/BeanFactoryAware' info not weaving 'org/springframework/beans/factory/BeanClassLoaderAware' info not weaving 'org/springframework/beans/factory/xml/XmlBeanDefinitionReader' info not weaving 'org/springframework/beans/factory/support/AbstractBeanDefinitionReader' info not weaving 'org/springframework/beans/factory/support/BeanDefinitionReader' info not weaving 'org/springframework/beans/factory/xml/NamespaceHandlerResolver' info not weaving 'org/springframework/beans/factory/parsing/ProblemReporter' info not weaving 'org/springframework/beans/factory/support/ReaderEventListener' info not weaving 'org/springframework/beans/factory/parsing/SourceExtractor' info not weaving 'org/springframework/beans/factory/xml/DocumentLoader' info not weaving 'org/springframework/core/Constants' info not weaving 'org/springframework/core/ConstantException' info not weaving 'org/springframework/util/ReflectionUtils' info not weaving 'org/springframework/util/ReflectionUtils$FieldCallback' info not weaving 'org/springframework/util/ReflectionUtils$MethodCallback' info not weaving 'org/springframework/util/ReflectionUtils$FieldFilter' info not weaving 'org/springframework/util/ReflectionUtils$3' info not weaving 'org/springframework/util/xml/SimpleSaxErrorHandler' info not weaving 'org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader' info not weaving 'org/springframework/beans/factory/xml/BeanDefinitionDocumentReader' info not weaving 'org/springframework/beans/factory/support/ComponentDefinition' info not weaving 'org/springframework/beans/factory/support/ReaderContext' info not weaving 'org/springframework/beans/factory/xml/XmlReaderContext' info not weaving 'org/springframework/beans/factory/parsing/FailFastProblemReporter' info not weaving 'org/springframework/beans/factory/parsing/BeanDefinitionParsingException' info not weaving 'org/springframework/beans/factory/xml/XmlBeanDefinitionReader$NullReaderEventListener' info not weaving 'org/springframework/beans/factory/parsing/NullSourceExtractor' info not weaving 'org/springframework/beans/factory/xml/DefaultDocumentLoader' info not weaving 'org/springframework/util/xml/XmlValidationModeDetector' info not weaving 'org/springframework/beans/factory/xml/ResourceEntityResolver' info not weaving 'org/springframework/beans/factory/xml/DelegatingEntityResolver' info not weaving 'org/springframework/beans/factory/xml/BeansDtdResolver' info not weaving 'org/springframework/beans/factory/xml/PluggableSchemaResolver' info not weaving 'org/springframework/core/io/support/PropertiesLoaderUtils' 515 [main] INFO org.springframework.beans.factory.xml.XmlBeanDefinitionReader - Loading XML bean definitions from class path resource [com/trivadis/aop/configurable/applicationContext.xml] info not weaving 'org/springframework/core/io/ClassPathResource' info not weaving 'org/springframework/core/io/AbstractResource' info not weaving 'org/springframework/core/io/support/EncodedResource' info not weaving 'org/springframework/beans/BeanUtils' info not weaving 'org/springframework/beans/BeanInstantiationException' info not weaving 'org/springframework/beans/factory/xml/DefaultNamespaceHandlerResolver' info not weaving 'org/springframework/beans/factory/xml/SimplePropertyNamespaceHandler' info not weaving 'org/springframework/beans/factory/xml/NamespaceHandler' info not weaving 'org/springframework/scripting/config/LangNamespaceHandler' info not weaving 'org/springframework/beans/factory/xml/NamespaceHandlerSupport' info not weaving 'org/springframework/beans/factory/xml/BeanDefinitionParser' info not weaving 'org/springframework/ejb/config/JeeNamespaceHandler' info not weaving 'org/springframework/ejb/config/JndiLookupBeanDefinitionParser' info not weaving 'org/springframework/ejb/config/AbstractJndiLocatedBeanDefinitionParser' info not weaving 'org/springframework/beans/factory/xml/AbstractSimpleBeanDefinitionParser' info not weaving 'org/springframework/beans/factory/xml/AbstractSingleBeanDefinitionParser' info not weaving 'org/springframework/beans/factory/xml/AbstractBeanDefinitionParser' info not weaving 'org/springframework/ejb/config/LocalStatelessSessionBeanDefinitionParser' info not weaving 'org/springframework/ejb/config/RemoteStatelessSessionBeanDefinitionParser' info not weaving 'org/springframework/aop/config/AopNamespaceHandler' info not weaving 'org/springframework/beans/factory/xml/BeanDefinitionDecorator' info not weaving 'org/springframework/aop/config/ConfigBeanDefinitionParser' info not weaving 'org/springframework/beans/factory/support/RootBeanDefinition' info not weaving 'org/springframework/beans/factory/parsing/ParseState$Entry' info not weaving 'org/springframework/beans/factory/parsing/ParseState' info not weaving 'org/springframework/aop/config/SpringConfiguredBeanDefinitionParser' info not weaving 'org/springframework/aop/config/AspectJAutoProxyBeanDefinitionParser' info not weaving 'org/springframework/core/Conventions' info not weaving 'org/springframework/aop/config/ScopedProxyBeanDefinitionDecorator' info not weaving 'org/springframework/beans/factory/xml/UtilNamespaceHandler' info not weaving 'org/springframework/beans/factory/xml/UtilNamespaceHandler$PropertiesBeanDefinitionParser' info not weaving 'org/springframework/beans/factory/xml/UtilNamespaceHandler$ConstantBeanDefinitionParser' info not weaving 'org/springframework/beans/factory/xml/PropertyPathBeanDefinitionParser' info not weaving 'org/springframework/beans/factory/xml/UtilNamespaceHandler$MapBeanDefinitionParser' info not weaving 'org/springframework/beans/factory/xml/UtilNamespaceHandler$ListBeanDefinitionParser' info not weaving 'org/springframework/beans/factory/xml/UtilNamespaceHandler$SetBeanDefinitionParser' info not weaving 'org/springframework/transaction/config/TxNamespaceHandler' info not weaving 'org/springframework/transaction/config/TxAdviceBeanDefinitionParser' info not weaving 'org/springframework/transaction/config/AnnotationDrivenBeanDefinitionParser' info not weaving 'org/springframework/beans/factory/xml/BeanDefinitionParserDelegate' info not weaving 'org/springframework/beans/factory/support/ManagedProperties' info not weaving 'org/springframework/beans/Mergeable' info not weaving 'org/springframework/beans/factory/support/MethodOverride' info not weaving 'org/springframework/beans/factory/support/ReplaceOverride' info not weaving 'org/springframework/beans/factory/support/LookupOverride' info not weaving 'org/springframework/beans/factory/xml/ParserContext' info not weaving 'org/springframework/aop/config/AopNamespaceUtils' info not weaving 'org/springframework/aop/framework/autoproxy/InvocationContextExposingAdvisorAutoProxyCreator' info not weaving 'org/springframework/aop/framework/autoproxy/AbstractAdvisorAutoProxyCreator' info not weaving 'org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator' info not weaving 'org/springframework/beans/factory/config/InstantiationAwareBeanPostProcessor' info not weaving 'org/springframework/core/Ordered' info not weaving 'org/springframework/aop/framework/ProxyConfig' info not weaving 'org/springframework/aop/framework/AopProxyFactory' info not weaving 'org/springframework/aop/TargetSource' info not weaving 'org/springframework/aop/aspectj/autoproxy/AspectJInvocationContextExposingAdvisorAutoProxyCreator' info not weaving 'org/springframework/aop/aspectj/annotation/AnnotationAwareAspectJAutoProxyCreator' info not weaving 'org/springframework/aop/aspectj/annotation/MetadataAwareAspectInstanceFactory' info not weaving 'org/springframework/aop/aspectj/AspectInstanceFactory' info not weaving 'org/springframework/aop/aspectj/annotation/AspectJAdvisorFactory' info not weaving 'org/springframework/beans/factory/support/MethodOverrides' info not weaving 'org/springframework/beans/factory/config/ConstructorArgumentValues' info not weaving 'org/springframework/beans/factory/support/BeanComponentDefinition' info not weaving 'org/springframework/beans/factory/support/AbstractComponentDefinition' info not weaving 'org/springframework/beans/PropertyValue' info not weaving 'org/springframework/beans/factory/config/RuntimeBeanReference' info not weaving 'org/springframework/beans/factory/support/BeanDefinitionRegistryBuilder' info not weaving 'org/springframework/beans/factory/aspectj/AnnotationBeanConfigurerAspect' info not weaving 'org/springframework/beans/factory/aspectj/AbstractBeanConfigurerAspect' info not weaving 'org/springframework/beans/factory/wiring/BeanConfigurerSupport' info not weaving 'org/springframework/beans/factory/wiring/BeanWiringInfoResolver' info not weaving 'org/aspectj/lang/NoAspectBoundException' info not weaving 'org/springframework/beans/factory/wiring/ClassNameBeanWiringInfoResolver' info not weaving 'org/springframework/beans/factory/annotation/AnnotationBeanWiringInfoResolver' info not weaving 'org/springframework/beans/factory/support/BeanDefinitionBuilder' info not weaving 'org/springframework/beans/factory/support/BeanDefinitionReaderUtils' info not weaving 'org/springframework/util/xml/DomUtils' info not weaving 'org/springframework/util/CollectionUtils' info not weaving 'org/springframework/beans/factory/parsing/BeanEntry' info not weaving 'org/springframework/beans/factory/parsing/PropertyEntry' info not weaving 'org/springframework/beans/factory/config/BeanDefinitionHolder' info not weaving 'org/springframework/beans/support/ResourceEditorRegistrar' info not weaving 'org/springframework/context/support/ApplicationContextAwareProcessor' info not weaving 'org/springframework/beans/factory/config/DestructionAwareBeanPostProcessor' info not weaving 'org/springframework/context/ResourceLoaderAware' info not weaving 'org/springframework/context/ApplicationEventPublisherAware' info not weaving 'org/springframework/context/MessageSourceAware' info not weaving 'org/springframework/context/ApplicationContextAware' info not weaving 'org/springframework/beans/factory/config/BeanFactoryPostProcessor' info not weaving 'org/springframework/beans/factory/BeanFactoryUtils' info not weaving 'org/springframework/util/ObjectUtils' 1265 [main] INFO org.springframework.context.support.ClassPathXmlApplicationContext - Bean factory for application context [org.springframework.context.support.ClassPathXmlApplicationContext;hashCode=9523050]: org.springframework.beans.factory.support.DefaultListableBeanFactory defining beans [org.springframework.aop.config.internalAutoProxyCreator,org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect,com.trivadis.aop.configurable.Address,codeRepository]; root of BeanFactory hierarchy 1281 [main] INFO org.springframework.context.support.ClassPathXmlApplicationContext - 4 beans defined in application context [org.springframework.context.support.ClassPathXmlApplicationContext;hashCode=9523050] info not weaving 'org/springframework/beans/factory/FactoryBean' info not weaving 'org/springframework/util/ReflectionUtils$1' info weaving 'com/trivadis/aop/configurable/Address' abort trouble in: public class com.trivadis.aop.configurable.Address extends java.lang.Object: private com.trivadis.aop.configurable.CodeRepository codeRepository private long id private String street private String city private com.trivadis.aop.configurable.Country country public void setCodeRepository com.trivadis.aop.configurable.CodeRepository : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 14 ALOAD_1 // Lcom/trivadis/aop/configurable/CodeRepository; codeRepository PUTFIELD com.trivadis.aop.configurable.Address.codeRepository Lcom/trivadis/aop/configurable/CodeRepository; RETURN line 15 end public void setCodeRepository com.trivadis.aop.configurable.CodeRepository public String getCity : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 27 GETFIELD com.trivadis.aop.configurable.Address.city Ljava/lang/String; ARETURN end public String getCity public void setCity String : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 31 ALOAD_1 // Ljava/lang/String; city PUTFIELD com.trivadis.aop.configurable.Address.city Ljava/lang/String; RETURN line 32 end public void setCity String public com.trivadis.aop.configurable.Country getCountry : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 35 GETFIELD com.trivadis.aop.configurable.Address.country Lcom/trivadis/aop/configurable/Country; ARETURN end public com.trivadis.aop.configurable.Country getCountry public void setCountry com.trivadis.aop.configurable.Country : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 39 ALOAD_1 // Lcom/trivadis/aop/configurable/Country; country PUTFIELD com.trivadis.aop.configurable.Address.country Lcom/trivadis/aop/configurable/Country; RETURN line 40 end public void setCountry com.trivadis.aop.configurable.Country public String getStreet : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 43 GETFIELD com.trivadis.aop.configurable.Address.street Ljava/lang/String; ARETURN end public String getStreet public void setStreet String : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 47 ALOAD_1 // Ljava/lang/String; street PUTFIELD com.trivadis.aop.configurable.Address.street Ljava/lang/String; RETURN line 48 end public void setStreet String private void &amp;lt;init&amp;gt; : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 52 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V RETURN end private void &amp;lt;init&amp;gt; public static com.trivadis.aop.configurable.Address createAddress String, String : NEW com.trivadis.aop.configurable.Address line 57 DUP INVOKESPECIAL com.trivadis.aop.configurable.Address.&amp;lt;init&amp;gt; V ASTORE_2 ALOAD_2 // Lcom/trivadis/aop/configurable/Address; adr line 58 ALOAD_0 // Ljava/lang/String; street INVOKEVIRTUAL com.trivadis.aop.configurable.Address.setStreet Ljava/lang/String; V ALOAD_2 // Lcom/trivadis/aop/configurable/Address; adr line 59 ALOAD_1 // Ljava/lang/String; city INVOKEVIRTUAL com.trivadis.aop.configurable.Address.setCity Ljava/lang/String; V ALOAD_2 // Lcom/trivadis/aop/configurable/Address; adr line 60 ARETURN end public static com.trivadis.aop.configurable.Address createAddress String, String public com.trivadis.aop.configurable.Address withStreet String : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 66 ALOAD_1 // Ljava/lang/String; street INVOKEVIRTUAL com.trivadis.aop.configurable.Address.setStreet Ljava/lang/String; V ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 67 ARETURN end public com.trivadis.aop.configurable.Address withStreet String public com.trivadis.aop.configurable.Address withCity String : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 71 ALOAD_1 // Ljava/lang/String; city INVOKEVIRTUAL com.trivadis.aop.configurable.Address.setCity Ljava/lang/String; V ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 72 ARETURN end public com.trivadis.aop.configurable.Address withCity String public com.trivadis.aop.configurable.Address forCountry String : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 76 ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this GETFIELD com.trivadis.aop.configurable.Address.codeRepository Lcom/trivadis/aop/configurable/CodeRepository; ALOAD_1 // Ljava/lang/String; code INVOKEINTERFACE com.trivadis.aop.configurable.CodeRepository.findCountryByCode Ljava/lang/String; Lcom/trivadis/aop/configurable/Country; INVOKEVIRTUAL com.trivadis.aop.configurable.Address.setCountry Lcom/trivadis/aop/configurable/Country; V ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 77 ARETURN end public com.trivadis.aop.configurable.Address forCountry String end public class com.trivadis.aop.configurable.Address -- NullPointerException null null java.lang.NullPointerException at org.aspectj.apache.bcel.util.ClassLoaderRepository.loadClass ClassLoaderRepository.java:128 at org.aspectj.apache.bcel.util.ClassLoaderRepository.loadClass ClassLoaderRepository.java:146 at org.aspectj.weaver.reflect.Java15AnnotationFinder.getAnnotations Java15AnnotationFinder.java:143 at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.getAnnotationTypes Java15ReflectionBasedReferenceTypeDelegate.java:86 at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.hasAnnotation Java15ReflectionBasedReferenceTypeDelegate.java:92 at org.aspectj.weaver.ReferenceType.hasAnnotation ReferenceType.java:151 at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches ExactAnnotationTypePattern.java:95 at org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern.matchesExactly TypePattern.java:470 at org.aspectj.weaver.patterns.TypePattern.matchesStatically TypePattern.java:121 at org.aspectj.weaver.patterns.SignaturePattern.matchesExactlyMethod SignaturePattern.java:375 at org.aspectj.weaver.patterns.SignaturePattern.matchesExactly SignaturePattern.java:325 at org.aspectj.weaver.patterns.SignaturePattern.matches SignaturePattern.java:289 at org.aspectj.weaver.patterns.KindedPointcut.matchInternal KindedPointcut.java:106 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:51 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:51 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.OrPointcut.matchInternal OrPointcut.java:52 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.ShadowMunger.match ShadowMunger.java:71 at org.aspectj.weaver.Advice.match Advice.java:111 at org.aspectj.weaver.bcel.BcelAdvice.match BcelAdvice.java:107 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2799 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2330 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:490 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:115 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1574 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1525 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1305 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1127 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:284 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:212 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:65 at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform ClassPreProcessorAgentAdapter.java:55 at sun.instrument.TransformerManager.transform TransformerManager.java:122 at sun.instrument.InstrumentationImpl.transform InstrumentationImpl.java:155 at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:620 at java.security.SecureClassLoader.defineClass SecureClassLoader.java:124 at java.net.URLClassLoader.defineClass URLClassLoader.java:260 at java.net.URLClassLoader.access$100 URLClassLoader.java:56 at java.net.URLClassLoader$1.run URLClassLoader.java:195 at java.security.AccessController.doPrivileged Native Method at java.net.URLClassLoader.findClass URLClassLoader.java:188 at java.lang.ClassLoader.loadClass ClassLoader.java:306 at sun.misc.Launcher$AppClassLoader.loadClass Launcher.java:268 at java.lang.ClassLoader.loadClass ClassLoader.java:251 at java.lang.ClassLoader.loadClassInternal ClassLoader.java:319 at java.lang.Class.forName0 Native Method at java.lang.Class.forName Class.java:242 at org.springframework.util.ClassUtils.forName ClassUtils.java:160 at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass AbstractBeanDefinition.java:308 at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass AbstractBeanFactory.java:853 at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType DefaultListableBeanFactory.java:176 at org.springframework.context.support.AbstractApplicationContext.getBeanNamesForType AbstractApplicationContext.java:686 at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors AbstractApplicationContext.java:397 at org.springframework.context.support.AbstractApplicationContext.refresh AbstractApplicationContext.java:330 at org.springframework.context.support.ClassPathXmlApplicationContext.&amp;lt;init&amp;gt; ClassPathXmlApplicationContext.java:92 at org.springframework.context.support.ClassPathXmlApplicationContext.&amp;lt;init&amp;gt; ClassPathXmlApplicationContext.java:77 at org.springframework.test.AbstractSpringContextTests.loadContextLocations AbstractSpringContextTests.java:130 at org.springframework.test.AbstractDependencyInjectionSpringContextTests.loadContextLocations AbstractDependencyInjectionSpringContextTests.java:238 at org.springframework.test.AbstractSpringContextTests.getContext AbstractSpringContextTests.java:110 at org.springframework.test.AbstractDependencyInjectionSpringContextTests.setUp AbstractDependencyInjectionSpringContextTests.java:194 at junit.framework.TestCase.runBare TestCase.java:125 at org.springframework.test.ConditionalTestCase.runBare ConditionalTestCase.java:69 at junit.framework.TestResult$1.protect TestResult.java:106 at junit.framework.TestResult.runProtected TestResult.java:124 at junit.framework.TestResult.run TestResult.java:109 at junit.framework.TestCase.run TestCase.java:118 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run JUnit3TestReference.java:128 at org.eclipse.jdt.internal.junit.runner.TestExecution.run TestExecution.java:38 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests RemoteTestRunner.java:460 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests RemoteTestRunner.java:673 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run RemoteTestRunner.java:386 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main RemoteTestRunner.java:196 Message: abort trouble in: public class com.trivadis.aop.configurable.Address extends java.lang.Object: private com.trivadis.aop.configurable.CodeRepository codeRepository private long id private String street private String city private com.trivadis.aop.configurable.Country country public void setCodeRepository com.trivadis.aop.configurable.CodeRepository : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 14 ALOAD_1 // Lcom/trivadis/aop/configurable/CodeRepository; codeRepository PUTFIELD com.trivadis.aop.configurable.Address.codeRepository Lcom/trivadis/aop/configurable/CodeRepository; RETURN line 15 end public void setCodeRepository com.trivadis.aop.configurable.CodeRepository public String getCity : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 27 GETFIELD com.trivadis.aop.configurable.Address.city Ljava/lang/String; ARETURN end public String getCity public void setCity String : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 31 ALOAD_1 // Ljava/lang/String; city PUTFIELD com.trivadis.aop.configurable.Address.city Ljava/lang/String; RETURN line 32 end public void setCity String public com.trivadis.aop.configurable.Country getCountry : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 35 GETFIELD com.trivadis.aop.configurable.Address.country Lcom/trivadis/aop/configurable/Country; ARETURN end public com.trivadis.aop.configurable.Country getCountry public void setCountry com.trivadis.aop.configurable.Country : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 39 ALOAD_1 // Lcom/trivadis/aop/configurable/Country; country PUTFIELD com.trivadis.aop.configurable.Address.country Lcom/trivadis/aop/configurable/Country; RETURN line 40 end public void setCountry com.trivadis.aop.configurable.Country public String getStreet : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 43 GETFIELD com.trivadis.aop.configurable.Address.street Ljava/lang/String; ARETURN end public String getStreet public void setStreet String : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 47 ALOAD_1 // Ljava/lang/String; street PUTFIELD com.trivadis.aop.configurable.Address.street Ljava/lang/String; RETURN line 48 end public void setStreet String private void &amp;lt;init&amp;gt; : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 52 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V RETURN end private void &amp;lt;init&amp;gt; public static com.trivadis.aop.configurable.Address createAddress String, String : NEW com.trivadis.aop.configurable.Address line 57 DUP INVOKESPECIAL com.trivadis.aop.configurable.Address.&amp;lt;init&amp;gt; V ASTORE_2 ALOAD_2 // Lcom/trivadis/aop/configurable/Address; adr line 58 ALOAD_0 // Ljava/lang/String; street INVOKEVIRTUAL com.trivadis.aop.configurable.Address.setStreet Ljava/lang/String; V ALOAD_2 // Lcom/trivadis/aop/configurable/Address; adr line 59 ALOAD_1 // Ljava/lang/String; city INVOKEVIRTUAL com.trivadis.aop.configurable.Address.setCity Ljava/lang/String; V ALOAD_2 // Lcom/trivadis/aop/configurable/Address; adr line 60 ARETURN end public static com.trivadis.aop.configurable.Address createAddress String, String public com.trivadis.aop.configurable.Address withStreet String : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 66 ALOAD_1 // Ljava/lang/String; street INVOKEVIRTUAL com.trivadis.aop.configurable.Address.setStreet Ljava/lang/String; V ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 67 ARETURN end public com.trivadis.aop.configurable.Address withStreet String public com.trivadis.aop.configurable.Address withCity String : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 71 ALOAD_1 // Ljava/lang/String; city INVOKEVIRTUAL com.trivadis.aop.configurable.Address.setCity Ljava/lang/String; V ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 72 ARETURN end public com.trivadis.aop.configurable.Address withCity String public com.trivadis.aop.configurable.Address forCountry String : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 76 ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this GETFIELD com.trivadis.aop.configurable.Address.codeRepository Lcom/trivadis/aop/configurable/CodeRepository; ALOAD_1 // Ljava/lang/String; code INVOKEINTERFACE com.trivadis.aop.configurable.CodeRepository.findCountryByCode Ljava/lang/String; Lcom/trivadis/aop/configurable/Country; INVOKEVIRTUAL com.trivadis.aop.configurable.Address.setCountry Lcom/trivadis/aop/configurable/Country; V ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 77 ARETURN end public com.trivadis.aop.configurable.Address forCountry String end public class com.trivadis.aop.configurable.Address -- NullPointerException null null java.lang.NullPointerException at org.aspectj.apache.bcel.util.ClassLoaderRepository.loadClass ClassLoaderRepository.java:128 at org.aspectj.apache.bcel.util.ClassLoaderRepository.loadClass ClassLoaderRepository.java:146 at org.aspectj.weaver.reflect.Java15AnnotationFinder.getAnnotations Java15AnnotationFinder.java:143 at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.getAnnotationTypes Java15ReflectionBasedReferenceTypeDelegate.java:86 at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.hasAnnotation Java15ReflectionBasedReferenceTypeDelegate.java:92 at org.aspectj.weaver.ReferenceType.hasAnnotation ReferenceType.java:151 at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches ExactAnnotationTypePattern.java:95 at org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern.matchesExactly TypePattern.java:470 at org.aspectj.weaver.patterns.TypePattern.matchesStatically TypePattern.java:121 at org.aspectj.weaver.patterns.SignaturePattern.matchesExactlyMethod SignaturePattern.java:375 at org.aspectj.weaver.patterns.SignaturePattern.matchesExactly SignaturePattern.java:325 at org.aspectj.weaver.patterns.SignaturePattern.matches SignaturePattern.java:289 at org.aspectj.weaver.patterns.KindedPointcut.matchInternal KindedPointcut.java:106 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:51 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:51 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.OrPointcut.matchInternal OrPointcut.java:52 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.ShadowMunger.match ShadowMunger.java:71 at org.aspectj.weaver.Advice.match Advice.java:111 at org.aspectj.weaver.bcel.BcelAdvice.match BcelAdvice.java:107 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2799 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2330 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:490 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:115 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1574 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1525 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1305 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1127 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:284 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:212 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:65 at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform ClassPreProcessorAgentAdapter.java:55 at sun.instrument.TransformerManager.transform TransformerManager.java:122 at sun.instrument.InstrumentationImpl.transform InstrumentationImpl.java:155 at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:620 at java.security.SecureClassLoader.defineClass SecureClassLoader.java:124 at java.net.URLClassLoader.defineClass URLClassLoader.java:260 at java.net.URLClassLoader.access$100 URLClassLoader.java:56 at java.net.URLClassLoader$1.run URLClassLoader.java:195 at java.security.AccessController.doPrivileged Native Method at java.net.URLClassLoader.findClass URLClassLoader.java:188 at java.lang.ClassLoader.loadClass ClassLoader.java:306 at sun.misc.Launcher$AppClassLoader.loadClass Launcher.java:268 at java.lang.ClassLoader.loadClass ClassLoader.java:251 at java.lang.ClassLoader.loadClassInternal ClassLoader.java:319 at java.lang.Class.forName0 Native Method at java.lang.Class.forName Class.java:242 at org.springframework.util.ClassUtils.forName ClassUtils.java:160 at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass AbstractBeanDefinition.java:308 at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass AbstractBeanFactory.java:853 at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType DefaultListableBeanFactory.java:176 at org.springframework.context.support.AbstractApplicationContext.getBeanNamesForType AbstractApplicationContext.java:686 at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors AbstractApplicationContext.java:397 at org.springframework.context.support.AbstractApplicationContext.refresh AbstractApplicationContext.java:330 at org.springframework.context.support.ClassPathXmlApplicationContext.&amp;lt;init&amp;gt; ClassPathXmlApplicationContext.java:92 at org.springframework.context.support.ClassPathXmlApplicationContext.&amp;lt;init&amp;gt; ClassPathXmlApplicationContext.java:77 at org.springframework.test.AbstractSpringContextTests.loadContextLocations AbstractSpringContextTests.java:130 at org.springframework.test.AbstractDependencyInjectionSpringContextTests.loadContextLocations AbstractDependencyInjectionSpringContextTests.java:238 at org.springframework.test.AbstractSpringContextTests.getContext AbstractSpringContextTests.java:110 at org.springframework.test.AbstractDependencyInjectionSpringContextTests.setUp AbstractDependencyInjectionSpringContextTests.java:194 at junit.framework.TestCase.runBare TestCase.java:125 at org.springframework.test.ConditionalTestCase.runBare ConditionalTestCase.java:69 at junit.framework.TestResult$1.protect TestResult.java:106 at junit.framework.TestResult.runProtected TestResult.java:124 at junit.framework.TestResult.run TestResult.java:109 at junit.framework.TestCase.run TestCase.java:118 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run JUnit3TestReference.java:128 at org.eclipse.jdt.internal.junit.runner.TestExecution.run TestExecution.java:38 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests RemoteTestRunner.java:460 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests RemoteTestRunner.java:673 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run RemoteTestRunner.java:386 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main RemoteTestRunner.java:196 org.aspectj.bridge.AbortException: trouble in: public class com.trivadis.aop.configurable.Address extends java.lang.Object: private com.trivadis.aop.configurable.CodeRepository codeRepository private long id private String street private String city private com.trivadis.aop.configurable.Country country public void setCodeRepository com.trivadis.aop.configurable.CodeRepository : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 14 ALOAD_1 // Lcom/trivadis/aop/configurable/CodeRepository; codeRepository PUTFIELD com.trivadis.aop.configurable.Address.codeRepository Lcom/trivadis/aop/configurable/CodeRepository; RETURN line 15 end public void setCodeRepository com.trivadis.aop.configurable.CodeRepository public String getCity : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 27 GETFIELD com.trivadis.aop.configurable.Address.city Ljava/lang/String; ARETURN end public String getCity public void setCity String : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 31 ALOAD_1 // Ljava/lang/String; city PUTFIELD com.trivadis.aop.configurable.Address.city Ljava/lang/String; RETURN line 32 end public void setCity String public com.trivadis.aop.configurable.Country getCountry : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 35 GETFIELD com.trivadis.aop.configurable.Address.country Lcom/trivadis/aop/configurable/Country; ARETURN end public com.trivadis.aop.configurable.Country getCountry public void setCountry com.trivadis.aop.configurable.Country : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 39 ALOAD_1 // Lcom/trivadis/aop/configurable/Country; country PUTFIELD com.trivadis.aop.configurable.Address.country Lcom/trivadis/aop/configurable/Country; RETURN line 40 end public void setCountry com.trivadis.aop.configurable.Country public String getStreet : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 43 GETFIELD com.trivadis.aop.configurable.Address.street Ljava/lang/String; ARETURN end public String getStreet public void setStreet String : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 47 ALOAD_1 // Ljava/lang/String; street PUTFIELD com.trivadis.aop.configurable.Address.street Ljava/lang/String; RETURN line 48 end public void setStreet String private void &amp;lt;init&amp;gt; : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 52 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V RETURN end private void &amp;lt;init&amp;gt; public static com.trivadis.aop.configurable.Address createAddress String, String : NEW com.trivadis.aop.configurable.Address line 57 DUP INVOKESPECIAL com.trivadis.aop.configurable.Address.&amp;lt;init&amp;gt; V ASTORE_2 ALOAD_2 // Lcom/trivadis/aop/configurable/Address; adr line 58 ALOAD_0 // Ljava/lang/String; street INVOKEVIRTUAL com.trivadis.aop.configurable.Address.setStreet Ljava/lang/String; V ALOAD_2 // Lcom/trivadis/aop/configurable/Address; adr line 59 ALOAD_1 // Ljava/lang/String; city INVOKEVIRTUAL com.trivadis.aop.configurable.Address.setCity Ljava/lang/String; V ALOAD_2 // Lcom/trivadis/aop/configurable/Address; adr line 60 ARETURN end public static com.trivadis.aop.configurable.Address createAddress String, String public com.trivadis.aop.configurable.Address withStreet String : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 66 ALOAD_1 // Ljava/lang/String; street INVOKEVIRTUAL com.trivadis.aop.configurable.Address.setStreet Ljava/lang/String; V ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 67 ARETURN end public com.trivadis.aop.configurable.Address withStreet String public com.trivadis.aop.configurable.Address withCity String : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 71 ALOAD_1 // Ljava/lang/String; city INVOKEVIRTUAL com.trivadis.aop.configurable.Address.setCity Ljava/lang/String; V ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 72 ARETURN end public com.trivadis.aop.configurable.Address withCity String public com.trivadis.aop.configurable.Address forCountry String : ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 76 ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this GETFIELD com.trivadis.aop.configurable.Address.codeRepository Lcom/trivadis/aop/configurable/CodeRepository; ALOAD_1 // Ljava/lang/String; code INVOKEINTERFACE com.trivadis.aop.configurable.CodeRepository.findCountryByCode Ljava/lang/String; Lcom/trivadis/aop/configurable/Country; INVOKEVIRTUAL com.trivadis.aop.configurable.Address.setCountry Lcom/trivadis/aop/configurable/Country; V ALOAD_0 // Lcom/trivadis/aop/configurable/Address; this line 77 ARETURN end public com.trivadis.aop.configurable.Address forCountry String end public class com.trivadis.aop.configurable.Address at org.aspectj.bridge.MessageWriter.handleMessage MessageWriter.java:47 at org.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHandler.handleMessage WeavingAdaptor.java:417 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1592 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1525 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1305 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1127 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:284 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:212 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:65 at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform ClassPreProcessorAgentAdapter.java:55 at sun.instrument.TransformerManager.transform TransformerManager.java:122 at sun.instrument.InstrumentationImpl.transform InstrumentationImpl.java:155 at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:620 at java.security.SecureClassLoader.defineClass SecureClassLoader.java:124 at java.net.URLClassLoader.defineClass URLClassLoader.java:260 at java.net.URLClassLoader.access$100 URLClassLoader.java:56 at java.net.URLClassLoader$1.run URLClassLoader.java:195 at java.security.AccessController.doPrivileged Native Method at java.net.URLClassLoader.findClass URLClassLoader.java:188 at java.lang.ClassLoader.loadClass ClassLoader.java:306 at sun.misc.Launcher$AppClassLoader.loadClass Launcher.java:268 at java.lang.ClassLoader.loadClass ClassLoader.java:251 at java.lang.ClassLoader.loadClassInternal ClassLoader.java:319 at java.lang.Class.forName0 Native Method at java.lang.Class.forName Class.java:242 at org.springframework.util.ClassUtils.forName ClassUtils.java:160 at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass AbstractBeanDefinition.java:308 at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass AbstractBeanFactory.java:853 at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType DefaultListableBeanFactory.java:176 at org.springframework.context.support.AbstractApplicationContext.getBeanNamesForType AbstractApplicationContext.java:686 at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors AbstractApplicationContext.java:397 at org.springframework.context.support.AbstractApplicationContext.refresh AbstractApplicationContext.java:330 at org.springframework.context.support.ClassPathXmlApplicationContext.&amp;lt;init&amp;gt; ClassPathXmlApplicationContext.java:92 at org.springframework.context.support.ClassPathXmlApplicationContext.&amp;lt;init&amp;gt; ClassPathXmlApplicationContext.java:77 at org.springframework.test.AbstractSpringContextTests.loadContextLocations AbstractSpringContextTests.java:130 at org.springframework.test.AbstractDependencyInjectionSpringContextTests.loadContextLocations AbstractDependencyInjectionSpringContextTests.java:238 at org.springframework.test.AbstractSpringContextTests.getContext AbstractSpringContextTests.java:110 at org.springframework.test.AbstractDependencyInjectionSpringContextTests.setUp AbstractDependencyInjectionSpringContextTests.java:194 at junit.framework.TestCase.runBare TestCase.java:125 at org.springframework.test.ConditionalTestCase.runBare ConditionalTestCase.java:69 at junit.framework.TestResult$1.protect TestResult.java:106 at junit.framework.TestResult.runProtected TestResult.java:124 at junit.framework.TestResult.run TestResult.java:109 at junit.framework.TestCase.run TestCase.java:118 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run JUnit3TestReference.java:128 at org.eclipse.jdt.internal.junit.runner.TestExecution.run TestExecution.java:38 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests RemoteTestRunner.java:460 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests RemoteTestRunner.java:673 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run RemoteTestRunner.java:386 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main RemoteTestRunner.java:196 info not weaving 'com/trivadis/aop/configurable/CodeRepositoryImpl' info not weaving 'com/trivadis/aop/configurable/CodeRepository' ...</description>
    <commit commitTime="2006-08-18 14:51:00" id="135173acd2c893e5bfbb420e9cccf493ba150bfe"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/util/ClassLoaderRepository.java</file>
      <file>weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegate.java</file>
      <file>weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java</file>
    </fixedFiles>
  </bug>
  <bug id="153772" reportTime="2006-08-14 11:25:00">
    <summary>Support stdout/stderr specifications for the ant compiler test step</summary>
    <description>For &amp;lt;compile&amp;gt; and &amp;lt;run&amp;gt; steps the expected output can be specified. This should be possible for &amp;lt;ant&amp;gt; as well and allow simplify forked testing. Most of the support is there is just needs to be fixed and used.</description>
    <commit commitTime="2006-08-14 15:52:16" id="0850eef4c7060de3848dfdfe90c8b6c7d3d2e75f"/>
    <fixedFiles>
      <file>testing/newsrc/org/aspectj/testing/AntSpec.java</file>
    </fixedFiles>
  </bug>
  <bug id="153845" reportTime="2006-08-14 21:28:00">
    <summary>[generics] Problem with signature for generic type</summary>
    <description>public aspect OuterAspect { private pointcut isSetter : execution void set* .. ; public static aspect InnerAspect pertarget isSetter { } } java.lang.IllegalStateException at org.aspectj.apache.bcel.classfile.GenericSignatureParser.parseFieldTypeSignature GenericSignatureParser.java:163 at org.aspectj.apache.bcel.classfile.GenericSignatureParser.parseTypeArgument GenericSignatureParser.java:253 at org.aspectj.apache.bcel.classfile.GenericSignatureParser.maybeParseTypeArguments GenericSignatureParser.java:261 at org.aspectj.apache.bcel.classfile.GenericSignatureParser.parseClassTypeSignature GenericSignatureParser.java:208 at org.aspectj.apache.bcel.classfile.GenericSignatureParser.parseAsClassSignature GenericSignatureParser.java:56 at org.aspectj.apache.bcel.classfile.Signature.asClassSignature Signature.java:315 at org.aspectj.apache.bcel.classfile.JavaClass.getGenericClassTypeSignature JavaClass.java:973 at org.aspectj.weaver.bcel.BcelObjectType.initializeFromJavaclass BcelObjectType.java:164 at org.aspectj.weaver.bcel.BcelObjectType.&amp;lt;init&amp;gt; BcelObjectType.java:131 at org.aspectj.weaver.bcel.BcelWorld.buildBcelDelegate BcelWorld.java:337 at org.aspectj.weaver.bcel.BcelWorld.addSourceObjectType BcelWorld.java:395 at org.aspectj.weaver.bcel.BcelWeaver.addIfAspect BcelWeaver.java:263 at org.aspectj.weaver.bcel.BcelWeaver.addAspectsFromDirectory BcelWeaver.java:255 at org.aspectj.weaver.bcel.BcelWeaver.addLibraryJarFile BcelWeaver.java:205 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.initBcelWorld AjBuildManager.java:698 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:223 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:199 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:170 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 IllegalStateException thrown: Expecting [,L, or T, but found Pjava while unpacking Ljava/util/AbstractSet&amp;lt;Pjava/util/Map$Entry&amp;lt;TK;TV;&amp;gt;;&amp;gt;;</description>
    <commit commitTime="2006-09-14 10:38:50" id="70ae0f8df6ec8b77ea2940b222e11d6d411ec5d2"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/ReferenceType.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="153907" reportTime="2006-08-15 10:00:00">
    <summary>Facilitate LTW testing in a custom ClassLoader hierarchy</summary>
    <description>Currently the suite allows us to test LTW with a single ClassLoader either in process or via Ant fork. In reality AspectJ LTW is used with a variety of application servers each with a more complex ClassLoader hierarchy. We need to be able to test these kinds of scenarios using XML-based JUnit testcases without resorting to something like Tomcat.</description>
    <commit commitTime="2006-08-15 15:34:56" id="3b517caf402c6d7c52d4bcbdc86c7528ab828ec9"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/AllTestsAspectJ150.java</file>
      <file>testing-client/testsrc/org/aspectj/testing/TestingTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="154332" reportTime="2006-08-18 03:49:00">
    <summary>[annotations] Incorrect handling of java.lang annotations when matching</summary>
    <description>As raised by Mr Bodkin on the list: Can anyone tell me why this compiling this program produces warnings for marker but not for deprecated in a recent dev build of AJDT ? Is this just a bug? Both have runtime retention, so I would expect equivalent behavior. @Deprecated @Marker public aspect Annot { pointcut test : within @Marker * ;// * ; declare warning: staticinitialization @Deprecated * : "deprecated"; declare warning: staticinitialization @Marker * : "marker"; public static void main String argz[] { new Baz .foo ; } } @Deprecated @Marker class Baz { public void foo {} } @Retention RetentionPolicy.RUNTIME public @interface Marker { }</description>
    <commit commitTime="2006-08-18 08:21:58" id="59123b0efba484e81625d403ca36768e149bd451"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="154427" reportTime="2006-08-19 04:04:00">
    <summary>[plan] thisJoinPoint.getSignature .getMethod returns NULL in a call join point</summary>
    <description>I have the following strange behavior. I've just prepared a small test case to show it and which I will attach. I have 2 interfaces, the first, the top defines mayPerform public interface Authorization { boolean mayPerform String user, String action ; } The second extends the first and adds public interface AuthorizationAdmin extends Authorization { boolean mayPerform2 String user, String action ; } Then there is an implementation of these 2 methods doing nothing spectacular: public class AuthorizationImpl implements AuthorizationAdmin { /* ========== interface Authorization ============*/ public boolean mayPerform String user, String action { System.out.println "executing mayPerform " ; return true; } /* ========== interface AuthorizationAdmin ============*/ public boolean mayPerform2 String user, String action { System.out.println "executing mayPerform2 " ; return true; } } Here is the aspect, which returns NULL when calling the method mayPerform .. on via a reference to AuthorizationAdmin Interface but when I call mayPerform2 .. it works fine. When I call mayPerform .. via a reference to Authorization, if also works fine. public aspect CallAndMethodSignatureAspect { pointcut callAnyPublicMethodInAuthorization : call public * Authorization+.* .. ; Object around : callAnyPublicMethodInAuthorization { MethodSignature methodSignature = MethodSignature thisJoinPoint.getSignature ; // returns NULL when calling a method defined in the top interface "Authorization" Method method = methodSignature.getMethod ; System.out.println method ; System.out.println methodSignature.toLongString ; return proceed ; } } Here is the unit test import junit.framework.TestCase; public class CallTest extends TestCase { private AuthorizationAdmin admin; private Authorization auth; public void testMayPerform { admin = new AuthorizationImpl ; boolean bool = admin.mayPerform "peter", "query" ; assertTrue bool ; } public void testMayPerform2 { admin = new AuthorizationImpl ; boolean bool = admin.mayPerform2 "peter2", "query2" ; assertTrue bool ; } public void testMayPerform3 { auth = new AuthorizationImpl ; boolean bool = auth.mayPerform "peter2", "query2" ; assertTrue bool ; } } If I switch to execution instead of call then it works as expected.</description>
    <commit commitTime="2008-12-01 19:02:43" id="5dcfe73f9b4e4bd5544aeb43adb9df05fd11885c"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc163/Ajc163Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="154552" reportTime="2006-08-21 11:30:00">
    <summary>move model tests to use a create and compare strategy</summary>
    <description>A comment in bug 141730 : "Also I'm concerned about how bloated all the tests are that verify anything to do with the structure model. If we need to do much more of this they should move to a create and compare strategy, like the weave messages tests - where we store the expected output on disk. Normally running the test creates some output and compares it with the output on disk reporting discrepancies, but the tests can also be run in a mode that regenerates the expected output." Raising this enhancement to cover this. The infrastructure has already been committed as part of comment #11 of bug 145963 , however the existing tests should be moved over to the new structure.</description>
    <commit commitTime="2006-08-22 08:20:36" id="50f8ecc4339442c7abaf4d3a9995c1434b768ef2"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>tests/src/org/aspectj/systemtest/model/ModelTests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
      <file>tests/src/org/aspectj/systemtest/model/Model5Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="155033" reportTime="2006-08-24 09:37:00">
    <summary>Use ajcore for LTW problems</summary>
    <description>Currently the dump facility is not used for LTW errors, exceptions or failures. However it would be a great way to objectively capture information about the weaver including messages, trace and environment information. It's current, pre-LTW static interface needs to be updated.</description>
    <commit commitTime="2006-11-06 13:48:34" id="2dbecd2538f135239f3d10a0349d51ac16fdc7e7"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Aj.java</file>
    </fixedFiles>
  </bug>
  <bug id="155148" reportTime="2006-08-24 20:59:00">
    <summary>jdk14 trace deadlock in oc4j</summary>
    <description>I turned on tracing for the Aj class inside of Oracle's OC4J server. In one test not always it deadlocked. It looks like the threads are each trying to lock each other's loader. Notice that one of the threads is in the toString method of the Oracle ClassLoader perhaps another reason to prefer tracing argument class names and system identity hashcodes . Here's a thread dump from Ctrl+BREAK: Found one Java-level deadlock: ============================= "WorkExecutorWorkerThread-1": waiting to lock monitor 0x003384ec object 0x05239e48, a oracle.classloader.Po licyClassLoader , which is held by "OC4J Launcher" "OC4J Launcher": waiting to lock monitor 0x0033848c object 0x0554f0e8, a oracle.classloader.Po licyClassLoader , which is held by "WorkExecutorWorkerThread-1" Java stack information for the threads listed above: =================================================== "WorkExecutorWorkerThread-1": at oracle.classloader.SearchPolicy.loadClass SearchPolicy.java:641 - waiting to lock &amp;lt;0x05239e48&amp;gt; a oracle.classloader.PolicyClassLoader at oracle.classloader.PolicyClassLoader.askParentForClass PolicyClassLoa der.java:1284 at oracle.classloader.SearchPolicy$AskParent.getClass SearchPolicy.java: 69 at oracle.classloader.SearchSequence.getClass SearchSequence.java:119 at oracle.classloader.SearchPolicy.loadClass SearchPolicy.java:642 - locked &amp;lt;0x0554f0e8&amp;gt; a oracle.classloader.PolicyClassLoader at oracle.classloader.PolicyClassLoader.askParentForClass PolicyClassLoa der.java:1284 at oracle.classloader.SearchPolicy$AskParent.getClass SearchPolicy.java: 69 at oracle.classloader.SearchSequence.getClass SearchSequence.java:119 at oracle.classloader.PolicyClassLoader.internalLoadClass PolicyClassLoa der.java:1660 - locked &amp;lt;0x056a9ed0&amp;gt; a oracle.classloader.PolicyClassLoader at oracle.classloader.PolicyClassLoader.loadClass PolicyClassLoader.java :1621 at oracle.classloader.PolicyClassLoader.loadClass PolicyClassLoader.java :1606 at java.lang.ClassLoader.loadClassInternal ClassLoader.java:319 - locked &amp;lt;0x056a9ed0&amp;gt; a oracle.classloader.PolicyClassLoader at oracle.j2ee.ra.jms.generic.WorkConsumer.doReceive WorkConsumer.java:9 87 at oracle.j2ee.ra.jms.generic.WorkConsumer.run WorkConsumer.java:215 - locked &amp;lt;0x05de2718&amp;gt; a oracle.j2ee.ra.jms.generic.WorkConsumer at oracle.j2ee.connector.work.WorkWrapper.runTargetWork WorkWrapper.java :242 at oracle.j2ee.connector.work.WorkWrapper.doWork WorkWrapper.java:215 at oracle.j2ee.connector.work.WorkWrapper.run WorkWrapper.java:190 at EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run PooledExec utor.java:814 at java.lang.Thread.run Thread.java:595 "OC4J Launcher": at oracle.classloader.PolicyClassLoader.toString PolicyClassLoader.java: 1846 - waiting to lock &amp;lt;0x0554f0e8&amp;gt; a oracle.classloader.PolicyClassLoader at java.text.MessageFormat.subformat MessageFormat.java:1237 at java.text.MessageFormat.format MessageFormat.java:828 at java.text.Format.format Format.java:133 at java.text.MessageFormat.format MessageFormat.java:804 at java.util.logging.Formatter.formatMessage Formatter.java:130 - locked &amp;lt;0x0514e920&amp;gt; a java.util.logging.SimpleFormatter at java.util.logging.SimpleFormatter.format SimpleFormatter.java:63 - locked &amp;lt;0x0514e920&amp;gt; a java.util.logging.SimpleFormatter at java.util.logging.StreamHandler.publish StreamHandler.java:179 - locked &amp;lt;0x0514a0a8&amp;gt; a java.util.logging.FileHandler at java.util.logging.FileHandler.publish FileHandler.java:555 - locked &amp;lt;0x0514a0a8&amp;gt; a java.util.logging.FileHandler at java.util.logging.Logger.log Logger.java:428 at java.util.logging.Logger.doLog Logger.java:450 at java.util.logging.Logger.logp Logger.java:619 at java.util.logging.Logger.entering Logger.java:870 at org.aspectj.weaver.tools.Jdk14Trace.enter Jdk14Trace.java:32 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:67 at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform C lassPreProcessorAgentAdapter.java:55 at sun.instrument.TransformerManager.transform TransformerManager.java:1 22 at sun.instrument.InstrumentationImpl.transform InstrumentationImpl.java :155 at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:620 at oracle.classloader.PolicyClassLoader.defineClass PolicyClassLoader.ja va:2224 at oracle.classloader.PolicyClassLoader.findLocalClass PolicyClassLoader .java:1457 at oracle.classloader.SearchPolicy$FindLocal.getClass SearchPolicy.java: 167 at oracle.classloader.SearchSequence.getClass SearchSequence.java:119 at oracle.classloader.PolicyClassLoader.internalLoadClass PolicyClassLoa der.java:1660 - locked &amp;lt;0x05239e48&amp;gt; a oracle.classloader.PolicyClassLoader at oracle.classloader.PolicyClassLoader.loadClass PolicyClassLoader.java :1621 at oracle.classloader.PolicyClassLoader.loadClass PolicyClassLoader.java :1606 at java.lang.ClassLoader.loadClassInternal ClassLoader.java:319 - locked &amp;lt;0x05239e48&amp;gt; a oracle.classloader.PolicyClassLoader at com.evermind.server.http.HttpRequestHandler.&amp;lt;init&amp;gt; HttpRequestHandler .java:97 at com.evermind.server.http.HttpConnectionListener$HttpNIOAcceptHandler. getReadHandler HttpConnectionListener.java:116 at oracle.oc4j.network.ReadHandlerPool.getContextFromBackend ReadHandler Pool.java:63 at com.evermind.util.BBPool.startPool BBPool.java:42 at oracle.oc4j.network.ReadHandlerPool.register ReadHandlerPool.java:25 - locked &amp;lt;0x05ec9290&amp;gt; a java.util.ArrayList at oracle.oc4j.network.ServerSocketAcceptHandler.setPoolOptions ServerSo cketAcceptHandler.java:140 at com.evermind.server.http.HttpConnectionListener.setRequestHandlerPool HttpConnectionListener.java:232 at com.evermind.server.http.HttpConnectionListener.initHandlers HttpConn ectionListener.java:226 at com.evermind.server.http.HttpConnectionListener.&amp;lt;init&amp;gt; HttpConnection Listener.java:174 at com.evermind.server.http.HttpServer.getListener HttpServer.java:481 - locked &amp;lt;0x05ec4f88&amp;gt; a com.evermind.server.http.HttpServer at com.evermind.server.http.HttpServer.setSites HttpServer.java:267 - locked &amp;lt;0x05ec4f88&amp;gt; a com.evermind.server.http.HttpServer at com.evermind.server.http.HttpServer.setConfig HttpServer.java:180 at com.evermind.server.ApplicationServer.initializeHttp ApplicationServe r.java:2296 at com.evermind.server.ApplicationServer.setConfig ApplicationServer.jav a:944 at com.evermind.server.ApplicationServerLauncher.run ApplicationServerLa uncher.java:113 - locked &amp;lt;0x0530eb20&amp;gt; a java.lang.Object at java.lang.Thread.run Thread.java:595 Found 1 deadlock.</description>
    <commit commitTime="2006-08-25 14:37:34" id="6be70973a704548a42e396e996c9d49915b92a64"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/DefaultWeavingContext.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/AbstractTraceTest.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/AbstractTrace.java</file>
      <file>weaver5/java5-src/org/aspectj/weaver/tools/Jdk14Trace.java</file>
    </fixedFiles>
  </bug>
  <bug id="155213" reportTime="2006-08-25 08:34:00">
    <summary>[ltw] can get into a state with the Version static initializer</summary>
    <description>The static initializer in Version that parses the time_text string and turns it into a long field seems to sometimes get loadtime weaving into a state - touching DateFormatters early on is always a pain, so I'm moving it to be processed on first reference. I could take it a step further ... if WeaverStateInfo didn't write out the time it doesnt read it back in!! it would never be used at all in normal processing - potentially saving us from loading a bunch of underpinning junk to do the formatting...</description>
    <commit commitTime="2006-08-25 12:41:38" id="40cf61076994bf2dd6f0397b1bd0287ed546a75b"/>
    <fixedFiles>
      <file>ajde/src/org/aspectj/ajde/ui/swing/OptionsFrame.java</file>
      <file>bridge/testsrc/org/aspectj/bridge/VersionTest.java</file>
      <file>bridge/src/org/aspectj/bridge/Version.java</file>
      <file>weaver/src/org/aspectj/weaver/AjAttribute.java</file>
    </fixedFiles>
  </bug>
  <bug id="155238" reportTime="2006-08-25 11:46:00">
    <summary>Trace should use System.identityHashCode, not hashCode</summary>
    <description>The tracing module uses obj.hashCode to identify untrusted objects when formatting. I think it would be a little safer and more accurate to use System.identityHashCode obj . This way the tracing code wouldn't call any application-defined code, and would give a value that can't change if the loader state changes.</description>
    <commit commitTime="2006-08-30 09:46:37" id="14e8b7d8f0c94d316665036c3968821f8874678e"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/DefaultWeavingContext.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/AbstractTrace.java</file>
    </fixedFiles>
  </bug>
  <bug id="155347" reportTime="2006-08-27 18:46:00">
    <summary>NPE during compilation of class file with pointcuts</summary>
    <description>I commented out a static nested aspect inside a class to let me do a rename refactoring in Eclipse. This results in the following exception, which even a full rebuild won't fix. The class does have pointcut definitions inside of it. Commenting those out avoids the problem though it caused other syntax errors... java.lang.ArrayIndexOutOfBoundsException at org.aspectj.weaver.patterns.IfPointcut.findResidueInternal IfPointcut.java:186 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java:269 at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal AndPointcut.java:93 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java:269 at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal AndPointcut.java:93 at or ... ses when weaving when batch building BuildConfig[C:\devel\glassbox\.metadata\.plugins\org.eclipse.ajdt.core\glassboxAgent.generated.lst] #Files=210</description>
    <commit commitTime="2008-06-10 20:48:36" id="248962b92ffa409d11122d2504e84567c7c34354"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/IfPointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="155763" reportTime="2006-08-31 02:26:00">
    <summary>[3.2compiler] NPE due to asking for instruction position which doesn't exist</summary>
    <description>Hi, I work with eclipse since many years and I decided to convert my project into AspectJ formalism. It is not possible to build my project due to following encountered error. The only aspect I introduced in my project if the following one: ****************************************************** package juzzle.model.machine; import juzzle.Tool; public aspect AnnModelExecutable { //-Each time a machine i going to be executed pointcut modelExecution :call protected void juzzle.model.machine.JzlEngineMachine.executeOnly ; //-Trace before : modelExecution { Tool.trace "ASPECT avant execution!" ; } } ****************************************************** The error... ****************************************************** java.lang.NullPointerException at org.aspectj.apache.bcel.generic.MethodGen.&amp;lt;init&amp;gt; MethodGen.java:278 at org.aspectj.weaver.bcel.LazyMethodGen.initialize LazyMethodGen.java:294 at org.aspectj.weaver.bcel.LazyMethodGen.markAsChanged LazyMethodGen.java:501 at org.aspectj.weaver.bcel.LazyMethodGen.getBody LazyMethodGen.java:899 at org.aspectj.weaver.bcel.BcelShadow.makeShadowForMethod BcelShadow.java:730 at org.aspectj.weaver.bcel.BcelShadow.makeMethodExecution BcelShadow.java:722 at org.aspectj.weaver.bcel.BcelShadow.makeMethodExecution BcelShadow.java:693 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2304 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:490 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:115 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1574 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1525 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1305 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1127 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:321 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:192 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:887 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:244 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:163 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 trouble in: juzzle.space.JzlServiceNewFile when weaving type juzzle.space.JzlServiceNewFile when weaving classes when weaving when batch building BuildConfig[E:\juzzle\eclipse\workspace\.metadata\.plugins\org.eclipse.ajdt.core\juzzle.generated.lst] #Files=908</description>
    <commit commitTime="2006-09-11 16:59:56" id="018b33eab8e607e54b65752cc65a25b66e1a0e91"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="155972" reportTime="2006-09-01 08:45:00">
    <summary>NullPointerException in ConstructorSignature.getConstructor</summary>
    <description>AspectJ version: 1.5.3.200608290814 When advising a constructor, we can do the following to obtain the constructor as a java.lang.reflect.Member: Member cons = ConstructorSignature thisJoinPointStaticPart .getSignature .getConstructor ; however that sometimes fails, and returns null.</description>
    <commit commitTime="2006-09-04 14:24:51" id="090de7e4c5c9618f965259f93de6d490050543da"/>
    <fixedFiles>
      <file>runtime/src/org/aspectj/runtime/reflect/FieldSignatureImpl.java</file>
      <file>runtime/src/org/aspectj/runtime/reflect/InitializerSignatureImpl.java</file>
      <file>runtime/src/org/aspectj/runtime/reflect/ConstructorSignatureImpl.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="156058" reportTime="2006-09-03 10:16:00">
    <summary>[generics] Reference to pointcut defined in generic aspect, within generic interface</summary>
    <description>I had the latest release version of the AspectJ compiler, 1.5.2RC1 and I had the following problem. I even tried the latest AspectJ compiler version: 1.4.1.200609011748 for Eclipse 3.2 and I still found this strange behaviour while using aspects within interfaces, when those interfaces get generics. For example: public interface MyInterface1&amp;lt;T&amp;gt; { public abstract static aspect MyAspect1&amp;lt;T&amp;gt; { public void foo { System.out.println "Fooooooo" ; } public final pointcut myPointcutInInterface : call * *..*.* .. ; } } public aspect MyAspect implements MyInterface1&amp;lt;MyClass&amp;gt; { before : MyAspect1&amp;lt;MyClass&amp;gt;.myPointcutInInterface &amp;amp;&amp;amp; !within MyAspect&amp;lt;MyClass&amp;gt; { System.out.println "Before executing!" ; } } Results in an exception thrown by the AspectJ compiler: java.lang.IllegalStateException at org.aspectj.weaver.TypeFactory.createParameterizedType TypeFactory.java:42 at org.aspectj.weaver.patterns.WildTypePattern.resolveParameterizedType WildTypePattern.java:790 at org.aspectj.weaver.patterns.WildTypePattern.resolveBindingsForExactType WildTypePattern.java:732 at org.aspectj.weaver.patterns.WildTypePattern.resolveBindingsFromFullyQualifiedTypeName WildTypePattern.java:699 at org.aspectj.weaver.patterns.WildTypePattern.resolveBindings WildTypePattern.java:623 at org.aspectj.weaver.patterns.TypePattern.resolveExactType TypePattern.java:190 at org.aspectj.weaver.patterns.ReferencePointcut.resolveBindings ReferencePointcut.java:130 at org.aspectj.weaver.patterns.AndPointcut.resolveBindings AndPointcut.java:74 at org.aspectj.weaver.patterns.Pointcut.resolve Pointcut.java:196 at org.aspectj.ajdt.internal.compiler.ast.PointcutDesignator.finishResolveTypes PointcutDesignator.java:84 at org.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration.resolveStatements AdviceDeclaration.java:119 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve AbstractMethodDeclaration.java:400 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1088 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.resolve AspectDeclaration.java:116 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1137 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve CompilationUnitDeclaration.java:305 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:519 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:887 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:271 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:170 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 IllegalStateException thrown: Expecting raw type Without the generics, the program works just fine. I don't understand what is the problem. Can anyone help me, please? Thanks in advance. Best regards, Paulo Zenida</description>
    <commit commitTime="2006-09-13 13:06:38" id="9892449cd6366540f650b45f548f8cc74f6fcae2"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="156904" reportTime="2006-09-11 13:39:00">
    <summary>Incorrect warning when advising a private method of a private inner class</summary>
    <description>The Eclipse AJDT give an incorrect warning when you want to advise a private method of a private inner class. When I want to advise a private method in a private inner class, like this public class Outer { private class Inner { private void myMethod } } Using the following poincut: poincut innerpointcut :execution * Outer.Inner.myMethod ; and advice: before :innerpointcut { System.out.println "executing!" ; } I get a warning "invalidAbsoluteTypeName" next to my pointcut, but next to the advice, there is a marker that points to the private method.</description>
    <commit commitTime="2006-10-03 15:00:34" id="782ade25e6d68caf361f51a1e040edbd6855842b"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="157057" reportTime="2006-09-12 12:01:00">
    <summary>Pointcut not matching Annotated static field</summary>
    <description>Advice on the following pointcut doesn't reliably match in a project I am working on. get @Obtain static * * ; Frustratingly small changes will "fix" this: moving a matching class from tests to src, cutting out chunks of generics code to shrink the sample, ... Because of how sensitive this bug is I've been unable to produce a standalone example so I've only got a reference to the actual project. The environment I'm using is: * Eclipse 3.2 * ADJT 1.4.1.200609121012 * Subclipse for Subversion access from http://subclipse.tigris.org/update_1.0.x The project in question can be checked out from: http://svn.sourceforge.net/svnroot/dash-framework/dash-obtain/branches/ajdt-bug I've removed most of the jars so that checkout is small. The compiler settings make "advice did not match" an error so the failure in src/dash/obtain/aspects/ObtainStaticAspect.aj should be easy to see. The two test files that should match here are tests/dash/obtain/ObtainStaticTests.java tests/dash/obtain/ObtainStaticTestClass.java Running the "Dash-Obtain-Tests" launcher even with the compile error will fail on that test.</description>
    <commit commitTime="2006-09-14 14:52:25" id="563711fb8fd867a89b0ffb18d68105ee35a34625"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjPipeliningCompilerAdapter.java</file>
    </fixedFiles>
  </bug>
  <bug id="157474" reportTime="2006-09-15 10:13:00">
    <summary>Handle duplicate aop.xml definitions more gracefully</summary>
    <description>You _may_ declare the same aspect or other configuration multiple times within the same aop.xml file or in several different files visible to a particular weaver: their contents are conceptually merged http://www.eclipse.org/aspectj/doc/released/devguide/ltw-configuration.html#configuring-load-time-weaving-with-aopxml-files . However you may _not_ define the same concrete aspect more than once: this results in an error and WeavingAdaptor initialization is aborted. Unfortunately this may occur if two or more class loaders have overlapping classpaths. In this case we should determine that the configuration files are identical - they have the same URL - and ignore duplicates while issuing a warning.</description>
    <commit commitTime="2006-09-19 14:58:33" id="a40594edf71956e8e7b1d3229a335ce3892ba4a6"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="158205" reportTime="2006-09-21 15:25:00">
    <summary>NullPointerException when weaving with bootstrap agent</summary>
    <description>We are using an updated version of Alex Vasseur's LTW agent for AspectJ based on AspectWerkz to do load-time weaving on a 1.4 VM. The agent is loaded from the bootstrap loader. However, a user has reported this NPE see http://www.glassbox.com/forum/forum/viewthread?thread=67 . AspectWerkz - INFO - Pre-processor org.aspectj.ext.ltw13.ClassPreProcessorAdapter loaded and initialized [AppClassLoader@7b7072] warning parse definitions failed -- NullPointerException null null java.lang.NullPointerException at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.parseDefinitions ClassLoaderWeavingAdaptor.java:180 at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.initialize ClassLoaderWeavingAdaptor.java:127 ... In this case, the code is assuming that ClassLoader.getSystemClassLoader is already set, but when the weaver is loaded through the bootstrap loader that appears to not be a good assumption. I propose to avoid this problem by testing for the system loader like this, so as to enable 3rd party agents that might run before the system loader is set: if loader!=null &amp;amp;&amp;amp; loader.equals ClassLoader.getSystemClassLoader { I will be providing our user a patched version of AspectJ to test with this change to see if it does fix the problem.</description>
    <commit commitTime="2006-10-02 09:58:14" id="71273ed2cedc34faf0f154c8b74c7f65093553b6"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="158412" reportTime="2006-09-23 05:11:00">
    <summary>@Pointcut in declare error results in NPE</summary>
    <description>I am trying to use an @AspectJ @Pointcut in a "normal" AspectJ declare error expression. That results in the following exception. java.lang.NullPointerException at org.aspectj.weaver.patterns.ReferencePointcut.concretize1 ReferencePointcut.java:361 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:233 at org.aspectj.weaver.patterns.NotPointcut.concretize1 NotPointcut.java:100 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:233 at org.aspectj.weaver.patterns.AndPointcut.concretize1 AndPointcut.java:97 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:233 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:220 at org.aspectj.weaver.Checker.concretize Checker.java:45 at org.aspectj.weaver.CrosscuttingMembers.addShadowMunger CrosscuttingMembers.java:91 at org.aspectj.weaver.CrosscuttingMembers.addDeclare CrosscuttingMembers.java:122 at org.aspectj.weaver.CrosscuttingMembers.addDeclares CrosscuttingMembers.java:113 at org.aspectj.weaver.CrosscuttingMembersSet.addAdviceLikeDeclares CrosscuttingMembersSet.java:117 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addAdviceLikeDeclares AjLookupEnvironment.java:382 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:245 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:301 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:315 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:887 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:244 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:199 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:170 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 NullPointerException thrown: null</description>
    <commit commitTime="2006-09-25 13:51:40" id="e56a69a32149724c51daf0b52958607e5cc46eb4"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="158573" reportTime="2006-09-25 11:09:00">
    <summary>changing value of variable in aspect results in adviceDidNotMatch warning</summary>
    <description>Given the following: public aspect A { public static int i = 0; before : execution * *.* .. {} } public class C { public void m {} } Changing the value of i to be something else and then saving results in an incremental build and an "adviceDidNotMatch" warning. A full build clears the warning. This is since the JDTLikeHandleProvider bug 141730 was made the default in AJDT and is down to the call on line 90 of CrosscuttingMembersSet which is the fix for bug 134541 . The reason we now hit this is that the JDTLikeHandleProvider doesn't depend on location.</description>
    <commit commitTime="2006-09-29 14:21:57" id="cd9fd1147b63c7a0df0c93307feae4dce7b19d4d"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
      <file>weaver/src/org/aspectj/weaver/CrosscuttingMembers.java</file>
    </fixedFiles>
  </bug>
  <bug id="158624" reportTime="2006-09-25 14:18:00">
    <summary>Compiler Error: generics and arrays</summary>
    <description>OK, not sure what to report here or what info you need, but here's the set up, message, and erroreous class. I don't understand the errors from the compiler enough to parse down the erroneous file to something that contains only the bug, but I could if direction were given. Here's my set up: Eclipse SDK Version: 3.2.0 Build id: M20060629-1905 With AJDT: Eclipse AspectJ Development Tools Version: 1.4.1.200608141223 AspectJ version: 1.5.3.200608210848 Here's the bug dump from the compiler inside Eclipse: java.lang.UnsupportedOperationException at org.aspectj.weaver.UnresolvedType.parameterize UnresolvedType.java:221 at org.aspectj.weaver.ResolvedMemberImpl.parameterize ResolvedMemberImpl.java:680 at org.aspectj.weaver.ResolvedMemberImpl.parameterize ResolvedMemberImpl.java:690 at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith ResolvedMemberImpl.java:643 at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith ResolvedMemberImpl.java:597 at org.aspectj.weaver.ReferenceType.getDeclaredMethods ReferenceType.java:508 at org.aspectj.weaver.ResolvedType$4.get ResolvedType.java:226 at org.aspectj.weaver.Iterators$3$1.hasNext Iterators.java:118 at org.aspectj.weaver.Iterators$5.hasNext Iterators.java:171 at org.aspectj.weaver.Iterators$3.hasNext Iterators.java:128 at org.aspectj.weaver.ResolvedType.lookupMember ResolvedType.java:346 at org.aspectj.weaver.ResolvedType.lookupMethod ResolvedType.java:327 at org.aspectj.weaver.World.resolve World.java:523 at org.aspectj.weaver.MemberImpl.resolve MemberImpl.java:93 at org.aspectj.weaver.JoinPointSignatureIterator.addSignaturesUpToFirstDefiningMember JoinPointSignatureIterator.java:109 at org.aspectj.weaver.JoinPointSignatureIterator.&amp;lt;init&amp;gt; JoinPointSignatureIterator.java:51 at org.aspectj.weaver.MemberImpl.getJoinPointSignatures MemberImpl.java:943 at org.aspectj.weaver.patterns.SignaturePattern.matches SignaturePattern.java:286 at org.aspectj.weaver.patterns.KindedPointcut.matchInternal KindedPointcut.java:106 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:51 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.ShadowMunger.match ShadowMunger.java:75 at org.aspectj.weaver.Advice.match Advice.java:112 at org.aspectj.weaver.bcel.BcelAdvice.match BcelAdvice.java:117 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2806 at org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction BcelClassWeaver.java:2768 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2506 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2332 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:494 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:119 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1606 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1557 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1335 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1155 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:455 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving AjPipeliningCompilerAdapter.java:392 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:380 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:98 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:533 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:892 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:246 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:165 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 trouble in: public class com.wec.lib.util.test.SyncValueTest extends junit.framework.TestCase: private com.wec.lib.util.test.SyncValueTest$SyncInteger a private com.wec.lib.util.test.SyncValueTest$SyncInteger b private com.wec.lib.util.test.SyncValueTest$SyncInteger c private com.wec.lib.util.test.SyncValueTest$SyncInteger d private com.wec.lib.util.test.SyncValueTest$SyncInteger e public void &amp;lt;init&amp;gt; : ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this line 17 INVOKESPECIAL junit.framework.TestCase.&amp;lt;init&amp;gt; V constructor-execution void com.wec.lib.util.test.SyncValueTest.&amp;lt;init&amp;gt; | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this line 27 | NEW com.wec.lib.util.test.SyncValueTest$SyncInteger | DUP | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | ICONST_1 | INVOKESPECIAL com.wec.lib.util.test.SyncValueTest$SyncInteger.&amp;lt;init&amp;gt; Lcom/wec/lib/util/test/SyncValueTest;I V | PUTFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this line 28 | NEW com.wec.lib.util.test.SyncValueTest$SyncInteger | DUP | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | ICONST_2 | INVOKESPECIAL com.wec.lib.util.test.SyncValueTest$SyncInteger.&amp;lt;init&amp;gt; Lcom/wec/lib/util/test/SyncValueTest;I V | PUTFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this line 29 | NEW com.wec.lib.util.test.SyncValueTest$SyncInteger | DUP | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | ICONST_3 | INVOKESPECIAL com.wec.lib.util.test.SyncValueTest$SyncInteger.&amp;lt;init&amp;gt; Lcom/wec/lib/util/test/SyncValueTest;I V | PUTFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this line 30 | NEW com.wec.lib.util.test.SyncValueTest$SyncInteger | DUP | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | ICONST_4 | INVOKESPECIAL com.wec.lib.util.test.SyncValueTest$SyncInteger.&amp;lt;init&amp;gt; Lcom/wec/lib/util/test/SyncValueTest;I V | PUTFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this line 31 | NEW com.wec.lib.util.test.SyncValueTest$SyncInteger | DUP | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | ICONST_5 | INVOKESPECIAL com.wec.lib.util.test.SyncValueTest$SyncInteger.&amp;lt;init&amp;gt; Lcom/wec/lib/util/test/SyncValueTest;I V | PUTFIELD com.wec.lib.util.test.SyncValueTest.e Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | RETURN line 17 constructor-execution void com.wec.lib.util.test.SyncValueTest.&amp;lt;init&amp;gt; end public void &amp;lt;init&amp;gt; public void testSyncValueGroup org.aspectj.weaver.MethodDeclarationLineNumber: 39:1035 : method-execution void com.wec.lib.util.test.SyncValueTest.testSyncValueGroup | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this line 42 | GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ICONST_1 | ANEWARRAY com.wec.lib.util.SyncValueGroup | DUP | ICONST_0 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | AASTORE | method-call void com.wec.lib.util.test.SyncValueTest$SyncInteger.link com.wec.lib.util.SyncValueGroup[] | | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.link [Lcom/wec/lib/util/SyncValueGroup; V | method-call void com.wec.lib.util.test.SyncValueTest$SyncInteger.link com.wec.lib.util.SyncValueGroup[] | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this line 43 | GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | IF_ACMPNE L0 | ICONST_1 | GOTO L1 | L0: ICONST_0 | L1: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue Z V | ICONST_1 line 44 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | CHECKCAST java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue I | IF_ICMPNE L2 | ICONST_1 | GOTO L3 | L2: ICONST_0 | L3: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue Z V | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this line 45 | GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ICONST_2 | INVOKESTATIC java.lang.Integer.valueOf I Ljava/lang/Integer; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue Ljava/lang/Object; V | ICONST_2 line 46 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | CHECKCAST java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue I | IF_ICMPNE L4 | ICONST_1 | GOTO L5 | L4: ICONST_0 | L5: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue Z V | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this line 47 | GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ICONST_1 | ANEWARRAY com.wec.lib.util.SyncValueGroup | DUP | ICONST_0 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | AASTORE | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.link [Lcom/wec/lib/util/SyncValueGroup; V | ICONST_2 line 48 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | CHECKCAST java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue I | IF_ICMPNE L6 | ICONST_1 | GOTO L7 | L6: ICONST_0 | L7: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue Z V | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this line 49 | GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ICONST_3 | INVOKESTATIC java.lang.Integer.valueOf I Ljava/lang/Integer; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue Ljava/lang/Object; V | ICONST_3 line 50 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | CHECKCAST java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue I | IF_ICMPNE L8 | ICONST_1 | GOTO L9 | L8: ICONST_0 | L9: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue Z V | ICONST_3 line 51 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | CHECKCAST java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue I | IF_ICMPNE L10 | ICONST_1 | GOTO L11 | L10: ICONST_0 | L11: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue Z V | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this line 52 | GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ICONST_4 | INVOKESTATIC java.lang.Integer.valueOf I Ljava/lang/Integer; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue Ljava/lang/Object; V | ICONST_4 line 53 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | CHECKCAST java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue I | IF_ICMPNE L12 | ICONST_1 | GOTO L13 | L12: ICONST_0 | L13: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue Z V | ICONST_4 line 54 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | CHECKCAST java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue I | IF_ICMPNE L14 | ICONST_1 | GOTO L15 | L14: ICONST_0 | L15: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue Z V | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this line 55 | GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ICONST_1 | INVOKESTATIC java.lang.Integer.valueOf I Ljava/lang/Integer; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue Ljava/lang/Object; V | ICONST_1 line 56 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | CHECKCAST java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue I | IF_ICMPNE L16 | ICONST_1 | GOTO L17 | L16: ICONST_0 | L17: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue Z V | ICONST_1 line 57 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | CHECKCAST java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue I | IF_ICMPNE L18 | ICONST_1 | GOTO L19 | L18: ICONST_0 | L19: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue Z V | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this line 59 | GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ICONST_1 | ANEWARRAY com.wec.lib.util.SyncValueGroup | DUP | ICONST_0 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.e Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | AASTORE | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.link [Lcom/wec/lib/util/SyncValueGroup; V | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this line 60 | GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.e Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | IF_ACMPNE L20 | ICONST_1 | GOTO L21 | L20: ICONST_0 | L21: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue Z V | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this line 63 | GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ICONST_1 | ANEWARRAY com.wec.lib.util.SyncValueGroup | DUP | ICONST_0 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | AASTORE | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.link [Lcom/wec/lib/util/SyncValueGroup; V | ICONST_1 line 64 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | CHECKCAST java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue I | IF_ICMPNE L22 | ICONST_1 | GOTO L23 | L22: ICONST_0 | L23: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue Z V | ICONST_1 line 65 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.e Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | CHECKCAST java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue I | IF_ICMPNE L24 | ICONST_1 | GOTO L25 | L24: ICONST_0 | L25: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue Z V | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this line 66 | GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | BIPUSH 8 | INVOKESTATIC java.lang.Integer.valueOf I Ljava/lang/Integer; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue Ljava/lang/Object; V | BIPUSH 8 line 67 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | CHECKCAST java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue I | IF_ICMPNE L26 | ICONST_1 | GOTO L27 | L26: ICONST_0 | L27: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue Z V | BIPUSH 8 line 68 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | CHECKCAST java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue I | IF_ICMPNE L28 | ICONST_1 | GOTO L29 | L28: ICONST_0 | L29: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue Z V | BIPUSH 8 line 69 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | CHECKCAST java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue I | IF_ICMPNE L30 | ICONST_1 | GOTO L31 | L30: ICONST_0 | L31: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue Z V | BIPUSH 8 line 70 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | CHECKCAST java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue I | IF_ICMPNE L32 | ICONST_1 | GOTO L33 | L32: ICONST_0 | L33: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue Z V | BIPUSH 8 line 71 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.e Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | CHECKCAST java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue I | IF_ICMPNE L34 | ICONST_1 | GOTO L35 | L34: ICONST_0 | L35: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue Z V | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this line 74 | GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.unlink V | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this line 75 | GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ICONST_3 | INVOKESTATIC java.lang.Integer.valueOf I Ljava/lang/Integer; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue Ljava/lang/Object; V | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this line 76 | GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ICONST_2 | INVOKESTATIC java.lang.Integer.valueOf I Ljava/lang/Integer; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue Ljava/lang/Object; V | ICONST_2 line 77 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | CHECKCAST java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue I | IF_ICMPNE L36 | ICONST_1 | GOTO L37 | L36: ICONST_0 | L37: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue Z V | ICONST_2 line 78 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | CHECKCAST java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue I | IF_ICMPNE L38 | ICONST_1 | GOTO L39 | L38: ICONST_0 | L39: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue Z V | ICONST_3 line 79 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | CHECKCAST java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue I | IF_ICMPNE L40 | ICONST_1 | GOTO L41 | L40: ICONST_0 | L41: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue Z V | ICONST_2 line 80 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | CHECKCAST java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue I | IF_ICMPNE L42 | ICONST_1 | GOTO L43 | L42: ICONST_0 | L43: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue Z V | ICONST_2 line 81 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.e Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | CHECKCAST java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue I | IF_ICMPNE L44 | ICONST_1 | GOTO L45 | L44: ICONST_0 | L45: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue Z V | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this line 82 | GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.unlink V | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this line 83 | GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ICONST_1 | ANEWARRAY com.wec.lib.util.SyncValueGroup | DUP | ICONST_0 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | AASTORE | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.link [Lcom/wec/lib/util/SyncValueGroup; V | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this line 84 | GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ICONST_1 | INVOKESTATIC java.lang.Integer.valueOf I Ljava/lang/Integer; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue Ljava/lang/Object; V | ICONST_1 line 85 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | CHECKCAST java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue I | IF_ICMPNE L46 | ICONST_1 | GOTO L47 | L46: ICONST_0 | L47: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue Z V | ICONST_1 line 86 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | CHECKCAST java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue I | IF_ICMPNE L48 | ICONST_1 | GOTO L49 | L48: ICONST_0 | L49: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue Z V | ICONST_3 line 87 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | CHECKCAST java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue I | IF_ICMPNE L50 | ICONST_1 | GOTO L51 | L50: ICONST_0 | L51: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue Z V | ICONST_3 line 88 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | CHECKCAST java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue I | IF_ICMPNE L52 | ICONST_1 | GOTO L53 | L52: ICONST_0 | L53: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue Z V | ICONST_1 line 89 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.e Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue Ljava/lang/Object; | CHECKCAST java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue I | IF_ICMPNE L54 | ICONST_1 | GOTO L55 | L54: ICONST_0 | L55: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue Z V | RETURN line 90 method-execution void com.wec.lib.util.test.SyncValueTest.testSyncValueGroup end public void testSyncValueGroup end public class com.wec.lib.util.test.SyncValueTest when weaving classes when weaving when batch building BuildConfig[D:\workspace\.metadata\.plugins\org.eclipse.ajdt.core\ANSER2.generated.lst] #Files=365 Here's the class: package com.wec.lib.util.test; import static com.wec.ide.Constants.UNCHECKED; import junit.framework.TestCase; import org.junit.Test; import com.wec.lib.util.SyncValueGroup; import com.wec.scrum.Tests; /** * This class tests the SyncValueGroup utility class. */ @Tests classes = { SyncValueGroup.class } @SuppressWarnings "nls" public class SyncValueTest extends TestCase { class SyncInteger extends SyncValueGroup&amp;lt;Integer&amp;gt; { public SyncInteger int val { super new Integer val ; } public void valueChanged { } } private SyncInteger a = new SyncInteger 1 ; private SyncInteger b = new SyncInteger 2 ; private SyncInteger c = new SyncInteger 3 ; private SyncInteger d = new SyncInteger 4 ; private SyncInteger e = new SyncInteger 5 ; /** * Ensures that SyncValueGroup replicates values and * calls valueChange. */ @SuppressWarnings UNCHECKED @Test public void testSyncValueGroup { // Link tests a.link b ; assertTrue a.getValue == b.getValue ; assertTrue 1 == b.getValue ; b.setValue 2 ; assertTrue 2 == a.getValue ; b.link c ; assertTrue 2 == c.getValue ; c.setValue 3 ; assertTrue 3 == a.getValue ; assertTrue 3 == b.getValue ; a.setValue 4 ; assertTrue 4 == c.getValue ; assertTrue 4 == b.getValue ; b.setValue 1 ; assertTrue 1 == c.getValue ; assertTrue 1 == a.getValue ; d.link e ; assertTrue d.getValue == e.getValue ; // Join loops b.link d ; assertTrue 1 == d.getValue ; assertTrue 1 == e.getValue ; d.setValue 8 ; assertTrue 8 == a.getValue ; assertTrue 8 == b.getValue ; assertTrue 8 == c.getValue ; assertTrue 8 == d.getValue ; assertTrue 8 == e.getValue ; // Unlink tests c.unlink ; c.setValue 3 ; b.setValue 2 ; assertTrue 2 == a.getValue ; assertTrue 2 == b.getValue ; assertTrue 3 == c.getValue ; assertTrue 2 == d.getValue ; assertTrue 2 == e.getValue ; d.unlink ; c.link d ; a.setValue 1 ; assertTrue 1 == a.getValue ; assertTrue 1 == b.getValue ; assertTrue 3 == c.getValue ; assertTrue 3 == d.getValue ; assertTrue 1 == e.getValue ; } }</description>
    <commit commitTime="2006-09-29 12:20:31" id="ea4ff8adad2347557c25d6e10e114132b7491870"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="159143" reportTime="2006-09-28 12:47:00">
    <summary>subtype pattern not working for declare annotation on method</summary>
    <description>Using AspectJ 1.5.3.200609271036, when declaring an annotation on a method, get unexpected error when using subtype wildcard for the declaring type. E.g., declare @method : void Foo+.foo : @MethodAnnotation; Error text: "The method 'void Foo+.foo ' does not exist"</description>
    <commit commitTime="2006-10-04 07:27:44" id="513564a9e5b5ae5d03c4f0547ee7823e903d3c52"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="159268" reportTime="2006-09-29 08:30:00">
    <summary>[parsing]Problems accessing before[] , after[] arrays</summary>
    <description>Accessing arrays named "before" or "after" possibly other AspectJ keywords affected as well causes problems. Example: Object[] before; before = new Object[10]; before[0].toString ; // Eclipse: Syntax error on token "before", invalid Expression before.toString ; // works fine AJDT Version: 1.4.0 Build id: 20060629124300 AspectJ version: 1.5.2 Eclipse 3.2.0 JRE 1.5.0_08</description>
    <commit commitTime="2008-06-10 18:52:11" id="58961143f7f8e28243a9ae58cd89b25ee14b318d"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc161/Ajc161Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="159896" reportTime="2006-10-05 11:44:00">
    <summary>advice from injars do not have unique handles with the JDTLikeHandleProvider</summary>
    <description>Advice of the same kind contained in the same aspect currently do not have unique handles if the aspect is on the aspectpath.</description>
    <commit commitTime="2006-10-06 16:29:03" id="d532892d89865511ea39286e4ebd34fc20b96a5d"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/ShadowMunger.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc153/JDTLikeHandleProviderTests.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/DeclareErrorOrWarning.java</file>
    </fixedFiles>
  </bug>
  <bug id="159983" reportTime="2006-10-06 05:02:00">
    <summary>[generics] erasure calculation for generic inner classes doesn't work</summary>
    <description>TypeFactory.createTypeFromSignature attempts to process a 'P' signature - it will fail for inner types where the inner type is also generic. if the signature is "PList&amp;lt;LString;&amp;gt;;" then the erasure is correctly "LList;" but for "PList&amp;lt;LString;&amp;gt;$Inner&amp;lt;LString&amp;gt;;" the erasure is "LList;" - a different type!!</description>
    <commit commitTime="2006-10-06 15:43:34" id="f176ce5c3f54b1401d7ca62edf22424bd546b263"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="160167" reportTime="2006-10-08 18:51:00">
    <summary>NPE when using crossrefs option for iajc ant task</summary>
    <description>The ant task is shown below. I ommited the full paths to the values of inpath, outJar, and argfiles, because they are somewhat long hence the "..." before the file names : &amp;lt;iajc crossrefs="true" argfiles="...\weave-jars.txt" inpath="...\org.eclipse.core.runtime_3.2.0.v20060603.jar" outJar="...\org.eclipse.core.runtime_3.2.0.v20060603_woven.jar"&amp;gt; &amp;lt;classpath&amp;gt; &amp;lt;pathelement location="C:\aspectj1.5\lib\aspectjrt.jar"/&amp;gt; &amp;lt;fileset dir="${plugins.dir}"&amp;gt; &amp;lt;include name="**/*.jar"/&amp;gt; &amp;lt;/fileset&amp;gt; &amp;lt;/classpath&amp;gt; &amp;lt;/iajc&amp;gt; My argfile only contains the absolute path of a single .aj file, which contains one aspect. The aspect is shown below. It is very basic - advice bodies simply toggle a boolean variable. public aspect FFDC { public static boolean bit = false; protected pointcut ffdcScope : within org.eclipse..* ; protected pointcut excluded : within org.eclipse.ffdc.FFDC+ || within org.eclipse.core.internal.runtime.PlatformActivator ; before CoreException c : ffdcScope &amp;amp;&amp;amp; !excluded &amp;amp;&amp;amp; handler CoreException+ &amp;amp;&amp;amp; args c { bit = !bit; } after throwing CoreException c : ffdcScope &amp;amp;&amp;amp; !excluded &amp;amp;&amp;amp; !handler * { bit = !bit; } after Plugin activator : execution void PlatformActivator.start .. &amp;amp;&amp;amp; this activator { bit = !bit; } } This task worked properly before I added "crossrefs=true". After adding this option, I get the following error: weave-C:\eclipse\sdk-aspect-package\eclipse\plugins\org.eclipse.core.runtime_3.2.0.v20060603.jar: [iajc] abort ABORT -- NullPointerException null [iajc] null [iajc] java.lang.NullPointerException [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:313 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:163 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 [iajc] at org.aspectj.tools.ajc.Main.run Main.java:367 [iajc] at org.aspectj.tools.ajc.Main.runMain Main.java:246 [iajc] at org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM AjcTask.java:1282 [iajc] at org.aspectj.tools.ant.taskdefs.AjcTask.execute AjcTask.java:1080 [iajc] at org.apache.tools.ant.UnknownElement.execute UnknownElement.java:275 [iajc] at org.apache.tools.ant.Task.perform Task.java:364 [iajc] at org.apache.tools.ant.Target.execute Target.java:341 [iajc] at org.apache.tools.ant.Target.performTasks Target.java:369 [iajc] at org.apache.tools.ant.Project.executeSortedTargets Project.java:1216 [iajc] at org.apache.tools.ant.helper.SingleCheckExecutor.executeTargets SingleCheckExecutor.java:37 [iajc] at org.apache.tools.ant.Project.executeTargets Project.java:1068 [iajc] at org.apache.tools.ant.taskdefs.Ant.execute Ant.java:382 [iajc] at org.apache.tools.ant.taskdefs.CallTarget.execute CallTarget.java:107 [iajc] at org.apache.tools.ant.UnknownElement.execute UnknownElement.java:275 [iajc] at org.apache.tools.ant.Task.perform Task.java:364 [iajc] at org.apache.tools.ant.Target.execute Target.java:341 [iajc] at org.apache.tools.ant.Target.performTasks Target.java:369 [iajc] at org.apache.tools.ant.Project.executeSortedTargets Project.java:1216 [iajc] at org.apache.tools.ant.Project.executeTarget Project.java:1185 [iajc] at org.apache.tools.ant.helper.DefaultExecutor.executeTargets DefaultExecutor.java:40 [iajc] at org.apache.tools.ant.Project.executeTargets Project.java:1068 [iajc] at org.apache.tools.ant.Main.runBuild Main.java:668 [iajc] at org.apache.tools.ant.Main.startAnt Main.java:187 [iajc] at org.apache.tools.ant.launch.Launcher.run Launcher.java:246 [iajc] at org.apache.tools.ant.launch.Launcher.main Launcher.java:67</description>
    <commit commitTime="2006-10-09 12:28:29" id="f7508cf38732781a467aa3eb95a03cee157e2730"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="160496" reportTime="2006-10-11 11:41:00">
    <summary>ajdoc Main class needs refactoring for ease of use</summary>
    <description>Whilst looking at other ajdoc bugs it was slightly confusing to read the main ajdoc method. I didn't want to include the refactoring of this within patches for the other bugs as this is mearly for ease of use. Therefore, raising this enhancement to cover it.</description>
    <commit commitTime="2006-10-23 10:39:38" id="efe6cc79c4c19ebc8f7109f10220b13dc4efffad"/>
    <fixedFiles>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/Main.java</file>
    </fixedFiles>
  </bug>
  <bug id="160674" reportTime="2006-10-12 10:12:00">
    <summary>SAP app server classloader configuration prevents bcel classloaderrepository caching</summary>
    <description>Recently we upgraded the Bcel classloaderrepository to allow caching by URL of the classes that get loaded. The cached entries could even be shared by multiple weavers in the same VM. Unfortunately the SAP netweaver configuration of classloaders doesn't like this and so we need to be able to revert to the poorly performing old strategy on this appserver.</description>
    <commit commitTime="2006-10-12 19:58:09" id="e6a707af677f170f3dbf41081f6ff296b90437d1"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
      <file>weaver5/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/util/ClassLoaderRepository.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/World.java</file>
    </fixedFiles>
  </bug>
  <bug id="161217" reportTime="2006-10-17 08:19:00">
    <summary>NPE in BcelAdvice</summary>
    <description>I've been playing with some aspect deployment models and got into this error during project rebuild from AJDT: java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:199 at org.aspectj.weaver.Shadow.implementMungers Shadow.java:699 at org.aspectj.weaver.Shadow.implement Shadow.java:471 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:2832 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:506 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeave ... lasses when weaving when batch building BuildConfig[...] #Files=6 Here is the aspect and classes it is applied to: ----- @Aspect "percflow execution * InstrumentedBean.getProperty2 " public class GetFieldAtAspect { @Around "execution * ConfigurableBean.getProperty2 " public Object onGet ProceedingJoinPoint jp throws Throwable { return jp.proceed ; } } ------ import org.springframework.beans.factory.InitializingBean; public class InstrumentedBean implements InitializingBean, IInstrumentedBean { private ConfigurableBean configurableBean; private String value; private transient String transientValue = "aaa"; public void afterPropertiesSet throws Exception { this.configurableBean = new ConfigurableBean ; } public String getProperty1 { synchronized this { return this.configurableBean.getProperty1 ; } } public String getProperty2 { synchronized this { return this.configurableBean.getProperty2 ; } } public void setValue String value { synchronized this { this.value = value; } } public Object getValue { synchronized this { return value; } } public Object getTransientValue { return transientValue; } public void setTransientValue String transientValue { this.transientValue = transientValue; } } ------ import java.io.Serializable; import org.springframework.beans.factory.annotation.Configurable; @Configurable public class ConfigurableBean implements Serializable { private static final long serialVersionUID = 1L; private String property1; private String property2; public ConfigurableBean { } public String getProperty1 { return this.property1; } public String getProperty2 { return this.property2; } public void setProperty1 String property1 { this.property1 = property1; } public void setProperty2 String property2 { this.property2 = property2; } }</description>
    <commit commitTime="2006-10-19 14:05:02" id="044542c6d5996806ce29156e83e1725823f5f8fe"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="161502" reportTime="2006-10-18 22:23:00">
    <summary>UnsupportedOperationException thrown: unable to parameterize unresolved type: Pjava/util/List&lt;+Ljava/lang/Object; &gt;;</summary>
    <description>Generic parameters like List&amp;lt;? extends T&amp;gt; in pointcuts throw UnsupportedOperationException. java.lang.UnsupportedOperationException at org.aspectj.weaver.UnresolvedType.parameterize UnresolvedType.java: 220 at org.aspectj.weaver.patterns.ExactTypePattern.parameterizeWith ExactTypePattern.java:244 at org.aspectj.weaver.patterns.SignaturePattern.parameterizeWith SignaturePattern.java:265 at org.aspectj.weaver.patterns.KindedPointcut.parameterizeWith KindedPointcut.java:381 at org.aspectj.weaver.bcel.BcelAdvice.parameterizeWith BcelAdvice.java:93 at org.aspectj.weaver.ResolvedType.getDeclaredAdvice ResolvedType.java:710 at org.aspectj.weaver.ResolvedType.getDeclaredShadowMungers ResolvedType.java:739 at org.aspectj.weaver.ResolvedType.collectShadowMungers ResolvedType.java:575 at org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers ResolvedType.java:504 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect CrosscuttingMembersSet.java:68 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect CrosscuttingMembersSet.java:57 at org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave BcelWeaver.java: 450 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:299 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:192 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc $afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2 $f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:887 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:244 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:163 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 UnsupportedOperationException thrown: unable to parameterize unresolved type: Pjava/util/List&amp;lt;+Ljava/lang/Object;&amp;gt;; To reproduce this exception compile the following code snippet. import java.util.ArrayList; import java.util.List; import org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.annotation.Around; import org.aspectj.lang.annotation.Aspect; public class Main { public List&amp;lt;? extends Element&amp;gt; getElements { return new ArrayList&amp;lt;Element&amp;gt; ; } class Element {}; @Aspect static abstract class Base&amp;lt;T&amp;gt; { @Around "call List&amp;lt;? extends T&amp;gt; *.* .. " public List&amp;lt;? extends T&amp;gt; elementList ProceedingJoinPoint thisJoinPoint { try { return List&amp;lt;? extends T&amp;gt; thisJoinPoint.proceed ; } catch Throwable e { throw new RuntimeException e ; } } } @Aspect static class Concrete extends Base&amp;lt;Element&amp;gt; {} public static void main String[] args { new Main .getElements ; } }</description>
    <commit commitTime="2006-10-24 12:42:57" id="7b40e7e3e4b68d6b0334f5643931e00f06881cdd"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/ThrowsPattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/DeclareParents.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerObject.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WildTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/TypeVariableReferenceType.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/HasMemberTypePattern.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ReferencePointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/DeclareSoft.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerSingleton.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AnnotationPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/NotTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/DeclareErrorOrWarning.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerCflow.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedPointcutDefinition.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/BindingAnnotationTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/OrPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/TypePatternList.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AndAnnotationTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedType.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AndTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/DeclareAnnotation.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AnnotationPatternList.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ExactAnnotationTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/BindingTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AnnotationTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/NotPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WithinCodeAnnotationPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/HandlerPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/TypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/Pointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ConcreteCflowPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/IfPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WithinPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/KindedPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AndPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/DeclarePrecedence.java</file>
      <file>weaver/src/org/aspectj/weaver/internal/tools/PointcutDesignatorHandlerBasedPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/TypeVariable.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WithincodePointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/OrAnnotationTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/OrTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/Declare.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ArgsPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/NotAnnotationTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ArgsAnnotationPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/BoundedReferenceType.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerTypeWithin.java</file>
      <file>weaver/src/org/aspectj/weaver/ReferenceType.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/WithinAnnotationPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/Checker.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/PerFromSuper.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/CflowPointcut.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ThisOrTargetAnnotationPointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="162539" reportTime="2006-10-27 05:33:00">
    <summary>NullPointerException when pointcut library missing @aspect annotion</summary>
    <description>If you omit the @aspect annotation when using @pointcut you get a nice error but not if it's a pointcut library referenced from another aspect: java.lang.NullPointerException at org.aspectj.weaver.patterns.ReferencePointcut.concretize1 ReferencePointcut.java:361 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:233 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:220 at org.aspectj.weaver.Advice.concretize Advice.java:353 at org.aspectj.weaver.bcel.BcelAdvice.concretize BcelAdvice.java:86 at org.aspectj.weaver.CrosscuttingMembers.addShadowMu ... pter.java:107 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 NullPointerException thrown: null</description>
    <commit commitTime="2007-11-19 16:34:13" id="8a8635a94f17134c32540282bf68d02c9501c56f"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java</file>
    </fixedFiles>
  </bug>
  <bug id="162657" reportTime="2006-10-28 00:33:00">
    <summary>NPE when compiling !pointcut</summary>
    <description>java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelWeaver.raiseAmbiguityInDisjunctionError BcelWeaver.java:822 at org.aspectj.weaver.bcel.BcelWeaver.validateOrBranch BcelWeaver.java:663 at org.aspectj.weaver.bcel.BcelWeaver.validateBindings BcelWeaver.java:623 at org.aspectj.weaver.bcel.BcelWeaver.rewritePointcuts BcelWeaver.java:561 at org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave BcelWeaver.java:483 at org.aspect ... pter.java:107 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 NullPointerException thrown: null</description>
    <commit commitTime="2006-10-30 10:25:24" id="b83891da5769442d335d8e61d52d16e215055975"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="163802" reportTime="2006-11-08 08:48:00">
    <summary>Compilation error</summary>
    <description>Hello, I had several times aspectj compiler errors when compiling some normal java class file not refering any aspect nor concerned by an aspect but in a aspectJ project. Bug goes away after cleaning project. Here is the error reported for my class java.lang.NullPointerException at org.aspectj.weaver.ResolvedType.collectInterTypeMungers ResolvedType.java:1158 at org.aspectj.weaver.ResolvedType.collectInterTypeMungers ResolvedType.java:1158 at org.aspectj.weaver.ResolvedType.getInterTypeMungersIncludingSupers ResolvedType.java:1135 at org.aspectj.weaver.ResolvedType.checkInterTypeMungers ResolvedType.java:1202 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInt ... Adapter.java:102 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 NullPointerException thrown: null It occurs with plugin configuration: com.ibm.icu 3.4.5 "International Components for Unicode for Java ICU4J " [Active] com.ibm.icu.source 3.4.5 "International Components for Unicode for Java ICU4J source plug-in" [Resolved] com.jcraft.jsch 0.1.28 "JSch" [Resolved] net.sf.fjep.fatjar 0.0.24 "Fat Jar Plug-in" [Resolved] org.apache.ant 1.6.5 "Apache Ant" [Resolved] org.apache.lucene 1.4.103.v20060601 "Apache Lucene" [Resolved] org.aspectj.ajde 1.5.3.200610201049 "AspectJ" [Active] org.aspectj.runtime 1.5.3.200610201049 "AspectJ Runtime" [Resolved] org.aspectj.weaver 1.5.3.200610201049 "AspectJ Weaver" [Resolved] org.eclipse.ajdt.core 1.4.1.200611071030 "AspectJ Development Tools Core" [Active] org.eclipse.ajdt.examples 1.4.1.200611071030 "AspectJ Examples" [Resolved] org.eclipse.ajdt.pde.build 1.4.1.200611071030 "AspectJ Plug-in Development Environment Build Support" [Resolved] org.eclipse.ajdt.source 1.4.1.200611071030 "pluginName" [Resolved] org.eclipse.ajdt.ui 1.4.1.200611071030 "AspectJ Development Tools UI" [Active] org.eclipse.ant.core 3.1.100.v20060531 "Ant Build Tool Core" [Resolved] org.eclipse.ant.ui 3.2.1.r321_v20060828 "Ant UI" [Resolved] org.eclipse.aspectj 1.4.1.200611071030 "AspectJ Development Tools" [Resolved] org.eclipse.compare 3.2.1.M20060711 "Compare Support" [Active] org.eclipse.contribution.visualiser 2.2.0.200611071030 "Visualiser Plug-in" [Resolved] org.eclipse.contribution.xref.core 1.4.1.200611071030 "Cross Reference Core Plugin" [Active] org.eclipse.contribution.xref.ui 1.4.1.200611071030 "Cross Reference UI Plugin" [Active] org.eclipse.core.boot 3.1.100.v20060603 "Core Boot" [Resolved] org.eclipse.core.commands 3.2.0.I20060605-1400 "Commands" [Resolved] org.eclipse.core.contenttype 3.2.0.v20060603 "Eclipse Content Mechanism" [Active] org.eclipse.core.expressions 3.2.1.r321_v20060721 "Expression Language" [Active] org.eclipse.core.filebuffers 3.2.1.r321_v20060721 "File Buffers" [Active] org.eclipse.core.filesystem 1.0.0.v20060603 "Core File Systems" [Resolved] org.eclipse.core.filesystem.macosx 1.0.0.v20060603 "Core File System for Macintosh" [Resolved] org.eclipse.core.jobs 3.2.0.v20060603 "Eclipse Jobs Mechanism" [Active] org.eclipse.core.resources 3.2.1.R32x_v20060914 "Core Resource Management" [Active] org.eclipse.core.resources.compatibility 3.2.0.v20060603 "Core Resource Management Compatibility Fragment" [Resolved] org.eclipse.core.runtime 3.2.0.v20060603 "Core Runtime" [Active] org.eclipse.core.runtime.compatibility 3.1.100.v20060603 "Core Runtime Plug-in Compatibility" [Active] org.eclipse.core.runtime.compatibility.auth 3.2.0.v20060601 "Authorization Compatibility Plug-in" [Active] org.eclipse.core.runtime.compatibility.registry 3.2.1.R32x_v20060907 "Eclipse Registry Compatibility Fragment" [Resolved] org.eclipse.core.variables 3.1.100.v20060605 "Core Variables" [Active] org.eclipse.debug.core 3.2.1.v20060823 "Debug Core" [Active] org.eclipse.debug.ui 3.2.1.v20060823 "Debug UI" [Active] org.eclipse.equinox.common 3.2.0.v20060603 "Common Eclipse Runtime" [Active] org.eclipse.equinox.preferences 3.2.1.R32x_v20060717 "Eclipse Preferences Mechanism" [Active] org.eclipse.equinox.registry 3.2.1.R32x_v20060814 "Extension Registry Support" [Active] org.eclipse.help 3.2.1.R321_v20060920 "Help System Core" [Active] org.eclipse.help.appserver 3.1.100.v20060602 "Help Application Server" [Resolved] org.eclipse.help.base 3.2.1.R321_v20060822 "Help System Base" [Resolved] org.eclipse.help.ui 3.2.0.v20060602 "Help System UI" [Resolved] org.eclipse.help.webapp 3.2.1.R321_v20060803 "Help System Webapp" [Resolved] org.eclipse.jdt 3.2.1.r321_v20060823 "Eclipse Java Development Tools" [Resolved] org.eclipse.jdt.apt.core 3.2.1.R32x_v20060822-2100 "Java Annotation Processing Core" [Active] org.eclipse.jdt.apt.ui 3.2.1.R32x_v20060822-2100 "Java Annotation Processing UI" [Resolved] org.eclipse.jdt.core 3.2.1.v_677_R32x "Java Development Tools Core" [Active] org.eclipse.jdt.core.manipulation 1.0.1.r321_v20060721 "Java Code Manipulation Functionality" [Resolved] org.eclipse.jdt.debug 3.2.1.r321_v20060731 "JDI Debug Model" [Active] org.eclipse.jdt.debug.ui 3.2.1.r321_v20060918 "JDI Debug UI" [Active] org.eclipse.jdt.doc.isv 3.2.1.r321_v20060907 "Eclipse JDT Plug-in Developer Guide" [Resolved] org.eclipse.jdt.doc.user 3.2.0.v20060605-1400 "Eclipse Java Development User Guide" [Resolved] org.eclipse.jdt.junit 3.2.1.r321_v20060810 "Java Development Tools JUnit support" [Active] org.eclipse.jdt.junit.runtime 3.2.1.r321_v20060721 "Java Development Tools JUnit runtime support" [Resolved] org.eclipse.jdt.junit4.runtime 1.0.1.r321_v20060905 "Java Development Tools JUnit4 runtime support" [Resolved] org.eclipse.jdt.launching 3.2.1.r321_v20060731 "Java Development Tools Launching Support" [Active] org.eclipse.jdt.launching.macosx 3.1.100.v20060605 "Mac OS X Launcher" [Active] org.eclipse.jdt.source 3.2.1.r321_v20060905-R4CM1Znkvre9wC- "Eclipse Java Development Tools SDK" [Resolved] org.eclipse.jdt.source.macosx.carbon.ppc 3.2.1.r321_v20060905-R4CM1Znkvre9wC- "Eclipse Java Development Tools SDK" [Resolved] org.eclipse.jdt.ui 3.2.1.r321_v20060907 "Java Development Tools UI" [Active] org.eclipse.jface 3.2.1.M20060908-1000 "JFace" [Resolved] org.eclipse.jface.databinding 1.0.0.I20060605-1400 "JFace Data Binding" [Resolved] org.eclipse.jface.text 3.2.1.r321_v20060810 "JFace Text" [Resolved] org.eclipse.ltk.core.refactoring 3.2.1.r321_v20060823 "Refactoring Core" [Active] org.eclipse.ltk.ui.refactoring 3.2.1.r321_v20060726 "Refactoring UI" [Active] org.eclipse.osgi.services 3.1.100.v20060601 "OSGi Release 3 Services" [Resolved] org.eclipse.osgi.util 3.1.100.v20060601 "OSGi R3 Utility Classes" [Resolved] org.eclipse.pde 3.2.1.v20060810-0800 "Eclipse Plug-in Development Environment" [Resolved] org.eclipse.pde.build 3.2.1.r321_v20060823 "Plug-in Development Environment Build Support" [Resolved] org.eclipse.pde.core 3.2.1.v20060915-0800 "Plug-in Development Core" [Resolved] org.eclipse.pde.doc.user 3.2.1.v20060816-0800 "Eclipse Plug-in Development User Guide" [Resolved] org.eclipse.pde.junit.runtime 3.2.0.v20060605 "PDE JUnit Plug-in Test" [Resolved] org.eclipse.pde.runtime 3.2.0.v20060605 "Plug-in Development Environment Runtime" [Resolved] org.eclipse.pde.source 3.2.1.r321_v20060823-6vYLLdQ3Nk8DrFG "Eclipse Plug-in Development Environment Developer Resources" [Resolved] org.eclipse.pde.ui 3.2.1.v20060816-0800 "Plug-in Development UI" [Resolved] org.eclipse.platform 3.2.0.v20060601 "Eclipse Platform" [Resolved] org.eclipse.platform.doc.isv 3.2.1.r321_v2006030 "Eclipse Platform Plug-in Developer Guide" [Resolved] org.eclipse.platform.doc.user 3.2.1.R32x_v200608101155 "Eclipse Workbench User Guide" [Resolved] org.eclipse.platform.source 3.2.1.r321_v20060921-b_XVA-INSQSyMtx "Eclipse Platform Plug-in Developer Resources" [Resolved] org.eclipse.platform.source.macosx.carbon.ppc 3.2.1.r321_v20060921-b_XVA-INSQSyMtx "Eclipse Platform Plug-in Developer Resources" [Resolved] org.eclipse.rcp 3.2.0.v20060605 "Eclipse RCP" [Resolved] org.eclipse.rcp.source 3.2.1.r321_v20060801-2ekW2BxmcpPUOoq "Eclipse RCP Plug-in Developer Resources" [Resolved] org.eclipse.rcp.source.macosx.carbon.ppc 3.2.1.r321_v20060801-2ekW2BxmcpPUOoq "Eclipse RCP Plug-in Developer Resources" [Resolved] org.eclipse.sdk 3.2.1.r321_v20060705 "Eclipse Project SDK" [Resolved] org.eclipse.search 3.2.1.r321_v20060726 "Search Support" [Resolved] org.eclipse.swt 3.2.1.v3235e "Standard Widget Toolkit" [Resolved] org.eclipse.swt.carbon.macosx 3.2.1.v3235 "Standard Widget Toolkit for Mac OS X Carbon " [Resolved] org.eclipse.team.core 3.2.1.M20060711 "Team Support Core" [Active] org.eclipse.team.cvs.core 3.2.1.M200608161750 "CVS Team Provider Core" [Active] org.eclipse.team.cvs.ssh 3.2.0.I200606011710 "CVS SSH Core" [Resolved] org.eclipse.team.cvs.ssh2 3.2.0.I200606051140 "CVS SSH2" [Active] org.eclipse.team.cvs.ui 3.2.1.M20060831 "CVS Team Provider UI" [Active] org.eclipse.team.ui 3.2.1.M200608151725 "Team Support UI" [Active] org.eclipse.text 3.2.0.v20060605-1400 "Text" [Resolved] org.eclipse.tomcat 4.1.130.v20060601 "Tomcat Wrapper" [Resolved] org.eclipse.ui 3.2.1.M20060913-0800 "Eclipse UI" [Active] org.eclipse.ui.browser 3.2.0.v20060602 "Browser Support" [Active] org.eclipse.ui.carbon 3.2.0.I20060605-1400 "Eclipse UI MacOS X Enhancements" [Resolved] org.eclipse.ui.cheatsheets 3.2.1.R321_v20060720 "Cheat Sheets" [Resolved] org.eclipse.ui.console 3.1.100.v20060605 "Console" [Active] org.eclipse.ui.editors 3.2.1.r321_v20060721 "Default Text Editor" [Active] org.eclipse.ui.externaltools 3.1.101.r321_v20060802 "External Tools" [Active] org.eclipse.ui.forms 3.2.0.v20060602 "Eclipse Forms" [Active] org.eclipse.ui.ide 3.2.1.M20060915-1030 "Eclipse IDE UI" [Active] org.eclipse.ui.intro 3.2.1.R321_v20060810 "Welcome Framework" [Resolved] org.eclipse.ui.intro.universal 3.2.1.R321_v20060905 "Universal Welcome" [Resolved] org.eclipse.ui.navigator 3.2.1.M20060913-0800 "Common Navigator View" [Resolved] org.eclipse.ui.navigator.resources 3.2.1.M20060906-0800b "Navigator Workbench Components" [Resolved] org.eclipse.ui.presentations.r21 3.2.0.I20060605-1400 "R21 Presentation Plug-in" [Resolved] org.eclipse.ui.views 3.2.1.M20060906-0800 "Views" [Active] org.eclipse.ui.views.properties.tabbed 3.2.1.M20060830-0800 "Tabbed Properties View" [Resolved] org.eclipse.ui.workbench 3.2.1.M20060906-0800 "Workbench" [Active] org.eclipse.ui.workbench.compatibility 3.2.0.I20060605-1400 "Workbench Compatibility" [Resolved] org.eclipse.ui.workbench.texteditor 3.2.0.v20060605-1400 "Text Editor Framework" [Active] org.eclipse.update.configurator 3.2.1.v20092006 "Install/Update Configurator" [Active] org.eclipse.update.core 3.2.1.v20092006 "Install/Update Core" [Active] org.eclipse.update.scheduler 3.2.1.v20092006 "Automatic Updates Scheduler" [Active] org.eclipse.update.ui 3.2.1.v20092006 "Install/Update UI" [Resolved] org.junit 3.8.1 "JUnit Testing Framework" [Resolved] org.junit4 4.1.0.1 "JUnit Testing Framework Version 4" [Resolved] sf.eclipse.javacc 1.5.5 "JavaCC Plug-in" [Active] system.bundle 3.2.1.R32x_v20060919 "OSGi System Bundle" [Active]</description>
    <commit commitTime="2008-03-21 01:43:30" id="fe99e6bfec2689b03ffcfd7da960e3cd3bd78a54"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/ResolvedType.java</file>
    </fixedFiles>
  </bug>
  <bug id="164288" reportTime="2006-11-13 04:04:00">
    <summary>Can no longer compile JDK 1.5 projects with apsectj for JDeveloper</summary>
    <description>I am working with AspectJ 1.5.2 in JDeveloper and have found that it is not possible to convince the compiler to use JDK 5 constructs. It appears that there is a method on AjcBuildOptions called getJavaOptionsMap which is currently implemented to return null in all cases. In CompilerAdapter.configureBuildOptions areound line 358 the code tried to access this object to access whether to use JDK 5 constructs or not. Since the return value is always null the project is never properly configured. I notice that the only other implementation of the root interface is CoreBuildOption which appears to directly return a structure from the eclipse class JavaProject. It would appear that this interface is breaking the rules on abstraction, is this the correct read on the situation? If so the solution would either be to implement a CoreBuildOption class to correctly work with the ADJE project adapter class or alter the code in Compiler adapter to correct use the properties in project adapter. I think that the latter is probably the best as BuildOption assumes a depedency on Eclipse which shouldn't be there. We do currently have customer, one in nato, who are currently having to work around this issue so it would be good to get it resolve for 1.5.3 if possible But I know I am a bit late for that now do to a lost email.</description>
    <commit commitTime="2006-11-17 13:45:52" id="c54fa62036a1fce21c2f50d0dbeafc025ca16bc0"/>
    <fixedFiles>
      <file>ajde/src/org/aspectj/ajde/BuildOptionsAdapter.java</file>
      <file>ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java</file>
      <file>ajde/testsrc/org/aspectj/ajde/BuildConfigurationTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="164340" reportTime="2006-11-13 11:50:00">
    <summary>missed class constructor API documentation</summary>
    <description>The description for a class constructor in the source file does not appear to the generated API documentation in HTML by ajdoc.</description>
    <commit commitTime="2008-06-11 17:24:42" id="8d7f7e1d4ad5e302b60074db044636817ba4e5a5"/>
    <fixedFiles>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/BugTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="164384" reportTime="2006-11-13 15:00:00">
    <summary>I don't seem to be able to use LTW with JDK 6</summary>
    <description>I was experimenting with AspectJ and JDK 6 but found that load time weaving doesn't appear to work even though my aop.xml appears to be correct. The command line generated in JDeveloper, the tool I am using to work with aspects, is as follows: D:\aop_stuff\sourceJdev\jdk\bin\javaw.exe -hotspot -classpath D:\aop_stuff\destinationJdev\jdev\mywork\JSI\JavaScriptingInterface\classes;D:\aop_stuff\destinationJdev\jdev\extensions\uk.org.damselfly.jdev.aop.aspectj\lib\aspectjrt.jar;D:\aop_stuff\destinationJdev\jdev\extensions\uk.org.damselfly.jdev.aop.aspectj\lib\aspectjweaver.jar -javaagent:d:\aop_stuff\destinationJdev\jdev\extensions\uk.org.damselfly.jdev.aop.aspectj\lib\aspectjweaver.jar -Dhttp.proxyHost=www-proxy.us.oracle.com -Dhttp.proxyPort=80 -Dhttp.nonProxyHosts=localhost|127.0.0.1 -Dhttps.proxyHost=www-proxy.us.oracle.com -Dhttps.proxyPort=80 -Dhttps.nonProxyHosts=localhost|127.0.0.1 uk.org.damselfly.aop.jsi.test.TargetClass I get the following error message: [AppClassLoader@1f12c4e] error at uk\org\damselfly\aop\jsi\aspect\JavaScriptAspect.java::0 annotation type patterns are only supported at Java 5 compliance level or above This doesn't occure when I try to run under a JDK 5 after I commented out the JDK dependant files</description>
    <commit commitTime="2006-11-17 10:31:48" id="2a540e3451bd6fc6ce0de29f3a4f1f528c0d93df"/>
    <fixedFiles>
      <file>util/src/org/aspectj/util/LangUtil.java</file>
    </fixedFiles>
  </bug>
  <bug id="164633" reportTime="2006-11-15 08:19:00">
    <summary>Program throws java.lang.IncompatibleClassChangeError</summary>
    <description>Take this two classes below: Calling test.Model.main throws an error: Exception in thread "main" java.lang.IncompatibleClassChangeError at test.BoundEntityAspect.ajc$interMethodDispatch1$test_BoundEntityAspect$test_BoundEntityAspect$BoundBean$getPropertyChangeSupport BoundEntityAspect.aj at test.Model$ChangeL.propertyChange Model.java:12 at test.Model.main Model.java:17 Changing line 12 in Model from getPropertyChangeSupport .firePropertyChange "valid", null, null ; to Model.this.getPropertyChangeSupport .firePropertyChange "valid", null, null ; fixes the problem. explicitly changing to: this.getPropertyChangeSupport .firePropertyChange "valid", null, null ; compiles but should not and of course throws this excpetion. package test; import java.beans.PropertyChangeListener; import java.beans.PropertyChangeSupport; import java.io.Serializable; public aspect BoundEntityAspect { interface BoundBean extends Serializable {} declare parents: test.* &amp;amp;&amp;amp; !BoundEntityAspect implements BoundBean; public PropertyChangeSupport BoundBean.propertySupport; public void BoundBean.addPropertyChangeListener PropertyChangeListener listener { getPropertyChangeSupport .addPropertyChangeListener listener ; } public void BoundBean.addPropertyChangeListener String propertyName, PropertyChangeListener listener { getPropertyChangeSupport .addPropertyChangeListener propertyName, listener ; } public void BoundBean.removePropertyChangeListener String propertyName, PropertyChangeListener listener { getPropertyChangeSupport .removePropertyChangeListener propertyName, listener ; } public void BoundBean.removePropertyChangeListener PropertyChangeListener listener { getPropertyChangeSupport .removePropertyChangeListener listener ; } public void BoundBean.hasListeners String propertyName { getPropertyChangeSupport .hasListeners propertyName ; } public synchronized PropertyChangeSupport BoundBean.getPropertyChangeSupport { if propertySupport == null { propertySupport = new PropertyChangeSupport this ; } return propertySupport; } pointcut setter BoundBean bean : execution void BoundBean+.set* * &amp;amp;&amp;amp; this bean ; void around BoundBean bean : setter bean &amp;amp;&amp;amp; if bean.propertySupport != null { } pointcut indexedSetter BoundBean bean, int index : execution void BoundBean+.set* int, * &amp;amp;&amp;amp; args index,* &amp;amp;&amp;amp; this bean ; void around BoundBean bean, int index : indexedSetter bean, index &amp;amp;&amp;amp; if bean.propertySupport != null { } } -------------- package test; import java.beans.PropertyChangeEvent; import java.beans.PropertyChangeListener; public class Model { private PropertyChangeListener changeListener = new ChangeL ; protected class ChangeL implements PropertyChangeListener { public void propertyChange PropertyChangeEvent evt { getPropertyChangeSupport .firePropertyChange "valid", null, null ; } } public static void main String[] args { new Model .changeListener.propertyChange null ; } }</description>
    <commit commitTime="2006-11-21 16:27:36" id="e022f649ea1fce716d16fc0d18b4c6aed48f8b30"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="165148" reportTime="2006-11-20 08:26:00">
    <summary>[ltw] Unnecessary exceptions during concretization of aspects in aop.xml</summary>
    <description>Due to the mechanism used in ConcreteAspectCodeGen I see a lot of unnecessary exceptions created. The problem is rather than looking up a type to confirm it doesn't exist before defining it, the code uses a resolve to check if it exists and resolve attempts to build it if it isnt there. Because the classloader will never find an aop.xml defined type the class doesn't exist anywhere on the classpath , a spurious exception is created and sometimes traced if collecting a trace . I'm going to change the code to do a lookup, that is all that is really necessary.</description>
    <commit commitTime="2006-11-20 13:20:41" id="e8d2556d9448375fcf578695c082f81aa604fddb"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="165153" reportTime="2006-11-20 09:13:00">
    <summary>Trace to file using org.aspectj.tracing.file System Property</summary>
    <description>Default trace -Dorg.aspectj.tracing.factory=default is sent to stderr. Sometimes this information can be lost, confused with application output or redirected. To ensure all tracing output goes to a well defined location users should be able to specify a fully qualified filename instead e.g. -Dorg.aspectj.tracing.file=c:/temp/tracing.txt</description>
    <commit commitTime="2006-11-22 10:24:34" id="bb14e258c5d1769b3987a2e11f02c29f90f30e36"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/tracing/TracingTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="165631" reportTime="2006-11-23 03:41:00">
    <summary>It is possible to mark a class as implementing multiple parametrizations of a generic type</summary>
    <description>This program: interface A&amp;lt;T&amp;gt; {} interface B&amp;lt;T&amp;gt; extends A&amp;lt;T&amp;gt; {} class C implements A&amp;lt;String&amp;gt; { } class D extends C { } aspect X { declare parents: D implements B&amp;lt;Number&amp;gt;; } produces: /scratch/p1.java:10 [error] Cannot declare parent B&amp;lt;java.lang.Number&amp;gt; onto type C since it already has A&amp;lt;java.lang.String&amp;gt; in its hierarchy declare parents: D implements B&amp;lt;Number&amp;gt;; This program: interface A&amp;lt;T&amp;gt; {} interface B&amp;lt;T&amp;gt; extends A&amp;lt;T&amp;gt; {} class C implements A&amp;lt;String&amp;gt; {} interface A1 {} class D extends C implements A1 { } aspect X { declare parents: D implements B&amp;lt;Number&amp;gt;; } compiles fine - it should report the same error. In the second program class D has more than one superclass, namely, it implements additionally A1 interface. The verifyNoInheritedAlternateParameterization method in org.aspectj.weaver.patterns.DeclareParents class only checks one superclass of any given class instead of checking all of them. My take on the solution is that the last recursive method call in this very method should be changed from: verifyNoInheritedAlternateParameterization supertype,newParent,world ; to: if !verifyNoInheritedAlternateParameterization supertype,newParent,world { return false; } This is related to bug 110788 .</description>
    <commit commitTime="2006-11-29 15:46:51" id="09e2b1bc62beb82dbaf746b996ebc8d7049380bc"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/DeclareParents.java</file>
    </fixedFiles>
  </bug>
  <bug id="165885" reportTime="2006-11-27 02:09:00">
    <summary>ClassCastException at EclipseResolvedMember.java:98</summary>
    <description>java.lang.ClassCastException at org.aspectj.ajdt.internal.compiler.lookup.EclipseResolvedMember.getParameterNames EclipseResolvedMember.java:98 at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith ResolvedMemberImpl.java:660 at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith ResolvedMemberImpl.java:597 at org.aspectj.weaver.ReferenceType.getDeclaredFields ReferenceType.java:381 at org.aspectj.weaver.ResolvedType$2.get ... when weaving when batch building BuildConfig[D:\My Documents\eclipse\.metadata\.plugins\org.eclipse.ajdt.core\cgrid-library.generated.lst] #Files=93 This is with AJDT 1.4.1 on Eclipse 3.2.1.</description>
    <commit commitTime="2006-11-29 10:50:50" id="1dab3546e8f0e4dc317557563834db0bd6fac661"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseResolvedMember.java</file>
    </fixedFiles>
  </bug>
  <bug id="166084" reportTime="2006-11-28 12:14:00">
    <summary>Weaver produces incorrect class files</summary>
    <description>Build ID: M20060921-0945 Weaver version is aspectjweaver-1.5.2-dev. Steps To Reproduce: We are developing YourKit Java Profiler http://www.yourkit.com and our user reported http://forums.yourkit.com/viewtopic.php?t=782 the problem that it's problematic to use profiler with AspectJ. After investigation we found that the AspectJ weaver incorrectly optimizes certain class files: it replaces istore_w with istore and doesn't correct local variable table. It replaces [wide,istore,2_byte_offset] with [istore,1_byte_offset] and doesn't fix local variable table. Here is the original byte code javap output for method code before intrumenting : 0: iconst_m1 1: istore_w 2 5: sipush 19325 8: sipush 0 11: invokestatic #29; //Method com/yourkit/runtime/Callback.yjpMethodEntry: SS V 14: nop 15: nop 16: aload_0 17: invokespecial #8; //Method java/lang/Object."&amp;lt;init&amp;gt;": V 20: sipush 19325 23: sipush 0 26: invokestatic #31; //Method com/yourkit/runtime/Callback.yjpMethodExit: SS V 29: nop 30: nop 31: nop 32: return LineNumberTable: line 4: 16 LocalVariableTable: Start Length Slot Name Signature 0 33 0 this Lyourkit/Advised; Here is weaved and incorrect byte code javap output for method code after intrumentation : 0: iconst_m1 1: istore 2 // was istore_w 3: sipush 19325 6: sipush 0 9: invokestatic #29; //Method com/yourkit/runtime/Callback.yjpMethodEntry: SS V 12: nop 13: nop 14: aload_0 15: invokespecial #8; //Method java/lang/Object."&amp;lt;init&amp;gt;": V 18: sipush 19325 21: sipush 0 24: invokestatic #31; //Method com/yourkit/runtime/Callback.yjpMethodExit: SS V 27: nop 28: nop 29: nop 30: return LineNumberTable: line 4: 16 LocalVariableTable: Start Length Slot Name Signature 0 33 0 this Lyourkit/Advised; // not updated More information: We'll provide more information by your demand.</description>
    <commit commitTime="2006-11-29 13:43:01" id="f1520e89e3e9facafe708d390cf91cb43fc1bcb3"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/LocalVariableInstruction.java</file>
    </fixedFiles>
  </bug>
  <bug id="166238" reportTime="2006-11-29 13:34:00">
    <summary>-nowarn doesn't work for load-time weaving</summary>
    <description>The -nowarn flag is passing through to not ignore warnings I think the logic used to be convoluted here but now the underlying implementation does what it says, the CLWA has the wrong logic . See attached patches for a test case and a fix.</description>
    <commit commitTime="2006-12-01 12:12:42" id="25a8a5afc3c3b1f9c9b3332f19ff9a6681db4ad6"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Options.java</file>
    </fixedFiles>
  </bug>
  <bug id="166647" reportTime="2006-12-04 11:04:00">
    <summary>java.lang.NoSuchFieldError when using cflow in pointcut declaration with LTW</summary>
    <description>When using LTW and having a pointcut declaration that's using cflow, the VM exits with an exception: java.lang.NoSuchFieldError: ajc$cflowCounter$0 This behaviour may be similar to reported bugs #149096 and Bug #132080 should be fixed , but even with 1.5.3, the mentioned exception occurs. Here's an example, that reproduces the exception with AspectJ 1.5.3 using eclipse : 1. /META-INF/aop.xml: &amp;lt;?xml version="1.0"?&amp;gt; &amp;lt;aspectj&amp;gt; &amp;lt;aspects&amp;gt; &amp;lt;aspect name="net.test.ltw.aspect.LoggingAspect"/&amp;gt; &amp;lt;/aspects&amp;gt; &amp;lt;weaver&amp;gt; &amp;lt;exclude within="org.apache..*"/&amp;gt; &amp;lt;include within="net.test.ltw.beans..*"/&amp;gt; &amp;lt;/weaver&amp;gt; &amp;lt;/aspectj&amp;gt; 2. The Aspect, using cflow: package net.test.ltw.aspect; import org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.annotation.Around; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.Pointcut; @Aspect public class LoggingAspect { @Pointcut "execution * sayHello .. " + " &amp;amp;&amp;amp; !cflow execution * net.test.ltw.beans.caller.EvilWorldCaller.callWorld .. " public void sayHelloExecutions {} @Around "sayHelloExecutions " public Object validateMethodCall ProceedingJoinPoint joinPoint throws Throwable{ System.out.println "---" ; System.out.println "entry " + joinPoint.toLongString ; Object retVal = joinPoint.proceed ; System.out.println "exit " + joinPoint.toLongString ; return retVal; } } 3. The beans to advice: package net.test.ltw.beans.caller; import net.test.ltw.beans.worlds.World; public class GoodWorldCaller { World world = new World ; public void callWorld { world.sayHello ; } } and package net.test.ltw.beans.caller; import net.test.ltw.beans.worlds.World; public class EvilWorldCaller { World world = new World ; public void callWorld { world.sayHello ; } } 4. The Main, starting the Example: package net.test.ltw.beans.caller; public class CallerMain { public static void main String[] args { GoodWorldCaller goodWorldCaller = new GoodWorldCaller ; EvilWorldCaller evilWorldCaller = new EvilWorldCaller ; goodWorldCaller.callWorld ; evilWorldCaller.callWorld ; } } 5. The VM is startet with VM-Arg -javaagent:D:\Temp\mvel\AspectJ-1.5.3_INVEST\lib\aspectjweaver.jar Greetings Mario</description>
    <commit commitTime="2007-12-04 09:39:38" id="4e7583aac32c77523a357f9606be6fd29ec62a6f"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc154/Ajc154Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="167197" reportTime="2006-12-07 20:55:00">
    <summary>Compiler crashes with a ClassCastException when weaving generic classes parameterized with an array type</summary>
    <description>The attached class files cause the aspectJ compiler v1.5.3 to crash upon compilation with the following error: logan@logan01 ~/zillow/src/code/z4/RandomStuff $ ajc -1.5 AspectBreaker.java TestAspect.aj trouble in: public class AspectBreaker extends java.util.ArrayList: private static final long serialVersionUID = 1 public void &amp;lt;init&amp;gt; org.aspectj.weaver.MethodDeclarationLineNumber: 7:157 : ALOAD_0 // LAspectBreaker; this line 7 INVOKESPECIAL java.util.ArrayList.&amp;lt;init&amp;gt; V constructor-execution void AspectBreaker.&amp;lt;init&amp;gt; | RETURN line 8 constructor-execution void AspectBreaker.&amp;lt;init&amp;gt; end public void &amp;lt;init&amp;gt; public boolean test ICounterValue[] org.aspectj.weaver.MethodDeclarationLineNumber: 10:201 : method-execution boolean AspectBreaker.test ICounterValue[] | ALOAD_0 // LAspectBreaker; this line 11 | method-call int AspectBreaker.size | | INVOKEVIRTUAL AspectBreaker.size I | method-call int AspectBreaker.size | POP | ICONST_0 line 13 | IRETURN method-execution boolean AspectBreaker.test ICounterValue[] end public boolean test ICounterValue[] end public class AspectBreaker Exception thrown from AspectJ 1.5.3 This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. org.aspectj.weaver.ResolvedType$Array when weaving classes when weaving when batch building BuildConfig[null] #Files=2 org.aspectj.weaver.ResolvedType$Array java.lang.ClassCastException: org.aspectj.weaver.ResolvedType$Array at org.aspectj.weaver.BoundedReferenceType.parameterize BoundedReferenceType.java:64 at org.aspectj.weaver.ResolvedType.parameterize ResolvedType.java:1878 at org.aspectj.weaver.ResolvedMemberImpl.parameterize ResolvedMemberImpl.java:682 at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith ResolvedMemberImpl.java:644 at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith ResolvedMemberImpl.java:597 at org.aspectj.weaver.ReferenceType.getDeclaredMethods ReferenceType.java:512 at org.aspectj.weaver.ResolvedType$4.get ResolvedType.java:226 at org.aspectj.weaver.Iterators$3$1.hasNext Iterators.java:118 at org.aspectj.weaver.Iterators$5.hasNext Iterators.java:171 at org.aspectj.weaver.Iterators$3.hasNext Iterators.java:128 at org.aspectj.weaver.ResolvedType.lookupMember ResolvedType.java:346 at org.aspectj.weaver.ResolvedType.lookupMethod ResolvedType.java:327 at org.aspectj.weaver.World.resolve World.java:530 at org.aspectj.weaver.MemberImpl.resolve MemberImpl.java:96 at org.aspectj.weaver.JoinPointSignatureIterator.addSignaturesUpToFirstDefiningMember JoinPointSignatureIterator.java:109 at org.aspectj.weaver.JoinPointSignatureIterator.&amp;lt;init&amp;gt; JoinPointSignatureIterator.java:51 at org.aspectj.weaver.MemberImpl.getJoinPointSignatures MemberImpl.java:961 at org.aspectj.weaver.patterns.SignaturePattern.matches SignaturePattern.java:286 at org.aspectj.weaver.patterns.KindedPointcut.matchInternal KindedPointcut.java:106 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:52 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.ShadowMunger.match ShadowMunger.java:75 at org.aspectj.weaver.Advice.match Advice.java:112 at org.aspectj.weaver.bcel.BcelAdvice.match BcelAdvice.java:118 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2806 at org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction BcelClassWeaver.java:2768 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2506 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2332 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:494 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:119 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1612 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1563 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1341 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1161 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:455 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving AjPipeliningCompilerAdapter.java:392 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:380 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:98 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:533 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:906 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:260 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:176 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:378 at org.aspectj.tools.ajc.Main.runMain Main.java:253 at org.aspectj.tools.ajc.Main.main Main.java:88 Dec 7, 2006 5:43:33 PM org.aspectj.weaver.tools.Jdk14Trace info INFO: Dumping to /home/logan/zillow/src/code/z4/RandomStuff/./ajcore.20061207.174333.963.txt 1 fail|abort logan@logan01 ~/zillow/src/code/z4/RandomStuff $</description>
    <commit commitTime="2007-10-30 08:46:24" id="764b025806700b5e01b415fe078c8709a8816813"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc154/Ajc154Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="168044" reportTime="2006-12-14 07:10:00">
    <summary>AJDT cannot compile Java 5.0 generic code</summary>
    <description>java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding EclipseFactory.java:264 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromTypeVariableBinding EclipseFactory.java:353 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding EclipseFactory.java:211 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding EclipseFactory.java:254 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromTypeVariableBinding EclipseFactory.java:353 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding EclipseFactory.java:288 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.addSourceTypeBinding EclipseFactory.java:997 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:151 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:301 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:315 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:887 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:271 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:170 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 NullPointerException thrown: null</description>
    <commit commitTime="2007-01-11 10:32:41" id="8944ce6832ffd5d47f7c6c7bac7e67c003aaedcc"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc160/Ajc160Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="168063" reportTime="2006-12-14 10:26:00">
    <summary>ITD fields on interfaces end up transient</summary>
    <description>After compiling following code by acj from aspectj 1.5.3: public interface Persistable extends Serializable { abstract public int getPersitableId ; } ------------------------------ public aspect PersistableImpl { declare parents: Test1 extends Persistable; final public int Persistable.persistableId = System.identityHashCode this ; public int Persistable.getPersitableId { return persistableId; } } ------------------------------------------ public class Test1 { public static void main String[] args { Test1 obj1 = new Test1 ; if obj1 instanceof Persistable { System.out.println "obj1 is Persistable id="+ Persistab le obj1 .getPersitableId ; } else { System.out.println "Not persistable!" ; } } } ------------------------------------- the persistableId field declared as transient within Test1 class: public transient int ajc$interField$test1_PersistableImpl$test1_Persistable$ persistableId; /* synthetic field */ from decompiled code . Expexted result: public int ajc$interField$test1_PersistableImpl$test1_Persistable$ persistableId; /* synthetic field */ As in code compiled by acj from aspectj 1.5.0 .</description>
    <commit commitTime="2007-01-10 16:10:52" id="18535100f9d21aea94134defd298fc277b06ee57"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="168795" reportTime="2006-12-20 18:53:00">
    <summary>ajdoc ant task not available anymore</summary>
    <description>Hello, ajdoc is a very nice tool. However there is currently no ajdoc ant task available anymore. There have been one in the past . Currently the ant task is commented out, there is no documentation anymore. The test case is also commented out. at the 1.5.3 Version Codebase It could be nice if this ant task could be reactivated. In the meantime, I have generated a new version of these files by uncommenting the commented sections. These two versions seem to work very fine in my local test. Arno Schmidmeier http://Arno.blogger.de</description>
    <commit commitTime="2007-02-19 11:22:02" id="3e8e5250e011d25027daf825d21ae55aabe62606"/>
    <fixedFiles>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/Ajdoc.java</file>
      <file>taskdefs/testsrc/org/aspectj/tools/ant/taskdefs/AjdocTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="168840" reportTime="2006-12-21 06:45:00">
    <summary>changes in classes on inpath are not picked up on an incremental build via ajde</summary>
    <description>Given two projects A and B where A is a java project and B is an aj project. Project B has the bin directory of project A on it's inpath. Making a change to a class in project A does not cause a build as expected . However, if we then make a change to project B that causes an incremental build, the changes to the class on the inpath are not picked up. The reason for this is the way the inpath is set against AjBuildConfig. If you use the -inpath setting on the command line then AjBuildConfig.setInpath List is used. This creates a list of BinarySourceFiles which are used to see if anything on the inpath has changed. If you are coming at it from AJDE then CompilerAdapter.configureProjectOptions .. just sets the inpath by asking the buildconfig for the inpath list and adds new entries directly to this list. Consequently, the corresponding BinarySourceFiles are not created and when AjState comes to ask if anything has changed in AjState.getModifiedBinaryFiles we always return an empty list. The fix is to ensure we set the inpath using the setInpath List method rather than adding to the list directly when using AJDE.</description>
    <commit commitTime="2006-12-21 13:22:41" id="e5f15ac120710e8a08c9af3795d5a1e75ea69ebc"/>
    <fixedFiles>
      <file>ajde/src/org/aspectj/ajde/internal/CompilerAdapter.java</file>
    </fixedFiles>
  </bug>
  <bug id="168982" reportTime="2006-12-23 14:17:00">
    <summary>Produce an error on generic concrete @Aspect aspect</summary>
    <description>Compiler should produce an error when it encounters a concrete @AspectJ aspect that is also parameterized. This way @AspectJ aspects will have the same behavior as their code-style counterpart which correctly do produce an error . Currently, generic concrete aspects such as the following are silently ignored i.e. advice in them don't apply . package tracing; import org.aspectj.lang.JoinPoint; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.Before; import org.aspectj.lang.annotation.Pointcut; @Aspect public class TracingAspect2&amp;lt;T&amp;gt; { @Pointcut "execution * * .. " public void traced {} @Before "traced " public void log JoinPoint thisJoinPoint { System.out.println "Entering " ; } }</description>
    <commit commitTime="2008-06-11 22:30:12" id="bc04401627101ce037a5e90852e36baacdab2873"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
    </fixedFiles>
  </bug>
  <bug id="169428" reportTime="2007-01-03 08:52:00">
    <summary>No error is issued for using @DeclareParents inside a non-@Aspect class</summary>
    <description>AJDT: 1.5.0.200612220629 AJ: 1.5.3.200612081116 Unlike @Before etc., there is no error issued for including a @DeclareParents inside a class without an @Aspect annotation. For example, the following code compiles just fine with 'ajc' through AJDT : // Note no @Aspect public class AnAspect { @DeclareParents "test.*" public java.io.Serializable s; } Of course, while it compiles fine, there is no effect of such statement and that can lead to surprises for example, I kept rechecking my type pattern .</description>
    <commit commitTime="2007-11-07 09:56:34" id="ef9eee2a1870d8b7208ea4ce186e293cc70c690d"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc154/Ajc154Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="169706" reportTime="2007-01-05 12:50:00">
    <summary>@annotation compilation problem</summary>
    <description>There is a problem when the @annotation is used in a context where the annotation for the method is not declared neither in the type of the object instance nor in its super type. The following example shows the problem I have detected. The compiler throws the following exception: java.lang.IllegalStateException at org.aspectj.weaver.bcel.BcelShadow.getAnnotations BcelShadow.java:1578 at org.aspectj.weaver.bcel.BcelShadow.initializeKindedAnnotationVars BcelShadow.java:1603 at org.aspectj.weaver.bcel.BcelShadow.getKindedAnnotationVar BcelShadow.java:1087 at org.aspectj.weaver.patterns.AnnotationPointcut.findResidueInternal AnnotationPointcut.java:195 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java ... lasses when weaving when batch building BuildConfig[/home/pacz/workspace/.metadata/.plugins/org.eclipse.ajdt.core/MyBugTest.generated.lst] #Files=7 The example: public class A { @MyAnnotation public void foo { } } public class B extends A { } public class C extends B { } public class Test { public static void main String args[] { C c = new C ; c.foo ; } } public aspect MyAspect { // this throws an exception before MyAnnotation myAnnotation : call @MyAnnotation * *..*.* .. &amp;amp;&amp;amp; @annotation myAnnotation { } // this, however, works fine // before : // call @MyAnnotation * *..*.* .. { // // } }</description>
    <commit commitTime="2007-01-08 15:45:40" id="616672d6f7b71a5cfbff20ec698c3d812dd7fc4a"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/ResolvedType.java</file>
    </fixedFiles>
  </bug>
  <bug id="170102" reportTime="2007-01-10 12:16:00">
    <summary>iajc Ant task doesn't support all warn options</summary>
    <description>The iajc Ant task currently supports only a few of the options provided by the ajc compiler. It would be nice if it could support them all so that builds done using the Ant task generate the same errors/warnings as the ones done within the Eclipse IDE.</description>
    <commit commitTime="2007-01-11 08:43:18" id="53366032c9158823a2d7527df96046f34b773c9c"/>
    <fixedFiles>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="170467" reportTime="2007-01-15 09:17:00">
    <summary>Abstract inter-type declaration using templates in parameters doesn't work.</summary>
    <description>Build ID: M20060921-0945 Tested in Eclipse 3.2.1 M20060921-0945 using AJDT 1.4.1.200611230655 AspectJ 1.5.3.200611221118 . The enclosed source code fails to compile with the message on ExtendedBaseClass: must implement abstract inter-type declaration: void test.BaseClass.setSomething java.util.Set&amp;lt;java.lang.String&amp;gt; Any of the following fixes it: - Declaring BaseClass.setSomething as non-abstract and providing empty body in Aspect file . - Changing parameter from Set&amp;lt;String&amp;gt; to just Set. More information: Source code: public abstract class BaseClass { // Empty. } public aspect BaseClassAspect { public abstract void BaseClass.setSomething Set&amp;lt;String&amp;gt; somethings ; } public class ExtendedBaseClass extends BaseClass { @Override public void setSomething Set&amp;lt;String&amp;gt; somethings { // Doh. } }</description>
    <commit commitTime="2007-01-23 10:45:30" id="8ab740316c2afbe54fbdd081b0e4ad2790c3ef60"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc160/Ajc160Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="171042" reportTime="2007-01-19 09:04:00">
    <summary>[plan] [itds] introductions on anonymous inner classes lead to compilation errors</summary>
    <description>Take the following test case: ----------- package test; public interface Executable { void execute ; } ----------- package test; public aspect RunnableAspect { public void Executable.run { execute ; } declare parents: Executable implements Runnable; } ------------ package test; public class TestClass { public static void main String[] args { Executable executable = new Executable { public void execute { } }; } } ---------- Class Testclass has compilation errros: The type new Executable {} must implement the inherited abstract method Runnable.run innerclassBugReport/test TestClass.java line 6 Non anonymous inner classes do not show this behaviour.</description>
    <commit commitTime="2008-12-02 22:29:49" id="57561d1fef451dfdf395d9983718918268687640"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc163/Ajc163Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="171667" reportTime="2007-01-25 09:24:00">
    <summary>When ordering a Clean with Build Automatico I receive the error below.</summary>
    <description>When executing an Clean Project in Eclipse with Automatic Building I receive the error below. line from the top stack, e.g. "SomeFile.jara:243" java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.problem.AjProblemReporter.methodMustOverride AjProblemReporter.java:380 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements MethodDeclaration.java:153 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve AbstractMethodDeclaration.java:400 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDe ... pter.java:107 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 NullPointerException thrown: null</description>
    <commit commitTime="2007-02-16 10:02:27" id="4177bedfe6e1fe4240fddb7de6b9eaed38b9f0cf"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
    </fixedFiles>
  </bug>
  <bug id="171953" reportTime="2007-01-28 18:38:00">
    <summary>Code that calls introduced generic methods sometimes leads to compilation errors</summary>
    <description>It was really difficult to provide a testcase for this bug because it depends on the order of the source files given to ajc. When compiling the the attached sources with script-bad: ajc -cp "aspectjrt.jar" \ test/ListFactoryAspect.aj \ test/AbstractProcessor.java \ test/ListFactory.java \ test/ListFactoryConsumer.java \ test/Processor.java \ test/SimpleListFactoryConsumer.java \ -source 1.5 -outjar test.jar it results in compilation error: test/SimpleListFactoryConsumer.java:10 [error] Type mismatch: cannot convert from List&amp;lt;T&amp;gt; to List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; list2 = this.createList ; ^^ 1 error Compiling with script-ok: ajc -cp "aspectjrt.jar" \ test/ListFactory.java \ test/ListFactoryConsumer.java \ test/SimpleListFactoryConsumer.java \ test/Processor.java \ test/ListFactoryAspect.aj \ test/AbstractProcessor.java \ -source 1.5 -outjar test.jar everything is fine. I do not know exactly what files are really necessary so there are quite a few.</description>
    <commit commitTime="2007-02-15 10:41:33" id="b385e38ee74765c80845193e32bff2370dd78903"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc160/Ajc160Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="172107" reportTime="2007-01-30 00:08:00">
    <summary>Problem with set pointcut and inherited fields</summary>
    <description>Consider following example: class A { protected int i; } class B extends A { public B { i = 15; // ! set without explicit 'super' keyword, it's ok for the compiler } .... in an aspect: after : set * * {after setting of any field FieldSignature fs = FieldSignature thisJoinPoint.getSignature ; Field f = fs.getField ; // it's null for the join point above assert f != null ; //false } It's strange that the implicit setting of a protected field cause fs.getField to return null whereas explicit setting with keyword super do not. class B extends A { public B { super.i = 15; // it's ok for the pointcut but it's rendundant }</description>
    <commit commitTime="2007-05-21 11:54:16" id="fc33d332792e3bc792b0d6ded56e3d894a1442cc"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="173729" reportTime="2007-02-09 23:17:00">
    <summary>Incremental Compilation Fails on ITD of Aspect</summary>
    <description>I made a change to the aspect JdbcMonitor, adding a single statement: declare parents: Connection+ &amp;amp;&amp;amp; !java..* implements TrackedConnection; this resulted in an false incremental compilation error, which building the project incrementally repeatedly wouldn't fix. It was fixed by doing a clean rebuild. In this case JmxManagement is making a declare parents call and adding an ITD to JdbcMonitor. Here are the messages from the incremental AJDT event trace: AJDT version: 1.4.2.200701190932 for Eclipse 3.2 AspectJ Compiler version: DEVELOPMENT usingVisualiser=true usingXref=true usingCUprovider=false doneAutoOpenXRefViewC:/devel/glassbox = true doneAutoOpenXRefViewI:/devel/glassbox = true doneAutoOpenXRefViewc:/devel/workspace = true ajde.version.at.previous.startup = @AJDEVERSION@ doneAutoOpenXRefViewC:/devel/glassboxAccius = true C:/devel/workspace = true org.aspectj.ajdt.core.compiler.weaver.XLazyThisJoinPoint = true org.aspectj.ajdt.core.compiler.weaver.XReweavable = true org.eclipse.ajdt.internal.ui.tracing.checked.filters = set: Compiler,Compiler / Progress messages,Compiler / Task list messages,Builder,Builder / Classpath ajdocCommand = C:\java\jdk1.5.0_06\lib\tools.jar doneAutoOpenXRefViewc:/devel/glassbox = true doneAutoOpenXRefViewC:/devel/workspace = true c:/devel/workspace = true org.eclipse.ajdt.ui.preferences.ajdtPrefConfigDone = true org.eclipse.ajdt.internal.ui.xref.checked.filters = set: org.aspectj.ajdt.core.compiler.list.UnmatchedSuperTypeInCall = ignore org.eclipse.ajdt.ui.preferences.prefRunForAjdtVersion = 1.2.0.20050413151050 org.aspectj.ajdt.core.compiler.weaver.XSerializableAspects = true doneAutoOpenXRefViewC:/devel/glassboxHead = true 8:08:02 PM =========================================================================================== 8:08:02 PM Build kind = INCREMENTALBUILD 8:08:02 PM Project=monitor, kind of build requested=Incremental AspectJ compilation 8:08:02 PM Classpath=C:\devel\glassboxAccius\monitor\bin;C:/java/jdk1.5.0_09/jre/lib/rt.jar;C:/java/jdk1.5.0_09/jre/lib/jsse.jar;C:/java/jdk1.5.0_09/jre/lib/jce.jar;C:/java/jdk1.5.0_09/jre/lib/charsets.jar;C:/java/jdk1.5.0_09/jre/lib/ext/dnsns.jar;C:/java/jdk1.5.0_09/jre/lib/ext/localedata.jar;C:/java/jdk1.5.0_09/jre/lib/ext/sunjce_provider.jar;C:/java/jdk1.5.0_09/jre/lib/ext/sunpkcs11.jar;C:/eclipse/3.2.1/plugins/org.aspectj.runtime_1.5.4.200701151324/aspectjrt.jar;C:/devel/glassboxAccius/lib/buildtime/jsp-api-2.0.jar;C:/devel/glassboxAccius/lib/testonly/ant-1.6.2.jar;C:/devel/glassboxAccius/lib/testonly/cglib-nodep-2.1.jar;C:/devel/glassboxAccius/lib/testonly/commons-digester.jar;C:/devel/glassboxAccius/lib/testonly/jmock-20050507-203802.jar;C:/devel/glassboxAccius/lib/testonly/jmock-cglib-20050507-203802.jar;C:/devel/glassboxAccius/monitor/lib/runtime/commons-collections.jar;C:/devel/glassboxAccius/lib/aspectj/lib/aspectjweaver.jar;C:/devel/glassboxAccius/lib/buildtime/struts-1.2.4.jar;C:/devel/glassboxAccius/webClient/web/WEB-INF/lib/backport-util-concurrent.jar;C:/devel/glassboxAccius/lib/buildtime/servlet-api-2.4.jar;C:/devel/glassboxAccius/webClient/web/WEB-INF/lib/dwr.jar;C:/devel/glassboxAccius/lib/testonly/spring-mock-1.2.1.jar;C:/devel/glassboxAccius/agent/lib/runtime/commons-logging-1.1.jar;C:/devel/glassboxAccius/lib/buildtime/junit.jar;C:/devel/glassboxAccius/lib/buildtime/bdb-je-3.1.0.jar;C:/devel/glassboxAccius/lib/buildtime/bdb-db.jar;C:/devel/glassboxAccius/lib/buildtime/bdb-dbxml.jar;C:/devel/glassboxAccius/lib/spring/spring.jar;C:/devel/glassboxAccius/lib/buildtime/tc.jar; 8:08:02 PM Preparing for build: planning to be an incremental build 8:08:02 PM Starting incremental compilation loop 1 of possibly 5 8:08:02 PM AJC: compiling source files 8:08:03 PM Timer event: 1151ms: Time to first compiled message 8:08:03 PM AJC: compiled: C:\devel\glassboxAccius\monitor\src\glassbox\monitor\resource\JdbcMonitor.aj 8:08:03 PM addSourcelineTask message=The type JdbcMonitor must implement the inherited abstract method JmxManagement.ManagedBean.getTopic file=C:\devel\glassboxAccius\monitor\src\glassbox\monitor\resource\JdbcMonitor.aj line=27 8:08:03 PM addSourcelineTask message=The type JdbcMonitor must implement the inherited abstract method JmxManagement.ManagedBean.getManagementInterface file=C:\devel\glassboxAccius\monitor\src\glassbox\monitor\resource\JdbcMonitor.aj line=27 8:08:03 PM addSourcelineTask message=The type JdbcMonitor must implement the inherited abstract method JmxManagement.ManagedBean.getOperationName file=C:\devel\glassboxAccius\monitor\src\glassbox\monitor\resource\JdbcMonitor.aj line=27 8:08:03 PM addSourcelineTask message=TODO : push to a stack file=C:\devel\glassboxAccius\monitor\src\glassbox\monitor\resource\JdbcMonitor.aj line=270 8:08:03 PM addSourcelineTask message=The method getResultSetParameters ResultSet from the type JdbcMonitor is never used locally file=C:\devel\glassboxAccius\monitor\src\glassbox\monitor\resource\JdbcMonitor.aj line=448 8:08:03 PM AJDE Callback: finish. Was full build: false 8:08:03 PM Timer event: 1201ms: Total time spent in AJDE 8:08:03 PM Timer event: 60ms: Create element map 4382 rels in project: monitor 8:08:03 PM Types affected during build = 1 8:08:03 PM Timer event: 250ms: Add markers 742 markers 8:08:04 PM Timer event: 1843ms: Total time spent in AJBuilder.build 8:09:33 PM Removed problems and tasks for project monitor 8:09:33 PM Builder: Tidied output folder s , deleted 372 .class files 8:09:33 PM ===========================================================================================</description>
    <commit commitTime="2007-11-06 15:28:41" id="6e6f379eeb5f5cbfb7bc317a59910da3cb73ed5c"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="174449" reportTime="2007-02-16 10:29:00">
    <summary>Can't make a pointcut with a generic parameter?</summary>
    <description>Hi, Maybe my title is wrong... but i don't know very well how to say it... Below is the problem reported by the form emails in the aspectj list: I'm having the following error in something that i hadnt before, this is happening for the broadcast pointcut. What means that error? Exception in thread "main" java.lang.VerifyError: class: section3/raytracer/JGFRayTracerBench, method: setScene_aroundBody1$advice signature: Lsection3/raytracer/JGFRayTracerBench;Lsection3/raytracer/JGFRayTracerBench;Lsection3/raytracer/Scene;Lsection3/raytracer/Replicate;Ljava/lang/Object;Lorg/aspect at section3.JGFRayTracerBenchSizeA.init$_aroundBody0 JGFRayTracerBenchSizeA.java at section3.JGFRayTracerBenchSizeA.init$_aroundBody1$advice JGFRayTracerBenchSizeA.java:128 at section3.JGFRayTracerBenchSizeA.main JGFRayTracerBenchSizeA.java:30 public abstract aspect Replicate&amp;lt;T&amp;gt; { protected pointcut broadcast T servant ; void around T servant : broadcast servant { proceed servant ; } } public aspect ReplicateConcrete extends Replicate&amp;lt;JGFRayTracerBench&amp;gt; { protected pointcut broadcast JGFRayTracerBench servant : call * *.setScene .. &amp;amp;&amp;amp; target servant ; } Answer from the list: Verify Errors are typically bugs in the AspectJ weaver - please try compiling with -XnoInline to see if that helps your situation? My answer: It seems even worst: Exception in thread "main" java.lang.VerifyError: class: section3/JGFRayTracerBenchSizeA, method: main signature: [Ljava/lang/String; V Incompatible object argument for function call Another answer: It is definetly an AspectJ bug that you should raise. In my copy of your scenario I was able to work around it with -XnoInline, but I guess that doesnt seem to work for you. The problem is a missing cast in the generated code that needs to be included because the erasure of your type variable is Object for the generic aspect.</description>
    <commit commitTime="2007-02-27 13:31:29" id="e253331f1e8d3f4aaba29f73fada1cdd1f72a314"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc160/Ajc160Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="175039" reportTime="2007-02-21 16:02:00">
    <summary>ArrayIndexOutOfBoundException Bug with Nested Type in TypeParameters</summary>
    <description>I debugged this stack trace from load-time weaving ajcore files are also available . I found that the signature argument to TypeFactory.createTypeFromSignature String is Pjava/lang/Enum&amp;lt;Ljavax/jws/soap/SOAPBinding$ParameterStyle;&amp;gt;; but the method is erroneously using an empty array of parameters, because it thinks the $ relates to the generic type, not the parameter. It should be fairly easy to reproduce with a test case and to fix with a patch - I'll look at it some more tonight or this week. java.lang.ArrayIndexOutOfBoundsException at org.aspectj.weaver.ResolvedType.getMemberParameterizationMap ResolvedType.java:698 at org.aspectj.weaver.ReferenceType.getDeclaredInterfaces ReferenceType.java:406 at org.aspectj.weaver.ResolvedType.getDirectSupertypes ResolvedType.java:65 at org.aspectj.weaver.patterns.TypePattern.matchesSubtypes TypePattern.java:182 at org.aspectj.weaver.patterns.TypePattern.matchesSubtypes TypePattern.java:169 at org.aspectj.weaver.patterns.TypePattern.matchesStatically TypePattern.java:119 at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.accept ClassLoaderWeavingAdaptor.java:621 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:253 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:78 at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform ClassPreProcessorAgentAdapter.java:52 at sun.instrument.TransformerManager.transform TransformerManager.java:122 at sun.instrument.InstrumentationImpl.transform InstrumentationImpl.java:155 at java.lang.ClassLoader.defineClass Ljava.lang.String;[BIILjava.security.ProtectionDomain; Ljava.lang.Class; Unknown Source at java.security.SecureClassLoader.defineClass SecureClassLoader.java:124 at java.net.URLClassLoader.defineClass URLClassLoader.java:260 at java.net.URLClassLoader.access$100 URLClassLoader.java:56 at java.net.URLClassLoader$1.run URLClassLoader.java:195 at java.net.URLClassLoader.findClass URLClassLoader.java:188 at java.lang.ClassLoader.loadClass Ljava.lang.String;Z Ljava.lang.Class; Unknown Source at sun.misc.Launcher$AppClassLoader.loadClass Launcher.java:268 at java.lang.ClassLoader.loadClass Ljava.lang.String; Ljava.lang.Class; Unknown Source at java.lang.ClassLoader.loadClassFromNative Ljava.lang.String; Ljava.lang.Class; Unknown Source at java.lang.Class.forName Ljava.lang.String;ZLjava.lang.ClassLoader; Ljava.lang.Class; Unknown Source at jrockit.reflect.MemberAccess.getClassFromFieldDesc Ljava.lang.String;ILjava.lang.ClassLoader; Ljava.lang.Class; Unknown Source at jrockit.reflect.MemberAccess.getReturnClassFromMethodDesc Ljava.lang.String;Ljava.lang.ClassLoader; Ljava.lang.Class; Unknown Source</description>
    <commit commitTime="2007-03-06 09:59:56" id="579ec14c9e86cdbaac656872e26f3e954e8f8946"/>
    <fixedFiles>
      <file>weaver/testsrc/org/aspectj/weaver/TypeXTestCase.java</file>
      <file>weaver/src/org/aspectj/weaver/TypeFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="175814" reportTime="2007-02-28 06:28:00">
    <summary>[plan] java.lang.ClassFormatError "no code attribute specified in method 0 &lt;clinit&gt; V at pc=0"</summary>
    <description>If the weaver creates a method that is too large it issues an error see Bug 70201 "Branch target offset too large for short" . error at org\eclipse\jdt\internal\codeassist\CompletionEngine.java::0 problem generating method org.eclipse.jdt.internal.codeassist.CompletionEngine.&amp;lt;clinit&amp;gt; : Code size too big: 76774 Unfortunately it continues weaving the class and returns normally expecting the caller, in this case the weaving adaptor, to look in the message holder to see if there was an error. Currently the adaptor accepts the returned broken byte-code and returns it to the JVM. This bug occurs on J9 which seems to be more diligent that Sun.</description>
    <commit commitTime="2010-08-10 16:03:10" id="3e26fa139931011feb52d7a542deecfb97401ab0"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="176546" reportTime="2007-03-06 19:42:00">
    <summary>Allow custom aop.xml provider through IWeavingContext</summary>
    <description>By default LTW is configured through aop.xml parsed by Xerces or a built-in JDK XML framework. An extension to IWeavingContext could allow an alternative mechanism.</description>
    <commit commitTime="2007-03-07 01:29:16" id="49aad5d5b4767aa81d2dac74ea80d55bdc8e9643"/>
    <fixedFiles>
      <file>loadtime/testsrc/org/aspectj/weaver/loadtime/WeavingContextTest.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/DefaultWeavingContext.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="176905" reportTime="2007-03-10 16:31:00">
    <summary>Failure in chained field declare annotations</summary>
    <description>The following test case breaks with ajc. Interestingly, in a corresponding project AJDT shows the correct two annotations on the field, but a runtime reflection test for the presence of the annotation fails. The annotation has runtime retention and a more direct declare annotation passes the test. See attached failing test case.</description>
    <commit commitTime="2008-08-22 22:09:17" id="d0d65ce7c4a156ccd7e5dcd9bc72a61b853a32f9"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelField.java</file>
    </fixedFiles>
  </bug>
  <bug id="184447" reportTime="2007-04-27 11:00:00">
    <summary>AjLookupEnvironment.java:519</summary>
    <description>Build ID: Eclipse SDK Version: 3.2.2 M20070212-1330 Steps To Reproduce: This occured repeatedly when I saved a .aj file or a .java file that was boing advised. A restart of eclipse made it go away and it has not happen again so I don't know how reproduce it. Sorry. AJDT version 1.4.2.200703020612 More information: java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareAnnotations AjLookupEnvironment.java:803 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:592 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:519 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupE ... AutoBuildJob.run AutoBuildJob.java:217 at org.eclipse.core.internal.jobs.Worker.run Worker.java:58 Compile error: NullPointerException thrown: null</description>
    <commit commitTime="2008-03-21 18:14:28" id="8ce9dcfa94ad3c702fa0bbc8529d6e4b169661a6"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
    </fixedFiles>
  </bug>
  <bug id="185447" reportTime="2007-05-03 17:18:00">
    <summary>[plan] [ataspectj] Abstract @Aspect causing problems</summary>
    <description>Trying to use an abstract @Aspect from a library jar file is causing problems. In the soon to be attached zip of eclipse projects: * logging-library: defines two abstract trivial logging aspects, one in code-style and one in @AspectJ style. * sample-system: uses the code-style abstract aspect successfully * sample-system2: uses the @AspectJ style abstract aspect and won't compile in Eclipse Exception: java.lang.NullPointerException at org.aspectj.weaver.bcel.AtAjAttributes$LazyResolvedPointcutDefinition.getPointcut AtAjAttributes.java:1632 at org.aspectj.weaver.ShadowMunger.addChildNodes ShadowMunger.java:258 at org.aspectj.weaver.ShadowMunger.createHierarchy ShadowMunger.java:247 at org.aspectj.weaver.AsmRelationshipProvider.adviceMunger AsmRelationshipProvider.java:180 at org.aspectj.weaver.Shadow.implementMungers Shadow.java:717 a ... int; Ljava/lang/String; ARETURN end public Object run Object[]</description>
    <commit commitTime="2008-12-01 21:00:43" id="120b47fd215b25f2c3cd7e977a93c206e8a2281a"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</file>
      <file>weaver/src/org/aspectj/weaver/model/AsmRelationshipProvider.java</file>
    </fixedFiles>
  </bug>
  <bug id="186673" reportTime="2007-05-12 03:48:00">
    <summary>iajc/ajc can't handle jars not ending in exactly .jar</summary>
    <description>If the iajc ant task's classpath attribute contains jars not ending in .jar for example some end in .jar.0 , then these jars are ignored from the classpath, confirmed by various compile errors saying that such and such type cannot be resolved. If the same jars are renamed to end in exactly .jar then everything will compile without issue. It appears as if the ajc compiler or perhaps iajc ant task is filtering out jar classpath entries that do not exactly end in .jar. Having jars that end in .X is very common where jars are symlinked. This bug is a blocker to using ajc in any such environment.</description>
    <commit commitTime="2007-11-01 13:25:16" id="47dc21610bdce04e050e70a86f2b1f6e5077b705"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc154/Ajc154Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="186884" reportTime="2007-05-14 17:02:00">
    <summary>Unhandled Kind of New Exception when have advice for Pointcut call Throwable+.new ..</summary>
    <description>I get this error when weaving a LifeRay jar compression-filter.jar . Unhandled kind of new -1: impdep1[254] 1 when implementing on shadow constructor-call void java.lang.NoClassDefFoundError.&amp;lt;init&amp;gt; when weaving classes .. To reproduce: 1 extract TestCase.zip. 2 Go to the expanded TestCase/ directory. 3 do: ajc ThrowablesAspect.aj -log "test.log" -cp "&amp;lt;path to aspectjrt.jar&amp;gt;;lib\commons-logging-1.0.4.jar;lib\servlet-api.jar;lib\util-java.jar;lib\portal-kernel.jar" -injars compression-filter.jar -outjar compression-filter.jar.new 4 ajc will say there are 2 fail|aborts NOTE: No advice or doing "around " doesn't produce the error. The error happens when having at least "before " or "after " advice. I tried empty advice and it still fails. Full Stack Trace: -------- trouble in: public class com.liferay.filters.compression.CompressionFilter extends java.lang.Object implements javax.servlet.Filter: static boolean useCompressionFilter public static final String ENCODING private static final String _ALREADY_FILTERED private static final String _COMPRESS = "compress" private static final String _INCLUDE = "javax.servlet.include.request_uri" private static org.apache.commons.logging.Log _log static Class class$com$liferay$filters$compression$CompressionFilter [Synthetic] public void init javax.servlet.FilterConfig : method-execution void com.liferay.filters.compression.CompressionFilter.init javax.servlet.FilterConfig | RETURN line 80 method-execution void com.liferay.filters.compression.CompressionFilter.init javax.servlet.FilterConfig end public void init javax.servlet.FilterConfig public void doFilter javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain throws java.io.IOException, javax.servlet.ServletException: method-execution void com.liferay.filters.compression.CompressionFilter.doFilter javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain | GETSTATIC com.liferay.filters.compression.CompressionFilter._log Lorg/apache/commons/logging/Log; line 86 | method-call boolean org.apache.commons.logging.Log.isDebugEnabled | | INVOKEINTERFACE org.apache.commons.logging.Log.isDebugEnabled Z | method-call boolean org.apache.commons.logging.Log.isDebugEnabled | IFEQ L1 | GETSTATIC com.liferay.filters.compression.CompressionFilter.useCompressionFilter Z line 87 | IFEQ L0 | GETSTATIC com.liferay.filters.compression.CompressionFilter._log Lorg/apache/commons/logging/Log; line 88 | LDC "Compression is enabled" | method-call void org.apache.commons.logging.Log.debug java.lang.Object | | INVOKEINTERFACE org.apache.commons.logging.Log.debug Ljava/lang/Object; V | method-call void org.apache.commons.logging.Log.debug java.lang.Object | GOTO L1 | L0: GETSTATIC com.liferay.filters.compression.CompressionFilter._log Lorg/apache/commons/logging/Log; line 91 | LDC "Compression is disabled" | method-call void org.apache.commons.logging.Log.debug java.lang.Object | | INVOKEINTERFACE org.apache.commons.logging.Log.debug Ljava/lang/Object; V | method-call void org.apache.commons.logging.Log.debug java.lang.Object | L1: ALOAD_1 // Ljavax/servlet/ServletRequest; req line 95 | CHECKCAST javax.servlet.http.HttpServletRequest | ASTORE 4 // Ljavax/servlet/http/HttpServletRequest; httpReq | ALOAD_2 // Ljavax/servlet/ServletResponse; res line 96 | CHECKCAST javax.servlet.http.HttpServletResponse | ASTORE 5 // Ljavax/servlet/http/HttpServletResponse; httpRes | ALOAD 4 // Ljavax/servlet/http/HttpServletRequest; httpReq line 98 | GETSTATIC com.liferay.filters.compression.CompressionFilter.ENCODING Ljava/lang/String; | method-call void javax.servlet.http.HttpServletRequest.setCharacterEncoding java.lang.String | | INVOKEINTERFACE javax.servlet.http.HttpServletRequest.setCharacterEncoding Ljava/lang/String; V | method-call void javax.servlet.http.HttpServletRequest.setCharacterEncoding java.lang.String | ALOAD 4 // Ljavax/servlet/http/HttpServletRequest; httpReq line 100 | method-call java.lang.String com.liferay.util.Http.getCompleteURL javax.servlet.http.HttpServletRequest | | INVOKESTATIC com.liferay.util.Http.getCompleteURL Ljavax/servlet/http/HttpServletRequest; Ljava/lang/String; | method-call java.lang.String com.liferay.util.Http.getCompleteURL javax.servlet.http.HttpServletRequest | ASTORE 6 // Ljava/lang/String; completeURL | GETSTATIC com.liferay.filters.compression.CompressionFilter.useCompressionFilter Z line 102 | IFEQ L3 | ALOAD_0 // Lcom/liferay/filters/compression/CompressionFilter; this | ALOAD 4 // Ljavax/servlet/http/HttpServletRequest; httpReq | method-call boolean com.liferay.filters.compression.CompressionFilter.isCompress javax.servlet.http.HttpServletRequest | | INVOKEVIRTUAL com.liferay.filters.compression.CompressionFilter.isCompress Ljavax/servlet/http/HttpServletRequest; Z | method-call boolean com.liferay.filters.compression.CompressionFilter.isCompress javax.servlet.http.HttpServletRequest | IFEQ L3 | ALOAD_0 // Lcom/liferay/filters/compression/CompressionFilter; this | ALOAD 4 // Ljavax/servlet/http/HttpServletRequest; httpReq | method-call boolean com.liferay.filters.compression.CompressionFilter.isInclude javax.servlet.http.HttpServletRequest | | INVOKEVIRTUAL com.liferay.filters.compression.CompressionFilter.isInclude Ljavax/servlet/http/HttpServletRequest; Z | method-call boolean com.liferay.filters.compression.CompressionFilter.isInclude javax.servlet.http.HttpServletRequest | IFNE L3 | ALOAD 4 // Ljavax/servlet/http/HttpServletRequest; httpReq | method-call boolean com.liferay.util.BrowserSniffer.acceptsGzip javax.servlet.http.HttpServletRequest | | INVOKESTATIC com.liferay.util.BrowserSniffer.acceptsGzip Ljavax/servlet/http/HttpServletRequest; Z | method-call boolean com.liferay.util.BrowserSniffer.acceptsGzip javax.servlet.http.HttpServletRequest | IFEQ L3 | ALOAD_0 // Lcom/liferay/filters/compression/CompressionFilter; this | ALOAD 4 // Ljavax/servlet/http/HttpServletRequest; httpReq | method-call boolean com.liferay.filters.compression.CompressionFilter.isAlreadyFiltered javax.servlet.http.HttpServletRequest | | INVOKEVIRTUAL com.liferay.filters.compression.CompressionFilter.isAlreadyFiltered Ljavax/servlet/http/HttpServletRequest; Z | method-call boolean com.liferay.filters.compression.CompressionFilter.isAlreadyFiltered javax.servlet.http.HttpServletRequest | IFNE L3 | GETSTATIC com.liferay.filters.compression.CompressionFilter._log Lorg/apache/commons/logging/Log; line 106 | method-call boolean org.apache.commons.logging.Log.isDebugEnabled | | INVOKEINTERFACE org.apache.commons.logging.Log.isDebugEnabled Z | method-call boolean org.apache.commons.logging.Log.isDebugEnabled | IFEQ L2 | GETSTATIC com.liferay.filters.compression.CompressionFilter._log Lorg/apache/commons/logging/Log; line 107 | NEW java.lang.StringBuffer | DUP | LDC "Compressing " | constructor-call void java.lang.StringBuffer.&amp;lt;init&amp;gt; java.lang.String | | INVOKESPECIAL java.lang.StringBuffer.&amp;lt;init&amp;gt; Ljava/lang/String; V | constructor-call void java.lang.StringBuffer.&amp;lt;init&amp;gt; java.lang.String | ALOAD 6 // Ljava/lang/String; completeURL | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.String | | INVOKEVIRTUAL java.lang.StringBuffer.append Ljava/lang/String; Ljava/lang/StringBuffer; | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.String | method-call java.lang.String java.lang.StringBuffer.toString | | INVOKEVIRTUAL java.lang.StringBuffer.toString Ljava/lang/String; | method-call java.lang.String java.lang.StringBuffer.toString | method-call void org.apache.commons.logging.Log.debug java.lang.Object | | INVOKEINTERFACE org.apache.commons.logging.Log.debug Ljava/lang/Object; V | method-call void org.apache.commons.logging.Log.debug java.lang.Object | L2: ALOAD 4 // Ljavax/servlet/http/HttpServletRequest; httpReq line 110 | GETSTATIC com.liferay.filters.compression.CompressionFilter._ALREADY_FILTERED Ljava/lang/String; | GETSTATIC java.lang.Boolean.TRUE Ljava/lang/Boolean; | method-call void javax.servlet.http.HttpServletRequest.setAttribute java.lang.String, java.lang.Object | | INVOKEINTERFACE javax.servlet.http.HttpServletRequest.setAttribute Ljava/lang/String;Ljava/lang/Object; V | method-call void javax.servlet.http.HttpServletRequest.setAttribute java.lang.String, java.lang.Object | NEW com.liferay.filters.compression.CompressionResponse line 112 | DUP | ALOAD 5 // Ljavax/servlet/http/HttpServletResponse; httpRes | constructor-call void com.liferay.filters.compression.CompressionResponse.&amp;lt;init&amp;gt; javax.servlet.http.HttpServletResponse | | INVOKESPECIAL com.liferay.filters.compression.CompressionResponse.&amp;lt;init&amp;gt; Ljavax/servlet/http/HttpServletResponse; V | constructor-call void com.liferay.filters.compression.CompressionResponse.&amp;lt;init&amp;gt; javax.servlet.http.HttpServletResponse | ASTORE 7 // Lcom/liferay/filters/compression/CompressionResponse; compressionResponse | ALOAD_3 // Ljavax/servlet/FilterChain; chain line 115 | ALOAD_1 // Ljavax/servlet/ServletRequest; req | ALOAD 7 // Lcom/liferay/filters/compression/CompressionResponse; compressionResponse | method-call void javax.servlet.FilterChain.doFilter javax.servlet.ServletRequest, javax.servlet.ServletResponse | | INVOKEINTERFACE javax.servlet.FilterChain.doFilter Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse; V | method-call void javax.servlet.FilterChain.doFilter javax.servlet.ServletRequest, javax.servlet.ServletResponse | ALOAD 7 // Lcom/liferay/filters/compression/CompressionResponse; compressionResponse line 117 | method-call void com.liferay.filters.compression.CompressionResponse.finishResponse | | INVOKEVIRTUAL com.liferay.filters.compression.CompressionResponse.finishResponse V | method-call void com.liferay.filters.compression.CompressionResponse.finishResponse | GOTO L5 | L3: GETSTATIC com.liferay.filters.compression.CompressionFilter._log Lorg/apache/commons/logging/Log; line 120 | method-call boolean org.apache.commons.logging.Log.isDebugEnabled | | INVOKEINTERFACE org.apache.commons.logging.Log.isDebugEnabled Z | method-call boolean org.apache.commons.logging.Log.isDebugEnabled | IFEQ L4 | GETSTATIC com.liferay.filters.compression.CompressionFilter._log Lorg/apache/commons/logging/Log; line 121 | NEW java.lang.StringBuffer | DUP | LDC "Not compressing " | constructor-call void java.lang.StringBuffer.&amp;lt;init&amp;gt; java.lang.String | | INVOKESPECIAL java.lang.StringBuffer.&amp;lt;init&amp;gt; Ljava/lang/String; V | constructor-call void java.lang.StringBuffer.&amp;lt;init&amp;gt; java.lang.String | ALOAD 6 // Ljava/lang/String; completeURL | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.String | | INVOKEVIRTUAL java.lang.StringBuffer.append Ljava/lang/String; Ljava/lang/StringBuffer; | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.String | method-call java.lang.String java.lang.StringBuffer.toString | | INVOKEVIRTUAL java.lang.StringBuffer.toString Ljava/lang/String; | method-call java.lang.String java.lang.StringBuffer.toString | method-call void org.apache.commons.logging.Log.debug java.lang.Object | | INVOKEINTERFACE org.apache.commons.logging.Log.debug Ljava/lang/Object; V | method-call void org.apache.commons.logging.Log.debug java.lang.Object | L4: ALOAD_3 // Ljavax/servlet/FilterChain; chain line 124 | ALOAD_1 // Ljavax/servlet/ServletRequest; req | ALOAD_2 // Ljavax/servlet/ServletResponse; res | method-call void javax.servlet.FilterChain.doFilter javax.servlet.ServletRequest, javax.servlet.ServletResponse | | INVOKEINTERFACE javax.servlet.FilterChain.doFilter Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse; V | method-call void javax.servlet.FilterChain.doFilter javax.servlet.ServletRequest, javax.servlet.ServletResponse | L5: RETURN line 126 method-execution void com.liferay.filters.compression.CompressionFilter.doFilter javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain end public void doFilter javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain throws java.io.IOException, javax.servlet.ServletException public void destroy : method-execution void com.liferay.filters.compression.CompressionFilter.destroy | RETURN line 129 method-execution void com.liferay.filters.compression.CompressionFilter.destroy end public void destroy protected boolean isAlreadyFiltered javax.servlet.http.HttpServletRequest : method-execution boolean com.liferay.filters.compression.CompressionFilter.isAlreadyFiltered javax.servlet.http.HttpServletRequest | ALOAD_1 // Ljavax/servlet/http/HttpServletRequest; req line 132 | GETSTATIC com.liferay.filters.compression.CompressionFilter._ALREADY_FILTERED Ljava/lang/String; | method-call java.lang.Object javax.servlet.http.HttpServletRequest.getAttribute java.lang.String | | INVOKEINTERFACE javax.servlet.http.HttpServletRequest.getAttribute Ljava/lang/String; Ljava/lang/Object; | method-call java.lang.Object javax.servlet.http.HttpServletRequest.getAttribute java.lang.String | IFNULL L0 | ICONST_1 line 133 | IRETURN | L0: ICONST_0 line 136 | IRETURN method-execution boolean com.liferay.filters.compression.CompressionFilter.isAlreadyFiltered javax.servlet.http.HttpServletRequest end protected boolean isAlreadyFiltered javax.servlet.http.HttpServletRequest protected boolean isCompress javax.servlet.http.HttpServletRequest : method-execution boolean com.liferay.filters.compression.CompressionFilter.isCompress javax.servlet.http.HttpServletRequest | ALOAD_1 // Ljavax/servlet/http/HttpServletRequest; req line 141 | LDC "compress" | ICONST_1 | method-call boolean com.liferay.util.ParamUtil.get javax.servlet.ServletRequest, java.lang.String, boolean | | INVOKESTATIC com.liferay.util.ParamUtil.get Ljavax/servlet/ServletRequest;Ljava/lang/String;Z Z | method-call boolean com.liferay.util.ParamUtil.get javax.servlet.ServletRequest, java.lang.String, boolean | IFNE L0 | ICONST_0 line 142 | IRETURN | L0: ALOAD_1 // Ljavax/servlet/http/HttpServletRequest; req line 151 | LDC "p_p_state" | method-call java.lang.String com.liferay.util.ParamUtil.getString javax.servlet.ServletRequest, java.lang.String | | INVOKESTATIC com.liferay.util.ParamUtil.getString Ljavax/servlet/ServletRequest;Ljava/lang/String; Ljava/lang/String; | method-call java.lang.String com.liferay.util.ParamUtil.getString javax.servlet.ServletRequest, java.lang.String | ASTORE_2 // Ljava/lang/String; windowState | ALOAD_2 // Ljava/lang/String; windowState line 153 | LDC "exclusive" | method-call boolean java.lang.String.equals java.lang.Object | | INVOKEVIRTUAL java.lang.String.equals Ljava/lang/Object; Z | method-call boolean java.lang.String.equals java.lang.Object | IFEQ L1 | ICONST_0 line 154 | IRETURN | L1: ICONST_1 line 157 | IRETURN method-execution boolean com.liferay.filters.compression.CompressionFilter.isCompress javax.servlet.http.HttpServletRequest end protected boolean isCompress javax.servlet.http.HttpServletRequest protected boolean isInclude javax.servlet.http.HttpServletRequest : method-execution boolean com.liferay.filters.compression.CompressionFilter.isInclude javax.servlet.http.HttpServletRequest | ALOAD_1 // Ljavax/servlet/http/HttpServletRequest; req line 163 | LDC "javax.servlet.include.request_uri" | method-call java.lang.Object javax.servlet.http.HttpServletRequest.getAttribute java.lang.String | | INVOKEINTERFACE javax.servlet.http.HttpServletRequest.getAttribute Ljava/lang/String; Ljava/lang/Object; | method-call java.lang.Object javax.servlet.http.HttpServletRequest.getAttribute java.lang.String | CHECKCAST java.lang.String | ASTORE_2 // Ljava/lang/String; uri | ALOAD_2 // Ljava/lang/String; uri line 165 | IFNONNULL L0 | ICONST_0 line 166 | IRETURN | L0: ICONST_1 line 169 | IRETURN method-execution boolean com.liferay.filters.compression.CompressionFilter.isInclude javax.servlet.http.HttpServletRequest end protected boolean isInclude javax.servlet.http.HttpServletRequest static Class class String, boolean : method-execution java.lang.Class com.liferay.filters.compression.CompressionFilter.class java.lang.String, boolean | catch java.lang.ClassNotFoundException -&amp;gt; E0 | | ALOAD_0 line 0 | | method-call java.lang.Class java.lang.Class.forName java.lang.String | | | INVOKESTATIC java.lang.Class.forName Ljava/lang/String; Ljava/lang/Class; | | method-call java.lang.Class java.lang.Class.forName java.lang.String | | ILOAD_1 | | IFNE L0 | | method-call java.lang.Class java.lang.Class.getComponentType | | | INVOKEVIRTUAL java.lang.Class.getComponentType Ljava/lang/Class; | | method-call java.lang.Class java.lang.Class.getComponentType | | L0: ARETURN | catch java.lang.ClassNotFoundException -&amp;gt; E0 | E0: NEW java.lang.NoClassDefFoundError | DUP_X1 | constructor-call void java.lang.NoClassDefFoundError.&amp;lt;init&amp;gt; | | INVOKESPECIAL java.lang.NoClassDefFoundError.&amp;lt;init&amp;gt; V | constructor-call void java.lang.NoClassDefFoundError.&amp;lt;init&amp;gt; | method-call java.lang.Throwable java.lang.Throwable.initCause java.lang.Throwable | | INVOKEVIRTUAL java.lang.Throwable.initCause Ljava/lang/Throwable; Ljava/lang/Throwable; | method-call java.lang.Throwable java.lang.Throwable.initCause java.lang.Throwable | ATHROW method-execution java.lang.Class com.liferay.filters.compression.CompressionFilter.class java.lang.String, boolean end static Class class String, boolean public void &amp;lt;init&amp;gt; : ALOAD_0 // Lcom/liferay/filters/compression/CompressionFilter; this line 52 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V constructor-execution void com.liferay.filters.compression.CompressionFilter.&amp;lt;init&amp;gt; | RETURN constructor-execution void com.liferay.filters.compression.CompressionFilter.&amp;lt;init&amp;gt; end public void &amp;lt;init&amp;gt; private static final void &amp;lt;clinit&amp;gt; : staticinitialization void com.liferay.filters.compression.CompressionFilter.&amp;lt;clinit&amp;gt; | GETSTATIC com.liferay.filters.compression.CompressionFilter.class$com$liferay$filters$compression$CompressionFilter Ljava/lang/Class; line 54 | DUP | IFNONNULL L0 | POP | LDC "[Lcom.liferay.filters.compression.CompressionFilter;" | ICONST_0 | method-call java.lang.Class com.liferay.filters.compression.CompressionFilter.class java.lang.String, boolean | | INVOKESTATIC com.liferay.filters.compression.CompressionFilter.class Ljava/lang/String;Z Ljava/lang/Class; | method-call java.lang.Class com.liferay.filters.compression.CompressionFilter.class java.lang.String, boolean | DUP | PUTSTATIC com.liferay.filters.compression.CompressionFilter.class$com$liferay$filters$compression$CompressionFilter Ljava/lang/Class; | method-call java.lang.String java.lang.Class.getName | | L0: INVOKEVIRTUAL java.lang.Class.getName Ljava/lang/String; | method-call java.lang.String java.lang.Class.getName | method-call java.lang.String com.liferay.util.SystemProperties.get java.lang.String | | INVOKESTATIC com.liferay.util.SystemProperties.get Ljava/lang/String; Ljava/lang/String; | method-call java.lang.String com.liferay.util.SystemProperties.get java.lang.String | ICONST_1 | method-call boolean com.liferay.util.GetterUtil.getBoolean java.lang.String, boolean | | INVOKESTATIC com.liferay.util.GetterUtil.getBoolean Ljava/lang/String;Z Z | method-call boolean com.liferay.util.GetterUtil.getBoolean java.lang.String, boolean | PUTSTATIC com.liferay.filters.compression.CompressionFilter.useCompressionFilter Z | GETSTATIC com.liferay.filters.compression.CompressionFilter.useCompressionFilter Z line 62 | IFEQ L3 | method-call boolean com.liferay.portal.kernel.util.ServerDetector.isJBoss | | INVOKESTATIC com.liferay.portal.kernel.util.ServerDetector.isJBoss Z line 63 | method-call boolean com.liferay.portal.kernel.util.ServerDetector.isJBoss | IFNE L1 | method-call boolean com.liferay.portal.kernel.util.ServerDetector.isJetty | | INVOKESTATIC com.liferay.portal.kernel.util.ServerDetector.isJetty Z | method-call boolean com.liferay.portal.kernel.util.ServerDetector.isJetty | IFNE L1 | method-call boolean com.liferay.portal.kernel.util.ServerDetector.isJOnAS | | INVOKESTATIC com.liferay.portal.kernel.util.ServerDetector.isJOnAS Z | method-call boolean com.liferay.portal.kernel.util.ServerDetector.isJOnAS | IFNE L1 | method-call boolean com.liferay.portal.kernel.util.ServerDetector.isOC4J | | INVOKESTATIC com.liferay.portal.kernel.util.ServerDetector.isOC4J Z | method-call boolean com.liferay.portal.kernel.util.ServerDetector.isOC4J | IFNE L1 | method-call boolean com.liferay.portal.kernel.util.ServerDetector.isOrion | | INVOKESTATIC com.liferay.portal.kernel.util.ServerDetector.isOrion Z | method-call boolean com.liferay.portal.kernel.util.ServerDetector.isOrion | IFNE L1 | method-call boolean com.liferay.portal.kernel.util.ServerDetector.isTomcat | | INVOKESTATIC com.liferay.portal.kernel.util.ServerDetector.isTomcat Z | method-call boolean com.liferay.portal.kernel.util.ServerDetector.isTomcat | IFEQ L2 | L1: ICONST_1 line 67 | PUTSTATIC com.liferay.filters.compression.CompressionFilter.useCompressionFilter Z | GOTO L3 | L2: ICONST_0 line 70 | PUTSTATIC com.liferay.filters.compression.CompressionFilter.useCompressionFilter Z | L3: NEW java.lang.StringBuffer line 75 | DUP | constructor-call void java.lang.StringBuffer.&amp;lt;init&amp;gt; | | INVOKESPECIAL java.lang.StringBuffer.&amp;lt;init&amp;gt; V | constructor-call void java.lang.StringBuffer.&amp;lt;init&amp;gt; | GETSTATIC com.liferay.filters.compression.CompressionFilter.class$com$liferay$filters$compression$CompressionFilter Ljava/lang/Class; | DUP | IFNONNULL L4 | POP | LDC "[Lcom.liferay.filters.compression.CompressionFilter;" | ICONST_0 | method-call java.lang.Class com.liferay.filters.compression.CompressionFilter.class java.lang.String, boolean | | INVOKESTATIC com.liferay.filters.compression.CompressionFilter.class Ljava/lang/String;Z Ljava/lang/Class; | method-call java.lang.Class com.liferay.filters.compression.CompressionFilter.class java.lang.String, boolean | DUP | PUTSTATIC com.liferay.filters.compression.CompressionFilter.class$com$liferay$filters$compression$CompressionFilter Ljava/lang/Class; | method-call java.lang.String java.lang.Class.getName | | L4: INVOKEVIRTUAL java.lang.Class.getName Ljava/lang/String; | method-call java.lang.String java.lang.Class.getName | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.String | | INVOKEVIRTUAL java.lang.StringBuffer.append Ljava/lang/String; Ljava/lang/StringBuffer; | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.String | LDC ".encoding" | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.String | | INVOKEVIRTUAL java.lang.StringBuffer.append Ljava/lang/String; Ljava/lang/StringBuffer; | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.String | method-call java.lang.String java.lang.StringBuffer.toString | | INVOKEVIRTUAL java.lang.StringBuffer.toString Ljava/lang/String; | method-call java.lang.String java.lang.StringBuffer.toString | method-call java.lang.String com.liferay.util.SystemProperties.get java.lang.String | | INVOKESTATIC com.liferay.util.SystemProperties.get Ljava/lang/String; Ljava/lang/String; | method-call java.lang.String com.liferay.util.SystemProperties.get java.lang.String | LDC "UTF-8" | method-call java.lang.String com.liferay.util.GetterUtil.getString java.lang.String, java.lang.String | | INVOKESTATIC com.liferay.util.GetterUtil.getString Ljava/lang/String;Ljava/lang/String; Ljava/lang/String; | method-call java.lang.String com.liferay.util.GetterUtil.getString java.lang.String, java.lang.String | PUTSTATIC com.liferay.filters.compression.CompressionFilter.ENCODING Ljava/lang/String; | NEW java.lang.StringBuffer line 173 | DUP | constructor-call void java.lang.StringBuffer.&amp;lt;init&amp;gt; | | INVOKESPECIAL java.lang.StringBuffer.&amp;lt;init&amp;gt; V | constructor-call void java.lang.StringBuffer.&amp;lt;init&amp;gt; | GETSTATIC com.liferay.filters.compression.CompressionFilter.class$com$liferay$filters$compression$CompressionFilter Ljava/lang/Class; | DUP | IFNONNULL L5 | POP | LDC "[Lcom.liferay.filters.compression.CompressionFilter;" | ICONST_0 | method-call java.lang.Class com.liferay.filters.compression.CompressionFilter.class java.lang.String, boolean | | INVOKESTATIC com.liferay.filters.compression.CompressionFilter.class Ljava/lang/String;Z Ljava/lang/Class; | method-call java.lang.Class com.liferay.filters.compression.CompressionFilter.class java.lang.String, boolean | DUP | PUTSTATIC com.liferay.filters.compression.CompressionFilter.class$com$liferay$filters$compression$CompressionFilter Ljava/lang/Class; | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.Object | | L5: INVOKEVIRTUAL java.lang.StringBuffer.append Ljava/lang/Object; Ljava/lang/StringBuffer; | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.Object | LDC "_ALREADY_FILTERED" | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.String | | INVOKEVIRTUAL java.lang.StringBuffer.append Ljava/lang/String; Ljava/lang/StringBuffer; | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.String | method-call java.lang.String java.lang.StringBuffer.toString | | INVOKEVIRTUAL java.lang.StringBuffer.toString Ljava/lang/String; | method-call java.lang.String java.lang.StringBuffer.toString | PUTSTATIC com.liferay.filters.compression.CompressionFilter._ALREADY_FILTERED Ljava/lang/String; | GETSTATIC com.liferay.filters.compression.CompressionFilter.class$com$liferay$filters$compression$CompressionFilter Ljava/lang/Class; line 180 | DUP | IFNONNULL L6 | POP | LDC "[Lcom.liferay.filters.compression.CompressionFilter;" | ICONST_0 | method-call java.lang.Class com.liferay.filters.compression.CompressionFilter.class java.lang.String, boolean | | INVOKESTATIC com.liferay.filters.compression.CompressionFilter.class Ljava/lang/String;Z Ljava/lang/Class; | method-call java.lang.Class com.liferay.filters.compression.CompressionFilter.class java.lang.String, boolean | DUP | PUTSTATIC com.liferay.filters.compression.CompressionFilter.class$com$liferay$filters$compression$CompressionFilter Ljava/lang/Class; | method-call org.apache.commons.logging.Log org.apache.commons.logging.LogFactory.getLog java.lang.Class | | L6: INVOKESTATIC org.apache.commons.logging.LogFactory.getLog Ljava/lang/Class; Lorg/apache/commons/logging/Log; | method-call org.apache.commons.logging.Log org.apache.commons.logging.LogFactory.getLog java.lang.Class | PUTSTATIC com.liferay.filters.compression.CompressionFilter._log Lorg/apache/commons/logging/Log; | RETURN staticinitialization void com.liferay.filters.compression.CompressionFilter.&amp;lt;clinit&amp;gt; end private static final void &amp;lt;clinit&amp;gt; end public class com.liferay.filters.compression.CompressionFilter Exception thrown from AspectJ 1.5.2 This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. Unhandled kind of new -1: impdep1[254] 1 when implementing on shadow constructor-call void java.lang.NoClassDefFoundError.&amp;lt;init&amp;gt; when weaving classes when weaving when batch building BuildConfig[null] #Files=1 Unhandled kind of new -1: impdep1[254] 1 java.lang.RuntimeException: Unhandled kind of new -1: impdep1[254] 1 at org.aspectj.weaver.bcel.BcelShadow.deleteNewAndDup BcelShadow.java:226 at org.aspectj.weaver.bcel.BcelShadow.prepareForMungers BcelShadow.java:284 at org.aspectj.weaver.Shadow.implement Shadow.java:470 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:2825 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:502 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:115 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1574 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1525 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1305 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1127 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:321 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:192 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:887 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:244 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:163 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:367 at org.aspectj.tools.ajc.Main.runMain Main.java:246 at org.aspectj.tools.ajc.Main.main Main.java:86 trouble in: public class com.liferay.filters.compression.CompressionStream extends javax.servlet.ServletOutputStream: private static final String _CONTENT_ENCODING = "Content-Encoding" private static final String _GZIP = "gzip" private static org.apache.commons.logging.Log _log private javax.servlet.http.HttpServletResponse _res private javax.servlet.ServletOutputStream _output private java.io.OutputStream _bufferedOutput private boolean _closed static Class class$com$liferay$filters$compression$CompressionStream [Synthetic] public void close throws java.io.IOException: method-execution void com.liferay.filters.compression.CompressionStream.close | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 56 | GETFIELD com.liferay.filters.compression.CompressionStream._closed Z | IFEQ L0 | constructor-call void java.io.IOException.&amp;lt;init&amp;gt; | | INVOKESTATIC com.myco.error.ThrowablesAspect.aspectOf Lcom/myco/error/ThrowablesAspect; | | INVOKEVIRTUAL com.myco.error.ThrowablesAspect.ajc$before$com_myco_error_ThrowablesAspect$1$45ca0c36 V | | NEW java.io.IOException | | DUP | | INVOKESPECIAL java.io.IOException.&amp;lt;init&amp;gt; V line 57 | constructor-call void java.io.IOException.&amp;lt;init&amp;gt; | ATHROW | L0: ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 60 | GETFIELD com.liferay.filters.compression.CompressionStream._bufferedOutput Ljava/io/OutputStream; | INSTANCEOF java.io.ByteArrayOutputStream | IFEQ L1 | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 61 | GETFIELD com.liferay.filters.compression.CompressionStream._bufferedOutput Ljava/io/OutputStream; | CHECKCAST java.io.ByteArrayOutputStream | ASTORE_1 // Ljava/io/ByteArrayOutputStream; baos | NEW java.io.ByteArrayOutputStream line 63 | DUP | constructor-call void java.io.ByteArrayOutputStream.&amp;lt;init&amp;gt; | | INVOKESPECIAL java.io.ByteArrayOutputStream.&amp;lt;init&amp;gt; V | constructor-call void java.io.ByteArrayOutputStream.&amp;lt;init&amp;gt; | ASTORE_2 // Ljava/io/ByteArrayOutputStream; compressedContent | NEW java.util.zip.GZIPOutputStream line 66 | DUP | ALOAD_2 // Ljava/io/ByteArrayOutputStream; compressedContent | constructor-call void java.util.zip.GZIPOutputStream.&amp;lt;init&amp;gt; java.io.OutputStream | | INVOKESPECIAL java.util.zip.GZIPOutputStream.&amp;lt;init&amp;gt; Ljava/io/OutputStream; V | constructor-call void java.util.zip.GZIPOutputStream.&amp;lt;init&amp;gt; java.io.OutputStream | ASTORE_3 // Ljava/util/zip/GZIPOutputStream; gzipOutput | ALOAD_3 // Ljava/util/zip/GZIPOutputStream; gzipOutput line 69 | ALOAD_1 // Ljava/io/ByteArrayOutputStream; baos | method-call byte[] java.io.ByteArrayOutputStream.toByteArray | | INVOKEVIRTUAL java.io.ByteArrayOutputStream.toByteArray [B | method-call byte[] java.io.ByteArrayOutputStream.toByteArray | method-call void java.util.zip.GZIPOutputStream.write byte[] | | INVOKEVIRTUAL java.util.zip.GZIPOutputStream.write [B V | method-call void java.util.zip.GZIPOutputStream.write byte[] | ALOAD_3 // Ljava/util/zip/GZIPOutputStream; gzipOutput line 70 | method-call void java.util.zip.GZIPOutputStream.finish | | INVOKEVIRTUAL java.util.zip.GZIPOutputStream.finish V | method-call void java.util.zip.GZIPOutputStream.finish | ALOAD_2 // Ljava/io/ByteArrayOutputStream; compressedContent line 72 | method-call byte[] java.io.ByteArrayOutputStream.toByteArray | | INVOKEVIRTUAL java.io.ByteArrayOutputStream.toByteArray [B | method-call byte[] java.io.ByteArrayOutputStream.toByteArray | ASTORE 4 // [B compressedBytes | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 74 | GETFIELD com.liferay.filters.compression.CompressionStream._res Ljavax/servlet/http/HttpServletResponse; | ALOAD 4 // [B compressedBytes | ARRAYLENGTH | method-call void javax.servlet.http.HttpServletResponse.setContentLength int | | INVOKEINTERFACE javax.servlet.http.HttpServletResponse.setContentLength I V | method-call void javax.servlet.http.HttpServletResponse.setContentLength int | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 75 | GETFIELD com.liferay.filters.compression.CompressionStream._res Ljavax/servlet/http/HttpServletResponse; | LDC "Content-Encoding" | LDC "gzip" | method-call void javax.servlet.http.HttpServletResponse.addHeader java.lang.String, java.lang.String | | INVOKEINTERFACE javax.servlet.http.HttpServletResponse.addHeader Ljava/lang/String;Ljava/lang/String; V | method-call void javax.servlet.http.HttpServletResponse.addHeader java.lang.String, java.lang.String | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 77 | GETFIELD com.liferay.filters.compression.CompressionStream._output Ljavax/servlet/ServletOutputStream; | ALOAD 4 // [B compressedBytes | method-call void javax.servlet.ServletOutputStream.write byte[] | | INVOKEVIRTUAL javax.servlet.ServletOutputStream.write [B V | method-call void javax.servlet.ServletOutputStream.write byte[] | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 78 | GETFIELD com.liferay.filters.compression.CompressionStream._output Ljavax/servlet/ServletOutputStream; | method-call void javax.servlet.ServletOutputStream.flush | | INVOKEVIRTUAL javax.servlet.ServletOutputStream.flush V | method-call void javax.servlet.ServletOutputStream.flush | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 79 | GETFIELD com.liferay.filters.compression.CompressionStream._output Ljavax/servlet/ServletOutputStream; | method-call void javax.servlet.ServletOutputStream.close | | INVOKEVIRTUAL javax.servlet.ServletOutputStream.close V | method-call void javax.servlet.ServletOutputStream.close | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 81 | ICONST_1 | PUTFIELD com.liferay.filters.compression.CompressionStream._closed Z | GOTO L2 | L1: ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 83 | GETFIELD com.liferay.filters.compression.CompressionStream._bufferedOutput Ljava/io/OutputStream; | INSTANCEOF java.util.zip.GZIPOutputStream | IFEQ L2 | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 84 | GETFIELD com.liferay.filters.compression.CompressionStream._bufferedOutput Ljava/io/OutputStream; | CHECKCAST java.util.zip.GZIPOutputStream | ASTORE_1 // Ljava/util/zip/GZIPOutputStream; gzipOutput | ALOAD_1 // Ljava/util/zip/GZIPOutputStream; gzipOutput line 86 | method-call void java.util.zip.GZIPOutputStream.finish | | INVOKEVIRTUAL java.util.zip.GZIPOutputStream.finish V | method-call void java.util.zip.GZIPOutputStream.finish | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 88 | GETFIELD com.liferay.filters.compression.CompressionStream._output Ljavax/servlet/ServletOutputStream; | method-call void javax.servlet.ServletOutputStream.flush | | INVOKEVIRTUAL javax.servlet.ServletOutputStream.flush V | method-call void javax.servlet.ServletOutputStream.flush | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 89 | GETFIELD com.liferay.filters.compression.CompressionStream._output Ljavax/servlet/ServletOutputStream; | method-call void javax.servlet.ServletOutputStream.close | | INVOKEVIRTUAL javax.servlet.ServletOutputStream.close V | method-call void javax.servlet.ServletOutputStream.close | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 91 | ICONST_1 | PUTFIELD com.liferay.filters.compression.CompressionStream._closed Z | L2: RETURN line 93 method-execution void com.liferay.filters.compression.CompressionStream.close end public void close throws java.io.IOException public void flush throws java.io.IOException: method-execution void com.liferay.filters.compression.CompressionStream.flush | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 96 | GETFIELD com.liferay.filters.compression.CompressionStream._closed Z | IFEQ L0 | constructor-call void java.io.IOException.&amp;lt;init&amp;gt; | | INVOKESTATIC com.myco.error.ThrowablesAspect.aspectOf Lcom/myco/error/ThrowablesAspect; | | INVOKEVIRTUAL com.myco.error.ThrowablesAspect.ajc$before$com_myco_error_ThrowablesAspect$1$45ca0c36 V | | NEW java.io.IOException | | DUP | | INVOKESPECIAL java.io.IOException.&amp;lt;init&amp;gt; V line 97 | constructor-call void java.io.IOException.&amp;lt;init&amp;gt; | ATHROW | L0: ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 100 | GETFIELD com.liferay.filters.compression.CompressionStream._bufferedOutput Ljava/io/OutputStream; | method-call void java.io.OutputStream.flush | | INVOKEVIRTUAL java.io.OutputStream.flush V | method-call void java.io.OutputStream.flush | RETURN line 101 method-execution void com.liferay.filters.compression.CompressionStream.flush end public void flush throws java.io.IOException public void write int throws java.io.IOException: method-execution void com.liferay.filters.compression.CompressionStream.write int | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 104 | GETFIELD com.liferay.filters.compression.CompressionStream._closed Z | IFEQ L0 | constructor-call void java.io.IOException.&amp;lt;init&amp;gt; | | INVOKESTATIC com.myco.error.ThrowablesAspect.aspectOf Lcom/myco/error/ThrowablesAspect; | | INVOKEVIRTUAL com.myco.error.ThrowablesAspect.ajc$before$com_myco_error_ThrowablesAspect$1$45ca0c36 V | | NEW java.io.IOException | | DUP | | INVOKESPECIAL java.io.IOException.&amp;lt;init&amp;gt; V line 105 | constructor-call void java.io.IOException.&amp;lt;init&amp;gt; | ATHROW | L0: ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 112 | GETFIELD com.liferay.filters.compression.CompressionStream._bufferedOutput Ljava/io/OutputStream; | ILOAD_1 // I b | I2B | method-call void java.io.OutputStream.write int | | INVOKEVIRTUAL java.io.OutputStream.write I V | method-call void java.io.OutputStream.write int | RETURN line 113 method-execution void com.liferay.filters.compression.CompressionStream.write int end public void write int throws java.io.IOException public void write byte[] throws java.io.IOException: method-execution void com.liferay.filters.compression.CompressionStream.write byte[] | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 116 | ALOAD_1 // [B b | ICONST_0 | ALOAD_1 // [B b | ARRAYLENGTH | method-call void com.liferay.filters.compression.CompressionStream.write byte[], int, int | | INVOKEVIRTUAL com.liferay.filters.compression.CompressionStream.write [BII V | method-call void com.liferay.filters.compression.CompressionStream.write byte[], int, int | RETURN line 117 method-execution void com.liferay.filters.compression.CompressionStream.write byte[] end public void write byte[] throws java.io.IOException public void write byte[], int, int throws java.io.IOException: method-execution void com.liferay.filters.compression.CompressionStream.write byte[], int, int | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 120 | GETFIELD com.liferay.filters.compression.CompressionStream._closed Z | IFEQ L0 | constructor-call void java.io.IOException.&amp;lt;init&amp;gt; | | INVOKESTATIC com.myco.error.ThrowablesAspect.aspectOf Lcom/myco/error/ThrowablesAspect; | | INVOKEVIRTUAL com.myco.error.ThrowablesAspect.ajc$before$com_myco_error_ThrowablesAspect$1$45ca0c36 V | | NEW java.io.IOException | | DUP | | INVOKESPECIAL java.io.IOException.&amp;lt;init&amp;gt; V line 121 | constructor-call void java.io.IOException.&amp;lt;init&amp;gt; | ATHROW | catch java.io.IOException -&amp;gt; E0 | | L0: ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 129 | | GETFIELD com.liferay.filters.compression.CompressionStream._bufferedOutput Ljava/io/OutputStream; | | ALOAD_1 // [B b | | ILOAD_2 // I off | | ILOAD_3 // I len | | method-call void java.io.OutputStream.write byte[], int, int | | | INVOKEVIRTUAL java.io.OutputStream.write [BII V | | method-call void java.io.OutputStream.write byte[], int, int | catch java.io.IOException -&amp;gt; E0 | GOTO L1 | E0: ASTORE 4 // Ljava/io/IOException; ioe line 131 | GETSTATIC com.liferay.filters.compression.CompressionStream._log Lorg/apache/commons/logging/Log; line 132 | ALOAD 4 // Ljava/io/IOException; ioe | method-call java.lang.String java.io.IOException.getMessage | | INVOKEVIRTUAL java.io.IOException.getMessage Ljava/lang/String; | method-call java.lang.String java.io.IOException.getMessage | method-call void org.apache.commons.logging.Log.warn java.lang.Object | | INVOKEINTERFACE org.apache.commons.logging.Log.warn Ljava/lang/Object; V | method-call void org.apache.commons.logging.Log.warn java.lang.Object | L1: RETURN line 134 method-execution void com.liferay.filters.compression.CompressionStream.write byte[], int, int end public void write byte[], int, int throws java.io.IOException public boolean closed : method-execution boolean com.liferay.filters.compression.CompressionStream.closed | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 137 | GETFIELD com.liferay.filters.compression.CompressionStream._closed Z | IRETURN method-execution boolean com.liferay.filters.compression.CompressionStream.closed end public boolean closed public void reset : method-execution void com.liferay.filters.compression.CompressionStream.reset | RETURN line 141 method-execution void com.liferay.filters.compression.CompressionStream.reset end public void reset static Class class String, boolean : method-execution java.lang.Class com.liferay.filters.compression.CompressionStream.class java.lang.String, boolean | catch java.lang.ClassNotFoundException -&amp;gt; E0 | | ALOAD_0 line 0 | | method-call java.lang.Class java.lang.Class.forName java.lang.String | | | INVOKESTATIC java.lang.Class.forName Ljava/lang/String; Ljava/lang/Class; | | method-call java.lang.Class java.lang.Class.forName java.lang.String | | ILOAD_1 | | IFNE L0 | | method-call java.lang.Class java.lang.Class.getComponentType | | | INVOKEVIRTUAL java.lang.Class.getComponentType Ljava/lang/Class; | | method-call java.lang.Class java.lang.Class.getComponentType | | L0: ARETURN | catch java.lang.ClassNotFoundException -&amp;gt; E0 | E0: NEW java.lang.NoClassDefFoundError | DUP_X1 | constructor-call void java.lang.NoClassDefFoundError.&amp;lt;init&amp;gt; | | INVOKESPECIAL java.lang.NoClassDefFoundError.&amp;lt;init&amp;gt; V | constructor-call void java.lang.NoClassDefFoundError.&amp;lt;init&amp;gt; | method-call java.lang.Throwable java.lang.Throwable.initCause java.lang.Throwable | | INVOKEVIRTUAL java.lang.Throwable.initCause Ljava/lang/Throwable; Ljava/lang/Throwable; | method-call java.lang.Throwable java.lang.Throwable.initCause java.lang.Throwable | ATHROW method-execution java.lang.Class com.liferay.filters.compression.CompressionStream.class java.lang.String, boolean end static Class class String, boolean private final void this : method-execution void com.liferay.filters.compression.CompressionStream.this | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 149 | ACONST_NULL | PUTFIELD com.liferay.filters.compression.CompressionStream._res Ljavax/servlet/http/HttpServletResponse; | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 150 | ACONST_NULL | PUTFIELD com.liferay.filters.compression.CompressionStream._output Ljavax/servlet/ServletOutputStream; | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 151 | ACONST_NULL | PUTFIELD com.liferay.filters.compression.CompressionStream._bufferedOutput Ljava/io/OutputStream; | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 152 | ICONST_0 | PUTFIELD com.liferay.filters.compression.CompressionStream._closed Z | RETURN method-execution void com.liferay.filters.compression.CompressionStream.this end private final void this public void &amp;lt;init&amp;gt; javax.servlet.http.HttpServletResponse throws java.io.IOException: ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 47 INVOKESPECIAL javax.servlet.ServletOutputStream.&amp;lt;init&amp;gt; V constructor-execution void com.liferay.filters.compression.CompressionStream.&amp;lt;init&amp;gt; javax.servlet.http.HttpServletResponse | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this | method-call void com.liferay.filters.compression.CompressionStream.this | | INVOKESPECIAL com.liferay.filters.compression.CompressionStream.this V | method-call void com.liferay.filters.compression.CompressionStream.this | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 49 | ALOAD_1 // Ljavax/servlet/http/HttpServletResponse; res | PUTFIELD com.liferay.filters.compression.CompressionStream._res Ljavax/servlet/http/HttpServletResponse; | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 50 | ALOAD_1 // Ljavax/servlet/http/HttpServletResponse; res | method-call javax.servlet.ServletOutputStream javax.servlet.http.HttpServletResponse.getOutputStream | | INVOKEINTERFACE javax.servlet.http.HttpServletResponse.getOutputStream Ljavax/servlet/ServletOutputStream; | method-call javax.servlet.ServletOutputStream javax.servlet.http.HttpServletResponse.getOutputStream | PUTFIELD com.liferay.filters.compression.CompressionStream._output Ljavax/servlet/ServletOutputStream; | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 51 | NEW java.io.ByteArrayOutputStream | DUP | constructor-call void java.io.ByteArrayOutputStream.&amp;lt;init&amp;gt; | | INVOKESPECIAL java.io.ByteArrayOutputStream.&amp;lt;init&amp;gt; V | constructor-call void java.io.ByteArrayOutputStream.&amp;lt;init&amp;gt; | PUTFIELD com.liferay.filters.compression.CompressionStream._bufferedOutput Ljava/io/OutputStream; | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 52 | ICONST_0 | PUTFIELD com.liferay.filters.compression.CompressionStream._closed Z | RETURN line 53 constructor-execution void com.liferay.filters.compression.CompressionStream.&amp;lt;init&amp;gt; javax.servlet.http.HttpServletResponse end public void &amp;lt;init&amp;gt; javax.servlet.http.HttpServletResponse throws java.io.IOException private static final void &amp;lt;clinit&amp;gt; : staticinitialization void com.liferay.filters.compression.CompressionStream.&amp;lt;clinit&amp;gt; | GETSTATIC com.liferay.filters.compression.CompressionStream.class$com$liferay$filters$compression$CompressionStream Ljava/lang/Class; line 147 | DUP | IFNONNULL L0 | POP | LDC "[Lcom.liferay.filters.compression.CompressionStream;" | ICONST_0 | method-call java.lang.Class com.liferay.filters.compression.CompressionStream.class java.lang.String, boolean | | INVOKESTATIC com.liferay.filters.compression.CompressionStream.class Ljava/lang/String;Z Ljava/lang/Class; | method-call java.lang.Class com.liferay.filters.compression.CompressionStream.class java.lang.String, boolean | DUP | PUTSTATIC com.liferay.filters.compression.CompressionStream.class$com$liferay$filters$compression$CompressionStream Ljava/lang/Class; | method-call org.apache.commons.logging.Log org.apache.commons.logging.LogFactory.getLog java.lang.Class | | L0: INVOKESTATIC org.apache.commons.logging.LogFactory.getLog Ljava/lang/Class; Lorg/apache/commons/logging/Log; | method-call org.apache.commons.logging.Log org.apache.commons.logging.LogFactory.getLog java.lang.Class | PUTSTATIC com.liferay.filters.compression.CompressionStream._log Lorg/apache/commons/logging/Log; | RETURN staticinitialization void com.liferay.filters.compression.CompressionStream.&amp;lt;clinit&amp;gt; end private static final void &amp;lt;clinit&amp;gt; end public class com.liferay.filters.compression.CompressionStream Exception thrown from AspectJ 1.5.2 This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. Unhandled kind of new -1: impdep1[254] 1 when implementing on shadow constructor-call void java.lang.NoClassDefFoundError.&amp;lt;init&amp;gt; when weaving classes when weaving when batch building BuildConfig[null] #Files=1 Unhandled kind of new -1: impdep1[254] 1 java.lang.RuntimeException: Unhandled kind of new -1: impdep1[254] 1 at org.aspectj.weaver.bcel.BcelShadow.deleteNewAndDup BcelShadow.java:226 at org.aspectj.weaver.bcel.BcelShadow.prepareForMungers BcelShadow.java:284 at org.aspectj.weaver.Shadow.implement Shadow.java:470 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:2825 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:502 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:115 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1574 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1525 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1305 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1127 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:321 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:192 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:887 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:244 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:163 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:367 at org.aspectj.tools.ajc.Main.runMain Main.java:246 at org.aspectj.tools.ajc.Main.main Main.java:86</description>
    <commit commitTime="2008-09-30 22:55:35" id="7a398a2d4cfe14c36662ac6b984303f8ba920362"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="192877" reportTime="2007-06-15 09:57:00">
    <summary>[ataspectj] @AspectJ style inter-type declaration causes false compiler error during incremental build</summary>
    <description>Build ID: M20070212-1330 Steps To Reproduce: Use @DeclareParents to introduce a default interface implementation to an existing type. A full build compiles cleanly and works as expected. An incremental build causes the following type of compile error: "The type FooImpl must implement the inherited abstract method Test.methodA ". In this example FooImpl is the class we are introducing a default implementation of the Test interface which defines the method "methodA". More information: See attached zip for a complete set of files to reproduce. I can repoduce this bug with AJDT 1.4.2.200705221209 for Eclipse 3.2.2 as well as AJDT 1.5RC1 for Eclipse 3.3RC1</description>
    <commit commitTime="2008-09-30 20:51:53" id="9b68a31302174ba06218e5e1182653297f722110"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="193065" reportTime="2007-06-18 02:29:00">
    <summary>Improve the extensibility of AspectJ weaver to support PointcutDoctor</summary>
    <description>As seen at AOSD 2007, PointcutDoctor http://pointcutdoctor.cs.ubc.ca is a natual extension of AJDT that helps developers write correct pointcuts. It shows *almost matched* join points for a pointcut, and explains *why* a pointcut doesn't match or does match a given join point. The goal of this request is to improve the extensibility of AspectJ weaver so that tools like PointcutDoctor are able to augment the weaving process, and thus, run on top of unmodified AspectJ compiler. The key of this improvement is to allow an extender to add customized ShadowMungers i.e. subclasses of ShadowMunger that run in parallel to other ShadowMungers such as Advice. That is, as an Advice, these additional ShadowMungers will go through each Shadow produced in the weaving process and perform operations defined by the extender. We've overseen the following changes to the current weaver: - add hooks so that customized shadow mungers can be added into the list of shadow mungers for each ResolvedType: -- in class Ajde or AspectJBuildManager or other better places? , add related methods to set/get a CustomShadowMungerFactory -- in method addOrReplaceAspect of class CrosscuttingMemeber or other better places? , add calls to CustomShadowMungerFactory to produce customized ShadowMungers and add them to the list. - add a flag in class Ajde or AspectJBuildManager or other better places? to turn on/off this whole extension feature. The purpose of this is to avoid any performance overhead when the extender tools are not running. We are more than happy to implement these changes and release them as a patch. We greatly appreciate your comments!</description>
    <commit commitTime="2007-12-02 11:42:42" id="9391b1d1cfc643e249cf8f67a11eec2e63f98cfd"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/World.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="193348" reportTime="2007-06-19 12:01:00">
    <summary>NPE on attempt to compile</summary>
    <description>I can't really pinpoint any code that trigger this. It happens on for an incremental, and only some of the time. If I do a full build of the project then I do not get the error and all seems to work. ---- java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelWeaver.raiseUnboundFormalError BcelWeaver.java:833 at org.aspectj.weaver.bcel.BcelWeaver.validateSingleBranch BcelWeaver.java:688 at org.aspectj.weaver.bcel.BcelWeaver.validateBindings BcelWeaver.java:627 at org.aspectj.weaver.bcel.BcelWeaver.rewritePointcuts BcelWeaver.java:556 at org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave BcelWeaver.java:484 at org.aspectj.ajd ... oBuildJob.run AutoBuildJob.java:235 at org.eclipse.core.internal.jobs.Worker.run Worker.java:55 Compile error: NullPointerException thrown: null</description>
    <commit commitTime="2008-03-10 18:09:16" id="a31b3dea01cbf925e6b22ef8789b3a3d86fd9160"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="194429" reportTime="2007-06-26 10:40:00">
    <summary>Error message for BindingTypePattern provides no context</summary>
    <description>When there is a binding error eg, the type specified in a pointcut args does not match the bound method type the below error is emitted. This message provides no context as the source of the error. 25 Jun 22:25:56,285 ERROR-AspectJWeaverLogger - incompatible type, expected java.util.Map found BindingTypePattern java.util.Set, 1 . Check the type specified in your pointcut [][main][com.foliofn.infra.aspectj.AspectJWeaverLogger]</description>
    <commit commitTime="2008-08-21 18:13:04" id="f8fac37d1e4ec74eb13389c0968f4868d0116ad0"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc162/Ajc162Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="195090" reportTime="2007-07-02 04:31:00">
    <summary>ajc$this_ is never read warning on method introduction</summary>
    <description>Build ID: I20070621-1340 Steps To Reproduce: 1. Make sure the 'Parameter is never read' compiler check is set to 'Warning'. You can find this setting on Window &amp;gt; Preferences... &amp;gt; Java &amp;gt; Compiler &amp;gt; Errors/Warnings &amp;gt; Unnecessary code 2. Put the following code into a new Aspect file: /** * Helper interface. */ interface Interface{ boolean methodToBeImplemented ; } /** * Exposes the ajc$this_ is never read warning. */ public aspect This_NeverReadAspect { public boolean Interface.methodToBeImplemented { return returnTrue ; } public static boolean returnTrue { return true; } } 3. Find the ajc$this_ is never read warning in the Problems view More information: This bug can be reproduced on both Eclipse 3.2 and 3.3.</description>
    <commit commitTime="2009-01-31 22:06:22" id="3c4a44d338cd120716df6952a273f1f48eb5076c"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc164/Ajc164Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="197719" reportTime="2007-07-24 17:55:00">
    <summary>Multiple Package class hierarchy causes exceptions</summary>
    <description>Build ID: I20070625-1500 Steps To Reproduce: I a using aspectj 1.5.4.200705211336 with Eclipse 3.3 and AJDT . If I have a class in test.aspects package C1 with a method with an @AspectJ annotation and extend that class in another package, I get several Exceptions which are caught by Eclipse when compiling: 1 org.aspectj.weaver.BCException at org.aspectj.weaver.bcel.BcelShadow.createMethodGen BcelShadow.java:3479 at org.aspectj.weaver.bcel.BcelShadow.extractMethod BcelShadow.java:3332 at org.aspectj.weaver.bcel.BcelShadow.weaveAroundClosure BcelShadow.java:2993 at org.aspectj.weaver.bcel.BcelShadow.weaveAroundInline BcelShadow.java:2306 at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:272 at org.aspectj.weaver.Shadow.i ... ACONST_NULL ARETURN end public Object run Object[] end public class test.aspects.C3$InnerClass$AjcClosure1 2 org.aspectj.weaver.BCException at org.aspectj.weaver.bcel.BcelShadow.createMethodGen BcelShadow.java:3479 at org.aspectj.weaver.bcel.BcelShadow.extractMethod BcelShadow.java:3332 at org.aspectj.weaver.bcel.BcelShadow.weaveAroundClosure BcelShadow.java:2993 at org.aspectj.weaver.bcel.BcelShadow.weaveAroundInline BcelShadow.java:2306 at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:272 at org.aspectj.weaver.Shadow.i ... nt; V ACONST_NULL ARETURN end public Object run Object[] end public class test.aspects.C3$AjcClosure1 3 java.lang.IllegalStateException at org.aspectj.weaver.Shadow.getThisType Shadow.java:94 at org.aspectj.weaver.bcel.BcelShadow.createMethodGen BcelShadow.java:3478 at org.aspectj.weaver.bcel.BcelShadow.extractMethod BcelShadow.java:3332 at org.aspectj.weaver.bcel.BcelShadow.weaveAroundClosure BcelShadow.java:2993 at org.aspectj.weaver.bcel.BcelShadow.weaveAroundInline BcelShadow.java:2306 at org.aspectj.weaver.bcel.BcelAdvice.imple ... t; V ACONST_NULL ARETURN end public Object run Object[] end public class test.aspects2.C2$AjcClosure3 I will attach a test project that shows the exception More information:</description>
    <commit commitTime="2007-10-21 15:13:29" id="df6923ebe1287237375e40624756b65dfaaa1a63"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc154/Ajc154Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="197720" reportTime="2007-07-24 18:03:00">
    <summary>Generics in parent class removes markers from child classes</summary>
    <description>Build ID: I20070625-1500 Steps To Reproduce: When using Generics in the class declaration e.g., "public class C1&amp;lt;T&amp;gt;" , extending classes e.g., "public class C2&amp;lt;String&amp;gt;" that call the @AspectJ labeled methods don't have markers or woven classes . I will attach a jar file with an Eclipse project that will show the problem.</description>
    <commit commitTime="2008-08-22 17:09:15" id="2473e588ca5e55c3c703d6a67f33e1f99283ff45"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="198341" reportTime="2007-07-30 21:23:00">
    <summary>annoated types via declare @type are not always matched in type pattern</summary>
    <description>Take this little Test case: @Retention RetentionPolicy.RUNTIME @Target ElementType.TYPE public @interface TestAnnotation1 {} @Retention RetentionPolicy.RUNTIME @Target ElementType.TYPE public @interface TestAnnotation2{} @TestAnnotation1 public class Annotated {} public interface Marker {} public aspect AnnotationAspect { declare @type: @TestAnnotation1 *: @TestAnnotation2; // of cource this matches // declare parents: @TestAnnotation1 * implements Marker; // this matches, too // declare parents: @TestAnnotation2 * implements Marker; // this does not match on Annotated declare parents: @TestAnnotation2 * &amp;amp;&amp;amp; !java.lang.annotation.Annotation implements Marker; // but this does match on annotated // declare parents: @TestAnnotation1 * &amp;amp;&amp;amp; !java.lang.annotation.Annotation implements Marker; }</description>
    <commit commitTime="2008-08-22 21:07:24" id="36df743803c35f9715f4c0c5cffa79989a672992"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/OrTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AndTypePattern.java</file>
    </fixedFiles>
  </bug>
  <bug id="199130" reportTime="2007-08-07 13:41:00">
    <summary>Cannot extend generic aspect with more-constrained type parameter</summary>
    <description>Build ID: M20060921-0945 Eclipse AJDT Version: 1.4.2.200705221209 AspectJ version: 1.5.4.200705211336 Steps To Reproduce: Test program in its entirety: interface A {} interface B {} abstract aspect Parent&amp;lt; V extends A &amp;gt; {} abstract aspect Child&amp;lt; V extends A &amp;amp; B &amp;gt; extends Parent&amp;lt; V &amp;gt; {} // fails to compile More information: Error message: Type V does not meet the specification for type parameter 1 V extends A in generic type Parent replace "aspect" by "class" and the file compiles.</description>
    <commit commitTime="2008-06-10 00:15:57" id="59facf36ee7ac402f60f5887dceecd14bac47514"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc161/Ajc161Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="202088" reportTime="2007-09-03 11:26:00">
    <summary>[ataspectj] @AspectJ does not allow abstract pointcut with context</summary>
    <description>Compiling an aspect that includes an abstract pointcut with context leads to an error stating that the aspect should be compiled with -g flag supplying explicit -g to 'ajc' makes no difference . Here is the minimal aspect: package tracing; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.Pointcut; @Aspect public abstract class TraceAspect { @Pointcut public abstract void traced Object thiz ; } &amp;gt;ajc -version AspectJ Compiler DEVELOPMENT built on Monday Jun 11, 2007 at 16:05:11 GMT &amp;gt;ajc -source 5 tracing\*.java ...\tracing\TraceAspect.java:7 [error] Cannot read debug info for @Aspect to handle formal binding in pointcuts please compile with 'javac -g' or '&amp;lt;javac debug='true'.../&amp;gt;' in Ant public abstract class TraceAspect { ^^^^^^^^^^^ 1 error</description>
    <commit commitTime="2007-11-07 11:03:17" id="60f020069426ff561d89b034d2849d1f07495e02"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc154/Ajc154Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="203235" reportTime="2007-09-13 05:33:00">
    <summary>IAJC outjar removes directories OR removes all non class files</summary>
    <description>I am using ant IAJC task to weave an Aspect Library JAR file, with other project JAR file to produce a single WOVEN jar file. Using the following ANT task this is successful, but the corresponding JAR no longer has directory entries. Build Task: &amp;lt;iajc classpathref="aop.jar.classpath" debug="true" compliance="-1.5" xlint="true" outjar="${build.dir}/tempWoven.jar"&amp;gt; &amp;lt;injars&amp;gt; &amp;lt;pathelement path="${build.dir}/${jarfile}"/&amp;gt; &amp;lt;/injars&amp;gt; &amp;lt;aspectpath&amp;gt; &amp;lt;pathelement path="${mlib.dir}/${admaspect.jar}"/&amp;gt; &amp;lt;pathelement path="${lib.dir}/${spring-aspects.jar}"/&amp;gt; &amp;lt;/aspectpath&amp;gt; &amp;lt;/iajc&amp;gt; The input Jar file has structure like: base/package/structure/ base/package/structure/someObject.class The input Jar file has structure like: base/package/structure/someObject.class base/package/structure/someObject$AjcClosure1.class If I use the inpathDirCopyFilter, then the directory structire is retained, but all non class file elements fropm the input jar are not merged into the outjar. I can not find any way to merge aspect library with JAR file, to produce a JAR output that retains the empty directories and non class files. Many Thanks</description>
    <commit commitTime="2008-08-22 01:32:32" id="998ca6c85244a7f05ed68989a81b2cc72307b2ef"/>
    <fixedFiles>
      <file>ajde.core/testsrc/org/aspectj/ajde/core/tests/ResourceCopyTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="203367" reportTime="2007-09-13 17:23:00">
    <summary>ITD of interface on generic type; can't match calls to methods on interface+</summary>
    <description>Build ID: I20070621-1340 Steps To Reproduce: package bug; // I used a "bug" package under the "src" source folder. public aspect CantMatchOnInterfaceIntroducedToGenericClass { public static interface Marker {} public static class NonGenericClass { public void doit String msg { System.out.println "doit : msg = "+msg ; } } public static class GenericClass&amp;lt;T&amp;gt; { public void doit T t { System.out.println "doit&amp;lt;T&amp;gt; : t = "+t ; } } declare parents: NonGenericClass implements Marker; declare parents: GenericClass implements Marker; pointcut nonGenericCall : call void NonGenericClass.doit .. ; pointcut genericCall : call void GenericClass.doit .. ; pointcut markerCall : call void Marker+.doit .. ; before : nonGenericCall { System.out.println "nonGenericCall: "+thisJoinPointStaticPart ; } before : genericCall { System.out.println "genericCall: "+thisJoinPointStaticPart ; } before : markerCall { System.out.println "markerCall: "+thisJoinPointStaticPart ; } public static void main String args[] { new NonGenericClass .doit "message1" ; new GenericClass&amp;lt;Integer&amp;gt; .doit new Integer 2 ; } } More information: The code pasted in the "steps" demonstrates the bug.</description>
    <commit commitTime="2008-06-17 04:02:05" id="11ebdd83e542cc1412a0086bff4389b55c592de9"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc161/Ajc161Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="203384" reportTime="2007-09-13 19:22:00">
    <summary>AST: Type information not exposed on itmd, itfd...</summary>
    <description>The Types: org/aspectj/org/eclipse/jdt/core/dom/InterTypeFieldDeclaration.java org/aspectj/org/eclipse/jdt/core/dom/InterTypeMethodDeclaration.java Which can be returned by visiting the AjAST tree do not expose the name of the type on which the method or field is added. I require this information in the project I'm currently working on, and would appreciate if it was added.</description>
    <commit commitTime="2008-01-22 18:48:29" id="114db350a407be5b0aa00d1b8b3baa60aa6911e2"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/InterTypeMethodDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/InterTypeFieldDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AjASTConverter.java</file>
    </fixedFiles>
  </bug>
  <bug id="203646" reportTime="2007-09-17 15:56:00">
    <summary>NPE compiling inter-type declaration on inner generic interface</summary>
    <description>The following program causes an NPE: interface I { interface J&amp;lt; T &amp;gt; { T getT ; } } public aspect InnerGenericInterface { public T I.J&amp;lt; T &amp;gt;.intro { return null; } } The following very similar program compiles and works fine: interface J&amp;lt; T &amp;gt; { T getT ; } public aspect InnerGenericInterface { public T J&amp;lt; T &amp;gt;.intro { return null; } } Here's the exception trace: java.lang.NullPointerException at org.aspectj.ajdt.internal.core.builder.AsmElementFormatter.genLabelAndKind AsmElementFormatter.java:162 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.visit AsmHierarchyBuilder.java:392 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse MethodDeclaration.java:185 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse TypeDeclaration.ja ... on$1.run GlobalBuildAction.java:183 at org.eclipse.core.internal.jobs.Worker.run Worker.java:58 Compile error: NullPointerException thrown: null</description>
    <commit commitTime="2007-10-29 16:03:10" id="3fb03ca8295926e82a14dfff3319bd7dd497a881"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc154/Ajc154Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="204505" reportTime="2007-09-24 21:49:00">
    <summary>Pointcut doesn't pick methods with generic parameters correctly</summary>
    <description>Created attachment 79105 [details] JUnit test case This was encountered in Spring and then noticed that AspectJ has the same problem. If a parameterized interface includes a method that takes a parameterized argument, a pointcut such as execution * MyInterface.* .. does not select such a method. Interestingly, execution * MyInterface+.* .. does. Here is the corresponding Spring bug: http://opensource.atlassian.com/projects/spring/browse/SPR-3904 The attached test case illustrates the problem.</description>
    <commit commitTime="2008-02-19 22:01:33" id="876e7d62bb8cd5313377adaf02db372a1e539b82"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="205907" reportTime="2007-10-10 08:45:00">
    <summary>Custom pointcuts do not work correctly when used in reference pointcuts</summary>
    <description>I encountered this problem while implementing the bean PCD in Spring 2.5. In that context but not in the regular AspectJ context , this is a pretty serious bug that is preventing the use of the bean PCD in a reference pointcut. Note that when the same pointcut is used directly with advice anonymous pointcut , all goes well. It seems PatternParser.parseReferencePointcut called by parseSinglePointcut treats a custom poitncut in a similar way to this , target , @target etc. and tries to validate the argument to such pointcut as a type. For a custom PCD that takes a non-type argument for example, bean that takes a name-pattern argument , it can't find a matching type and ends up throwing an exception. I will try to create a standalone test case. Meanwhile, the commented out portion in org.springframework.aop.aspectj.BeanNamePointcutAtAspectTests illustrates the problem.</description>
    <commit commitTime="2008-03-14 18:53:37" id="87015450336c5eef0572e445cddcdacfec10cc91"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/World.java</file>
    </fixedFiles>
  </bug>
  <bug id="206732" reportTime="2007-10-18 05:54:00">
    <summary>[itds] Problem with ITDs appearing to be applied twice and clashing for binary types</summary>
    <description>As reported by Josh on the mailing list: I have the following 2 files: Advised.aj: package bugs; public class Advised {} aspect ITD { public void Advised.f {} } Ref.aj: package notbugs; import bugs.Advised; public class Ref { public void g { new Advised .f ; } } I am attempting to build Advised.aj into a jar, and refer to it from Ref.aj, using the following ant build.xml: &amp;lt;?xml version="1.0"?&amp;gt; &amp;lt;project name="Bugs" basedir="C:\workplace\imds\Bugs" xmlns:aj="antlib:org.aspectj"&amp;gt; &amp;lt;taskdef uri="antlib:org.aspectj" resource="org/aspectj/antlib.xml" classpath="./aspectjtools.jar"/&amp;gt; &amp;lt;target name="clean"&amp;gt; &amp;lt;delete dir="bugs" includes="**/*.class"/&amp;gt; &amp;lt;delete dir="notbugs" includes="**/*.class"/&amp;gt; &amp;lt;/target&amp;gt; &amp;lt;target name="task1"&amp;gt; &amp;lt;aj:iajc srcdir="." destdir="." source="1.5" target="1.5"&amp;gt; &amp;lt;classpath location=".\aspectjrt.jar"/&amp;gt; &amp;lt;include name="bugs/Advised.aj"/&amp;gt; &amp;lt;/aj:iajc&amp;gt; &amp;lt;/target&amp;gt; &amp;lt;target name="task2"&amp;gt; &amp;lt;aj:iajc source="1.5" target="1.5" srcdir="."&amp;gt; &amp;lt;classpath location=".\aspectjrt.jar"/&amp;gt; &amp;lt;aspectpath location="."/&amp;gt; &amp;lt;include name="notbugs/Ref.aj"/&amp;gt; &amp;lt;/aj:iajc&amp;gt; &amp;lt;/target&amp;gt; &amp;lt;/project&amp;gt; From within Eclipse, there are no build errors because this is all one project. On the command line, however, once I execute “ant task2”, I get the following marvelous error message which suggests that ajc is trying to ITD f into a class it already ITDd f into before: [aj:iajc] error at C:\workplace\imds\Bugs\bugs\Advised.aj:5::77 inter-type declaration from bugs.ITD conflicts with existing member: void bugs.Advised.f [aj:iajc] MessageHolder: 8 info 1 error [aj:iajc] [error 0]: error at C:\workplace\imds\Bugs\bugs\Advised.aj:5::77 inter-type declaration from bugs.ITD conflicts with existing member: void bugs.Advised.f Let me also say that in my real use-case, the jar produced by task1 will contain aspects that should apply to clients thereof, and as such, that jar should indeed be in the aspectpath not the classpath for task2 unless I am seriously misunderstanding something . How to stop this duplicate attempt to ITD? Josh --- Josh is correct that using aspectpath will pull in the aspects for application to other types, the problem is that when pulling in type Advised, we reapply known ITDs and it clashes with the one added in the original build of the type. Two possible fixes that I am looking at: - don't reapply the ITDs they are added to ensure type system is consistent to binary types pulled in from the aspectpath - recognize the ITD is clashing with a member previously applied through the same ITD I am not sure we can determine it came from the aspectpath at the point the clash is detected. I have option 2 already implemented, but I'll try a little more with option 1 before giving up ;</description>
    <commit commitTime="2007-10-18 11:03:05" id="797ec4d2ade426e40ada04881fdc83f799fd4cc9"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/ResolvedType.java</file>
    </fixedFiles>
  </bug>
  <bug id="206911" reportTime="2007-10-19 12:04:00">
    <summary>java.lang.VerifyError attempting to call super inside ITD method on extension of parameterized class</summary>
    <description>The following code will crash upon execution: package bugs; class GenericClass&amp;lt; K &amp;gt; { public void f {} } class ExtendsGenericHasITD extends GenericClass&amp;lt; Object &amp;gt; {} aspect VerifyError { public void ExtendsGenericHasITD.f { super.f ; } public static void main String[] args { new ExtendsGenericHasITD ; } } The error message is: Exception in thread "main" java.lang.VerifyError: class: bugs/ExtendsGenericHasITD, method: ajc$superDispatch$bugs_ExtendsGenericHasITD$f signature: V Illegal use of nonvirtual function call at bugs.VerifyError.main ExtendsGenericHasITD.aj:13 Code runs without error if you change the class declaration to class ExtendsGenericHasITD extends GenericClass {}</description>
    <commit commitTime="2008-01-22 23:48:51" id="ca7f9f4bf393a4a1193773501b7d55ecd17ede1f"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc160/AllTestsAspectJ160.java</file>
    </fixedFiles>
  </bug>
  <bug id="209372" reportTime="2007-11-09 14:27:00">
    <summary>Compile error: IllegalArgumentException thrown: negative line: -1</summary>
    <description>If line numbers have not been added to the generated class files the following exception is thrown: java.lang.IllegalArgumentException at org.aspectj.bridge.SourceLocation.validLine SourceLocation.java:41 at org.aspectj.bridge.SourceLocation.&amp;lt;init&amp;gt; SourceLocation.java:96 at org.aspectj.bridge.SourceLocation.&amp;lt;init&amp;gt; SourceLocation.java:85 at org.aspectj.bridge.SourceLocation.&amp;lt;init&amp;gt; SourceLocation.java:70 at org.aspectj.ajdt.internal.core.builder.EclipseSourceContext.makeSourceLocation EclipseSourceContext.java:57 at org.aspectj.we ... reUtility.java:155 at org.eclipse.core.internal.jobs.Worker.run Worker.java:55 Compile error: IllegalArgumentException thrown: negative line: -1 An easy way to reproduce the problem is to uncheck the corresponding checkbox in the Classfile Generation section of the Java Compiler options in Eclipse. A full build is performed during which an AspectJ Internal Compiler Error is thrown. My Eclipse feature version is org.eclipse.ajdt_1.5.0.200706070619.</description>
    <commit commitTime="2008-05-07 22:08:01" id="d3c3e32b533cbfa15120ad0414d07c5dbeec4296"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java</file>
    </fixedFiles>
  </bug>
  <bug id="210114" reportTime="2007-11-16 11:17:00">
    <summary>Assymetric treatment of compiler limitations</summary>
    <description>This is related to #33636 a very old bug! and recently encountered in Spring see http://opensource.atlassian.com/projects/spring/browse/SPR-4114 . There is an easy workaround hence marking this as "minor". Consider the following aspect and class: package test; public aspect TestAspect { Object around : within TestClass { return proceed ; } after : within TestClass { } } class TestClass { public void test { try { new String ; } catch Exception ex { } } } This produces: Compiler errors for around for initialization and preinitialization join points Compiler warnings for around and after for handler join points Errors and warnings note "compiler limitation". It seems using warnings for both cases may be appropriate and less confusing.</description>
    <commit commitTime="2008-08-21 18:00:21" id="d456da9c254dc59a60b4250cae05da376d808d9f"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc162/Ajc162Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="210470" reportTime="2007-11-20 19:48:00">
    <summary>Class Reloading and Load Time Weaving</summary>
    <description>Created attachment 83378 [details] Contains code that demonstrates the bug I'm working on a project that generates a lot of code and uses a custom ClassLoader to pull generated classes into the JVM. My structure allows for reloading by orphaning the old loader and creating a new one in the event that code is regenerated. Additionally, I have enabled load-time weaving to add some behavior to the generated classes as they are loaded. My problem here is that once I enable load-time weaving, orphaned class loaders are *not* garbage collected. After some investigation, I'm convinced that the Load Time Weaver is holding on to references of class loaders that have otherwise been abandoned. As long as a reference is maintained to the loader, it will not be garbage collected, and all of the classes it loaded will similarly stay in memory. I've attached a zip with some code that demonstrates the bug. README.txt goes into more detail about the code and how to execute it to demonstrate the bug.</description>
    <commit commitTime="2008-05-03 02:55:26" id="45d16bebca01d960ad556cac7c762578badea50f"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Aj.java</file>
    </fixedFiles>
  </bug>
  <bug id="210848" reportTime="2007-11-24 17:49:00">
    <summary>Fix javadoc for ProceedingJoinPoint.proceed Object[]</summary>
    <description>Currently, javadoc for ProceedingJoinPoint.proceed Object[] incorrectly mentions that arguments must be the same as the advice context except for the join point object . However, http://www.eclipse.org/aspectj/doc/released/adk15notebook/ataspectj-pcadvice.html mentions a different expectation. It looks like copying the same text as in the aj5notebook into javadoc should do well.</description>
    <commit commitTime="2008-02-21 01:05:35" id="b4715bcd195773fb2321270e20458482c00b3854"/>
    <fixedFiles>
      <file>runtime/src/org/aspectj/lang/ProceedingJoinPoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="211146" reportTime="2007-11-27 19:01:00">
    <summary>Fields and methods of parameterized type introduced by ITDs become raw types after weaving</summary>
    <description>Created attachment 83915 [details] Isolated example classes, aspect and compile commands Build ID: M20071023-1652 Steps To Reproduce: 1. Create empty class. 2. Create aspect, which introduces ITD method returning collection parameterized by String - public Collection&amp;lt;String&amp;gt; getStrings . 3. Weave classes. 4. Create class with main method, add string to collection and iterate collection with enhanced for loop. 5. Try to compile with java compiler - it won't. More information: If you compile classes in one compilation process, everything works fine as calls to fields/methods of parameterized type is preceded with casts.</description>
    <commit commitTime="2008-02-26 16:31:38" id="493af53138c71affba0c75c53ecefd192df68fed"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc160/Ajc160Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="211607" reportTime="2007-11-30 11:23:00">
    <summary>[ataspectj][ltw] @Aspect and @Around</summary>
    <description>The aspect basically does a security check before executing some logic. The problem that I get is the following: Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactory' defined in class path resource [spring/hibernate/hibernate.xml]: Invocation of init method failed; nested exception is java.lang.VerifyError: class: com/amin/topic/Topic, method: addPostInternal_aroundBody21$advice signature: Lcom/amin/topic/Topic;Lcom/amin/topic/Post;Lorg/aspectj/lang/JoinPoint;Lcom/amin/security/AclEntryParent;Lorg/aspectj/lang/ProceedingJoinPoint;Lcom/amin/security/SecureOb3Ðymdæ This seems to be a problem when using pjp.proceed new Object[]{} . I have used aspectjrt 1.5.2a @Pointcut &amp;lt;pointcut definition&amp;gt; public void add {} The advice is as follows: @Around "add parent, child " public Object addAdvice ProceedingJoinPoint pjp, Object parent, Object child throws Throwable { System.out.println ".java - inside:::" + pjp.toLongString ; //some work return pjp.proceed new Object[] { parent, child } ; } I'm not sure if this something that has been resolved. A temporary solution that I am using is using -Xnoinline which as far as i understand is to do with debugging around around advices. Please can someone advise.</description>
    <commit commitTime="2008-08-27 22:59:44" id="1dbfde4566fb20d1eec4edce1b8adad9441efc68"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc162/Ajc162Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="211674" reportTime="2007-12-01 13:15:00">
    <summary>[ataspectj] after throwing annotation style is too sensitive to parameter positions</summary>
    <description>Reported on the list by Ashley Williams: Having converted my aspects to use the @AspectJ style, I'm now getting a strange error message when a compile my tracing aspect,. First here is the section of code: @Pointcut "execution @Tracing * * .. &amp;amp;&amp;amp; @annotation tracing " void annotatedMethods Tracing tracing { } @AfterThrowing pointcut = "annotatedMethods tracing ", throwing = "t" public void logException JoinPoint thisJoinPoint, Tracing tracing, Throwable t { Level level = Level.toLevel tracing.level ; if logger.isEnabledFor level { logger.log level, formatter.formatSignatureThrowing thisJoinPoint , t ; } } So I am matching on all methods annotated with @Tracing and logging the subclass of Throwable that may have been thrown. However when I run my test case i get the following error: java.lang.VerifyError: class: com/db/abfo/tracing/PojoOne, method: calculate signature: V catch_type not a subclass of Throwable This used to work when I used the aspectj after throwing language extention form: pointcut annotatedMethods Tracing tracing : execution @Tracing * * .. &amp;amp;&amp;amp; @annotation tracing ; after Tracing tracing throwing Throwable t : annotatedMethods tracing { Level level = tracing.level .getLevel ; if logger.isEnabledFor level { logger.log level, formatter.formatSignatureThrowing thisJoinPoint , t ; } }</description>
    <commit commitTime="2007-12-02 09:24:51" id="9de03b75977599b12208c93c20cfc50fa85d7e22"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc154/Ajc154Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="213751" reportTime="2007-12-22 07:25:00">
    <summary>[plan] [ataspectj] Found @AspectJ annotations in a non @Aspect type 'SomeAspect'</summary>
    <description>Build ID: M20071023-1652 Steps To Reproduce: public abstract aspect SomeAspect { public abstract pointcut targetPointcut ; @Around "targetPointcut " public Object someAdvice ProceedingJoinPoint thisJoinPoint { return thisJoinPoint.proceed ; } } More information: Mixing AspectJ-style and Annotation-style results in the following warning, even though in the code example 'SomeAspect' actually has the @Aspect type: Found @AspectJ annotations in a non @Aspect type 'SomeAspect'</description>
    <commit commitTime="2008-12-01 20:26:04" id="cd586e1891caecc3760a77305e9fe051759f98ab"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc163/Ajc163Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="214559" reportTime="2008-01-07 18:27:00">
    <summary>Binary operator with type patterns in declare parents don't work as expected</summary>
    <description>Found this problem while fixing a bug related to @Configurable support in Spring. If I use type pattern based on an interface introduced through 'declare parents' and then combine type pattern for that interface with other type pattern in another 'declare parents', it doesn't work the second parent doesn't get introduced . Here is a test case that illustrates the problem: package test; import junit.framework.TestCase; public class DeclareParentPrecedenceTest extends TestCase { public void testParenting { TestClass testObject = new TestClass ; assertTrue testObject instanceof Interface1 ; // pass assertTrue testObject instanceof Interface1TestClass ; // fail } } aspect TestAspect { declare parents: TestClass implements Interface1; declare parents: TestClass &amp;amp;&amp;amp; Interface1+ implements Interface1TestClass; } interface Interface1 { } interface Interface1TestClass { } class TestClass { } Interestingly enough: 1. If either TestClass or Interface1 is removed in the second 'declare parents' the test works. 2. If TestClass implements Interface1 directly not through 'declare parents' , the test works.</description>
    <commit commitTime="2008-02-20 21:07:43" id="f836185807e97bdd7f300a5f615b6234b84d1ee6"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="214994" reportTime="2008-01-11 01:28:00">
    <summary>ArrayIndexOutOfBoundsException</summary>
    <description>Created attachment 86642 [details] Aspect J program in which I got bug Hi, I got ArrayOutOfBoundException for my aspectJ program that is attached with this email. Just before the compilation, I added a generic element &amp;lt;E&amp;gt; while declaring an inter-type variable. Initially the successfully compiled code was : public List &amp;lt; Observer&amp;lt; LinkedList&amp;lt;E&amp;gt;&amp;gt; &amp;gt; LinkedList.observersList = new Vector&amp;lt; Observer&amp;lt;LinkedList&amp;lt;E&amp;gt;&amp;gt; &amp;gt; ; I changed to public List &amp;lt; Observer&amp;lt; LinkedList&amp;lt;E&amp;gt;&amp;gt; &amp;gt; LinkedList&amp;lt;E&amp;gt;.observersList = new Vector&amp;lt; Observer&amp;lt;LinkedList&amp;lt;E&amp;gt;&amp;gt; &amp;gt; ; and I got below exception message: java.lang.ArrayIndexOutOfBoundsException at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.internalMakeMethodBinding EclipseFactory.java:824 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.internalMakeMethodBinding EclipseFactory.java:793 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeMethodBinding EclipseFactory.java:773 at org.aspectj.ajdt.internal.compiler.ast.InterTypeFieldDeclaration.resolve ... ob.run AutoBuildJob.java:235 at org.eclipse.core.internal.jobs.Worker.run Worker.java:55 Compile error: ArrayIndexOutOfBoundsException thrown: 0 Thanks, Kunal Pathak.</description>
    <commit commitTime="2008-03-24 19:48:27" id="659bd1bd5a03eb975f5bdd2a2c6687d16bf4abca"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc160/Ajc160Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="216067" reportTime="2008-01-21 21:05:00">
    <summary>Typo in point example</summary>
    <description>Build ID: 3.3.1.1 Steps To Reproduce: 1. Install AspectJ 2. Navigate to the examples/introduction directory 3. Method in Point.java More information: protected void makeRectangular { if !rectangular { x = rho * Math.sin theta ; y = rho * Math.cos theta ; rectangular = true; } } x and y should be interchanged in the method above, mathetimatical definition. For reference: http://en.wikipedia.org/wiki/Trigonometric_function .. please look at Right Triangle Definitions.</description>
    <commit commitTime="2008-08-20 19:31:42" id="6d906dc563e78f9a4a21bc61f27ca406b065a6b8"/>
    <fixedFiles>
      <file>docs/dist/doc/examples/introduction/Point.java</file>
    </fixedFiles>
  </bug>
  <bug id="218167" reportTime="2008-02-07 09:31:00">
    <summary>Using declare @field crashes AspectJ compiler in certain circumstances</summary>
    <description>This program: @interface A {} aspect Test { declare @field : @A int var* : @A; declare @field : int var* : @A; interface Subject {} public int Subject.vara; public int Subject.varb; } class X implements Test.Subject { } results in AspectJ compiler crashing the command: ajc -1.5 Test.java with java.util.NoSuchElementException exception. The reason for this is that one of the loops in the weaveAtFieldRepeatedly method in the org.aspectj.weaver.bcel.BcelClassWeaver class iterates through one list, but calls "hasNext" on an iterator of another collection: the line for Iterator iter2 = worthRetrying.iterator ; iter.hasNext ; { should be replaced with the line for Iterator iter2 = worthRetrying.iterator ; iter2.hasNext ; { This fix causes AspectJ to correctly process the program above. The bug was reproduced by me on the 1.5.3 version, but it's present in all newer versions as well, including the development version. I didn't look at earlier versions, however.</description>
    <commit commitTime="2008-02-07 17:00:25" id="db0e7de7899794db02664dbd71ccafdb2dc89496"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="219830" reportTime="2008-02-21 12:47:00">
    <summary>java.lang.NullPointerException in Java15AnnotationFinder when using SWT</summary>
    <description>I receive the following Exception when running SWT with AspjectJ load time weaving through the Spring Framework. The lines around org.aspectj.weaver.reflect.Java15AnnotationFinder.getAnnotations Java15AnnotationFinder.java:123 are as follows: for int i = 0; i &amp;lt; anns.length; i++ { annSet.add world.resolve UnresolvedType.forSignature anns[i].getTypeSignature ; } When using the debugger, I see "world" as a null value. Attached is a stripped down Eclipse project that generates the error during startup. My runtime arguments are as follows: -javaagent:${resource_loc:/AspectJBug/lib/spring-agent.jar} -------------------------------------------- [AppClassLoader@19d819d8] abort trouble in: final class org.eclipse.swt.awt.SWT_AWT$10 extends java.lang.Object implements java.lang.Runnable: private final java.awt.Frame val$frame [Synthetic] void &amp;lt;init&amp;gt; java.awt.Frame : ALOAD_0 // Lorg/eclipse/swt/awt/SWT_AWT$10; this line 274 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V constructor-execution void org.eclipse.swt.awt.SWT_AWT$10.&amp;lt;init&amp;gt; java.awt.Frame | ALOAD_0 // Lorg/eclipse/swt/awt/SWT_AWT$10; this line 1 | ALOAD_1 | PUTFIELD org.eclipse.swt.awt.SWT_AWT$10.val$frame Ljava/awt/Frame; | RETURN constructor-execution void org.eclipse.swt.awt.SWT_AWT$10.&amp;lt;init&amp;gt; java.awt.Frame end void &amp;lt;init&amp;gt; java.awt.Frame public void run : method-execution void org.eclipse.swt.awt.SWT_AWT$10.run | catch java.lang.Throwable -&amp;gt; E0 | | LDC "sun.awt.windows.WComponentPeer" line 277 | | method-call java.lang.Class java.lang.Class.forName java.lang.String | | | INVOKESTATIC java.lang.Class.forName Ljava/lang/String; Ljava/lang/Class; | | method-call java.lang.Class java.lang.Class.forName java.lang.String | | ASTORE_1 | | ALOAD_1 // Ljava/lang/Class; clazz line 278 | | LDC "winGraphicsConfig" | | method-call java.lang.reflect.Field java.lang.Class.getDeclaredField java.lang.String | | | INVOKEVIRTUAL java.lang.Class.getDeclaredField Ljava/lang/String; Ljava/lang/reflect/Field; | | method-call java.lang.reflect.Field java.lang.Class.getDeclaredField java.lang.String | | ASTORE_2 | | ALOAD_2 // Ljava/lang/reflect/Field; field line 279 | | ICONST_1 | | method-call void java.lang.reflect.Field.setAccessible boolean | | | INVOKEVIRTUAL java.lang.reflect.Field.setAccessible Z V | | method-call void java.lang.reflect.Field.setAccessible boolean | | ALOAD_2 // Ljava/lang/reflect/Field; field line 280 | | ALOAD_0 // Lorg/eclipse/swt/awt/SWT_AWT$10; this | | GETFIELD org.eclipse.swt.awt.SWT_AWT$10.val$frame Ljava/awt/Frame; | | method-call java.awt.peer.ComponentPeer java.awt.Frame.getPeer | | | INVOKEVIRTUAL java.awt.Frame.getPeer Ljava/awt/peer/ComponentPeer; | | method-call java.awt.peer.ComponentPeer java.awt.Frame.getPeer | | ALOAD_0 // Lorg/eclipse/swt/awt/SWT_AWT$10; this | | GETFIELD org.eclipse.swt.awt.SWT_AWT$10.val$frame Ljava/awt/Frame; | | INVOKEVIRTUAL java.awt.Frame.getGraphicsConfiguration Ljava/awt/GraphicsConfiguration; | | INVOKEVIRTUAL java.lang.reflect.Field.set Ljava/lang/Object;Ljava/lang/Object; V | catch java.lang.Throwable -&amp;gt; E0 | GOTO L0 | E0: POP line 281 | L0: RETURN line 282 method-execution void org.eclipse.swt.awt.SWT_AWT$10.run end public void run end final class org.eclipse.swt.awt.SWT_AWT$10 -- NullPointerException null null java.lang.NullPointerException at org.aspectj.weaver.reflect.Java15AnnotationFinder.getAnnotations Java15AnnotationFinder.java:123 at org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl.unpackAnnotations ReflectionBasedResolvedMemberImpl.java:174 at org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl.hasAnnotation ReflectionBasedResolvedMemberImpl.java:158 at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches ExactAnnotationTypePattern.java:82 at org.aspectj.weaver.patterns.AnnotationPointcut.matchInternal AnnotationPointcut.java:151 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:52 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.ShadowMunger.match ShadowMunger.java:75 at org.aspectj.weaver.Advice.match Advice.java:112 at org.aspectj.weaver.bcel.BcelAdvice.match BcelAdvice.java:118 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2811 at org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction BcelClassWeaver.java:2773 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2506 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2332 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:494 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:119 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1651 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1602 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1380 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1200 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:360 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:262 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:78 at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform ClassPreProcessorAgentAdapter.java:52 at org.springframework.context.weaving.AspectJWeavingEnabler$AspectJClassBypassingClassFileTransformerDecorator.transform AspectJWeavingEnabler.java:84 at sun.instrument.TransformerManager.transform TransformerManager.java:141 at sun.instrument.InstrumentationImpl.transform InstrumentationImpl.java:174 at java.lang.ClassLoader.defineClassImpl Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:228 at java.security.SecureClassLoader.defineClass SecureClassLoader.java:148 at java.net.URLClassLoader.defineClass URLClassLoader.java:557 at java.net.URLClassLoader.access$400 URLClassLoader.java:120 at java.net.URLClassLoader$ClassFinder.run URLClassLoader.java:962 at java.security.AccessController.doPrivileged AccessController.java:275 at java.net.URLClassLoader.findClass URLClassLoader.java:488 at java.lang.ClassLoader.loadClass ClassLoader.java:607 at sun.misc.Launcher$AppClassLoader.loadClass Launcher.java:327 at java.lang.ClassLoader.loadClass ClassLoader.java:573 at org.eclipse.swt.awt.SWT_AWT.new_Frame SWT_AWT.java:274 Feb 21, 2008 12:09:23 PM org.aspectj.weaver.tools.Jdk14Trace error SEVERE: org/eclipse/swt/awt/SWT_AWT$10 java.lang.NullPointerException at org.aspectj.weaver.reflect.Java15AnnotationFinder.getAnnotations Java15AnnotationFinder.java:123 at org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl.unpackAnnotations ReflectionBasedResolvedMemberImpl.java:174 at org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl.hasAnnotation ReflectionBasedResolvedMemberImpl.java:158 at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches ExactAnnotationTypePattern.java:82 at org.aspectj.weaver.patterns.AnnotationPointcut.matchInternal AnnotationPointcut.java:151 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:52 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.ShadowMunger.match ShadowMunger.java:75 at org.aspectj.weaver.Advice.match Advice.java:112 at org.aspectj.weaver.bcel.BcelAdvice.match BcelAdvice.java:118 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2811 at org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction BcelClassWeaver.java:2773 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2506 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2332 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:494 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:119 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1651 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1602 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1380 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1200 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:360 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:262 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:78 at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform ClassPreProcessorAgentAdapter.java:52 at org.springframework.context.weaving.AspectJWeavingEnabler$AspectJClassBypassingClassFileTransformerDecorator.transform AspectJWeavingEnabler.java:84 at sun.instrument.TransformerManager.transform TransformerManager.java:141 at sun.instrument.InstrumentationImpl.transform InstrumentationImpl.java:174 at java.lang.ClassLoader.defineClassImpl Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:228 at java.security.SecureClassLoader.defineClass SecureClassLoader.java:148 at java.net.URLClassLoader.defineClass URLClassLoader.java:557 at java.net.URLClassLoader.access$400 URLClassLoader.java:120 at java.net.URLClassLoader$ClassFinder.run URLClassLoader.java:962 at java.security.AccessController.doPrivileged AccessController.java:275 at java.net.URLClassLoader.findClass URLClassLoader.java:488 at java.lang.ClassLoader.loadClass ClassLoader.java:607 at sun.misc.Launcher$AppClassLoader.loadClass Launcher.java:327 at java.lang.ClassLoader.loadClass ClassLoader.java:573 at org.eclipse.swt.awt.SWT_AWT.new_Frame SWT_AWT.java:274</description>
    <commit commitTime="2008-02-26 23:54:38" id="1bbe6f988d26d08b3482d0875d588ea1d1eb039f"/>
    <fixedFiles>
      <file>weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java</file>
    </fixedFiles>
  </bug>
  <bug id="220172" reportTime="2008-02-25 06:34:00">
    <summary>[compiler] NullpointerException during compile</summary>
    <description>Created attachment 90626 [details] example code producing the error The attached code produces a NullpointerException when compiling it with aspectj. I checked it with the following compiler versions: using sun java 1.6.0.04 ajc 1.5.3 AJDT 1.5.2.200802061816 ajc 1.6.0.20080206212408 Exception: java.lang.NullPointerException at org.aspectj.weaver.Shadow.toResolvedString Shadow.java:735 at org.aspectj.weaver.patterns.ArgsPointcut.findResidueNoEllipsis ArgsPointcut.java:237 at org.aspectj.weaver.patterns.ArgsPointcut.findResidueInternal ArgsPointcut.java:273 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java:269 at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal AndPointcut.java:94 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java:269 at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal AndPointcut.java:94 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java:269 at org.aspectj.weaver.bcel.BcelAdvice.specializeOn BcelAdvice.java:146 at org.aspectj.weaver.bcel.BcelShadow.prepareForMungers BcelShadow.java:327 at org.aspectj.weaver.Shadow.implement Shadow.java:470 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:2832 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:506 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:119 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1612 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1563 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1341 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1135 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:455 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving AjPipeliningCompilerAdapter.java:392 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:380 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:98 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:533 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:906 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:260 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:176 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:378 at org.aspectj.tools.ajc.Main.runMain Main.java:253 at org.aspectj.tools.ajc.Main.main Main.java:88</description>
    <commit commitTime="2008-02-25 21:39:45" id="5beab0ec09f8ccc7cea9778ea3d77e5d03486f0c"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/Shadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="220430" reportTime="2008-02-26 13:41:00">
    <summary>mixup in retrieving the right class in Java15AnnotationFinder</summary>
    <description>See http://jira.springframework.org/browse/SPR-4390 The problem is: The method getAnnotations is called in the Java15AnnotationFinder - and the member that is passed is a method that is defined on some class C. The bcelRepository is then used to load that class. In the buggy situation there are two versions of the class around - one on the regular classpath and one in the core JVM classes in this case JAXBContext on Java6 . The member passed in is from the variant defined as a standard extension or core class. For some reason the bcelRepository loads the Java5 version and then cannot find the member. This is worse than a ClassNotFoundException which would case the AnnotationFinder to fall back on reflection. I think the right thing to do now is recognize this situation and fall back on reflection - which will recover the annotations a different way.</description>
    <commit commitTime="2008-02-26 21:03:19" id="9bbdb4128761575adb6e1c81e51b9c0bb1edb02a"/>
    <fixedFiles>
      <file>weaver5/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java</file>
    </fixedFiles>
  </bug>
  <bug id="220686" reportTime="2008-02-27 21:16:00">
    <summary>unsynchronized access to WeakHashMap</summary>
    <description>Created attachment 90955 [details] patch to World.java Build ID: M20071023-1652 Steps To Reproduce: 1. org.aspectj.weaver.World.expendableMap is defined as a java.util.WeakHashMap 2. java.util.WeakHashMap is not thread safe 3. we have observed that expendableMap can be updated concurrently by multiple threads under load which will corrupt the internal hashmap structure resulting in infinite loops when get is called More information:</description>
    <commit commitTime="2008-02-28 20:50:38" id="caf8960e2b98d6bbd4e5ade65f05e128c240ddc3"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/World.java</file>
    </fixedFiles>
  </bug>
  <bug id="221558" reportTime="2008-03-05 12:58:00">
    <summary>[Generics] ITD on generic classes via marker interface fails when implementing abstract method</summary>
    <description>Platform: Eclipse 3.3 + ajdt_1.5.2.200802262124_archive.zip AspectJ 1.6.0.20080226203535 Consider the following working example: public class Foo&amp;lt;A&amp;gt; implements Marker&amp;lt;A&amp;gt; { } public interface Marker&amp;lt;A&amp;gt; { } public aspect AspectDoWhatEver { public void Marker&amp;lt;A&amp;gt;.doWhatEver { // do nothing } } In that case the 'doWhatEver ' method got properly weaved into class Foo&amp;lt;A&amp;gt;. But when I slightly change the example by introducing a base class FooBase: public class Foo&amp;lt;A&amp;gt; extends FooBase implements Marker&amp;lt;A&amp;gt; { } abstract public class FooBase { abstract public void doWhatEver ; } there comes only the error message 'The type Foo&amp;lt;A&amp;gt; must implement the inherited abstract method FooBase.doWhatEver ' ! But this should work or have I misunderstood something? And it does work if I remove the type from class Foo: public class Foo extends FooBase implements Marker { } But public class Foo&amp;lt;A&amp;gt; extends FooBase implements Marker { } again does not work!</description>
    <commit commitTime="2008-03-05 23:31:14" id="2c257af099b5fafeae0620a9c9176143be07b707"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
    </fixedFiles>
  </bug>
  <bug id="222437" reportTime="2008-03-12 12:45:00">
    <summary>MANIFEST.MF copying is not always reliable</summary>
    <description>Sometimes an AJDT project gets into a state where it has a meta-inf/manifest.mf - and this file fails to make it out to the destination folder.</description>
    <commit commitTime="2008-03-12 17:51:13" id="906c84944b2e740a1bd781e936d48b31ce09b9ac"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="222648" reportTime="2008-03-13 15:42:00">
    <summary>[Generics + ITD] Strange 'return types don't match' error when trying to override</summary>
    <description>Created attachment 92501 [details] Eclipse 3.3 Project Occurs with AspectJ 1.5.4 as well as with my latest V1.6 cvs checkout 4 days old : Compiling and running the following code: abstract public class Foo &amp;lt;CONTENT extends Resource&amp;lt;CONTENT&amp;gt;, DATA extends DataInterface&amp;lt;CONTENT&amp;gt; &amp;gt; extends FooBase&amp;lt;DATA&amp;gt; { } abstract public class FooBase&amp;lt;A&amp;gt; { } public aspect DataAspect { public CONTENT Marker&amp;lt;CONTENT&amp;gt;.getContent { return null; } } public interface DataInterface&amp;lt;CONTENT&amp;gt; { public CONTENT getContent ; } public interface Marker&amp;lt;CONTENT&amp;gt; extends DataInterface&amp;lt;CONTENT&amp;gt; { } public interface Resource&amp;lt;RESOURCE&amp;gt; { } produces the following error: [iajc] error at public CONTENT Marker&amp;lt;CONTENT&amp;gt;.getContent [iajc] ^^^^^^^^^^ [iajc] C:\Checkouts\FES\AspectJTest\Test B\src\test\DataAspect.aj:6:0::0 can't override CONTENT test.DataInterface&amp;lt;CONTENT&amp;gt;.getContent with java.lang.Object test.Marker.getContent return types don't match [iajc] error at public CONTENT getContent ; [iajc] ^^^^^^^^^^ [iajc] C:\Checkouts\FES\AspectJTest\Test B\src\test\DataInterface.java:7:0::0 can't override CONTENT test.DataInterface&amp;lt;CONTENT&amp;gt;.getContent with java.lang.Object test.Marker.getContent return types don't match I don't understand why it says: ' ... override ... with java.lang.Object Marker.getContent ' since it should be ' ... override ... with CONTENT Marker&amp;lt;CONTENT&amp;gt;.getContent ' !? Strangely, by minor changes the errror message does not appear. E.g. if I do: 1. Rename the generic type in the marker interface: public interface Marker&amp;lt;CONTENT_B&amp;gt; extends DataInterface&amp;lt;CONTENT_B&amp;gt; { } The same holds if I do this in the Foo class but not in both, of course . 2. Change Foo such that it does not inherit from FooBase: abstract public class Foo &amp;lt;CONTENT extends Resource&amp;lt;CONTENT&amp;gt;, DATA extends DataInterface&amp;lt;CONTENT&amp;gt; &amp;gt; { } In both cases it compiles fine. Cheers, Michael</description>
    <commit commitTime="2008-08-20 22:06:53" id="d94ade722d8a1212aa7c9b6ca90fe47a637e2c7a"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc162/Ajc162Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="222987" reportTime="2008-03-17 13:57:00">
    <summary>More NPEs in Java15AnnotationFinder</summary>
    <description>Reported on the list by Chris Wall and on spring bug http://jira.springframework.org/browse/SPR-4390 --- When my plugin is initiated and during Spring context beans loading, we're getting the following: Caused by: java.lang.NullPointerException at org.aspectj.weaver.reflect.Java15AnnotationFinder.getParameterNamesFromLVT Java15AnnotationFinder.java:196 at org.aspectj.weaver.reflect.Java15AnnotationFinder.getParameterNames Java15AnnotationFinder.java:187 at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.tryToDiscoverParameterNames Java15ReflectionBasedReferenceTypeDelegate.java:297 at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.getDeclaredPointcuts Java15ReflectionBasedReferenceTypeDelegate.java:270 at org.aspectj.weaver.ReferenceType.getDeclaredPointcuts ReferenceType.java:535 at org.aspectj.weaver.ResolvedType$7.get ResolvedType.java:477 at org.aspectj.weaver.Iterators$3$1.hasNext Iterators.java:118 at org.aspectj.weaver.Iterators$3.hasNext Iterators.java:128 at org.aspectj.weaver.ResolvedType.findPointcut ResolvedType.java:488 at org.aspectj.weaver.patterns.ReferencePointcut.resolveBindings ReferencePointcut.java:152 at org.aspectj.weaver.patterns.Pointcut.resolve Pointcut.java:196 at org.aspectj.weaver.tools.PointcutParser.resolvePointcutExpression PointcutParser.java:330 at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression PointcutParser.java:308 at org.springframework.aop.aspectj.AspectJExpressionPointcut.buildPointcutExpression AspectJExpressionPointcut.java:197 at org.springframework.aop.aspectj.AspectJExpressionPointcut.checkReadyToMatch AspectJExpressionPointcut.java:184 at org.springframework.aop.aspectj.AspectJExpressionPointcut.getClassFilter AspectJExpressionPointcut.java:165 at org.springframework.aop.support.AopUtils.canApply AopUtils.java:198 at org.springframework.aop.support.AopUtils.canApply AopUtils.java:253 at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply AopUtils.java:287 at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply AbstractAdvisorAutoProxyCreator.java:113 at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors AbstractAdvisorAutoProxyCreator.java:85 at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean AbstractAdvisorAutoProxyCreator.java:66 at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary AbstractAutoProxyCreator.java:345 at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization AbstractAutoProxyCreator.java:309 at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization AbstractAutowireCapableBeanFactory.java:360 at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean AbstractAutowireCapableBeanFactory.java:1343 at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean AbstractAutowireCapableBeanFactory.java:470 I've tried with with Spring 2.5.2 and 2.5.3 with JDK 1.5. We're using "@AspectJ" so &amp;lt;aop:aspectj-autoproxy/&amp;gt; is set, and aspectjweaver.jar and aspectjrt.jar are included. The Spring IDE shows that AOP advise is applied to expected pointcuts. When compiled and run outside of the Spring IDE, the application encounters the NPE. Ideas?</description>
    <commit commitTime="2008-03-20 15:48:59" id="6c54db924759b08effc806a93f633515c3e3a5d2"/>
    <fixedFiles>
      <file>weaver5/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java</file>
    </fixedFiles>
  </bug>
  <bug id="223094" reportTime="2008-03-18 11:30:00">
    <summary>ITD fails when using LTW</summary>
    <description>Created attachment 92808 [details] Eclipse project to reproduce the bug In the attached case modified version of the one in http://jira.springframework.org/browse/SPR-4593 , the introduced readResolve method doesn't show up when using LTW. The same code works fine with compile-time weaver with spring-aspect.jar in aspectspath . When running through LTW, it produces the following error: [AppClassLoader@1f12c4e] weaveinfo Join point 'method-execution void org.springframework.samples.petclinic.aspects.ApplicationTraceAspect.traced ' in Type 'org.springframework.samples.petclinic.aspects.ApplicationTraceAspect' no debug info available advised by before advice from 'org.springframework.samples.petclinic.aspects.ApplicationTraceAspect' AbstractTraceAspect.java [AppClassLoader@1f12c4e] weaveinfo Extending interface set for type 'example.annotation.Order' Order.java to include 'org.springframework.beans.factory.aspectj.ConfigurableObject' AnnotationBeanConfigurerAspect.aj [AppClassLoader@1f12c4e] error at example\annotation\Order.java::0 The type example.annotation.Order must implement the inherited abstract method org.springframework.beans.factory.aspectj.AbstractInterfaceDrivenDependencyInjectionAspect$ConfigurableDeserializationSupport.readResolve see also: org\springframework\beans\factory\aspectj\AbstractInterfaceDrivenDependencyInjectionAspect.aj::0 see also: org\springframework\beans\factory\aspectj\C:\spring-dev\workspace\spring\aspectj\src\org\springframework\beans\factory\aspectj\AnnotationBeanConfigurerAspect.aj:86::0 [AppClassLoader@1f12c4e] weaveinfo Join point 'initialization void org.springframework.beans.factory.aspectj.ConfigurableObject.&amp;lt;init&amp;gt; ' in Type 'example.annotation.Order' Order.java:15 advised by before advice from 'org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect' AbstractDependencyInjectionAspect.aj:78 [with runtime test] [AppClassLoader@1f12c4e] weaveinfo Join point 'initialization void org.springframework.beans.factory.aspectj.ConfigurableObject.&amp;lt;init&amp;gt; ' in Type 'example.annotation.Order' Order.java:15 advised by afterReturning advice from 'org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect' AbstractDependencyInjectionAspect.aj:87 [with runtime test] [AppClassLoader@1f12c4e] weaveinfo Join point 'initialization void example.annotation.Order.&amp;lt;init&amp;gt; ' in Type 'example.annotation.Order' Order.java:15 advised by afterReturning advice from 'org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect' AbstractDependencyInjectionAspect.aj:87 [with runtime test]</description>
    <commit commitTime="2008-03-18 21:00:01" id="e95bd7610b7da1aae7aa6fc309f78bca3d76ce85"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="223605" reportTime="2008-03-24 00:07:00">
    <summary>Initialization join point not advised when generic is used with 'declare parents'</summary>
    <description>This is a bug encountered while investigating a Spring bug http://jira.springframework.org/browse/SPR-4587 . I have attached a test case a much simplified version of the corresponding Spring aspect from the org.springframework.beans.factory.aspectj package that illustrates the bug. The main bug is that advice to join point for initializer with signature GenericParameterClass.new is never invoked. It all works fine, if: 1. If 'declare parents' isn't used instead directly expressing 'implements ConfigurableObject' . 2. If the '&amp;lt;T&amp;gt;' part is removed from GenericParameterClass. So it seems like a problem when generic type is combined with 'declare parents'. I am using "DEVELOPMENT - Built: Friday Mar 21, 2008 at 20:11:56 GMT" version of AspectJ.</description>
    <commit commitTime="2008-03-24 18:36:57" id="e372e390116d3d90f3ed5f6d8d1689c29932655f"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc160/Ajc160Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="224962" reportTime="2008-03-31 14:11:00">
    <summary>AjcTask doesn't work with Java6</summary>
    <description>Although support for Java6 has been added in the last milestone, you can't use it from ant because AjcTask doesn't recognize the "source=1.6" and "target=1.6" parameters. It's easy to fix by modifying AjcTask.java and adding the missing constants: static final String[] TARGET_INPUTS = new String [] { "1.1", "1.2", "1.3", "1.4", "1.5", "1.6" }; static final String[] SOURCE_INPUTS = new String [] { "1.3", "1.4", "1.5", "1.6" }; static final String[] COMPLIANCE_INPUTS = new String [] { "-1.3", "-1.4", "-1.5", "-1.6" }; Thanks.</description>
    <commit commitTime="2008-04-01 04:48:31" id="6bdb87d7462fd4fee4ec474937d4ad18b59b0852"/>
    <fixedFiles>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="225916" reportTime="2008-04-06 20:28:00">
    <summary>weaving is sensitive to order of input files</summary>
    <description>Take this three little files: // file 1 package test.aspects; public aspect TestAspect { pointcut boundaries : execution public * *..*MBean+.* .. ; Object around : boundaries { return proceed ; } } // file 2 package test.jmx; public class Test implements TestMBean { public String test { return "test"; } } // file 3 package test.jmx; public interface TestMBean { String test ; } ajc -showWeaveInfo test/jmx/Test.java test/jmx/TestMBean.java test/aspects/TestAspect.aj shows nothing ajc -showWeaveInfo test/jmx/TestMBean.java test/jmx/Test.java test/aspects/TestAspect.aj results in Join point 'method-execution java.lang.String test.jmx.Test.test ' in Type 'test.jmx.Test' Test.java:5 advised by around advice from 'test.aspects.TestAspect' TestAspect.aj:7 I noticed this migrating a aspectj 1.5.0 project to 1.5.4. 1.5.0 does not show this behaviour. I also tested the current developer version of 1.6 20080404223500 which fails, too. I hope the filx to this will make it in 1.6.0. In eclipse current stable ajdt for 3.3 weaving is done correctly. I never noticed this bug in eclipse neve saw missing weaving annotations on joinpoints that should have one. .</description>
    <commit commitTime="2008-04-07 06:35:31" id="702abd77dbb7f624146fff6266d7a8741e5aa42a"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java</file>
    </fixedFiles>
  </bug>
  <bug id="226163" reportTime="2008-04-08 13:52:00">
    <summary>ArrayIndexOutOfBounds in RecoveryScanner</summary>
    <description>Think I'm on 1.6 M1... I've got org.aspectj.ajde_1.6.0.20080228000000. The following code causes an exception rather than just giving the compiler error. public void test { System.out.print false ; if { } } Marked minor, as there's no problem with code that does compile. PS. I like the pop-up dialog box telling me where to check for and report bugs : java.lang.ArrayIndexOutOfBoundsException at org.aspectj.org.eclipse.jdt.internal.compiler.parser.RecoveryScanner.getNextToken RecoveryScanner.java:143 at org.aspectj.org.eclipse.jdt.internal.compiler.parser.TheOriginalJDTParserClass.parse TheOriginalJDTParserClass.java:7382 at org.aspectj.org.eclipse.jdt.internal.compiler.parser.TheOriginalJDTParserClass.parseStatements TheOriginalJDTParserClass.java:7897 at org.aspectj.org.eclipse.jd ... b.run AutoBuildJob.java:235 at org.eclipse.core.internal.jobs.Worker.run Worker.java:55 Compile error: ArrayIndexOutOfBoundsException thrown: -1</description>
    <commit commitTime="2008-10-24 03:52:15" id="621e6e54fa172775cc1f4cb28ba5b072e52fd39a"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc163/Ajc163Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="226201" reportTime="2008-04-08 16:53:00">
    <summary>VerifyError with generic aspects</summary>
    <description>Build ID: M20080221-1800 Steps To Reproduce: Run the main method in IntAspTest: public abstract aspect GenAsp&amp;lt;T&amp;gt; { public abstract T transform T x ; T around : execution T * * {return transform proceed ;} } public aspect IntAsp extends GenAsp&amp;lt;Integer&amp;gt; { public Integer transform Integer x {return x;} // identity transformation } public class IntAspTest { static Integer mylength String x {return x.length ;} public static void main String[] args {System.out.println mylength "" ;} } More information: I get the exception: java.lang.VerifyError: class: IntAsp, method: transform signature: Ljava/lang/Integer; Ljava/lang/Integer; Wrong return type in function</description>
    <commit commitTime="2008-06-08 21:36:27" id="81ff93b04f951758de1a959a55d486fbe8fe410f"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="226567" reportTime="2008-04-10 13:01:00">
    <summary>Inter-type declaration with generic return type across packages causes return type incompatibility</summary>
    <description>I am using the latest AJDT 1.5.2.200804031719 from 3 Apr 2008. Also I am compiling with Java 1.6.0_03 under 5.0 compliance. This bug occurs in the following example code also attached : //BarAspect package a; import b.Bar; import b.Foo; public aspect BarAspect { declare parents : Foo implements Bar; } //Bar package b; import java.util.Collection; public interface Bar { public Collection&amp;lt;Foo&amp;gt; getFoos ; } //Foo package b; import java.util.ArrayList; import java.util.Collection; public class Foo { public Collection&amp;lt;Foo&amp;gt; getFoos { return new ArrayList&amp;lt;Foo&amp;gt; {{ add new Foo ; }}; } } When using Eclipse, Foo.java fails to compile with the following error: "The return type is incompatible withe b.Bar.getFoos ". This bug only occurs in Eclipse and works when running the AspectJ compiler from the command line. The following conditions seem necessary to reproduce this bug: *Aspect BarAspect and type being advised Foo are in different packages *The implementation of the interface Bar is already done by the type being advised Foo *The return type of a method in the interface is generic When the implementation is advised into the type Foo , then the error does not appear. Also, when the type Foo is moved to the same package as the aspect BarAspect , the error goes away as well. Only when the combination of the previous three conditions exists does the bug appear.</description>
    <commit commitTime="2008-04-24 04:07:23" id="e08d3dede2af8b0aafe460f17a40912e621f4397"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelMethod.java</file>
    </fixedFiles>
  </bug>
  <bug id="227295" reportTime="2008-04-16 06:24:00">
    <summary>AJC error, somehow connected with generics</summary>
    <description>Build ID: 1.5.0.20070607 Steps To Reproduce: I cannot find a way to reproduce it, it's somehow "randomic", for example it happened to me now while creating a new class in an aspectj project, but when i then saved the .java it compiled properly. That's why I'm filing it in AJDT and not in AspectJ directly. Based on the exception, IIUC, there is a narrowing in a generic UnresolvedType should be something like Converter&amp;lt;?&amp;gt;, while BoundedReferenceType should be somethinf like Converter&amp;lt;? extends Number&amp;gt; , and the weaver is not handling it properly, but simply casting from one to the other .. but this are just silly assumptions. More information: java.lang.ClassCastException at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeTypeBinding1 EclipseFactory.java:656 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeTypeBinding EclipseFactory.java:579 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeTypeBinding1 EclipseFactory.java:640 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeTypeBinding EclipseFactory.java:579 at org.asp ... Worker.java:55 Compile error: ClassCastException thrown: org.aspectj.weaver.UnresolvedType cannot be cast to org.aspectj.weaver.BoundedReferenceType</description>
    <commit commitTime="2008-06-06 20:38:14" id="3b2109ac656e354034713b090f7d70a2d9898486"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="227401" reportTime="2008-04-16 14:57:00">
    <summary>get/set Field advice unable to get declaring type or field if field in a paratermized superclass</summary>
    <description>Build ID: M20080221-1800 Steps To Reproduce: 1. Run the attached Instrumentation.aj and ReadWriteAJBugX.java 2. Note the output: setField setField getField - target receiver for the field out is null...bug! getField getField 11 setField - field prot is null...bug! setField - field protS is null...bug! getField - target receiver for the field out is null...bug! getField - field protS is null...bug! getField - field prot is null...bug! 22 setField setField getField - target receiver for the field out is null...bug! getField - field defS is null...bug! getField - field def is null...bug! 11 setField - field def is null...bug! setField - field defS is null...bug! setField - field foo is null...bug! getField - target receiver for the field out is null...bug! getField - field defS is null...bug! getField - field def is null...bug! 22 getField - target receiver for the field out is null...bug! 56 3. The getField method and getDeclaringType method return null in this case. More information: I suspect that the root problem is the getDeclaringType method, since that call is made as part of the implementation of the getField method in the FieldSignatureImpl class. I have only noted this problem in situtations where the parent is paramerterized but the child resolves the type parameter.</description>
    <commit commitTime="2008-05-22 23:57:23" id="5e3e0b6a07c1a1e270786faf72e6a7a54972f821"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc161/Ajc161Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="227484" reportTime="2008-04-17 03:18:00">
    <summary>[plan][memory][ltw]Reducing weaver memory usage over time</summary>
    <description>As i said in the mailing list. Context : - JVM IBM 1.5.0 AIX 64 bits - LTW weaving classes in packages WebMethod IS server . The application is big I got a memory leak, with a lot of aspectj classes in the heapdump. Examples : - 590 000 instances of org.aspectj.ReferenceType - 430 000 instances of org.aspectj.UnresolvedType - 418 000 instances of org.aspectj.ResolvedType - 280 000 instances of org.aspectj. ResolvedMemberImpl AspectJ Development build of 22032008 but I am not sure . In aop.xml, in the weaver element, I have *not* exclude AspectJ package org.aspectj.. and I have *not* exclude my own aspect In the heapdump my aspect is shown once default persingleton scope . The goal of this aspect is to track the durations of a limited number of methods during the benchmark of the application. I use the around advice to perform it. The number of classes woven is less than 50. Andy Clement said that it sounds like the bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=210470 To investigate, i think that JVM IBM doesn't support jhat, IBM has its own tools ha, jca . ha for heapdumps and jca for java core dumps and threads dump. I join a Word doc that shows the outpout or the sreenshots of this tools generated from the heapdump and javacore. Hope that helps...</description>
    <commit commitTime="2009-04-08 21:24:35" id="46559c63b1f0c3ab261f0e55da0a423bf4fa7447"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/World.java</file>
    </fixedFiles>
  </bug>
  <bug id="227540" reportTime="2008-04-17 09:01:00">
    <summary>Nullpointer Exception: AjProblemReporter.abstractMethodMustBeImplemented AjProblemReporter.java:235</summary>
    <description>Created attachment 96434 [details] core dump of compiler After upgrading from 1.5.2a we got the following internal compiler NPE. We tried aspectj 1.5.4 and the latest 1.6.0 Developer version and using maven. Sees attachment for the full dump ---- AspectJ Properties --- AspectJ Compiler DEVELOPMENT built on Wednesday Apr 16, 2008 at 20:36:45 GMT ---- Dump Properties --- Dump file: ajcore.20080417.140104.174.txt Dump reason: java.lang.NullPointerException Dump on exception: true Dump at exit condition: abort ---- Exception Information --- java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.problem.AjProblemReporter.abstractMethodMustBeImplemented AjProblemReporter.java:235 At org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.checkAbstractMethod MethodVerifier.java:132 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodVerifier15.checkMethods MethodVerifier15.java:411 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.verify MethodVerifier.java:739 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodVerifier15.verify MethodVerifier15.java:738 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.verifyMethods SourceTypeBinding.java:1703 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.verifyMethods CompilationUnitScope.java:776 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:622 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:392 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager</description>
    <commit commitTime="2008-04-17 16:46:56" id="e389120e28f7440f0e77f115e1b7757d2196529f"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
    </fixedFiles>
  </bug>
  <bug id="227993" reportTime="2008-04-21 08:04:00">
    <summary>Checking annotations values</summary>
    <description>Build ID: M20080221-1800 Steps To Reproduce: 1. make a pointcut like get @SearchableProperty store=Store.YES * * More information: When I try to make a pointcut which checks annotation value as described in http://www.eclipse.org/aspectj/doc/released/README-160.html I get an exception: java.lang.UnsupportedOperationException: You should resolve this member and call getAnnotationOfType on the result... at org.aspectj.weaver.MemberImpl.getAnnotationOfType MemberImpl.java:640 at org.aspectj.weaver.JoinPointSignature.getAnnotationOfType JoinPointSignature.java:96 at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches ExactAnnotationTypePattern.java:119 at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches ExactAnnotationTypePattern.java:94 at org.aspectj.weaver.patterns.SignaturePattern.matchesAnnotations SignaturePattern.java:514 at org.aspectj.weaver.patterns.SignaturePattern.matchesExactly SignaturePattern.java:348 at org.aspectj.weaver.patterns.SignaturePattern.matches SignaturePattern.java:305 at org.aspectj.weaver.patterns.KindedPointcut.matchInternal KindedPointcut.java:106 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.NotPointcut.matchInternal NotPointcut.java:53 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:54 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:52 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:52 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.OrPointcut.matchInternal OrPointcut.java:51 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.OrPointcut.matchInternal OrPointcut.java:51 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.ShadowMunger.match ShadowMunger.java:75 at org.aspectj.weaver.Advice.match Advice.java:112 at org.aspectj.weaver.bcel.BcelAdvice.match BcelAdvice.java:118 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2811 at org.aspectj.weaver.bcel.BcelClassWeaver.matchGetInstruction BcelClassWeaver.java:2649 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2488 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2332 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:494 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:119 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1657 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1608 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1386 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1206 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:383 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:270 at org.aspectj.osgi.weaver.loadtime.OSGiWeavingAdaptor.weaveClass OSGiWeavingAdaptor.java:48 at org.aspectj.osgi.service.weaving.WeavingService.preProcess WeavingService.java:61 at org.aspectj.osgi.AspectJAdaptor.weaveClass AspectJAdaptor.java:149 at org.aspectj.osgi.hooks.AspectJHook.processClass AspectJHook.java:97 at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.defineClass ClasspathManager.java:496 at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findClassImpl ClasspathManager.java:471 at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClassImpl ClasspathManager.java:430 at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass ClasspathManager.java:413 at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLocalClass DefaultClassLoader.java:189 at org.eclipse.osgi.framework.internal.core.BundleLoader.findLocalClass BundleLoader.java:340 at org.eclipse.osgi.framework.internal.core.BundleLoader.findClassInternal BundleLoader.java:408 at org.eclipse.osgi.framework.internal.core.BundleLoader.findClass BundleLoader.java:369 at org.eclipse.osgi.framework.internal.core.BundleLoader.findClass BundleLoader.java:357 at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass DefaultClassLoader.java:83 at java.lang.ClassLoader.loadClass ClassLoader.java:251 at org.eclipse.osgi.framework.internal.core.BundleLoader.loadClass BundleLoader.java:289 at org.eclipse.osgi.framework.internal.core.BundleHost.loadClass BundleHost.java:227 at org.eclipse.osgi.framework.internal.core.AbstractBundle.loadClass AbstractBundle.java:1269 at org.springframework.osgi.util.BundleDelegatingClassLoader.findClass BundleDelegatingClassLoader.java:99 at org.springframework.osgi.util.BundleDelegatingClassLoader.loadClass BundleDelegatingClassLoader.java:156 at java.lang.ClassLoader.loadClass ClassLoader.java:251 at org.springframework.util.ClassUtils.forName ClassUtils.java:230 at org.springframework.util.ClassUtils.resolveClassName ClassUtils.java:249 at org.springframework.beans.propertyeditors.ClassEditor.setAsText ClassEditor.java:63 at org.springframework.beans.TypeConverterDelegate.doConvertTextValue TypeConverterDelegate.java:350 at org.springframework.beans.TypeConverterDelegate.doConvertValue TypeConverterDelegate.java:326 at org.springframework.beans.TypeConverterDelegate.convertIfNecessary TypeConverterDelegate.java:192 at org.springframework.beans.TypeConverterDelegate.convertIfNecessary TypeConverterDelegate.java:107 at org.springframework.beans.BeanWrapperImpl.convertIfNecessary BeanWrapperImpl.java:362 at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray ConstructorResolver.java:527 at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor ConstructorResolver.java:190 at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor AbstractAutowireCapableBeanFactory.java:893 at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance AbstractAutowireCapableBeanFactory.java:803 at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean AbstractAutowireCapableBeanFactory.java:437 at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run AbstractAutowireCapableBeanFactory.java:404 at java.security.AccessController.doPrivileged Native Method at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean AbstractAutowireCapableBeanFactory.java:375 at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean BeanDefinitionValueResolver.java:219 at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary BeanDefinitionValueResolver.java:117 at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments ConstructorResolver.java:474 at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor ConstructorResolver.java:160 at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor AbstractAutowireCapableBeanFactory.java:893 at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance AbstractAutowireCapableBeanFactory.java:803 at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean AbstractAutowireCapableBeanFactory.java:437 at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run AbstractAutowireCapableBeanFactory.java:404 at java.security.AccessController.doPrivileged Native Method at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean AbstractAutowireCapableBeanFactory.java:375 at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject AbstractBeanFactory.java:263 at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton DefaultSingletonBeanRegistry.java:170 at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean AbstractBeanFactory.java:260 at org.springframework.beans.factory.support.AbstractBeanFactory.getBean AbstractBeanFactory.java:184 at org.springframework.beans.factory.support.AbstractBeanFactory.getBean AbstractBeanFactory.java:163 at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons DefaultListableBeanFactory.java:430 at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization AbstractApplicationContext.java:729 at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh AbstractDelegatedExecutionApplicationContext.java:269 at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run DependencyWaiterApplicationContextExecutor.java:141 at java.lang.Thread.run Thread.java:619 Class which is being weaved is very simple: public class Product implements Serializable { @SearchableProperty accessor = "property" private String name; } Annotation is from third-party library, and it is similar to: @Target {ElementType.METHOD, ElementType.FIELD} @Retention RetentionPolicy.RUNTIME public @interface SearchableProperty { String accessor default ""; Store store default Store.YES; } I've ommited some not important methods. The bug was found in aspectj 1.6.0_20080418170340</description>
    <commit commitTime="2008-05-10 00:33:22" id="b6464f5bb94272e01fd77fab1c3a508334eefa8a"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc161/Ajc161Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="228633" reportTime="2008-04-24 05:32:00">
    <summary>AST Support for PointcutDesignators</summary>
    <description>I would like an enhancement to be able to match two PointcutDesignators called 'pointcut definitions' in the AJ5 quick reference . Currently, the following test fails: ---------------AjASTMatcherTest.java--------------- public void testMatchDefaultPointcut { AjAST ast = AjAST.newAjAST AST.JLS3 ; DefaultPointcut dp1 = ast.newDefaultPointcut ; DefaultPointcut dp2 = ast.newDefaultPointcut ; dp1.setDetail "call * *.foo .. " ; dp2.setDetail "call * *.bar .. " ; assertFalse dp1.subtreeMatch new AjASTMatcher , dp2 ; } --------------------------------------------------- The reason is that there are no implementations for the many different kinds of pointcut definitions of AspectJ. Instead, DefaultPointcut simply contains the pointcut definition in a String-field "detail" as shown in the test case. The same is true for DefaultTypePattern and SignaturePattern. Additionally, in the current implementation a DefaultPointcut, DefaultTypePattern, and SignaturePattern node will always match another AST node if that node is of the same type instanceof . From what I see, it is necessary to 1 add types for every possible pointcut definition, 2 extend the current implementation of type name patterns and 3 signature patterns, 4 extend the parser internal and external? to create nodes for the pointcut definitions, 5 extend the converter to convert the new node types, and finally 6 extend the matcher to be able to match two pointcut definitions. Implementation is already done for combinations of poincuts using and &amp;amp;&amp;amp; , or || , not ! , cflow, and reference pointcuts without parameters . Please comment on the task list as it is just an initial overview resulting from my limited knowledge on this field.</description>
    <commit commitTime="2008-04-24 16:45:17" id="bed3f4e45a663bc7c366bea3c66e17b27d3410e2"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AjASTMatcher.java</file>
    </fixedFiles>
  </bug>
  <bug id="228980" reportTime="2008-04-26 00:49:00">
    <summary>parameter annotation matching - failing cases</summary>
    <description>reported on mailing list ----- Test.aj ----- import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; public aspect Test { // OK matches f1 and f2 : declare error : execution * * ! Object+ , .. : "Value parameter."; // Wrong matches f1 and f2, should match only f1 : declare error : execution * * @A ! Object+ , .. : "@A annotated value parameter!"; // OK matches f1 : declare error : execution * * @A * , .. &amp;amp;&amp;amp; execution * * ! Object+ , .. : "@A annotated value parameter."; // OK matches f3 and f4 : declare error : execution * * Object+, .. : "Reference parameter."; // Wrong no matches, should match f3 : declare error : execution * * @A Object+ , .. : "@A annotated reference parameter!"; // OK matches f3 : declare error : execution * * @A * , .. &amp;amp;&amp;amp; execution * * Object+, .. : "@A annotated reference parameter."; // Wrong matches f1 and f2, should match only f2 : declare error : execution * * !@A ! Object+ , .. : "Non-@A annotated value parameter!"; // Wrong matches f1 and f2, should match only f2 : declare error : execution * * !@A * , .. &amp;amp;&amp;amp; execution * * ! Object+ , .. : "Non-@A annotated value parameter."; // OK matches f2 : declare error : !execution * * @A * , .. &amp;amp;&amp;amp; execution * * ! Object+ , .. : "Non-@A annotated value parameter."; // Wrong matches f3 and f4, should match only f4 : declare error : execution * * !@A Object+ , .. : "Non-@A annotated reference parameter!"; // Wrong matches f3 and f4, should match only f4 : declare error : execution * * !@A * , .. &amp;amp;&amp;amp; execution * * Object+, .. : "Non-@A annotated reference parameter."; // OK matches f4 : declare error : !execution * * @A * , .. &amp;amp;&amp;amp; execution * * Object+, .. : "Non-@A annotated reference parameter."; void f1 @A int i {} void f2 int i {} void f3 @A Integer i {} void f4 Integer i {} @Retention RetentionPolicy.RUNTIME @Target {ElementType.PARAMETER} private static @interface A { } }</description>
    <commit commitTime="2008-04-26 05:11:25" id="677f7d0c4b42bc9d0a4ad793747e9183e3322f3f"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/ExactTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/SignaturePattern.java</file>
    </fixedFiles>
  </bug>
  <bug id="229829" reportTime="2008-05-01 14:00:00">
    <summary>SourceTypeBinding.sourceStart NPE</summary>
    <description>java.lang.NullPointerException at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.sourceStart SourceTypeBinding.java:1514 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodBinding.sourceStart MethodBinding.java:988 at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.fillDeclaredMembers EclipseSourceType.java:243 at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.getDeclaredFiel ... IRETURN end public boolean isTracingModifications end public class com.centricsoftware.pi.core.data.reflection.Attribute</description>
    <commit commitTime="2008-07-29 16:55:49" id="e9823aa074ffa69352ffcab1ef6be2b00d5accf1"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java</file>
    </fixedFiles>
  </bug>
  <bug id="229910" reportTime="2008-05-01 20:32:00">
    <summary>around advice on field-set join point causes verify error</summary>
    <description>Related to previous reports: https://bugs.eclipse.org/bugs/show_bug.cgi?id=109728 https://bugs.eclipse.org/bugs/show_bug.cgi?id=172107 This new problem was seen by Bryan Jones and reported on the mailing list under post: http://dev.eclipse.org/mhonarc/lists/aspectj-users/msg09113.html The basic scenario is that around advice is being applied to a field-set join point and the field is declared in a super type of the type in which the set takes place. class A { int i; } class B extends A { public void foo { i = 5; } } As per bug 109728 we know this creates bytecode for B.i in method foo . The fix under 109728 ensures the join point is actually for the declaring type, so we see fieldset int A.i . Unfortunately when extracting the body of the join point into around advice for delegation in the case of a proceed call, we calculate the parameters for the around advice body based on the declaring type of the field A and so in the bytecode we see an attempt to use an instance of A as B without a cast. This program shows the problem: public class Test { public static void main String[] argv { new Foo ; } } interface I {} abstract class AbstractFoo implements I { String f; AbstractFoo { } } class Foo extends AbstractFoo{ Foo { super ; f = "hello"; } } aspect X { void around : target I &amp;amp;&amp;amp; set * * { proceed ; } } it will cause a verifyerror when run, unless -1.3 is used as the compile option since 1.3 causes the compiler to use the declaring type of the field in the assignment! . Bryan found this on upgrading from 1.5.2a to 1.5.4 - it was a change due to the bugs mentioned above being resolved and continues to exist in 1.6.0</description>
    <commit commitTime="2008-05-02 02:20:22" id="85af57c52f16fb27506ed109681a7098ae73b197"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="230817" reportTime="2008-05-06 22:43:00">
    <summary>LazyMethodGen.remap NullPointerException</summary>
    <description>This has been reported a few times by different users, but has always proved tough to diagnose. The typical stack trace is something like: java.lang.NullPointerException org.aspectj.weaver.bcel.LazyMethodGen.remap LazyMethodGen.java:1237 org.aspectj.weaver.bcel.LazyMethodGen.addExceptionHandlers LazyMethodGen.java:1132 org.aspectj.weaver.bcel.LazyMethodGen.packBody LazyMethodGen.java:1078 org.aspectj.weaver.bcel.LazyMethodGen.pack LazyMethodGen.java:977 org.aspectj.weaver.bcel.LazyMethodGen.getMethod LazyMethodGen.java:484 org.aspectj.weaver.bcel.LazyClassGen.writeBack LazyClassGen.java:512 org.aspectj.weaver.bcel.LazyClassGen.getJavaClassBytesIncludingReweavable LazyClassGen.java:652 org.aspectj.weaver.bcel.BcelWeaver.getClassFilesFor BcelWeaver.java:1420 org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1390 And that is an exception on this line in remap ih = ih.getNext ; called from the addExceptionHandlers line: gen.addExceptionHandler remap r.getRealStart , map , remap r.getRealEnd , map , remap r.getHandler , map , r.getCatchType == null ? null : ObjectType BcelWorld.makeBcelType r.getCatchType ; During weaving, an instruction list is augmented with extra entries representing where shadows start and end method-call, method-execution, handler, etc . When weaving is complete we want to remove these temporary elements and use the remaining instructions to produce the method bytecode. Now sometimes these temporary entries are targeted by other elements line number tags, local variable tags and exception handlers usually . During packing we use remap to reposition the locations so they move off of temporary placeholders and onto real instructions that will make it out into the bytecode. What the above exception tells us is that we started walking over temporary placeholder entries, but before we came to a real instruction, we ran out of instructions! This cannot happen, and indicates something went seriously wrong, we should always encounter an instruction when remapping off a temporary element. After some digging it is actually the remap call for the handler not the start or end that leads to the problem. The handler represents where to jump to in the code when an exception of the specified type occurs between the instructions pointed at by start and end. I sent a debug build to a user encountering this problem I could not recreate it and in that I was looking at where in fact the handler was pointing before we called remap . I learned that when this problem occurs, the handler is not pointing to anywhere in the method currently being processed not good . In a second debug build I tried to ascertain who was setting these handlers to point to nowhere. This debug never triggered, no-one was setting them to point to nowhere... I happened to notice whilst going through the instructions in the debug output that cobertura was being used, a coverage toolkit that works by doing bytecode manipulation to insert calls out to a library. AspectJ was being called after cobertura and I asked the user to try the steps the other way round - it worked fine. Indicating cobertura was doing something to the bytecode that gave us problems. After much messing about, I recreated it by applying around advice to within * to all the classes in rt.jar I just used that as a very large standalone jar file I could weave into . I learned that Cobertura creates catch blocks that look a little different to what javac and other compilers create. The typical bytecode sequence a compiler produces for a catch block starts with a STORE instruction, to store the exception being caught whether the body of the catch block uses it or not . But the cobertura catch blocks started with an INVOKESTATIC instruction, a call out to another method. What does this mean? It means the same instruction has two shadows, a 'handler' shadow and a 'method-call' shadow - and it turns out this is what causes our problem. If around advice is applied to the call join point and it cannot be inlined then the body of the call shadow the call itself is pulled out into a new method. Because the handler was the same instruction, this meant the handler *was also being pulled out* into the new method, leaving behind an exception handler that jumped to an invalid location in fact it 'jumped' to an instruction in a different method! . So the reason I never saw the handler location being set incorrectly is that it was set correctly up front, but then dragged out with the method-call shadow into the wrong place. In bytecode terms it looks like this: method-execution | ICONST_0 | ISTORE_2 | SIPUSH -1 | ISTORE_3 | catch java.lang.Exception 1806389629 -&amp;gt; E0 | | method-call ProjectData ProjectData.getGlobalProjectData | | | INVOKESTATIC ProjectData.getGlobalProjectData | | method-call ProjectData getGlobalProjectData | | LDC "SomeString" | | method-call ClassData getOrCreateClassData java.lang.String | | | INVOKEVIRTUAL ProjectData.getOrCreateClassData LString; | | method-call ClassData ProjectData.getOrCreateClassData String | | SIPUSH 106 | | method-call void ClassData.touch int | | | INVOKEVIRTUAL ClassData.touch I V | | method-call void ClassData.touch int | | ALOAD_1 | | method-call Object Expression.getValue | | | INVOKEVIRTUAL Expression.getValue | | method-call Object Expression.getValue | catch java.lang.Exception 1806389629 -&amp;gt; E0 | ARETURN | method-call nProjectData ProjectData.getGlobalProjectData | | E0: INVOKESTATIC ProjectData.getGlobalProjectData | method-call ProjectData ProjectData.getGlobalProjectData | LDC "Object" We can see the problem in that final method-call. The target for the exception handler seen earlier E0 is within the method-call shadow. What to do?</description>
    <commit commitTime="2008-05-07 15:31:18" id="5f97d461c819a42c52aa772499f0046db8fa1dda"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="231187" reportTime="2008-05-08 15:38:00">
    <summary>Incorrect Bound mismatch compiler error when injecting an interface</summary>
    <description>Created attachment 99363 [details] A 4 class 1 aspect project which exposes the bug. Build ID: M20080221-1800 Steps To Reproduce: 1. Create a generic class with a bounded type which extends an interface. 2. Write a non generic class which extends the generic class providing a type that does not yet implement the interface. 3. Create an aspect that causes the type to implement the interface. 4. Note the compile error. More information: If the generic type is not bounded there is no error. If the generic type is set to the interface which is injected there is no error. I am attaching a zipped project which exposes the bug. I am using Eclipse 3.3.2, AJDT 1.5.2.200804241330, AspectJ 1.6.0.20080423100000</description>
    <commit commitTime="2008-05-08 21:13:45" id="4e315bcea79925d24801acac5465982a683c6e7a"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc161/Ajc161Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="231396" reportTime="2008-05-09 18:10:00">
    <summary>Refactoring AspectJ</summary>
    <description>Under this enhancement I'm going to cover all the refactoring work I'm doing for 1.6.1 of AspectJ. The aims are: - reduced disk footprint smaller weaver - reduced garbage creation at weave time - reduced memory usage whilst weaving - faster weaving primarily loadtime and binary weaving, possibly also benefiting compile time</description>
    <commit commitTime="2008-05-09 23:24:17" id="53987d5e3b5b4478b24c78f74a17651c15f718f5"/>
    <fixedFiles>
      <file>bridge/src/org/aspectj/bridge/ISourceLocation.java</file>
      <file>bridge/src/org/aspectj/bridge/SourceLocation.java</file>
    </fixedFiles>
  </bug>
  <bug id="231467" reportTime="2008-05-11 12:48:00">
    <summary>Cant Compile new Statement for the Generic Class</summary>
    <description>[aspectj:iajc] error at no source information available [aspectj:iajc] C:\Development\PI\JavaSrc\com\centricsoftware\pi\service\expression\FuncNewMatrix.java:0::0 Internal compiler error [aspectj:iajc] java.lang.ArrayIndexOutOfBoundsException: 1 [aspectj:iajc] at org.aspectj.weaver.ResolvedType.getMemberParameterizationMap ResolvedType.java:744 [aspectj:iajc] at org.aspectj.weaver.ReferenceType.getDeclaredInterfaces ReferenceType.java:411 [aspectj:iajc] at org.aspectj.weaver.ResolvedType.getDirectSupertypes ResolvedType.java:68 [aspectj:iajc] at org.aspectj.weaver.ResolvedType.collectInterTypeMungers ResolvedType.java:1206 [aspectj:iajc] at org.aspectj.weaver.ResolvedType.collectInterTypeMungers ResolvedType.java:1211 [aspectj:iajc] at org.aspectj.weaver.ResolvedType.collectInterTypeMungers ResolvedType.java:1211 [aspectj:iajc] at org.aspectj.weaver.ResolvedType.getInterTypeMungersIncludingSupers ResolvedType.java:1185 [aspectj:iajc] at org.aspectj.weaver.ResolvedType.checkInterTypeMungers ResolvedType.java:1255 [aspectj:iajc] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:646 [aspectj:iajc] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:522 [aspectj:iajc] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.createBinaryTypeFrom AjLookupEnvironment.java:1105 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom LookupEnvironment.java:599 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.accept Compiler.java:276 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType LookupEnvironment.java:113 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve UnresolvedReferenceBinding.java:49 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType BinaryTypeBinding.java:99 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.getMemberType BinaryTypeBinding.java:755 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.findMemberType Scope.java:986 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.getMemberType Scope.java:2116 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference.findNextTypeBinding QualifiedTypeReference.java:43 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference.getTypeBinding QualifiedTypeReference.java:77 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType TypeReference.java:142 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AllocationExpression.resolveType AllocationExpression.java:258 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.resolve LocalDeclaration.java:196 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements AbstractMethodDeclaration.java:433 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements MethodDeclaration.java:196 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve AbstractMethodDeclaration.java:404 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1109 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1188 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve CompilationUnitDeclaration.java:366 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:625 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:392 [aspectj:iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:990 [aspectj:iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:264 [aspectj:iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:180 [aspectj:iajc] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 [aspectj:iajc] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 [aspectj:iajc] at org.aspectj.tools.ajc.Main.run Main.java:378 [aspectj:iajc] at org.aspectj.tools.ajc.Main.runMain Main.java:253 [aspectj:iajc] at org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM AjcTask.java:1303 [aspectj:iajc] at org.aspectj.tools.ant.taskdefs.AjcTask.execute AjcTask.java:1101 [aspectj:iajc] at org.apache.tools.ant.UnknownElement.execute UnknownElement.java:288 [aspectj:iajc] at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method [aspectj:iajc] at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 [aspectj:iajc] at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 [aspectj:iajc] at java.lang.reflect.Method.invoke Method.java:585 [aspectj:iajc] at org.apache.tools.ant.dispatch.DispatchUtils.execute DispatchUtils.java:105 [aspectj:iajc] at org.apache.tools.ant.Task.perform Task.java:348 [aspectj:iajc] at org.apache.tools.ant.Target.execute Target.java:357 [aspectj:iajc] at org.apache.tools.ant.Target.performTasks Target.java:385 [aspectj:iajc] at org.apache.tools.ant.Project.executeSortedTargets Project.java:1329 [aspectj:iajc] at org.apache.tools.ant.Project.executeTarget Project.java:1298 [aspectj:iajc] at org.apache.tools.ant.helper.DefaultExecutor.executeTargets DefaultExecutor.java:41 [aspectj:iajc] at org.eclipse.ant.internal.ui.antsupport.EclipseDefaultExecutor.executeTargets EclipseDefaultExecutor.java:32 [aspectj:iajc] at org.apache.tools.ant.Project.executeTargets Project.java:1181 [aspectj:iajc] at org.eclipse.ant.internal.ui.antsupport.InternalAntRunner.run InternalAntRunner.java:423 [aspectj:iajc] at org.eclipse.ant.internal.ui.antsupport.InternalAntRunner.main InternalAntRunner.java:137 [aspectj:iajc] abort ABORT -- ArrayIndexOutOfBoundsException 1 [aspectj:iajc] 1 [aspectj:iajc] java.lang.ArrayIndexOutOfBoundsException: 1 [aspectj:iajc] at org.aspectj.weaver.ResolvedType.getMemberParameterizationMap ResolvedType.java:744 [aspectj:iajc] at org.aspectj.weaver.ReferenceType.getDeclaredInterfaces ReferenceType.java:411 [aspectj:iajc] at org.aspectj.weaver.ResolvedType.getDirectSupertypes ResolvedType.java:68 [aspectj:iajc] at org.aspectj.weaver.ResolvedType.collectInterTypeMungers ResolvedType.java:1206 [aspectj:iajc] at org.aspectj.weaver.ResolvedType.collectInterTypeMungers ResolvedType.java:1211 [aspectj:iajc] at org.aspectj.weaver.ResolvedType.collectInterTypeMungers ResolvedType.java:1211 [aspectj:iajc] at org.aspectj.weaver.ResolvedType.getInterTypeMungersIncludingSupers ResolvedType.java:1185 [aspectj:iajc] at org.aspectj.weaver.ResolvedType.checkInterTypeMungers ResolvedType.java:1255 [aspectj:iajc] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:646 [aspectj:iajc] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:522 [aspectj:iajc] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.createBinaryTypeFrom AjLookupEnvironment.java:1105 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom LookupEnvironment.java:599 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.accept Compiler.java:276 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType LookupEnvironment.java:113 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve UnresolvedReferenceBinding.java:49 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType BinaryTypeBinding.java:99 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.getMemberType BinaryTypeBinding.java:755 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.findMemberType Scope.java:986 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.getMemberType Scope.java:2116 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference.findNextTypeBinding QualifiedTypeReference.java:43 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference.getTypeBinding QualifiedTypeReference.java:77 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType TypeReference.java:142 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AllocationExpression.resolveType AllocationExpression.java:258 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.resolve LocalDeclaration.java:196 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements AbstractMethodDeclaration.java:433 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements MethodDeclaration.java:196 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve AbstractMethodDeclaration.java:404 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1109 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1188 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve CompilationUnitDeclaration.java:366 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:625 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:392 [aspectj:iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:990 [aspectj:iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:264 [aspectj:iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:180 [aspectj:iajc] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 [aspectj:iajc] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 [aspectj:iajc] at org.aspectj.tools.ajc.Main.run Main.java:378 [aspectj:iajc] at org.aspectj.tools.ajc.Main.runMain Main.java:253 [aspectj:iajc] at org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM AjcTask.java:1303 [aspectj:iajc] at org.aspectj.tools.ant.taskdefs.AjcTask.execute AjcTask.java:1101 [aspectj:iajc] at org.apache.tools.ant.UnknownElement.execute UnknownElement.java:288 [aspectj:iajc] at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method [aspectj:iajc] at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 [aspectj:iajc] at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 [aspectj:iajc] at java.lang.reflect.Method.invoke Method.java:585 [aspectj:iajc] at org.apache.tools.ant.dispatch.DispatchUtils.execute DispatchUtils.java:105 [aspectj:iajc] at org.apache.tools.ant.Task.perform Task.java:348 [aspectj:iajc] at org.apache.tools.ant.Target.execute Target.java:357 [aspectj:iajc] at org.apache.tools.ant.Target.performTasks Target.java:385 [aspectj:iajc] at org.apache.tools.ant.Project.executeSortedTargets Project.java:1329 [aspectj:iajc] at org.apache.tools.ant.Project.executeTarget Project.java:1298 [aspectj:iajc] at org.apache.tools.ant.helper.DefaultExecutor.executeTargets DefaultExecutor.java:41 [aspectj:iajc] at org.eclipse.ant.internal.ui.antsupport.EclipseDefaultExecutor.executeTargets EclipseDefaultExecutor.java:32 [aspectj:iajc] at org.apache.tools.ant.Project.executeTargets Project.java:1181 [aspectj:iajc] at org.eclipse.ant.internal.ui.antsupport.InternalAntRunner.run InternalAntRunner.java:423 [aspectj:iajc] at org.eclipse.ant.internal.ui.antsupport.InternalAntRunner.main InternalAntRunner.java:137 [aspectj:iajc] May 11, 2008 9:35:06 AM org.aspectj.weaver.tools.Jdk14Trace info [aspectj:iajc] INFO: Dumping to C:\Development\PI\Projects\PI-ServiceCommon\.\ajcore.20080511.093506.214.txt [aspectj:iajc] MessageHolder: 92 info 1 error 1 abort [aspectj:iajc] [error 0]: error at no source information available [aspectj:iajc] C:\Development\PI\JavaSrc\com\centricsoftware\pi\service\expression\FuncNewMatrix.java:0::0 Internal compiler error [aspectj:iajc] java.lang.ArrayIndexOutOfBoundsException: 1 [aspectj:iajc] at org.aspectj.weaver.ResolvedType.getMemberParameterizationMap ResolvedType.java:744 [aspectj:iajc] at org.aspectj.weaver.ReferenceType.getDeclaredInterfaces ReferenceType.java:411 [aspectj:iajc] at org.aspectj.weaver.ResolvedType.getDirectSupertypes ResolvedType.java:68 [aspectj:iajc] at org.aspectj.weaver.ResolvedType.collectInterTypeMungers ResolvedType.java:1206 [aspectj:iajc] at org.aspectj.weaver.ResolvedType.collectInterTypeMungers ResolvedType.java:1211 [aspectj:iajc] at org.aspectj.weaver.ResolvedType.collectInterTypeMungers ResolvedType.java:1211 [aspectj:iajc] at org.aspectj.weaver.ResolvedType.getInterTypeMungersIncludingSupers ResolvedType.java:1185 [aspectj:iajc] at org.aspectj.weaver.ResolvedType.checkInterTypeMungers ResolvedType.java:1255 [aspectj:iajc] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:646 [aspectj:iajc] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:522 [aspectj:iajc] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.createBinaryTypeFrom AjLookupEnvironment.java:1105 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom LookupEnvironment.java:599 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.accept Compiler.java:276 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType LookupEnvironment.java:113 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve UnresolvedReferenceBinding.java:49 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType BinaryTypeBinding.java:99 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.getMemberType BinaryTypeBinding.java:755 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.findMemberType Scope.java:986 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.getMemberType Scope.java:2116 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference.findNextTypeBinding QualifiedTypeReference.java:43 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference.getTypeBinding QualifiedTypeReference.java:77 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType TypeReference.java:142 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AllocationExpression.resolveType AllocationExpression.java:258 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.resolve LocalDeclaration.java:196 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements AbstractMethodDeclaration.java:433 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements MethodDeclaration.java:196 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve AbstractMethodDeclaration.java:404 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1109 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1188 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve CompilationUnitDeclaration.java:366 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:625 [aspectj:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:392 [aspectj:iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:990 [aspectj:iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:264 [aspectj:iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:180 [aspectj:iajc] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 [aspectj:iajc] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 [aspectj:iajc] at org.aspectj.tools.ajc.Main.run Main.java:378 [aspectj:iajc] at org.aspectj.tools.ajc.Main.runMain Main.java:253 [aspectj:iajc] at org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM AjcTask.java:1303 [aspectj:iajc] at org.aspectj.tools.ant.taskdefs.AjcTask.execute AjcTask.java:1101 [aspectj:iajc] at org.apache.tools.ant.UnknownElement.execute UnknownElement.java:288 [aspectj:iajc] at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method [aspectj:iajc] at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 [aspectj:iajc] at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 [aspectj:iajc] at java.lang.reflect.Method.invoke Method.java:585 [aspectj:iajc] at org.apache.tools.ant.dispatch.DispatchUtils.execute DispatchUtils.java:105 [aspectj:iajc] at org.apache.tools.ant.Task.perform Task.java:348 [aspectj:iajc] at org.apache.tools.ant.Target.execute Target.java:357 [aspectj:iajc] at org.apache.tools.ant.Target.performTasks Target.java:385 [aspectj:iajc] at org.apache.tools.ant.Project.executeSortedTargets Project.java:1329 [aspectj:iajc] at org.apache.tools.ant.Project.executeTarget Project.java:1298 [aspectj:iajc] at org.apache.tools.ant.helper.DefaultExecutor.executeTargets DefaultExecutor.java:41 [aspectj:iajc] at org.eclipse.ant.internal.ui.antsupport.EclipseDefaultExecutor.executeTargets EclipseDefaultExecutor.java:32 [aspectj:iajc] at org.apache.tools.ant.Project.executeTargets Project.java:1181 [aspectj:iajc] at org.eclipse.ant.internal.ui.antsupport.InternalAntRunner.run InternalAntRunner.java:423 [aspectj:iajc] at org.eclipse.ant.internal.ui.antsupport.InternalAntRunner.main InternalAntRunner.java:137</description>
    <commit commitTime="2008-05-13 19:54:27" id="a8739e3359b0da1fdb60e2201f8fe37265aa9d04"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/TypeFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="231963" reportTime="2008-05-13 18:36:00">
    <summary>Make checking of aspectjrt.jar existence optional</summary>
    <description>In some environments we cant find the runtime jar as aspectjrt.jar or aspectjrt&amp;lt;something&amp;gt;.jar. Rather than put out a warning when the user can do nothing about it, let's make the check optional so it can be deactivated in environments where the user knows what they are doing. New command line option -checkRuntimeVersion:true|false defaults to true but can be set off via -checkRuntimeVersion:false or in iajc with "checkRuntimeVersion"="false"</description>
    <commit commitTime="2008-05-13 23:03:00" id="71fa6407d3fcd3e4aa4c2d938694d4e76c668bf0"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java</file>
    </fixedFiles>
  </bug>
  <bug id="232712" reportTime="2008-05-18 17:23:00">
    <summary>ClassFormatError during LTW using annotation approach</summary>
    <description>The following exception is obtained when using the annotation approach and load-time weaving: [AppClassLoader@1f12c4e] info AspectJ Weaver Version 1.5.4 built on Thursday Dec 20, 2007 at 13:44:10 GMT [AppClassLoader@1f12c4e] info register classloader sun.misc.Launcher$AppClassLoader@1f12c4e [AppClassLoader@1f12c4e] info using configuration /H:/temp/aspectj_bug/scratch/classes/scratch/aop/annotationbug/aspect/aop-bug.xml [AppClassLoader@1f12c4e] info register aspect scratch.aop.annotationbug.aspect.BugAspect doSomething Exception in thread "main" java.lang.ClassFormatError: Code attribute in native or abstract methods in class file scratch/aop/annotationbug/extra/SubClass at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:620 at java.security.SecureClassLoader.defineClass SecureClassLoader.java:124 at java.net.URLClassLoader.defineClass URLClassLoader.java:260 at java.net.URLClassLoader.access$000 URLClassLoader.java:56 at java.net.URLClassLoader$1.run URLClassLoader.java:195 at java.security.AccessController.doPrivileged Native Method at java.net.URLClassLoader.findClass URLClassLoader.java:188 at java.lang.ClassLoader.loadClass ClassLoader.java:306 at sun.misc.Launcher$AppClassLoader.loadClass Launcher.java:276 at java.lang.ClassLoader.loadClass ClassLoader.java:251 at java.lang.ClassLoader.loadClassInternal ClassLoader.java:319 at scratch.aop.annotationbug.extra.BugOther.getSubClass BugOther.java:22 at scratch.aop.annotationbug.main.BugMain.somethingElse BugMain.java:36 at scratch.aop.annotationbug.main.BugMain.doSomething BugMain.java:30 at scratch.aop.annotationbug.main.BugMain.execute BugMain.java:24 at scratch.aop.annotationbug.main.BugDriver.doExecute BugDriver.java:27 at scratch.aop.annotationbug.main.BugDriver.main BugDriver.java:21 The same advice logic does not result in a ClassFormatError when using the Aspect approach, it only appears using the annotation approach. Unfortunately we have not been able to track down exactly why the above Error occurs but have attached a test case that manifests it. To run simply use the runtime configuration on the BugDriver main : -Dorg.aspectj.weaver.loadtime.configuration="scratch/aop/annotationbug/aspect/aop-bug.xml" Along with the AspectJ Load-Time Weaver Agent. The above occurs with both AspectJ 1.5.4 and AspectJ 1.6.0. Interestingly when using the aspectj 1.6.0 weaver, the AppClassLoader log still indicates "1.5.4".</description>
    <commit commitTime="2008-05-20 18:30:38" id="f0142758d0b83904bd648dddf270199777d5ec6c"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="233497" reportTime="2008-05-22 13:12:00">
    <summary>StringIndexOutOfBoundsException thrown in BcelWeaver</summary>
    <description>Created attachment 101560 [details] Core dump A StringIndexOutOfBoundsException is thrown during weaving with the following stack trace: java.lang.StringIndexOutOfBoundsException: String index out of range: -2 at java.lang.String.substring String.java:1938 at org.aspectj.weaver.bcel.BcelWeaver.addIfAspect BcelWeaver.java:294 at org.aspectj.weaver.bcel.BcelWeaver.addAspectsFromDirectory BcelWeaver.java:282 at org.aspectj.weaver.bcel.BcelWeaver.addLibraryJarFile BcelWeaver.java:231 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.initBcelWorld AjBuildManager.java:803 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:243 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:180 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:382 at org.aspectj.tools.ajc.Main.runMain Main.java:254 at org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM AjcTask.java:1303 at org.aspectj.tools.ant.taskdefs.AjcTask.execute AjcTask.java:1101 at org.apache.tools.ant.UnknownElement.execute UnknownElement.java:288 at sun.reflect.GeneratedMethodAccessor2.invoke Unknown Source at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.apache.tools.ant.dispatch.DispatchUtils.execute DispatchUtils.java:105 at org.apache.tools.ant.Task.perform Task.java:348 at org.apache.tools.ant.Target.execute Target.java:357 at org.apache.tools.ant.Target.performTasks Target.java:385 at org.apache.tools.ant.Project.executeSortedTargets Project.java:1329 at org.apache.tools.ant.helper.SingleCheckExecutor.executeTargets SingleCheckExecutor.java:38 at org.apache.tools.ant.Project.executeTargets Project.java:1181 at org.apache.tools.ant.taskdefs.Ant.execute Ant.java:416 at org.apache.tools.ant.taskdefs.CallTarget.execute CallTarget.java:105 at org.apache.tools.ant.UnknownElement.execute UnknownElement.java:288 at sun.reflect.GeneratedMethodAccessor2.invoke Unknown Source at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.apache.tools.ant.dispatch.DispatchUtils.execute DispatchUtils.java:105 at org.apache.tools.ant.Task.perform Task.java:348 at org.apache.tools.ant.taskdefs.Sequential.execute Sequential.java:62 at com.cdmtech.tools.ant.task.conditional.IfSet.execute IfSet.java:48 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.apache.tools.ant.dispatch.DispatchUtils.execute DispatchUtils.java:105 at org.apache.tools.ant.TaskAdapter.execute TaskAdapter.java:134 at org.apache.tools.ant.UnknownElement.execute UnknownElement.java:288 at sun.reflect.GeneratedMethodAccessor2.invoke Unknown Source at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.apache.tools.ant.dispatch.DispatchUtils.execute DispatchUtils.java:105 at org.apache.tools.ant.Task.perform Task.java:348 at org.apache.tools.ant.Target.execute Target.java:357 at org.apache.tools.ant.Target.performTasks Target.java:385 at org.apache.tools.ant.Project.executeSortedTargets Project.java:1329 at org.apache.tools.ant.Project.executeTarget Project.java:1298 at org.apache.tools.ant.helper.DefaultExecutor.executeTargets DefaultExecutor.java:41 at org.apache.tools.ant.Project.executeTargets Project.java:1181 at org.apache.tools.ant.Main.runBuild Main.java:698 at org.apache.tools.ant.Main.startAnt Main.java:199 at org.apache.tools.ant.launch.Launcher.run Launcher.java:257 at org.apache.tools.ant.launch.Launcher.main Launcher.java:104 The core dump is attached. It appears like the calculation of the binary path is failing in addIfAspect. This is due to "name" not containing "typeName" whereby causing the substring method to be called with -2. This exception appears most frequently when weaving with iajc, but does occur oddly enough less frequently in Eclipse/AJDT. My build is the 12 May 2008 development build.</description>
    <commit commitTime="2008-05-22 18:26:18" id="93b7bedd6e367f07cf74782b6d367b9f6f418698"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="233838" reportTime="2008-05-25 01:20:00">
    <summary>Inter-type declarations considered "ambiguous" despite precedence</summary>
    <description>declare precedence for inter-type declarations appears broken in 1.6... The following compiles correctly in version 1.5.4 and produces the output "Y.test " as expected but the 1.6 and last known good developer builds result in: Z.java:2 [error] The method test is ambiguous for the type Z public static void main String[] args throws Exception { new Z .test ; } 1 error interface X { static aspect IMPL { public void X.test { System.out.println "X.test " ; } } } interface Y { static aspect IMPL { declare precedence : Y.IMPL, X.IMPL; public void Y.test { System.out.println "Y.test " ; } } } public class Z implements X, Y { public static void main String[] args throws Exception { new Z .test ; } } Note that you may "trick" ajc into compiling this by casting "new Z " to either X or Y. Doing so will give the same runtime result 1.5.4.</description>
    <commit commitTime="2008-05-27 16:44:14" id="0ad779a799bd8a7dfb6d248aa9cc4c822517dd90"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc161/Ajc161Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="235204" reportTime="2008-06-02 15:02:00">
    <summary>Advice markers not placed properly on recursive calls</summary>
    <description>Advice marker for a call pointcut is not being properly placed. The following aspect and class illustrate this: package recursivepackage; public aspect RecursiveCatcher { pointcut recur : call public void *.recursiveCall int ; before : recur { // empty } public void recursiveCall int i { // marker is here recursiveCall i ; // marker should be here } } Here, AJDT places an advice marker at the execution site ie, on the line "public void recursiveCall int i {" . It should be placed at the line "recursiveCall i ".</description>
    <commit commitTime="2008-06-03 04:38:12" id="239e51fe25f1b88118b77cd1717bac336d536248"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/AsmRelationshipProvider.java</file>
    </fixedFiles>
  </bug>
  <bug id="235505" reportTime="2008-06-03 22:39:00">
    <summary>parsing errors on privileged generic aspect</summary>
    <description>The following aspect definition gives a parsing error: public privileged abstract aspect&amp;lt;T&amp;gt; { }</description>
    <commit commitTime="2008-06-10 18:52:11" id="58961143f7f8e28243a9ae58cd89b25ee14b318d"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc161/Ajc161Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="235597" reportTime="2008-06-04 10:08:00">
    <summary>compiler error when exposing annotations on methods defined in generic classes</summary>
    <description>Build ID: AspectJ Compiler 1.6.0 1.6.0 - Built: Wednesday Apr 23, 2008 at 20:27:36 GMT - Eclipse Compiler 0.785_R33x, 3.3 Steps To Reproduce: 1. Explanation: Defining a pointcut that exposes the annotation of a method fails "-- BCException Couldn't discover annotations for shadow: method-call" when that method is defined inside a generic class and the pointcut is defined with a 'call' construct first piece of advice code . It succeeds when using the 'execution' construct however second piece of advice code , or when not exposing the annotation itself third piece of advice code . It is desirable to be able to expose both the annotation to read its values and the caller as well, also when the callee method is defined in a generic class. 2. Sample Code either comment out first advice or CASE2 to be able to compile . ==Annotation== import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Retention RetentionPolicy.RUNTIME @Target ElementType.METHOD public @interface SomeAnnotation { } == ==aspect== public aspect SomeAspect { void around final SomeAnnotation someAnnotation : call @SomeAnnotation void *.* .. &amp;amp;&amp;amp; @annotation someAnnotation { System.out.println "@someAspect annotation parameter call " ; //CASES 1, 3 only proceed someAnnotation ; } void around final SomeAnnotation someAnnotation : execution @SomeAnnotation void *.* .. &amp;amp;&amp;amp; @annotation someAnnotation { System.out.println "@someAspect annotation parameter execution " ; //CASES 1, 2, 3 proceed someAnnotation ; } void around : call @SomeAnnotation void *.* .. { System.out.println "@someAspect annotation no parameter" ; //CASES 1, 2, 3 proceed ; } void around : call void *.test* .. { System.out.println "@someAspect method name" ; //CASES 1, 2, 3 proceed ; } } == ==TestClass== public class AnnotationTest1 { @SomeAnnotation public void test { System.out.println "test 1" ; } public static void main String[] args { //CASE 1 AnnotationTest1 test1 = new AnnotationTest1 ; test1.test ; //CASE 2 AnnotationTest2&amp;lt;Integer&amp;gt; test2 = new AnnotationTest2&amp;lt;Integer&amp;gt; ; test2.test2 ; //CASE 3 AnnotationTest3 test3 = new AnnotationTest3 ; test3.test3 ; } public static class AnnotationTest2 &amp;lt;Type extends Object&amp;gt; { @SomeAnnotation public void test2 { System.out.println "test 2" ; } } public static class AnnotationTest3 extends AnnotationTest2&amp;lt;Double&amp;gt; { @SomeAnnotation public void test3 { System.out.println "test 3" ; } } } == More information: Bug also occurs in latest Eclipse AJDT version 1.5.3.20080611729 with the following AspectJ internal compiler error: org.aspectj.weaver.BCException at org.aspectj.weaver.bcel.BcelShadow.initializeKindedAnnotationVars BcelShadow.java:1662 at org.aspectj.weaver.bcel.BcelShadow.getKindedAnnotationVar BcelShadow.java:1099 at org.aspectj.weaver.patterns.AnnotationPointcut.findResidueInternal AnnotationPointcut.java:211 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java:269 at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal AndPoin ... otationError.SomeAspect, annotationError.SomeAnnotation, org.aspectj.runtime.internal.AroundClosure</description>
    <commit commitTime="2008-06-04 17:21:13" id="52e8c2b37de4e4f18efe303b0e49e471ea75077e"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="235829" reportTime="2008-06-05 10:06:00">
    <summary>Weaving error: can't determine implemented interfaces</summary>
    <description>To reproduce the bug. Use Eclipse 3.3 and the AJDT 1.5.2 and 1.5.3 dev build , and open the attached source as an AJDT project I'm pretty sure this is a bug because AJDT 1.5.0 produces no error on the same code. can't determine implemented interfaces of missing type dstm2.factory.ofree.Adapter$Getter when weaving type dstm2.factory.ofree.Adapter when weaving classes when weaving when batch building BuildConfig[/home/charlesz/eclipse/dstm] #Files=64 [Xlint:cantFindType] dstm/src/dstm2/factory/ofree Adapter.java Unknown 1212674178104 30172</description>
    <commit commitTime="2008-06-05 20:46:00" id="185d841fb8b93ff3a91dc032d9ee1ad8c0b8a60f"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc161/Ajc161Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="237447" reportTime="2008-06-17 06:28:00">
    <summary>compiler error when calling a method of a member with a member of type "generic&lt;generic&lt;sometype&gt;&gt;[ ]"</summary>
    <description>Build ID: M20080221-1800 Steps To Reproduce: 1. Explanation: Compilation fails with AJDT build 1.5.3.200806091332 when calling a method on a data member when this data member itself contains a data member which is an array of a doubly generic type. The exact compiler error is: === org.aspectj.weaver.BCException at org.aspectj.weaver.UnresolvedType.signatureToName UnresolvedType.java:628 at org.aspectj.weaver.UnresolvedType.signatureToName UnresolvedType.java:603 at org.aspectj.weaver.UnresolvedType.getName UnresolvedType.java:403 at org.aspectj.weaver.bcel.ClassPathManager.find ClassPathManager.java:97 at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass BcelWorld.java:318 at org.aspectj.weaver.bcel.BcelWorld.res ... 18 method-execution void genericArrayError.SomeClass.someMethod end public void someMethod end public class genericArrayError.SomeClass === Ashtonishingly, this compiler error disappears when including a data member of the doubly generic type in the member class. This code compiles without problems as standard java code in Eclipse, but not when it is compiled with AJDT enabled... The sample code is probably much clearer than this explanation. 2. Sample Code: ==GenericClass== public class GenericClass&amp;lt;Type extends Object&amp;gt; { } == ==GenericGenericMemberClass== public class GenericGenericMemberClass { // this line never causes a problem GenericClass&amp;lt;Double&amp;gt; [] genericMemberArray; // this line causes compilation errors to be introduced GenericClass&amp;lt; GenericClass&amp;lt;Double&amp;gt; &amp;gt;[] genericGenericMemberArray; // uncommenting the following lines removes the compilation errors very unexpectedly, for me at least // @SuppressWarnings "unused" // private static final GenericClass&amp;lt; GenericClass&amp;lt;Double&amp;gt; &amp;gt; genericGenericMember = null; public void test { } } == ==SomeClass== public class SomeClass { GenericGenericMemberClass member; public void someMethod { // commenting the following line will remove compilation errors and mask the problem member.test ; } } == More information:</description>
    <commit commitTime="2008-06-17 18:21:29" id="0f01399c3fd0a593eebe6ce12fbb22f238e25d52"/>
    <fixedFiles>
      <file>weaver/testsrc/org/aspectj/weaver/ReferenceTypeTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="237962" reportTime="2008-06-20 13:07:00">
    <summary>[migration] Unexpected problem loading an aspect built with 1.5.4</summary>
    <description>We always support processing of old aspects. It doesn't matter what level of AspectJ was used to build an aspect, as long as you use that version or a later version of the weaver, we can unpack it and don't require it to be rebuilt from source. However, I've just encountered a .class apparently built with 1.5.4 that 1.6.1 cannot load. It crashes deserializing a PointcutDeclaration. In the data stream we have just read the numbers 1 and 3 indicating 'kinded pointcut' and then 'method-execution' and the next digit is a 0 when it should be 1-9. We crash with a: org.aspectj.weaver.BCException: weird kind 0 when batch building BuildConfig[null] #Files=43 at org.aspectj.weaver.MemberKind.read MemberKind.java:35 at org.aspectj.weaver.patterns.SignaturePattern.read SignaturePattern.java:682 The memberkind is a typesafeenum and so can never be other than 1-9. It is the first part of a signaturepattern so hard to see how it got written out 'wrong' right now. I've been told 1.5.4 can load this, so about to try that. Wow....1.5.4 did load it back in, how the hell. I suspect we aren't consuming enough in 1.6.1 which then leaves us some extra that we interpret as a rogue pointcut. Ok, in a comparison we consume one extra byte from the stream when reading it with 1.6.1 that we do not consume with 1.6.0 - at position 260. As I got closer to it, I knew what it would be - especially when I knew it was just one byte difference. The version check for whether the byte for 'annotation pattern relates to a parameter match' was wrong urgh .</description>
    <commit commitTime="2008-06-20 17:15:52" id="be0316737b255f5e9d05bd76ea1e7bf973c347e1"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/AndAnnotationTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/OrAnnotationTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/NotAnnotationTypePattern.java</file>
    </fixedFiles>
  </bug>
  <bug id="238666" reportTime="2008-06-26 15:05:00">
    <summary>Allow the ltw configuration to be directly specified rather than discovered on the classpath</summary>
    <description>Currently the property: org.aspectj.weaver.loadtime.configuration can be set to name the ltw configuration file that the loadtime weaver searches for. The default value is: META-INF/aop.xml;META-INF/aop-ajc.xml;org/aspectj/aop.xml and the weaver searches the classpath for .xml files matching any of those three possibilities. A typical override might therefore be: -Dorg.aspectj.weaver.loadtime.configuration=META-INF/overhere.xml however the weaver will still only look for it on the classpath. In some environments the ltw user may just want to name the aop config file to use, and not be forced to include it on the classpath. We have had the suggestion to make it protocol based, which i like, but for now I would just allow support for 'file:'. If file: is the prefix, it will be treated as direct reference to the file to use, otherwise it will be searched for. This change would mean all existing uses of the override will be fine, but new users will be all to exploit the flexibility of naming their configuration directly.</description>
    <commit commitTime="2008-08-06 18:10:47" id="df49b5c64ad56dcb67424bbcdbe27976c5b77477"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="238992" reportTime="2008-06-30 10:03:00">
    <summary>Annotation values in declare parents or declare @type.</summary>
    <description>Build ID: M20080221-1800 AJDT Version: 1.5.3.200805181553 AspectJ version: 1.6.1.20080513130000 Steps To Reproduce: 1. Create in aspect construction like: declare parents: @Entity indexed=true * implements EntityObject; or declare @type : @Entity indexed=true * : @javax.persistence.Entity; More information: Annotation values work only in standard pointcuts. Within constructions like "declare parents" or "declare @type" they don't work. When writing this in ajdt there is an error: java.lang.NullPointerException at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches ExactAnnotationTypePattern.java:126 at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches ExactAnnotationTypePattern.java:94 at org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern.matchesExactly TypePattern.java:478 at org.aspectj.weaver.patterns.TypePattern.matchesStatically TypePattern.java:121 at org.aspectj.weaver.patterns.DeclareParents.match DeclareParents.java:62 at org.aspectj.weaver.patterns.DeclareParents.findMatchingNewParents DeclareParents.java:338 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareParents AjLookupEnvironment.java:710 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:589 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveIntertypes AjLookupEnvironment.java:370 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:217 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile Compiler.java:605 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:357 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:371 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:990 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:264 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:216 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:187 at org.aspectj.ajde.core.internal.AjdeCoreBuildManager.doBuild AjdeCoreBuildManager.java:97 at org.aspectj.ajde.core.AjCompiler.build AjCompiler.java:118 at org.eclipse.ajdt.core.builder.AJBuilder.build AJBuilder.java:205 at org.eclipse.core.internal.events.BuildManager$2.run BuildManager.java:624 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:37 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:166 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:197 at org.eclipse.core.internal.events.BuildManager$1.run BuildManager.java:246 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:37 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:249 at org.eclipse.core.internal.events.BuildManager.basicBuildLoop BuildManager.java:302 at org.eclipse.core.internal.events.BuildManager.build BuildManager.java:334 at org.eclipse.core.internal.events.AutoBuildJob.doBuild AutoBuildJob.java:137 at org.eclipse.core.internal.events.AutoBuildJob.run AutoBuildJob.java:235 at org.eclipse.core.internal.jobs.Worker.run Worker.java:55</description>
    <commit commitTime="2008-07-07 22:32:37" id="3d5b79a6b05bb26b025e9e9e7d4ad2772a85d023"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/ReferenceType.java</file>
    </fixedFiles>
  </bug>
  <bug id="239441" reportTime="2008-07-03 09:48:00">
    <summary>declare parents or @type problem when using hasmethod with annotation in signature</summary>
    <description>Build ID: M20080221-1800 Steps To Reproduce: 1. Create aspect: public aspect SampleAspect { declare parents : hasmethod @Something * *.* .. implements SampleInterface; private interface SampleInterface{ } } More information: Sometimes this declare parents advice is applied where it shouldn't be. For example: public class Test3{ public Iterator&amp;lt;Integer&amp;gt; iter = new Iterator&amp;lt;Integer&amp;gt; { @Override public boolean hasNext { return false; } @Override public Integer next { return null; } @Override public void remove { } }; } "new Iterator" has SampleInterface applied as its parent, but it surely hasn't got any method with annotation @Something.</description>
    <commit commitTime="2008-07-17 17:09:54" id="49303882a2920465cf8889b7d7975bbe329696c0"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc162/Ajc162Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="239539" reportTime="2008-07-03 19:56:00">
    <summary>Problems extending an abstract aspect in another package</summary>
    <description>Very strange, reported on the list: I am using eclipse right now to do my aspectj coding, and I can't seem to create a concrete aspect in package x from an abstract aspect in package y. I always get the error: "inherited abstract pointcut bar.PrintAround.method is not made concrete in foo.PrintAroundFoo" Here is a small example that exhibits this issue: package bar; public abstract aspect PrintAround { abstract pointcut method ; Object around : method { System.out.println "-before-" ; Object r = proceed ; System.out.println "-after-" ; return r; } } //--------------------------------------------------- package foo; public class Foo { public static void main String[] args { System.out.println "foo!" ; } } //--------------------------------------------------- package foo; import bar.PrintAround; public aspect PrintAroundFoo extends PrintAround { pointcut method : call void Main String[] ; } //--------------------------------------------------- I worked around this issue before, but right now I'm trying to create a library of aspects, and it's a pain that I have to make the aspects always be part of the application namespace.</description>
    <commit commitTime="2008-08-20 18:56:47" id="95f5dac42dd995f1c03162a2d43a5d69067e159d"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc162/Ajc162Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="239910" reportTime="2008-07-07 22:17:00">
    <summary>Problem setting the binary path of a ProgramElement if name of type is a substring on the fully qualified path of the type</summary>
    <description>The method BcelWeaver.addIfAspect finds the absolute file path of a type this way: String typeName = type.getName .replace '.', File.separatorChar ; int end = name.indexOf typeName ; where "name" is the full path of the type. In this case: name= "/Users/andrew/Eclipse/Workspaces/runtime-AJDT1.5/aj1/bin/A.class" typeName="A" This would mean: binaryPath="/Users/andrew/Eclipse/Workspaces/runtime" which is wrong Solution, use: name.lastIndexOf instead of name.indexOf This issue may occur in other areas. I haven't checked.</description>
    <commit commitTime="2008-07-08 15:10:10" id="f8c24e135998cea81deb38a5d66752e73e463a83"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="240234" reportTime="2008-07-09 16:56:00">
    <summary>[ajdoc] Generate AJDoc command fails on projects with large number of files</summary>
    <description>Build ID: I20080617-2000 Steps To Reproduce: 1. Load a project into eclipse containing a large number of files I didn't bother to find the limit &amp;gt; 600 will fail for sure. 2. Select the project and run the Generate AJDoc command 3. Fill in required fields and click Finish 4. Error dialog comes up "Cannot run program "C:\Program Files\Java\jre1.6.0_05\bin\java": CreateProcess error=87, The parameter is incorrect" More information:</description>
    <commit commitTime="2008-07-31 18:24:24" id="84af74fbe910946b44b13c879c39c06ece47db9a"/>
    <fixedFiles>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/Ajdoc.java</file>
    </fixedFiles>
  </bug>
  <bug id="240360" reportTime="2008-07-10 12:59:00">
    <summary>Build not weaving with errors in project</summary>
    <description>Created attachment 107105 [details] Test Case Eclipse 3.4.0 AJDT: 1.6.0.200807041530 from http://download.eclipse.org/tools/ajdt/34/dev/update NOTE: This behavior appears to be the same I experienced using Eclipse 3.3 and a more recent 3.3 development build, so I think it applies to that as well. 1 Import attached TestProject 2 Run test.TestIt : It only displays done. The around advice was not hit but it should have been 6 times. 3 Delete Error.java 4 Run test.TestIt: It now hits the around advice 6 times. 5 Undo so Error.java is back, or create a new Error2.java with a blatant error in it. 6 Run test.TestIt: the advice is still hit 6 times. 7 Add the following line inside the around advice and save I assume build automatically is turned on : System.out.println "Advice changed" ; 6 Run test.TestIt: Exception: Exception in thread "main" java.lang.VerifyError: class: test/aj/ModelAspect, method: &amp;lt;clinit&amp;gt; signature: V Stack size too large at test.Base.&amp;lt;init&amp;gt; Base.java:9 at test.Sub.&amp;lt;init&amp;gt; Sub.java:9 at test.TestIt.main TestIt.java:5 7 Project-&amp;gt;Clean-&amp;gt;TestProject 2 Run test.TestIt : It only displays done. The around advice was not hit.</description>
    <commit commitTime="2008-07-17 20:07:56" id="349acc6542f0c2e586ce0e6ac9cfb906844d08d6"/>
    <fixedFiles>
      <file>ajde.core/src/org/aspectj/ajde/core/internal/AjdeCoreBuildManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="240693" reportTime="2008-07-14 11:29:00">
    <summary>generic anonymous inner class with a local variable with an identical name as an instance variable of this generic class causes a compiler error when defined in advice of a privileged aspect</summary>
    <description>Build ID: M20080221-1800 Steps To Reproduce: 1. When defining an advice with a generic anonymous inner class, compilation failes with "Compile error: IllegalStateException thrown: Use generic type, not parameterized type" when the following three conditions are fulfilled: a the aspect is privileged b the inner class constructor is parameterized i.e. 'new PayloadClass&amp;lt;Object&amp;gt; ' vs 'new PayloadClass ' c a method defined in the inner class has a local variable with a name identical to an instance variable of the inner class. This may be a problem in the following case: - a may be necessary to access private fields of relevant classes. - b Even though it compiles fine, you get warnings about type safety, just the thing you want to avoid by using generics. - c You may not know the name of all fields of the generic class. Even though I do realize this error is quite a corner case and can be easily avoided by renaming the local variable, the error should not be thrown and it is not very helpful in diagnosing the problem when it arises. As always, the sample code is much more straightforward than the explanation: 2. Sample Code comment and uncomment relevant parts to be able to compile . ==SomeInterface.java== public interface SomeInterface {} ==PayloadClass.java== public class PayloadClass&amp;lt;Type extends Object&amp;gt; { private Type payload; public void setPayload Type payload { this.payload = payload; } public Type getPayload { return this.payload; } public void run { System.out.println "payload class run" ; } } ==GenericClassInAdvice.aj== // priviligedness of aspect contributes to the error //public aspect GenericClassInAdvice { // comment out this line and comment the following to be able to compile... privileged aspect GenericClassInAdvice { Object around final SomeInterface src, final SomeInterface dst : call !void *.* .. &amp;amp;&amp;amp; this src &amp;amp;&amp;amp; target dst { // the parameterized constructor contributes to the error // final PayloadClass&amp;lt;Object&amp;gt; payloadClass = new PayloadClass/*&amp;lt;Object&amp;gt;*/ { // comment out this line and comment the following to be able to compile... final PayloadClass&amp;lt;Object&amp;gt; payloadClass = new PayloadClass&amp;lt;Object&amp;gt; { public void run { // this triggers a compiler error in combination with: // * privilegedness of the aspect "privileged aspect ..." // * parameterized constructor "new PayloadClass&amp;lt;Object&amp;gt; {...}' // * the existence of a payload field in PayloadClass Object payload = proceed src,dst ; // comment this line and the following or rename 'payload' to 'pl' to be able to compile... this.setPayload payload ; } }; payloadClass.run ; return payloadClass.getPayload ; } } More information: Eclipse version: Version: 3.3.2 Build id: M20080221-1800 AJDT version: AJDT 1.5.3.200806242310 AspectJ 1.6.1.20080624142100</description>
    <commit commitTime="2008-08-19 23:14:31" id="7b3134928cc1510172cbcb4693eb49e2f5d113a8"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/PrivilegedHandler.java</file>
    </fixedFiles>
  </bug>
  <bug id="241047" reportTime="2008-07-16 04:11:00">
    <summary>pointcut does not match methods in subclasses of a generic base class GBC when the aspect uses "declare parents : GBC extends SomeInterface" and the pointcut uses SomeInterface+ for matching.</summary>
    <description>Build ID: M20080221-1800 Steps To Reproduce: 1. When trying to match methods of classes based on whether they implement SomeInterface or not, this matching fails in the following case: a SomeInterface is introduced to the base of a class hierarchy through an aspect 'declare parents' . b The base class is generic. c The pointcut uses SomeInterface+ for matching the whole hierarchy. This effect can be seen in SomeSubClass.tag_SomeMethod . When condition a is absent, matching happens correctly as seen in SomeSubClass2.tag_SomeMethod . When condition b is absent, matching happens correctly as well as can be seen in SomeSubClass3.tag_SomeMethod . 2. Sample Code ==SomeAspect== public aspect SomeAspect { declare parents: SomeBaseClass implements SomeInterface; declare parents: SomeBaseClass3 implements SomeInterface; before : execution * SomeInterface+ .tag* .. { System.out.println "correct advice :- " ; } before : execution * !SomeInterface+ .tag* .. { System.out.println "this advice should never run..." ; } } ==SomeInterface== public interface SomeInterface {} ==SomeBaseClass== public class SomeBaseClass&amp;lt;Type extends Object&amp;gt; { public void tag_someBaseMethod { System.out.println "some base method" ; } public static void main String[] args { new SomeBaseClass&amp;lt;Object&amp;gt; .tag_someBaseMethod ; new SomeSubClass .tag_someMethod ; // this does not match correctly... System.out.println "" ; new SomeBaseClass2&amp;lt;Object&amp;gt; .tag_someBaseMethod ; new SomeSubClass2 .tag_someMethod ; System.out.println "" ; new SomeBaseClass3 .tag_someBaseMethod ; new SomeSubClass3 .tag_someMethod ; } } ==SomeSubClass== public class SomeSubClass extends SomeBaseClass&amp;lt;Integer&amp;gt; { // this method is not matched correctly... public void tag_someMethod { System.out.println "some sub method" ; } } ==SomeBaseClass2== public class SomeBaseClass2&amp;lt;Type extends Object&amp;gt; implements SomeInterface { public void tag_someBaseMethod { System.out.println "some base method2" ; } } ==SomeSubClass2== public class SomeSubClass2 extends SomeBaseClass2&amp;lt;Integer&amp;gt; { // this method matches correctly public void tag_someMethod { System.out.println "some sub method2" ; } } ==SomeBaseClass3== public class SomeBaseClass3 { public void tag_someBaseMethod { System.out.println "some base method3" ; } } ==SomeSubClass3== public class SomeSubClass3 extends SomeBaseClass3 { // this method matches correctly public void tag_someMethod { System.out.println "some sub method3" ; } } 3. Output of the main method in SomeBaseClass: == correct advice :- some base method this advice should never run... some sub method correct advice :- some base method2 correct advice :- some sub method2 correct advice :- some base method3 correct advice :- some sub method3 == More information: Eclipse version: Version: 3.3.2 Build id: M20080221-1800 AJDT version: AJDT 1.5.3.200806242310 AspectJ 1.6.1.20080624142100</description>
    <commit commitTime="2008-08-13 18:32:53" id="d4a5c74c9ffd54a15298117d9a3ca3e43b30d7b1"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc162/Ajc162Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="243192" reportTime="2008-08-05 12:12:00">
    <summary>ClassGenException after upgrade from 1.6.0 to 1.6.1</summary>
    <description>Created attachment 109179 [details] ajcore file Upgraded to Spring 2.5.6 nightly build which includes AspectJ 1.6.1. Now my project doesn't compile and this seems to be caused by the upgrade to AspectJ 1.6.1: [iajc] -- ClassGenException Do not attempt to modify the index for this constant instruction: aload_0[42] size1 [iajc] Do not attempt to modify the index for this constant instruction: aload_0[42] size1 [iajc] org.aspectj.apache.bcel.generic.ClassGenException: Do not attempt to modify the index for this constant instruction: aload_0[42] size1 [iajc] at org.aspectj.apache.bcel.generic.InstructionCLV.setIndex InstructionCLV.java:19 [iajc] at org.aspectj.weaver.bcel.BcelClassWeaver.genInlineInstructions BcelClassWeaver.java:1949 [iajc] at org.aspectj.weaver.bcel.BcelClassWeaver.inlineMethod BcelClassWeaver.java:1429 [iajc] at org.aspectj.weaver.bcel.BcelClassWeaver.inlineSelfConstructors BcelClassWeaver.java:1352 [iajc] at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:502 [iajc] at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:105 [iajc] at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1669 [iajc] at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1620 [iajc] at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1393 [iajc] at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1213 [iajc] at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:454 [iajc] at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving AjPipeliningCompilerAdapter.java:391 [iajc] at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:379 [iajc] at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:98 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:641 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:392 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:995 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:269 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:184 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 [iajc] at org.aspectj.tools.ajc.Main.run Main.java:382 [iajc] at org.aspectj.tools.ajc.Main.runMain Main.java:254 [iajc] at org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM AjcTask.java:1307 [iajc] at org.aspectj.tools.ant.taskdefs.AjcTask.execute AjcTask.java:1105 [iajc] at org.apache.tools.ant.UnknownElement.execute UnknownElement.java:288 [iajc] at sun.reflect.GeneratedMethodAccessor2.invoke Unknown Source [iajc] at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 [iajc] at java.lang.reflect.Method.invoke Method.java:597 [iajc] at org.apache.tools.ant.dispatch.DispatchUtils.execute DispatchUtils.java:105 [iajc] at org.apache.tools.ant.Task.perform Task.java:348 [iajc] at org.apache.tools.ant.Target.execute Target.java:357 [iajc] at org.apache.tools.ant.Target.performTasks Target.java:385 [iajc] at org.apache.tools.ant.Project.executeSortedTargets Project.java:1329 [iajc] at org.apache.tools.ant.Project.executeTarget Project.java:1298 [iajc] at org.apache.tools.ant.helper.DefaultExecutor.executeTargets DefaultExecutor.java:41 [iajc] at org.apache.tools.ant.Project.executeTargets Project.java:1181 [iajc] at org.apache.tools.ant.Main.runBuild Main.java:698 [iajc] at org.apache.tools.ant.Main.startAnt Main.java:199 [iajc] at org.apache.tools.ant.launch.Launcher.run Launcher.java:257 [iajc] at org.apache.tools.ant.launch.Launcher.main Launcher.java:104</description>
    <commit commitTime="2008-08-13 18:18:22" id="78e22836ceeb746446dc0aded64a0e6df3b78743"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/Instruction.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/InstructionCLV.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/InstructionLV.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/InstructionConstants.java</file>
    </fixedFiles>
  </bug>
  <bug id="243376" reportTime="2008-08-06 22:54:00">
    <summary>[incremental] Incremental compilation in a scenario with a large number of projects</summary>
    <description>We are working on a scenario that has 50 or so projects. With only a couple made AspectJ projects and the rest being normal Java projects, the development experience is OK. When they are all converted to AspectJ projects, and the aspects from the base AJ projects which provide FFDC and Trace are applied across *all of them* by inclusion of those base projects on the aspectpath of all the other projects , the development experience slows to a crawl. Observations so far: - some of these projects include resources and incremental compilation treatment of resources hasn't been optimized. - AJDT may be rebuilding the element map ajdts version of the structure model when not necessary I've developed an AJ testcase for the first scenario and have a fix that seems to be behaving.</description>
    <commit commitTime="2008-08-14 20:36:50" id="24f15b58cbaa6d204a41070bd01c8a836943dee4"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MoreOutputLocationManagerTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="244321" reportTime="2008-08-15 13:54:00">
    <summary>I cannot aspect code written in SJPP-based encoding</summary>
    <description>Created attachment 110112 [details] sjpp.jar to parse encoding I cannot aspect code written in SJPP-based encoding However, I *can* compile the code fine: - if I remove Aspect nature from my project, or - using command line ajc of slightly newer version of AspectJ . i.e., ajc.bat -J-Dpp.charset=%USERPROFILE%\pp.charset.properties -encoding MY_ENCODING -d out ... Adding "-encoding MY_ENCODING" to AspectJ non-standard compiler options did *not* help. source code: ------------ public class Foo { public static void main String [] args { #ifdef A_MACRO System.out.println "ok!" ; #endif } } errors reported by "Problems" view: ----------------------------------- Severity and Description Path Resource Location Creation Time Id A_MACRO cannot be resolved to a type encoded/src Foo.java line 3 1218821924326 474099 out cannot be resolved encoded/src Foo.java line 4 1218821924326 474101 Syntax error on token ".", ; expected encoded/src Foo.java line 4 1218821924326 474100 Syntax error on token "Invalid Character", @ expected encoded/src Foo.java line 3 1218821924326 474098 Syntax error, insert ";" to complete Statement encoded/src Foo.java line 4 1218821924326 474102 project encoding: ----------------- Set to: MY_ENCODING %USERPROFILE%/pp.charset.properties: ------------------------------------ charset = MY_ENCODING MY_ENCODING.defines = A_MACRO My Eclipse environment is: -------------------------- * Eclipse AspectJ Development Tools Version: 1.5.2.200804241330 AspectJ version [for Eclipse]: 1.6.0.20080423100000 * AspectJ version [for ajc]: AspectJ Compiler 1.6.1 1.6.1 - Built: Thursday Jul 3, 2008 at 18:35:41 GMT - Eclipse Compiler 0.785_R33x, 3.3 * Eclipse v3.3.2 M20080221-1800 * C:\jdk1.5\jre\lib\ext\sjpp.jar see attached</description>
    <commit commitTime="2008-08-29 20:08:59" id="d5c2eadfa5e873ae300b52c0ecd86a3a8dedd088"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="244830" reportTime="2008-08-21 11:14:00">
    <summary>Is initFailureCause necessary in pertypewithin aspects?</summary>
    <description>the field is defined for ptw aspects but not used - either remove it or use it.</description>
    <commit commitTime="2008-08-21 16:29:48" id="1fa8b08feed7ff90f9ed4fc759480cfe77b18db0"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc162/Ajc162Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="245286" reportTime="2008-08-26 13:39:00">
    <summary>ajdoc does not generate signature correctly for generic constructer</summary>
    <description>Created attachment 110975 [details] Test Case Build ID: M20080221-1800 Steps To Reproduce: 1.Create a Class C with the following constructor public class C { public &amp;lt;T&amp;gt; C T b { } } 2. Run "ajdoc -source 1.5" on Class C More information: It seems it writes the signature for "public &amp;lt;T&amp;gt; C T b " as "public C T b " so when it ajdoc calls javadoc on the signature file you get an error "cannot find symbol".</description>
    <commit commitTime="2008-08-28 02:18:27" id="8e99d6053bd8f2cfa89eb37de5be24e1dd48aef9"/>
    <fixedFiles>
      <file>tests/bugs153/GenericMethod/C.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="245307" reportTime="2008-08-26 16:01:00">
    <summary>Aspected annotations cause ajdoc to generate ClassCastExceptions</summary>
    <description>Created attachment 110994 [details] Test Case Build ID: M20080221-1800 Steps To Reproduce: 1.Create a Class A an @interface B and an Aspect C. 2.B should be in a package separate from A. 3.Have Aspect C declare annotation B on class A. 4.Run ajdoc on the files. More information: The problem behind this seems to be that the annotation is written to the signature file, but because the class doesn't have the annotation in its imports it doesn't know about the aspected annotation. When ajdoc calls javadoc on the class A file it gives a "cannot find symbol" error.</description>
    <commit commitTime="2008-08-28 02:29:29" id="5077a5824f695906fc635c36e42af1c9d960ffca"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="245734" reportTime="2008-08-29 14:27:00">
    <summary>AJDT throws a RuntimeException from EclipseResolvedMember.getAnnotations</summary>
    <description>Build ID: N/A Steps To Reproduce: This exception is happening for us in both Eclipse 3.4 and 3.3 when we run an incremental build on one of our projects. We are using an aspect to declare an annotation on a class in the project, and we only started seeing this exception after we added it. A clean build on the project never throws the exception, only an incremental build. More information: The Exception Stack Trace: java.lang.RuntimeException at org.aspectj.ajdt.internal.compiler.lookup.EclipseResolvedMember.getAnnotations EclipseResolvedMember.java:78 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareAnnotations AjLookupEnvironment.java:794 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:592 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironmen ... at org.eclipse.core.internal.jobs.Worker.run Worker.java:55 Compile error: RuntimeException thrown: not yet implemented - please raise an AJ bug I was going to include the AJDT Event log for the build but it is very long, and mostly unremarkable, so I have included only the section for the project where the exception was thrown. 11:9:50 Build kind = INCREMENTALBUILD 11:9:50 Project=ICODES, kind of build requested=Incremental AspectJ compilation 11:9:50 build: Examined delta - source file changes in required project ICODES 11:9:51 Found state instance managing output location : C:\jnaylor\Java_Dev\workspace\ICDM 11:9:51 Failed to find a state instance managing output location : C:\jnaylor\Java_dev\workspace\Dependencies\MARVEL\resources 11:9:51 Failed to find a state instance managing output location : C:\jnaylor\Java_Dev\workspace\GSG 11:9:52 Failed to find a state instance managing output location : C:\jnaylor\Java_dev\.build\Launch4J 11:9:52 Preparing for build: planning to be an incremental build 11:9:52 Starting incremental compilation loop 1 of possibly 5 11:9:52 AJDE Callback: finish. Was full build: false 11:9:52 Timer event: 2172ms: Total time spent in AJDE 11:9:54 Timer event: 47ms: Create element map 0 rels in project: ICODES 11:9:54 Types affected during build = 0 11:9:54 Timer event: 0ms: Add markers 0 markers 11:9:54 Timer event: 3735ms: Total time spent in AJBuilder.build 11:9:54 =========================================================================================== This is occurring frequently, but not every time so we haven't been able to narrow down a reasonable sized test case.</description>
    <commit commitTime="2008-09-22 23:58:59" id="f376a21458ead647d32320cfbc779b67c7b7521d"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseResolvedMember.java</file>
    </fixedFiles>
  </bug>
  <bug id="246021" reportTime="2008-09-02 18:22:00">
    <summary>FindBugs reporting another optimization</summary>
    <description>Ben Hale reported that FindBugs was producing a warning about a dead store to a local variable a variable that is never then read within the method . This bug is to investigate and hopefully remove the dead store.</description>
    <commit commitTime="2008-09-03 00:28:44" id="78a483d0aed48c974a4a2408f9e1adb2822d1242"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="246125" reportTime="2008-09-03 14:29:00">
    <summary>[plan] [split] Split matching and weaving</summary>
    <description/>
    <commit commitTime="2008-09-05 17:05:43" id="c3587474e9f348ff64d3de42dd15319943dbcd6f"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
      <file>weaver/src/org/aspectj/weaver/JoinPointSignature.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
      <file>weaver/src/org/aspectj/weaver/AnnotatedElement.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedMember.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedMemberImpl.java</file>
      <file>weaver/src/org/aspectj/weaver/AnnotationAJ.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/Utility.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelMethod.java</file>
      <file>weaver/src/org/aspectj/weaver/ReferenceTypeDelegate.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
      <file>weaver/src/org/aspectj/weaver/Member.java</file>
      <file>weaver/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegate.java</file>
      <file>weaver/src/org/aspectj/weaver/reflect/ReflectionBasedResolvedMemberImpl.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/patterns/AnnotationPatternTestCase.java</file>
      <file>weaver/src/org/aspectj/weaver/ResolvedType.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/DeclareAnnotation.java</file>
      <file>weaver/src/org/aspectj/weaver/BoundedReferenceType.java</file>
      <file>weaver/src/org/aspectj/weaver/ReferenceType.java</file>
      <file>weaver/src/org/aspectj/weaver/reflect/AnnotationFinder.java</file>
      <file>weaver/src/org/aspectj/weaver/MemberImpl.java</file>
      <file>weaver/src/org/aspectj/weaver/patterns/ExactAnnotationTypePattern.java</file>
      <file>weaver/src/org/aspectj/weaver/AnnotationOnTypeMunger.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/AnnotationAccessFieldVar.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelField.java</file>
      <file>weaver/src/org/aspectj/weaver/AnnotationX.java</file>
    </fixedFiles>
  </bug>
  <bug id="246264" reportTime="2008-09-04 14:55:00">
    <summary>[plan][annotations] VerifyError - annotation value binding when doubly annotated method-execution join point</summary>
    <description>This code == bangbang ----8&amp;lt;----- enum Color {R,G,B;} @interface I { public Color a ; } @interface J { public Color b default Color.B; } public class A { @J @I a=Color.R public static void main String []argv { } } aspect X { before Color var : execution * main .. &amp;amp;&amp;amp; @annotation I var { if var!=Color.R { throw new RuntimeException "Wrong! Was "+var ; } } } ----8&amp;lt;----- Exception in thread "main" java.lang.VerifyError: class: A, method: main signat ure: [Ljava/lang/String; V Incompatible object argument for function call</description>
    <commit commitTime="2008-09-04 19:07:22" id="cdd9d5fe5cf01ec317e1fee948fa1962e9465f6e"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc162/Ajc162Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="246281" reportTime="2008-09-04 16:30:00">
    <summary>[plan] incremental compilation when changing annotations on a type can fail</summary>
    <description>If a pointcut conditionally advises some type based on an annotation being on a supertype in its hierarchy then AspectJ will fail to undo the weave if the super type has the annotation removed and an incremental compilation is performed. The code in AjState that checks what constitutes a structure change doesn't take annotations into account and because it can affect this situation, it should.</description>
    <commit commitTime="2008-09-04 21:06:16" id="988458bbc0c8f2b06bd18c56075f153b24d93f9b"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</file>
    </fixedFiles>
  </bug>
  <bug id="246393" reportTime="2008-09-05 11:35:00">
    <summary>[plan] Cascading errors</summary>
    <description>I've noticed for a long time that in AJDT that when there is a missing paren or bracket, many spurious errors appear throughout the editor. I am attaching two screenshots. The first is a missing paren when the project is an AspectJ project. And the second is the same error in the same project when it is a Java project. This is most likely a compiler and a factor of how the compiler parses syntactically incorrect files. Perhaps this should be filed under AspectJ</description>
    <commit commitTime="2009-01-27 02:41:20" id="671bafd7b5e584d96a44d4f35059ec9046c1a4f7"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc164/Ajc164Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="247683" reportTime="2008-09-17 12:45:00">
    <summary>Weaver produce NPE exceptions</summary>
    <description>Created attachment 112789 [details] ajcore dump After upgrading fro, 1.5.4 to 1.6.1 on application startup in JBoss appears strange exception. With debugger I've found that problems occurs when on class is invoked getMethods 17:58:36,890 ERROR [STDERR] [WebAppClassLoader@1a768de] abort trouble in: public abstract class com.uwiss.jenive.dao.GenericHibernateDao extends org.springframework.orm.hibernate3.support.HibernateDaoSupport implements com.uwiss.jenive.dao.GenericDao: protected final Class persistentClass [Signature Ljava/lang/Class&amp;lt;TT;&amp;gt;; ] protected void &amp;lt;init&amp;gt; : ALOAD_0 // Lcom/uwiss/jenive/dao/GenericHibernateDao; this line 27 INVOKESPECIAL org.springframework.orm.hibernate3.support.HibernateDaoSupport.&amp;lt;init&amp;gt; V constructor-execution void com.uwiss.jenive.dao.GenericHibernateDao.&amp;lt;init&amp;gt; | ALOAD_0 // Lcom/uwiss/jenive/dao/GenericHibernateDao; this line 28 | ALOAD_0 // Lcom/uwiss/jenive/dao/GenericHibernateDao; this | INVOKEVIRTUAL java.lang.Object.getClass Ljava/lang/Class; | INVOKEVIRTUAL java.lang.Class.getGenericSuperclass Ljava/lang/reflect/Type; | CHECKCAST java.lang.reflect.ParameterizedType | INVOKEINTERFACE java.lang.reflect.ParameterizedType.getActualTypeArguments [Ljava/lang/reflect/Type; | ICONST_0 | AALOAD | CHECKCAST java.lang.Class | PUTFIELD com.uwiss.jenive.dao.GenericHibernateDao.persistentClass Ljava/lang/Class; | RETURN line 29 constructor-execution void com.uwiss.jenive.dao.GenericHibernateDao.&amp;lt;init&amp;gt; end protected void &amp;lt;init&amp;gt; public Class getPersistentClass : ALOAD_0 // Lcom/uwiss/jenive/dao/GenericHibernateDao; this line 32 GETFIELD com.uwiss.jenive.dao.GenericHibernateDao.persistentClass Ljava/lang/Class; ARETURN end public Class getPersistentClass public Object getEntity java.io.Serializable, boolean : ILOAD_2 // Z lock line 39 IFEQ L0 ALOAD_0 // Lcom/uwiss/jenive/dao/GenericHibernateDao; this line 40 INVOKEVIRTUAL com.uwiss.jenive.dao.GenericHibernateDao.getSession Lorg/hibernate/Session; ALOAD_0 // Lcom/uwiss/jenive/dao/GenericHibernateDao; this GETFIELD com.uwiss.jenive.dao.GenericHibernateDao.persistentClass Ljava/lang/Class; ALOAD_1 // Ljava/io/Serializable; id GETSTATIC org.hibernate.LockMode.UPGRADE Lorg/hibernate/LockMode; INVOKEINTERFACE org.hibernate.Session.get Ljava/lang/Class;Ljava/io/Serializable;Lorg/hibernate/LockMode; Ljava/lang/Object; ASTORE_3 GOTO L1 L0: ALOAD_0 // Lcom/uwiss/jenive/dao/GenericHibernateDao; this line 42 INVOKEVIRTUAL com.uwiss.jenive.dao.GenericHibernateDao.getSession Lorg/hibernate/Session; ALOAD_0 // Lcom/uwiss/jenive/dao/GenericHibernateDao; this GETFIELD com.uwiss.jenive.dao.GenericHibernateDao.persistentClass Ljava/lang/Class; ALOAD_1 // Ljava/io/Serializable; id INVOKEINTERFACE org.hibernate.Session.get Ljava/lang/Class;Ljava/io/Serializable; Ljava/lang/Object; ASTORE_3 L1: ALOAD_3 // Ljava/lang/Object; entity line 44 ARETURN end public Object getEntity java.io.Serializable, boolean public Object loadEntity java.io.Serializable, boolean : ILOAD_2 // Z lock line 51 IFEQ L0 ALOAD_0 // Lcom/uwiss/jenive/dao/GenericHibernateDao; this line 52 INVOKEVIRTUAL com.uwiss.jenive.dao.GenericHibernateDao.getSession Lorg/hibernate/Session; ALOAD_0 // Lcom/uwiss/jenive/dao/GenericHibernateDao; this GETFIELD com.uwiss.jenive.dao.GenericHibernateDao.persistentClass Ljava/lang/Class; ALOAD_1 // Ljava/io/Serializable; id GETSTATIC org.hibernate.LockMode.UPGRADE Lorg/hibernate/LockMode; INVOKEINTERFACE org.hibernate.Session.load Ljava/lang/Class;Ljava/io/Serializable;Lorg/hibernate/LockMode; Ljava/lang/Object; ASTORE_3 GOTO L1 L0: ALOAD_0 // Lcom/uwiss/jenive/dao/GenericHibernateDao; this line 54 INVOKEVIRTUAL com.uwiss.jenive.dao.GenericHibernateDao.getSession Lorg/hibernate/Session; ALOAD_0 // Lcom/uwiss/jenive/dao/GenericHibernateDao; this GETFIELD com.uwiss.jenive.dao.GenericHibernateDao.persistentClass Ljava/lang/Class; ALOAD_1 // Ljava/io/Serializable; id INVOKEINTERFACE org.hibernate.Session.load Ljava/lang/Class;Ljava/io/Serializable; Ljava/lang/Object; ASTORE_3 L1: ALOAD_3 // Ljava/lang/Object; entity line 56 ARETURN end public Object loadEntity java.io.Serializable, boolean public java.util.List listAll : ALOAD_0 // Lcom/uwiss/jenive/dao/GenericHibernateDao; this line 61 ICONST_0 ANEWARRAY org.hibernate.criterion.Criterion INVOKEVIRTUAL com.uwiss.jenive.dao.GenericHibernateDao.findByCriteria [Lorg/hibernate/criterion/Criterion; Ljava/util/List; ARETURN end public java.util.List listAll public transient java.util.List listByExample Object, String[] : ALOAD_0 // Lcom/uwiss/jenive/dao/GenericHibernateDao; this line 66 INVOKEVIRTUAL com.uwiss.jenive.dao.GenericHibernateDao.getSession Lorg/hibernate/Session; ALOAD_0 // Lcom/uwiss/jenive/dao/GenericHibernateDao; this GETFIELD com.uwiss.jenive.dao.GenericHibernateDao.persistentClass Ljava/lang/Class; INVOKEINTERFACE org.hibernate.Session.createCriteria Ljava/lang/Class; Lorg/hibernate/Criteria; ASTORE_3 ALOAD_1 // Ljava/lang/Object; exampleInstance line 67 INVOKESTATIC org.hibernate.criterion.Example.create Ljava/lang/Object; Lorg/hibernate/criterion/Example; ASTORE 4 ALOAD_2 // [Ljava/lang/String; excludeProperty line 68 ASTORE 5 ALOAD 5 // [Ljava/lang/String; arr$ ARRAYLENGTH ISTORE 6 ICONST_0 ISTORE 7 L0: ILOAD 7 // I i$ ILOAD 6 // I len$ IF_ICMPGE L1 ALOAD 5 // [Ljava/lang/String; arr$ ILOAD 7 // I i$ AALOAD ASTORE 8 ALOAD 4 // Lorg/hibernate/criterion/Example; example line 69 ALOAD 8 // Ljava/lang/String; exclude INVOKEVIRTUAL org.hibernate.criterion.Example.excludeProperty Ljava/lang/String; Lorg/hibernate/criterion/Example; POP IINC 7 1 // I i$ line 68 GOTO L0 L1: ALOAD_3 // Lorg/hibernate/Criteria; crit line 71 ALOAD 4 // Lorg/hibernate/criterion/Example; example INVOKEINTERFACE org.hibernate.Criteria.add Lorg/hibernate/criterion/Criterion; Lorg/hibernate/Criteria; POP ALOAD_3 // Lorg/hibernate/Criteria; crit line 72 INVOKEINTERFACE org.hibernate.Criteria.list Ljava/util/List; ARETURN end public transient java.util.List listByExample Object, String[] public Object makePersistent Object : ALOAD_0 // Lcom/uwiss/jenive/dao/GenericHibernateDao; this line 77 17:58:36,890 ERROR [STDERR] INVOKEVIRTUAL com.uwiss.jenive.dao.GenericHibernateDao.getSession Lorg/hibernate/Session; ALOAD_1 // Ljava/lang/Object; entity INVOKEINTERFACE org.hibernate.Session.saveOrUpdate Ljava/lang/Object; V ALOAD_1 // Ljava/lang/Object; entity line 78 ARETURN end public Object makePersistent Object public void makeTransient Object : ALOAD_0 // Lcom/uwiss/jenive/dao/GenericHibernateDao; this line 82 INVOKEVIRTUAL com.uwiss.jenive.dao.GenericHibernateDao.getSession Lorg/hibernate/Session; ALOAD_1 // Ljava/lang/Object; entity INVOKEINTERFACE org.hibernate.Session.delete Ljava/lang/Object; V RETURN line 83 end public void makeTransient Object public void flush : ALOAD_0 // Lcom/uwiss/jenive/dao/GenericHibernateDao; this line 86 INVOKEVIRTUAL com.uwiss.jenive.dao.GenericHibernateDao.getSession Lorg/hibernate/Session; INVOKEINTERFACE org.hibernate.Session.flush V RETURN line 87 end public void flush public void clear : ALOAD_0 // Lcom/uwiss/jenive/dao/GenericHibernateDao; this line 90 INVOKEVIRTUAL com.uwiss.jenive.dao.GenericHibernateDao.getSession Lorg/hibernate/Session; INVOKEINTERFACE org.hibernate.Session.clear V RETURN line 91 end public void clear protected transient java.util.List findByCriteria org.hibernate.criterion.Criterion[] : ALOAD_0 // Lcom/uwiss/jenive/dao/GenericHibernateDao; this line 101 INVOKEVIRTUAL com.uwiss.jenive.dao.GenericHibernateDao.getSession Lorg/hibernate/Session; ALOAD_0 // Lcom/uwiss/jenive/dao/GenericHibernateDao; this GETFIELD com.uwiss.jenive.dao.GenericHibernateDao.persistentClass Ljava/lang/Class; INVOKEINTERFACE org.hibernate.Session.createCriteria Ljava/lang/Class; Lorg/hibernate/Criteria; ASTORE_2 ALOAD_1 // [Lorg/hibernate/criterion/Criterion; criterion line 102 ASTORE_3 ALOAD_3 // [Lorg/hibernate/criterion/Criterion; arr$ ARRAYLENGTH ISTORE 4 ICONST_0 ISTORE 5 L0: ILOAD 5 // I i$ ILOAD 4 // I len$ IF_ICMPGE L1 ALOAD_3 // [Lorg/hibernate/criterion/Criterion; arr$ ILOAD 5 // I i$ AALOAD ASTORE 6 ALOAD_2 // Lorg/hibernate/Criteria; crit line 103 ALOAD 6 // Lorg/hibernate/criterion/Criterion; c INVOKEINTERFACE org.hibernate.Criteria.add Lorg/hibernate/criterion/Criterion; Lorg/hibernate/Criteria; POP IINC 5 1 // I i$ line 102 GOTO L0 L1: ALOAD_2 // Lorg/hibernate/Criteria; crit line 105 INVOKEINTERFACE org.hibernate.Criteria.list Ljava/util/List; ARETURN end protected transient java.util.List findByCriteria org.hibernate.criterion.Criterion[] protected transient java.util.List findByExample Object, String[] : ALOAD_0 // Lcom/uwiss/jenive/dao/GenericHibernateDao; this line 110 INVOKEVIRTUAL com.uwiss.jenive.dao.GenericHibernateDao.getSession Lorg/hibernate/Session; ALOAD_0 // Lcom/uwiss/jenive/dao/GenericHibernateDao; this INVOKEVIRTUAL com.uwiss.jenive.dao.GenericHibernateDao.getPersistentClass Ljava/lang/Class; INVOKEINTERFACE org.hibernate.Session.createCriteria Ljava/lang/Class; Lorg/hibernate/Criteria; ASTORE_3 ALOAD_1 // Ljava/lang/Object; exampleInstance line 111 INVOKESTATIC org.hibernate.criterion.Example.create Ljava/lang/Object; Lorg/hibernate/criterion/Example; ASTORE 4 ALOAD_2 // [Ljava/lang/String; excludeProperty line 112 ASTORE 5 ALOAD 5 // [Ljava/lang/String; arr$ ARRAYLENGTH ISTORE 6 ICONST_0 ISTORE 7 L0: ILOAD 7 // I i$ ILOAD 6 // I len$ IF_ICMPGE L1 ALOAD 5 // [Ljava/lang/String; arr$ ILOAD 7 // I i$ AALOAD ASTORE 8 ALOAD 4 // Lorg/hibernate/criterion/Example; example line 113 ALOAD 8 // Ljava/lang/String; exclude INVOKEVIRTUAL org.hibernate.criterion.Example.excludeProperty Ljava/lang/String; Lorg/hibernate/criterion/Example; POP IINC 7 1 // I i$ line 112 GOTO L0 L1: ALOAD_3 // Lorg/hibernate/Criteria; crit line 115 ALOAD 4 // Lorg/hibernate/criterion/Example; example INVOKEINTERFACE org.hibernate.Criteria.add Lorg/hibernate/criterion/Criterion; Lorg/hibernate/Criteria; POP ALOAD_3 // Lorg/hibernate/Criteria; crit line 116 INVOKEINTERFACE org.hibernate.Criteria.list Ljava/util/List; ARETURN end protected transient java.util.List findByExample Object, String[] protected transient java.util.List findByCriteria org.hibernate.Criteria, org.hibernate.criterion.Criterion[] : ALOAD_2 // [Lorg/hibernate/criterion/Criterion; criterion line 121 ASTORE_3 ALOAD_3 // [Lorg/hibernate/criterion/Criterion; arr$ ARRAYLENGTH ISTORE 4 ICONST_0 ISTORE 5 L0: ILOAD 5 // I i$ ILOAD 4 // I len$ IF_ICMPGE L1 ALOAD_3 // [Lorg/hibernate/criterion/Criterion; arr$ ILOAD 5 // I i$ AALOAD ASTORE 6 ALOAD_1 // Lorg/hibernate/Criteria; criteria line 122 ALOAD 6 // Lorg/hibernate/criterion/Criterion; c INVOKEINTERFACE org.hibernate.Criteria.add Lorg/hibernate/criterion/Criterion; Lorg/hibernate/Criteria; POP IINC 5 1 // I i$ line 121 GOTO L0 L1: ALOAD_1 // Lorg/hibernate/Criteria; criteria line 124 INVOKEINTERFACE org.hibernate.Criteria.list Ljava/util/List; ARETURN end protected transient java.util.List findByCriteria org.hibernate.Criteria, org.hibernate.criterion.Criterion[] protected transient Object getByCriteria org.hibernate.criterion.Criterion[] : ALOAD_0 // Lcom/uwiss/jenive/dao/GenericHibernateDao; this line 129 INVOKEVIRTUAL com.uwiss.jenive.dao.GenericHibernateDao.getSession Lorg/hibernate/Session; ALOAD_0 // Lcom/uwiss/jenive/dao/GenericHibernateDao; this GETFIELD com.uwiss.jenive.dao.GenericHibernateDao.persistentClass Ljava/lang/Class; INVOKEINTERFACE org.hibernate.Session.createCriteria Ljava/lang/Class; Lorg/hibernate/Criteria; ASTORE_2 ALOAD_1 // [Lorg/hibernate/criterion/Criterion; criterion line 130 ASTORE_3 17:58:36,890 ERROR [STDERR] ALOAD_3 // [Lorg/hibernate/criterion/Criterion; arr$ ARRAYLENGTH ISTORE 4 ICONST_0 ISTORE 5 L0: ILOAD 5 // I i$ ILOAD 4 // I len$ IF_ICMPGE L1 ALOAD_3 // [Lorg/hibernate/criterion/Criterion; arr$ ILOAD 5 // I i$ AALOAD ASTORE 6 ALOAD_2 // Lorg/hibernate/Criteria; crit line 131 ALOAD 6 // Lorg/hibernate/criterion/Criterion; c INVOKEINTERFACE org.hibernate.Criteria.add Lorg/hibernate/criterion/Criterion; Lorg/hibernate/Criteria; POP IINC 5 1 // I i$ line 130 GOTO L0 L1: ALOAD_2 // Lorg/hibernate/Criteria; crit line 133 INVOKEINTERFACE org.hibernate.Criteria.uniqueResult Ljava/lang/Object; ARETURN end protected transient Object getByCriteria org.hibernate.criterion.Criterion[] end public abstract class com.uwiss.jenive.dao.GenericHibernateDao -- NullPointerException null null java.lang.NullPointerException at org.aspectj.weaver.ReferenceType.getAnnotationTypes ReferenceType.java:156 at org.aspectj.weaver.patterns.WildAnnotationTypePattern.matches WildAnnotationTypePattern.java:229 at org.aspectj.weaver.patterns.WildAnnotationTypePattern.matches WildAnnotationTypePattern.java:69 at org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern.matchesExactly TypePattern.java:478 at org.aspectj.weaver.patterns.TypePattern.matchesStatically TypePattern.java:121 at org.aspectj.weaver.patterns.TypePattern.matches TypePattern.java:134 at org.aspectj.weaver.patterns.TypePatternList.matches TypePatternList.java:142 at org.aspectj.weaver.patterns.SignaturePattern.matchesExactlyMethod SignaturePattern.java:403 at org.aspectj.weaver.patterns.SignaturePattern.matchesExactly SignaturePattern.java:341 at org.aspectj.weaver.patterns.SignaturePattern.matches SignaturePattern.java:305 at org.aspectj.weaver.patterns.KindedPointcut.matchInternal KindedPointcut.java:106 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.OrPointcut.matchInternal OrPointcut.java:51 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.OrPointcut.matchInternal OrPointcut.java:51 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.OrPointcut.matchInternal OrPointcut.java:51 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.OrPointcut.matchInternal OrPointcut.java:51 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.OrPointcut.matchInternal OrPointcut.java:51 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.ShadowMunger.match ShadowMunger.java:75 at org.aspectj.weaver.Checker.match Checker.java:70 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2834 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2340 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:482 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:105 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1669 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1620 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1393 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1213 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:394 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:281 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:91 at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform ClassPreProcessorAgentAdapter.java:52 at org.springframework.context.weaving.AspectJWeavingEnabler$AspectJClassBypassingClassFileTransformer.transform AspectJWeavingEnabler.java:92 at org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver$FilteringClassFileTransformer.transform InstrumentationLoadTimeWeaver.java:181 at sun.instrument.TransformerManager.transform TransformerManager.java:169 at sun.instrument.InstrumentationImpl.transform InstrumentationImpl.java:365 at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:620 at java.security.SecureClassLoader.defineClass SecureClassLoader.java:124 at org.apache.catalina.loader.WebappClassLoader.findClassInternal WebappClassLoader.java:1814 at org.apache.catalina.loader.WebappClassLoader.findClass WebappClassLoader.java:872 at org.jboss.web.tomcat.service.WebAppClassLoader.findClass WebAppClassLoader.java:139 at org.apache.catalina.loader.WebappClassLoader.loadClass WebappClassLoader.java:1325 at org.apache.catalina.loader.WebappClassLoader.loadClass WebappClassLoader.java:1204 at java.lang.ClassLoader.loadClassInternal ClassLoader.java:319 at java.lang.Class.forName0 Native Method at java.lang.Class.forName Class.java:169 at com.uwiss.jenive.security.MethodSecuritySynchronizerImpl.synchronize MethodSecuritySynchronizerImpl.java:75 at com.uwiss.jenive.security.MethodSecuritySynchronizerImpl.postProcessBeanFactory MethodSecuritySynchronizerImpl.java:49 at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors AbstractApplicationContext.java:554 at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors AbstractApplicationContext.java:545 at org.springframework.context.support.AbstractApplicationContext.refresh AbstractApplicationContext.java:363 at org.springframework.web.context.ContextLoader.createWebApplicationContext ContextLoader.java:255 at org.springframework.web.context.ContextLoader.initWebApplicationContext ContextLoader.java:199 at org.springframework.web.context.ContextLoaderListener.contextInitialized ContextLoaderListener.java:45 at org.apache.catalina.core.StandardContext.listenerStart StandardContext.java:3856 at org.apache.catalina.core.StandardContext.start StandardContext.java:4361 at org.apache.catalina.core.ContainerBase.addChildInternal ContainerBase.java:790 at org.apache.catalina.core.ContainerBase.addChild ContainerBase.java:770 at org.apache.catalina.core.StandardHost.addChild StandardHost.java:553 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.apache.tomcat.util.modeler.BaseModelMBean.invoke BaseModelMBean.java:296 at org.jboss.mx.server.RawDynamicInvoker.invoke RawDynamicInvoker.java:164 at org.jboss.mx.server.MBeanServerImpl.invoke MBeanServerImpl.java:659 at org.apache.catalina.core.StandardContext.init StandardContext.java:5312 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.apache.tomcat.util.modeler.BaseModelMBean.invoke BaseModelMBean.java:296 at org.jboss.mx.server.RawDynamicInvoker.invoke RawDynamicInvoker.java:164 at org.jboss.mx.server.MBeanServerImpl.invoke MBeanServerImpl.java:659 at org.jboss.web.tomcat.service.TomcatDeployer.performDeployInternal TomcatDeployer.java:301 at org.jboss.web.tomcat.service.TomcatDeployer.performDeploy TomcatDeployer.java:104 at org.jboss.web.AbstractWebDeployer.start AbstractWebDeployer.java:375 at org.jboss.web.WebModule.startModule WebM 17:58:36,890 ERROR [STDERR] odule.java:83 at org.jboss.web.WebModule.startService WebModule.java:61 at org.jboss.system.ServiceMBeanSupport.jbossInternalStart ServiceMBeanSupport.java:289 at org.jboss.system.ServiceMBeanSupport.jbossInternalLifecycle ServiceMBeanSupport.java:245 at sun.reflect.GeneratedMethodAccessor3.invoke Unknown Source at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.jboss.mx.interceptor.ReflectedDispatcher.invoke ReflectedDispatcher.java:155 at org.jboss.mx.server.Invocation.dispatch Invocation.java:94 at org.jboss.mx.server.Invocation.invoke Invocation.java:86 at org.jboss.mx.server.AbstractMBeanInvoker.invoke AbstractMBeanInvoker.java:264 at org.jboss.mx.server.MBeanServerImpl.invoke MBeanServerImpl.java:659 at org.jboss.system.ServiceController$ServiceProxy.invoke ServiceController.java:978 at $Proxy0.start Unknown Source at org.jboss.system.ServiceController.start ServiceController.java:417 at sun.reflect.GeneratedMethodAccessor9.invoke Unknown Source at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.jboss.mx.interceptor.ReflectedDispatcher.invoke ReflectedDispatcher.java:155 at org.jboss.mx.server.Invocation.dispatch Invocation.java:94 at org.jboss.mx.server.Invocation.invoke Invocation.java:86 at org.jboss.mx.server.AbstractMBeanInvoker.invoke AbstractMBeanInvoker.java:264 at org.jboss.mx.server.MBeanServerImpl.invoke MBeanServerImpl.java:659 at org.jboss.mx.util.MBeanProxyExt.invoke MBeanProxyExt.java:210 at $Proxy44.start Unknown Source at org.jboss.web.AbstractWebContainer.start AbstractWebContainer.java:466 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.jboss.mx.interceptor.ReflectedDispatcher.invoke ReflectedDispatcher.java:155 at org.jboss.mx.server.Invocation.dispatch Invocation.java:94 at org.jboss.mx.interceptor.AbstractInterceptor.invoke AbstractInterceptor.java:133 at org.jboss.mx.server.Invocation.invoke Invocation.java:88 at org.jboss.mx.interceptor.ModelMBeanOperationInterceptor.invoke ModelMBeanOperationInterceptor.java:142 at org.jboss.mx.interceptor.DynamicInterceptor.invoke DynamicInterceptor.java:97 at org.jboss.system.InterceptorServiceMBeanSupport.invokeNext InterceptorServiceMBeanSupport.java:238 at org.jboss.wsf.container.jboss42.DeployerInterceptor.start DeployerInterceptor.java:87 at org.jboss.deployment.SubDeployerInterceptorSupport$XMBeanInterceptor.start SubDeployerInterceptorSupport.java:188 at org.jboss.deployment.SubDeployerInterceptor.invoke SubDeployerInterceptor.java:95 at org.jboss.mx.server.Invocation.invoke Invocation.java:88 at org.jboss.mx.server.AbstractMBeanInvoker.invoke AbstractMBeanInvoker.java:264 at org.jboss.mx.server.MBeanServerImpl.invoke MBeanServerImpl.java:659 at org.jboss.mx.util.MBeanProxyExt.invoke MBeanProxyExt.java:210 at $Proxy45.start Unknown Source at org.jboss.deployment.MainDeployer.start MainDeployer.java:1025 at org.jboss.deployment.MainDeployer.deploy MainDeployer.java:819 at org.jboss.deployment.MainDeployer.deploy MainDeployer.java:782 at sun.reflect.GeneratedMethodAccessor21.invoke Unknown Source at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.jboss.mx.interceptor.ReflectedDispatcher.invoke ReflectedDispatcher.java:155 at org.jboss.mx.server.Invocation.dispatch Invocation.java:94 at org.jboss.mx.interceptor.AbstractInterceptor.invoke AbstractInterceptor.java:133 at org.jboss.mx.server.Invocation.invoke Invocation.java:88 at org.jboss.mx.interceptor.ModelMBeanOperationInterceptor.invoke ModelMBeanOperationInterceptor.java:142 at org.jboss.mx.server.Invocation.invoke Invocation.java:88 at org.jboss.mx.server.AbstractMBeanInvoker.invoke AbstractMBeanInvoker.java:264 at org.jboss.mx.server.MBeanServerImpl.invoke MBeanServerImpl.java:659 at org.jboss.mx.util.MBeanProxyExt.invoke MBeanProxyExt.java:210 at $Proxy9.deploy Unknown Source at org.jboss.deployment.scanner.URLDeploymentScanner.deploy URLDeploymentScanner.java:421 at org.jboss.deployment.scanner.URLDeploymentScanner.scan URLDeploymentScanner.java:634 at org.jboss.deployment.scanner.AbstractDeploymentScanner$ScannerThread.doScan AbstractDeploymentScanner.java:263 at org.jboss.deployment.scanner.AbstractDeploymentScanner.startService AbstractDeploymentScanner.java:336 at org.jboss.system.ServiceMBeanSupport.jbossInternalStart ServiceMBeanSupport.java:289 at org.jboss.system.ServiceMBeanSupport.jbossInternalLifecycle ServiceMBeanSupport.java:245 at sun.reflect.GeneratedMethodAccessor3.invoke Unknown Source at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.jboss.mx.interceptor.ReflectedDispatcher.invoke ReflectedDispatcher.java:155 at org.jboss.mx.server.Invocation.dispatch Invocation.java:94 at org.jboss.mx.server.Invocation.invoke Invocation.java:86 at org.jboss.mx.server.AbstractMBeanInvoker.invoke AbstractMBeanInvoker.java:264 at org.jboss.mx.server.MBeanServerImpl.invoke MBeanServerImpl.java:659 at org.jboss.system.ServiceController$ServiceProxy.invoke ServiceController.java:978 at $Proxy0.start Unknown Source at org.jboss.system.ServiceController.start ServiceController.java:417 at sun.reflect.GeneratedMethodAccessor9.invoke Unknown Source at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.jboss.mx.interceptor.ReflectedDispatcher.invoke ReflectedDispatcher.java:155 at org.jboss.mx.server.Invocation.dispatch Invocation.java:94 at org.jboss.mx.server.Invocation.invoke Invocation.java:86 at org.jboss.mx.server.AbstractMBeanInvoker.invoke AbstractMBeanInvoker.java:264 at org.jboss.mx.server.MBeanServerImpl.invoke MBeanServerImpl.java:659 at org.jboss.mx.util.MBeanProxyExt.invoke MBeanProxyExt.java:210 at $Proxy4.start Unknown Source at org.jboss.deployment.SARDeployer.start SARDeployer.java:302 at org.jboss.deployment.MainDeployer.start MainDeployer.java:1025 at org.jboss.deployment.MainDeployer.deploy MainDeployer.java:819 at org.jboss.deployment.MainDeployer.deploy MainDeployer.java:782 at org.jboss.deployment.MainDeployer.deploy MainDeployer.java:766 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.jboss.mx.interceptor.ReflectedDispatcher.invoke ReflectedDispatcher.java:155 at org.jboss.mx.server.Invocation.dispatch Invocation.java:94 at org.jboss.mx.interceptor.AbstractInterceptor.invoke AbstractInterceptor.java:133 at org.jboss.mx.server.Invocation.invoke Invocation.java:88 at org.jboss.mx.interceptor.ModelMBeanOperationInterceptor.invoke ModelMBeanOperationInterceptor.java:142 at org.jboss.mx.server.Invocation.invoke Invocation.java:88 at org.jboss.mx.server.AbstractMBeanInvoker.invoke AbstractMBeanInvoker.java:264 at org.jboss.mx.server.MBeanServerImpl.invoke MBeanServerImpl.java:659 at org.jboss.mx.util.MBeanProxyExt.invoke MBeanProxyExt.java:210 at $Proxy5.deploy Unknown Source at org.jboss.system.server.ServerImpl.doStart ServerImpl.java:482 at org.jboss.system.server.ServerImpl.start ServerImpl.java:362 at org.jboss.Main.boot Main.java:200 at org.jboss.Main$1.run Main.java:508 at java.lang.Thread.run Thread.java:619 17:58:36,906 ERROR [STDERR] Sep 17, 2008 5:58:36 PM org.aspectj.weaver.tools.Jdk14Trace error SEVERE: com/uwiss/jenive/dao/GenericHibernateDao java.lang.NullPointerException at org.aspectj.weaver.ReferenceType.getAnnotationTypes ReferenceType.java:156 at org.aspectj.weaver.patterns.WildAnnotationTypePattern.matches WildAnnotationTypePattern.java:229 at org.aspectj.weaver.patterns.WildAnnotationTypePattern.matches WildAnnotationTypePattern.java:69 at org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern.matchesExactly TypePattern.java:478 at org.aspectj.weaver.patterns.TypePattern.matchesStatically TypePattern.java:121 at org.aspectj.weaver.patterns.TypePattern.matches TypePattern.java:134 at org.aspectj.weaver.patterns.TypePatternList.matches TypePatternList.java:142 at org.aspectj.weaver.patterns.SignaturePattern.matchesExactlyMethod SignaturePattern.java:403 at org.aspectj.weaver.patterns.SignaturePattern.matchesExactly SignaturePattern.java:341 at org.aspectj.weaver.patterns.SignaturePattern.matches SignaturePattern.java:305 at org.aspectj.weaver.patterns.KindedPointcut.matchInternal KindedPointcut.java:106 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.OrPointcut.matchInternal OrPointcut.java:51 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.OrPointcut.matchInternal OrPointcut.java:51 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.OrPointcut.matchInternal OrPointcut.java:51 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.OrPointcut.matchInternal OrPointcut.java:51 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.OrPointcut.matchInternal OrPointcut.java:51 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.ShadowMunger.match ShadowMunger.java:75 at org.aspectj.weaver.Checker.match Checker.java:70 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2834 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2340 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:482 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:105 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1669 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1620 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1393 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1213 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:394 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:281 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:91 at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform ClassPreProcessorAgentAdapter.java:52 at org.springframework.context.weaving.AspectJWeavingEnabler$AspectJClassBypassingClassFileTransformer.transform AspectJWeavingEnabler.java:92 at org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver$FilteringClassFileTransformer.transform InstrumentationLoadTimeWeaver.java:181 at sun.instrument.TransformerManager.transform TransformerManager.java:169 at sun.instrument.InstrumentationImpl.transform InstrumentationImpl.java:365 at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:620 at java.security.SecureClassLoader.defineClass SecureClassLoader.java:124 at org.apache.catalina.loader.WebappClassLoader.findClassInternal WebappClassLoader.java:1814 at org.apache.catalina.loader.WebappClassLoader.findClass WebappClassLoader.java:872 at org.jboss.web.tomcat.service.WebAppClassLoader.findClass WebAppClassLoader.java:139 at org.apache.catalina.loader.WebappClassLoader.loadClass WebappClassLoader.java:1325 at org.apache.catalina.loader.WebappClassLoader.loadClass WebappClassLoader.java:1204 at java.lang.ClassLoader.loadClassInternal ClassLoader.java:319 at java.lang.Class.forName0 Native Method at java.lang.Class.forName Class.java:169 at com.uwiss.jenive.security.MethodSecuritySynchronizerImpl.synchronize MethodSecuritySynchronizerImpl.java:75 at com.uwiss.jenive.security.MethodSecuritySynchronizerImpl.postProcessBeanFactory MethodSecuritySynchronizerImpl.java:49 at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors AbstractApplicationContext.java:554 at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors AbstractApplicationContext.java:545 at org.springframework.context.support.AbstractApplicationContext.refresh AbstractApplicationContext.java:363 at org.springframework.web.context.ContextLoader.createWebApplicationContext ContextLoader.java:255 at org.springframework.web.context.ContextLoader.initWebApplicationContext ContextLoader.java:199 at org.springframework.web.context.ContextLoaderListener.contextInitialized ContextLoaderListener.java:45 at org.apache.catalina.core.StandardContext.listenerStart StandardContext.java:3856 at org.apache.catalina.core.StandardContext.start StandardContext.java:4361 at org.apache.catalina.core.ContainerBase.addChildInternal ContainerBase.java:790 at org.apache.catalina.core.ContainerBase.addChild ContainerBase.java:770 at org.apache.catalina.core.StandardHost.addChild StandardHost.java:553 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.apache.tomcat.util.modeler.BaseModelMBean.invoke BaseModelMBean.java:296 at org.jboss.mx.server.RawDynamicInvoker.invoke RawDynamicInvoker.java:164 at org.jboss.mx.server.MBeanServerImpl.invoke MBeanServerImpl.java:659 at org.apache.catalina.core.StandardContext.init StandardContext.java:5312 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.apache.tomcat.util.modeler.BaseModelMBean.invoke BaseModelMBean.java:296 at org.jboss.mx.server.RawDynamicInvoker.invoke RawDynamicInvoker.java:164 at org.jboss.mx.server.MBeanServerImpl.invoke MBeanServerImpl.java:659 at org.jboss.web.tomcat.service.TomcatDeployer.performDeployInternal TomcatDeployer.java:301 at org.jboss.web.tomcat.service.TomcatDeployer.performDeploy TomcatDeployer.java:104 at org.jboss.web.AbstractWebDeployer.start AbstractWebDeployer.java:375 at org.jboss.web.WebModule.startModule WebModule.java:83 at org.jboss.web.WebModule.startService WebModule.java:61 at org.jboss.system.ServiceMBeanSupport.jbossInternalStart ServiceMBeanSupport.java:289 at org.jboss.system.ServiceMBeanSupport.jbossInternalLifecycle ServiceMBeanSupport.java:245 at sun.reflect.GeneratedMethodAccessor3.invoke Unknown Source at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.jboss.mx.interceptor.ReflectedDispatcher.invoke ReflectedDispatcher.java:155 at org.jboss.mx.server.Invocation.dispatch Invocation.java:94 at org.jboss.mx.server.Invocation.invoke Invocation.java:86 at org.jboss.mx.server.AbstractMBeanInvoker.invoke AbstractMBeanInvoker.java:264 at org.jboss.mx.server.MBeanServerImpl.invoke MBeanServerImpl.java:659 at org.jboss.system.ServiceController$ServiceProxy.invoke ServiceController.java:978 at $Proxy0.start Unknown Source at org.jboss.system.ServiceController.start ServiceController.java:417 at sun.reflect.GeneratedMethodAccessor9.invoke Unknown Source at sun.reflect.DelegatingMethodAccessorImpl.invok 17:58:36,906 ERROR [STDERR] e DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.jboss.mx.interceptor.ReflectedDispatcher.invoke ReflectedDispatcher.java:155 at org.jboss.mx.server.Invocation.dispatch Invocation.java:94 at org.jboss.mx.server.Invocation.invoke Invocation.java:86 at org.jboss.mx.server.AbstractMBeanInvoker.invoke AbstractMBeanInvoker.java:264 at org.jboss.mx.server.MBeanServerImpl.invoke MBeanServerImpl.java:659 at org.jboss.mx.util.MBeanProxyExt.invoke MBeanProxyExt.java:210 at $Proxy44.start Unknown Source at org.jboss.web.AbstractWebContainer.start AbstractWebContainer.java:466 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.jboss.mx.interceptor.ReflectedDispatcher.invoke ReflectedDispatcher.java:155 at org.jboss.mx.server.Invocation.dispatch Invocation.java:94 at org.jboss.mx.interceptor.AbstractInterceptor.invoke AbstractInterceptor.java:133 at org.jboss.mx.server.Invocation.invoke Invocation.java:88 at org.jboss.mx.interceptor.ModelMBeanOperationInterceptor.invoke ModelMBeanOperationInterceptor.java:142 at org.jboss.mx.interceptor.DynamicInterceptor.invoke DynamicInterceptor.java:97 at org.jboss.system.InterceptorServiceMBeanSupport.invokeNext InterceptorServiceMBeanSupport.java:238 at org.jboss.wsf.container.jboss42.DeployerInterceptor.start DeployerInterceptor.java:87 at org.jboss.deployment.SubDeployerInterceptorSupport$XMBeanInterceptor.start SubDeployerInterceptorSupport.java:188 at org.jboss.deployment.SubDeployerInterceptor.invoke SubDeployerInterceptor.java:95 at org.jboss.mx.server.Invocation.invoke Invocation.java:88 at org.jboss.mx.server.AbstractMBeanInvoker.invoke AbstractMBeanInvoker.java:264 at org.jboss.mx.server.MBeanServerImpl.invoke MBeanServerImpl.java:659 at org.jboss.mx.util.MBeanProxyExt.invoke MBeanProxyExt.java:210 at $Proxy45.start Unknown Source at org.jboss.deployment.MainDeployer.start MainDeployer.java:1025 at org.jboss.deployment.MainDeployer.deploy MainDeployer.java:819 at org.jboss.deployment.MainDeployer.deploy MainDeployer.java:782 at sun.reflect.GeneratedMethodAccessor21.invoke Unknown Source at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.jboss.mx.interceptor.ReflectedDispatcher.invoke ReflectedDispatcher.java:155 at org.jboss.mx.server.Invocation.dispatch Invocation.java:94 at org.jboss.mx.interceptor.AbstractInterceptor.invoke AbstractInterceptor.java:133 at org.jboss.mx.server.Invocation.invoke Invocation.java:88 at org.jboss.mx.interceptor.ModelMBeanOperationInterceptor.invoke ModelMBeanOperationInterceptor.java:142 at org.jboss.mx.server.Invocation.invoke Invocation.java:88 at org.jboss.mx.server.AbstractMBeanInvoker.invoke AbstractMBeanInvoker.java:264 at org.jboss.mx.server.MBeanServerImpl.invoke MBeanServerImpl.java:659 at org.jboss.mx.util.MBeanProxyExt.invoke MBeanProxyExt.java:210 at $Proxy9.deploy Unknown Source at org.jboss.deployment.scanner.URLDeploymentScanner.deploy URLDeploymentScanner.java:421 at org.jboss.deployment.scanner.URLDeploymentScanner.scan URLDeploymentScanner.java:634 at org.jboss.deployment.scanner.AbstractDeploymentScanner$ScannerThread.doScan AbstractDeploymentScanner.java:263 at org.jboss.deployment.scanner.AbstractDeploymentScanner.startService AbstractDeploymentScanner.java:336 at org.jboss.system.ServiceMBeanSupport.jbossInternalStart ServiceMBeanSupport.java:289 at org.jboss.system.ServiceMBeanSupport.jbossInternalLifecycle ServiceMBeanSupport.java:245 at sun.reflect.GeneratedMethodAccessor3.invoke Unknown Source at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.jboss.mx.interceptor.ReflectedDispatcher.invoke ReflectedDispatcher.java:155 at org.jboss.mx.server.Invocation.dispatch Invocation.java:94 at org.jboss.mx.server.Invocation.invoke Invocation.java:86 at org.jboss.mx.server.AbstractMBeanInvoker.invoke AbstractMBeanInvoker.java:264 at org.jboss.mx.server.MBeanServerImpl.invoke MBeanServerImpl.java:659 at org.jboss.system.ServiceController$ServiceProxy.invoke ServiceController.java:978 at $Proxy0.start Unknown Source at org.jboss.system.ServiceController.start ServiceController.java:417 at sun.reflect.GeneratedMethodAccessor9.invoke Unknown Source at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.jboss.mx.interceptor.ReflectedDispatcher.invoke ReflectedDispatcher.java:155 at org.jboss.mx.server.Invocation.dispatch Invocation.java:94 at org.jboss.mx.server.Invocation.invoke Invocation.java:86 at org.jboss.mx.server.AbstractMBeanInvoker.invoke AbstractMBeanInvoker.java:264 at org.jboss.mx.server.MBeanServerImpl.invoke MBeanServerImpl.java:659 at org.jboss.mx.util.MBeanProxyExt.invoke MBeanProxyExt.java:210 at $Proxy4.start Unknown Source at org.jboss.deployment.SARDeployer.start SARDeployer.java:302 at org.jboss.deployment.MainDeployer.start MainDeployer.java:1025 at org.jboss.deployment.MainDeployer.deploy MainDeployer.java:819 at org.jboss.deployment.MainDeployer.deploy MainDeployer.java:782 at org.jboss.deployment.MainDeployer.deploy MainDeployer.java:766 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.jboss.mx.interceptor.ReflectedDispatcher.invoke ReflectedDispatcher.java:155 at org.jboss.mx.server.Invocation.dispatch Invocation.java:94 at org.jboss.mx.interceptor.AbstractInterceptor.invoke AbstractInterceptor.java:133 at org.jboss.mx.server.Invocation.invoke Invocation.java:88 at org.jboss.mx.interceptor.ModelMBeanOperationInterceptor.invoke ModelMBeanOperationInterceptor.java:142 at org.jboss.mx.server.Invocation.invoke Invocation.java:88 at org.jboss.mx.server.AbstractMBeanInvoker.invoke AbstractMBeanInvoker.java:264 at org.jboss.mx.server.MBeanServerImpl.invoke MBeanServerImpl.java:659 at org.jboss.mx.util.MBeanProxyExt.invoke MBeanProxyExt.java:210 at $Proxy5.deploy Unknown Source at org.jboss.system.server.ServerImpl.doStart ServerImpl.java:482 at org.jboss.system.server.ServerImpl.start ServerImpl.java:362 at org.jboss.Main.boot Main.java:200 at org.jboss.Main$1.run Main.java:508 at java.lang.Thread.run Thread.java:619 17:58:36,921 ERROR [STDERR] Sep 17, 2008 5:58:36 PM org.aspectj.weaver.tools.Jdk14Trace info INFO: Dumping to D:\Java\jboss-4.2.2.GA\bin\.\ajcore.20080917.175836.921.txt</description>
    <commit commitTime="2008-09-26 21:05:23" id="a115ac79aed74003572bd2981f19bc9c7103af3f"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/ReferenceType.java</file>
    </fixedFiles>
  </bug>
  <bug id="247742" reportTime="2008-09-17 17:40:00">
    <summary>Addressing incompatibilities between JDT and AspectJ element handles</summary>
    <description>The class JDTLikeHandle provider doesn't quite produce handles the same as JDT. To prevent a need to build a duplicate world in AJDT where the handles are correct it would be better to make the handles produced by AspectJ correct and immediately usable as IJavaElement handles in as many cases as possible</description>
    <commit commitTime="2008-09-19 01:01:06" id="f414fa0b101bdde8f5828b419dd6a853682b1b00"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/internal/JDTLikeHandleProvider.java</file>
    </fixedFiles>
  </bug>
  <bug id="248814" reportTime="2008-09-26 20:24:00">
    <summary>Modify ltw dump directory based on loader/weaver instance</summary>
    <description>Always dumping to _ajdump is not helpful in a multi-threaded environment - it should include some weaver or classloader instance related material in the dump location name to prevent clashing.</description>
    <commit commitTime="2008-09-27 17:25:59" id="a85c94e29a245a321a233083e3dfb6dacc847edf"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="249216" reportTime="2008-09-30 16:38:00">
    <summary>[plan] Further work on jdt handle interoperability</summary>
    <description>Under bug 247742 we looked at making the handles more compatible. This meant that the handles for AspectJ program element objects could easily be used as JDT handles. Although a good deal of progress was made, there are still a few issues that remain unresolved. Need to create binary handles and no longer fault in aspects from the aspectpath. Solution to this should also enable inpath navigation to spring to life. see comments 2 and 10 in the other bug for initial thoughts on binary handles .</description>
    <commit commitTime="2008-11-27 22:55:55" id="b62c591f7a8781119e030c884d3e7c94df77de62"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/internal/JDTLikeHandleProvider.java</file>
    </fixedFiles>
  </bug>
  <bug id="249551" reportTime="2008-10-02 18:27:00">
    <summary>[incremental] Can't run AJDT tests on windows machines because of lock on file not being removed</summary>
    <description>Tests on windows are failing because during a build, a lock is obtained on all jar files on the classpath. This lock is never removed. So, when the test tries to delete the files after completing, an error occurs. This error does not occur on Linux or Mac because file locks do not prevent deletion. I am running: AspectJCorePreferencesTest.testGetProjectOutJar The test creates a project. This project has test.jar on its inpath. This is the problem jar that can't be deleted. This jar is opened and then the lock is never released. Specifically in ClasspathManager line 101 there is a call to entry.find it's the first call to the method, so you can just set a breakpoint there . This attempts to load the class from the jar file. The jar file is opened and cached so it can be closed later. This happens at the very beginning of compilation when org.aspect.runtime.joinpoint is being searched for. After compilation, the method BcelWorld.tidyUp is called. Then down the stack the method then in ClassPathManager.ZipFileEntry.closeArchives is called on test.jar. It completes without throwing an error, but even after that I still cannot delete test.jar on the file system. Actually, it seems that this closeArchives method doesn't release the lock on any of the jars it uses. What I am doing is stepping through the program and at suspicious times, I open a windows explorer window, navigate to test.jar and try to delete it from windows. If there is no lock, then I can delete just fine and then I copy it back to contnue stepping through the program . If there is a lock, then I get an error message.</description>
    <commit commitTime="2008-10-03 02:06:11" id="f761cd7e9ab41e3809cd0fe11eea3beb77515461"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="249710" reportTime="2008-10-05 18:24:00">
    <summary>[compiling] Problem with -XterminateAfterCompilation</summary>
    <description>Reported on the mailing list by Simone: I tried disabling pipelining as described in bug 146781 , that is using -Xset:pipelineCompilation=false, but unfortunately I get this error while compiling with -XterminateAfterCompilation : java.lang.NullPointerException at org.aspectj.weaver.ReferenceType.isAspect ReferenceType.java:160 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$4.addAspectName AjBuildManager.java:1108 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$4.acceptResult AjBuildManager.java:1047 at</description>
    <commit commitTime="2008-10-29 19:08:05" id="cffe291340c69186f6a5c986adbecf02038ba590"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc163/Ajc163Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="250091" reportTime="2008-10-08 09:43:00">
    <summary>Reflection method signature can't cope with parametrized return types of inter-type method declaration</summary>
    <description>I noticed how thisJoinPoint.getSignature .toString sometimes included the name "ClassNotFoundException" incorrectly, for types that were obviously not ClassNotFoundException . I made a smaller test case and it seems that this occurs for a parametrized types from an inter-type declaration only. The attached test case prints: class A from sun.misc.Launcher$AppClassLoader@a9c85c extends class java.lang.Object false class java.lang.ClassNotFoundException from null extends class java.lang.Exception true class Base from sun.misc.Launcher$AppClassLoader@a9c85c extends class java.lang.Object false And it's the second line that is unexpected.</description>
    <commit commitTime="2008-10-29 00:36:36" id="85347bfd6fb121e086d3e0659cae668b5f3eaf51"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc163/Ajc163Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="250493" reportTime="2008-10-10 16:59:00">
    <summary>[generics] [itds] AspectJ does not add proper access flag to bridge methods</summary>
    <description>Build ID: M20080911-1700 Steps To Reproduce: 1. Create an ITD containing a method that returns a generic type 2. Add the advised interface to a class 3. Use javassist to check for the BRIDGE access flag on the created bridge method More information: I came across this when a library I am using used javassist to do bytecode manipulation of an ITD advised class. The methods in javassist that result in an error are below. Honestly, I'm a bit over my head here with where this access flag comes from, but it seems like while the java compiler adds it, the AspectJ compiler does not and that causes javassist to fail with a DuplicateMethodException. private static boolean isDuplicated MethodInfo newMethod, String newName, String newDesc, MethodInfo minfo, ListIterator it { if !minfo.getName .equals newName return false; String desc = minfo.getDescriptor ; if !Descriptor.eqParamTypes desc, newDesc return false; if desc.equals newDesc { if notBridgeMethod minfo return true; else { it.remove ; return false; } } else return notBridgeMethod minfo &amp;amp;&amp;amp; notBridgeMethod newMethod ; } /* For a bridge method, see Sec. 15.12.4.5 of JLS 3rd Ed. */ private static boolean notBridgeMethod MethodInfo minfo { return minfo.getAccessFlags &amp;amp; AccessFlag.BRIDGE == 0; }</description>
    <commit commitTime="2008-10-14 19:02:55" id="b454292b74a07a5b5316183209ddac2343ae3e8e"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/AllTests16.java</file>
    </fixedFiles>
  </bug>
  <bug id="250632" reportTime="2008-10-13 07:25:00">
    <summary>[plan] [generics] [itds] Wrong 'cannot convert" error</summary>
    <description>When compiling this with AspectJ 1.6.2 : ----------- public interface IMarker&amp;lt;CLOCK,STATE&amp;gt; { } public aspect MyAspect { public void IMarker&amp;lt;CLOCK,STATE&amp;gt;.map { CLOCK[] var = find ; }; public CLOCK[] IMarker&amp;lt;CLOCK,STATE&amp;gt;.find { return null; } } ----------- I get the error ..\src\foo\MyAspect.aj:10:0::0 Type mismatch: cannot convert from Object[] to CLOCK[] Michael Esser</description>
    <commit commitTime="2008-10-14 22:54:01" id="8b80dc4a8508c81a061de6eb63f143cfb3b64e61"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc163/Ajc163Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="250921" reportTime="2008-10-15 07:47:00">
    <summary>[plan] [ltw] Reweaving a class previously weaved with a now missing aspect should not cause exception</summary>
    <description>Suppose a class is weaved with an advice from an aspect, and then packaged in a jar file. The aspect is coming from an aspect library, for example a tracing library, which is evolved independently from the current project. Later, a new version of the library arrives, and the aspect is not there anymore, for example it has changed name, or another refactoring took place, but anyway the aspect class file is missing in the new library. I have LoadTimeWeaving in place, so I would expect that replacing the old jar with the new one is enough to have my classes weaved properly. Moreover, in a Maven or Ivy, or any other system managing transitive dependencies system, it could be that the class actually weaved is not even mine, I could have no source code for it, and using the new version of the aspect library can read: will happen automatically. Unfortunately however, LTW does not properly reweave the class removing references to the mow missing aspect. Instead it throws a ClassNotFoundException. This is not, in my opinion, the expected behavior. Moreover, it is highly misleading, beacause I have no direct dependency on the aspect library classes, it could not even be one of my dependencies at all if I'm using Maven or Ivy that will resolve a transitive dependency to the new version of the library. I would expect the LTW system to threat a missing Aspect class as one of the possible situations where reweaving is necessary.</description>
    <commit commitTime="2008-10-15 19:58:48" id="35412c5907b682a46ba507d09db49feecb840dcb"/>
    <fixedFiles>
      <file>ajde.core/testsrc/org/aspectj/ajde/core/tests/ReweavableTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="251277" reportTime="2008-10-17 16:05:00">
    <summary>[plan] [ide] AsmManager should be non-singleton</summary>
    <description>With the use of AspectJ in IDEs like eclipse where multiple AspectJ projects co-exist and build independently, it is awkward that AsmManager is a singleton as we have to keep switching to the 'right model' before interacting with it or triggering a build. Really there should be one structure model per project. We already manage a compiler instance and associated state on a per-project basis. The structure model should be anchored in this state.</description>
    <commit commitTime="2008-10-20 04:38:14" id="0b8250b807fe55b63d2a18f6cf4cd695e00681ea"/>
    <fixedFiles>
      <file>ajbrowser/src/org/aspectj/tools/ajbrowser/BrowserManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="251326" reportTime="2008-10-19 15:53:00">
    <summary>Anonymous inner classes declare inside an ITD method will cause IllegalAccessError</summary>
    <description>If i declare an aspect in pkgB, having an ITD method for a class in pkgA using an inner anonymous class, is created in the pkgA package, package protected, but then instantiated from pkgB causeing the error. Test case is attached.</description>
    <commit commitTime="2008-12-09 19:21:17" id="f1a83b5f2ba583e3c18542f962b569847a863844"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc163/Ajc163Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="251940" reportTime="2008-10-23 17:47:00">
    <summary>[plan] [compilation] Compiler error when using implements and pertarget</summary>
    <description>When I try to save and compile the following aspect, I get a compiler exception. public aspect F implements Comparable pertarget within F { } java.lang.NullPointerException at org.aspectj.weaver.ReferenceType.isAspect ReferenceType.java:165 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$4.acceptResult AjBuildManager.java:1032 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.acceptResult AjPipeliningCompilerAdapter.java:383 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:356 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:98 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:652 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:392 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:975 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:265 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:179 at org.aspectj.ajde.core.internal.AjdeCoreBuildManager.performBuild AjdeCoreBuildManager.java:104 at org.aspectj.ajde.core.AjCompiler.build AjCompiler.java:88 at org.eclipse.ajdt.core.builder.AJBuilder.build AJBuilder.java:227 at org.eclipse.core.internal.events.BuildManager$2.run BuildManager.java:633 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:37 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:170 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:201 at org.eclipse.core.internal.events.BuildManager$1.run BuildManager.java:253 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:37 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:256 at org.eclipse.core.internal.events.BuildManager.basicBuildLoop BuildManager.java:309 at org.eclipse.core.internal.events.BuildManager.build BuildManager.java:341 at org.eclipse.core.internal.events.AutoBuildJob.doBuild AutoBuildJob.java:140 at org.eclipse.core.internal.events.AutoBuildJob.run AutoBuildJob.java:238 at org.eclipse.core.internal.jobs.Worker.run Worker.java:55</description>
    <commit commitTime="2008-10-24 03:52:15" id="621e6e54fa172775cc1f4cb28ba5b072e52fd39a"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc163/Ajc163Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="252285" reportTime="2008-10-27 18:39:00">
    <summary>Generated methods for generic ITD field need BRIDGED access flag</summary>
    <description>I have an ITD SelectActionAspect containing a generic member: private T selected; Javassist is extending the class at runtime as in bug 250493 and I get a DuplicateMemberException on: ajc$interFieldGet$h2_actions_SelectActionAspec t$h2_actions_SelectAction$selected in mhc.blog.BlogAction_$$_javassist_46 It seems like AspectJ is generating a bridge method corresponding to the generic member, but it's not setting the access flag. If you need anything more from me to supply a resolution let me know.</description>
    <commit commitTime="2008-10-28 00:40:20" id="e2fac0e58679db78ef8ce62e9e2945b5e3a5a696"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc163/Ajc163Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="252702" reportTime="2008-10-29 19:36:00">
    <summary>[plan] [model] ensure contains the information required to support intertype declaration completion</summary>
    <description>In order for AJDT to offer completions it needs to know what the options are. Currently the communication mechanism for this information between compiler and IDE is the model although we may revisit this later . We need to ensure the model can tell it everything it needs. First thing missing: resolved type names for the parents involved in a decp statement</description>
    <commit commitTime="2008-10-30 15:45:13" id="33193b5616710b1ebd6b88dd7f78b4b8916f7dec"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</file>
    </fixedFiles>
  </bug>
  <bug id="252722" reportTime="2008-10-30 03:42:00">
    <summary>VerifyError if using aspect extending from spring's AbstractSecurityInterceptor</summary>
    <description>Created attachment 116502 [details] overriden AbstractSecurityInterceptor I am using AspectJ5 DEVELOPMENT version from 2008-10-29 and load time weaving. Although I am using spring I use no spring-agent.jar but aspectjweaver.jar directly. I am getting following exception when using annotation based aspect that extents spring's AbstractSecurityInterceptor. The java file is in the attachment. The workaround is to uncomment beforeInvocation2 and afterInvocation2 mryhods and to use them in the invoke method instead of direct call of super.beforeInvocation and super.afterInvocation methods. There is another weird behaviour. If I only use afterInvocation2 and leave beforeInvocation method as is, then I got no VerifyError, but: in the invoke method of the overriden class the parent's beforeInvocation mthod is called ith the correct ProceedingJoinPoint argument. in the beforeInvocation method of the parent class the passed argument happens to be the GoferMethodSecurityInterceptor itself instead of the ProceedingJoinPoint object. Caused by: java.lang.VerifyError: class: com/mwaysolutions/gofer2/security/GoferMethodSecurityInterceptor, method: ajc$superDispatch$com_mwaysolutions_gofer2_security_GoferMethodSecurityInterceptor$afterInvocation signature: Lorg/springframework/security/intercept/InterceptorStatusToken;Ljava/lang/Object; Ljava/lang/Object; Incompatible argument to function at java.lang.Class.getDeclaredMethods0 Native Method at java.lang.Class.privateGetDeclaredMethods Class.java:2427 at java.lang.Class.getDeclaredMethods Class.java:1791 at org.springframework.util.ReflectionUtils.doWithMethods ReflectionUtils.java:429 at org.springframework.util.ReflectionUtils.doWithMethods ReflectionUtils.java:412 at org.springframework.util.ReflectionUtils.getAllDeclaredMethods ReflectionUtils.java:453 at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryMethod AbstractAutowireCapableBeanFactory.java:583 at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType AbstractAutowireCapableBeanFactory.java:521 at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean AbstractBeanFactory.java:1174 at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType DefaultListableBeanFactory.java:222 at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors AbstractApplicationContext.java:506 at org.springframework.context.support.AbstractApplicationContext.refresh AbstractApplicationContext.java:363 at org.springframework.web.context.ContextLoader.createWebApplicationContext ContextLoader.java:255 at org.springframework.web.context.ContextLoader.initWebApplicationContext ContextLoader.java:199 at org.springframework.web.context.ContextLoaderListener.contextInitialized ContextLoaderListener.java:45 at org.mortbay.jetty.handler.ContextHandler.startContext ContextHandler.java:548 at org.mortbay.jetty.servlet.Context.startContext Context.java:136 at org.mortbay.jetty.handler.ContextHandler.doStart ContextHandler.java:517 at org.mortbay.component.AbstractLifeCycle.start AbstractLifeCycle.java:50 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod AbstractAutowireCapableBeanFactory.java:1413 at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods AbstractAutowireCapableBeanFactory.java:1374 at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean AbstractAutowireCapableBeanFactory.java:1334 ... 30 more</description>
    <commit commitTime="2008-12-15 21:28:29" id="c3817b36375049666d386da3ed4c75db0a54896c"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAccessForInlineMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="253067" reportTime="2008-11-01 13:06:00">
    <summary>[plan] [model] Missing relationship in model when advice applies to element declared by an ITD</summary>
    <description>It seems like the advice relationship is not showing up in the model when the advice applies to a method that is part of an ITD. It compiles correctly, but I don't see it showing up in the ASM. Here is a simple project that shows the problem. You'll notice that there are no gutter markers for the advice.</description>
    <commit commitTime="2008-12-02 18:03:22" id="daf33c9932e75af599d613619aacd88e3223be32"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="254207" reportTime="2008-11-05 19:11:00">
    <summary>NPE when generic type substitution invalid</summary>
    <description>Build ID: M20080911-1700 Steps To Reproduce: Create an abstract aspect with a bounded generic type. Use that generic type as the return type of an abstract method. Create a concrete aspect which extends the abstract aspect with a type not valid within the bounds defined by the abstract aspect's generic type. This should cause a compiler error. Instead, a null pointer exception is thrown see below . Code below was used to reproduce: public abstract aspect Abstract&amp;lt;T extends Integer&amp;gt; { public abstract T getT ; } // Number is not valid substitute for T public aspect Concrete extends Abstract&amp;lt;Number&amp;gt; { public Number getT { return 5; } } This appears to occur only within Eclipse/AJDT as I cannot reproduce it in our Ant builds. AJDT Version: 1.6.2.20081105005554 AspectJ Version: 1.6.3.20081028135200 Incremental Compiler Optimizations: On Non-standard compiler options: -Xset:pipelineCompilation=false The NPE exceptions tracktrace is: java.lang.NullPointerException at org.aspectj.weaver.CrosscuttingMembers.setPerClause CrosscuttingMembers.java:475 at org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers ResolvedType.java:560 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect CrosscuttingMembersSet.java:77 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceDescendantsOf CrosscuttingMembersSet.java:113 at org.aspectj.weaver.CrosscuttingMembe ... oBuildJob.run AutoBuildJob.java:238 at org.eclipse.core.internal.jobs.Worker.run Worker.java:55 Compile error: NullPointerException thrown: null</description>
    <commit commitTime="2008-11-10 16:27:02" id="e897b667b40b52d6ae801eef190fe9548208d6b5"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc163/Ajc163Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="255555" reportTime="2008-11-17 14:11:00">
    <summary>EclipseSourceType.addAnnotation Not implemented and throws compiler error</summary>
    <description>I am getting the following error when trying to compile a project attachment to follow : Compile error: RuntimeException thrown: EclipseSourceType.addAnnotation not implemented Indeed, when I look at the EclipseSourceType.addAnnotation method, I see: &amp;lt;snip&amp;gt; public void addAnnotation AnnotationAJ annotationX { // XXX Big hole here - annotationX holds a BCEL annotation but // we need an Eclipse one here, we haven't written the conversion utils // yet. Not sure if this method will be called in practice... throw new RuntimeException "EclipseSourceType.addAnnotation not implemented" ; } &amp;lt;/snip&amp;gt; FWIW, here is the stack trace: java.lang.RuntimeException: EclipseSourceType.addAnnotation not implemented at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.addAnnotation EclipseSourceType.java:469 at org.aspectj.weaver.ReferenceType.addAnnotation ReferenceType.java:136 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareAnnotations AjLookupEnvironment.java:1042 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:701 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:613 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doPendingWeaves AjLookupEnvironment.java:438 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:211 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile Compiler.java:616 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:357 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:371 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:975 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:301 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:183 at org.aspectj.ajde.core.internal.AjdeCoreBuildManager.performBuild AjdeCoreBuildManager.java:126 at org.aspectj.ajde.core.AjCompiler.build AjCompiler.java:88 at org.eclipse.ajdt.core.builder.AJBuilder.build AJBuilder.java:228 at org.eclipse.core.internal.events.BuildManager$2.run BuildManager.java:633 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:37 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:170 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:201 at org.eclipse.core.internal.events.BuildManager$1.run BuildManager.java:253 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:37 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:256 at org.eclipse.core.internal.events.BuildManager.basicBuildLoop BuildManager.java:309 at org.eclipse.core.internal.events.BuildManager.build BuildManager.java:341 at org.eclipse.core.internal.events.AutoBuildJob.doBuild AutoBuildJob.java:140 at org.eclipse.core.internal.events.AutoBuildJob.run AutoBuildJob.java:238 at org.eclipse.core.internal.jobs.Worker.run Worker.java:55</description>
    <commit commitTime="2008-11-29 20:46:39" id="89d94f1b41b74d2f4f42c4edc6009845848d950b"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/DeclarePrecedence.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/PatternParser.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/DeclareAnnotation.java</file>
    </fixedFiles>
  </bug>
  <bug id="255643" reportTime="2008-11-18 09:10:00">
    <summary>[ltw] set join-point not woven with LTW</summary>
    <description>The attached aspect weaves just fine with static weaving, but fails to get woven with LTW, despite the fact that the advised class gets loaded and executed. This will be a bit difficult to reproduce because of the complex runtime environment. To reproduce with exactly this aspect you need to have Tomcat 6 + Myfaces 1.2.4 + the JSF CarDemo running. The class gets loaded once the main page of the CarDemo is executed. Static weaving can be tried agains myfaces-api-1.2.4.jar and should report weaving on one join point only.</description>
    <commit commitTime="2008-12-15 17:44:07" id="1d771cda423bb19f1d0b57137a9507af178e440b"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="255856" reportTime="2008-11-19 14:22:00">
    <summary>@Aspect allows + with @target , whereas code style doesn't</summary>
    <description>A few bugs, but I suspect there is only one underlying bug with various symptoms, so adding only one bug. In the code below: 1. @target example.TargetExecutionCombinationBug.TestAnnotation + note the '+' is allowed in @AspectJ syntax, but not in the code style syntax. Adding '+' also matches the corresponding execution join point. 2. Swapping the components of @target example.TargetExecutionCombinationBug.TestAnnotation + &amp;amp;&amp;amp; execution * * .. to execution * * .. &amp;amp;&amp;amp; @target example.TargetExecutionCombinationBug.TestAnnotation + changes the selected join points. 2. AJDT shows that it matches even other join points -- set for the count, for example. This is with @target example.TargetExecutionCombinationBug.TestAnnotation + &amp;amp;&amp;amp; execution * * .. pointcut. == package example; import java.lang.annotation.ElementType; import java.lang.annotation.Inherited; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; import junit.framework.TestCase; import org.aspectj.lang.Aspects; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.Before; public class TargetExecutionCombinationBug extends TestCase { public void testAdviceMatch { TestImpl impl = new TestImpl ; impl.method ; assertEquals 0, Aspects.aspectOf TestAtAspect.class .count ; assertEquals 0, TestAspect.aspectOf .count ; } @Retention RetentionPolicy.RUNTIME @Target ElementType.TYPE @Inherited static @interface TestAnnotation { } @TestAnnotation static interface TestInterface { void method ; } static class TestImpl implements TestInterface { @Override public void method { } } static aspect TestAspect { int count = 0; before : @target example.TargetExecutionCombinationBug.TestAnnotation &amp;amp;&amp;amp; execution * * .. { count++; } } @Aspect static class TestAtAspect { int count = 0; @Before "@target example.TargetExecutionCombinationBug.TestAnnotation &amp;amp;&amp;amp; execution * * .. " public void increment { count++; } } }</description>
    <commit commitTime="2008-12-08 20:42:54" id="945c4cfec954d918142f5c799fbb45d343eeca63"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc163/Ajc163Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="256400" reportTime="2008-11-25 04:51:00">
    <summary>An internal error occurred during: "Delete and update AspectJ markers for CoreSource".</summary>
    <description>this occured during a clean and build of the project i'm working on. The following was inthe details. An internal error occurred during: "Delete and update AspectJ markers for CoreSource". java.lang.NullPointerException</description>
    <commit commitTime="2008-11-27 17:59:09" id="155a888d39e73a70fd4fe47de2c37ed593bb5459"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/internal/JDTLikeHandleProvider.java</file>
    </fixedFiles>
  </bug>
  <bug id="256514" reportTime="2008-11-25 17:29:00">
    <summary>[ajdoc] package.html and package-info.java not handled by ajdoc</summary>
    <description>Created attachment 118714 [details] Test case for package.html and package-info.java bug. I've attached two different packages that produce the behavior. "ajdoc test/A.java test/package-info.java -d doc" produces an error regarding syntax because the StubFileGenerator tried to generate a class structure for the package-info.java file. Since this is a special file the solution to this would be to have the generator just copy package-info.java directly to the StubFile directory instead of trying to generate it. "ajdoc other/F.java -d doc" produces html file but does not produce the same content that you would get when you run "javadoc other/F.java -d doc". This behavior is caused because the package.html file is not copied over to the StubFile directories which is what is passed to javadoc during the package-summary.html file generation. Becuase package.html is not a argument but rather something that javadoc looks for the solution to this would be to look for this file and copy it into the StubFile directory if it exist.</description>
    <commit commitTime="2008-11-27 22:56:23" id="ae5ed056a7c9424f10bf03187cfc1fb6c80db62a"/>
    <fixedFiles>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/Main.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java</file>
    </fixedFiles>
  </bug>
  <bug id="256669" reportTime="2008-11-26 11:40:00">
    <summary>[itds] [annotations] ITD introduced method parameter annotations are lost</summary>
    <description>Created attachment 118816 [details] Files to reproduce the described issue Build ID: M20080911-1700 Steps To Reproduce: 1. Create an empty class: public class Destination {} 2. Create an annotation: @Retention RetentionPolicy.SOURCE @Target ElementType.PARAMETER public @interface SomeAnnotation { String value default ""; } 3. Create an introduction: privileged aspect Introduction { public String Destination.helloWorld @SomeAnnotation "xyz" String who { return "Hello " + who; } } 4. Attempt to reflect the method parameter annotation details: public class SimpleTest { @Test public void test throws Exception { Class&amp;lt;Destination&amp;gt; clazz = Destination.class; Method m = clazz.getMethod "helloWorld", String.class ; Annotation[] ann = m.getAnnotations ; System.out.println m + " has " + ann.length + " annotations" ; for int i = 0; i &amp;lt; ann.length; i++ { System.out.println "Method annotation: " + ann[i].getClass + ann[i].toString ; } for int i = 0; i &amp;lt; m.getParameterAnnotations .length; i++ { int count = m.getParameterAnnotations [i].length; System.out.println "Parameter " + i + " has " + count + " parameter annotations" ; } } } Reflecting Destination.helloWorld does NOT show any parameter annotations on parameter index 0. More information:</description>
    <commit commitTime="2008-11-27 21:30:47" id="48ba3fea26bf31e702199528bd461eaff4cc535c"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc163/Ajc163Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="256779" reportTime="2008-11-27 09:23:00">
    <summary>StackOverflowError when @DeclarePrecedence references the aspect in which it's declared</summary>
    <description>When @DeclarePrecedence annotation refers the aspect in which it's declared e.g. @Aspect @DeclarePrecedence "com.ThisAspect, com.OtherAspect" public class ThisAspect { //... } the load time weaver fails with: java.lang.StackOverflowError at java.net.URL.&amp;lt;init&amp;gt; URL.java:514 at java.net.URL.&amp;lt;init&amp;gt; URL.java:464 at sun.misc.URLClassPath$FileLoader.getResource URLClassPath.java:971 at sun.misc.URLClassPath$FileLoader.findResource URLClassPath.java:961 at sun.misc.URLClassPath.findResource URLClassPath.java:145 at java.net.URLClassLoader$2.run URLClassLoader.java:362 at java.security.AccessController.doPrivileged Native Method at java.net.URLClassLoader.findResource URLClassLoader.java:359 at java.lang.ClassLoader.getResource ClassLoader.java:977 at org.aspectj.apache.bcel.util.ClassLoaderRepository.toURL ClassLoaderRepository.java:253 at org.aspectj.apache.bcel.util.ClassLoaderRepository.loadClass ClassLoaderRepository.java:266 at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass BcelWorld.java:224 at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate BcelWorld.java:205 at org.aspectj.weaver.ltw.LTWWorld.resolveDelegate LTWWorld.java:107 at org.aspectj.weaver.World.resolveToReferenceType World.java:363 at org.aspectj.weaver.World.resolve World.java:258 at org.aspectj.weaver.patterns.SimpleScope.lookupType SimpleScope.java:63 at org.aspectj.weaver.bcel.AtAjAttributes$BindingScope.lookupType AtAjAttributes.java:1666 at org.aspectj.weaver.patterns.WildTypePattern.lookupTypeInScope WildTypePattern.java:717 at org.aspectj.weaver.patterns.WildTypePattern.resolveBindingsFromFullyQualifiedTypeName WildTypePattern.java:704 at ... This may be explained by the recursion that happens here, however the problem does not exist when the precedence and the aspect are declared using AspectJ language and not annotations .</description>
    <commit commitTime="2009-01-29 23:56:34" id="85eed1b16732e2448a4d5089ce46e8fe0530e4b0"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
    </fixedFiles>
  </bug>
  <bug id="256937" reportTime="2008-11-28 14:40:00">
    <summary>[itd] getCorrespondingType true not returning fully qualified type</summary>
    <description>IProgramElement.getCorrespondingType true is not returning the fully qualified type only the simple type . Here is a snippet of code where I see this: public privileged aspect ShipAccessor { public java.util.List&amp;lt;String&amp;gt; Ship.h { return null; } } public class Ship { public void moveTo int newX, int newY { this.h ; } } What this means is that in order for ITD aware to work correctly, I need to include java.util.List in the imports of Ship which is kind of silly .</description>
    <commit commitTime="2008-11-28 20:44:34" id="7cc89195decaf1f2b862f24872ee387973e76cac"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java</file>
    </fixedFiles>
  </bug>
  <bug id="257277" reportTime="2008-12-02 17:38:00">
    <summary>[ajdoc] Incorrect generated Source Signature for FieldDeclarations</summary>
    <description>Build ID: I20080617-2000 This bug is similar to bug 148908 but since there are other cases this gives incorrect output I felt it deserved to be a new bug. The error is with an allocation expression that is passed as a parameter to a method. public List&amp;lt;String&amp;gt; cList = Collections.unmodifiableList new ArrayList&amp;lt;String&amp;gt; {{add "Busted" ; }} ; ajdoc Produces the signature: public List&amp;lt;String&amp;gt; cList = Collections.unmodifiableList new ArrayList&amp;lt;String&amp;gt; {{add "Busted" ; x { super ; } }} ; when javadoc is run on the stub file that has this source the error: invalid method declaration; return type required x { is produced. The way its currently setup is that QualifiedAllocationExpressions that start with the word "new" will just not initialize the variable. Since the values are not constant it doesn't affect the overall documentation of the code. The problem with this is that if the Allocation Expression is a parameter of a method call it will print the Expression causing a "x {super ;}" code to show up. My suggestion is to have only expressions which would could have constant values be printed while everything else is left uninitialized. Examples of such cases are as follow: static final String aString = "Constant String"; // StringLiteral static final String bString = aString; //SingleNameReference static final String cString = aString + bString; // BinaryExpression static final String dString = aString + " and " + bString;//CombinedBinaryExpression static final String eString = "Hello" + " World"; //ExtendedStringLiteral All of these expressions give constant values. From what i can tell expressions that can have a constant value are instances of Literal, OperatorExperssion, or Reference.</description>
    <commit commitTime="2009-02-04 20:30:36" id="55dacf6126a9ffa4b67b40da90d1200525bce779"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="257833" reportTime="2008-12-07 13:46:00">
    <summary>NPE with @args</summary>
    <description>Created attachment 119721 [details] simple eclipse project to reproduce the NPE Build ID: M20080911-1700 Steps To Reproduce: 1. define a annotation NotNull 2. define a pointcut using "@args NotNull ", e.g. pointcut ctorWithNotNullArg : execution *..*.new * &amp;amp;&amp;amp; @args NotNull ; 3. define an empty advice, e.g. before : ctorWithNotNullArg { } 4. call a constructor with a null argument and you'll get a NullPointerException More information: see http://dev.eclipse.org/mhonarc/lists/aspectj-dev/msg02470.html</description>
    <commit commitTime="2008-12-08 19:35:40" id="2e2be8e6396445755df423a96fc2decdae7b8b40"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc163/Ajc163Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="258206" reportTime="2008-12-09 18:54:00">
    <summary>[handles] further further work on jdt handle interoperability</summary>
    <description>Noticed that AspectJ handles do not have a package declaration, but JDT handles do. I've been silently ignoring these for a while. eg- package foo.bar; import foo.Something; class Frazzle { ... } the handle for package foo.bar; should be =Project/src&amp;lt;foo.bar{Frazzle.aj%foo.bar This is generally not a big deal, because we don't do any refactoring with the package declaration. But, if it is easy to put in, would be nice.</description>
    <commit commitTime="2009-01-06 22:02:32" id="77f22ee2d3252f0e63bdae165519581ac5afddc2"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/internal/HandleProviderDelimiter.java</file>
    </fixedFiles>
  </bug>
  <bug id="258325" reportTime="2008-12-10 12:46:00">
    <summary>[build] compiler invokers need to know list of class files being written out</summary>
    <description>This is the AspectJ side of bug 253528 . The artifacts created by an AspectJ compile, should all be marked as derived. This includes all class files, all folders except the root folder , and all resources copied over. Note that if the target directory is the same as the source directory, then the folders themselves should *not* be marked as derived not created by compiler . Similarly, the resources should *not* be marked as derived since they were not created by the compiler. Since the AspectJ compiler itself knows nothing about the concept of "derived" it is an eclipse concept . The compiler cannot do the marking. There are 2 possibilities to do this: 1. after compilation is finished, send a big list of files back to AJDT, which will then go through and mark all as derived. 2. or do a call back to AJDT whenever a file is created. I would be fine with either.</description>
    <commit commitTime="2008-12-10 21:37:09" id="21f257f764afb74bdf2a1113b082a589c30e5ec9"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/CompilationResultDestinationManager.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="258510" reportTime="2008-12-11 13:26:00">
    <summary>[plan] Remove evil mutator methods from the type abstraction</summary>
    <description>The type abstraction that exists in org.aspectj.matcher includes mutators for: - adding annotations - changing superclass - adding superinterfaces These exist because we sometimes need to temporarily add them whilst matching at compilation time eg. a declare @type that would subsequently cause a declare parents to match . Before weaving the types involved are 'reset' to remove anything done at compile time. But it means anyone providing an implementation for their type system eg. writing a JDTWorld sees these wierd methods and doesnt know what to do about them. They should be removed, they should be pushed up into the matchers own infrastructure and the implementation of the type abstraction interfaces ReferenceType, ResolvedMember should be immutable objects.</description>
    <commit commitTime="2009-01-20 22:41:25" id="4a5a73b08d8f6fbb6471b68cc74bf2d6e7b55f49"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="258653" reportTime="2008-12-12 08:15:00">
    <summary>crash weaving staticinitialization</summary>
    <description>Created attachment 120313 [details] simply using staticinitialization Build ID: M20080911-1700 Steps To Reproduce: see attachment More information: AJDT Version: 1.6.2.20081210195409 AspectJ version: 1.6.3.20081210163000 the same when not using annotations</description>
    <commit commitTime="2008-12-12 17:13:01" id="b932237acfbcf6faa9faa1a72d1983630d6d5b7e"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc163/Ajc163Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="259279" reportTime="2008-12-18 12:07:00">
    <summary>Repetitive method when certain compilation order</summary>
    <description>Raised on the list. The error occurring depends on the compilation order ie. order in which they pass through the pipeline . Compiling in AJDT triggers it, but compiling on the command line with *.java will not. This order fails on command line: ajc -1.5 SomeServiceImpl.java SomeInterface.java Main.java GenericService.java GenericServiceImpl.java Aspect.java --- Hello. I have an issue that comes from a combination of things and leads to java.lang.ClassFormatError at runtime. Here is the most minimalistic package to reproduce this problem: public aspect Aspect pertypewithin * {} public interface GenericService&amp;lt;T extends SomeInterface&amp;gt; { public void doStuff T t ; } public class GenericServiceImpl&amp;lt;T extends SomeInterface&amp;gt; implements GenericService&amp;lt;T&amp;gt; { public void doStuff T t {} } public interface SomeInterface {} public class SomeServiceImpl extends GenericServiceImpl&amp;lt;SomeInterface&amp;gt; { @Override public void doStuff SomeInterface someInterface { } } public class Main { public static void main String[] args { new SomeServiceImpl ; } } And here is what I get right after I have done clean and ran my little test. Exception in thread "main" java.lang.ClassFormatError: Repetitive method name/signature in class file SomeServiceImpl at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:620 at java.security.SecureClassLoader.defineClass SecureClassLoader.java:124 at java.net.URLClassLoader.defineClass URLClassLoader.java:260 at java.net.URLClassLoader.access$100 URLClassLoader.java:56 at java.net.URLClassLoader$1.run URLClassLoader.java:195 at java.security.AccessController.doPrivileged Native Method at java.net.URLClassLoader.findClass URLClassLoader.java:188 at java.lang.ClassLoader.loadClass ClassLoader.java:306 at sun.misc.Launcher$AppClassLoader.loadClass Launcher.java:268 at java.lang.ClassLoader.loadClass ClassLoader.java:251 at java.lang.ClassLoader.loadClassInternal ClassLoader.java:319 at Main.main Main.java:3 Any of the following will remove this issue: 1 Removing pertypewithin * from the aspect 2 Renaming SomeServiceImpl to ASomeServiceImpl, or anything so is before GenericServiceImpl alphabetically. 3 Compiling SomeServiceImpl again after cleaning whitespace modification and save . 4 Commenting the doStuff method out from SomeServiceImpl class. 5 Changing method signature in SomeServiceImpl to take T T extends SomeInterface as the argument. The difference between working and not working .class files I get is that there is an additional method descriptor in the one that does not work: // Method descriptor #15 LSomeInterface; V // Stack: 2, Locals: 2 public bridge void doStuff SomeInterface arg0 ; 0 aload_0 1 aload_1 2 invokevirtual SomeServiceImpl.doStuff SomeInterface : void [36] 5 return Line numbers: [pc: 0, line: 1] And here are my versions: Eclipse Platform Version: 3.4.1 Build id: M20080911-1700 Eclipse AspectJ Development Tools Version: 1.6.1.20081104192500 AspectJ version: 1.6.3.20081028135200 java version "1.5.0_16" Java TM 2 Runtime Environment, Standard Edition build 1.5.0_16-b02 Java HotSpot TM Server VM build 1.5.0_16-b02, mixed mode Has anyone experienced and maybe resolved this issue? I tried to browse the bug reports but couldn't find anything that seemed like a match. Thanks in advance, Jouni Lantinen</description>
    <commit commitTime="2008-12-18 17:56:43" id="e62cc6cf8dd6b455afd8bd0792de2199addb63b8"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc163/Ajc163Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="259649" reportTime="2008-12-24 17:10:00">
    <summary>[incremental] better incremental analysis</summary>
    <description>Related to bug 259586 - that was concerning only itds but there are other constructs for which incremental analysis needs implementing/fixing. The broken constructs appear to be: - declare parents - declare annotation @type, @field, @method, @constructor</description>
    <commit commitTime="2009-01-05 21:42:49" id="d8011d6238c919468419918a902ceb33b8f7cb95"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/IProgramElement.java</file>
      <file>asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java</file>
    </fixedFiles>
  </bug>
  <bug id="260384" reportTime="2009-01-08 07:51:00">
    <summary>Exception occurred when compiling spring-framework-2.5.6</summary>
    <description>java.lang.NullPointerException at org.aspectj.weaver.Shadow.getGenericArgTypes Shadow.java:175 at org.aspectj.weaver.patterns.ArgsPointcut.getArgumentsToMatchAgainst ArgsPointcut.java:88 at org.aspectj.weaver.patterns.ArgsPointcut.matchInternal ArgsPointcut.java:76 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:52 at org.aspectj.weaver.patterns.Po ... actGenericLabeledEnum.getLabel end public String getLabel</description>
    <commit commitTime="2009-01-09 20:06:53" id="86af20534d08197ca88e18f1563b27e366d5e6bc"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java</file>
    </fixedFiles>
  </bug>
  <bug id="260751" reportTime="2009-01-12 12:43:00">
    <summary>java.lang.StringIndexOutOfBoundsException</summary>
    <description>ava.lang.StringIndexOutOfBoundsException at java.lang.String.substring String.java:1938 at org.aspectj.ajdt.ajc.ConfigParser.stripWhitespaceAndComments ConfigParser.java:103 at org.aspectj.ajdt.ajc.ConfigParser.parseConfigFileHelper ConfigParser.java:69 at org.aspectj.ajdt.ajc.ConfigParser.parseImportedConfigFile ConfigParser.java:224 at org.aspectj.ajdt.ajc.ConfigParser.parseOneArg ConfigParser.java:213 at org.aspectj.ajdt.ajc.ConfigP ... 82 at org.eclipse.core.internal.jobs.Worker.run Worker.java:55</description>
    <commit commitTime="2009-01-12 21:35:16" id="d9bd46d462bc3742bfcc72d7baf493c49d96cb4b"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/ConfigParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="261380" reportTime="2009-01-16 13:26:00">
    <summary>[model] Advice on Recursive constructor call leads to incorrectly placed relationship</summary>
    <description>Just noticed an odd problem with the model. When there is a recursive constructor call in a constructor and this constructor call is advised, the model relationship is on the constructor *execution*, not the *call*.</description>
    <commit commitTime="2009-01-21 00:12:54" id="405805d07619bc3538552ea49f9aca9da2e58875"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/model/AsmRelationshipProvider.java</file>
    </fixedFiles>
  </bug>
  <bug id="261808" reportTime="2009-01-21 07:43:00">
    <summary>iajc-Ant-Task fails "type already defined"</summary>
    <description>Created attachment 123223 [details] Eclipse-project-export that demonstrates the error As attachment you find a simple Eclipse-Project, which reproduces the error. The project-structure consists of two packages "anttest" and "anttest.test". The second package should not be included in the build, so I was trying to exclude it using a dirset. This does not work, because with this configuration iajc always fails with an "already defined"-error for every type class or aspect . As comment I included a simple workaround for this problem in the iajc-task. This workaround does its job, but I want to reuse the source-path-definition, which is not possible this way.</description>
    <commit commitTime="2009-01-31 04:33:22" id="1da1f7cdaca36e258045ef29660abaa13c84ebed"/>
    <fixedFiles>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="262154" reportTime="2009-01-23 07:37:00">
    <summary>MissingImplementationException at EclipseSourceType.java:705</summary>
    <description>On experimenting with aspectj I was suddenly asked politely by ajdt to log a bug here: steps: Take code snippet rename classes, autogenerate code, i.e make it compile : @Aspect @SuppressWarnings "unchecked" public class DeliveryCallbackInterceptor { @Pointcut "execution boolean org.springframework.integration.message.MessageHandler+.handleMessage Message &amp;amp;&amp;amp; args message " public void handleMethod Message message {} @AfterThrowing pointcut="handleMethod message ", throwing="e" public void invokeDeliveryCallback Message message, Throwable e { DeliveryFailureCallback message.getHeaders .get "errorcallback" .onDeliveryFailed message, e ; } } 1. place the cursor after 'pointcut="handleMethod message' 2. type ', e' 3. save RESULT: org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType$MissingImplementationException at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.generateElementValue EclipseSourceType.java:705 at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.generateAnnotation EclipseSourceType.java:682 at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.convertEclipseAnnotation EclipseSourceType.java:636 at org.aspectj.a ... urceType$MissingImplementationException thrown: Please raise an AspectJ bug. AspectJ does not know how to convert this annotation value ["unchecked"] I can reproduce this consistently by closing the error dialog and repeating the steps saving after each change .</description>
    <commit commitTime="2009-01-23 17:49:30" id="2962982a4536e6ae5bec907f72c696137d68c728"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="262218" reportTime="2009-01-23 13:41:00">
    <summary>Compiler error thrown during incremental compilation</summary>
    <description>This error is being thrown during incremental compilation of MyAspect.aj ----------------- java.lang.NullPointerException at org.aspectj.weaver.NewConstructorTypeMunger.equals NewConstructorTypeMunger.java:46 at org.aspectj.weaver.ConcreteTypeMunger.equivalentTo ConcreteTypeMunger.java:38 at org.aspectj.weaver.CrosscuttingMembers.replaceWith CrosscuttingMembers.java:366 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect CrosscuttingMembersSet.java:77 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment ... AutoBuildJob.run AutoBuildJob.java:238 at org.eclipse.core.internal.jobs.Worker.run Worker.java:55 Compile error: NullPointerException thrown: null ----------------- Steps to reproduce: 1. import attached project 2. full build it works 3. open test.MyAspect 4. make whitespace change to fike 5. save 6. error is reliably thrown</description>
    <commit commitTime="2009-01-23 20:38:58" id="ab75342042aa9a5e0ed0c512bf50d68f9bfb2d19"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="262288" reportTime="2009-01-24 12:12:00">
    <summary>[incremental] Autobuild fails with NullPointerException at org.aspectj.ajde.core.internal.AjdeCoreBuildManager.performBuild</summary>
    <description>Autobuild fails with null pointer exception java.lang.NullPointerException at org.aspectj.ajde.core.internal.AjdeCoreBuildManager.performBuild AjdeCoreBuildManager.java:121 at org.aspectj.ajde.core.AjCompiler.build AjCompiler.java:88 at org.eclipse.ajdt.core.builder.AJBuilder.build AJBuilder.java:230 at org.eclipse.core.internal.events.BuildManager$2.run BuildManager.java:633 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:37 at org.eclipse.core.internal.events.BuildMa ... AutoBuildJob.run AutoBuildJob.java:238 at org.eclipse.core.internal.jobs.Worker.run Worker.java:55 Compile error: NullPointerException thrown: null A clean build resolves the issue but after a while I get the error back. I'm using Eclipse SDK - Version: 3.4.1 - Build id: M20080911-1700 and AspectJ 1.6.3.20081216194500 AspectJ Development Tools 1.6.2.20090105113441</description>
    <commit commitTime="2009-01-29 21:03:29" id="0614ca9b7b46864f3319b3d71984319c173d0dfe"/>
    <fixedFiles>
      <file>ajde.core/src/org/aspectj/ajde/core/internal/AjdeCoreBuildManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="263666" reportTime="2009-02-04 12:05:00">
    <summary>[handles] [plan] Odd behavior in cross references view</summary>
    <description>From the Mailing list: --------------------- The following aspect is giving me interesting behaviour: 0 package x; 1 public aspect OverrideOptions 2 { 3 /** 4 * Comment A 5 */ 6 boolean around : execution public boolean A.a &amp;amp;&amp;amp; this A 7 { 8 return false; 9 } 10 11 /** 12 * Comment B 13 */ 14 int around : execution private int B.b .. &amp;amp;&amp;amp; this B { 15 return 0; 16 } 17 } While the compiler is doing the right thing, the cross references view gives some interesting behaviour. When I open the aspect, the cursor is at the beginning of line 0, and the CR view shows: x As I move the cursor down always at left edge , lines 1-3 give: - OverrideOptions - around - advises - B.b boolean - A.a Lines 4-6 give: - around - advises - B.b boolean - A.a Lines 7-16 give: ... Around And line 17 gives: - OverrideOptions - around - advises - B.b boolean - A.a Factoring out the first pointcut as a separate pointcut declaration gives even more interesting behaviour. The first advice now successfully claims to advise both target classes, when before it was none. Version: 1.6.4.20090130154246 AspectJ version: 1.6.4.20090129145400 ---------------------- At this point I don't know how much this has to do with the model and how much this has to do with the x-ref view itself. Looks like the markers on the side are showing some odd behavior as well. My guess is that this has something to do with handle identifiers.</description>
    <commit commitTime="2009-02-04 21:19:30" id="518cb3776d4ba529dbbbd1233bd6dc1e385c2469"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc164/Ajc164Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="263837" reportTime="2009-02-05 13:25:00">
    <summary>Error during Delete AJ Markers</summary>
    <description>Error sent through the AJDT mailing list. I believe this is an LTW weaving error, so not raising it against AJDT.</description>
    <commit commitTime="2009-02-06 00:15:57" id="1b54b4b7555176c8548dbbffded063191ad0b46a"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="264563" reportTime="2009-02-11 13:19:00">
    <summary>[handles] Remove trailing '/' from source path handles</summary>
    <description>In bug 262953 , we noticed that when the .classpath has an entry like: &amp;lt;classpathentry kind="src" path="src/"/&amp;gt; Instead of something like: &amp;lt;classpathentry kind="src" path="src"/&amp;gt; AspectJ handles will include the extra '/', but JDT handles will not. On the AJDT side, I fixed things in Bug 262953 so that this kind of classpath entry will not be created by AJDT. However, for consistency, it is probably a good idea for AspectJ to handle these kinds of paths the same as JDT. For example, the AspectJ handle for the source folder in Spacewar when the .classpath entry contains and extra '/' looks like: =Spacewar Example/src\/ but the JDT handle looks like: =Spacewar Example/src</description>
    <commit commitTime="2009-02-12 17:50:17" id="0af658e1b117aee704b5e6e836ce7e84199ae548"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/internal/JDTLikeHandleProvider.java</file>
    </fixedFiles>
  </bug>
  <bug id="264869" reportTime="2009-02-13 11:54:00">
    <summary>AspectJ depends on Class files having a dot in their source file name attribute</summary>
    <description>The following code in ShadowMunger$getBinaryFile line 169 ff fails if a class file does not contain a proper source file name: if binaryFile == null { String s = getDeclaringType .getBinaryPath ; File f = getDeclaringType .getSourceLocation .getSourceFile ; int i = f.getPath .lastIndexOf '.' ; String path = f.getPath .substring 0, i + ".class"; binaryFile = new File s + "!" + path ; } there is no '.' in the file name, thus this gives a string index out of bounds error .</description>
    <commit commitTime="2009-02-17 16:20:49" id="9f80317172e217cf2cbee6d212ccfc2d94c0ecfb"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ShadowMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="265072" reportTime="2009-02-16 20:50:00">
    <summary>[ataspectj] annotation style percflow aspect clashes with other cflow pointcuts</summary>
    <description>If an annotation style aspect uses percflow and also the pointcuts within the aspect use cflow there is a clash and two ajc$preClinit methods are created. This is because the annotation style percflow isn't clever enough to check if someone has already created one. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=233032#c9 Raising this bug to mark the fix as having been put into 1.6.4 whilst 233032 continues as a placeholder for any problems with bridge methods in annotation style.</description>
    <commit commitTime="2009-02-17 02:03:42" id="e2ffbb54af0974cb0c72b893a88aa2a75f45bebb"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc164/Ajc164Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="265356" reportTime="2009-02-18 14:15:00">
    <summary>[ataspectj] underline squigglies in wrong place, probably created with wrong position</summary>
    <description>In this code: package example; import org.aspectj.lang.annotation.*; import java.util.Date; @Aspect public class Main { @Pointcut "execution Date foo " public void pc {} @Before "pc " public void log {} @Before "execution List goo " public void log2 {} } the Lis is underlined rather than List.</description>
    <commit commitTime="2009-04-08 17:28:05" id="e1d807495d9078382ddedbd698b8b09cb09d0ec2"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java</file>
    </fixedFiles>
  </bug>
  <bug id="265360" reportTime="2009-02-18 15:06:00">
    <summary>[ataspectj] Incorrectly matching types against imports for annotation style aspects built with ajc</summary>
    <description>Discovered by Ramnivas, compiling this should fail: package example; import org.aspectj.lang.annotation.*; import java.util.Date; @Aspect public class Main { @Pointcut "execution Date foo " public void pc {} @Before "pc " public void log {} } because although Date is imported, the reference is from a pointcut string. Compiling with javac then weaving later would not have worked, so ajc shouldn't work either.</description>
    <commit commitTime="2009-02-18 22:21:51" id="04ccf76fdb776388dbdef108d69183f01fe8821c"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc164/Ajc164Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="265418" reportTime="2009-02-19 03:21:00">
    <summary>[matching] Subtype varargs type pattern is broken</summary>
    <description>Build ID: M20080911-1700 Steps To Reproduce: void around Object[] varargs : call * *.* Object+... &amp;amp;&amp;amp; args varargs { foo varargs ; } The compiler complains about the ellipsis, it expects a closing paren instead. More information: The syntax in the example above "Object+..." seems to be in accordance with the grammar described in the AspectJ/ADK 1.5 Notebook: http://www.eclipse.org/aspectj/doc/released/adk15notebook/annotations-pointcuts-and-advice.html#signaturePatterns MethodPattern =&amp;gt; FormalsPattern =&amp;gt; TypePattern '...' =&amp;gt; SimpleTypePattern I am using the 1.6.1 runtime with Equinox Aspects.</description>
    <commit commitTime="2009-02-19 21:04:10" id="bb6a294312282d7caaf8a85d79b35a94e3f3c2d6"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/TypePattern.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/ExactTypePattern.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/PatternParser.java</file>
      <file>org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/TypePatternTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="265695" reportTime="2009-02-20 14:01:00">
    <summary>Fix for 239441 introduces terrible regression for annotation pointcut matching</summary>
    <description>Can't believe we didn't have tests for this situation. The fix for 239441 broke some annotation matching cases: interface I { @Foo void m ; } class C implements I { void m {} } With the breakage, this matches C.m execution @Foo I.m but this does not execution @Foo I+.m Adding testcases, refixing 239441 and getting this sorted out properly.</description>
    <commit commitTime="2009-02-20 20:57:15" id="e8309925eb9c0a86d3cf6a786cb95fc4be349242"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc164/Ajc164Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="265729" reportTime="2009-02-20 23:12:00">
    <summary>[structure model] ITD on aspect path not being found</summary>
    <description>This problem comes from a mailing list post in the url field . The AJDT exceptions that he describes have been addressed in bug 265553 . The remaining problem is that the structure model and relationship map does not seem to be properly created. I will attach a pair of projects that recreates this problem. In the App class, there is a method that has been ITDed on a declare parents interface from an aspect on the aspect path. The aspect itself does not appear in the aspectj structure model, and the Aspect Declarations relationship on the App class has an erroneous target relationship the handle is *InterTypeAspect, wheas is should be something like =Newsgroup Project-client&amp;gt;binaries&amp;lt;be.cronos.aop.aspects*InterTypeAspect.aj}InterTypeAspect`declare parents .</description>
    <commit commitTime="2009-02-24 19:17:25" id="303c8c22c537a4c64ced3c0d83cc92f110e60001"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
      <file>weaver/src/org/aspectj/weaver/model/AsmRelationshipProvider.java</file>
    </fixedFiles>
  </bug>
  <bug id="265993" reportTime="2009-02-24 13:25:00">
    <summary>[handles] no fully qualified parameters types in ITD handles</summary>
    <description>Currently, AspectJ always uses fully qualified parameter types in the handles of ITDs. This should not be. The handles should mimic the text, so that if the text does not fully qualify the parameter, neither should the handle. See Bug 265985 c1 for an example. Also attached to that bug is a sample project to use that recreates the bug.</description>
    <commit commitTime="2009-03-24 01:53:51" id="78decedeb5b689a9f2ec1bad7a813b2108c0f845"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/IProgramElement.java</file>
      <file>asm/src/org/aspectj/asm/internal/JDTLikeHandleProvider.java</file>
      <file>asm/src/org/aspectj/asm/internal/ProgramElement.java</file>
    </fixedFiles>
  </bug>
  <bug id="266165" reportTime="2009-02-25 12:04:00">
    <summary>Minimal analysis of if pcds to see if a reference is simply to a constant boolean</summary>
    <description>if the constant is: private static final boolean enabled = false; and the pointcut is public foo : execution * * .. &amp;amp;&amp;amp; if enabled ; then we should do enough analysis of the reference to enabled to know not to weave, particularly as this is the recommended way to turn off aspects.</description>
    <commit commitTime="2009-02-25 20:11:14" id="52f10ad1374069c305674e0ce66cd9a4f72e25f0"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ThisJoinPointVisitor.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/IfMethodDeclaration.java</file>
    </fixedFiles>
  </bug>
  <bug id="266564" reportTime="2009-02-27 16:43:00">
    <summary>java.lang.VerifyError: Register 2 contains wrong type</summary>
    <description>ENV: Eclipse 3.4 AJDT 1.6.3 Spring 2.5 JDK 1.6 Windows XP SP2 I have Annotation based AOP on Spring managed beans and on objects that are not managed by Spring. Only certain methods run into the above error. If I tweak my pointcut expression to limit the markers, evrything in Eclipse and Jetty works fine. Example method body that shows the error: ***** public boolean isUserAuthrized long docId, String userId { return priceUtilDao.isUserAuthrized docId, userId ; } ******** Pointcut: @Pointcut "execution * *..business..* .. " public void businessServiceLayer { } If I use @Pointcut "execution * *..business..get* .. " public void businessServiceLayer { } Jetty and Junit work just fine. A regualr compile works fine and runs fine in weblogic 103. Junit tests and jetty launch throw the above error.</description>
    <commit commitTime="2009-02-27 23:28:13" id="0317807e6cb65e3e018a41a3200975e06047a011"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc164/Ajc164Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="266602" reportTime="2009-02-28 16:09:00">
    <summary>Problem with incremental itd compilation</summary>
    <description>Reproduceable from Roo code - commenting out a field after a successful build results in this exception. The underlying cause may also apply to ITD methods and maybe constructors . org.aspectj.weaver.BCException: Couldn't find ITD init member 'void com.springsource.petclinic.domain.Visit_Roo_Entity_Itd.ajc$interFieldInit$com_springsource_petclinic_domain_Visit_Roo_Entity_Itd$com_springsource_petclinic_domain_Visit$id com.springsource.petclinic.domain.Visit ' on aspect com.springsource.petclinic.domain.Visit_Roo_Entity_Itd when type munging with BcelTypeMunger ResolvedTypeMunger Field, java.lang.Long com.springsource.petclinic.domain.Visit.id when weaving type com.springsource.petclinic.domain.Visit when weaving classes when weaving when incrementally building with classpath: C:\temp\petclinic\target\classes;E:/jvms/jdk1.6.0_06/jre/lib/resources.jar;E:/jvms/jdk1.6.0_06/jre/lib/rt.jar;E:/jvms/jdk1.6.0_06/jre/lib/jsse.jar;E:/jvms/jdk1.6.0_06/jre/lib/jce.jar;E:/jvms/jdk1.6.0_06/jre/lib/charsets.jar;E:/jvms/jdk1.6.0_06/jre/lib/ext/dnsns.jar;E:/jvms/jdk1.6.0_06/jre/lib/ext/localedata.jar;E:/jvms/jdk1.6.0_06/jre/lib/ext/sunjce_provider.jar;E:/jvms/jdk1.6.0_06/jre/lib/ext/sunmscapi.jar;E:/jvms/jdk1.6.0_06/jre/lib/ext/sunpkcs11.jar;C:/Users/Andy/.m2/repository/org/antlr/com.springsource.antlr/2.7.6/com.springsource.antlr-2.7.6.jar;C:/Users/Andy/.m2/repository/com/thoughtworks/xstream/com.springsource.com.thoughtworks.xstream/1.3.0/com.springsource.com.thoughtworks.xstream-1.3.0.jar;C:/Users/Andy/.m2/repository/edu/emory/mathcs/backport/com.springsource.edu.emory.mathcs.backport/3.1.0/com.springsource.edu.emory.mathcs.backport-3.1.0.jar;C:/Users/Andy/.m2/repository/edu/oswego/cs/concurrent/com.springsource.edu.oswego.cs.dl.util.concurrent/1.3.4/com.springsource.edu.oswego.cs.dl.util.concurrent-1.3.4.jar;C:/Users/Andy/.m2/repository/org/jboss/javassist/com.springsource.javassist/3.3.0.ga/com.springsource.javassist-3.3.0.ga.jar;C:/Users/Andy/.m2/repository/javax/annotation/com.springsource.javax.annotation/1.0.0/com.springsource.javax.annotation-1.0.0.jar;C:/Users/Andy/.m2/repository/javax/persistence/com.springsource.javax.persistence/1.0.0/com.springsource.javax.persistence-1.0.0.jar;C:/Users/Andy/.m2/repository/javax/servlet/com.springsource.javax.servlet/2.4.0/com.springsource.javax.servlet-2.4.0.jar;C:/Users/Andy/.m2/repository/javax/servlet/com.springsource.javax.servlet.jsp.jstl/1.2.0/com.springsource.javax.servlet.jsp.jstl-1.2.0.jar;C:/Users/Andy/.m2/repository/javax/transaction/com.springsource.javax.transaction/1.1.0/com.springsource.javax.transaction-1.1.0.jar;C:/Users/Andy/.m2/repository/net/sourceforge/cglib/com.springsource.net.sf.cglib/2.1.3/com.springsource.net.sf.cglib-2.1.3.jar;C:/Users/Andy/.m2/repository/net/sourceforge/ehcache/com.springsource.net.sf.ehcache/1.4.1/com.springsource.net.sf.ehcache-1.4.1.jar;C:/Users/Andy/.m2/repository/net/sourceforge/jsr107cache/com.springsource.net.sf.jsr107cache/1.0.0/com.springsource.net.sf.jsr107cache-1.0.0.jar;C:/Users/Andy/.m2/repository/org/antlr/com.springsource.org.antlr/3.0.1/com.springsource.org.antlr-3.0.1.jar;C:/Users/Andy/.m2/repository/org/aopalliance/com.springsource.org.aopalliance/1.0.0/com.springsource.org.aopalliance-1.0.0.jar;C:/Users/Andy/.m2/repository/org/apache/commons/com.springsource.org.apache.commons.collections/3.2.0/com.springsource.org.apache.commons.collections-3.2.0.jar;C:/Users/Andy/.m2/repository/org/apache/commons/com.springsource.org.apache.commons.dbcp/1.2.2.osgi/com.springsource.org.apache.commons.dbcp-1.2.2.osgi.jar;C:/Users/Andy/.m2/repository/org/apache/commons/com.springsource.org.apache.commons.logging/1.1.1/com.springsource.org.apache.commons.logging-1.1.1.jar;C:/Users/Andy/.m2/repository/org/apache/commons/com.springsource.org.apache.commons.pool/1.3.0/com.springsource.org.apache.commons.pool-1.3.0.jar;C:/Users/Andy/.m2/repository/org/apache/log4j/com.springsource.org.apache.log4j/1.2.15/com.springsource.org.apache.log4j-1.2.15.jar;C:/Users/Andy/.m2/repository/org/apache/taglibs/com.springsource.org.apache.taglibs.standard/1.1.2/com.springsource.org.apache.taglibs.standard-1.1.2.jar;C:/Users/Andy/.m2/repository/org/aspectj/com.springsource.org.aspectj.runtime/1.6.2.RELEASE/com.springsource.org.aspectj.runtime-1.6.2.RELEASE.jar;C:/Users/Andy/.m2/repository/org/aspectj/com.springsource.org.aspectj.tools/1.6.2.RELEASE/com.springsource.org.aspectj.tools-1.6.2.RELEASE.jar;C:/Users/Andy/.m2/repository/org/aspectj/com.springsource.org.aspectj.weaver/1.6.2.RELEASE/com.springsource.org.aspectj.weaver-1.6.2.RELEASE.jar;C:/Users/Andy/.m2/repository/org/dom4j/com.springsource.org.dom4j/1.6.1/com.springsource.org.dom4j-1.6.1.jar;C:/Users/Andy/.m2/repository/org/hibernate/com.springsource.org.hibernate/3.2.6.ga/com.springsource.org.hibernate-3.2.6.ga.jar;C:/Users/Andy/.m2/repository/org/hibernate/com.springsource.org.hibernate.annotations/3.3.1.ga/com.springsource.org.hibernate.annotations-3.3.1.ga.jar;C:/Users/Andy/.m2/repository/org/hibernate/com.springsource.org.hibernate.annotations.common/3.3.0.ga/com.springsource.org.hibernate.annotations.common-3.3.0.ga.jar;C:/Users/Andy/.m2/repository/org/hibernate/com.springsource.org.hibernate.ejb/3.3.2.GA/com.springsource.org.hibernate.ejb-3.3.2.GA.jar;C:/Users/Andy/.m2/repository/org/hibernate/com.springsource.org.hibernate.validator/3.0.0.GA/com.springsource.org.hibernate.validator-3.0.0.GA.jar;C:/Users/Andy/.m2/repository/org/hsqldb/com.springsource.org.hsqldb/1.8.0.9/com.springsource.org.hsqldb-1.8.0.9.jar;C:/Users/Andy/.m2/repository/org/jboss/util/com.springsource.org.jboss.util/2.0.4.GA/com.springsource.org.jboss.util-2.0.4.GA.jar;C:/Users/Andy/.m2/repository/org/junit/com.springsource.org.junit/4.4.0/com.springsource.org.junit-4.4.0.jar;C:/Users/Andy/.m2/repository/org/objectweb/asm/com.springsource.org.objectweb.asm/2.2.3/com.springsource.org.objectweb.asm-2.2.3.jar;C:/Users/Andy/.m2/repository/org/objectweb/asm/com.springsource.org.objectweb.asm.attrs/1.5.3/com.springsource.org.objectweb.asm.attrs-1.5.3.jar;C:/Users/Andy/.m2/repository/org/objectweb/asm/com.springsource.org.objectweb.asm.commons/2.2.3/com.springsource.org.objectweb.asm.commons-2.2.3.jar;C:/Users/Andy/.m2/repository/org/xmlpull/com.springsource.org.xmlpull/1.1.3.4-O/com.springsource.org.xmlpull-1.1.3.4-O.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.aop/3.0.0.M1/org.springframework.aop-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.aspects/3.0.0.M1/org.springframework.aspects-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.beans/3.0.0.M1/org.springframework.beans-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.context/3.0.0.M1/org.springframework.context-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.core/3.0.0.M1/org.springframework.core-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.expression/3.0.0.M1/org.springframework.expression-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.jdbc/3.0.0.M1/org.springframework.jdbc-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.orm/3.0.0.M1/org.springframework.orm-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.test/3.0.0.M1/org.springframework.test-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.transaction/3.0.0.M1/org.springframework.transaction-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.web/3.0.0.M1/org.springframework.web-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.web.servlet/3.0.0.M1/org.springframework.web.servlet-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/roo/roo-core/0.2.0-SNAPSHOT/roo-core-0.2.0-SNAPSHOT.jar;F:/eclipse/e342/eclipse/plugins/org.aspectj.runtime_1.6.4.20090205161900/aspectjrt.jar;f:\jvms\jdk1.6.0_06\jre\lib\ext\dnsns.jar;f:\jvms\jdk1.6.0_06\jre\lib\ext\localedata.jar;f:\jvms\jdk1.6.0_06\jre\lib\ext\sunjce_provider.jar;f:\jvms\jdk1.6.0_06\jre\lib\ext\sunmscapi.jar;f:\jvms\jdk1.6.0_06\jre\lib\ext\sunpkcs11.jar;f:\eclipse\e342\eclipse\\plugins\org.eclipse.equinox.launcher_1.0.101.R34x_v20081125.jar; at org.aspectj.weaver.bcel.BcelTypeMunger.mungeNewField BcelTypeMunger.java:1638 at org.aspectj.weaver.bcel.BcelTypeMunger.munge BcelTypeMunger.java:90 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:441 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:103 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1732 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1693 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1458 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1272 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:435 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving AjPipeliningCompilerAdapter.java:371 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:358 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:98 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:652 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:392 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:977 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:301 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:183 at org.aspectj.ajde.core.internal.AjdeCoreBuildManager.performBuild AjdeCoreBuildManager.java:127 at org.aspectj.ajde.core.AjCompiler.build AjCompiler.java:88 at org.eclipse.ajdt.core.builder.AJBuilder.build AJBuilder.java:223 at org.eclipse.core.internal.events.BuildManager$2.run BuildManager.java:633 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:37 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:170 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:201 at org.eclipse.core.internal.events.BuildManager$1.run BuildManager.java:253 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:37 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:256 at org.eclipse.core.internal.events.BuildManager.basicBuildLoop BuildManager.java:309 at org.eclipse.core.internal.events.BuildManager.build BuildManager.java:341 at org.eclipse.core.internal.events.AutoBuildJob.doBuild AutoBuildJob.java:140 at org.eclipse.core.internal.events.AutoBuildJob.run AutoBuildJob.java:238 at org.eclipse.core.internal.jobs.Worker.run Worker.java:55</description>
    <commit commitTime="2009-03-02 04:00:31" id="2f36e7f0a7cbf99fbb49e5de268918d4ea57256c"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="266996" reportTime="2009-03-04 05:49:00">
    <summary>AspectJElementHierarchy.java:427 NullPointerException</summary>
    <description>Since an recent update to eclipse I get errors when using ajdt compile time weaving. Single used aspect is @Configurable from spring 2.5.6. I call this critical because my application wont run without that aspect compiled in. When doing a build two popups "AspectJ Internal Compiler Error" are showing up with instructions to look for and post bugreports. 1st popup: -------------------------------- java.lang.NullPointerException at org.aspectj.asm.internal.AspectJElementHierarchy.findCloserMatchForLineNumber AspectJElementHierarchy.java:427 at org.aspectj.weaver.model.AsmRelationshipProvider.addRelationship AsmRelationshipProvider.java:130 at org.aspectj.weaver.bcel.BcelTypeMunger.munge BcelTypeMunger.java:124 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:441 at org.aspectj.weaver.bcel.BcelClassWeaver.weave ... end abstract interface org.springframework.beans.factory.aspectj.AbstractInterfaceDrivenDependencyInjectionAspect$ConfigurableDeserializationSupport -------------------------------- 2nd popup -------------------------------- java.lang.NullPointerException at org.aspectj.asm.internal.AspectJElementHierarchy.findCloserMatchForLineNumber AspectJElementHierarchy.java:427 at org.aspectj.weaver.model.AsmRelationshipProvider.addRelationship AsmRelationshipProvider.java:130 at org.aspectj.weaver.bcel.BcelTypeMunger.munge BcelTypeMunger.java:124 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:441 at org.aspectj.weaver.bcel.BcelClassWeaver.weave ... ibatis/domain/Banf; I IRETURN end public volatile int compareTo Object end public class de.synaix.k070_Banf.ibatis.domain.Banf -------------------------------- Output of AJDT Event trace window: -------------------------------- 11:21:34 Removed problems and tasks for project SOME_webapp 11:21:34 Builder: Tidied output folder s , removed class files and derived resources 11:21:35 Timer event: 1ms: Delete markers: SOME_webapp Finished deleting markers for SOME_webapp 11:21:38 Compiler configuration for project SOME_webapp doesn't know previous state, so assuming EVERYTHING has changed. 11:21:38 =========================================================================================== 11:21:38 Build kind = FULLBUILD 11:21:38 Project=SOME_webapp, kind of build requested=Full AspectJ compilation 11:21:38 Builder: Tidied output folder s , removed class files and derived resources 11:21:38 Timer event: 442ms: Pre compile 11:21:38 Compiler configuration for project SOME_webapp has been read by compiler. Resetting. 11:21:38 Configuration was [PROJECTSOURCEFILES_CHANGED, JAVAOPTIONS_CHANGED, ASPECTPATH_CHANGED, CLASSPATH_CHANGED, INPATH_CHANGED, NONSTANDARDOPTIONS_CHANGED, OUTJAR_CHANGED, PROJECTSOURCERESOURCES_CHANGED, OUTPUTDESTINATIONS_CHANGED, INJARS_CHANGED] 11:21:38 Resetting list of modified source files. Was null 11:21:38 Preparing for build: not going to be incremental because no successful previous full build 11:21:40 Timer event: 1252ms: Time to first compiled message 11:21:40 Timer event: 1276ms: Time to first woven message 11:21:45 AspectJ reports build successful, build was: FULL 11:21:45 AJDE Callback: finish. Was full build: true 11:21:45 Timer event: 6456ms: Total time spent in AJDE 11:21:45 Timer event: 157ms: Refresh after build 11:21:45 Types affected during build = 308 11:21:45 Crosscutting model sanity checked with no problems 11:21:45 Timer event: 0ms: Post compile 11:21:45 Timer event: 7248ms: Total time spent in AJBuilder.build 11:21:45 Timer event: 2ms: Delete markers: SOME_webapp Finished deleting markers for SOME_webapp 11:21:45 Timer event: 179ms: Create markers: SOME_webapp Finished creating markers for SOME_webapp --------------------------------</description>
    <commit commitTime="2009-03-04 17:12:43" id="2309f7b8eba592fd5521952e04ec8f0093daab62"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java</file>
    </fixedFiles>
  </bug>
  <bug id="267559" reportTime="2009-03-08 18:04:00">
    <summary>[Generics + ITD] "abort trouble in" Error</summary>
    <description>I used the latest dev build 1.6.3-20090306140549 Given this simple code: public class ClassA&amp;lt;T&amp;gt; { } abstract public class ClassB&amp;lt;T&amp;gt; implements IMarker&amp;lt;ClassA&amp;lt;T&amp;gt;&amp;gt; { } public interface IMarker&amp;lt;H&amp;gt; { } public aspect Aspect { public boolean IMarker&amp;lt;PARALLELSTATE&amp;gt;.c; } the compiler throws the following error and creates a dump file: [iajcNew] abort trouble in: [iajcNew] public abstract class mypackage.ClassB extends java.lang.Object implements mypackage.IMarker: [iajcNew] public void &amp;lt;init&amp;gt; : [iajcNew] ALOAD_0 // Lmypackage/ClassB; this line 5 [iajcNew] INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V [iajcNew] RETURN [iajcNew] end public void &amp;lt;init&amp;gt; [iajcNew] end public abstract class mypackage.ClassB [iajcNew] -- NullPointerException null [iajcNew] null [iajcNew] java.lang.NullPointerException [iajcNew] at org.aspectj.weaver.bcel.BcelClassWeaver.addInitializer BcelClassWeaver.java:267 [iajcNew] at org.aspectj.weaver.bcel.BcelTypeMunger.mungeNewField BcelTypeMunger.java:1731 [iajcNew] at org.aspectj.weaver.bcel.BcelTypeMunger.munge BcelTypeMunger.java:90 [iajcNew] at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:441 [iajcNew] at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:103 [iajcNew] at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1732 [iajcNew] at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1693 [iajcNew] at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1458 [iajcNew] at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1272 [iajcNew] at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:435 [iajcNew] at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving AjPipeliningCompilerAdapter.java:371 [iajcNew] at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:358 [iajcNew] at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:98 [iajcNew] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:652 [iajcNew] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:392 [iajcNew] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:977 [iajcNew] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:265 [iajcNew] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:179 [iajcNew] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 [iajcNew] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 [iajcNew] at org.aspectj.tools.ajc.Main.run Main.java:355 [iajcNew] at org.aspectj.tools.ajc.Main.runMain Main.java:234 [iajcNew] at org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM AjcTask.java:1211 [iajcNew] at org.aspectj.tools.ant.taskdefs.AjcTask.execute AjcTask.java:1021 [iajcNew] at org.apache.tools.ant.UnknownElement.execute UnknownElement.java:288 [iajcNew] at sun.reflect.GeneratedMethodAccessor1.invoke Unknown Source [iajcNew] at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 [iajcNew] at java.lang.reflect.Method.invoke Method.java:597 [iajcNew] at org.apache.tools.ant.dispatch.DispatchUtils.execute DispatchUtils.java:105 [iajcNew] at org.apache.tools.ant.Task.perform Task.java:348 [iajcNew] at org.apache.tools.ant.taskdefs.Sequential.execute Sequential.java:62 [iajcNew] at net.sf.antcontrib.logic.IfTask.execute IfTask.java:217 [iajcNew] at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method [iajcNew] at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 [iajcNew] at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 [iajcNew] at java.lang.reflect.Method.invoke Method.java:597 [iajcNew] at org.apache.tools.ant.dispatch.DispatchUtils.execute DispatchUtils.java:105 [iajcNew] at org.apache.tools.ant.TaskAdapter.execute TaskAdapter.java:134 [iajcNew] at org.apache.tools.ant.UnknownElement.execute UnknownElement.java:288 [iajcNew] at sun.reflect.GeneratedMethodAccessor1.invoke Unknown Source [iajcNew] at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 [iajcNew] at java.lang.reflect.Method.invoke Method.java:597 [iajcNew] at org.apache.tools.ant.dispatch.DispatchUtils.execute DispatchUtils.java:105 [iajcNew] at org.apache.tools.ant.Task.perform Task.java:348 [iajcNew] at org.apache.tools.ant.Target.execute Target.java:357 [iajcNew] at org.apache.tools.ant.Target.performTasks Target.java:385 [iajcNew] at org.apache.tools.ant.Project.executeSortedTargets Project.java:1329 [iajcNew] at org.apache.tools.ant.Project.executeTarget Project.java:1298 [iajcNew] at org.apache.tools.ant.helper.DefaultExecutor.executeTargets DefaultExecutor.java:41 [iajcNew] at org.eclipse.ant.internal.ui.antsupport.EclipseDefaultExecutor.executeTargets EclipseDefaultExecutor.java:32 [iajcNew] at org.apache.tools.ant.Project.executeTargets Project.java:1181 [iajcNew] at org.eclipse.ant.internal.ui.antsupport.InternalAntRunner.run InternalAntRunner.java:423 [iajcNew] at org.eclipse.ant.internal.ui.antsupport.InternalAntRunner.main InternalAntRunner.java:137 [iajcNew] 08.03.2009 22:57:15 org.aspectj.weaver.tools.Jdk14Trace info [iajcNew] INFO: Dumping to .../ajcore.20090308.225715.116.txt BUILD FAILED .../build-global.xml:141: fail due to NullPointerException"trouble in: public abstract class mypackage.ClassB extends java.lang.Object implements mypackage.IMarker: public void &amp;lt;init&amp;gt; : ALOAD_0 // Lmypackage/ClassB; this line 5 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V RETURN end public void &amp;lt;init&amp;gt; end public abstract class mypackage.ClassB " 1 exceptions With regards, Michael</description>
    <commit commitTime="2009-03-09 16:40:16" id="96870a05d3255c7c555c325b3993f3012400443c"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc164/Ajc164Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="268611" reportTime="2009-03-13 17:27:00">
    <summary>NPE when full compile of broken code</summary>
    <description>I get the following NPE when doing a full compile of broken code project to be attached : java.lang.NullPointerException at org.aspectj.weaver.patterns.DeclareAnnotation.getAnnotationTypeX DeclareAnnotation.java:358 at org.aspectj.weaver.bcel.BcelClassWeaver.doesAlreadyHaveAnnotation BcelClassWeaver.java:1411 at org.aspectj.weaver.bcel.BcelClassWeaver.weaveDeclareAtField BcelClassWeaver.java:1257 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:451 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:103 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1732 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1693 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1458 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1272 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:435 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving AjPipeliningCompilerAdapter.java:371 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:358 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:98 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:652 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:392</description>
    <commit commitTime="2009-03-16 19:53:36" id="0f5f551ffc0819f793122b6d0afe075ad377e027"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/DeclareAnnotation.java</file>
    </fixedFiles>
  </bug>
  <bug id="268689" reportTime="2009-03-15 17:49:00">
    <summary>ClassCastException thrown in ResolvedMemberImpl.parameterize .. : 'UnresolvedType cannot be cast to ResolvedType'</summary>
    <description>Created attachment 128856 [details] Project that causes problem Build ID: M20090211-1700 AJDT version: 1.6.4.20090313172428 AspectJ version: 1.6.4.20090304172355 Steps To Reproduce: When I build attached project using AJDT exception ClassCastException is thrown. I didn't try using another method of building headless? . Project contains an abstract generic aspect and a concrete aspect. In generic aspect there is one pointcut, but not connected with type parameter. In fact type parameter is not used. But if you make generic aspect non-generic then no exception is thrown. Exception I get: java.lang.ClassCastException: org.aspectj.weaver.UnresolvedType cannot be cast to org.aspectj.weaver.ResolvedType at org.aspectj.weaver.ResolvedMemberImpl.parameterize ResolvedMemberImpl.java:806 at org.aspectj.weaver.ResolvedMemberImpl.parameterize ResolvedMemberImpl.java:786 at org.aspectj.weaver.ResolvedPointcutDefinition.parameterizedWith ResolvedPointcutDefinition.java:135 at org.aspectj.weaver.ReferenceType.getDeclaredPointcuts ReferenceType.java:680 at org.aspectj.weaver.ResolvedType.getExposedPointcuts ResolvedType.java:1882 at org.aspectj.weaver.ResolvedType.getExposedPointcuts ResolvedType.java:1876 at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.checkPointcutDeclarations EclipseSourceType.java:439 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.resolvePointcutDeclarations AjLookupEnvironment.java:466 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:262 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile Compiler.java:616 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:357 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:371 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:977 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:301 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:183 at org.aspectj.ajde.core.internal.AjdeCoreBuildManager.performBuild AjdeCoreBuildManager.java:127 at org.aspectj.ajde.core.AjCompiler.build AjCompiler.java:88 at org.eclipse.ajdt.core.builder.AJBuilder.build AJBuilder.java:223 at org.eclipse.core.internal.events.BuildManager$2.run BuildManager.java:633 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:37 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:170 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:201 at org.eclipse.core.internal.events.BuildManager$1.run BuildManager.java:253 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:37 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:256 at org.eclipse.core.internal.events.BuildManager.basicBuildLoop BuildManager.java:309 at org.eclipse.core.internal.events.BuildManager.build BuildManager.java:341 at org.eclipse.core.internal.events.AutoBuildJob.doBuild AutoBuildJob.java:140 at org.eclipse.core.internal.events.AutoBuildJob.run AutoBuildJob.java:238 at org.eclipse.core.internal.jobs.Worker.run Worker.java:55</description>
    <commit commitTime="2009-03-16 04:53:46" id="4140fa3d7466876d427d82ed8ab949cf332e160d"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ResolvedMemberImpl.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ResolvedPointcutDefinition.java</file>
    </fixedFiles>
  </bug>
  <bug id="268710" reportTime="2009-03-16 00:51:00">
    <summary>unhelpful/unnecessary error for a generic aspect</summary>
    <description>After fixing the NPE for bug 268689 , we compile this code: package none; public aspect ConcreteAspect extends GenericAspect&amp;lt;String&amp;gt; { } package none; public abstract aspect GenericAspect&amp;lt;T&amp;gt; { interface SomeInterface { } pointcut SomeConstructor SomeInterface var : execution * SomeInterface .. &amp;amp;&amp;amp; this var ; } "parameterized types not supported for this and target pointcuts erasure limitation " It is considered parameterized when resolved through the concrete sub-aspect which defines T as String.</description>
    <commit commitTime="2009-03-16 18:40:12" id="1c9611faa2341eb315045ce1ab0df0269a7ab423"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc164/Ajc164Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="268827" reportTime="2009-03-16 11:53:00">
    <summary>incremental build issues</summary>
    <description>reported by Thomas on the list.</description>
    <commit commitTime="2009-03-18 20:37:02" id="e232485ed9305b92235ec00e00ae93fb7b160d3a"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</file>
    </fixedFiles>
  </bug>
  <bug id="269286" reportTime="2009-03-18 16:55:00">
    <summary>[handles] Handle for method with @Before looks like advice, but should look like method</summary>
    <description>In this code: @Aspect public class Logger { @Before "execution * Other.* " public void foo { } } The aspectj handle for method foo looks like this: =Boo/src&amp;lt;h{Logger.java}Logger&amp;amp;foo There are two problems with this. According to the text: 1. Logger is a class, not an aspect 2. foo is a method, not advice So, I would like to see something like this: =Boo/src&amp;lt;h{Logger.java[Logger~foo Would it be possible to generate the handle based on the text, rather than what it represents in the compiler? The same goes for other @Aspect kinds like pointcuts and declare. These kinds of elements should not have any aspecty parts to their handles. It should look like Java handles.</description>
    <commit commitTime="2009-03-27 17:34:38" id="a2703cf03d909a2dbc78f5b169225270f8308606"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="269522" reportTime="2009-03-20 10:24:00">
    <summary>[handles] Cross reference view and markers mix up joinpoints assigned to advice</summary>
    <description>Build ID: M20090211-1700 Steps To Reproduce: I have two pieces of after advice in my aspect. In the cross reference view I see all of the joinpoints for both after advice selecting one of the after advice statements. When I select the other after advice statement I see no joinpoints. When I select the marker for either piece of after advice, I see all the joinpoints for both pieces of advice. 1. open and perform a clean compile on the attached project 2. open the xref view 3. select line 22 an note that you see 5 joinpoints should only be 3 4. select line 68 and note that you see zero joinpoints should be 2 here 5. right click the marker at line 68 and choose "advises" - note you see all 5 joinpoints 6. right click the marker at line 22 and choose "advises" - note you see all 5 joinpoints More information:</description>
    <commit commitTime="2009-03-26 18:52:57" id="6dbb5f308c198963486550cb614204bc5bf8fd7a"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/internal/JDTLikeHandleProvider.java</file>
    </fixedFiles>
  </bug>
  <bug id="269578" reportTime="2009-03-20 17:01:00">
    <summary>Resource deletion in source folder on full build when source and output folders are the same.</summary>
    <description>On the clean before a full aspectj build resources are removed from the output folder. This is true even when the output and the source folder are the same. In this case, the resources are deleted from the source folder! When the source and output folders are the same, resources should never be deleted.</description>
    <commit commitTime="2009-03-21 01:38:50" id="5c49c0b67a0e88722bf9ea7a8c9e80dce518f067"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="269840" reportTime="2009-03-24 12:07:00">
    <summary>[model] package search fails in binary aspect in same package as a source type</summary>
    <description>If type a.b.c.C is advised by an aspect a.b.c.X from the aspectpath the model search logic breaks for finding 'X' because it hits the package node for a.b.c and stops looking</description>
    <commit commitTime="2009-03-24 16:43:38" id="7a7d6f0f1e81e6639bdaa4f278b4778b984ad175"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java</file>
    </fixedFiles>
  </bug>
  <bug id="269867" reportTime="2009-03-24 14:16:00">
    <summary>Non synchronized access to WeakHashMap causes infinite loop</summary>
    <description>The non synchronized access from AjTypeSystem.getAjType clazz to a static instance of WeakHashMap may cause an infinite loop at start up in a multi threaded system. The thread dump shows that 32 of 33 threads of the application stuck in WeakHashMap.get Object line 355: "BundleStarterThreadQcCtrl24" prio=3 tid=0x00957c00 nid=0x39 runnable [0xd42fb000..0xd42ffa70] java.lang.Thread.State: RUNNABLE at java.util.WeakHashMap.get WeakHashMap.java:355 at org.aspectj.lang.reflect.AjTypeSystem.getAjType AjTypeSystem.java:37 at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.initialize Java15ReflectionBasedReferenceTypeDelegate.java:66 at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.create15Delegate ReflectionBasedReferenceTypeDelegateFactory.java:56 at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createDelegate ReflectionBasedReferenceTypeDelegateFactory.java:42 at org.aspectj.weaver.reflect.ReflectionWorld.resolveDelegate ReflectionWorld.java:111 at org.aspectj.weaver.World.resolveToReferenceType World.java:388 at org.aspectj.weaver.World.resolve World.java:279 at org.aspectj.weaver.World.resolve World.java:199 at org.aspectj.weaver.World.resolve World.java:348 at org.aspectj.weaver.reflect.ReflectionWorld.resolve ReflectionWorld.java:103 at org.aspectj.weaver.reflect.ReflectionWorld.resolve ReflectionWorld.java:93 at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.toResolvedTypeArray ReflectionBasedReferenceTypeDelegateFactory.java:214 at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createResolvedMethod ReflectionBasedReferenceTypeDelegateFactory.java:107 at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createResolvedMember ReflectionBasedReferenceTypeDelegateFactory.java:98 at org.aspectj.weaver.reflect.ReflectionShadow.makeExecutionShadow ReflectionShadow.java:53 at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesExecution PointcutExpressionImpl.java:100 at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesMethodExecution PointcutExpressionImpl.java:92 at org.springframework.aop.aspectj.AspectJExpressionPointcut.getShadowMatch AspectJExpressionPointcut.java:370</description>
    <commit commitTime="2009-03-24 22:04:41" id="752f895d260e3c61c8140a90812df52425ca3692"/>
    <fixedFiles>
      <file>aspectj5rt/java5-src/org/aspectj/lang/reflect/AjTypeSystem.java</file>
    </fixedFiles>
  </bug>
  <bug id="269902" reportTime="2009-03-24 18:39:00">
    <summary>NPE in AsmRelationshipProvider.addRelationship</summary>
    <description>When doing a clean build of my project, seeing dozens, upwards of 100 of NPEs similar to the following: java.lang.NullPointerException at org.aspectj.weaver.model.AsmRelationshipProvider.addRelationship AsmRelationshipProvider.java:168 at org.aspectj.weaver.bcel.BcelTypeMunger.munge BcelTypeMunger.java:124 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:441 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:103 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1732 at org.aspectj.weaver.b ... FWIW, this is seen for Spring-managed auto-injection of beans with the @Configurable annotation. Official AJDT version is: 1.6.4.20090304172355 Version: 3.4.2 Build id: M20090211-17</description>
    <commit commitTime="2009-03-26 02:25:32" id="d5e900d42c32d32d87173c82d8a5dc51beb87300"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/model/AsmRelationshipProvider.java</file>
    </fixedFiles>
  </bug>
  <bug id="269912" reportTime="2009-03-24 19:25:00">
    <summary>wasted time building message context when it is only used for command line builds</summary>
    <description>The context for a message is created even when AspectJ is used inside AJDT - but the context only ever gets used when printing messages to System.out. Under AJDT we ought to be able to 'switch it off'</description>
    <commit commitTime="2009-03-25 16:19:48" id="c732808dbf2daf655dc1c9ce4cddb20b8c27ab1a"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java</file>
    </fixedFiles>
  </bug>
  <bug id="270033" reportTime="2009-03-25 17:20:00">
    <summary>[incremental] Incremental compilation with aspects on an incoming classpath/aspectpath</summary>
    <description>This is something it might now be time to address. I encountered it in bug 267794 and it was rather annoying. With all the improvements to incremental it is annoying to just throw our hands in the air and do a full build if we hit an aspect on the defined classpath/aspectpath for a project. I'm not looking into inpath here, if that benefits from some of these changes - that's great - but it is not something I'm trying to fix here.</description>
    <commit commitTime="2009-03-26 03:15:47" id="b23cc1a113ffabc87c2efefdfa919d643562b20e"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</file>
    </fixedFiles>
  </bug>
  <bug id="271169" reportTime="2009-04-03 14:26:00">
    <summary>BcelShadow.java:2354 ArrayIndexOutOfBoundsException when implementing on shadow method-call</summary>
    <description>observed with I20080617-2000. To reproduce: 1. use AspectJ 20090304172355 2. take a sizeable code base with heavily overloaded methods 3. create an around advice cutting across calls to the above 4. try and have the compiled classes woven More information: - In a separate proof-of-principle project in the same workspace, pointcut, advice and supporting classes seem to work as desired. Some information from the "details" of a popup in eclipse on a debug launch of an instrumentation attempt for a trivial "main": java.lang.ArrayIndexOutOfBoundsException at org.aspectj.weaver.bcel.BcelShadow.weaveAroundInline BcelShadow.java:2354 at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:322 at org.aspectj.weaver.Shadow.implementMungers Shadow.java:613 at org.aspectj.weaver.Shadow.implement Shadow.java:527 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:3053 at org.aspectj.weaver.bcel.BcelClassWeaver.weave B ... .aspectj.runtime.internal.AroundClosure, org.aspectj.lang.JoinPoint$StaticPart end public abstract class com.iqdoq.hyperdoc.util.misc.HypChecksums the testrun commences without noticable malfunction from an ant run outside the eclipse IDE: [...] trouble in: [javac-iajc] public class com.iqdoq.hyperdoc.server.doccleaner.test.HypCleanerTestUtil extends [... less than five thousand lines of blurb ...] when implementing on shadow method-call com.iqdoq.hyperdoc.server.doc.HypDocOutputStream com.iqdoq.hyperdoc.server.doc.HypDocManager.createDocStream long, int[], long[], long, java.lang.Object, java.lang.String, java.lang.String, int, java.lang.String, java.sql.Timestamp, int, long, long [javac-iajc] when weaving classes [javac-iajc] when weaving [javac-iajc] when batch building BuildConfig[null] #Files=1143 AopXmls=#0 [javac-iajc] 18 [javac-iajc] java.lang.ArrayIndexOutOfBoundsException: 18 [javac-iajc] at org.aspectj.weaver.bcel.BcelShadow.weaveAroundInline BcelShadow.java:2354 [javac-iajc] at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:322 [javac-iajc] at org.aspectj.weaver.Shadow.implementMungers Shadow.java:613 [javac-iajc] at org.aspectj.weaver.Shadow.implement Shadow.java:527 [ad nauseam] The error on HypChecksums is interesting, as that class is empty but for a nested interface, two nested classes and a twenty-line main . Memory limit is above 1GB eclipe footprint, too . For a first application, I worked around this excluding types where this occurred from the point cut explicitly. Murphy assured the second application is in one of these.</description>
    <commit commitTime="2009-04-04 18:41:40" id="b90b11e6346a98ec268bfc7619e4d8980b939429"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/AllTests16.java</file>
    </fixedFiles>
  </bug>
  <bug id="271840" reportTime="2009-04-09 16:00:00">
    <summary>Load-Time weaving deadlocks when used with Terracotta</summary>
    <description>The deadlock occurs intermittently after startup. For background, please refer to this posting: http://forums.terracotta.org/forums/posts/list/2002.page#12093 These are the stack traces of the conflicting threads when reproduced by Terracotta: "Job_Executor2": at org.aspectj.weaver.loadtime.Aj$WeaverContainer.getWeaver Aj.java:245 - locked &amp;lt;0xafb85598&amp;gt; a java.util.Collections$SynchronizedMap at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:89 - locked &amp;lt;0x8592f6b0&amp;gt; a java.net.URLClassLoader at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform ClassPreProcessorAgentAdapter.java:52 at sun.instrument.TransformerManager.transform TransformerManager.java:169 at sun.instrument.InstrumentationImpl.transform InstrumentationImpl.java:365 at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:621 at java.security.SecureClassLoader.defineClass SecureClassLoader.java:124 at java.net.URLClassLoader.defineClass URLClassLoader.java:260 at java.net.URLClassLoader.access$000 URLClassLoader.java:56 at java.net.URLClassLoader$1.run URLClassLoader.java:195 at java.security.AccessController.doPrivileged Native Method at java.net.URLClassLoader.findClass URLClassLoader.java:188 at java.lang.ClassLoader.loadClass ClassLoader.java:307 - locked &amp;lt;0x8592f6b0&amp;gt; a java.net.URLClassLoader at java.lang.ClassLoader.loadClass ClassLoader.java:252 at java.lang.ClassLoader.loadClassInternal ClassLoader.java:320 - locked &amp;lt;0x8592f6b0&amp;gt; a java.net.URLClassLoader at javax.management.remote.generic.ServerIntermediary$RequestHandler.handleNotifReqMessage ServerIntermediary.java:700 at javax.management.remote.generic.ServerIntermediary$RequestHandler.execute ServerIntermediary.java:626 at com.sun.jmx.remote.generic.ServerSynchroMessageConnectionImpl$RemoteJob.run ServerSynchroMessageConnectionImpl.java:266 at com.sun.jmx.remote.opt.util.ThreadService$ThreadServiceJob.run ThreadService.java:208 at com.sun.jmx.remote.opt.util.JobExecutor.run JobExecutor.java:59 "main": at org.aspectj.weaver.loadtime.Aj$WeaverContainer.getWeaver Aj.java:235 - waiting to lock &amp;lt;0xafb85598&amp;gt; a java.util.Collections$SynchronizedMap at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:89 - locked &amp;lt;0x8592c130&amp;gt; a sun.misc.Launcher$AppClassLoader at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform ClassPreProcessorAgentAdapter.java:52 at sun.instrument.TransformerManager.transform TransformerManager.java:169 at sun.instrument.InstrumentationImpl.transform InstrumentationImpl.java:365 at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:621 at java.security.SecureClassLoader.defineClass SecureClassLoader.java:124 at java.net.URLClassLoader.defineClass URLClassLoader.java:260 at java.net.URLClassLoader.access$000 URLClassLoader.java:56 at java.net.URLClassLoader$1.run URLClassLoader.java:195 at java.security.AccessController.doPrivileged Native Method at java.net.URLClassLoader.findClass URLClassLoader.java:188 at sun.misc.Launcher$AppClassLoader.findClass Launcher.java at java.lang.ClassLoader.loadClass ClassLoader.java:307 - locked &amp;lt;0x8592c130&amp;gt; a sun.misc.Launcher$AppClassLoader at sun.misc.Launcher$AppClassLoader.loadClass Launcher.java:301 - locked &amp;lt;0x8592c130&amp;gt; a sun.misc.Launcher$AppClassLoader at java.lang.ClassLoader.loadClass ClassLoader.java:252 at java.lang.ClassLoader.loadClassInternal ClassLoader.java:320 - locked &amp;lt;0x8592c130&amp;gt; a sun.misc.Launcher$AppClassLoader</description>
    <commit commitTime="2009-04-29 00:56:32" id="4afa356104af67957a2353d0adaf8373f518b46d"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Aj.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="272233" reportTime="2009-04-14 21:08:00">
    <summary>AspectJ Internal Compiler Error-BCException for generic type array in pointcut</summary>
    <description>Build ID: M20090211-1700 Steps To Reproduce: 1. Create Aspect 2. Specify pointcut: @Pointcut "execution !void&amp;lt;?&amp;gt;[] * .. " void pointCutError {} 3. Save/Build More information: org.aspectj.weaver.BCException at org.aspectj.weaver.ResolvedType.getGenericType ResolvedType.java:1956 at org.aspectj.weaver.patterns.WildTypePattern.verifyTypeParameters WildTypePattern.java:945 at org.aspectj.weaver.patterns.WildTypePattern.resolveParameterizedType WildTypePattern.java:819 at org.aspectj.weaver.patterns.WildTypePattern.resolveBindingsForExactType WildTypePattern.java:765 at org.aspectj.weaver.patterns.WildTypePat ... unmscapi.jar;C:\Program Files\Java\jdk1.6.0_12\jre\lib\ext\sunpkcs11.jar;C:\eclipse\\plugins\org.eclipse.equinox.launcher_1.0.101.R34x_v20081125.jar; I was try to use @Pointcut "execution !void * .. " to advise: public Collection&amp;lt;?&amp;gt;[] getCollectionArray { return collectionArray; } But the pointcut failed to pickout the desired join point. Changing the pointcut to @Pointcut "execution !void[] * .. " also fails to pickout the join point. @Pointcut "execution !void&amp;lt;?&amp;gt;[] * .. " and @Pointcut "execution !void&amp;lt;?&amp;gt; * .. " both lead to internal compiler errors.</description>
    <commit commitTime="2009-04-16 19:17:50" id="bb741e6b112e6f3dff5ea53e1e42956a0418c74e"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java</file>
    </fixedFiles>
  </bug>
  <bug id="272591" reportTime="2009-04-16 18:32:00">
    <summary>[WARNING] couldn't find aspectjrt.jar on classpath</summary>
    <description>I am using the aspectj runtime jar that is in the spring source bundle repository. The have renamed their jar to match their naming conventions and it is causing the warning to occur. Their bundle is named com.springsource.org.aspectj.runtime-1.6.3.RELEASE.jar. It would be nice if this warning was not printed out in this case.</description>
    <commit commitTime="2009-04-30 20:44:56" id="1b663a986bf7d2a0b62988c08d31753ace94072e"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="272825" reportTime="2009-04-19 11:42:00">
    <summary>ITD of a method overriding a generic one and calling super gives exception</summary>
    <description>Suppose I have a generic class : public class GenericSuper&amp;lt;T&amp;gt; { public void doSomethingWith T t { System.out.println "with" ; System.out.println t.toString ; } public void doSomethingElseWith T t { System.out.println "else" ; System.out.println t ; } } The I have a class extending it for Integer : public class Concrete extends GenericSuper&amp;lt;Integer&amp;gt;{ @Override public void doSomethingElseWith Integer t { System.out.println "In normal method" ; super.doSomethingElseWith t ; } } And an aspect adding an ITD that overrides the other method of the generic calling super : public aspect IDTOfMethod { public void Concrete.doSomethingWith Integer i { System.out.println "In ITD method" ; super.doSomethingWith i ; } } This compiles, but does not run, cause it throws a NoSuchMethodException. Looking at javap output for the Concrete class, we can see the error. This is how the super call in the Concrete.java method is invoked : 10: invokespecial #31; //Method org/aspectj/test/GenericSuper.doSomethingElseWith: Ljava/lang/Object; V As you can see doSomethingElseWith is called with an Object argument, while this is how the other call is invoked : public void ajc$superDispatch$org_aspectj_test_Concrete$doSomethingWith java.lang.Integer ; Synthetic: true Code: Stack=2, Locals=2, Args_size=2 0: aload_0 1: aload_1 2: invokespecial #60; //Method org/aspectj/test/GenericSuper.doSomethingWith: Ljava/lang/Integer; V The argument is Integer, which is not correct cause GenericSuper is generic, so the argument should be object. Rewriting the ITD this way : public void Concrete.doSomethingWith Integer i { System.out.println "In ITD method" ; super.doSomethingWith Object i ; } Given a compile time error. Rewriting it this other way : public void Concrete.doSomethingWith Integer i { System.out.println "In ITD method" ; this.doSomethingWith i ; } Obviously leads to stack overflow.</description>
    <commit commitTime="2009-04-30 20:29:38" id="1fe559e2babe14a778e200b4efccd380af5bf16b"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc165/Ajc165Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="273628" reportTime="2009-04-24 14:40:00">
    <summary>java.lang.VerifyError: Incompatible argument to function when using an annotation value binding in a pointcut</summary>
    <description>Created attachment 133162 [details] Eclipse java project demonstrating bug I am trying to extract a value from an annotation and pass it into my advice but I am not having much luck. Here is the exception generated by my test project: Exception in thread "main" java.lang.VerifyError: class: aspectj/pointcut/annotation/bug/AspectTargetClass, method: aspectTargetMethod signature: V Incompatible argument to function at aspectj.pointcut.annotation.bug.TestPointcutAnnotationAspect.main TestPointcutAnnotationAspect.java:7 This simple example works if I run with the jvm -noverify flag, however my real-world case fails with a different error when I try to do that the ApiDescriptor argument value passed into AnnotationAspect.monitorMethodPerformancePartialAnnotation is the wrong type -- it's the object that the pointcut matched . I can investigate that more should the resolution of the VerifyError bug not completely take care of the problem. I am using version 1.6.3.20090122141228 of the AspectJ Development Tools plug-in and I have tried JDK 1.5.0_16 and JDK 1.6.0_07. My eclipse version is 3.4.0. Here is the article I used as a reference: http://andrewclement.blogspot.com/2009/02/aspectj-optimized-annotation-value.html</description>
    <commit commitTime="2009-04-24 21:23:45" id="c6601d4e182c6cd780815ec6ea48d9423fac85d7"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/AnnotationAccessFieldVar.java</file>
    </fixedFiles>
  </bug>
  <bug id="274558" reportTime="2009-04-30 13:57:00">
    <summary>[handles] Aspects on aspect path should have binary style handles</summary>
    <description>I am noticing that sometimes aspects on the aspectpath use source style handles, not binary style handles. Consider the model printout of a project that I am about to attach: 10:54:24 Printing crosscutting model for all AspectJ projects in the workspace 10:54:24 10:54:24 -------------------------------------- 10:54:24 Printing crosscutting model for Bug270096 base 10:54:24 Hierarchy: = Bug270096 base/src = Bug270096 base/src&amp;lt;q = Bug270096 base/src&amp;lt;q{UsesITDs1.java = Bug270096 base/src&amp;lt;q{UsesITDs1.java%q = Bug270096 base/src&amp;lt;q{UsesITDs1.java# = Bug270096 base/src&amp;lt;q{UsesITDs1.java#r.HasITDs2 = Bug270096 base/src&amp;lt;q{UsesITDs1.java#p.HasITDs1 = Bug270096 base/src&amp;lt;q{UsesITDs1.java[UsesITDs1 = Bug270096 base/src&amp;lt;q{UsesITDs1.java[UsesITDs1~nothing = Bug270096 base/src&amp;lt;p = Bug270096 base/src&amp;lt;p{HasITDs1.java = Bug270096 base/src&amp;lt;p{HasITDs1.java%p = Bug270096 base/src&amp;lt;p{HasITDs1.java# = Bug270096 base/src&amp;lt;p{HasITDs1.java#r.InterfaceForITD = Bug270096 base/src&amp;lt;p{HasITDs1.java[HasITDs1 = Bug270096 base/binaries = Bug270096 base/binaries&amp;lt;r = Bug270096 base/binaries&amp;lt;r*DeclaresITD.aj = Bug270096 base/binaries&amp;lt;r*DeclaresITD.aj}DeclaresITD = Bug270096 base/binaries&amp;lt;r*DeclaresITD.aj}DeclaresITD InterfaceForITD.x = Bug270096 base/binaries&amp;lt;r*DeclaresITD.aj}DeclaresITD InterfaceForITD.nothing I I I Relationship map: = Bug270096 base/src&amp;lt;p{HasITDs1.java[HasITDs1 :: = Bug270096 base/src&amp;lt;p{HasITDs1.java[HasITDs1 --aspect declarations--&amp;gt; [= Bug270096 base/binaries&amp;lt;r*DeclaresITD.aj}DeclaresITD InterfaceForITD.x, = Bug270096 base/binaries&amp;lt;r*DeclaresITD.aj}DeclaresITD InterfaceForITD.nothing I I I] = Bug270096 base/binaries&amp;lt;r*DeclaresITD.aj}DeclaresITD InterfaceForITD.x :: = Bug270096 base/binaries&amp;lt;r*DeclaresITD.aj}DeclaresITD InterfaceForITD.x --declared on--&amp;gt; [= Bug270096 base/src&amp;lt;p{HasITDs1.java[HasITDs1] = Bug270096 base/binaries&amp;lt;r*DeclaresITD.aj}DeclaresITD InterfaceForITD.nothing I I I :: = Bug270096 base/binaries&amp;lt;r*DeclaresITD.aj}DeclaresITD InterfaceForITD.nothing I I I --declared on--&amp;gt; [= Bug270096 base/src&amp;lt;p{HasITDs1.java[HasITDs1] These entries: = Bug270096 base/binaries&amp;lt;r*DeclaresITD.aj}DeclaresITD = Bug270096 base/binaries&amp;lt;r*DeclaresITD.aj}DeclaresITD InterfaceForITD.x = Bug270096 base/binaries&amp;lt;r*DeclaresITD.aj}DeclaresITD InterfaceForITD.nothing I I I use source style for describing the aspect. Instead, they should be like this because they reference a class file, not an aj source file: = Bug270096 base/binaries&amp;lt;r DeclaresITD.class}DeclaresITD = Bug270096 base/binaries&amp;lt;r DeclaresITD.class}DeclaresITD InterfaceForITD.x = Bug270096 base/binaries&amp;lt;r DeclaresITD.class}DeclaresITD InterfaceForITD.nothing I I I</description>
    <commit commitTime="2009-04-30 19:51:46" id="c533722181596ca6ed43fbc87c28936961c46570"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc164/Ajc164Tests.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="274559" reportTime="2009-04-30 14:06:00">
    <summary>Compile exception when not using debug info</summary>
    <description>The following project throws a compiler exception when the project property "Add variable attributes to generated class files" is turned off.</description>
    <commit commitTime="2009-04-30 21:09:26" id="f9578daa1e5153f241aee8b640d58351db26241f"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java</file>
    </fixedFiles>
  </bug>
  <bug id="274986" reportTime="2009-05-05 09:50:00">
    <summary>DocumentParser incorrectly caches DTD InputStream</summary>
    <description>Build ID: 1.6.3 Steps To Reproduce: Attempt to parse two aop.xml files using two DocumentParsers that are loaded by the same class loader. If the DTD is loaded from a JAR file you'll get an NPE at java.util.zip.Inflater.inflateBytes Native Method . More information: DocumentParser caches the DTD InputStream in a static final field. Many InputStreams are unusable after being closed so the same instance should not be used here. For InflaterInputStreams there seems to be a bug in the JRE that prevents the stream from reporting itself as closed when you use it again.</description>
    <commit commitTime="2009-05-05 23:45:14" id="66235e846cc472a5e7c15ab3c1c37513d2e4ed0b"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="275032" reportTime="2009-05-05 13:50:00">
    <summary>[itds] unhelpful message for itd of default ctor onto a type</summary>
    <description>The default constructor is created automatically if not defined. An ITD of the default constructor can clash with it and gives an unhelpful message. Effectively the ITD is providing the ctor so we shouldn't be creating a default one.</description>
    <commit commitTime="2009-05-05 23:40:59" id="262cb6dd7fa047f97b9c76e7425964ae542b147c"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc165/Ajc165Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="276399" reportTime="2009-05-14 19:40:00">
    <summary>incremental build leaves relationship hanging around in the model</summary>
    <description>I've seen a few manifestations of this problem I think: import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; @Retention RetentionPolicy.RUNTIME @interface WebService {} //@WebService class Foo { public Foo {} } aspect X { after : execution *.new .. &amp;amp;&amp;amp; @within WebService { } } uncomment the annotation and the advice applies arrows appear OK , comment it out again and save - on the incremental build 'something' happens but not the right thing as the relationship is still in the relationship map. In the UI the arrow against the method changes to a straight arrow from the after arrow.</description>
    <commit commitTime="2009-05-15 06:19:20" id="506f9187da625a18bc135f9821881b05c53f1871"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="277508" reportTime="2009-05-22 13:20:00">
    <summary>Unstable Method Names When Recompiling</summary>
    <description>When I recompile an aspect library, making without any changes to the code, it results in incompatible binary output. This is a significant problem because it means that if you make a tiny bug fix e.g., changing implementation logic that isn't affected by advice , all downstream clients must be recompiled and then all resulting binaries must be deployed simultaneously, making managing changes to aspect libraries far more complex. Sample error in a downstream client that was compiled against an old version of the aspect library: java.lang.NoSuchMethodError: glassbox.monitor.resource.JdbcMonitor.ajc$if_7 Ljava/sql/ResultSet; Z at</description>
    <commit commitTime="2009-05-22 19:35:20" id="5f15c2a8e4afbf5aa7d554142732da58b5cec5f2"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc165/Ajc165Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="279120" reportTime="2009-06-04 11:10:00">
    <summary>NPE determining annotation target kind during weaving</summary>
    <description>reported on the list: Hi, I am using aspectj LTW aspectjweaver-1.6.1 for weaving an aspect available in another jar within my web application code. While building the jar which contains the aspect, using maven, I have JUnits which run without any problems using LTW. My aspect code looks as below @Around "execution @com.arisglobal.aglite.annotations.OperationTrail public * * .. &amp;amp;&amp;amp; this executor " public Object auditOperation ProceedingJoinPoint thisJoinPoint, Object executor { … … aspect code … } However when I deploy the application in tomcat with javaagent:aspectjweaver-1.6.1.jar option , I get a NPE which I have pasted below. Jun 4, 2009 12:06:18 PM org.aspectj.weaver.tools.Jdk14Trace error SEVERE: com/arisglobal/aglite/services/actiontrail/ActionTrailAspect java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelObjectType.getAnnotationTargetKinds BcelO bjectType.java:612 at org.aspectj.weaver.ReferenceType.getAnnotationTargetKinds ReferenceTy pe.java:265 at org.aspectj.weaver.patterns.SignaturePattern.checkForIncorrectTargetK ind SignaturePattern.java:112 at org.aspectj.weaver.patterns.SignaturePattern.checkForIncorrectTargetK ind SignaturePattern.java:94 at org.aspectj.weaver.patterns.SignaturePattern.resolveBindings Signatur ePattern.java:87 at org.aspectj.weaver.patterns.KindedPointcut.resolveBindings KindedPoin tcut.java:262 at org.aspectj.weaver.patterns.AndPointcut.resolveBindings AndPointcut.j ava:75 at org.aspectj.weaver.patterns.Pointcut.resolve Pointcut.java:196 at org.aspectj.weaver.bcel.AtAjAttributes.handleAroundAnnotation AtAjAtt ributes.java:1308 at org.aspectj.weaver.bcel.AtAjAttributes.readAj5MethodAttributes AtAjAt tributes.java:403 at org.aspectj.weaver.bcel.BcelMethod.unpackAjAttributes BcelMethod.java :189 at org.aspectj.weaver.bcel.BcelMethod.&amp;lt;init&amp;gt; BcelMethod.java:96 at org.aspectj.weaver.bcel.BcelObjectType.getDeclaredMethods BcelObjectT ype.java:264 at org.aspectj.weaver.bcel.LazyClassGen.&amp;lt;init&amp;gt; LazyClassGen.java:303 at org.aspectj.weaver.bcel.BcelObjectType.getLazyClassGen BcelObjectType .java:524 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1728 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1 696 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:145 8 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1244 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor. java:423 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.jav a:286 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:95 at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform C lassPreProcessorAgentAdapter.java:52 at sun.instrument.TransformerManager.transform TransformerManager.java:1 22 at sun.instrument.InstrumentationImpl.transform InstrumentationImpl.java :155 at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:620 I also tried using aspectjweaver-1.6.4 version however got the same error.</description>
    <commit commitTime="2009-06-04 15:43:11" id="3417cbe70eb77243767e59f9fd181b989c8cefb6"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
    </fixedFiles>
  </bug>
  <bug id="279298" reportTime="2009-06-05 14:02:00">
    <summary>AspectJ LTW with Cobertura</summary>
    <description>We are using AspectJ LTW along with Cobertura for code coverage. Class files are weaved just fine if they are not instrumented with Cobertura, but when AspectJ attempts to weave the same aspects into Cobertura-instrumented copies of the same class files, weaving fails with the following error: &amp;gt;&amp;gt; error at com\mycompany\MyAspect.java::0 Cannot read debug info for @Aspect to handle formal binding in pointcuts please compile with 'javac -g' or '&amp;lt;javac debug='true'.../&amp;gt;' in Ant The attached project demonstrates the problem. It contains one simple aspect, a target class, and a unit test for the aspect. To see the problem, run the "unittest" target in the included Ant build file. This will run the single unit test twice. In the first pass, the test is run with javac-generated i.e. uninstrumented class files. The aspect is correctly woven and the test passes. In the second pass, the test is run with Cobertura-instrumented class files. There is an error during LTW, and the test fails.</description>
    <commit commitTime="2009-10-22 23:26:14" id="35a964971d99283b22510f73b5e7e826b57c619a"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</file>
    </fixedFiles>
  </bug>
  <bug id="279983" reportTime="2009-06-11 13:50:00">
    <summary>Generic intertype method does not receive bridge method when overridden</summary>
    <description>Created attachment 138951 [details] Testcase Build ID: M20090211-1700 AspectJ 1.6.5 See the attached test case. When there are two generic intertype methods defined in an aspect, and one calls the other: public void SelectAction&amp;lt;I, T&amp;gt;.setSelected T object { //do nothing } public void SelectAction&amp;lt;I, T&amp;gt;.setSelectedId I id { setSelected null ; } Then the implementing class overrides the called method: public class Test implements SelectAction&amp;lt;Long, User&amp;gt;{ public void setSelected User user { //overriden version } public static void main String[] args { new Test .setSelectedId 1l ; } } A call to setSelectedId will result in: Exception in thread "main" java.lang.AbstractMethodError: Test.setSelected Ljava/lang/Object; V at SelectActionAspect.ajc$interMethodDispatch1$SelectActionAspect$SelectAction$setSelected SelectActionAspect.aj at SelectActionAspect.ajc$interMethod$SelectActionAspect$SelectAction$setSelectedId SelectActionAspect.aj:13 at Test.setSelectedId Test.java:1 at Test.setSelectedId Test.java:1 at SelectActionAspect.ajc$interMethodDispatch1$SelectActionAspect$SelectAction$setSelectedId SelectActionAspect.aj at Test.main Test.java:13</description>
    <commit commitTime="2009-06-12 22:32:35" id="140040eb7c05beed14ad49a38c2d59508dcda6f8"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc165/Ajc165Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="280380" reportTime="2009-06-15 22:39:00">
    <summary>[plan] [model] Model not updated correctly after incremental build---ITD</summary>
    <description>The crosscutting model is not being correctly udpated after an incremental build. To reproduce: 1. Import attached project 2. Open AnAspect.aj 3. Change AClass.xxxx to f.AClass.xxxx fully qualified name 4. Save 5. Gutter marker disappears 6. Full build 7. Gutter marker reappears Same thing happens with the ITD method and ITD constructor.</description>
    <commit commitTime="2009-06-16 20:16:41" id="ac052835d1e3895df17724a67c32c750d8887a54"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="280383" reportTime="2009-06-15 23:56:00">
    <summary>[itd] [handles] Fully qualified ITD constructor handles</summary>
    <description>Fully qualified handles for constructors have a '.', but should have a '_'. For example: public aspect AnAspect { f.AClass.new { this ; } } AspectJ's handle is: =IncrBuilds/src&amp;lt;g*AnAspect.aj}AnAspect f.AClass.f.AClass_new but it should be: =IncrBuilds/src&amp;lt;g*AnAspect.aj}AnAspect f.AClass.f_AClass_new notice the last second to last '.' in the AJ handle The reason why it should be the bottom one is that this is what org.aspectj.ajdt.internal.compiler.ast.InterTypeDeclaration.getDeclaredSelector returns. More precisely, AJDT builds its handle using that method and the method returns "f_AClass_new", not "f.AClass_new".</description>
    <commit commitTime="2009-06-16 22:09:28" id="77c6f9ea8336bdf624a56365c595cc4bee87789c"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="280651" reportTime="2009-06-17 13:46:00">
    <summary>Faulting in aspects broken for @DeclareMixin</summary>
    <description>Reported on the list by Tom Dunstan. @Aspect public class MixinAspect { @DeclareMixin value = "test.Foo" public static Runnable foo Object target { return new DebugDefault ; } public static class DebugDefault implements Runnable { public void run { System.out.println "Hi there from MixinAspect" ; } } } package test; public class Foo { public static void main String[] args { System.out.println Arrays.toString new Foo .getClass .getInterfaces ; Runnable new Foo .run ; } } MixinAspect is in one project, the Foo type is in another with an aspectpath dependency on the MixinAspect project. NPE: java.lang.NullPointerException at org.aspectj.asm.internal.ProgramElement.addChild ProgramElement.java:398 at org.aspectj.weaver.model.AsmRelationshipProvider.addChildNodes AsmRelationshipProvider.java:611 at org.aspectj.weaver.model.AsmRelationshipProvider.createHierarchy AsmRelationshipProvider.java:425 at org.aspectj.weaver.model.AsmRelationshipProvider.addRelationship AsmRelationshipProvider.java:121 at org.aspectj.weaver.bcel.B ... OKEINTERFACE java.lang.Runnable.run V reason is that the code in AsmRelationshipProvider.createIntertypeDeclaredChild is encountering a MethodDelegateTypeMunger.</description>
    <commit commitTime="2009-06-17 18:30:32" id="3aed1befd9231ef3f77f450300896e8437385a7f"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/model/AsmRelationshipProvider.java</file>
    </fixedFiles>
  </bug>
  <bug id="280676" reportTime="2009-06-17 17:12:00">
    <summary>incremental generic itd problems</summary>
    <description>Playing around with incremental builds of generic ITDs. java.lang.NullPointerException at org.aspectj.weaver.NewFieldTypeMunger.equals NewFieldTypeMunger.java:109 at org.aspectj.weaver.ConcreteTypeMunger.equivalentTo ConcreteTypeMunger.java:45 at org.aspectj.weaver.CrosscuttingMembers.replaceWith CrosscuttingMembers.java:366 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect CrosscuttingMembersSet.java:79 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addCr ... oBuildJob.run AutoBuildJob.java:238 at org.eclipse.core.internal.jobs.Worker.run Worker.java:55 when I modified a declaration from: int A&amp;lt;X,Y&amp;gt;.i; to int A.i;</description>
    <commit commitTime="2009-06-17 21:25:05" id="f64c442ec64b878086171722c066ebd648a95977"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="280783" reportTime="2009-06-18 10:48:00">
    <summary>JavaDocRunner fails on System.setSecurityManager in Netbeans</summary>
    <description>Attempting to use the ajdoc ant task in Netbeans 6.7. The JavaDocRunner attempts to set the SecurityManager and this is prevented by Netbeans. Below is the ant stacktrace printed to the Netbeans output window. I can run the ant task from the command line with no errors. Only in the context of Netbeans does it fail. I think the JavaDocRunner should run with whatever SecurityManager is in place and allow errors from executing javadoc to occur. Attached is a patch file removing the anonymous SecurityManager and calls to System.setSecurityManager . init: &amp;gt; Calling ajc... &amp;gt; Building signature files... &amp;gt; Calling javadoc... An internal error occured in ajdoc If this has not already been logged as a bug raised please raise a new AspectJ bug at https://bugs.eclipse.org/bugs including the text below. To make the bug a priority, please also include a test program that can reproduce this problem. java.lang.SecurityException java.lang.SecurityException at org.netbeans.TopSecurityManager.checkSetSecurityManager TopSecurityManager.java:431 at org.netbeans.TopSecurityManager.checkPermission TopSecurityManager.java:365 at java.lang.System.setSecurityManager0 System.java:273 at java.lang.System.setSecurityManager System.java:264 at org.aspectj.tools.ajdoc.JavadocRunner.callJavadoc JavadocRunner.java:43 at org.aspectj.tools.ajdoc.Main.callJavadoc Main.java:277 at org.aspectj.tools.ajdoc.Main.main Main.java:156 at org.aspectj.tools.ant.taskdefs.Ajdoc.compile Ajdoc.java:710 at org.aspectj.tools.ant.taskdefs.Ajdoc.execute Ajdoc.java:697 at org.apache.tools.ant.UnknownElement.execute UnknownElement.java:288 at sun.reflect.GeneratedMethodAccessor131.invoke Unknown Source at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.apache.tools.ant.dispatch.DispatchUtils.execute DispatchUtils.java:106 at org.apache.tools.ant.Task.perform Task.java:348 at org.apache.tools.ant.Target.execute Target.java:357 at org.apache.tools.ant.Target.performTasks Target.java:385 at org.apache.tools.ant.Project.executeSortedTargets Project.java:1337 at org.apache.tools.ant.Project.executeTarget Project.java:1306 at org.apache.tools.ant.helper.DefaultExecutor.executeTargets DefaultExecutor.java:41 at org.apache.tools.ant.Project.executeTargets Project.java:1189 at org.apache.tools.ant.module.bridge.impl.BridgeImpl.run BridgeImpl.java:278 at org.apache.tools.ant.module.run.TargetExecutor.run TargetExecutor.java:497 at org.netbeans.core.execution.RunClassThread.run RunClassThread.java:151 org.netbeans.core.execution.ExitSecurityException: Exit from within execution engine, normal at org.netbeans.core.execution.SecMan.checkExitImpl SecMan.java:85 at org.netbeans.core.execution.SecMan$PrivilegedCheck.run SecMan.java:160 at java.security.AccessController.doPrivileged Native Method at org.netbeans.core.execution.SecMan$PrivilegedCheck.check SecMan.java:175 at org.netbeans.core.execution.SecMan$PrivilegedCheck.checkExit SecMan.java:170 at org.netbeans.core.execution.SecMan.checkExit SecMan.java:69 at org.netbeans.TopSecurityManager.checkExit TopSecurityManager.java:149 at java.lang.Runtime.exit Runtime.java:88 at java.lang.System.exit System.java:906 at org.aspectj.tools.ajdoc.Main.exit Main.java:765 at org.aspectj.tools.ajdoc.Main.main Main.java:163 at org.aspectj.tools.ant.taskdefs.Ajdoc.compile Ajdoc.java:710 at org.aspectj.tools.ant.taskdefs.Ajdoc.execute Ajdoc.java:697 at org.apache.tools.ant.UnknownElement.execute UnknownElement.java:288 at sun.reflect.GeneratedMethodAccessor131.invoke Unknown Source at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.apache.tools.ant.dispatch.DispatchUtils.execute DispatchUtils.java:106 at org.apache.tools.ant.Task.perform Task.java:348 at org.apache.tools.ant.Target.execute Target.java:357 at org.apache.tools.ant.Target.performTasks Target.java:385 at org.apache.tools.ant.Project.executeSortedTargets Project.java:1337 at org.apache.tools.ant.Project.executeTarget Project.java:1306 at org.apache.tools.ant.helper.DefaultExecutor.executeTargets DefaultExecutor.java:41 at org.apache.tools.ant.Project.executeTargets Project.java:1189 at org.apache.tools.ant.module.bridge.impl.BridgeImpl.run BridgeImpl.java:278 at org.apache.tools.ant.module.run.TargetExecutor.run TargetExecutor.java:497 at org.netbeans.core.execution.RunClassThread.run RunClassThread.java:151 BUILD FAILED total time: 3 seconds</description>
    <commit commitTime="2009-06-18 18:37:30" id="59d5c3bcd7c045c55826f1b62576ffa05321626f"/>
    <fixedFiles>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/JavadocRunner.java</file>
    </fixedFiles>
  </bug>
  <bug id="281654" reportTime="2009-06-26 08:54:00">
    <summary>Concurrency issue with patch</summary>
    <description>Stacktrace when running aspectj with spring in a highly concurrent environment. The following patch includes one failing test zip file, unpack in org.aspectj\modules\bcel-builder folder . The patch should be applied from within the testsrc folder. The patch has been stresstested in the same concurrent environment and fixes the problem. Please also add the failing test that works after applying the patch to your codebase. Note: I am not fluent in how aspectj should build or not build. When I tried rebuilding from the "build" folder, it did not actually pick up the revised class files. I ran "find . -name Non*class | xargs rm" from the "modules" folder before building and surprisingly there were no classfiles after the build. I manually patched the jarfile with revised class files to do a live test, and it works. I assume you have better udnerstanding of how the build system actually works.</description>
    <commit commitTime="2009-09-04 18:42:08" id="0e2043d0f6ed939e360c78767d9f6e330cc77340"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/util/NonCachingClassLoaderRepository.java</file>
      <file>bcel-builder/testsrc/org/aspectj/apache/bcel/classfile/tests/AllTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="282299" reportTime="2009-07-02 11:11:00">
    <summary>[generics] [itds] While using intertype declaration, generic method inheritance cause compilation error</summary>
    <description>In the following case, the method which is inherited from super-class/super-interfact and has generic type parameter s is not recognized by the compiler or is not inherited from its super-class/super-interfact at all. This is an issue for AspectJ 1.6.4 and 1.6.5, but not for 1.6.2 and 1.6.3. == == == [INFO] Compiler errors : error at public class Target ^^^^^ \Tests\itd-generic-type\src\main\java\aspectj\test\Target.java:3:0::0 The type aspectj.test.Target must implement the inherited abstract method aspectj.test.Accessor.set Ljava/lang/String;Ljava/lang/Object; see also: \Tests\itd-generic-type\src\main\java\aspectj\test\Accessor.java:7::0 see also: \Tests\itd-generic-type\src\main\java\aspectj\test\TargetEnhancer.aj:5::0 == == == public interface Accessor&amp;lt;V&amp;gt; { V get String key ; void set String key, V value ; } public class AccessorImpl&amp;lt;V&amp;gt; implements Accessor&amp;lt;V&amp;gt; { public V get String key { System.out.println "Calling get .. " ; return null; } public void set String key, V value { System.out.println "Calling set .. " ; } } public class Target { } public aspect TargetEnhancer { declare parents: Target extends AccessorImpl&amp;lt;String&amp;gt;; }</description>
    <commit commitTime="2009-07-27 22:00:21" id="1f118ad52bfe5405ca913f210634996f715adc06"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc166/Ajc166Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="282379" reportTime="2009-07-03 10:12:00">
    <summary>[plan] spaces in file names causes AspectJ weaver to fail</summary>
    <description>The WeavingAdaptor requires the aspect path to be composed by URLs. The URL of a file is encoded, for example if it contains spaces they will be represented with %20. It then converts these file:// urls to simple string paths, and then tries to access files pointed by those paths. This is done inside the FileUtil.makeClasspath URL[] . This method uses URL.getPath to obtain the path. But this method does not decode the string, it returns it as it is in the URL. When later this string is used to create a new File instance, that file contains an invalid path, and the weaver fails as follows : Caused by: org.aspectj.bridge.AbortException: bad aspect library: '/home/sym/path%20with%20space/aspect-library.jar' at org.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHolder.handleMessage WeavingAdaptor.java:624 at org.aspectj.bridge.MessageUtil.error MessageUtil.java:80 at org.aspectj.weaver.tools.WeavingAdaptor.error WeavingAdaptor.java:504 at org.aspectj.weaver.tools.WeavingAdaptor.addAspectLibrary WeavingAdaptor.java:472 at org.aspectj.weaver.tools.WeavingAdaptor.registerAspectLibraries WeavingAdaptor.java:447 at org.aspectj.weaver.tools.WeavingAdaptor.init WeavingAdaptor.java:177 at org.aspectj.weaver.tools.WeavingAdaptor.&amp;lt;init&amp;gt; WeavingAdaptor.java:112 This issue is quite important, because on older windows "Documents and Settings" is an unfortunately common path, for example Maven stores there its repository. Multiple solutions are possible for this simple bug, in order of impact : - Decode the string obtained by URL.getPath using URLEncoder.decode - Use Files instead of Strings and let Java handle the URL, using the File URI constructor - Don't assume that aspect libraries are files, and hence that urls are file url, and use URLConnection to fetch aspect library contents.</description>
    <commit commitTime="2011-02-05 21:29:00" id="5648105b8450a0f0121bd49b65eae21eb135398f"/>
    <fixedFiles>
      <file>util/src/org/aspectj/util/FileUtil.java</file>
    </fixedFiles>
  </bug>
  <bug id="283657" reportTime="2009-07-16 00:55:00">
    <summary>[plan] [refactoring] Push-in refactoring does not work if a field and a method of the same name are presented</summary>
    <description>Build ID: 2.0.0.e34x-20090623-1400 Steps To Reproduce: If an ITD contains a field and a method with the same name, the method will be ignored and gets lost during push-in refactoring: //the field @javax.persistence.PersistenceContext transient javax.persistence.EntityManager MyObject.entityManager; //the method public static javax.persistence.EntityManager MyObject.entityManager { ... } AJDT should be able to push in both, the field and the method - even if both have the same name. This can be easily reproduced with any Spring Roo sample script see entitiyManager field and method in the MyObject_Roo_Entity.aj .</description>
    <commit commitTime="2009-07-17 21:29:55" id="75cab96794087e91322e8a575ce7c628f95fb3ca"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/internal/JDTLikeHandleProvider.java</file>
    </fixedFiles>
  </bug>
  <bug id="284771" reportTime="2009-07-27 11:41:00">
    <summary>incorrect weaving information shown in cross reference view and editor</summary>
    <description>Created attachment 142672 [details] demo project and screenshot Build ID: 20090621-0832 Steps To Reproduce: 1. create a class with a method to be adviced 2. create an aspect with advice to intercept the method created in step 1 body referencing 'thisJoinPoint' e.g. System.out.println thisJoinPoint 3. build project and check the cross reference views and editor gutter marker pop-up information. ***the information shown in incorrect in cross reference view and editor gutter More information: a eclipse project to demo the problem and 2 screenshots s1.jpg and s1.jpg are attached software info: eclipse: 3.5 AJDT: 2.0 JDK: sun jdk 1.6 update 14</description>
    <commit commitTime="2009-07-27 17:27:23" id="7b0a1866168d9d477db641376929c92053b3a37d"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="284862" reportTime="2009-07-28 09:48:00">
    <summary>NPE in EclipseResolvedMember.getEclipseAnnotation when duplicate entries on classpath?</summary>
    <description>Build ID: 20090619-0625 Steps To Reproduce: I don't have clear steps to reproduce this, but it happens to me quite often doing what follows. 1. Create a Maven project 2. Add the source folder of one of the maven dependencies as a linked folder. 3. Configure the linked folder to have a different output folder. 4. Play a bit with that folder for example, move it up or down the list of the java build path There is no need for it to be a Maven project, I suppose it is the same with any other binary dependency. Occasionaly, AJDT will throw : java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.lookup.EclipseResolvedMember.getEclipseAnnotations EclipseResolvedMember.java:206 at org.aspectj.ajdt.internal.compiler.lookup.EclipseResolvedMember.getAnnotationTypes EclipseResolvedMember.java:156 at org.aspectj.ajdt.internal.compiler.lookup.EclipseResolvedMember.hasAnnotation EclipseResolvedMember.java:74 at org.aspectj.weaver.JoinPointSignature.hasAnnotation JoinPointSignature.java:83 More information: I suppose, but I might be wrong, that AJDT/AspectJ pick the wrong class. For example, maybe it searches for the binary unresolved version of it while it needed the source one. This would also explain why moving the source folder up or down the list helps causing/solving this problem, it could be that the resolver finds the right class source version or binary one depending on the order they are presented. In fact, debugging at the exception point, it seems like everything is fine, except that the method TypeDeclaration.declarationOf MethodBinding realBinding return null, cause in fact the methods[] inside it have no binding are all null so no matching method is found. "hard cleaning" i.e. rm -fR * the output folders resolves the problem, probably cause it forces AJDT to rebuild everything and re-resolving all the bindings.</description>
    <commit commitTime="2009-08-10 18:13:36" id="aa46c1d72c1218a318087e1b93ec430af02b3a84"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc166/Ajc166Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="285172" reportTime="2009-07-30 11:00:00">
    <summary>Sometimes when load-time weaving there will be two ReferenceType objects for the same type</summary>
    <description>Seen by Ramnivas. A pointcut uses an exact type name for an annotation execution * @Controller *..* .* .. Resolving this pointcut causes us to construct a ReferenceType for 'Controller'. Then we attempt to populate it by loading the class implementation. This recurses back into the weaver as Controller is loaded and an attempt is made to weave it. This takes a second route through the weaver to build a referencetype again and this second referencetype is cached in the world. When we unwind, we continue building the original referencetype and are left with one in the cache and the one resolved for the pointcut. Due to the use of == for comparison, we fail to match on join points later because they will use the ReferenceType from the cache.</description>
    <commit commitTime="2009-07-30 15:29:40" id="dd7d87923f6f8e6ccdc3e387679ba5a3c70550ac"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/World.java</file>
    </fixedFiles>
  </bug>
  <bug id="286341" reportTime="2009-08-11 17:15:00">
    <summary>Incremental build failure: the parameter is not bound in [all branches of] pointcut</summary>
    <description>Eclipse 3.5 and AJDT 2.0.1.e35x-20090717-0900 / aspectj 1.6.5.20090618034232 Project organization is as follows: Bundle A contains a bunch of interfaces - In this case that would be 'somepackage.Behavior' Bundle B contains my aspect and references the interfaces exported by Bundle A - See details below Bundle C contains a class the code the pointcut matches Here is an approximation of my pointcut: @Pointcut "if &amp;amp;&amp;amp; call public * somepackage.Behavior.* .. &amp;amp;&amp;amp; target b " public static boolean adviseIfMonitoring Behavior b { return true; } Ditto the advice: @Around "adviseIfMonitoring b " public Object monitorBehaviorPerformance ProceedingJoinPoint pjp, Behavior b throws Throwable { return pjp.proceed ; } Bundles C has an ajnature added and has Bundle B [project] added to its aspectpath. Following a clean build everything seems fine. The compiled code has the aspect woven and the IDE highlights the application of the advice at the correct joinpoints in Bundle C. However, if I make any change to a class in Bundle C, specifically the class for which the advice is applied to, I get a compilation error from the aspect in Bundle B: "the parameter pjp is not bound in [all branches of] pointcut." If I clean Bundle B the problem is resolved and everything works again. The problem *appears* to be related to the use of the target b portion of the pointcut in conjunction with incremental compilation. Any suggestions other than 'Don't do that'? Thanks in advance, Jonathan</description>
    <commit commitTime="2009-09-05 01:46:06" id="444960d934b528b00f3d7959aa43b4477cf1f1ae"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="286375" reportTime="2009-08-12 06:25:00">
    <summary>NullPointerException at org.aspectj.weaver.ReferenceType.getTypeVariables ReferenceType.java:738</summary>
    <description>java.lang.NullPointerException at org.aspectj.weaver.ReferenceType.getTypeVariables ReferenceType.java:738 at org.aspectj.weaver.bcel.BcelGenericSignatureToTypeXConverter.fixUpCircularDependencies BcelGenericSignatureToTypeXConverter.java:221 at org.aspectj.weaver.bcel.BcelGenericSignatureToTypeXConverter.classTypeSignature2TypeX BcelGenericSignatureToTypeXConverter.java:42 at org.aspectj.weaver.bcel.BcelObjectType.ensureGenericSignat ... oBuildJob.run AutoBuildJob.java:238 at org.eclipse.core.internal.jobs.Worker.run Worker.java:55 Compile error: NullPointerException thrown: null</description>
    <commit commitTime="2009-09-04 20:51:51" id="f1b0ee3c34a90a0db0feb812139684b5fd132a1a"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc166/Ajc166Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="286539" reportTime="2009-08-13 11:42:00">
    <summary>more state in declare anno</summary>
    <description/>
    <commit commitTime="2009-08-13 17:29:08" id="476538d776e653badae0de87c14a6030b338ea7d"/>
    <fixedFiles>
      <file>bridge/src/org/aspectj/bridge/SourceLocation.java</file>
    </fixedFiles>
  </bug>
  <bug id="287315" reportTime="2009-08-21 11:30:00">
    <summary>NPE using declare @type</summary>
    <description>reported by Ramnivas: java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelObjectType.hasAnnotation BcelObjectType.java:558 at org.aspectj.weaver.ReferenceType.hasAnnotation ReferenceType.java:161 at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches ExactAnnotationTypePattern.java:101 at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches ExactAnnotationTypePattern.java:94 at org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern.matchesExactly TypePattern.java:513 at org.aspectj.weaver.patterns.TypePattern.matchesStatically TypePattern.java:129 at org.aspectj.weaver.patterns.DeclareAnnotation.matches DeclareAnnotation.java:269 at org.aspectj.weaver.bcel.BcelWeaver.applyDeclareAtType BcelWeaver.java:1590</description>
    <commit commitTime="2009-08-24 18:07:09" id="b6649690748b44544a361e39510a10e0bf83ca46"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
    </fixedFiles>
  </bug>
  <bug id="288049" reportTime="2009-08-30 08:14:00">
    <summary>Declare @method fails on subclasses with "method does not exist" error</summary>
    <description>User-Agent: Mozilla/5.0 X11; U; Linux i686; en-US; rv:1.9.0.5 Gecko/2009010218 Gentoo Firefox/3.0.5 Build Identifier: 20090619-0625 BcelClassWeaver has a method checkUnusedDeclareAtTypes that should check if a declare @xxx goes unused. This method reports error in some situations where the declare is perfectly legal and applied. For example : declare @method: public String MyClass+.a* .. : @Deprecated; Will give error if there is a method named "aSomething" in a subclass of MyClass. Looking at the code, it seems like it avoids performing this check unless the declare has an exact pattern. In fact it checks : - If the declaration uses an ExactTypePattern AND - If the delcaration is NOT any - OR if the declaration is on a constructor MyClass+.a* .. , that should not be tested, is in fact tested because : - It is not an exact type the typePattern is null which is right - It is not an ANY "a*" is not any, "*" would be any - It is not a constructor I think a "isWithWildcard" is missing, as an alternative to isAny, that should return true if starCount &amp;gt; 0, and should be used in this check. Changing the type pattern in a way that eludes the check makes the problem go away, for example : public String org.tests.M*Class.a* .. // declA.getSignaturePattern .getDeclaringType instanceof ExactTypePattern becomes false public String MyClass.* .. // declA.getSignaturePattern .getName .isAny becomes true Reproducible: Always Steps to Reproduce: 1. Unzip the given test project 2. ajc or ltw 3. Look at the error "The method org.tests.MyClass+a* .. does not exist". Since annotation introduction is gaining quite an important role for AspectJ, I feel like this is a major bug.</description>
    <commit commitTime="2009-09-08 20:58:00" id="b7c2c83e419e9db51130e169acade68a7d0d0599"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="288064" reportTime="2009-08-30 18:37:00">
    <summary>Outer class name resolution fix</summary>
    <description>User-Agent: Mozilla/5.0 X11; U; Linux x86_64; en-US; rv:1.9.0.13 Gecko/2009080315 Ubuntu/9.04 jaunty Firefox/3.0.13 Build Identifier: A patch for "weaver" that allows finding outer class from inner class when inner class name does not follow javac name mangling convention for example because it's produced by scalac . Reproducible: Always</description>
    <commit commitTime="2009-10-08 21:29:00" id="a36fdb2e631cedbc42ef1ad00a712900dc1d38c1"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/AllTests16.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc166/AllTestsAspectJ166.java</file>
    </fixedFiles>
  </bug>
  <bug id="288198" reportTime="2009-08-31 21:09:00">
    <summary>LangUtils JVM version detection cannot handle Java 7</summary>
    <description>User-Agent: Mozilla/5.0 Macintosh; U; Intel Mac OS X 10.5; en-GB; rv:1.9.1.2 Gecko/20090729 Firefox/3.5.2 Build Identifier: 1.6.4 The JVM detection in LangUtils is currently unable to handle Java7, whilst this is naturally an unreleased version of the JVM, the fix is trivial. Reproducible: Always Steps to Reproduce: Attempt to use the LangUtils java version support on java7</description>
    <commit commitTime="2009-09-04 16:36:07" id="b29f8393e988bbfb4db28c5051bf036ef6551aa2"/>
    <fixedFiles>
      <file>util/src/org/aspectj/util/LangUtil.java</file>
    </fixedFiles>
  </bug>
  <bug id="288505" reportTime="2009-09-03 12:17:00">
    <summary>failure to close inputstream</summary>
    <description/>
    <commit commitTime="2009-09-03 16:21:37" id="3d3d03b2898a16658e281583d3912b24db1c0ac1"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/Lint.java</file>
    </fixedFiles>
  </bug>
  <bug id="288635" reportTime="2009-09-04 09:07:00">
    <summary>[itds] AJDT exception and LTW misbehavior when using ITD methods and declare @method</summary>
    <description>User-Agent: Mozilla/5.0 X11; U; Linux i686; en-US; rv:1.9.0.5 Gecko/2009010218 Gentoo Firefox/3.0.5 Build Identifier: 20090619-0625 AspectJ 1.6.5 I'm trying to trace some method execution. I have an aspect that advice all methods having a @Traced annotation, and retrieves the annotation to know which log level that method is. Then I have an aspect declaring @method on some method patterns. This pattern also matches some ITD methods. This scenario in the attached test project causes a the following stacktrace when compiling in AJDT : java.lang.ClassCastException: org.aspectj.ajdt.internal.compiler.lookup.EclipseTypeMunger cannot be cast to org.aspectj.weaver.bcel.BcelTypeMunger at org.aspectj.weaver.bcel.BcelShadow.getAnnotations BcelShadow.java:1457 at org.aspectj.weaver.bcel.BcelShadow.initializeKindedAnnotationVars BcelShadow.java:1540 at org.aspectj.weaver.bcel.BcelShadow.getKindedAnnotationVar BcelShadow.java:919 at org.aspectj.weaver.patterns.AnnotationPointcut.findResidueInternal AnnotationPointcut.java:219 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java:269 at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal AndPointcut.java:94 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java:269 at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal AndPointcut.java:94 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java:269 at org.aspectj.weaver.bcel.BcelAdvice.specializeOn BcelAdvice.java:173 at org.aspectj.weaver.bcel.BcelShadow.prepareForMungers BcelShadow.java:341 at org.aspectj.weaver.Shadow.implement Shadow.java:526 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:3042 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:495 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:103 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1749 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1710 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1472 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1258 Otherwise, running LTW, it works, but with a strange side effect. The tracing aspect has the following syntax : before Traced t : execution @Traced * *.* .. &amp;amp;&amp;amp; @annotation t { .... } On ITD methods "t" is null. In fact, debugging it and asking java reflection, the annotation is not there there is only an AspectJ ITD annotation , but in that case the aspect should not have been weaved in first place. Reproducible: Always Steps to Reproduce: 1. Unzip the attached project 2. Clean/build it with AJDT to see the stacktrace 3. Run it with LTW even from inside Eclipse to see the null annotation Shadows and mungers are not yet clear to me, but it seems like BcelShadow is trying to cast to BcelTypeMunger but finds an EclipseTypeMunger for our ITD "[ EclipseTypeMunger ResolvedTypeMunger Method, int org.tests.atann.TestClass.doAnother ]" . Since all the methods called on the type munger getMunger and getAspectType are declared in ConcreteTypeMunger, may it be that a cast to ConcreteTypeMunger is enough?</description>
    <commit commitTime="2009-09-04 17:39:50" id="b58e76c68d96811cbe9b1d4f8c0e245a81d66e5a"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc166/Ajc166Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="288712" reportTime="2009-09-06 13:07:00">
    <summary>java.lang.VerifyError with @AspectJ: Incompatible argument to function</summary>
    <description>Created attachment 146578 [details] Eclipse project AJDT 2.0 with the code that produces the error The small Eclipse project I send in attachment produces a java.lang.VerifyError. It contains a class named "Main" that has a main method which can be run. If you run it, you'll see the exception. The aspect responsible by the error is: ========================================================================= ========================================================================= ========================================================================= ========================================================================= package answers; import org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.annotation.*; import figures.*; import java.awt.Rectangle; @Aspect public class Answer2h { @Pointcut "call public void figures.FigureElement+.move" + " int, int &amp;amp;&amp;amp; target fe &amp;amp;&amp;amp; args dx, dy " void movingFigureElement FigureElement fe, int dx, int dy {} @Around "movingFigureElement fe, dx, dy " public void checkIfBoundsMovedSame ProceedingJoinPoint thisJoinPoint, FigureElement fe, int dx, int dy throws Throwable { Rectangle rectangleBefore = new Rectangle fe.getBounds ; thisJoinPoint.proceed new Object[]{fe, dx, dy} ; rectangleBefore.translate dx, dy ; if !rectangleBefore.equals fe.getBounds throw new IllegalStateException "move invariant violation" ; // IF THE THREE LINES BELOW ARE UN-COMMENTED, THE EXCEPTION // ISN'T THROWN!? // Note: The three lines can be located anywhere inside the advice. // for Object o: thisJoinPoint.getArgs { // System.out.print o+" " ; // } } } ========================================================================= ========================================================================= ========================================================================= ========================================================================= Note: If I use the "execution" PCD instead of "call", this exception isn't thrown.</description>
    <commit commitTime="2009-09-08 18:46:54" id="1ef6b1decae19efe6de321eec4d533538bce940b"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc166/Ajc166Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="289816" reportTime="2009-09-18 04:23:00">
    <summary>Potentially unclosed stream in org.aspectj.weaver.bcel.BcelWorld</summary>
    <description>Created attachment 147526 [details] Eclipse workspace patch that closes the stream correctly In method lookupJavaClass , one has to close a stream used by ClassParser. This should be done in a finally block, since parse may fail and throw an IOException. Right now, the stream is left open in that case. A path to correctly close the stream is attached.</description>
    <commit commitTime="2009-09-18 23:05:59" id="67ffda8e2f53058f6e41336f5204541e912ca9e2"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
    </fixedFiles>
  </bug>
  <bug id="289818" reportTime="2009-09-18 04:31:00">
    <summary>Unclosed stream in org.aspectj.weaver.bcel.ExtensibleURLClassLoader</summary>
    <description>Created attachment 147527 [details] Eclipse workspace patch that closes the stream The method getBytes gets a fresh stream from ClassFile and should close it after using it. Right now, the stream is left open. A patch is attached that closes the stream.</description>
    <commit commitTime="2009-09-18 23:07:29" id="4d200d1ffd09f64825f908979a3d7af0f3cb63a9"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/ExtensibleURLClassLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="290227" reportTime="2009-09-23 05:06:00">
    <summary>NPE when using @AspectJ classes compiled with javac at ReferencePointcut.java:356</summary>
    <description>User-Agent: Mozilla/5.0 X11; U; Linux i686; en-US; rv:1.9.0.14 Gecko/2009090216 Ubuntu/9.04 jaunty Firefox/3.0.14 Build Identifier: 1.6.5 When I compile my aspects defined with the annotations-based approach aka @AspectJ with javac and then use ajc to weave statically them into some classes then ajc fails with NullPointerException at org.aspectj.weaver.patterns.ReferencePointcut.concretize1 ReferencePointcut.java:356 Since the aspects are normal .java files with special annotations then I don't see the reason why I couldn't compile them with javac. And even if there is a reason to require their compilation with ajc, it should throw a meaningful and helpful error instead of NPE e.g. "May be the aspect classes have been compiled with javac instead of ajc as required, recompile them with ajc." . I'll attach a zip file that demonstrates the issue, see the steps to reproduce. Using AspectJ 1.6.5 Reproducible: Always Steps to Reproduce: 1.Unzip the attached aspectj-issue-demonstration.zip to /tmp 2 enter into the created /tmp/aspectj 3. Optional re-compile the aspect classes located in /tmp/aspectj/aspects/ by executing the provided javac.sh; or you may use those already present at javac_build/ 3.Run ajc using the provided ajc.sh 4.Ajc will fail with the error stored in ajc.log.</description>
    <commit commitTime="2009-09-23 16:03:49" id="237604e31504b5da74448fc9e3c389bd998640aa"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc166/Ajc166Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="290741" reportTime="2009-09-28 15:39:00">
    <summary>Workspace encoding is ignored</summary>
    <description>User-Agent: Mozilla/5.0 Macintosh; U; Intel Mac OS X 10.6; de; rv:1.9.1.3 Gecko/20090824 Firefox/3.5.3 Build Identifier: M20090917-0800 I have a workspace with UTF-8 as default encoding. And I have a normal Java project which some string constants using this encoding. When I start the JUnit tests which rely on the correct encoding they are green. But when I convert the project into an AspectJ project and start the JUnit tests again, they fail. Could it be that the AspectJ compiler ignores the encoding settings in the workspace? With Linux this problem does not appear but there the OS enviroment uses UTF-8 as default encoding. Reproducible: Always Steps to Reproduce: 1. Switch the text file encoding in the preferences to "UTF-8" General &amp;gt; Workspace &amp;gt; Text file encoding 2. Import the attached Java project 3. Start the JUnit tests should be ok 4. Convert to AspectJ Project 5. Start the JUnit tests again now one test will fail</description>
    <commit commitTime="2011-04-04 18:16:37" id="aa9173848323f62db93ba2b011468f5c148cc82f"/>
    <fixedFiles>
      <file>ajbrowser/src/org/aspectj/tools/ajbrowser/core/BrowserCompilerConfiguration.java</file>
    </fixedFiles>
  </bug>
  <bug id="291523" reportTime="2009-10-06 14:33:00">
    <summary>For SPR-5307: adjust wild annotation patterns during resolve</summary>
    <description/>
    <commit commitTime="2009-10-06 21:07:17" id="8808125e1f90ef9c7ca813858d291ecb973d651d"/>
    <fixedFiles>
      <file>weaver/testsrc/org/aspectj/weaver/patterns/AnnotationPatternTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="292069" reportTime="2009-10-12 14:00:00">
    <summary>performance poor for call &amp;&amp; this</summary>
    <description/>
    <commit commitTime="2009-10-13 13:21:01" id="9def160bb51220f4079cbe69d35f131f0fe7ff6b"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/PointcutEvaluationExpenseComparator.java</file>
    </fixedFiles>
  </bug>
  <bug id="292239" reportTime="2009-10-14 07:16:00">
    <summary>Method in pointcut not advised by after throwing</summary>
    <description>Created attachment 149513 [details] Amalgam of files to test aspectj advice. after Object o throwing ExceptionType e ... { ... } on a pointcut that matches methods with no throws clauses will not advise those methods when the ExceptionType is a checked exception. This, I believe, is an optimisation. However, it is perfectly possible that ExecptionType is checked but subclasses of ExceptionType are not. The prototypical example, is Exception. If throwing Exception e is part of the advice, then methods that do not declare throws types are NOT advised, even though they can validly throw for example RuntimeException. The RuntimeExceptions are therefore not caught by the after advice. The workaround is to specify throwing Throwable t and for the advice to filter out Exception exceptions. Since Throwable is not checked, this advises all methods whether they declare throws or not. I expect the after Object o throwing ExceptionType e {} to advise all methods in the pointcut that may possibly issue an exception that would be caught by catch ExceptionType e -- this includes subclasses of ExceptionType which may not be checked. Example attached. [I do not think this problem is operating system specific.]</description>
    <commit commitTime="2011-03-23 16:22:44" id="0ff946aff9ce150707a375437fe7270a5095792f"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/AllTests16.java</file>
    </fixedFiles>
  </bug>
  <bug id="292264" reportTime="2009-10-14 10:07:00">
    <summary>Enhance declare error to support type patterns</summary>
    <description>User-Agent: Mozilla/5.0 Macintosh; U; Intel Mac OS X 10.6; en-US; rv:1.9.1.3 Gecko/20090824 Firefox/3.5.3 Build Identifier: Currently, declare error only accepts a pointcut expression. It would be nice if it also accepted a type pattern. For example: declare error: @Endable * &amp;amp;&amp;amp; !hasmethod protected * end Date : "no protected end Date method"; It's kind of like compile-time enforcement of interface methods, only I want it to support non-public methods. See mailing list post: http://www.nabble.com/declare-error---type-pattern--to25619498.html#a25619498 Reproducible: Always</description>
    <commit commitTime="2010-04-05 22:23:55" id="70eb59751815d16feddae8207b68d112f07623e8"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/CrosscuttingMembers.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/World.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/PatternParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="292584" reportTime="2009-10-16 18:02:00">
    <summary>When annotation-style around advice is inlined, abstract methods are called using invokespecial instead of invokevirtual</summary>
    <description>User-Agent: Mozilla/5.0 Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1.3 Gecko/20090824 Firefox/3.5.3 Build Identifier: AspectJ Compiler 1.6.6 - Eclipse Compiler 0.785_R33x, 3.3 An AbstractMethodError is generated when inlined around advice from an abstract annotation-style aspect annotation_style.AbstractAspect in the attached file `test_case.zip' tries to call an abstract method of the aspect getValueReplacement , which has been implemented in a concrete subclass of the aspect annotation_style.ConcreteAspect . This problem does not occur in aspect-style aspects. Disassembling the two AbstractAspect classes shows different instructions used to call the abstract method getValueReplacement : invokespecial in the annotation-style aspect, and invokevirtual in the aspect-style aspect. This bug can be worked around by specifying the -XnoInline compiler option. More information is available in the README file in the attached file `test_case.zip'. Reproducible: Always Steps to Reproduce: 1. Download and extract the attached file `test_case.zip'. 2. At the command line, change to the directory of the extracted files. 3. Run `./run'. 4. To recompile with the -XnoInline compiler option, run `make clean; make AJCFLAGS=-XnoInline'. More information is available in the README file.</description>
    <commit commitTime="2010-01-25 22:47:06" id="d36b87d2f0b22991ffc8d111367fdb7c97943477"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc169/Ajc169Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="293203" reportTime="2009-10-23 13:52:00">
    <summary>variant of execution doesn't match for parameter anno</summary>
    <description>What I'd like to have: Advise executions of methods, which have at least one parameter with a specific annotation say @NN . public void arbitrary Object param1, Object param2, @NN String param3, Object Param4, ... Consider param3 is a String and point1 will apply public pointcut point1 : execution * *.* ..,String,.. ; public pointcut point2 : execution * * ..,@NN String ,*,* ; public pointcut point3 : execution * * *,*,@NN String ,*,* ; public pointcut point4 : execution * * Object,Object,@NN String ,Object,Object ; Now the interesting part here is the pointcut "point1 ", which applies to "arbitrary ... ". Even point2 applies. However the following does not: public pointcut point5 :execution * * ..,@NN String ,.. ; Do I make a mistake by assuming this should work, or do I misunderstand something ?</description>
    <commit commitTime="2009-10-23 18:59:02" id="bccc3395c43335b671d1f060f370e644053fe268"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/TypePatternList.java</file>
    </fixedFiles>
  </bug>
  <bug id="293351" reportTime="2009-10-26 14:19:00">
    <summary>RuntimeException weaving roo app with advice based on execution pointcut</summary>
    <description>java.lang.RuntimeException at org.aspectj.weaver.ResolvedType.getAnnotations ResolvedType.java:718 at org.aspectj.weaver.AbstractAnnotationAJ.retrieveAnnotationOnAnnotation AbstractAnnotationAJ.java:123 at org.aspectj.weaver.AbstractAnnotationAJ.ensureAtTargetInitialized AbstractAnnotationAJ.java:85 at org.aspectj.weaver.AbstractAnnotationAJ.specifiesTarget AbstractAnnotationAJ.java:115 at org.aspectj.weaver.bcel.BcelWeaver.verifyTa ... .eclipse.core.internal.jobs.Worker.run Worker.java:55 Compile error: RuntimeException thrown: ResolvedType.getAnnotations should never be called</description>
    <commit commitTime="2009-10-27 14:04:12" id="a23c7e40904d0c5cd572d6f49a461ae474a0d303"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/MissingResolvedTypeWithKnownSignature.java</file>
    </fixedFiles>
  </bug>
  <bug id="293457" reportTime="2009-10-27 11:24:00">
    <summary>NPE on multiple declare @methods</summary>
    <description>raised on the list: &amp;gt; java.lang.NullPointerException &amp;gt; at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.visit AsmHierarchyBuilder.java:548 &amp;gt; at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse MethodDeclaration.java:214 &amp;gt; at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse TypeDeclaration.java:1246 &amp;gt; at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse Compilatio ... oBuildJob.run AutoBuildJob.java:238 &amp;gt; at org.eclipse.core.internal.jobs.Worker.run Worker.java:55 &amp;gt; &amp;gt; Compile error: NullPointerException thrown: null &amp;gt; &amp;gt; &amp;gt; Here's the aspect I'm using: &amp;gt; &amp;gt; package com.citi.gdos.smart.applib.service.cache; &amp;gt; &amp;gt; import org.springmodules.cache.annotations.Cacheable; &amp;gt; &amp;gt; public aspect CachingIntroduction { &amp;gt; &amp;gt; declare @method: public * *..I*Dao+.set* .. : @Setter; &amp;gt; declare @method: !@Setter public * *..I*Dao+.* .. : &amp;gt; @Cacheable modelId="fooModel" ; &amp;gt; &amp;gt; }</description>
    <commit commitTime="2009-11-19 17:01:09" id="dc53b77e2494a2960423314a0ea7425a6c0eff7d"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc167/Ajc167Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="293620" reportTime="2009-10-28 17:25:00">
    <summary>optimizing method lookup</summary>
    <description>In the old days we used a complex iterator to lookup methods in a type it carefully didn't walk up the hierarchy unless it needed to . It had a big fat bug in it but the complexity around the iterator behaviour made it impossible to work out. Because of the bug we switched to a mode that fetches all the methods then looks through them - this is very expensive. Due to the inclusion of generics in the iterator logic it was now possible to understand what on earth was going on and some bugs were resolved. I'd like to see if we can go back to the iterator model.</description>
    <commit commitTime="2009-11-02 16:50:35" id="11d21a49c805fab5624f5aa5e86714db40f10d52"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/NamePattern.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/ThisOrTargetPointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="294647" reportTime="2009-11-09 13:46:00">
    <summary>NPE in at org.aspectj.weaver.ResolvedType.addPointcutsResolvingConflicts ResolvedType.java:1949</summary>
    <description>raised on the mailing list: java.lang.NullPointerException at org.aspectj.weaver.ResolvedType.addPointcutsResolvingConflicts ResolvedType.java:1949 at org.aspectj.weaver.ResolvedType.getExposedPointcuts ResolvedType.java:1923 at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.checkPointcutDeclarations EclipseSourceType.java:439 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.resolvePointcutDeclarations AjLookupEnvironment.java:466 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:262 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile Compiler.java:616 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:357 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:371 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1003 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:267 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:181 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:355 at org.aspectj.tools.ajc.Main.runMain Main.java:234 at org.codehaus.mojo.aspectj.AbstractAjcCompiler.execute AbstractAjcCompiler.java:372 at org.apache.maven.plugin.DefaultPluginManager.executeMojo DefaultPluginManager.java:447 at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals DefaultLifecycleExecutor.java:539 at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle DefaultLifecycleExecutor.java:480 at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal DefaultLifecycleExecutor.java:459 at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures DefaultLifecycleExecutor.java:311 at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments DefaultLifecycleExecutor.java:278 at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute DefaultLifecycleExecutor.java:143 at org.apache.maven.DefaultMaven.doExecute DefaultMaven.java:333 at org.apache.maven.DefaultMaven.execute DefaultMaven.java:126 at org.apache.maven.cli.MavenCli.main MavenCli.java:282 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.codehaus.classworlds.Launcher.launchEnhanced Launcher.java:315 at org.codehaus.classworlds.Launcher.launch Launcher.java:255 at org.codehaus.classworlds.Launcher.mainWithExitCode Launcher.java:430 at org.codehaus.classworlds.Launcher.main Launcher.java:375 not seen an issue in that bit of code before, wonder what the cause is...</description>
    <commit commitTime="2009-11-18 17:12:23" id="7bcbb38f0147d3796cbc42a970755c1c2e965f28"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java</file>
    </fixedFiles>
  </bug>
  <bug id="296040" reportTime="2009-11-24 13:17:00">
    <summary>IllegalAccessError when compiling with ajc</summary>
    <description>Consider this code, using TreeMultimap from Google Collection : import java.util.Set; import java.util.Map.Entry; import com.google.common.collect.TreeMultimap; public class ErrorClass { public void useGoogleCollections { TreeMultimap&amp;lt;String, String&amp;gt; countResult = TreeMultimap.create ; Set&amp;lt;Entry&amp;lt;String, String&amp;gt;&amp;gt; entries = countResult.entries ; System.out.println entries.size ; } } If compiled with javac, this code runs fine. If compiled with ajc, the bytecode references the class com.google.common.collect.AbstractSetMultimap, wich is package-private. So the call to countResult.entries raises the following exception : java.lang.IllegalAccessError: tried to access class com.google.common.collect.AbstractSetMultimap from class ErrorClass The attached project contains a test to reproduce it. I use maven aspectj plugin, but the problem also happens with AJDT in eclipse. There is no aspect defined in the project. If run without any profile mvn test , javac is used and the test runs fine. If run with the aspectj profile mvn -Paspectj test , ajc is used and the test fails.</description>
    <commit commitTime="2009-11-26 23:20:23" id="80f517ebf71430b6eed15c34a5103d2bf504f5a9"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc167/Ajc167Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="296484" reportTime="2009-11-30 10:34:00">
    <summary>[annotations] performance problem with @annotation x context extraction.</summary>
    <description>User-Agent: Mozilla/5.0 X11; U; Linux i686; en-US; rv:1.9.0.5 Gecko/2009010218 Gentoo Firefox/3.0.5 Build Identifier: 20090619-0625 AspectJ 1.6.6 Thanks to Oliver Hoff for reporting this. When @annotation x is used to extract an annotation in a pointcut, AspectJ weaves the following code : 49: ldc #1; //class tests/SampleProgram 51: ldc #92; //String calc 53: iconst_0 54: anewarray #74; //class java/lang/Class 57: invokevirtual #78; //Method java/lang/Class.getDeclaredMethod: Ljava/lang/String;[Ljava/lang/Class; Ljava/lang/reflect/Method; 60: ldc #71; //class tests/Log 62: invokevirtual #84; //Method java/lang/reflect/Method.getAnnotation: Ljava/lang/Class; Ljava/lang/annotation/Annotation; 65: checkcast #71; //class tests/Log 68: invokevirtual #91; //Method tests/Intercept.ajc$afterReturning$tests_Intercept$2$74fc38c9: Ltests/Log; V Which uses getDeclaredMethod to find the current method. If however the @annotation x is not used, and the annotation is extracted inside the advice using Log log = Log MethodSignature thisJoinPointStaticPart.getSignature .getMethod .getAnnotation Log.class ; this is 10 times faster than the code produced by AspectJ. This makes using @annotation a performance problem, while it could probably be optimized in two ways : - Use thisJoinPointStaticPart to make it a performance-equivalent - Annotation could even be cached and reused, without calling getAnnotation every time, to make it even more efficient. Reproducible: Always Steps to Reproduce: 1. See attached sample project 2. Comment/uncomment the two advices in Intercept.aj</description>
    <commit commitTime="2009-11-30 21:04:08" id="11ff72524df72345f24cc341119cf278808cdc32"/>
    <fixedFiles>
      <file>tests/features161/optimizedAnnotationBinding/CaseFive.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc167/Ajc167Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="296501" reportTime="2009-11-30 13:19:00">
    <summary>support optimized binding for execution join points and annotation string values</summary>
    <description>pointcut p String s : execution * * .. &amp;amp;&amp;amp; @annotation Log s should be possible. Currently it is only supported for enums</description>
    <commit commitTime="2009-11-30 21:04:08" id="11ff72524df72345f24cc341119cf278808cdc32"/>
    <fixedFiles>
      <file>tests/features161/optimizedAnnotationBinding/CaseFive.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc167/Ajc167Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="296533" reportTime="2009-11-30 20:41:00">
    <summary>ajc$inlineAccessMethod on generic abstract aspect leads to java.lang.ClassFormatError: Illegal method name</summary>
    <description>User-Agent: Mozilla/5.0 X11; U; Linux i686; en-US; rv:1.9.0.14 Gecko/2009090216 Ubuntu/9.04 jaunty Firefox/3.0.14 Build Identifier: Build id: 20090621-0832 aspectj 1.6.6 The ajc seems to be generating invalid class method names when it does an inline on methods belonging to a generic abstract aspect. Specifically it appears to include the generic definition with angular brackets in the generated method name itself. Example method name: ajc$inlineAccessMethod$testing_AbstractCache$testing_AbstractCache&amp;lt;Key,Value&amp;gt;$get In my testing the standard java ClassLoaders seem to be able to load such a generated class without issue but class loading inside the Tomcat 6.0.14 container is throwing exception: java.lang.ClassFormatError: Illegal method name "ajc$inlineAccessMethod$testing_AbstractCache$testing_AbstractCache&amp;lt;Key,Value&amp;gt;$get" The angular brackets illegal characters in the generated method name appear to be the source of the classloading issue. I have two simple reproducible test cases if required that demonstrate: 1 Abstract generic aspects that ajc compiles into classes with method names containing angular brackets. 2 A simple test case illustrating the class loading issue in Tomcat and also showing the same Servlet running fine under Jetty . Reproducible: Always</description>
    <commit commitTime="2009-12-01 18:22:23" id="4cfcd37ea6daa646b33c955abd558bdfbe378f1a"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java</file>
    </fixedFiles>
  </bug>
  <bug id="296734" reportTime="2009-12-02 13:41:00">
    <summary>memory issues with the latest AspectJ enhancements</summary>
    <description>Reported on the list. Memory problems even with all the latest magic in AspectJ 1.6.7. See http://dev.eclipse.org/mhonarc/lists/aspectj-users/msg11561.html</description>
    <commit commitTime="2009-12-10 20:03:37" id="1d471f7cfaf166d4321c56b52fe47859e9974441"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
      <file>loadtime/testsrc/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptorTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="297013" reportTime="2009-12-06 04:06:00">
    <summary>Unclosed stream in AjAttribute</summary>
    <description>Created attachment 153879 [details] Patch to close the stream at the end of the method. The getAllBytes method of org.aspectj.weaver.AjAttribute uses a DataOutputStream to write into a ByteArrayOutputStream. However, the stream is neither closed nor flushed at the end of the method, so that its not sure that all bytes are actually written it depends on the implemention of DataOutputStream . To fix it, one should add a call to close or flush . A patch is attached.</description>
    <commit commitTime="2009-12-16 18:10:04" id="28fb861ff98a40315e38d47d6b36b9a412201349"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/AjAttribute.java</file>
    </fixedFiles>
  </bug>
  <bug id="298388" reportTime="2009-12-22 05:23:00">
    <summary>Exception while saving @Aspect class in Galileo</summary>
    <description>Build Identifier: 20090920-1017 java.lang.IllegalStateException at org.aspectj.weaver.ResolvedTypeMunger.&amp;lt;init&amp;gt; ResolvedTypeMunger.java:66 at org.aspectj.weaver.MethodDelegateTypeMunger.&amp;lt;init&amp;gt; MethodDelegateTypeMunger.java:72 at org.aspectj.weaver.bcel.AtAjAttributes.handleDeclareMixinAnnotation AtAjAttributes.java:978 at org.aspectj.weaver.bcel.AtAjAttributes.readAj5ClassAttributes AtAjAttributes.java:313 at org.aspectj.weaver.bcel.BcelObjectType.ensureAspectJAttribut ... ob.java:238 at org.eclipse.core.internal.jobs.Worker.run Worker.java:55 Compile error: IllegalStateException thrown: Use generic type, not raw type Reproducible: Always Steps to Reproduce: 1. I was goofing around with making an aspect with generics and @DeclareMixin. It wasn't finished, and I doubt it would even work, but it went something like this before I deleted it: @DeclareMixin "xxx.xxx..* @within javax.persistence.Entity " public static &amp;lt;T&amp;gt; Thing&amp;lt;T&amp;gt; createThingImplementation { return new ThingImpl&amp;lt;T&amp;gt; ; } The Thing and ThingImpl classes can be imagined. They both have &amp;lt;T&amp;gt; parameters.</description>
    <commit commitTime="2010-01-25 22:47:06" id="d36b87d2f0b22991ffc8d111367fdb7c97943477"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc169/Ajc169Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="298504" reportTime="2009-12-24 07:54:00">
    <summary>[plan] NPE at AjLookupEnvironment.java:915</summary>
    <description>Build Identifier: java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareAnnotations AjLookupEnvironment.java:915 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:644 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:559 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupE ... AutoBuildJob.run AutoBuildJob.java:238 at org.eclipse.core.internal.jobs.Worker.run Worker.java:55 Compile error: NullPointerException thrown: null Reproducible: Sometimes Steps to Reproduce: 1. Create a new Aspect 2. I added this in the aspect: declare @type:VideoEventMessagePreProcessor:@ManagedResource; 3. I pressed CTRL-S to save the file and a message box with the exception popped up.</description>
    <commit commitTime="2010-03-15 21:04:35" id="85d90a601b1da2b59bd4920cddf8b8e001c39780"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
    </fixedFiles>
  </bug>
  <bug id="298665" reportTime="2009-12-30 16:54:00">
    <summary>"Method is ambiguous for the type" build error, likely caused by AspectJ's handling of generics</summary>
    <description>Build Identifier: This description derived from the aspectj-users mailing list: http://dev.eclipse.org/mhonarc/lists/aspectj-users/msg11624.html The following gives me the error "The method instanceOf Class&amp;lt;? extends Object&amp;gt; is ambiguous for the type MyObject" on the "instanceOf" method call in the main method: public aspect MyAspect { public interface MyInterface { public boolean instanceOf Class&amp;lt;? extends Object&amp;gt; c ; } declare parents: MyObject implements MyInterface; public boolean MyInterface.instanceOf Class&amp;lt;? extends Object&amp;gt; c { return c.isInstance this ; } } class MyObject { } class Main { public static void main String[] args { new MyObject .instanceOf Object.class ; } } Here are my specs: * Mac OS X 10.4 Tiger * Eclipse Galileo * Mac OS X JavaVM 1.5.0 J2SE-1.5 * AspectJ 1.6.6 Reproducible: Always Steps to Reproduce: 1. Paste the above code into a file called MyAspect.aj default package in Eclipse with AspectJ support. 2. Let the build process occur. 3. See that there is an error in what should be legal code.</description>
    <commit commitTime="2010-03-22 22:03:43" id="ad2c31d53ca35b0637a76789279fce24b937e63b"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc169/Ajc169Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="298786" reportTime="2010-01-04 13:27:00">
    <summary>suspected problem with handling of multiple aop.xml files</summary>
    <description/>
    <commit commitTime="2010-01-05 00:44:36" id="a9688904c8041bd2bbb28817fbb82833522340c2"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="302460" reportTime="2010-02-10 12:00:00">
    <summary>NullPointerException in BcelTypeMunger.mungeNewMethod</summary>
    <description>Build Identifier: 2.0.2 java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelTypeMunger.mungeNewMethod BcelTypeMunger.java:909 at org.aspectj.weaver.bcel.BcelTypeMunger.munge BcelTypeMunger.java:94 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:448 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:103 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1831 at org.aspectj.weaver.bcel.BcelWeaver. ... ARETURN end public String toString end public abstract class package.AbstractClassName Looks like a compiler bug. I believe that I have seen this in an ant build with AspectJ 1.6.8 too. But it happens often in "Project -&amp;gt; Clean" in a complex multi project setup. Reproducible: Sometimes</description>
    <commit commitTime="2010-02-11 21:34:12" id="3b9285c9db992870541409b80f069acf82ad50ab"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="303758" reportTime="2010-02-24 09:21:00">
    <summary>[ltw][memory][perf] Empty array instances should be merged</summary>
    <description>Build Identifier: 1.6.8 Analysing a heap dump of our webapps running under tcServer/Insight combo, I discovered that the AspectJ weaver is the biggest sinner for creating empty array references. This could be eliminated by replacing instances of: blah = new ReferenceType[0]; with blah = EMPTY_REFERENCE_TYPE_ARRAY; which is defined as private static final ReferenceType[] EMPTY_REFERENCE_TYPE_ARRAY = new ReferenceType[0]; Guilty classes include: - BoundedReferenceType new ReerenceType[0] - Pointcut new String[0] - x2 - BcelMethod genericParameterTypes = new UnresolvedType[paramTypeSigs.length] - often zero - GenericSignature$ClassTypeSignature new FormalTypeParameter[0] and new ClassTypeSignature[0] - ExposedState when ctor calls this 0 -&amp;gt; new Var[0] &amp;amp; new boolean[0] There's a number more, but the above are those with the most instances Reproducible: Always</description>
    <commit commitTime="2010-02-24 18:33:20" id="2a2c78e1fe163c8c98fff16b6d82e1b7a86304f5"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/ExposedState.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/Pointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="303924" reportTime="2010-02-25 11:00:00">
    <summary>@DeclareMixins are reweaved with random effects: correctly, not at all or partially the delegating methods are added but not the implements</summary>
    <description>Build Identifier: 1.6.7, 1.6.8, 1.6.9-20100224133816 Following the mail I sent to aspectj-users http://dev.eclipse.org/mhonarc/lists/aspectj-users/msg11782.html , I'm not sure it's related to https://bugs.eclipse.org/bugs/show_bug.cgi?id=302460 . I'm opening this bug to follow the problem independently. In summary, I have a multi-module maven project: - in module1, I have @Aspects with @DeclareMixin and @Before weaved on some classes - in module2, I have another @Aspect with pointcuts on module1 and module2 classes With AspectJ 1.6.6, everything works fine. With 1.6.7, 1.6.8 or the daily build of 1.6.9, the results of the reweaving of module1's @Aspects on module1's classes during the module2 build are random: - it works fine rarely - sometimes, the mixing does not happen at all but the weaved advices have runtime tests, meaning they never execute - sometimes, the mixing does not happen at all but some of the weaved advices have runtime tests, some don't, resulting in a ClassCastException - sometimes, the mixing happens partially the delegating methods are added, but the class does not actually implement the interface and the weaved advices don't have runtime tests, resulting in an IncompatibleClassChangeError So, without actually knowing the internals of AspectJ, I feel it might be related to a cache problem as is suspected in bug 302460 , but it's really a baseless gut feeling... It doesn't really seem to be an order problem, since the order of the weaving is really consistent from run to run in the logs. Reproducible: Sometimes</description>
    <commit commitTime="2010-03-03 19:05:04" id="fb8656fc5d36147829bff93bddb0699fad4daeab"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
    </fixedFiles>
  </bug>
  <bug id="305788" reportTime="2010-03-13 20:52:00">
    <summary>Exception was thrown when I saved a file in Eclipse</summary>
    <description>Build Identifier: SpringSource STS 2.3.1 java.util.ConcurrentModificationException at java.util.HashMap$HashIterator.nextEntry HashMap.java:793 at java.util.HashMap$KeyIterator.next HashMap.java:828 at org.aspectj.asm.internal.AspectJElementHierarchy.updateHandleMap AspectJElementHierarchy.java:594 at org.aspectj.asm.AsmManager.removeStructureModelForFiles AsmManager.java:564 at org.aspectj.asm.AsmManager.processDelta AsmManager.java:639 at org.aspectj.ajdt.internal.core ... un AutoBuildJob.java:238 at org.eclipse.core.internal.jobs.Worker.run Worker.java:55 Compile error: ConcurrentModificationException thrown: null Reproducible: Always Steps to Reproduce: 1.Generate an abstract class using Spring roo 2. Edit that file within Eclipse/STS to add JPA annotations 3.Click on the save icon to save the file - Exceptions box pops up</description>
    <commit commitTime="2010-03-23 14:26:02" id="749078d83c99b0f19f4a3060460a17730faa97f9"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java</file>
    </fixedFiles>
  </bug>
  <bug id="307009" reportTime="2010-03-24 22:57:00">
    <summary>Declare soft does not match call pointcuts with annotations in another class, when -sourceroots is used</summary>
    <description>Build Identifier: AspectJ Compiler 1.6.8 1.6.8 - Built: Friday Jan 8, 2010 at 21:53:37 GMT - Eclipse Compiler 0.785_R33x, 3.3 If you have a declare soft with a call pointcut, and the call pointcut is selecting methods with an annotation it will fail to match fail to soften the exception if: a the annotated method being called is in another class b *you compile using -sourceroots*! Compiling with "ajc -1.5 -sourceroots ." causes the bug to manifest. Compiling with "ajc -1.5 *.aj *.java" works normally. I will attach a simple test case. Reproducible: Always Steps to Reproduce: 1. declare soft : Exception : call @Ann * * .. ; 2. call a method annotated with @Ann in class C, from class C2 3. compile using: ajc -1.5 -sourceroots .</description>
    <commit commitTime="2010-04-29 19:49:26" id="616df116630470ff93b2a6c5cfdae7cc6386f38a"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseResolvedMember.java</file>
    </fixedFiles>
  </bug>
  <bug id="307120" reportTime="2010-03-25 14:39:00">
    <summary>pipeline weaving problem when advising fields accessed through privileged aspect</summary>
    <description>The problem here is that if you attempt to advise a field that is being accessed from an ITD, and that field is private in the target, you can fail to advise it depending on the order of processing the target type and the aspect. class A { private int i; } privileged aspect X { public int getI { return i; } before : get int i {} } the advice there may not affect the ITD depending on the compilation order.</description>
    <commit commitTime="2010-03-25 22:01:16" id="d55213952a178932984d98daec65b1d6034427ad"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc169/Ajc169Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="308093" reportTime="2010-04-05 14:16:00">
    <summary>incremental build problem when mixing up ITDs and declare parents</summary>
    <description>reported by Rod Johnson. He had a sophisticated aspect doing a mix of ITDs and declare parents. On doing an incremental build he was receiving errors that looked like the declare parents hadn't applied on the secondary build. What was actually happening is that when a class file was brought in as a BinaryTypeBinding, the existing World representation wasn't being cleaned up properly. Without the cleanup the declare parents thought it was still in effect, but it was not. With proper cleanup the declare parents applies on the secondary build and all is well. Change is in AjLookupEnviroment.weaveInterTypeDeclarations where the onType.clearInterTypeMungers must be paired with an onType.ensureConsistent call.</description>
    <commit commitTime="2010-04-05 18:25:10" id="4b43dc63d14ad8b2bc82129bc27bdc3abfdfd7b4"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
    </fixedFiles>
  </bug>
  <bug id="308386" reportTime="2010-04-07 15:15:00">
    <summary>NPE when hasfield evaluating with annotations and there is an unresolved import</summary>
    <description>hasfield/hasmethod can cause early matching - before the weaving process kicks in properly. For a 'normal' compile error, like an unresolvable import, the error is put out before the weaving process kicks off. However hasfield/hasmethod happening early causes an NPE to occur before the error is put out. A guard for the NPE which occurs in EclipseResolvedMember.getAnnotationTypes addresses this problem and allows the real error to come out.</description>
    <commit commitTime="2010-04-07 19:24:04" id="94d0a4e9eabd5b1d807ae95418cda47a9d8f4371"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseResolvedMember.java</file>
    </fixedFiles>
  </bug>
  <bug id="308773" reportTime="2010-04-11 23:18:00">
    <summary>IllegalStateException at ResolvedMemberImpl.java:676</summary>
    <description>Build Identifier: Version: 2.0.3.e35x-20100410-1900, AspectJ version: 1.6.9.20100408142000 java.lang.IllegalStateException at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith ResolvedMemberImpl.java:676 at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith ResolvedMemberImpl.java:664 at org.aspectj.weaver.ReferenceType.getDeclaredMethods ReferenceType.java:772 at org.aspectj.weaver.ResolvedType.lookupMethod ResolvedType.java:534 at org.aspectj.weaver.World.resolve World.java:617 at org.aspectj.weaver.MemberI ... : ICONST_0 IRETURN end public final boolean retainAll java.util.Collection end public class com.argilsoft.xstm.core.TSet Reproducible: Sometimes Steps to Reproduce: 1. Change an aspect in Eclipse 2. Rebuild project 3. Modify a few java files 4. Popup appears with this error</description>
    <commit commitTime="2010-04-13 20:19:32" id="49da1e2edb3fa396405620a9930f33b14d7045a1"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ResolvedMemberImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="309336" reportTime="2010-04-15 11:47:00">
    <summary>Build problems / OOM in Eclipse</summary>
    <description>Created attachment 164985 [details] Failing project A bug report as suggested by Andy Clement on the ML, I'm pasting from the original email. I'm currently investigating the feasibility to apply AspectJ to a larger commercial code base. While test-driving Eclipse and Ant tasks I found some odd behavior. Maybe it's me, maybe it's a bug. The first thing I could drill down on is a build in Eclipse hanging the entire IDE and eating ridiculous amounts of memory. The code with which I can reproduce this problem is like this: We first have an interface which defines one method which throws exceptions specified by generic type arguments, like this: interface Op14&amp;lt;Ret, E1 extends Throwable, E2 extends Throwable, ..., E14 extends Throwable&amp;gt; { Public Ret execute String aArg throws RemoteException, E1, E2, ..., E14; } Then we specialize on the interface in a telescoping-style pattern to reduce the number of exceptions that need to be specified: // Extend up to Op14 interface Op1&amp;lt;Ret, E1 extends Throwable&amp;gt; extends Op2&amp;lt;Ret, E1, E1&amp;gt; {} interface Op0&amp;lt;Ret&amp;gt; extends Op1&amp;lt;Ret, RuntimeException&amp;gt; {} Then we have a separate class were the Op0 interface is implemented in an anonymous inner class: Public class UseOperator { Void method throws ... { Op0&amp;lt;String&amp;gt; f = new Op0&amp;lt;String&amp;gt; { String execute String aArg throws RemoteException { System.out.println "Doh!" ; Return aArg; } f.execute "" ; } } And finally we have a simple aspect: Public aspect NoSystemStreams { Declare warning : get java.io.PrintStream System.out : "No system.out"; Declare warning : get java.io.PrintStream System.err : "No system.err"; } This still compiles fine. However, if I change the warning declaration to Declare warning : within com.msr..* &amp;amp;&amp;amp; get java.io.PrintStream System.out : "No system.out"; Declare warning : within com.msr..* &amp;amp;&amp;amp; get java.io.PrintStream System.err : "No system.err"; Note the difference to the original email: I changed both warning declaration to be restricted to classes in the com.msr package; original warnings were unrestricted Compilation never finishes and starts eating what seems like arbitrary amounts of heap max Eclipse heap here was 2.5GB, and it did not suffice! . It also seems like when reducing the inheritance depth to Op13, the problem also disappears. This is a show-stopper as AspectJ cannot handle the grown code base. If you like, I'll file a bug report with archives of working and failing Eclipse projects. All of this has been tried with Eclipse 3.5.2 and both AJDT 2.0.2 and 2.0.3.e35x-20100410-1900; the problem occurs independently of the weaving service being enabled or not.</description>
    <commit commitTime="2010-04-16 18:01:09" id="f2c6356a17f3d9e18a0e2403f33e9cbff74740b2"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc169/Ajc169Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="309402" reportTime="2010-04-15 19:09:00">
    <summary>Changes to Main.java</summary>
    <description>In order to get the AJDT ant integration working, we need a small change to Main.java. We need to be able to pass in a custom org.aspectj.bridge.ICommand object. Currently, the ICommand object is created via reflection. Here is my suggestion: 1. augment the ICommand local variable to being a field 2. add a setter for this field 3. change this: ICommand command = ReflectionFactory.makeCommand commandName, holder ; to this: if command != null command = ReflectionFactory.makeCommand commandName, holder ;</description>
    <commit commitTime="2010-04-16 15:18:11" id="b21eb05a252a83b5a920430d733bed1b4dc97d52"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java</file>
    </fixedFiles>
  </bug>
  <bug id="309440" reportTime="2010-04-16 05:26:00">
    <summary>ArrayIndexOutOfBoundsException with parameter annotations</summary>
    <description>Build Identifier: 1.6.7a, 1.6.8 This is the followup bug to http://dev.eclipse.org/mhonarc/lists/aspectj-users/msg11911.html . Basically, the compiler crashes with an ArrayIndexOutOfBoundsException. I'll attach a zip file with failing code, including a batch script to trigger the bug. Reproducible: Always Steps to Reproduce: 1. Unpack the zip file 2. Run the crashcompile.bat script</description>
    <commit commitTime="2010-04-16 16:20:40" id="e15ff536953b9936d700050805498d9ff0cbaceb"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc169/Ajc169Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="309710" reportTime="2010-04-19 12:42:00">
    <summary>Unnecessary full builds occurring after changing 1 java file</summary>
    <description>In AJDT, I am having unnecessary full builds of o.e.ajdt.ui after changing 1 java file in o.e.ajdt.core. Below is the output from the AJDT Event trace. I think the problem is here: 8:57:24 AjState org.eclipse.ajdt.ui : type org/eclipse/ajdt/core/ras/FFDC is depended upon by '/Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.ui/src/org/eclipse/ajdt/internal/ui/ras/UIFFDC.aj' 8:57:24 ClassFileChangeChecking: aspect found that has structurally changed or that this project depends upon : /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/bin/org/eclipse/ajdt/core/ras/FFDC.class FFDC is an aspect in core that is subclassed by UIFFDC in ui. For some reason, ajc thinks that FFDC is structurally changed. If you want, I can find a smaller test case for you. 8:57:23 =========================================================================================== 8:57:23 Build kind = AUTOBUILD 8:57:23 Project=org.eclipse.ajdt.core, kind of build requested=Incremental AspectJ compilation 8:57:23 Timer event: 0ms: Flush included source file cache 8:57:23 Timer event: 1ms: Check delta 8:57:23 File: /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/src/org/eclipse/ajdt/internal/core/search/ITDReferenceVisitor.java has changed. 8:57:23 build: Examined delta - 1 changed, 0 added, and 0 deleted source files in required project org.eclipse.ajdt.core 8:57:23 Timer event: 1ms: Looking for and marking configuration changes in org.eclipse.ajdt.core 8:57:23 Configuration changes found: true 8:57:23 Timer event: 1ms: Look for source/resource changes 8:57:23 Setting list of classpath elements with modified contents: 8:57:23 [] 8:57:23 Timer event: 6ms: Pre compile 8:57:23 Sending the following configuration changes to the compiler: [] 8:57:23 5 source file changes since last build 8:57:23 Compiler configuration for project org.eclipse.ajdt.core has been read by compiler. Resetting. 8:57:23 Configuration was [] 8:57:23 Resetting list of modified source files. Was [/Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/src/org/eclipse/ajdt/internal/core/search/ITDReferenceVisitor.java, /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/src/org/eclipse/ajdt/internal/core/search/ITDReferenceVisitor.java, /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/src/org/eclipse/ajdt/internal/core/search/ITDReferenceVisitor.java, /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/src/org/eclipse/ajdt/internal/core/search/ITDReferenceVisitor.java, /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/src/org/eclipse/ajdt/internal/core/search/ITDReferenceVisitor.java] 8:57:23 Preparing for build: planning to be an incremental build 8:57:23 Starting incremental compilation loop 1 of possibly 5 8:57:23 Timer event: 350ms: Time to first compiled message 8:57:23 Timer event: 402ms: Time to first woven message 8:57:23 Examining whether any other files now need compilation based on just compiling: '{/Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/src/org/eclipse/ajdt/internal/core/search/ITDReferenceVisitor.java}' 8:57:23 Need to recompile 'AJDTSearchProvider.java' 8:57:23 Starting incremental compilation loop 2 of possibly 5 8:57:23 AspectJ reports build successful, build was: INCREMENTAL 8:57:23 AJDE Callback: finish. Was full build: false 8:57:23 Timer event: 912ms: Total time spent in AJDE 8:57:23 Timer event: 0ms: Refresh after build 8:57:23 Types affected during build = 2 8:57:23 Timer event: 928ms: Total time spent in AJBuilder.build 8:57:23 =========================================================================================== 8:57:23 Build kind = AUTOBUILD 8:57:23 Project=org.eclipse.ajdt.ui, kind of build requested=Incremental AspectJ compilation 8:57:23 Timer event: 4ms: Delete markers: org.eclipse.ajdt.core Finished deleting markers for org.eclipse.ajdt.core 8:57:23 Timer event: 8ms: Create markers: org.eclipse.ajdt.core Finished creating markers for org.eclipse.ajdt.core 8:57:23 Created 4 markers in 2 files 8:57:23 Timer event: 0ms: Flush included source file cache 8:57:23 Timer event: 1ms: Check delta 8:57:23 Timer event: 0ms: Looking for and marking configuration changes in org.eclipse.ajdt.ui 8:57:23 Configuration changes found: false 8:57:23 build: Examined delta - no source file or classpath changes for project org.eclipse.ajdt.ui 8:57:23 Timer event: 0ms: Looking for and marking configuration changes in org.eclipse.osgi 8:57:23 Configuration changes found: false 8:57:23 Timer event: 0ms: Looking for and marking configuration changes in org.eclipse.equinox.weaving.hook 8:57:23 Configuration changes found: false 8:57:23 Timer event: 0ms: Looking for and marking configuration changes in org.aspectj.ajde 8:57:23 Configuration changes found: false 8:57:23 Timer event: 0ms: Looking for and marking configuration changes in org.aspectj.weaver 8:57:23 Configuration changes found: false 8:57:23 Timer event: 0ms: Looking for and marking configuration changes in org.aspectj.runtime 8:57:23 Configuration changes found: false 8:57:23 Timer event: 0ms: Looking for and marking configuration changes in org.eclipse.contribution.visualiser 8:57:23 Configuration changes found: false 8:57:23 File: /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/src/org/eclipse/ajdt/internal/core/search/ITDReferenceVisitor.java has changed. 8:57:23 build: Examined delta - 1 changed, 0 added, and 0 deleted source files in required project org.eclipse.ajdt.core 8:57:23 Timer event: 0ms: Looking for and marking configuration changes in org.eclipse.ajdt.core 8:57:23 Configuration changes found: true 8:57:23 Timer event: 0ms: Look for source/resource changes 8:57:24 Setting list of classpath elements with modified contents: 8:57:24 [/Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/bin] 8:57:24 Timer event: 22ms: Pre compile 8:57:24 Sending the following configuration changes to the compiler: [] 8:57:24 0 source file changes since last build 8:57:24 Compiler configuration for project org.eclipse.ajdt.ui has been read by compiler. Resetting. 8:57:24 Configuration was [] 8:57:24 Resetting list of modified source files. Was [] 8:57:24 ClassFileChangeChecking: found state instance managing output location : /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/bin 8:57:24 Seems this has changed /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/bin/org/eclipse/ajdt/internal/core/search/ITDReferenceVisitor.classmodtime=1271692643058 lsbt=1271392961205 incoming check value=1271692079120 8:57:24 AjState org.eclipse.ajdt.ui : type org/eclipse/ajdt/core/model/EnsureInitialized is not depended upon by this state 8:57:24 ClassFileChangeChecking: found aspect on classpath but this project doesn't reference it, continuing to try for incremental build : /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/bin/org/eclipse/ajdt/core/model/EnsureInitialized.class 8:57:24 AjState org.eclipse.ajdt.ui : type org/eclipse/ajdt/core/ras/FFDC is depended upon by '/Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.ui/src/org/eclipse/ajdt/internal/ui/ras/UIFFDC.aj' 8:57:24 ClassFileChangeChecking: aspect found that has structurally changed or that this project depends upon : /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/bin/org/eclipse/ajdt/core/ras/FFDC.class 8:57:24 Timer event: 688ms: Update visualizer, xref, advice listeners for separate thread : org.eclipse.ajdt.core 8:57:24 Preparing for build: not going to be incremental because path change detected one of classpath/aspectpath/inpath/injars 8:57:24 Falling back to batch compilation 8:57:24 Preparing for build: not going to be incremental because no successful previous full build 8:57:26 Timer event: 2562ms: Time to first compiled message 8:57:27 Timer event: 3045ms: Time to first woven message 8:57:43 AspectJ reports build successful, build was: FULL 8:57:44 AJDE Callback: finish. Was full build: true 8:57:44 Timer event: 20040ms: Total time spent in AJDE 8:57:44 Timer event: 0ms: Refresh after build 8:57:44 Types affected during build = 217 8:57:44 Timer event: 20673ms: Total time spent in AJBuilder.build 8:57:44 Timer event: 14ms: Delete markers: org.eclipse.ajdt.ui Finished deleting markers for org.eclipse.ajdt.ui 8:57:44 Timer event: 183ms: Create markers: org.eclipse.ajdt.ui Finished creating markers for org.eclipse.ajdt.ui 8:57:44 Created 512 markers in 217 files 8:57:45 Timer event: 587ms: Update visualizer, xref, advice listeners for separate thread : org.eclipse.ajdt.ui 8:57:45 =========================================================================================== 8:57:45 Build kind = AUTOBUILD 8:57:45 Project=org.eclipse.ajdt.ui.tests, kind of build requested=Incremental AspectJ compilation 8:57:45 Timer event: 0ms: Flush included source file cache 8:57:45 Timer event: 0ms: Check delta 8:57:45 Timer event: 0ms: Looking for and marking configuration changes in org.eclipse.ajdt.ui.tests 8:57:45 Configuration changes found: false 8:57:45 build: Examined delta - no source file or classpath changes for project org.eclipse.ajdt.ui.tests 8:57:45 Timer event: 0ms: Looking for and marking configuration changes in org.eclipse.osgi 8:57:45 Configuration changes found: false 8:57:45 Timer event: 0ms: Looking for and marking configuration changes in org.eclipse.equinox.weaving.hook 8:57:45 Configuration changes found: false 8:57:45 Timer event: 2ms: Looking for and marking configuration changes in org.eclipse.ajdt.ui 8:57:45 Configuration changes found: false 8:57:45 Timer event: 0ms: Looking for and marking configuration changes in org.aspectj.ajde 8:57:45 Configuration changes found: false 8:57:45 Timer event: 0ms: Looking for and marking configuration changes in org.aspectj.weaver 8:57:45 Configuration changes found: false 8:57:45 Timer event: 0ms: Looking for and marking configuration changes in org.aspectj.runtime 8:57:45 Configuration changes found: false 8:57:45 Timer event: 0ms: Looking for and marking configuration changes in org.eclipse.contribution.visualiser.tests 8:57:45 Configuration changes found: false 8:57:45 File: /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/src/org/eclipse/ajdt/internal/core/search/ITDReferenceVisitor.java has changed. 8:57:45 build: Examined delta - 1 changed, 0 added, and 0 deleted source files in required project org.eclipse.ajdt.core 8:57:45 Timer event: 0ms: Looking for and marking configuration changes in org.eclipse.ajdt.core 8:57:45 Configuration changes found: true 8:57:45 Timer event: 2ms: Look for source/resource changes 8:57:45 Setting list of classpath elements with modified contents: 8:57:45 [/Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.ui/bin, /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/bin] 8:57:45 Timer event: 6ms: Pre compile 8:57:45 Sending the following configuration changes to the compiler: [] 8:57:45 0 source file changes since last build 8:57:45 Compiler configuration for project org.eclipse.ajdt.ui.tests has been read by compiler. Resetting. 8:57:45 Configuration was [] 8:57:45 Resetting list of modified source files. Was [] 8:57:45 ClassFileChangeChecking: found state instance managing output location : /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.ui/bin 8:57:45 ClassFileChangeChecking: structural change detected in : /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.ui/bin/org/eclipse/ajdt/internal/builder/AJNode.class 8:57:45 AjState org.eclipse.ajdt.ui.tests : type org/eclipse/ajdt/internal/builder/AJNode is depended upon by '/Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.ui.tests/src/org/eclipse/ajdt/ui/tests/xref/XReferenceViewContentsTest.java' &amp;lt;snip/&amp;gt; 8:57:45 AjState org.eclipse.ajdt.ui.tests : type org/eclipse/ajdt/internal/ui/AspectJProjectPropertiesPage$PageChangeListener is not depended upon by this state 8:57:45 ClassFileChangeChecking: structural change detected in : /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.ui/bin/org/eclipse/ajdt/internal/ui/AspectJProjectPropertiesPage.class 8:57:45 AjState org.eclipse.ajdt.ui.tests : type org/eclipse/ajdt/internal/ui/AspectJProjectPropertiesPage is depended upon by '/Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.ui.tests/src/org/eclipse/ajdt/ui/tests/preferences/AspectJProjectPropertiesPageTest.java' 8:57:45 ClassFileChangeChecking: structural change detected in : /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.ui/bin/org/eclipse/ajdt/internal/ui/dialogs/AJCUTypeNameMatch.class 8:57:45 AjState org.eclipse.ajdt.ui.tests : type org/eclipse/ajdt/internal/ui/dialogs/AJCUTypeNameMatch is not depended upon by this state 8:57:45 ClassFileChangeChecking: aspect found that has structurally changed or that this project depends upon : /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.ui/bin/org/eclipse/ajdt/internal/ui/dialogs/AJOpenType.class 8:57:46 Preparing for build: not going to be incremental because path change detected one of classpath/aspectpath/inpath/injars 8:57:46 Falling back to batch compilation 8:57:46 Preparing for build: not going to be incremental because no successful previous full build 8:57:47 Timer event: 1349ms: Time to first compiled message 8:57:47 Timer event: 1390ms: Time to first woven message 8:57:51 AspectJ reports build successful, build was: FULL 8:57:51 AJDE Callback: finish. Was full build: true 8:57:51 Timer event: 6117ms: Total time spent in AJDE 8:57:51 Timer event: 0ms: Refresh after build 8:57:51 Types affected during build = 115 8:57:52 Timer event: 6405ms: Total time spent in AJBuilder.build 8:57:52 Timer event: 17ms: Delete markers: org.eclipse.ajdt.ui.tests Finished deleting markers for org.eclipse.ajdt.ui.tests 8:57:52 =========================================================================================== 8:57:52 Build kind = AUTOBUILD 8:57:52 Project=org.eclipse.ajdt.ui.visual.tests, kind of build requested=Incremental AspectJ compilation 8:57:52 Timer event: 0ms: Flush included source file cache 8:57:52 Timer event: 0ms: Check delta 8:57:52 Timer event: 93ms: Create markers: org.eclipse.ajdt.ui.tests Finished creating markers for org.eclipse.ajdt.ui.tests 8:57:52 Created 321 markers in 115 files 8:57:52 Timer event: 0ms: Looking for and marking configuration changes in org.eclipse.ajdt.ui.visual.tests 8:57:52 Configuration changes found: false 8:57:52 build: Examined delta - no source file or classpath changes for project org.eclipse.ajdt.ui.visual.tests 8:57:52 Timer event: 0ms: Looking for and marking configuration changes in org.eclipse.osgi 8:57:52 Configuration changes found: false 8:57:52 Timer event: 0ms: Looking for and marking configuration changes in org.eclipse.equinox.weaving.hook 8:57:52 Configuration changes found: false 8:57:52 File: /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/src/org/eclipse/ajdt/internal/core/search/ITDReferenceVisitor.java has changed. 8:57:52 build: Examined delta - 1 changed, 0 added, and 0 deleted source files in required project org.eclipse.ajdt.core 8:57:52 Timer event: 0ms: Looking for and marking configuration changes in org.eclipse.ajdt.core 8:57:52 Configuration changes found: true 8:57:52 Timer event: 0ms: Look for source/resource changes 8:57:52 Setting list of classpath elements with modified contents: 8:57:52 [/Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/bin, /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.ui/bin, /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.ui.tests/bin] 8:57:52 Timer event: 16ms: Pre compile 8:57:52 Sending the following configuration changes to the compiler: [] 8:57:52 0 source file changes since last build 8:57:52 Compiler configuration for project org.eclipse.ajdt.ui.visual.tests has been read by compiler. Resetting. 8:57:52 Configuration was [] 8:57:52 Resetting list of modified source files. Was [] 8:57:52 ClassFileChangeChecking: found state instance managing output location : /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/bin 8:57:52 Seems this has changed /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/bin/org/eclipse/ajdt/internal/core/search/ITDReferenceVisitor.classmodtime=1271692643058 lsbt=1271392961205 incoming check value=1271692187188 8:57:52 AjState org.eclipse.ajdt.ui.visual.tests : type org/eclipse/ajdt/core/model/EnsureInitialized is not depended upon by this state 8:57:52 ClassFileChangeChecking: found aspect on classpath but this project doesn't reference it, continuing to try for incremental build : /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/bin/org/eclipse/ajdt/core/model/EnsureInitialized.class &amp;lt;snip/&amp;gt; 8:57:52 AjState org.eclipse.ajdt.ui.visual.tests : type org/eclipse/ajdt/internal/core/search/ITDReferenceVisitor is not depended upon by this state 8:57:52 ClassFileChangeChecking: found state instance managing output location : /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.ui/bin 8:57:52 ClassFileChangeChecking: structural change detected in : /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.ui/bin/org/eclipse/ajdt/internal/builder/AJNode.class 8:57:52 AjState org.eclipse.ajdt.ui.visual.tests : type org/eclipse/ajdt/internal/builder/AJNode is not depended upon by this state 8:57:52 ClassFileChangeChecking: structural change detected in : /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.ui/bin/org/eclipse/ajdt/internal/builder/AJNodeAdapter.class &amp;lt;snip/&amp;gt; goes on to list every source file in AJDT. 8:57:52 Preparing for build: not going to be incremental because path change detected one of classpath/aspectpath/inpath/injars 8:57:52 Falling back to batch compilation 8:57:52 Preparing for build: not going to be incremental because no successful previous full build 8:57:52 Timer event: 419ms: Update visualizer, xref, advice listeners for separate thread : org.eclipse.ajdt.ui.tests 8:57:52 Timer event: 574ms: Time to first compiled message 8:57:52 Timer event: 577ms: Time to first woven message 8:57:53 AspectJ reports build successful, build was: FULL 8:57:53 AJDE Callback: finish. Was full build: true 8:57:53 Timer event: 1433ms: Total time spent in AJDE 8:57:53 Timer event: 0ms: Refresh after build 8:57:53 Types affected during build = 34 8:57:53 Timer event: 1617ms: Total time spent in AJBuilder.build 8:57:53 Timer event: 11ms: Delete markers: org.eclipse.ajdt.ui.visual.tests Finished deleting markers for org.eclipse.ajdt.ui.visual.tests 8:57:53 Timer event: 10ms: Create markers: org.eclipse.ajdt.ui.visual.tests Finished creating markers for org.eclipse.ajdt.ui.visual.tests 8:57:53 Created 0 markers in 34 files 8:57:54 =========================================================================================== 8:57:54 Build kind = AUTOBUILD 8:57:54 Project=org.eclipse.ajdt.core.tests, kind of build requested=Incremental AspectJ compilation 8:57:54 Timer event: 0ms: Flush included source file cache 8:57:54 Timer event: 0ms: Check delta 8:57:54 Timer event: 0ms: Looking for and marking configuration changes in org.eclipse.ajdt.core.tests 8:57:54 Configuration changes found: false 8:57:54 build: Examined delta - no source file or classpath changes for project org.eclipse.ajdt.core.tests 8:57:54 Timer event: 0ms: Looking for and marking configuration changes in org.eclipse.osgi 8:57:54 Configuration changes found: false 8:57:54 Timer event: 0ms: Looking for and marking configuration changes in org.eclipse.equinox.weaving.hook 8:57:54 Configuration changes found: false 8:57:54 File: /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/src/org/eclipse/ajdt/internal/core/search/ITDReferenceVisitor.java has changed. 8:57:54 build: Examined delta - 1 changed, 0 added, and 0 deleted source files in required project org.eclipse.ajdt.core 8:57:54 Timer event: 0ms: Looking for and marking configuration changes in org.eclipse.ajdt.core 8:57:54 Configuration changes found: true 8:57:54 Timer event: 0ms: Look for source/resource changes 8:57:54 Setting list of classpath elements with modified contents: 8:57:54 [/Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/bin] 8:57:54 Timer event: 9ms: Pre compile 8:57:54 Sending the following configuration changes to the compiler: [] 8:57:54 0 source file changes since last build 8:57:54 Compiler configuration for project org.eclipse.ajdt.core.tests has been read by compiler. Resetting. 8:57:54 Configuration was [] 8:57:54 Resetting list of modified source files. Was [] 8:57:54 ClassFileChangeChecking: found state instance managing output location : /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/bin 8:57:54 Seems this has changed /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/bin/org/eclipse/ajdt/internal/core/search/ITDReferenceVisitor.classmodtime=1271692643058 lsbt=1271392961205 incoming check value=1271692191330 8:57:54 AjState org.eclipse.ajdt.core.tests : type org/eclipse/ajdt/core/model/EnsureInitialized is not depended upon by this state 8:57:54 ClassFileChangeChecking: found aspect on classpath but this project doesn't reference it, continuing to try for incremental build : /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/bin/org/eclipse/ajdt/core/model/EnsureInitialized.class 8:57:54 AjState org.eclipse.ajdt.core.tests : type org/eclipse/ajdt/core/ras/FFDC is not depended upon by this state 8:57:54 ClassFileChangeChecking: found aspect on classpath but this project doesn't reference it, continuing to try for incremental build : /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/bin/org/eclipse/ajdt/core/ras/FFDC.class 8:57:54 AjState org.eclipse.ajdt.core.tests : type org/eclipse/ajdt/core/ras/PluginFFDC is not depended upon by this state 8:57:54 ClassFileChangeChecking: found aspect on classpath but this project doesn't reference it, continuing to try for incremental build : /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/bin/org/eclipse/ajdt/core/ras/PluginFFDC.class 8:57:54 AjState org.eclipse.ajdt.core.tests : type org/eclipse/ajdt/internal/core/Enforcement is not depended upon by this state 8:57:54 ClassFileChangeChecking: found aspect on classpath but this project doesn't reference it, continuing to try for incremental build : /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/bin/org/eclipse/ajdt/internal/core/Enforcement.class 8:57:54 AjState org.eclipse.ajdt.core.tests : type org/eclipse/ajdt/internal/core/ras/CoreFFDC is not depended upon by this state 8:57:54 ClassFileChangeChecking: found aspect on classpath but this project doesn't reference it, continuing to try for incremental build : /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/bin/org/eclipse/ajdt/internal/core/ras/CoreFFDC.class 8:57:54 ClassFileChangeChecking: structural change detected in : /Users/andrew/Eclipse/Workspaces/workspaceAJDT1.7/org.eclipse.ajdt.core/bin/org/eclipse/ajdt/internal/core/search/ITDReferenceVisitor.class 8:57:54 AjState org.eclipse.ajdt.core.tests : type org/eclipse/ajdt/internal/core/search/ITDReferenceVisitor is not depended upon by this state 8:57:54 Preparing for build: planning to be an incremental build 8:57:54 AspectJ reports build successful, build was: INCREMENTAL 8:57:54 AJDE Callback: finish. Was full build: false 8:57:54 Timer event: 9ms: Total time spent in AJDE 8:57:54 Timer event: 0ms: Refresh after build 8:57:54 Timer event: 19ms: Total time spent in AJBuilder.build 8:57:58 Timer event: 262ms: Update visualizer, xref, advice listeners for separate thread : org.eclipse.ajdt.ui.visual.tests 8:57:59 Timer event: 273ms: Update visualizer, xref, advice listeners for separate thread : org.eclipse.ajdt.core.tests</description>
    <commit commitTime="2010-05-26 00:16:11" id="814f51e439ea568f5360e437781cee3192d671ed"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="309743" reportTime="2010-04-19 17:40:00">
    <summary>Type System support annotations optional</summary>
    <description>I'm going to make the annotations added to class files to support the AjType reflection system optional. The option '-reflectable' will ensure they are there, but without that option they won't be there. They are rarely used and increase code size as well as interfere with regular reflection which is what many systems/frameworks are typically using anyway to look at AspectJ code .</description>
    <commit commitTime="2010-04-19 22:19:17" id="e09e0b5f728c71dd2a06803f04eb566b53390004"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc169/Ajc169Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="310043" reportTime="2010-04-21 18:55:00">
    <summary>unhelpful 'can't override final' messages coming out.</summary>
    <description>A maven project consists of both regular source and test source and a ton of ITDs. One of the ITDs declares a final implementation of equals/hashcode on some set of target types. This works fine when the source is built. Later the testcode is built. Some references in the testcode cause the source types to be pulled in - these types go through the createBinaryTypeFrom logic in AjLookupEnvironment - which attempts to reapply the ITDs - these look to 'clash' with those already in the target type and the message comes out</description>
    <commit commitTime="2010-04-22 02:24:42" id="ef9124cf8c379663c9cd477384983f03df7e7263"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc169/Ajc169Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="310144" reportTime="2010-04-22 12:18:00">
    <summary>java.lang.RuntimeException at AsmManager.java:1143</summary>
    <description>Build Identifier: Eclipse AspectJ Development Tools Version: 2.0.3.e35x-20100419-1200 AspectJ version: 1.6.9.20100416110000 java.lang.RuntimeException at org.aspectj.asm.AsmManager.removeSingleNode AsmManager.java:1143 at org.aspectj.asm.AsmManager.removeRelationshipsTargettingThisType AsmManager.java:798 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1173 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:455 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter. ... for handle =xstm/stm&amp;lt;com.argilsoft.xstm.core{TKeyed.java[TKeyed[Visitor?field-set java.util.ArrayList com.argilsoft.xstm.core.Visitor._continueStack Reproducible: Sometimes Steps to Reproduce: Random exception popup in Eclipse</description>
    <commit commitTime="2010-04-29 19:54:09" id="728ecb8806b154c20f7b1248ae994a93a514f7a2"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/AsmManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="310506" reportTime="2010-04-26 13:23:00">
    <summary>[plan] aspects can be 'optional' and run depending on available dependencies</summary>
    <description>Some aspect libraries are shipped separately to their dependencies. For example the spring persistence aspects are separate to the jpa jars. Due to the inclusion of the aspect on the aspect path the user may see errors about the JPA jar missing, even though they weren't actually using JPA in the first place. It should be possible to make these aspects optional - so that if their dependencies cannot be found they just switch off, since the users code cannot be requiring them anyway. Appropriate messages must come out indicating what has happened.</description>
    <commit commitTime="2010-06-16 18:09:34" id="aadb8b8a596c5321b4dd1b3b21d355601c72379e"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/World.java</file>
    </fixedFiles>
  </bug>
  <bug id="310704" reportTime="2010-04-27 15:59:00">
    <summary>Bug in ProgramElement.getCorrespondingType</summary>
    <description>Here is the code for the method: public String getCorrespondingType boolean getFullyQualifiedType { String returnType = String kvpairs.get "returnType" ; if returnType == null returnType = ""; if getFullyQualifiedType { return returnType; } int index = returnType.lastIndexOf "." ; if index != -1 { return returnType.substring index ; } return returnType; } the line: return returnType.substring index ; should be using 'index+1'</description>
    <commit commitTime="2010-04-28 01:05:35" id="a502da8b5a1b2fefa0d57ffbcc950ebf88ae497d"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/internal/ProgramElement.java</file>
    </fixedFiles>
  </bug>
  <bug id="311762" reportTime="2010-05-05 12:19:00">
    <summary>Spring passes in a garbage classname and AspectJ reports an error</summary>
    <description>There was a bug/feature in Spring 2.5.5 that created a silly classname that was of an invalid format. names like: '[Lorg.quartz.Trigger;Editor' which result in: org.aspectj.weaver.BCException: Do not call nameToSignature with something that looks like a signature descriptor : '[Lorg.quartz.Trigger;Editor' at org.aspectj.weaver.UnresolvedType.nameToSignature UnresolvedType.java:650 at org.aspectj.weaver.UnresolvedType.forName UnresolvedType.java:244 at org.aspectj.weaver.ExtensibleURLClassLoader.getBytes ExtensibleURLClassLoader.java:70 at org.aspectj.weaver.loadtime.WeavingURLClassLoader.getBytes WeavingURLClassLoader.java:165 at org.aspectj.weaver.ExtensibleURLClassLoader.findClass ExtensibleURLClassLoader.java:50 at java.lang.ClassLoader.loadClass ClassLoader.java:306 at java.lang.ClassLoader.loadClass ClassLoader.java:251 the BCException is really an assert - it is meant to catch incorrect signature manipulation internally to AspectJ but does catch this situation too. We should perhaps be more lenient if garbage comes in from outside.</description>
    <commit commitTime="2010-05-05 16:51:48" id="84226fc188d2e5deb532d0d49841ffbd019670b1"/>
    <fixedFiles>
      <file>loadtime/testsrc/org/aspectj/weaver/loadtime/WeavingURLClassLoaderTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="311910" reportTime="2010-05-06 11:22:00">
    <summary>AspectJ internal Compiler Error</summary>
    <description>Stack Trace: java.lang.NullPointerException at org.aspectj.weaver.model.AsmRelationshipProvider.createSourceLocation AsmRelationshipProvider.java:303 at org.aspectj.weaver.model.AsmRelationshipProvider.addPointcuts AsmRelationshipProvider.java:580 at org.aspectj.weaver.model.AsmRelationshipProvider.createHierarchyForBinaryAspect AsmRelationshipProvider.java:562 at org.aspectj.weaver.model.AsmRelationshipProvider.addAdvisedRelationship AsmRelations ... ARETURN end public Object run Object[] end public class com.cerner.isis.biz.services.asclepius.patient.PatientManagerImplTest$AjcClosure3 Happening when weaving a jar with a aspect jar.</description>
    <commit commitTime="2010-05-06 16:34:47" id="3be69a2d115996e70903880e50c5bb897f53b887"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/model/AsmRelationshipProvider.java</file>
    </fixedFiles>
  </bug>
  <bug id="314130" reportTime="2010-05-24 11:53:00">
    <summary>[plan] [ltw] [hcr] LTW, Reweaving and Hot Code Replace changes reflected every two saves of files</summary>
    <description>Build Identifier: AspectJ 1.6.9.M2 Eclipse 3.5.1 Build ID: 20090920-1017 A full description of the bug is in the AspectJ-Users mail list: http://dev.eclipse.org/mhonarc/lists/aspectj-users/msg12114.html While debugging if I change the content of a method ex. the text of a System.out and save the file, it wouldn't reflected. But if I save the save file again, this time the changes are reflected. And it repeats on cycles of two saves. The rare is that when I save and the changes are not reflected, in log appears the next two lines and when I save the file and changes are reflected this lines are not showed: [AppClassLoader@2bbd86] info processing reweavable type test.weaved.Test: test\weaved\Test.java [AppClassLoader@2bbd86] info successfully verified type test.aspects.TestAspect exists. Originates from test\aspects\TestAspect.java This lines comes from the method processReweavableStateIfPresent String, BcelObjectType on the class org.aspectj.weaver.bcel.BcelWeaver Setting -Xset:overWeaving=true was worst because every time that I save the file that is aspected I get this message from Eclipse in a popup: "Hot code replace failed - Scheme change not implemented" and the changes are never reflected, neither in the first save nor in the second save. My environment is: Windows XP SP3 32 bits Sun Java 1.6.0 Update 19 JDK Eclipse 3.5.1 Build ID: 20090920-1017 AspectJ 1.6.9 M2 the same occurs with 1.6.8 Project: A clean new basis java project that only has this test and AspectJ Weaver options: -Xreweavable -verbose -showWeaveInfo -debug and also -Xset:overWeaving=true in some tests Using: -javaagent:aspectjweaver-1.6.9.M2.jar I will attach the test project that I used to isolate and reproduce this bug. Reproducible: Always Steps to Reproduce: 1. Import the attached project into Eclipse 2. Run the project with the Main.launch that is in the project root. 3. Modify the method print in the class test.weaved.Test ex. uncomment a line 4. See the console log. The changes are not reflected in the behavior. 5. Modify again the method print in the class test.weaved.Test ex. uncomment another line 6. See the console log. Now the changes are reflected in the behavior. 7. The same occurs whatever you change obviously with the limits of the Hot Code Replace imposed by the JDK</description>
    <commit commitTime="2010-05-26 22:31:02" id="cf0ee0c1ee5af17d91fe81e68b059665fe824bcd"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="314365" reportTime="2010-05-25 17:32:00">
    <summary>pointcut rewriter can have issues for large hashcode values</summary>
    <description>AJDT uses a pointcut like this: persingleton org.eclipse.ajdt.internal.ui.ras.UIFFDC &amp;amp;&amp;amp; handler java.lang.Throwable+ &amp;amp;&amp;amp; args arg1 &amp;amp;&amp;amp; within org.eclipse.ajdt..* &amp;amp;&amp;amp; !within org.eclipse.ajdt.internal.ui.lazystart..* &amp;amp;&amp;amp; !within org.eclipse.ajdt.internal.ui.dialogs.OpenTypeSelectionDialog2 &amp;amp;&amp;amp; ! within org.eclipse.ajdt.internal.ui.editor.AspectJBreakpointRulerAction &amp;amp;&amp;amp; handler org.eclipse.jface.text.BadLocationException &amp;amp;&amp;amp; ! within org.eclipse.ajdt.core.ras.FFDC+ || handler org.eclipse.core.runtime.OperationCanceledException &amp;amp;&amp;amp; !this java.lang.Object After the pointcut rewriter has chewed on it, it is reduced to a normal form. This is meant to be a stable form such that further rewrites of it would not change it. This turned out not to be the case. The hashcodes for some of the components were quite large and manifested as negative integers. The arithmetic in the comparator for the elements would have a problem and give unhelpful responses. For example, if the elements were C,B,A it might rewrite them to A,B,C but on a subsequent rewrite it would realise that C was less than A, giving B,C,A. Whether it went wrong was dependent on the order in which the elements were collected by the rewriter. This is now fixed. It impacts incremental compilation sometimes as two pointcuts that should be identical look different because one has been through the rewritter more times than the other...</description>
    <commit commitTime="2010-05-25 23:03:13" id="1e28b926584c406e4822ec153f6bac07af47771d"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/PointcutEvaluationExpenseComparator.java</file>
      <file>org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/PointcutRewriterTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="314766" reportTime="2010-05-27 15:47:00">
    <summary>NPE when using aop.xml for compile time config</summary>
    <description>Reported on the list: java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelWorld.isAspectIncluded BcelWorld.java:942 at org.aspectj.weaver.ShadowMunger.match ShadowMunger.java:80 at org.aspectj.weaver.Advice.match Advice.java:106 at org.aspectj.weaver.bcel.BcelAdvice.match BcelAdvice.java:149 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:3108 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2562</description>
    <commit commitTime="2010-05-27 20:11:51" id="0e5ecd3dcd9e4fb7a4e82f1f96b9439c4c613a16"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/Advice.java</file>
    </fixedFiles>
  </bug>
  <bug id="314840" reportTime="2010-05-28 07:00:00">
    <summary>[plan] ArrayIndexOutOfBoundsException - annotation style joinpoints</summary>
    <description>Build Identifier: I20100429-1549 Internal compiler error java.lang.ArrayIndexOutOfBoundsException: 3 at org.aspectj.weaver.bcel.BcelWeaver.validateSingleBranchRecursion BcelWeaver.java:836 at org.aspectj.weaver.bcel.BcelWeaver.validateSingleBranchRecursion BcelWeaver.java:819 at org.aspectj.weaver.bcel.BcelWeaver.validateSingleBranchRecursion BcelWeaver.java:818 at org.aspectj.weaver.bcel.BcelWeaver.validateSingleBranch BcelWeaver.java:785 at org.aspectj.weaver.bcel.BcelWeaver.validateBindings BcelWeaver.java:732 at org.aspectj.weaver.bcel.BcelWeaver.rewritePointcuts BcelWeaver.java:652 at org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave BcelWeaver.java:540 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.ensureWeaverInitialized AjPipeliningCompilerAdapter.java:472 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:452 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving AjPipeliningCompilerAdapter.java:390 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:375 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after $org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:98 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:652 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:392 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1022 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:305 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:185 at org.aspectj.ajde.core.internal.AjdeCoreBuildManager.performBuild AjdeCoreBuildManager.java:127 at org.aspectj.ajde.core.AjCompiler.build AjCompiler.java:88 at org.eclipse.ajdt.core.builder.AJBuilder.build AJBuilder.java:245 at org.eclipse.core.internal.events.BuildManager$2.run BuildManager.java:629 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:42 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:172 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:203 at org.eclipse.core.internal.events.BuildManager$1.run BuildManager.java:255 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:42 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:258 at org.eclipse.core.internal.events.BuildManager.basicBuildLoop BuildManager.java:311 at org.eclipse.core.internal.events.BuildManager.build BuildManager.java:343 at org.eclipse.core.internal.events.AutoBuildJob.doBuild AutoBuildJob.java:144 at org.eclipse.core.internal.events.AutoBuildJob.run AutoBuildJob.java:242 at org.eclipse.core.internal.jobs.Worker.run Reproducible: Always Steps to Reproduce: Compile these classes -----------Aspect------------- package com.test; import org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.annotation.Around; import org.aspectj.lang.annotation.Pointcut; public aspect Arguments { @Pointcut "execution @Test * * .. &amp;amp;&amp;amp; @annotation test &amp;amp;&amp;amp; @within test1 &amp;amp;&amp;amp; this test2 " public void unit Test2 test2, Test1 test1, Test test { } @Around "execution @Test * * .. &amp;amp;&amp;amp; @annotation test &amp;amp;&amp;amp; @within test1 &amp;amp;&amp;amp; this test2 " public void test ProceedingJoinPoint pjp, Test test2, Test1 test1, Test test { } -----------Annotation------------- package com.test; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Retention RetentionPolicy.RUNTIME @Target { ElementType.METHOD } public @interface Test { } -----------Annotation------------- package com.test; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Retention RetentionPolicy.RUNTIME @Target { ElementType.METHOD } public @interface Test1 { } -----------Class------------- package com.test; public class Test2 { } }</description>
    <commit commitTime="2010-05-28 20:51:43" id="ae2c1d7e25dbacbfe10374bb02caa9d0ae47642a"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/Advice.java</file>
    </fixedFiles>
  </bug>
  <bug id="315398" reportTime="2010-06-02 10:18:00">
    <summary>Verify Error</summary>
    <description>A simple method: static void f { new Test a[0]++ ; } woven with a simple advice: after returning Object obj : call *.new .. &amp;amp;&amp;amp; scope .. { // do something } Causes a Verify Error both statically and LTW woven The bytecodes before weaving: static void f ; Code: 0: new #2; //class Test 3: dup 4: getstatic #3; //Field a:[I 7: iconst_0 8: dup2 9: iaload 10: dup_x2 11: iconst_1 12: iadd 13: iastore 14: invokespecial #4; //Method "&amp;lt;init&amp;gt;": I V 17: pop 18: return and after weaving: static void f ; Code: 0: getstatic #10; //Field a:[I 3: iconst_0 4: dup2 5: iaload 6: dup 7: iconst_1 8: iadd 9: iastore 10: istore_0 11: new #1; //class Test 14: dup 15: iload_0 16: invokespecial #28; //Method "&amp;lt;init&amp;gt;": I V 19: dup 20: astore_1 21: invokestatic #37; //Method AllocProf.aspectOf: LAllocProf; 24: aload_1 25: invokevirtual #41; //Method AllocProf.ajc$afterReturning$AllocProf$1$1858a042: Ljava/lang/Object; V 28: nop 29: pop 30: return } and the Error: "Exception in thread "main" java.lang.VerifyError: class: Test, method: f signature: V Expecting to find array of ints on stack." It seems that the instructions are reordered call to new moved, argument stored/loaded at some point the stack is left in an inconsistent state... I think the dup at pos 14 should be a dup_x2 instead...</description>
    <commit commitTime="2011-04-28 17:55:43" id="4e8c139e3ec3aba077608eb8d7375651a5979d76"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc1612/Ajc1612Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="315651" reportTime="2010-06-03 15:02:00">
    <summary>wacky program causes unhelpful infinite loop</summary>
    <description>reported on the list by Eric Tanter: package test; public aspect Profiling { pointcut profile : execution * *.* .. ; private pointcut scope : if condition //&amp;amp;&amp;amp; ! execution * *.condition &amp;lt;- uncomment and infinite loop disappears &amp;amp;&amp;amp; !cflow execution * *.condition ; public static boolean condition { return Math.random &amp;lt;2 ; //always true } before : profile &amp;amp;&amp;amp; scope { System.out.println "Entering method "+thisJoinPointStaticPart.getSignature ; } } package test; public class Main { private static int plus int first, int second { return first + second; } public static void main String[] args { int num = plus 42,13 ; System.out.println num ; } } this loops infinitely unless the commented out section is uncommented.</description>
    <commit commitTime="2010-06-03 19:36:03" id="193e5449c987e952f5feeec47f76e3944660a0fe"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/PointcutEvaluationExpenseComparator.java</file>
    </fixedFiles>
  </bug>
  <bug id="317139" reportTime="2010-06-17 01:50:00">
    <summary>NullPointerException during weaving</summary>
    <description>Created attachment 172090 [details] AspectJ compile log Using the Maven plugin to compile aspects into my code I get the following exception: … ---- Exception Information --- java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelObjectType.ensureGenericSignatureUnpacked BcelObjectType.java:823 at org.aspectj.weaver.bcel.BcelObjectType.getSuperclass BcelObjectType.java:228 at org.aspectj.weaver.ReferenceType.getSuperclass ReferenceType.java:905 at org.aspectj.weaver.bcel.AtAjAttributes.handleAspectAnnotation AtAjAttributes.java:490 at org.aspectj.weaver.bcel.AtAjAttributes.readAj5ClassAttributes AtAjAttributes.java:234 … I have attached the complete log as attachment.</description>
    <commit commitTime="2010-06-29 00:07:59" id="92a52a21be71734cfe05dc6a8fdbc8a14beba467"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
    </fixedFiles>
  </bug>
  <bug id="317743" reportTime="2010-06-23 15:28:00">
    <summary>import handling and type lookup issues</summary>
    <description>Raised by Peter Melnikov on the mailing list. Two problems: 1 the binding scope being used for annotation style aspects accumulates lots of duplicate import prefixes in the SimpleScope object. 2 SimpleScope.lookupType tries the prefixes even if the type is already fully qualified. The combination of these issues causes a terrible mess. Lots of class lookup failures. Since the type cannot be 'partially qualified' it is silly to use the prefixes if the type is fully qualified.</description>
    <commit commitTime="2010-06-29 00:12:05" id="767bb859f169094181618e45651ed04697e735b4"/>
    <fixedFiles>
      <file>org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/PatternsTests.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/BindingScope.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildTypePattern.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/IScope.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/SimpleScope.java</file>
      <file>org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/TypePatternTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="318241" reportTime="2010-06-28 16:24:00">
    <summary>declare parents with annotations and annotation values can cause problems</summary>
    <description>Issue found in a Roo project. There is a problem if an annotation value is of this form: Class&amp;lt;? extends Something&amp;gt; value and there are 2 kinds of aspect around. The first is a declare parents matching on existence of an annotation, the second is making certain types extend 'Something'. If the type specified for an annotation value hasn't yet been through declare parents that adds 'Something' then at the point the annotation is resolved to satisfy the other declare parents we will find a bounds violation.</description>
    <commit commitTime="2010-06-29 00:11:18" id="64940fd90b5a86aa4dfb1b4d5e271d5018e09b18"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java</file>
    </fixedFiles>
  </bug>
  <bug id="318397" reportTime="2010-06-29 20:15:00">
    <summary>Caching in EclipseSourceType is too aggressive</summary>
    <description>In fixing a recent Roo related issue where annotations are resolved too early, before declare parents are done a cache was introduced into EclipseSourceType see ensureAnnotationTypesResolved . The cache needs to be cleared if the set of annotation declarations changes - this can occur even after parsing because declare annotation can change them.</description>
    <commit commitTime="2010-06-30 00:20:30" id="fe049eacaf0c2befba6e617aac2d7387548f5f24"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java</file>
    </fixedFiles>
  </bug>
  <bug id="318878" reportTime="2010-07-05 07:23:00">
    <summary>Pertarget aspect instantiation is not thread-safe</summary>
    <description>The way in which pertarget aspects compiled with ajc check if a given target already has an aspect is not thread safe. When two different threads trigger an advice on a target object for the first time at the same time, sometimes the aspect for that target gets created twice. The following code demonstrates the problem: The following pertarget aspect will add itself to a synchronized set in another class in it's constructor. aspect Pertarget pertarget execution void foo { public Pertarget { Main.aspects.add this ; // Add this instance to the set in Main } before : execution void foo {} // Empty advice to trigger creation } This class creates 10000 target objects and has two separate threads call a method that causes the aspect to be instantiated on each object. The aspects add themselves to the "aspects" set and this set's size is printed when all threads have finished. import java.util.Collections; import java.util.IdentityHashMap; import java.util.Set; public class Main { public static Set aspects = Collections.synchronizedSet Collections.newSetFromMap new IdentityHashMap ; public static void main String[] args throws InterruptedException { for int i = 0; i &amp;lt; 10000; ++i { final Main m = new Main ; // Create a new target for the aspect Runnable r = new Runnable { public void run { m.foo ; } // This will trigger the advice }; Thread t1 = new Thread r ; Thread t2 = new Thread r ; t1.start ; t2.start ; t1.join ; t2.join ; } System.out.println aspects.size ; // Should be 10000 } private void foo {} } When compiled with ajc and run, the main method prints values over 10000 something like 10030-10060 typically , which means that some target objects get multiple aspect instances. In my own application I sometimes also saw some threads accessing partially built aspect instances. This was quite rare however and I wasn't able to make a test case for it. The ajc version the current stable used was: AspectJ Compiler 1.6.8 1.6.8 - Built: Friday Jan 8, 2010 at 21:53:37 GMT - Eclipse Compiler 0.785_R33x, 3.3 The sun vm version was: Java TM SE Runtime Environment build 1.6.0_20-b02 Java HotSpot TM 64-Bit Server VM build 16.3-b01, mixed mode I investigated the source of this problem: the ajc compiler generates the following decompiled method into the aspect class: public static void ajc$perObjectBind Object obj { if obj instanceof ajcMightHaveAspect &amp;amp;&amp;amp; ajcMightHaveAspect obj .perObjectGet == null ajcMightHaveAspect obj .perObjectSet new Pertarget ; } , which obviously is not thread safe.</description>
    <commit commitTime="2013-02-25 15:18:12" id="be5a53001fda264fc8fdebe7d2b64c20e748e51c"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/AjcMemberMaker.java</file>
    </fixedFiles>
  </bug>
  <bug id="318884" reportTime="2010-07-05 08:07:00">
    <summary>AJDT incremental compile does not update errors in Java files correctly</summary>
    <description>Build Identifier: Eclipse platform 3.5.2 : M20100211-1343 AJDT: 2.1.0.e35x-release-20100630-1500 When a Java project is converted to an "AspectJ" project, the default Java builder is replaced with an AJDT enhanced this builder. When Java files are modified, some compile errors are not updated correctly, giving false positives or negatives for the developer i.e. a warning/error is not shown, or not removed when expected . Workaround is to clean the project manually to make sure no compile errors are present. This is of course very annoying and error prone, and basically means incremental compilation is broken for AspectJ enabled projects. Reproducible: Always Steps to Reproduce: I've included a sample project, see the attachment. 1. PlainJava depends on JavaClassWithPointsApplied. Open JavaClassWithPointsApplied and add " throws IOException" to publicFoo method. 2. The problems view/package explorer does NOT show the problem in PlainJava does not catch IOException . 3. Open PlainJava. The error marker is now shown. Note that some other operations removing the method, for instance , does update correctly.</description>
    <commit commitTime="2010-07-05 22:16:22" id="a369bf2ec8cef42e73bd5d6113f428ff9d202764"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/AllTests15.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/AbstractMultiProjectIncrementalAjdeInteractionTestbed.java</file>
    </fixedFiles>
  </bug>
  <bug id="318899" reportTime="2010-07-05 10:24:00">
    <summary>NPE with @args matching Argument by Type</summary>
    <description>Build Identifier: This bug is related to Bug 257833 . I'm wondering why nobody has faced and reported that bug before?!?! This is the top of the stacktrace i get: java.lang.NullPointerException at org.aspectj.weaver.reflect.ShadowMatchImpl$RuntimeTestEvaluator.visit ShadowMatchImpl.java:140 at org.aspectj.weaver.ast.Instanceof.accept Instanceof.java:29 at org.aspectj.weaver.reflect.ShadowMatchImpl$RuntimeTestEvaluator.matches ShadowMatchImpl.java:121 at org.aspectj.weaver.reflect.ShadowMatchImpl.matchesJoinPoint ShadowMatchImpl.java:78 This bug occurs in aspectJ 1.6.1 and 1.6.8 so i think all versions in between are affected as well. I'm using aspectJ together with Spring 2.5.6 but i think that does not matter. Expected behavior: When using @Before "args myId,.. " to match all methods that have an argument of type MyInterface as first argument see steps to reproduce , the methods declared argument types should be used to determine if the method matches when null is passed as first argument. Actual Behavior: NullPointerException is thrown from org.aspectj.weaver.reflect.ShadowMatchImpl$RuntimeTestEvaluator.visit ShadowMatchImpl.java:140 . Note: Everything works fine if null is not used as first argument. That means if your first argument is never null you'll get no exception and everything works as expected. But if there is one method you don't want to match/intercept that gets null as it's first argument the runtime exception occurs. Reproducible: Always Steps to Reproduce: 1. define an interface MyInterface 2. define a pointcut / empty advice using "@args myId ", e.g. @Before "args myId,.. " public void startsMyIdArgument final JoinPoint jp, final MyInterface myId { }; 3. call a method of an intercepted class with the first argument being null and you'll get a NullPointerException</description>
    <commit commitTime="2010-09-01 04:19:01" id="2a8d684a678b1761acbe081bc1ddad3d3c9c405e"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/reflect/ShadowMatchImpl.java</file>
      <file>org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/ThisOrTargetTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="319114" reportTime="2010-07-07 08:02:00">
    <summary>Concurrent access to non-thread safe WeakHashMap in org.aspectj.weaver.Dump causes infinite loops</summary>
    <description>This bug seems to have the same root cause as bug 220686 and bug 269867 . The nodes map in org.aspectj.weaver.Dump is a non-thread safe WeakHashMap. On a multithreaded environment, concurrent access to this map can cause corruption and lead to infinite loops accessing it. The solution for this problem should be similar to those for bugs 220686 and bug 269867 , decorating the nodes WeakHashMap with Collections.synchronizedMap On a Weblogic 10.0 environment we are seeing many threads stuck while accessing the nodes map: java.util.WeakHashMap.put WeakHashMap.java:397 org.aspectj.weaver.Dump.registerNode Dump.java:247 org.aspectj.weaver.World.&amp;lt;init&amp;gt; World.java:157 org.aspectj.weaver.reflect.ReflectionWorld.&amp;lt;init&amp;gt; ReflectionWorld.java:54 org.aspectj.weaver.tools.PointcutParser.setClassLoader PointcutParser.java:229 org.aspectj.weaver.reflect.InternalUseOnlyPointcutParser.&amp;lt;init&amp;gt; InternalUseOnlyPointcutParser.java:23 org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.getDeclaredPointcuts Java15ReflectionBasedReferenceTypeDelegate.java:256 org.aspectj.weaver.ReferenceType.getDeclaredPointcuts ReferenceType.java:538 org.aspectj.weaver.ResolvedType$7.get ResolvedType.java:482 org.aspectj.weaver.Iterators$3$1.hasNext Iterators.java:118 org.aspectj.weaver.Iterators$3.hasNext Iterators.java:128 org.aspectj.weaver.ResolvedType.findPointcut ResolvedType.java:493 org.aspectj.weaver.patterns.ReferencePointcut.resolveBindings ReferencePointcut.java:152 org.aspectj.weaver.patterns.Pointcut.resolve Pointcut.java:196 org.aspectj.weaver.tools.PointcutParser.resolvePointcutExpression PointcutParser.java:332 org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression PointcutParser.java:310</description>
    <commit commitTime="2010-07-07 16:27:25" id="d0c72683fea4a4d0b8bdd936e1865e48ccafe718"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/reflect/ShadowMatchImpl.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/World.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/Dump.java</file>
    </fixedFiles>
  </bug>
  <bug id="319190" reportTime="2010-07-07 16:31:00">
    <summary>operator precedence messed up in some pointcuts</summary>
    <description>Some pointcuts are not quite parsed correctly and give the impression that &amp;amp;&amp;amp; and || have the same precedence. Example: execution * A.credit float || execution * A.debit float &amp;amp;&amp;amp; this acc &amp;amp;&amp;amp; args am || execution * C.* Account, float &amp;amp;&amp;amp; args acc, am</description>
    <commit commitTime="2010-07-07 21:01:58" id="78f3cea0b721fee69e57f6b5d5ccb810bcd53ad2"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/ReferencePointcut.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/Pointcut.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/PatternParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="319431" reportTime="2010-07-09 16:36:00">
    <summary>bug in deserialization of uncompressed WeaverStateInfo</summary>
    <description>Recently in 1.6.10 dev builds we are moving back to a mode where WeaverStateInfo is not compressed. Although the non-compressed form is supported, it doesn't quite behave in one small respect. The WeaverStateInfo encapsulates the list of aspects affecting a type. When compression is turned off there was a bug in the reading code that didn't correctly process what had been written - it was left over from some attempts to change the format and looks like the writing code had been tidied up but this reader code had not. Unfortunately as compression was the default for 1.6.9, all testing was run with compression ON and this was not found. What is the impact? The list of aspects is used in two places, reweaving and overweaving. When reweaving the list is used to confirm the right aspects are around for reweaving to succeed. When overweaving the list is used to prevent aspects being applied twice. The most serious impact of this bug is on overweaving.</description>
    <commit commitTime="2010-07-12 19:21:05" id="fdbd12e319a0c18c40906780b372fa3cfb573fe4"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/AllTests16.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc1610/Ajc1610Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="320425" reportTime="2010-07-20 13:37:00">
    <summary>Refactor IntertypeElement so that it is abstract</summary>
    <description>The IntertypeElement class should be abstract with 2 concrete sub-types: IntertypeFieldElement and IntertypeMethodElement. IntertypeFieldElement should implement IField.</description>
    <commit commitTime="2010-07-23 00:19:22" id="e67c657e6e83759fa489d2426da4e74859c8a560"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/IncrementalCompilationTests.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc163/Ajc163Tests.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc161/Ajc161Tests.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc164/Ajc164Tests.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc169/IntertypeTests.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc153/JDTLikeHandleProviderTests.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc1610/Ajc1610Tests.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="320468" reportTime="2010-07-21 04:22:00">
    <summary>ModifiersPattern.getModifierFlag is not thread safe</summary>
    <description>Build Identifier: org.aspectj.weaver_1.6.0.20080423100000.jar ModifiersPattern.getModifierFlag is a non-synchronized static method using the static Map modifierFlags. This can lead to a ConcurrentModificationException when this code is executed in a multi-threaded environment. A stack trace showing the erroneous behavior is appended at the end of this bug report. In our case multithreading is introduced by using Spring DM. This leads to many application contexts being initialized in parallel. Each of them can contain pointcut expression, which are processed in independent threads. Spring AOP enters the "AspectJ world" calling PointcutParser.parsePointcutExpression . Since there is no guarantee that a ConcurrentModificationException is thrown it is also possible that concurrent read/write accesses to the modifierFlags map are not recognized and incorrect values are used. org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactoryProxy': Post-processing of the FactoryBean's object failed; nested exception is java.util.ConcurrentModificationException: concurrent access to HashMap attempted by Thread[SpringOsgiExtenderThread-43,5,spring-osgi-extender[6dee6dee]-threads] at org.springframework.beans.factory.support.FactoryBeanRegistrySupport$1.run FactoryBeanRegistrySupport.java:142 at java.security.AccessController.doPrivileged AccessController.java:219 at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean FactoryBeanRegistrySupport.java:116 at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean FactoryBeanRegistrySupport.java:91 at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance AbstractBeanFactory.java:1288 at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean AbstractBeanFactory.java:217 at org.springframework.beans.factory.support.AbstractBeanFactory.getBean AbstractBeanFactory.java:185 at org.springframework.beans.factory.support.AbstractBeanFactory.getBean AbstractBeanFactory.java:164 at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons DefaultListableBeanFactory.java:425 at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization AbstractApplicationContext.java:728 at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.access$1600 AbstractDelegatedExecutionApplicationContext.java:69 at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run AbstractDelegatedExecutionApplicationContext.java:355 at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL PrivilegedUtils.java:85 at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh AbstractDelegatedExecutionApplicationContext.java:320 at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run DependencyWaiterApplicationContextExecutor.java:136 at java.lang.Thread.run Thread.java:811 Caused by: java.util.ConcurrentModificationException: concurrent access to HashMap attempted by Thread[SpringOsgiExtenderThread-43,5,spring-osgi-extender[6dee6dee]-threads] at java.util.HashMap.onEntry HashMap.java:214 at java.util.HashMap.transfer HashMap.java:686 at java.util.HashMap.resize HashMap.java:676 at java.util.HashMap.addEntry HashMap.java:1049 at java.util.HashMap.put HashMap.java:561 at org.aspectj.weaver.patterns.ModifiersPattern.getModifierFlag ModifiersPattern.java:87 at org.aspectj.weaver.patterns.PatternParser.parseModifiersPattern PatternParser.java:1169 at org.aspectj.weaver.patterns.PatternParser.parseMethodOrConstructorSignaturePattern PatternParser.java:1248 at org.aspectj.weaver.patterns.PatternParser.parseKindedPointcut PatternParser.java:603 at org.aspectj.weaver.patterns.PatternParser.parseSinglePointcut PatternParser.java:317 at org.aspectj.weaver.patterns.PatternParser.parseAtomicPointcut PatternParser.java:295 at org.aspectj.weaver.patterns.PatternParser.parsePointcut PatternParser.java:256 at org.aspectj.weaver.tools.PointcutParser.resolvePointcutExpression PointcutParser.java:328 at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression PointcutParser.java:309 at org.springframework.aop.aspectj.AspectJExpressionPointcut.buildPointcutExpression AspectJExpressionPointcut.java:206 at org.springframework.aop.aspectj.AspectJExpressionPointcut.checkReadyToMatch AspectJExpressionPointcut.java:193 at org.springframework.aop.aspectj.AspectJExpressionPointcut.getClassFilter AspectJExpressionPointcut.java:174 at org.springframework.aop.support.AopUtils.canApply AopUtils.java:195 at org.springframework.aop.support.AopUtils.canApply AopUtils.java:250 at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply AopUtils.java:284 at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply AbstractAdvisorAutoProxyCreator.java:113 at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors AbstractAdvisorAutoProxyCreator.java:85 at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean AbstractAdvisorAutoProxyCreator.java:66 at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary AbstractAutoProxyCreator.java:362 at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization AbstractAutoProxyCreator.java:325 at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization AbstractAutowireCapableBeanFactory.java:361 at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.postProcessObjectFromFactoryBean AbstractAutowireCapableBeanFactory.java:1429 at org.springframework.beans.factory.support.FactoryBeanRegistrySupport$1.run FactoryBeanRegistrySupport.java:139 ... 15 more Reproducible: Sometimes</description>
    <commit commitTime="2010-08-26 15:20:03" id="e0e1330c6e01a878d365bff112f1c6505c7e6ebd"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/ModifiersPattern.java</file>
    </fixedFiles>
  </bug>
  <bug id="321641" reportTime="2010-08-03 14:05:00">
    <summary>No way to exclude Proxool classes although excluded from AOP. Causing Veryfy error.</summary>
    <description>Build Identifier: 20100218-1602 For aspectJ 1.6.7 the setup works, however exactly the same setup but changing the aspectJ version to 1.6.8 or 1.6.9 derive to the same error: a piece of code excluded from the aop.xml is woven causing a Verify Error. We are using Proxool, proxy setup which in fact uses CGLIB to create a EnhancerProxy class. In order to avoid VerifyError exceptions the Proxool classes are excluded from aop.xml exactly in the same way the CGLIB workarround is commented in the aspectJ FAQ: &amp;lt;exclude within="*..*Proxool*"/&amp;gt; This is the error we got when we upgrade our 1.6.7 aspejctweaver.jar to 1.6.8. The same is got when using 1.6.9: jvm 3 | 2010/08/03 16:42:53 | java.lang.VerifyError: class: oracle/jdbc/internal/OracleConnection$$EnhancerByProxool$$7f6320a8, method: getTdoCState signature: Ljava/lang/String;Ljava/lang/String; J Inconsistent stack height 1 != 0 jvm 3 | 2010/08/03 16:42:53 | at java.lang.Class.getDeclaredMethods0 Native Method jvm 3 | 2010/08/03 16:42:53 | at java.lang.Class.privateGetDeclaredMethods Class.java:2427 jvm 3 | 2010/08/03 16:42:53 | at java.lang.Class.getDeclaredMethod Class.java:1935 jvm 3 | 2010/08/03 16:42:53 | at org.logicalcobwebs.cglib.proxy.Enhancer.getCallbacksSetter Enhancer.java:627 jvm 3 | 2010/08/03 16:42:53 | at org.logicalcobwebs.cglib.proxy.Enhancer.setCallbacksHelper Enhancer.java:615 jvm 3 | 2010/08/03 16:42:53 | at org.logicalcobwebs.cglib.proxy.Enhancer.setThreadCallbacks Enhancer.java:609 jvm 3 | 2010/08/03 16:42:53 | at org.logicalcobwebs.cglib.proxy.Enhancer.createUsingReflection Enhancer.java:631 jvm 3 | 2010/08/03 16:42:53 | at org.logicalcobwebs.cglib.proxy.Enhancer.firstInstance Enhancer.java:538 jvm 3 | 2010/08/03 16:42:53 | at org.logicalcobwebs.cglib.core.AbstractClassGenerator.create AbstractClassGenerator.java:225 jvm 3 | 2010/08/03 16:42:53 | at org.logicalcobwebs.cglib.proxy.Enhancer.createHelper Enhancer.java:377 jvm 3 | 2010/08/03 16:42:53 | at org.logicalcobwebs.cglib.proxy.Enhancer.create Enhancer.java:285 .... As far as the Verify Error is got while deploying one of the applications that run on the serve we are no able to use the new versions of aspectJ because the application is not properly started up. Thank you very much in advance, Best regards. Reproducible: Always Steps to Reproduce: 1.Exclude Proxool classes from aop.xml using aspectj 1.6.7. It works 2.Upgrade to 1.6.8: it does not work. 3.Upgrade to 1.6.9: it does not work.</description>
    <commit commitTime="2010-08-10 15:11:54" id="85fd25dc91475e6b9926b5c740f73b994eb84a49"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
      <file>loadtime/testsrc/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptorTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="322039" reportTime="2010-08-06 19:47:00">
    <summary>Fully qualified ITD has incorrect handle identifier</summary>
    <description>In the following aspect: public aspect Aspect { public void q2.ThisClass.something2 {} } In aspectJ, the ITD has the following handle identifier notice that the ITD name is not fully qualified : =AspectJ Project/src2&amp;lt;p*Aspect.aj'Aspect ThisClass.something2 However, it should be with fully qualified name : =AspectJ Project/src2&amp;lt;p*Aspect.aj'Aspect q2.ThisClass.something2 This means that fully qualified ITDs cannot be navigated to or searched. I'm a little surprised that this doesn't work because I thought I had tests for it...</description>
    <commit commitTime="2010-08-18 17:29:04" id="6b35ea418d5523a05eb591eec4cb30742b6649b6"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="322272" reportTime="2010-08-10 15:08:00">
    <summary>unable to inherit and successfully weave a declare anno from an abstract aspect</summary>
    <description>Discovered by Thomas Risberg. multipart problem. First problem is that BinaryTypeBindings deliberately discard synthetic methods when populating their method tables. This means declare annotation is not processed it is marked synthetic , since it is not there it cannot be found by the lookup code that wants to discover the annotation.</description>
    <commit commitTime="2010-08-10 23:48:19" id="36c91148128afe51181cea40c70866e6e21dd64e"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc1610/Ajc1610Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="322664" reportTime="2010-08-13 11:15:00">
    <summary>fixing a broken generic type can give an IllegalStateException</summary>
    <description>Revealed by this program: public abstract aspect AbstractAspect&amp;lt;S, T&amp;gt; { declare parents : Class extends S; declare parents : Class extends T; } aspect Aspect extends AbstractAspect&amp;lt;X, Y&amp;gt; { /* void something X x { something new Class ; } void something2 Y y { something2 new Class ; }*/ } interface X { } interface Y { } class Class { } 1. save it like that 2. change AbstractAspect to remove ',T' from the declaration - results in error on save 3. fix the error add ', T' back again and save, IllegalStateException</description>
    <commit commitTime="2010-08-13 15:42:38" id="67189542cd8d2718de8b545c8bea0c8d81cfff9c"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java</file>
    </fixedFiles>
  </bug>
  <bug id="322832" reportTime="2010-08-16 15:33:00">
    <summary>early field resolution leading to problems for ITDs when declare parents in use</summary>
    <description>I have a type that is being used where a generic is being expected. That generic specifies an upper bound. The type only obeys the upper bound once a declare parents has applied to it. I have an intertype declaration a field . When the ITD is applied we do some work to see if it clashes with existing fields. This causes existing fields to be resolved. If this resolution triggers a bounds check for the declare parents affected type before the declare parents has applied, a problem will be raised. Basically if the target of the declare is processed before the intertype then we are ok, but that is luck based. We should do the declare parents first and declare annotation and then do intertype declarations since they may trigger this extra resolution .</description>
    <commit commitTime="2010-08-16 19:52:25" id="16adee6b2928350a3c469de0d051c6d9c10dc5a3"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
    </fixedFiles>
  </bug>
  <bug id="323417" reportTime="2010-08-23 13:44:00">
    <summary>Sometimes StackOverflow is got while weaving</summary>
    <description>Build Identifier: 1.6.10 While weaving LifeRay 6.0.5 over tomcat 6.0.26 sometimes the next exceptions appear: java.lang.StackOverflowError at java.lang.String.indexOf String.java:1521 at org.aspectj.weaver.TypeFactory.createTypeFromSignature TypeFactory.java:199 at org.aspectj.weaver.UnresolvedType.forSignature UnresolvedType.java:375 at org.aspectj.weaver.UnresolvedType.getRawType UnresolvedType.java:533 at org.aspectj.weaver.ResolvedType.getRawType ResolvedType.java:2400 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:430 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:399 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:430 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:399 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:430 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:399 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:430 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:399 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:430 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:399 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:430 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:399 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:430 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:399 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:430 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:399 ... Reproducible: Sometimes</description>
    <commit commitTime="2010-08-25 01:46:42" id="f631ad6e4e37f43bfae556fc966e6ab0d7ee38bf"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/World.java</file>
    </fixedFiles>
  </bug>
  <bug id="323438" reportTime="2010-08-23 16:20:00">
    <summary>Minor improvements</summary>
    <description>Build Identifier: 1.6.10 I believe it would be interesting, according to Andy's suggestions, to: 1 Use LDC instead of classForName if Java 1.5 enabled. 2 Collapse calls to makeSJP avoiding calling to makeMethodSig when the flag is enabled. 3 Create a new makeSJP method not including exceptions when exceptions are not returned by the woven methods. These modifications may improve LTW time, define time and reduce woven class size. Find attached the patchs for the modifications including unitary tests. Thanks and regards. Reproducible: Always</description>
    <commit commitTime="2010-08-23 20:44:10" id="11233625c4e591a76fb7283a31fc38457fe1f3ad"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/InstructionFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="323634" reportTime="2010-08-25 12:40:00">
    <summary>NPE parameterizing perclause</summary>
    <description>java.lang.NullPointerException at org.aspectj.weaver.ReferenceType.getPerClause ReferenceType.java:823 at org.aspectj.weaver.patterns.PerFromSuper.lookupConcretePerClause PerFromSuper.java:82 at org.aspectj.weaver.patterns.PerFromSuper.concretize PerFromSuper.java:61 at org.aspectj.weaver.CrosscuttingMembers.setPerClause CrosscuttingMembers.java:512 at org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers ResolvedType.java:748 ... oBuildJob.run AutoBuildJob.java:242 at org.eclipse.core.internal.jobs.Worker.run Worker.java:54</description>
    <commit commitTime="2010-08-25 16:41:33" id="ce16a06749d562fd123e4ecb984ec3a5a8cf5a94"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java</file>
    </fixedFiles>
  </bug>
  <bug id="324135" reportTime="2010-08-31 16:50:00">
    <summary>ArrayIndexOutOfBoundsException at AjState.java:1767</summary>
    <description>Build Identifier: 20100617-1415 Using AspectJ version: 1.6.10.20100817163700 I hit the blow exception after saving a edited java file. java.lang.ArrayIndexOutOfBoundsException at org.aspectj.ajdt.internal.core.builder.AjState.hasStructuralChanges AjState.java:1767 at org.aspectj.ajdt.internal.core.builder.AjState.recordClassFile AjState.java:1510 at org.aspectj.ajdt.internal.core.builder.AjState.noteResult AjState.java:1322 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$3.acceptResult AjBuildManager.java:1049 at org.aspectj.ajdt.internal.compiler.AjPipeli ... b.run AutoBuildJob.java:242 at org.eclipse.core.internal.jobs.Worker.run Worker.java:54 Compile error: ArrayIndexOutOfBoundsException thrown: 14 Reproducible: Didn't try</description>
    <commit commitTime="2010-09-01 00:29:30" id="88fab6ad42f17bce86217d0b0fd6525dd5953bc4"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</file>
    </fixedFiles>
  </bug>
  <bug id="324190" reportTime="2010-09-01 09:15:00">
    <summary>NullPointerException in AjBuildManager.findOutputDirsForAspects when compiling AspectJ project generated with Maven</summary>
    <description>Build Identifier: 20100617-1415 When I compile my AspectJ project, I get an AspectJ Internal Compiler Error. The stack trace is : java.lang.NullPointerException at org.aspectj.ajdt.internal.core.builder.AjBuildManager.findOutputDirsForAspects AjBuildManager.java:725 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.writeOutxmlFile AjBuildManager.java:652 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:181 at org.aspectj.a ... on$1.run GlobalBuildAction.java:179 at org.eclipse.core.internal.jobs.Worker.run Worker.java:54 I digged a bit and looked into the classes. It would seem that AjState.getAspectNamesToFileNameMap can return null in AjBuildManager.findOutputDirsForAspects. It is taken in account when AjBuildConfig.getCompilationResultDestinationManager returns null or a list with one element, but not when it returns a list with several elements. Reproducible: Always Steps to Reproduce: Always happen in my configuration, but I didn't try to make it happen again in another workspace. Here are the steps I followed. 1. Generate a AspectJ project with Maven using the pom.xml I'll join 2. Create an aspect with a few pointcuts and a few advices 3. Compile not with maven, the Eclipse compilation</description>
    <commit commitTime="2010-09-01 15:00:33" id="03c43f5ca578273b8f94d5caf7b92718f84cd911"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="324804" reportTime="2010-09-08 18:30:00">
    <summary>NullPointerException at AspectJElementHierarchy.java:677</summary>
    <description>Build Identifier: 20100617-1415 After removing a "throws" clause from the constructor of a class and then saving I got the following error: java.lang.NullPointerException at org.aspectj.asm.internal.AspectJElementHierarchy.getCanonicalFilePath AspectJElementHierarchy.java:677 at org.aspectj.asm.internal.AspectJElementHierarchy.updateHandleMap AspectJElementHierarchy.java:641 at org.aspectj.asm.AsmManager.removeStructureModelForFiles AsmManager.java:572 at org.aspectj.asm.AsmManager.processDelta AsmManager.java:604 at org.aspectj.ajdt.internal.core.builder.AjBuildManager ... oBuildJob.run AutoBuildJob.java:242 at org.eclipse.core.internal.jobs.Worker.run Worker.java:54 Compile error: NullPointerException thrown: null Reproducible: Didn't try</description>
    <commit commitTime="2010-09-09 16:24:43" id="6249672405e8d1303ea9087f35b72114586f0aad"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java</file>
    </fixedFiles>
  </bug>
  <bug id="325731" reportTime="2010-09-20 06:41:00">
    <summary>ReferenceType.makeDeclaredSignature ClassCastException</summary>
    <description>On refactoring code, a dialog showing AspectJ Ineternal Compiler error. Stack trace followed java.lang.ClassCastException at org.aspectj.weaver.ReferenceType.makeDeclaredSignature ReferenceType.java:1033 at org.aspectj.weaver.ReferenceType.getSignatureForAttribute ReferenceType.java:124 at org.aspectj.weaver.bcel.LazyClassGen.fixupGenericSignatureAttribute LazyClassGen.java:616 at org.aspectj.weaver.bcel.LazyClassGen.writeBack LazyClassGen.java:509 at org.aspectj.weaver.bcel.LazyClassGen.getJavaClassBytesIncludingReweavable ... Compile error: ClassCastException thrown: org.aspectj.weaver.MissingResolvedTypeWithKnownSignature cannot be cast to org.aspectj.weaver.ReferenceType</description>
    <commit commitTime="2011-04-28 16:37:47" id="6bfec8fd15f67679d6073cf6ee555d18253c4ef3"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java</file>
    </fixedFiles>
  </bug>
  <bug id="327134" reportTime="2010-10-06 12:12:00">
    <summary>Cant suppress raw types warning in a pointcut</summary>
    <description>Build Identifier: I20100608-0911 Generic type used in a pointcut and bound to target or this must omit actual type name and thus causes 'raw type must be parametrized' compiler warning. @SuppressAJWarning or @SuppressWarning annotations does not turn it off Reproducible: Always Steps to Reproduce: Code snippets: pointcut IVOListUpdate IVOList list : &amp;amp;&amp;amp; target list &amp;amp;&amp;amp; call void updateList * ; public interface IVOList&amp;lt;T extends IValueObject&amp;gt; extends List&amp;lt;T&amp;gt;, Externalizable, Serializable { void updateList List&amp;lt;T&amp;gt; newList ; } public interface IValueObject extends Comparable&amp;lt;IValueObject&amp;gt;, Serializable { }</description>
    <commit commitTime="2011-04-28 15:36:50" id="199299c195c2e24edab2990e1cb9004b2d712ac3"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc1612/Ajc1612Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="327141" reportTime="2010-10-06 13:31:00">
    <summary>ClassCastException in compiler when declare annotation on a constant field</summary>
    <description>Compile this aspect; public aspect AspectWithConstant { declare @field : int AspectWithConstant.MAX : @Loggable; public static final int MAX = 9; @interface Loggable { } } I get the following aspectj bug: java.lang.ClassCastException: org.aspectj.apache.bcel.classfile.ConstantInteger at org.aspectj.apache.bcel.generic.FieldGen.setValue FieldGen.java:129 at org.aspectj.apache.bcel.generic.FieldGen.&amp;lt;init&amp;gt; FieldGen.java:111 at org.aspectj.weaver.bcel.BcelField.getField BcelField.java:207 at org.aspectj.weaver.bcel.LazyClassGen.writeBack LazyClassGen.java:499 at org.aspectj.weaver.bcel.LazyClassGen.getJavaClassBytesIncludingReweavable LazyClassGen.java:674 at org.aspectj.weaver.bcel.BcelWeaver.getClassFilesFor BcelWeaver.java:1421 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1383 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1173 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:514 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving AjPipeliningCompilerAdapter.java:447 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:432 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:98 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:652 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:392 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1019 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:268 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:181 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:316 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:185 at org.aspectj.ajde.core.internal.AjdeCoreBuildManager.performBuild AjdeCoreBuildManager.java:127 at org.aspectj.ajde.core.AjCompiler.build AjCompiler.java:88 at org.eclipse.ajdt.core.builder.AJBuilder.build AJBuilder.java:245 at org.eclipse.core.internal.events.BuildManager$2.run BuildManager.java:629 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:42 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:172 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:203 at org.eclipse.core.internal.events.BuildManager$1.run BuildManager.java:255 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:42 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:258 at org.eclipse.core.internal.events.BuildManager.basicBuildLoop BuildManager.java:311 at org.eclipse.core.internal.events.BuildManager.build BuildManager.java:343 at org.eclipse.core.internal.events.AutoBuildJob.doBuild AutoBuildJob.java:144 at org.eclipse.core.internal.events.AutoBuildJob.run AutoBuildJob.java:242 at org.eclipse.core.internal.jobs.Worker.run Worker.java:54</description>
    <commit commitTime="2011-10-03 22:40:58" id="04de50018188c4602ea3af5298715544f6f0faa1"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc1612/Ajc1612Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="327867" reportTime="2010-10-15 05:28:00">
    <summary>AspectJ should by default ignore methods with a "synthetic" modifier label or the method modifier pattern should support it.</summary>
    <description>It looks like ModifiersPattern class needs to be updated to support exclusion of synthetic methods in pointcuts though I would question why by default AspectJ allows such methods to be instrumented in the first place. It would probably be better to disable this and have an X flag to enable it in the exclusion set. If not can we have the code below updated to allow "synthetic" to be specified in particular "!synthetic" in a point cut. Today it does not work because of a parser exception caused by it not being in the map below. static { modifierFlags = new HashMap&amp;lt;String, Integer&amp;gt; ; int flag = 1; while flag &amp;lt;= Modifier.STRICT { String flagName = Modifier.toString flag ; modifierFlags.put flagName, new Integer flag ; flag = flag &amp;lt;&amp;lt; 1; } } public static final int STRICT = 0x00000800; // Bits not yet exposed in the public API either because they // have different meanings for fields and methods and there is no // way to distinguish between the two in this class, or because // they are not Java programming language keywords static final int BRIDGE = 0x00000040; static final int VARARGS = 0x00000080; static final int SYNTHETIC = 0x00001000; static final int ANNOTATION= 0x00002000; static final int ENUM = 0x00004000; static boolean isSynthetic int mod { return mod &amp;amp; SYNTHETIC != 0; }</description>
    <commit commitTime="2011-05-02 19:37:31" id="bb6854506626d0375a6fa8bb9be271601f8c366b"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/ModifiersPattern.java</file>
    </fixedFiles>
  </bug>
  <bug id="328099" reportTime="2010-10-19 04:11:00">
    <summary>AspectJ LTW should honor the ProtectionDomain</summary>
    <description>Build Identifier: We are having problem running the AspectJ LTW whith signed jars. It appears to be that the LTW is not honoring the ProtectionDomain when creating the inner classes of the woven class, i.e. $AjcClosure1. Reproducible: Always Steps to Reproduce: Instructions on how to reproduce the problem with the attached zip-file Prerequisites: - Maven 2 installed - java should be on the path 1. Compile and package &amp;gt; mvn clean package 2. Run without signing the jar &amp;gt; mvn exec:exec ==&amp;gt; "pre...Foo.bar ...post" is written on stdout. 3. Sign the jar &amp;gt; mvn jarsigner:sign 4. Run again &amp;gt; mvn exec:exec ==&amp;gt; ClassNotFoundException!!!</description>
    <commit commitTime="2011-05-02 18:38:42" id="df8d0534cd22effae9dfadc68f7c4bd553f9bb24"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/JRockitAgent.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassPreProcessor.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Aj.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="328121" reportTime="2010-10-19 08:29:00">
    <summary>missing relationship map entry for declare @method</summary>
    <description>There is no entry in the relmap for this program: package TestRequirements; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; @Retention RetentionPolicy.RUNTIME @interface AnnotatedMethod {} @Retention RetentionPolicy.RUNTIME @interface NewAnnotatedMethod { boolean newValue ; } aspect X { declare @method: !@AnnotatedMethod * TestRequirements.* .. : @NewAnnotatedMethod newValue = true ; } class TestRequirements { @AnnotatedMethod public void dontMatchMe {} public void matchMe {} }</description>
    <commit commitTime="2011-04-28 19:59:35" id="35409d862033981f275c9150f97023de411c1048"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="328649" reportTime="2010-10-25 15:25:00">
    <summary>Support registering additional dependencies from compilation participants</summary>
    <description>A compilation participant can add new dependencies to a file, we should support this in the AjState object and surface it through the AjCompiler</description>
    <commit commitTime="2010-10-25 20:04:54" id="e56f7c4fb6847e624dc2dc63b3e3c6bedaf3b7be"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</file>
    </fixedFiles>
  </bug>
  <bug id="328840" reportTime="2010-10-27 11:04:00">
    <summary>declare @field failing to cope with some signatures</summary>
    <description>Found by Arjen, an error is reported against this: import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; public aspect Wibble { declare @field: @III * Song.*: @Foo; // before : get @III * Song.* { // System.out.println ; //} } @III class XX { } class Song { XX i; void foo { System.out.println i ; } } @Retention RetentionPolicy.RUNTIME @interface III {} @Retention RetentionPolicy.RUNTIME @interface Foo {}</description>
    <commit commitTime="2010-10-27 16:06:18" id="ad50f31097edb3451483b9ddc15c24d06df11d90"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/AllTests16.java</file>
    </fixedFiles>
  </bug>
  <bug id="329111" reportTime="2010-10-29 16:33:00">
    <summary>[handles] Handle problem when declares share a counter</summary>
    <description>In this aspect: public aspect AJ { class X{} interface Y {} declare parents : X implements Y; declare soft : Exception : execution void x ; void x { throw new Exception ; } } The JDT handle for the declare soft is: =ITDTesting/src&amp;lt;{AJ.aj'AJ`declare soft but the AJ handle is: =ITDTesting/src&amp;lt;*AJ.aj'AJ`declare soft!2 you can ignore the * and { difference because that is an artifact of JDT weaving It looks like the count is being incremented because of the declare parents, but it should not be.</description>
    <commit commitTime="2010-10-29 22:48:40" id="49b7bcba4455b3a8be486b28516e6cddf827aa69"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="329126" reportTime="2010-10-29 20:23:00">
    <summary>Deadlock</summary>
    <description>Build Identifier: 1.6.10 When instrumenting WAS 5.1 for java 1.4.2, sometimes we face a deadlock. It is related with the way AspectJ loads the XML parser and the SAX parser itself. Reproducible: Sometimes</description>
    <commit commitTime="2010-11-01 23:49:25" id="9b2e89b52ba1a421839b18f9be3aaac523fcd665"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="330170" reportTime="2010-11-13 11:04:00">
    <summary>SIOOBE seen on STS</summary>
    <description>java.lang.StringIndexOutOfBoundsException at java.lang.String.substring String.java:1937 at org.aspectj.asm.AsmManager.getTypeNameFromHandle AsmManager.java:642 at org.aspectj.asm.AsmManager.removeRelationshipsTargettingThisType AsmManager.java:698 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1020 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:514 at o ... 2 at org.eclipse.core.internal.jobs.Worker.run Worker.java:54 Compile error: StringIndexOutOfBoundsException thrown: String index out of range: -39</description>
    <commit commitTime="2010-11-13 16:31:19" id="0156c1305007bb128eec80be7c6fd6b781fcf23d"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/AsmManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="332388" reportTime="2010-12-12 05:08:00">
    <summary>ajc failure when classpath is missing generic type parameter</summary>
    <description>Build Identifier: 1.6.10 I tried to upgrade from 1.6.8 to 1.6.10 and ran into this issue. It fails in 1.6.9, 1.6.10 and 1.6.11.m1. It works in 1.6.8. An ajcore file is generated pointing to -- ClassCastException org.aspectj.weaver.MissingResolvedTypeWithKnownSignature cannot be cast to org.aspectj.weaver.ReferenceType org.aspectj.weaver.MissingResolvedTypeWithKnownSignature cannot be cast to org.aspectj.weaver.ReferenceType java.lang.ClassCastException: org.aspectj.weaver.MissingResolvedTypeWithKnownSignature cannot be cast to org.aspectj.weaver.ReferenceType at org.aspectj.weaver.TypeVariableReferenceType.getDelegate TypeVariableReferenceType.java:44 at org.aspectj.weaver.ReferenceType.getTypeVariables ReferenceType.java:810 at org.aspectj.weaver.bcel.BcelGenericSignatureToTypeXConverter.fixUpCircularDependencies BcelGenericSignatureToTypeXConverter.java:231 at org.aspectj.weaver.bcel.BcelGenericSignatureToTypeXConverter.typeSignature2TypeX BcelGenericSignatureToTypeXConverter.java:180 at org.aspectj.weaver.bcel.BcelMethod.unpackGenericSignature BcelMethod.java:564 at org.aspectj.weaver.bcel.BcelMethod.getGenericReturnType BcelMethod.java:497 at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith ResolvedMemberImpl.java:756 at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith ResolvedMemberImpl.java:709 at org.aspectj.weaver.ReferenceType.getDeclaredMethods ReferenceType.java:766 at org.aspectj.weaver.ResolvedType.lookupMethod ResolvedType.java:534 at org.aspectj.weaver.World.resolve World.java:626 ... Reproducible: Always Steps to Reproduce: I have been able to reduce this to following minimal repro these steps generate an ajcore file in 1.6.9, 1.6.10 and 1.6.11.m1, while the same steps succeed in 1.6.8 : public class M {} public class A&amp;lt;T extends M&amp;gt; { public void a T t { } } public class B&amp;lt;T extends M&amp;gt; extends A&amp;lt;T&amp;gt; { public void b { a null ; } } @Aspect public class MyAspect { @Before "call * *.* .. " public void myAdvice { System.out.println ; } } javac M.java A.java B.java jar cf M.jar M.class jar cf AB.jar A.class B.class javac -classpath %ASPECTJ_HOME%\lib\aspectjrt.jar MyAspect.java jar cf aspects.jar MyAspect.class %ASPECTJ_HOME%\bin\ajc -1.5 -inpath AB.jar -aspectpath aspects.jar -outjar out.jar -classpath %ASPECTJ_HOME%\lib\aspectjrt.jar</description>
    <commit commitTime="2010-12-13 19:13:55" id="b1bc04f163ab7c1c0440df1b23842dcc6f4e3f52"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/TypeVariableReferenceType.java</file>
    </fixedFiles>
  </bug>
  <bug id="333123" reportTime="2010-12-22 18:31:00">
    <summary>AspectJ requirements for AJDT to support Intertype Inner-types</summary>
    <description>From my explorations with starting the tool support for ITITs in AJDT, the main problem seems to be that there is no easy access to fully qualified types when building up the structure of the ITD inner class in the target type. So, given this aspect: aspect F { class Foo.Bar { pubic static final String x = "9"; pubic static List&amp;lt;Date&amp;gt; filterDates IFilter filter { // are ITIT methods evan allowed??? ... } } } I'm not sure if ITIT methods are even legal. If they are not, just ignore them. There is an IProgramElement corresponding to Foo.Bar. I would like there to be some sort of data structure inside it that describes its member fields and methods. This could be a map with the key being the name of the method/field and the value being the resolved type signature, eg Ljava.lang.String; for a field with type String, or Lcom.foo.IFilter;Z Ljava.util.List&amp;lt;Ljava.util.Date;&amp;gt;; for a method that takes an IFilter and an int and returns a List of Dates. So the above would have a map something like this please excuse the Groovy syntax : [ "x" : "Ljava.lang.String;", "filterDates" : " Lcom.foo.IFilter;Z Ljava.util.List&amp;lt;Ljava.util.Date;&amp;gt;;" ] It's easy enough for AJDT to figure out if something is a method or a field based on the signature. Although this may be time consuming to create and memory consuming to store, I'm not expecting that ITITs will be so widely used that creating this map would have a major impact.</description>
    <commit commitTime="2011-02-01 20:57:39" id="8667e7ad76f65341a87d399d92a00aaa51da3367"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/IProgramElement.java</file>
      <file>asm/src/org/aspectj/asm/internal/ProgramElement.java</file>
    </fixedFiles>
  </bug>
  <bug id="333469" reportTime="2011-01-04 08:47:00">
    <summary>IllegalStateException when extending generic-derived class in an aspect</summary>
    <description>Build Identifier: 20100917-0705 A project containing an aspect which refers to a generic-derived class cannot be compiled with AspectJ 1.6.10 and 1.6.11, but worked with an older version 1.6.5, if I remember right. Message: Internal compiler error java.lang.IllegalStateException: Use generic type, not parameterized type at org.aspectj.weaver.ResolvedTypeMunger.&amp;lt;init&amp;gt; ResolvedTypeMunger.java:72 at org.aspectj.weaver.PrivilegedAccessMunger.&amp;lt;init&amp;gt; PrivilegedAccessMunger.java:31 at org.aspectj.weaver.CrosscuttingMembers.addPrivilegedAccesses CrosscuttingMembers.java:216 at org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers ResolvedType.java:756 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect CrosscuttingMembersSet.java:89 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect CrosscuttingMembersSet.java:69 at org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave BcelWeaver.java:502 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.ensureWeaverInitialized AjPipeliningCompilerAdapter.java:529 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:509 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving AjPipeliningCompilerAdapter.java:447 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:432 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:98 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:652 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:392 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1021 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:305 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:185 at org.aspectj.ajde.core.internal.AjdeCoreBuildManager.performBuild AjdeCoreBuildManager.java:127 at org.aspectj.ajde.core.AjCompiler.build AjCompiler.java:91 at org.eclipse.ajdt.core.builder.AJBuilder.build AJBuilder.java:257 at org.eclipse.core.internal.events.BuildManager$2.run BuildManager.java:629 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:42 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:172 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:203 at org.eclipse.core.internal.events.BuildManager$1.run BuildManager.java:255 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:42 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:258 at org.eclipse.core.internal.events.BuildManager.basicBuildLoop BuildManager.java:311 at org.eclipse.core.internal.events.BuildManager.build BuildManager.java:343 at org.eclipse.core.internal.events.AutoBuildJob.doBuild AutoBuildJob.java:144 at org.eclipse.core.internal.events.AutoBuildJob.run AutoBuildJob.java:242 at org.eclipse.core.internal.jobs.Worker.run Worker.java:54 Reproducible: Always Steps to Reproduce: 1. Create a new AspectJ project in Eclipse IDE. 2. Add a file MyList.java to the source folder: import java.util.ArrayList; class MyList extends ArrayList&amp;lt;Integer&amp;gt; {} 3. Add a file MyList_Serializable.aj to the source folder: import java.io.Serializable; aspect MyList_Serializable { declare parents : MyList implements Serializable; private static final long MyList.serialVersionUID = 1L; // causes compiler failure } 4. Enjoy compiler message.</description>
    <commit commitTime="2011-01-08 01:17:40" id="75e44f31e461eaca930a2f662eadbbfa3e7c93a2"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/CrosscuttingMembers.java</file>
    </fixedFiles>
  </bug>
  <bug id="335682" reportTime="2011-01-28 08:15:00">
    <summary>Aspect Internal compiler Error when Aspects are Annotation Based</summary>
    <description>Build Identifier: 20100917-0705 -AJDT is installed on the top of eclipse 3.6 -I developed an Annotation Based Aspect Library,here is a sample : @Aspect public class ProfiledMethodAspect extends ProfileAspectBase { /** * This pointcut target all methods that are annotated with the @ProfiledMethod annotation */ @Around "execution @com.navteq.corelibs.profile.ProfiledMethod * * .. " public Object profileMe ProceedingJoinPoint thisJoinPoint throws Throwable { return getProfileUtilities .profile thisJoinPoint ; } } -after building the Aspect Library, and configuring it in the AJDT Aspect Build path,every time the weawer starts , the AJDT plugin show a Pop Up with the below exception : java.lang.NegativeArraySizeException at org.aspectj.weaver.patterns.TypePatternList.read TypePatternList.java:490 at org.aspectj.weaver.patterns.ThrowsPattern.read ThrowsPattern.java:120 at org.aspectj.weaver.patterns.SignaturePattern.read SignaturePattern.java:913 at org.aspectj.weaver.patterns.KindedPointcut.read KindedPointcut.java:335 at org.aspectj.weaver.patterns.Pointcut.read Pointcut.java:279 at org.aspectj.weaver.Resolved ... Job.run AutoBuildJob.java:242 at org.eclipse.core.internal.jobs.Worker.run Worker.java:54 -if I switch the Aspect library to the Old AspectJ coding style without @Aspect annotation, but rather with public aspect class etc... , the exception disappear. Reproducible: Always Steps to Reproduce: 1.develop a simple Aspect using @Aspect annotation 2.build this aspect in a library 3.configure the library in the Aspect Build Path for AJDT plugin. 4-edit your code in a way that a Point cut from your aspect would be matched 5-leave the AJDT trying to weawe your code . 6-you will see a Pop Up with the exception mentionned</description>
    <commit commitTime="2011-02-02 00:40:05" id="50b404c520f5ffb80e6849aa3498733beb74ca36"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAccessForInlineMunger.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelMethod.java</file>
    </fixedFiles>
  </bug>
  <bug id="335783" reportTime="2011-01-30 06:02:00">
    <summary>NullPointerException when -XaddSerialVersionUID added</summary>
    <description>Build Identifier: 1.6.10 Whenever -XaddSerialVersionUID is added in order to avoid serialization/marshalling issues NullPointerException is risen from AspectJ when accessing thisJoinPointStaticPart. After reviewing the woven class, you perceive that SJPs are never initialized, and only serialVersionUID is filled at ajc$preClinit method. The problem is located at: private void addAjcInitializers { if tjpFields.size == 0 &amp;amp;&amp;amp; !serialVersionUIDRequiresInitialization { return; } InstructionList[] il = null; if tjpFields.size &amp;gt; 0 { il = initializeAllTjps ; } if serialVersionUIDRequiresInitialization { if il == null { il = new InstructionList[1]; } il[0] = new InstructionList ; il[0].append InstructionFactory.PUSH getConstantPool , calculatedSerialVersionUID ; il[0].append getFactory .createFieldAccess getClassName , "serialVersionUID", BasicType.LONG, Constants.PUTSTATIC ; } As you can see the instructionList is overwritten when serialVersionUID is added and thus SJPs deleted and never injected. Next message I will upload reprocase + patch. Thanks and regards. Reproducible: Always Steps to Reproduce: 1.add -XaddSerialVersionUID to the aop.xml 2.use thisJoinPointStaticPart at any place 3.NPE is got</description>
    <commit commitTime="2011-01-31 20:34:12" id="0e41055181ef493d028281486bbd118db8697159"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc1611/Ajc1611Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="335810" reportTime="2011-01-31 02:35:00">
    <summary>Suppressing raw type warnings with AspectJ</summary>
    <description>Build Identifier: Starting with Eclipse 3.6, the Eclipse compiler no longer suppresses raw type warnings with @SuppressWarnings "unchecked" . You need to use @SuppressWarnings "rawtypes" for that. Is it possible to change this in the AspectJ compiler as well? At our company, we have several libraries shared between projects. Some of these projects use AspectJ, where others are still plain Java to compile these libraries. The current behavior makes it impossible to suppress raw type warnings in both compilers: with 'unchecked', Eclipse 3.6 will complain about raw types and with 'rawtypes', AJDT complains about an unknown SuppressWarnings token. Reproducible: Always</description>
    <commit commitTime="2011-04-28 00:04:31" id="25cac9205ccc64b5c175d72a555b5c1f0389c09d"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc1612/Ajc1612Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="336136" reportTime="2011-02-02 14:43:00">
    <summary>Exception when using ITIT that has compile error</summary>
    <description>I just got this exception thrown from the aj compiler. To reproduce: 1. create an empty AJ project. 2. Pasted this class into an empty aspect: {code} import com.foo.op4j.Country; import java.lang.Object; import org.javaruntype.type.Types; import org.op4j.functions.Function; import org.op4j.functions.Get; privileged aspect Country_Roo_Op4j { public static class Country.Keys { public static final Function&amp;lt;Object, Country&amp;gt; COUNTRY = Get.attrOf Types.forClass Country.class ,"country" ; } } {code} 3. Incremental compile 4. Boom! Want me to raise an bug for this? java.lang.NullPointerException at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.findMemberType Scope.java:979 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.getTypeOrPackage Scope.java:2377 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.getType Scope.java:2220 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference.internalResolveType ParameterizedSingleTypeReference.java:98 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference.resolveType ParameterizedSingleTypeReference.java:218 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.resolveTypeFor SourceTypeBinding.java:1359 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.fields SourceTypeBinding.java:649 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.faultInTypesForFieldsAndMethods SourceTypeBinding.java:627 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.faultInTypesForFieldsAndMethods SourceTypeBinding.java:631 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.faultInTypes CompilationUnitScope.java:433 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:629 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:392 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1021 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:305 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:185 at org.aspectj.ajde.core.internal.AjdeCoreBuildManager.performBuild AjdeCoreBuildManager.java:127 at org.aspectj.ajde.core.AjCompiler.build AjCompiler.java:91 at org.eclipse.ajdt.core.builder.AJBuilder.build AJBuilder.java:257 at org.eclipse.core.internal.events.BuildManager$2.run BuildManager.java:629 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:42 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:172 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:203 at org.eclipse.core.internal.events.BuildManager$1.run BuildManager.java:255 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:42 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:258 at org.eclipse.core.internal.events.BuildManager.basicBuildLoop BuildManager.java:311 at org.eclipse.core.internal.events.BuildManager.build BuildManager.java:343 at org.eclipse.core.internal.events.AutoBuildJob.doBuild AutoBuildJob.java:144 at org.eclipse.core.internal.events.AutoBuildJob.run AutoBuildJob.java:242 at org.eclipse.core.internal.jobs.Worker.run Worker.java:54</description>
    <commit commitTime="2011-02-03 00:03:02" id="1386abb444d0f2e5dccb22c511f3063a569a4701"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc1611/Ajc1611Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="336471" reportTime="2011-02-07 02:06:00">
    <summary>Problem with a call pointcut and thisJoinPointStaticPart.getSourceLocation /thisEnclosingJoinPointStaticPart.getSourceLocation statements</summary>
    <description>LTW weaving, snapshot aspectJ dev build of 03 February 2011 but same behaviour with others versions . I don't use Spring AOP agent, i use aspectjweaver "native" javaagent. does this Exception mean anything to you ? With a execution pointcut no problem because thisJoinPointStaticPart and thisEnclosingJoinPointStaticPart.getSourceLocation are the same JoinPoint. Whit call pointcut, when thisEnclosingJoinPointStaticPart.getSourceLocation runs i get this exception 10:01:44,337 ERROR ContextLoader 215 - Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean wit h name 'org.springframework.dao.annotation.PersistenceExceptionTranslationPostPr ocessor#0' defined in ServletContext resource [/WEB-INF/jpaDaoContext.xml]: Init ialization of bean failed; nested exception is org.springframework.beans.factory .BeanCreationException: Error creating bean with name 'myEntityManagerFactory' d efined in ServletContext resource [/WEB-INF/jpaDaoContext.xml]: Invocation of in it method failed; nested exception is java.lang.NoSuchMethodError: org.aspectj.r untime.reflect.Factory.makeESJP Ljava/lang/String;Ljava/lang/String;Ljava/lang/S tring;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I Lorg/aspectj/lang/JoinPoint$EnclosingStaticPart; at org.springframework.beans.factory.support.AbstractAutowireCapableBean Factory.doCreateBean AbstractAutowireCapableBeanFactory.java:480 at org.springframework.beans.factory.support.AbstractAutowireCapableBean Factory$1.run AbstractAutowireCapableBeanFactory.java:409 at java.security.AccessController.doPrivileged Native Method at org.springframework.beans.factory.support.AbstractAutowireCapableBean Factory.createBean AbstractAutowireCapableBeanFactory.java:380 at org.springframework.beans.factory.support.AbstractBeanFactory$1.getOb ject AbstractBeanFactory.java:264 at org.springframework.beans.factory.support.DefaultSingletonBeanRegistr y.getSingleton DefaultSingletonBeanRegistry.java:222 at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBe an AbstractBeanFactory.java:261 at org.springframework.beans.factory.support.AbstractBeanFactory.getBean AbstractBeanFactory.java:185 at org.springframework.beans.factory.support.AbstractBeanFactory.getBean AbstractBeanFactory.java:164 at org.springframework.context.support.AbstractApplicationContext.getBea n AbstractApplicationContext.java:880 at org.springframework.context.support.AbstractApplicationContext.regist erBeanPostProcessors AbstractApplicationContext.java:596 Andy reply : "Interesting! I don't think we've ever had a method like that: org.aspectj.runtime.reflect.Factory.makeESJP Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I In the runtime. Can you raise a bugzilla? When you say it happens with other versions, how far back did you try, 1.6.9? I only ask because some changes went in around that area in 1.6.10 to enable us to produce smaller code when joinpoints didn't have certain characteristics e.g. no exceptions . Andy " I had just tested with 1.6.11 dev versions. I will try with a 1.6.9 version and i let you know.</description>
    <commit commitTime="2011-02-08 16:22:42" id="09af5acb0c35cfcc90b85bb465313c7903d32c20"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc1611/Ajc1611Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="336745" reportTime="2011-02-09 13:41:00">
    <summary>incorrect signatures for generic ITDs</summary>
    <description>aspect Foo { &amp;lt;T extends I&amp;gt; void C.mitd T something {} } class C { &amp;lt;T extends I&amp;gt; void m T something {} } interface I {} Compiling that reveals differing generic signatures for the m vs the mitd methods: m: &amp;lt;T::LI;&amp;gt; TT; V; mitd: &amp;lt;T:Ljava/lang/Object;:LI;&amp;gt; TT; V; aspectj is incorrectly using a first bound of Object when that shouldn't be included when there is an interface bound around.</description>
    <commit commitTime="2011-02-10 22:52:59" id="01be71f629baedd6cc0018b8b4305093c6c91c8a"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc1611/Ajc1611Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="336774" reportTime="2011-02-09 18:11:00">
    <summary>generic ITD appears to clash with itself</summary>
    <description/>
    <commit commitTime="2011-02-10 22:52:59" id="01be71f629baedd6cc0018b8b4305093c6c91c8a"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc1611/Ajc1611Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="336880" reportTime="2011-02-10 16:38:00">
    <summary>confusion in bounds analysis when ITD uses multiple type variables</summary>
    <description>This bug needs an ITD that uses multiple type variables and those type variables have constraints. e.g. &amp;lt;R extends I1, T extends I2&amp;gt; T II.foo R r, Class&amp;lt;T&amp;gt; ct when this is called in a complicated separate compilation scenario , the bounds checking can get confused and start using the first argument to the call when checking the bounds of the second parameter. e.g. foo A,B it may bounds check whether A satisfies the 'T extends I2' constraint</description>
    <commit commitTime="2011-02-10 22:52:59" id="01be71f629baedd6cc0018b8b4305093c6c91c8a"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc1611/Ajc1611Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="336997" reportTime="2011-02-11 14:01:00">
    <summary>IllegalStateException for generic ITD usage</summary>
    <description>java.lang.IllegalStateException: Can't answer binding questions prior to resolving at org.aspectj.weaver.TypeVariable.canBeBoundTo TypeVariable.java:175 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:496 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:399 at org.aspectj.weaver.ResolvedType.checkLegalOverride ResolvedType.java:1999 at org.aspectj.weaver.ResolvedType.clashesWithExistingMember ResolvedType.java:1843 at org.aspectj.weaver.ResolvedType.addInterTypeMunger ResolvedType.java:1699 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:795 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:652 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.createBinaryTypeFrom AjLookupEnvironment.java:1398 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom LookupEnvironment.java:599 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.accept Compiler.java:276 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType LookupEnvironment.java:113 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve UnresolvedReferenceBinding.java:49 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType BinaryTypeBinding.java:99 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType LookupEnvironment.java:971 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.lookupBinding EclipseFactory.java:749 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeTypeBinding1 EclipseFactory.java:743 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeTypeBinding EclipseFactory.java:605 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addParent AjLookupEnvironment.java:1314 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareParents AjLookupEnvironment.java:902 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:730 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveIntertypes AjLookupEnvironment.java:418 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:255 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile Compiler.java:616 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:357 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:371 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1021 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:268 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:181 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:371 at org.aspectj.tools.ajc.Main.runMain Main.java:248 at org.codehaus.mojo.aspectj.AbstractAjcCompiler.execute AbstractAjcCompiler.java:360 at org.apache.maven.plugin.DefaultPluginManager.executeMojo DefaultPluginManager.java:490 at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals DefaultLifecycleExecutor.java:694 at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle DefaultLifecycleExecutor.java:556 at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal DefaultLifecycleExecutor.java:535 at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures DefaultLifecycleExecutor.java:387 at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments DefaultLifecycleExecutor.java:348 at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute DefaultLifecycleExecutor.java:180 at org.apache.maven.DefaultMaven.doExecute DefaultMaven.java:328 at org.apache.maven.DefaultMaven.execute DefaultMaven.java:138 at org.apache.maven.cli.MavenCli.main MavenCli.java:362 at org.apache.maven.cli.compat.CompatibleMain.main CompatibleMain.java:60 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.codehaus.classworlds.Launcher.launchEnhanced Launcher.java:315 at org.codehaus.classworlds.Launcher.launch Launcher.java:255 at org.codehaus.classworlds.Launcher.mainWithExitCode Launcher.java:430 at org.codehaus.classworlds.Launcher.main Launcher.java:375</description>
    <commit commitTime="2011-02-11 19:03:13" id="80785bfd5347e6bf06b3202013d435f68727c910"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/TypeVariable.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/World.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/TypeVariableReferenceType.java</file>
    </fixedFiles>
  </bug>
  <bug id="338175" reportTime="2011-02-24 23:15:00">
    <summary>[itit] Compiler crash for Duplicate Nested ITIT</summary>
    <description>Created attachment 189770 [details] Project that exhibits this problem Import this project and do a full build. Internal compiler error: java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.ast.IntertypeMemberClassDeclaration.ensureScopeSetup IntertypeMemberClassDeclaration.java:209 at org.aspectj.ajdt.internal.compiler.ast.IntertypeMemberClassDeclaration.build IntertypeMemberClassDeclaration.java:247 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.processIntertypeMemberTypes AspectDeclaration.java:1039 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.processInterTypeMemberTypes AjLookupEnvironment.java:523 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:197 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile Compiler.java:616 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:357 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:371 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1021 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:268 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:181 at org.aspectj.ajde.core.internal.AjdeCoreBuildManager.performBuild AjdeCoreBuildManager.java:105 at org.aspectj.ajde.core.AjCompiler.buildFresh AjCompiler.java:100 at org.eclipse.ajdt.core.builder.AJBuilder.build AJBuilder.java:255 at org.eclipse.core.internal.events.BuildManager$2.run BuildManager.java:629 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:42 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:172 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:203 at org.eclipse.core.internal.events.BuildManager$1.run BuildManager.java:255 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:42 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:258 at org.eclipse.core.internal.events.BuildManager.basicBuildLoop BuildManager.java:311 at org.eclipse.core.internal.events.BuildManager.build BuildManager.java:343 at org.eclipse.core.internal.events.AutoBuildJob.doBuild AutoBuildJob.java:144 at org.eclipse.core.internal.events.AutoBuildJob.run AutoBuildJob.java:242 at org.eclipse.core.internal.jobs.Worker.run Worker.java:54</description>
    <commit commitTime="2011-03-30 19:08:32" id="8b322ba8aece6db9ddab83fdaa87baa29f7c8527"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc1612/Ajc1612Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="339300" reportTime="2011-03-08 18:49:00">
    <summary>problem weaving anonymous inner member owned classes in scala library</summary>
    <description>Reported by Ramnivas. Due to the use of numerous $ chars in scala classnames, some of the AspectJ handling of inner classes breaks down. It should be possible to correctly use the available class attributes rather than mess around with attributes. A while back one use did contribute a change to enable scala weaving which tried to use the InnerClasses attribute before falling back on string chopping. However we have now hit another case. In the scenario we are dealing with the class scala.Predef$$anon$3 in the scala library a 2.9.0-SNAPSHOT version . What we normally do here is in that type we discover the InnerClass attribute and refer to the outerclass index it holds. Unfortunately, due to it being an anonymous inner inside a method, the index is 0. So we fail to process the attribute and with string chopping come up with a stupid guessed name for the outer. The solution is to use the EnclosingMethod attribute in these situations. The EnclosingMethod attribute is an optional attribute. A class must have an EnclosingMethod attribute if and only if it is a local class or an anonymous class. A class may have no more than one EnclosingMethod attribute. The EnclosingMethod attribute includes a pointer to the containing outerclass that had the method in which encloses this inner type .</description>
    <commit commitTime="2011-03-09 01:14:39" id="945402f177906a2a421b092050c2baab31665c59"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
    </fixedFiles>
  </bug>
  <bug id="339974" reportTime="2011-03-15 00:21:00">
    <summary>NPE when accessing static class inside of an ITIT</summary>
    <description>This code: public class City { private String name; private Country country; } And separate file: public aspect TrafficCalculator { public static class City.TrafficCalculator { Function&amp;lt;City, Time&amp;gt; EXTREME = createExtremeTraffic ; Function&amp;lt;City, Time&amp;gt; BASIC = createBasicTraffic ; } private static Function&amp;lt;City, Time&amp;gt; createExtremeTraffic { return null; } private static Function&amp;lt;City, Time&amp;gt; createBasicTraffic { return null; } public static class Time { } } Try full build and the following exception: java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.ast.IntertypeMemberClassDeclaration.resolveOnType IntertypeMemberClassDeclaration.java:238 at org.aspectj.ajdt.internal.compiler.ast.IntertypeMemberClassDeclaration.build IntertypeMemberClassDeclaration.java:246 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.processIntertypeMemberTypes AspectDeclaration.java:1039 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.processInterTypeMemberTypes AjLookupEnvironment.java:523 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:197 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile Compiler.java:616 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:357 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:371 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1021 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:305 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:185 at org.aspectj.ajde.core.internal.AjdeCoreBuildManager.performBuild AjdeCoreBuildManager.java:127 at org.aspectj.ajde.core.AjCompiler.build AjCompiler.java:91 at org.eclipse.ajdt.core.builder.AJBuilder.build AJBuilder.java:257 at org.eclipse.core.internal.events.BuildManager$2.run BuildManager.java:629 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:42 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:172 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:203 at org.eclipse.core.internal.events.BuildManager$1.run BuildManager.java:255 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:42 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:258 at org.eclipse.core.internal.events.BuildManager.basicBuildLoop BuildManager.java:311 at org.eclipse.core.internal.events.BuildManager.build BuildManager.java:343 at org.eclipse.core.internal.events.AutoBuildJob.doBuild AutoBuildJob.java:144 at org.eclipse.core.internal.events.AutoBuildJob.run AutoBuildJob.java:242 at org.eclipse.core.internal.jobs.Worker.run Worker.java:54</description>
    <commit commitTime="2011-04-21 15:25:09" id="249f832fef29f56e23134a7e38f0bce8e9e209eb"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc1612/Ajc1612Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="340323" reportTime="2011-03-17 10:34:00">
    <summary>NPE when weaving java.lang.Object at org.aspectj.weaver.bcel.BcelTypeMunger.createAnyBridgeMethodsForCovariance BcelTypeMunger.java:1251</summary>
    <description>Created attachment 191423 [details] AJ core dump I'm trying to add a method to Object using a inter-type declaration. When calling ajc, I encounter a NPE. From a cursory glance, it would appear that the code is looking for the parents classes of Object, which presumably is null. I've attached the dump and a simple example that causes it.</description>
    <commit commitTime="2011-03-28 19:37:01" id="a8e6797a9268d9fb041c075ee7701831f7e848b4"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="340806" reportTime="2011-03-23 16:35:00">
    <summary>Race condition in JavaLangTypeToResolvedTypeConverter potentially exposed through Spring AOP</summary>
    <description>Build Identifier: 1.6.11 Spinoff of https://jira.springsource.org/browse/SPR-8070 and Bug 337855 There is a race condition in JavaLangTypeToResolvedTypeConverter's use of the 'typeVariablesInProgress' Map. This can lead to fromType returning NULL which eventually leads to the NPE in World . } else if aType instanceof java.lang.reflect.TypeVariable { if typeVariablesInProgress.get .get aType != null { &amp;gt;&amp;gt;&amp;gt; // aType can get removed from the Map after this null check! return typeVariablesInProgress.get .get aType ; } The error results in the following stack trace: java.lang.NullPointerException: null at org.aspectj.weaver.World.resolve World.java:278 ~[aspectjweaver.jar:1.6.11] at org.aspectj.weaver.World.resolve World.java:218 ~[aspectjweaver.jar:1.6.11] at org.aspectj.weaver.World.resolve World.java:253 ~[aspectjweaver.jar:1.6.11] at org.aspectj.weaver.TypeFactory.createParameterizedType TypeFactory.java:42 ~[aspectjweaver.jar:1.6.11] at org.aspectj.weaver.reflect.JavaLangTypeToResolvedTypeConverter.fromType JavaLangTypeToResolvedTypeConverter.java:88 ~[aspectjweaver.jar:1.6.11] I have also attached a BTrace script that shows further analysis of the problem: onFromType_Line91: RETURNING TYPE FROM MAP typeVariablesInProgress: {T=T} onFromType_FieldGet: typeVariablesInProgress: {T=T} onFromType_Return: fromType T --&amp;gt; null We have tested a patch that wraps the 'typeVariablesInProgress' Map in a ThreadLocal. In limited testing, this appears to have fixed the problem. I have attached the patch. Reproducible: Sometimes Steps to Reproduce: Perform type resolution on classes with parameterized/generic signatures concurrently with multiple threads. Note: I have been unable to reproduce this issue outside of our server. We see the issue with Spring and during Server initialization under heavy load.</description>
    <commit commitTime="2011-08-03 20:22:40" id="167b801c5c71bfa1e0667e85429e097f03d7e849"/>
    <fixedFiles>
      <file>weaver5/java5-src/org/aspectj/weaver/reflect/JavaLangTypeToResolvedTypeConverter.java</file>
    </fixedFiles>
  </bug>
  <bug id="341446" reportTime="2011-03-31 02:20:00">
    <summary>java.lang.UnsupportedClassVersionError when running Java 1.5</summary>
    <description>We are using Spring 3.0 and they have a dependency to aspectj. Thus we have the runtime Jars on the classpath. Problem is the aspectjweaver.jar contains 1.6 byte code. When starting our application on JBoss 5.1 with JDK 1.5 we get an exception in the logs: Unexpected error during load of:testdata.SomeAnnotation java.lang.UnsupportedClassVersionError: Bad version number in .class file at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:620 at org.jboss.classloader.spi.base.BaseClassLoader.access$200 BaseClassLoader.java:63 at org.jboss.classloader.spi.base.BaseClassLoader$2.run BaseClassLoader.java:572 at org.jboss.classloader.spi.base.BaseClassLoader$2.run BaseClassLoader.java:532 at java.security.AccessController.doPrivileged Native Method As we are not using aspects from aspectj we don't have a problem ... but others might have. There is a issue for Spring as well: https://issuetracker.springsource.com/browse/EBR-622 Also had a look at the current release 1.6.11 and the same situation there. So as other people have no chance of working around this other than building the jar themself I set this to major.</description>
    <commit commitTime="2011-04-01 03:46:11" id="293a0756b25fd1e9c7cd2623d2e28e78aa797f06"/>
    <fixedFiles>
      <file>org.aspectj.matcher/testsrc/org/aspectj/matcher/tools/CommonAdvancedPointcutExpressionTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="342323" reportTime="2011-04-08 14:01:00">
    <summary>ITDs with local types cause name collisions with target type inner types</summary>
    <description>If an ITD uses an local anonymous type, it is a given a name based on the target, suffixed with an integer. If the target type also uses local anonymous types, the names may clash. The compiler won't detect this, instead whoever gets their classes put out 'last' gets their version of the classfile produced. The type names already in use are stored in a table in the CompilationUnitScope called constantPoolNameUsage. Because the aspect and the target are in different compilation units, they have different tables and thus don't see each other. There are a couple of possible fixes: 1 use a variant naming scheme for those coming from the aspect. 2 enable the compilation unit scopes to see each other when aspects are involved.</description>
    <commit commitTime="2011-04-08 23:19:42" id="80ceb419315961eae603911721155dfb560e99dd"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc1612/Ajc1612Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="343051" reportTime="2011-04-16 17:04:00">
    <summary>IllegalAccessError to double nested class</summary>
    <description>Created attachment 193424 [details] Eclipse project I receive an IllegalAccessError during runtime. The aspect adds a method, which contains an inner-class declaration, to an inner-class. The aspect is made privileged. The error occurs when running class junit.tests.AllTests in JUnit: ......................................... ....E..................................... ........................... Time: 1.015 There was 1 error: 1 testSuccessfulRun junit.tests.framework.TestImplementorTest java.lang.IllegalAccessError: tried to access class junit.tests.framework.TestImplementorTest$DoubleTestCase$1 from class junit.kiczales.patternlibrary.TestComposite at junit.kiczales.patternlibrary.TestComposite.ajc$interMethod$junit_kiczales_patternlibrary_TestComposite$junit_tests_framework_TestImplementorTest$DoubleTestCase$run TestComposite.java:60 at junit.tests.framework.TestImplementorTest$DoubleTestCase.run TestImplementorTest.java:1 at junit.kiczales.patternlibrary.TestComposite.ajc$interMethodDispatch1$junit_kiczales_patternlibrary_TestComposite$junit_tests_framework_TestImplementorTest$DoubleTestCase$run TestComposite.java at junit.tests.framework.TestImplementorTest.testSuccessfulRun TestImplementorTest.java:50 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at junit.kiczales.patternlibrary.TestComposite.ajc$interMethod$junit_kiczales_patternlibrary_TestComposite$junit_framework_TestCase$run TestComposite.java:54 at junit.kiczales.patternlibrary.TestComposite.ajc$interMethod$junit_kiczales_patternlibrary_TestComposite$junit_framework_TestSuite$run TestComposite.java:36 at junit.kiczales.patternlibrary.TestComposite.ajc$interMethod$junit_kiczales_patternlibrary_TestComposite$junit_framework_TestSuite$run TestComposite.java:36 at junit.kiczales.patternlibrary.TestComposite.ajc$interMethod$junit_kiczales_patternlibrary_TestComposite$junit_framework_TestSuite$run TestComposite.java:36 at junit.tests.AllTests.main AllTests.java:13 FAILURES!!! Tests run: 109, Failures: 0, Errors: 1</description>
    <commit commitTime="2011-04-26 16:11:25" id="4341109730bdb423b0eecc5b01327febc4f0b230"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/SuperFixerVisitor.java</file>
    </fixedFiles>
  </bug>
  <bug id="344005" reportTime="2011-04-27 13:34:00">
    <summary>binding type pattern matching sometimes misses decps affecting generic types</summary>
    <description>Uncovered by the spring-data project. Here: @Foo class Clazz {} @Foo class OtherClass&amp;lt;T&amp;gt; {} interface Marker {} aspect X { declare parents: @Foo * implements Marker; before Marker m : this m { } } the advice can miss applying to OtherClass because the matching for this is done against the raw type when the affect of the decp is stored on the generic form.</description>
    <commit commitTime="2011-04-27 20:54:05" id="f8ff09094b862b63ec44f8215f8e70337b93cb57"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/World.java</file>
    </fixedFiles>
  </bug>
  <bug id="347185" reportTime="2011-05-25 12:04:00">
    <summary>AspectJ Internal Compiler Error</summary>
    <description>Build Identifier: SpringSource Tool Suite Version: 2.7.0.M1 Build Id: 201105101000 Got a popup in eclipse saying that I should report this as a bug. Did not find existing bug when I used the first line of the error to search. org.aspectj.ajdt.internal.compiler.lookup.EclipseAnnotationConvertor$MissingImplementationException at org.aspectj.ajdt.internal.compiler.lookup.EclipseAnnotationConvertor.generateElementValue EclipseAnnotationConvertor.java:138 at org.aspectj.ajdt.internal.compiler.lookup.EclipseAnnotationConvertor.generateAnnotation EclipseAnnotationConvertor.java:83 at org.aspectj.ajdt.internal.compiler.lookup.EclipseAnnotationConvertor.convertEclipseAn ... $MissingImplementationException thrown: Please raise an AspectJ bug. AspectJ does not know how to convert this annotation value ["persistent_logins"] Reproducible: Always</description>
    <commit commitTime="2011-06-07 18:31:54" id="ff7bd9e0fd0a4c78d9b9d85b411a3ee92b0fab70"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc160/Ajc160Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="347684" reportTime="2011-05-30 12:23:00">
    <summary>[enh request] Support for int values in annotation value bindings</summary>
    <description>am using the AspectJ5 style annotations and in addition I also want to create a point-cut based on a custom Annotation PermissionRequired , my Annotation looks like this - @Retention RetentionPolicy.RUNTIME @Target value = ElementType.METHOD public @interface PermissionRequired { int mode default -1; int user default -1; int group default -1; public final static int IS_DBA = 04; public final static int IS_OWNER = 02; public final static int IS_MEMBER = 40; } And an example use of this is - @PermissionRequired user = IS_DBA private void setOwnerId int ownerId { ... } I need to be able to access the values of mode, user and group from the PermissionRequired annotation in my aspect advice. My aspect looks like this - @Aspect public class PermissionRequiredAspect { @Pointcut "execution @org.exist.security.PermissionRequired * * .. &amp;amp;&amp;amp; this permission &amp;amp;&amp;amp; @annotation permissionRequired " public void methodWithPermissionRequired Permission permission, PermissionRequired permissionRequired { } @Before "methodWithPermissionRequired permission, permissionRequired " public void enforcePermissions JoinPoint joinPoint, Permission permission, PermissionRequired permissionRequired { System.out.println "POINTCUT" ; } Now the above works quite nicely, however after reading the following articles, http://andrewclement.blogspot.com/2009/02/aspectj-optimized-annotation-value.html http://www.eclipse.org/aspectj/doc/released/README-167.html https://bugs.eclipse.org/bugs/show_bug.cgi?id=234943 I feel that it would be nicer, and perhaps more performant to directly bind the values from the PermissionRequired annotation rather than the annotation itself. So I tried to modify my aspect appropriately - @Aspect public class PermissionRequiredAspect { @Pointcut "execution @org.exist.security.PermissionRequired * * .. &amp;amp;&amp;amp; this permission &amp;amp;&amp;amp; @annotation org.exist.security.PermissionRequired mode,user,group " public void methodWithPermissionRequired Permission permission, int mode, int user, int group { } @Before "methodWithPermissionRequired permission, mode, user, group " public void enforcePermissions JoinPoint joinPoint, Permission permission, int mode, int user, int group { System.out.println "POINTCUT" ; } } However, when I compile I am using iajc from Ant , I get the following error messages - [iajc] /Users/aretter/NetBeansProjects/eXist-acl/src/org/exist/security/PermissionRequiredAspect.java:14 [error] Syntax error on token "execution @org.exist.security.PermissionRequired * * .. &amp;amp;&amp;amp; this permission &amp;amp;&amp;amp; @annotation org.exist.security.PermissionRequired mode,user,group ", " " expected [iajc] @Pointcut "execution @org.exist.security.PermissionRequired * * .. &amp;amp;&amp;amp; this permission &amp;amp;&amp;amp; @annotation org.exist.security.PermissionRequired mode,user,group " [iajc] [iajc] /Users/aretter/NetBeansProjects/eXist-acl/src/org/exist/security/PermissionRequiredAspect.java:15 [error] Method annotated with @Pointcut for abstract pointcut must be abstract [iajc] public void methodWithPermissionRequired Permission permission, int mode, int user, int group { [iajc] [iajc] [iajc] 2 errors BUILD FAILED possible for int values? The values themselves are final and static, so should be able to be optimised by the compiler I guess. It would be good if the current support for single Enum or String values in annotation value bindings could be expanded to cover int values and also multiple values of these types. Thanks Adam.</description>
    <commit commitTime="2011-05-31 22:11:19" id="b1e8f4d8bc96d3cd83e093396645152b0cffdf70"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc1612/Ajc1612Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="348488" reportTime="2011-06-06 21:12:00">
    <summary>"register definition failed" with NullPointerException</summary>
    <description>Build Identifier: 20110218-0911 Here's another rare &amp;amp; hard to reproduce exception I encountered upon starting an RCP application with load-time weaving enabled see bug 338033 for another exception found in the the same environment : Jun 6, 2011 3:19:50 PM org.aspectj.weaver.tools.Jdk14Trace error SEVERE: register definition failed java.lang.NullPointerException at org.aspectj.weaver.bcel.AtAjAttributes.getMethodArgumentNames AtAjAttributes.java:1760 at org.aspectj.weaver.bcel.AtAjAttributes.access$000 AtAjAttributes.java:92 at org.aspectj.weaver.bcel.AtAjAttributes$AjAttributeMethodStruct.getArgumentNames AtAjAttributes.java:153 at org.aspectj.weaver.bcel.AtAjAttributes.extractBindings AtAjAttributes.java:1576 at org.aspectj.weaver.bcel.AtAjAttributes.handleAroundAnnotation AtAjAttributes.java:1348 at org.aspectj.weaver.bcel.AtAjAttributes.readAj5MethodAttributes AtAjAttributes.java:448 at org.aspectj.weaver.bcel.BcelMethod.unpackAjAttributes BcelMethod.java:203 at org.aspectj.weaver.bcel.BcelMethod.&amp;lt;init&amp;gt; BcelMethod.java:92 at org.aspectj.weaver.bcel.BcelObjectType.getDeclaredMethods BcelObjectType.java:290 at org.aspectj.weaver.ReferenceType.getDeclaredMethods ReferenceType.java:770 at org.aspectj.weaver.ResolvedType.getDeclaredAdvice ResolvedType.java:947 at org.aspectj.weaver.ResolvedType.getDeclaredShadowMungers ResolvedType.java:987 at org.aspectj.weaver.ResolvedType.collectShadowMungers ResolvedType.java:822 at org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers ResolvedType.java:749 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect CrosscuttingMembersSet.java:85 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect CrosscuttingMembersSet.java:69 at org.aspectj.weaver.bcel.BcelWeaver.addLibraryAspect BcelWeaver.java:202 at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.registerAspects ClassLoaderWeavingAdaptor.java:466 at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.registerDefinitions ClassLoaderWeavingAdaptor.java:290 at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.initialize ClassLoaderWeavingAdaptor.java:176 at org.eclipse.equinox.weaving.aspectj.loadtime.OSGiWeavingAdaptor.initialize Unknown Source at org.eclipse.equinox.weaving.aspectj.AspectJWeavingService.ensureAdaptorInit Unknown Source at org.eclipse.equinox.weaving.aspectj.AspectJWeavingService.preProcess Unknown Source at org.eclipse.equinox.weaving.adaptors.WeavingAdaptor.weaveClass Unknown Source at org.eclipse.equinox.weaving.hooks.WeavingHook.processClass Unknown Source at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.defineClass ClasspathManager.java:575 at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findClassImpl ClasspathManager.java:550 at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClassImpl ClasspathManager.java:481 at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass_LockClassLoader ClasspathManager.java:469 at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass ClasspathManager.java:449 at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLocalClass DefaultClassLoader.java:216 at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass BundleLoader.java:393 at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal BundleLoader.java:469 at org.eclipse.osgi.internal.loader.BundleLoader.findClass BundleLoader.java:422 at org.eclipse.osgi.internal.loader.BundleLoader.findClass BundleLoader.java:410 at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass DefaultClassLoader.java:107 at java.lang.ClassLoader.loadClass ClassLoader.java:247 at org.eclipse.osgi.internal.loader.BundleLoader.loadClass BundleLoader.java:338 at org.eclipse.osgi.framework.internal.core.BundleHost.loadClass BundleHost.java:232 at org.eclipse.osgi.framework.internal.core.AbstractBundle.loadBundleActivator AbstractBundle.java:149 at org.eclipse.osgi.framework.internal.core.BundleContextImpl.start BundleContextImpl.java:751 at org.eclipse.osgi.framework.internal.core.BundleHost.startWorker BundleHost.java:370 at org.eclipse.osgi.framework.internal.core.AbstractBundle.resume AbstractBundle.java:374 at org.eclipse.osgi.framework.internal.core.Framework.resumeBundle Framework.java:1067 at org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles StartLevelManager.java:561 at org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles StartLevelManager.java:546 at org.eclipse.osgi.framework.internal.core.StartLevelManager.incFWSL StartLevelManager.java:459 at org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel StartLevelManager.java:243 at org.eclipse.osgi.framework.internal.core.StartLevelManager.dispatchEvent StartLevelManager.java:440 at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent EventManager.java:227 at org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.run EventManager.java:337 [foo] warning register definition failed -- NullPointerException null null java.lang.NullPointerException at org.aspectj.weaver.bcel.AtAjAttributes.getMethodArgumentNames AtAjAttributes.java:1760 at org.aspectj.weaver.bcel.AtAjAttributes.access$000 AtAjAttributes.java:92 at org.aspectj.weaver.bcel.AtAjAttributes$AjAttributeMethodStruct.getArgumentNames AtAjAttributes.java:153 at org.aspectj.weaver.bcel.AtAjAttributes.extractBindings AtAjAttributes.java:1576 at org.aspectj.weaver.bcel.AtAjAttributes.handleAroundAnnotation AtAjAttributes.java:1348 at org.aspectj.weaver.bcel.AtAjAttributes.readAj5MethodAttributes AtAjAttributes.java:448 at org.aspectj.weaver.bcel.BcelMethod.unpackAjAttributes BcelMethod.java:203 at org.aspectj.weaver.bcel.BcelMethod.&amp;lt;init&amp;gt; BcelMethod.java:92 at org.aspectj.weaver.bcel.BcelObjectType.getDeclaredMethods BcelObjectType.java:290 at org.aspectj.weaver.ReferenceType.getDeclaredMethods ReferenceType.java:770 at org.aspectj.weaver.ResolvedType.getDeclaredAdvice ResolvedType.java:947 at org.aspectj.weaver.ResolvedType.getDeclaredShadowMungers ResolvedType.java:987 at org.aspectj.weaver.ResolvedType.collectShadowMungers ResolvedType.java:822 at org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers ResolvedType.java:749 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect CrosscuttingMembersSet.java:85 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect CrosscuttingMembersSet.java:69 at org.aspectj.weaver.bcel.BcelWeaver.addLibraryAspect BcelWeaver.java:202 at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.registerAspects ClassLoaderWeavingAdaptor.java:466 at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.registerDefinitions ClassLoaderWeavingAdaptor.java:290 at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.initialize ClassLoaderWeavingAdaptor.java:176 at org.eclipse.equinox.weaving.aspectj.loadtime.OSGiWeavingAdaptor.initialize Unknown Source at org.eclipse.equinox.weaving.aspectj.AspectJWeavingService.ensureAdaptorInit Unknown Source at org.eclipse.equinox.weaving.aspectj.AspectJWeavingService.preProcess Unknown Source at org.eclipse.equinox.weaving.adaptors.WeavingAdaptor.weaveClass Unknown Source at org.eclipse.equinox.weaving.hooks.WeavingHook.processClass Unknown Source at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.defineClass ClasspathManager.java:575 at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findClassImpl ClasspathManager.java:550 at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClassImpl ClasspathManager.java:481 at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass_LockClassLoader ClasspathManager.java:469 at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass ClasspathManager.java:449 at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLocalClass DefaultClassLoader.java:216 at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass BundleLoader.java:393 at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal BundleLoader.java:469 at org.eclipse.osgi.internal.loader.BundleLoader.findClass BundleLoader.java:422 at org.eclipse.osgi.internal.loader.BundleLoader.findClass BundleLoader.java:410 at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass DefaultClassLoader.java:107 at java.lang.ClassLoader.loadClass ClassLoader.java:247 at org.eclipse.osgi.internal.loader.BundleLoader.loadClass BundleLoader.java:338 at org.eclipse.osgi.framework.internal.core.BundleHost.loadClass BundleHost.java:232 at org.eclipse.osgi.framework.internal.core.AbstractBundle.loadBundleActivator AbstractBundle.java:149 at org.eclipse.osgi.framework.internal.core.BundleContextImpl.start BundleContextImpl.java:751 at org.eclipse.osgi.framework.internal.core.BundleHost.startWorker BundleHost.java:370 at org.eclipse.osgi.framework.internal.core.AbstractBundle.resume AbstractBundle.java:374 at org.eclipse.osgi.framework.internal.core.Framework.resumeBundle Framework.java:1067 at org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles StartLevelManager.java:561 at org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles StartLevelManager.java:546 at org.eclipse.osgi.framework.internal.core.StartLevelManager.incFWSL StartLevelManager.java:459 at org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel StartLevelManager.java:243 at org.eclipse.osgi.framework.internal.core.StartLevelManager.dispatchEvent StartLevelManager.java:440 at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent EventManager.java:227 at org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.run EventManager.java:337 Reproducible: Couldn't Reproduce</description>
    <commit commitTime="2011-06-07 16:46:19" id="95e70d2a23b64e7773d8edf909b1365c19752aa3"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</file>
    </fixedFiles>
  </bug>
  <bug id="349398" reportTime="2011-06-15 01:51:00">
    <summary>Abstract generic aspect leads to java.lang.ClassFormatError: Duplicate method name&amp;signature in class file</summary>
    <description>Build Identifier: 1.6.12.20110613132200 Hey there, i have a very similar problem like https://bugs.eclipse.org/bugs/show_bug.cgi?id=223226 but i am running version 1.6.12 and the other bug should be closed to 1.6.1 :- . Here my project. Dont bother about the Generator class, its only for university ; package info.unterstein.hagen.moderne.ea6.a3; import java.util.HashMap; /** * Enables a more complex and generic caching aspect which can be extended to be * used in several use cases. * * @author &amp;lt;a href=" mailto:unterstein@me.com "&amp;gt;Johannes Unterstein&amp;lt;/a&amp;gt; * @param &amp;lt;k&amp;gt; * the class of the keys * @param &amp;lt;V&amp;gt; * the class of the cached values */ public abstract aspect CacheAspect&amp;lt;V&amp;gt; { private HashMap&amp;lt;Object, V&amp;gt; cache; public abstract pointcut cachePoint Object key ; V around Object key : cachePoint key { if this.cache == null { this.cache = new HashMap&amp;lt;Object, V&amp;gt; ; } V result; if this.cache.containsKey key { result = this.cache.get key ; } else { result = proceed key ; this.cache.put key, result ; } return result; } } package info.unterstein.hagen.moderne.ea6.a3; /** * An extension of the generic cache for the concrete use case of caching the * {@link DataGenerator}. * * @author &amp;lt;a href=" mailto:unterstein@me.com "&amp;gt;Johannes Unterstein&amp;lt;/a&amp;gt; */ public aspect DataGeneratorCacheAspect extends CacheAspect&amp;lt;Integer&amp;gt; { public pointcut cachePoint Object key : call Integer DataGenerator.getData Integer &amp;amp;&amp;amp; args key ; } package info.unterstein.hagen.moderne.ea6.a3; public class DataGenerator { private static final int MAGIC_NUMBER = 23; public Integer getData Integer i { try { Thread.sleep 100 ; } catch InterruptedException ex { } return new Integer i * MAGIC_NUMBER ; } } The eclipse AJDT cross reference view identifies the cross references between the pointcut and the according getData Method in the DataGenerator, but while running a test suite see below the compiler throws the following exception: java.lang.ClassFormatError: Duplicate method name&amp;amp;signature in class file info/unterstein/hagen/moderne/ea6/a3/CacheAspect at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClassCond ClassLoader.java:632 at java.lang.ClassLoader.defineClass ClassLoader.java:616 at java.security.SecureClassLoader.defineClass SecureClassLoader.java:141 at java.net.URLClassLoader.defineClass URLClassLoader.java:283 at java.net.URLClassLoader.access$000 URLClassLoader.java:58 at java.net.URLClassLoader$1.run URLClassLoader.java:197 at java.security.AccessController.doPrivileged Native Method at java.net.URLClassLoader.findClass URLClassLoader.java:190 at java.lang.ClassLoader.loadClass ClassLoader.java:307 at sun.misc.Launcher$AppClassLoader.loadClass Launcher.java:301 at java.lang.ClassLoader.loadClass ClassLoader.java:248 at java.lang.Class.getDeclaredMethods0 Native Method at java.lang.Class.privateGetDeclaredMethods Class.java:2427 at java.lang.Class.getMethod0 Class.java:2670 at java.lang.Class.getMethod Class.java:1603 at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestLoader.getTest JUnit3TestLoader.java:99 at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestLoader.loadTests JUnit3TestLoader.java:59 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests RemoteTestRunner.java:452 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests RemoteTestRunner.java:683 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run RemoteTestRunner.java:390 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main RemoteTestRunner.java:197 Cheers, Johannes Unterstein Here is the test suite: package info.unterstein.hagen.moderne.ea6.a3; import junit.framework.TestCase; public class DataGeneratorTest extends TestCase { public void testGetData { DataGenerator generator = new DataGenerator ; assertEquals new Integer 0 , generator.getData 0 ; assertEquals new Integer 23 , generator.getData 1 ; assertEquals new Integer 2 * 23 , generator.getData 2 ; } public void testGetDataSpeedUp { DataGenerator generator = new DataGenerator ; long before = System.currentTimeMillis ; for int i = 0; i &amp;lt; 5; i++ { generator.getData i ; } for int i = 0; i &amp;lt; 5; i++ { generator.getData 0 ; } long after = System.currentTimeMillis ; assertTrue after - before &amp;lt; 600 ; } } Reproducible: Always Steps to Reproduce: 1.Run the attached code</description>
    <commit commitTime="2011-06-15 16:14:40" id="1939b950303f6e5cf417be3cdde605812fd95343"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java</file>
    </fixedFiles>
  </bug>
  <bug id="349636" reportTime="2011-06-16 20:13:00">
    <summary>AspectJ reports "abort trouble" while instrumenting a class on startup</summary>
    <description>Build Identifier: 20110218-0911 java.lang.NullPointerException at org.aspectj.weaver.bcel.Utility.appendConversion Utility.java:272 at org.aspectj.weaver.bcel.BcelVar.appendConvertableArrayLoad BcelVar.java:81 at org.aspectj.weaver.bcel.BcelVar.createConvertableArrayLoad BcelVar.java:101 at org.aspectj.weaver.bcel.BcelShadow.makeClosureClassAndReturnConstructor BcelShadow.java:3066 at org.aspectj.weaver.bcel.BcelShadow.weaveAroundClosure BcelShadow.java:2830 at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:342 at org.aspectj.weaver.Shadow.implementMungers Shadow.java:630 at org.aspectj.weaver.Shadow.implement Shadow.java:544 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:3147 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:490 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:100 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1687 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1631 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1394 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1180 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:467 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:318 at org.eclipse.equinox.weaving.aspectj.loadtime.OSGiWeavingAdaptor.weaveClass Unknown Source at org.eclipse.equinox.weaving.aspectj.AspectJWeavingService.preProcess Unknown Source at org.eclipse.equinox.weaving.adaptors.WeavingAdaptor.weaveClass Unknown Source at org.eclipse.equinox.weaving.hooks.WeavingHook.processClass Unknown Source at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.defineClass ClasspathManager.java:575 at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findClassImpl ClasspathManager.java:550 at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClassImpl ClasspathManager.java:481 at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass_LockClassLoader ClasspathManager.java:469 at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass ClasspathManager.java:449 at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLocalClass DefaultClassLoader.java:216 at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass BundleLoader.java:393 at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal BundleLoader.java:469 at org.eclipse.osgi.internal.loader.BundleLoader.findClass BundleLoader.java:422 at org.eclipse.osgi.internal.loader.BundleLoader.findClass BundleLoader.java:410 at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass DefaultClassLoader.java:107 at java.lang.ClassLoader.loadClass ClassLoader.java:247 at org.eclipse.osgi.internal.loader.BundleLoader.loadClass BundleLoader.java:338 at org.eclipse.osgi.framework.internal.core.BundleHost.loadClass BundleHost.java:232 at org.eclipse.osgi.framework.internal.core.AbstractBundle.loadClass AbstractBundle.java:1197 at org.springframework.osgi.util.BundleDelegatingClassLoader.findClass BundleDelegatingClassLoader.java:99 at org.springframework.osgi.util.BundleDelegatingClassLoader.loadClass BundleDelegatingClassLoader.java:157 at java.lang.ClassLoader.loadClass ClassLoader.java:247 at org.springframework.util.ClassUtils.forName ClassUtils.java:257 at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass AbstractBeanDefinition.java:408 at org.springframework.beans.factory.support.AbstractBeanFactory.doResolveBeanClass AbstractBeanFactory.java:1271 at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass AbstractBeanFactory.java:1242 at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType AbstractAutowireCapableBeanFactory.java:576 at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean AbstractBeanFactory.java:1319 at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType DefaultListableBeanFactory.java:315 at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.invokeBeanFactoryPostProcessors AbstractDelegatedExecutionApplicationContext.java:391 at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.invokeBeanFactoryPostProcessors AbstractDelegatedExecutionApplicationContext.java:364 at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$3.run AbstractDelegatedExecutionApplicationContext.java:256 at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL PrivilegedUtils.java:87 at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.startRefresh AbstractDelegatedExecutionApplicationContext.java:222 at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.stageOne DependencyWaiterApplicationContextExecutor.java:225 at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.refresh DependencyWaiterApplicationContextExecutor.java:178 at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.refresh AbstractDelegatedExecutionApplicationContext.java:159 at org.springframework.osgi.extender.internal.activator.LifecycleManager$1.run LifecycleManager.java:223 at java.lang.Thread.run Thread.java:662 Reproducible: Sometimes</description>
    <commit commitTime="2011-06-17 22:39:42" id="f7b11932d5e3bdbb2de85fe21af8443ad9351530"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/Utility.java</file>
    </fixedFiles>
  </bug>
  <bug id="349764" reportTime="2011-06-19 05:42:00">
    <summary>Repeated output of ASPECTJ: aspectj.overweaving=true: overweaving switched ON</summary>
    <description>Build Identifier: 1.6.11 The message is repeated every time a new class loader is being use to load weaving configuration using -Dorg.aspectj.tracing.factory=default . Since this value is a system ! property there is no need to display its value more than once or even check it more than once - it could be lazily initialized and cached... Reproducible: Always Steps to Reproduce: 1. use -Dorg.aspectj.tracing.factory=default -Daspectj.overweaving=true properties 2. place some JAR that contains aop.xml with some aspects and weaving options where it can be loaded/visible from several class loaders 3. runt the application and check the STDOUT output</description>
    <commit commitTime="2011-06-20 17:10:01" id="bb2aea40a61fd4bd91d8a0b67cf7933ee728942e"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/World.java</file>
    </fixedFiles>
  </bug>
  <bug id="350800" reportTime="2011-06-30 07:35:00">
    <summary>NPE when using Annotations, Generics and Abstract Pointcut</summary>
    <description>Build Identifier: 20110615-0604 java.lang.NullPointerException at org.aspectj.weaver.ResolvedPointcutDefinition.parameterizedWith ResolvedPointcutDefinition.java:121 at org.aspectj.weaver.ReferenceType.getDeclaredPointcuts ReferenceType.java:797 at org.aspectj.weaver.ResolvedType.getExposedPointcuts ResolvedType.java:2323 at org.aspectj.weaver.ResolvedType.getExposedPointcuts ResolvedType.java:2316 at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.che ... oBuildJob.run AutoBuildJob.java:241 at org.eclipse.core.internal.jobs.Worker.run Worker.java:54 Compile error: NullPointerException thrown: null Reproducible: Always Steps to Reproduce: The code below fails during compilation: package test.aop; import java.io.Serializable; public abstract class AbstractAdapter&amp;lt;T extends Serializable&amp;gt; { protected abstract T execute T message ; } package test.aop; public class Adapter extends AbstractAdapter&amp;lt;String&amp;gt; { @Override public String execute String message { return message; } } package test.aop; import java.io.Serializable; import org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.annotation.Around; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.Pointcut; @Aspect public abstract class AbstractProbingAspect&amp;lt;T extends Serializable&amp;gt; { @Pointcut "" protected abstract void adapterMethodExecution ; @Around "adapterMethodExecution " public T around ProceedingJoinPoint thisJoinPoint throws Throwable { return T thisJoinPoint.proceed ; } protected abstract String extractFunctionName T command ; }</description>
    <commit commitTime="2011-06-30 17:30:33" id="654dbbc6587f8117e7e2e7daf9bf6eab1bfba39c"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc1612/Ajc1612Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="350855" reportTime="2011-06-30 11:32:00">
    <summary>overweaving misbehaving when subclassing WeavingURLClassLoader</summary>
    <description>Raised by the Spring Insight team, they observed that in a system where they are using a special classloader subclassing weaving url classloader they see it fail to weave an aspect if overweaving is on.</description>
    <commit commitTime="2011-06-30 15:34:56" id="2302e94e25862a540ccab34b8f4707081ec7fc06"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="351085" reportTime="2011-07-04 09:12:00">
    <summary>Investigate compatibility with AJDT</summary>
    <description>Although initial smoke tests with OTDT and AJDT in the same Eclipse install went fine, it has been reported that this combination could throw exceptions, leaving the system in a broken state. E.g.: java.lang.ClassFormatError: Duplicate field name&amp;amp;signature in class file org/eclipse/jdt/core/JavaCore We should investigate if OT/Equinox and AspectJ's JDT Weaving interact in any bad ways.</description>
    <commit commitTime="2011-09-16 00:58:27" id="fdca1771f01be020b9f8e1daec5726447d170d5e"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc1612/Ajc1612Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="352389" reportTime="2011-07-18 16:08:00">
    <summary>overweaving can attribute duplicate attributes, one of which will not deserialize correctly</summary>
    <description>When overweaving it is possible that a class will get a second WeaverState attribute. This second one will not be valid it hasn't been correctly configured . This isn't normally a problem because the next thing that happens is that the class is defined to the VM. But if *another* weave step occurs, the malformed attribute will cause that weave to fail with this kind of message: bad WeaverState.Kind: -115 The solution is to avoid adding the duplicate when overweaving.</description>
    <commit commitTime="2011-07-18 20:44:33" id="8553b30c9211a49b225e6c6bc81abda849263740"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="353100" reportTime="2011-07-26 08:47:00">
    <summary>Need to demote "warning ignoring duplicate definition" from warning to debug</summary>
    <description>Build Identifier: 1.6.11 This kind of “problem” can occur for complex class loader hierarchies, and since it is not really a problem, we should make it debug level message so as not to write log messages un-necessarily. Reproducible: Always Steps to Reproduce: 1. Create an application that has some weaved class loaders hierarchy - recommend some URLClassLoader derived ones 2. Add the same ! JAR with only an aop.xml file to more than one loader along the hierarchy 3. Make the loader the default context thread loader and start running some code.</description>
    <commit commitTime="2011-07-26 15:52:40" id="c6fb752d7ca6910bcb825cfd5ccdf8d39e419408"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="353349" reportTime="2011-07-28 13:52:00">
    <summary>NPE in deleteNewAndDup</summary>
    <description>java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelShadow.deleteNewAndDup BcelShadow.java:179 at org.aspectj.weaver.bcel.BcelShadow.prepareForMungers BcelShadow.java:303 at org.aspectj.weaver.Shadow.implement Shadow.java:543 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:3147 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:490 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:100 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1687 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1631 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1394 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1180 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:467 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:318 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:96</description>
    <commit commitTime="2011-07-28 20:48:42" id="e8ef5bfcf9faabf99c443572dca0ddbde545d832"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="353457" reportTime="2011-07-30 17:23:00">
    <summary>NPE when saving an aspect - Aspectj Internal Compiler Error</summary>
    <description>Created attachment 200625 [details] Two projects java.lang.NullPointerException at org.aspectj.weaver.ShadowMunger.getBinaryFile ShadowMunger.java:201 at org.aspectj.weaver.ShadowMunger.getBinarySourceLocation ShadowMunger.java:188 at org.aspectj.weaver.model.AsmRelationshipProvider.createAdviceChild AsmRelationshipProvider.java:699 at org.aspectj.weaver.model.AsmRelationshipProvider.addChildNodes AsmRelationshipProvider.java:657 at org.aspectj.weaver.model.AsmRelationshipProvider.crea ... bleAspect$edu_uat_cs2011_observerpattern_Observable$observers java.util.List end public class edu.uat.csc263.su10045.observermodel.DepartmentManager I have attached a zip file containing the two projects that in combination caused this problem. To recreate, load the projects, go into DepartmentManagerObservableAspect, modify the pointcut and save the file.</description>
    <commit commitTime="2011-08-15 20:28:37" id="0f506abfabde7877848e3cdac925361e1d134455"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ShadowMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="354022" reportTime="2011-08-05 12:17:00">
    <summary>constructor inlining can fail for some groovy built code</summary>
    <description>The file grails.util.BuildSettings contains bytecode where the constructors are recursive. You can't compile this in Java A { this ; } but groovy generates some code where it switches on a value in the ctor and if it is a certain value, the recursive ctor call is made. I imagine this 'never happens' in practice but because it is in the bytecode it trips up the AspectJ code which inlines this calls before weaving - since it gets into an infinite loop. For now, just keep track of ctors making the recursive call and so don't get trapped in the infinite loop.</description>
    <commit commitTime="2011-08-05 16:17:39" id="6ae463a7494a0e04878e2d265a3505dd0d32cc4a"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="354470" reportTime="2011-08-11 05:35:00">
    <summary>perthis inserts perObjectField to all compiled classes</summary>
    <description>I need to have perthis aspect for classes which have annotated methods: @Aspect "perthis transactional public class TransactionalAspect { @Pointcut "execution @Transactional * * .. " public void transactional { } } It is supposed that perObjectField should be created only for classes which have annotated methods, but currently perObjectField is added to each class.</description>
    <commit commitTime="2011-09-14 00:04:38" id="e72228e3682ad8cb6503d2c0b1c06ac059ae7e1a"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc1612/Ajc1612Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="354947" reportTime="2011-08-17 09:28:00">
    <summary>Nullpointer-Exception while parsing definition file aop.xml in DocumentParser</summary>
    <description>Build Identifier: 20100617-1415 With an activated NullpointerException-Breakpoint i recently stumpled upon a thrown NPE in the DocumentParser.parse -method Line 106 : public static Definition parse final URL url throws Exception { InputStream in = null; try { if CACHE &amp;amp;&amp;amp; parsedFiles.containsKey url.toString { return parsedFiles.get url.toString ; } Definition def=null; if LIGHTPARSER { def = SimpleAOPParser.parse url ; }else{ def = saxParsing url ; } if CACHE &amp;amp;&amp;amp; def.getAspectClassNames .size &amp;gt; 0 { parsedFiles.put url.toString , def ; } return def; } finally { try { in.close ; } catch Throwable t { } } } ... The parsing of the configuration file works fine, merely the InputStream seems not to be used anymore. Reproducible: Always</description>
    <commit commitTime="2011-08-17 15:54:09" id="e71e287b8c6c18370b79f7f8bacc734274573267"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="356612" reportTime="2011-09-02 11:08:00">
    <summary>Performance problem with @annotation x on field access</summary>
    <description>Build Identifier: Some time ago there was a bug report about slow performance with @annotation on method level: https://bugs.eclipse.org/bugs/show_bug.cgi?id=296484 I want to report a similar issue with the @annotation on field access level. Using something like the following advice which captures the use of a @Bind-annotation on field set access results in poor performance: Object around Object host, Bind bind, Object newGuest : set @Bind !java.util.Collection+ *.* &amp;amp;&amp;amp; this host &amp;amp;&amp;amp; args newGuest &amp;amp;&amp;amp; @annotation bind { // ... return proceed host, bind, newGuest ; } A workaround similar to the one descirbed in the bug reports performs much better: Object around Object host, Object newGuest : set @Bind !java.util.Collection+ *.* &amp;amp;&amp;amp; this host &amp;amp;&amp;amp; args newGuest { Bind bind = FieldSignature thisJoinPointStaticPart.getSignature .getField .getAnnotation Bind.class ; // ... return proceed host, newGuest ; } Reproducible: Always</description>
    <commit commitTime="2011-09-02 22:33:04" id="11f0639de5913d78ef8a83421dd2afa06a6fd792"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/InstructionList.java</file>
    </fixedFiles>
  </bug>
  <bug id="357012" reportTime="2011-09-07 17:26:00">
    <summary>unable to specify class annotation value constraint</summary>
    <description>Attempting a match like this: get @Anno foo=String.class * * doesn't work due to 'class' tripping up the parser. The JDT patched java.g needs to recognize class as a PseudoToken so that it will pass it through for pointcut parsing.</description>
    <commit commitTime="2011-09-07 22:00:30" id="668a0fbd632c4d4862f06d10fa01f2d10fa4689f"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/PatternParser.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/ExactAnnotationTypePattern.java</file>
    </fixedFiles>
  </bug>
  <bug id="357013" reportTime="2011-09-07 17:28:00">
    <summary>it would be nice to express != constraints in annotation value matching</summary>
    <description>This would be nice: get @Anno value!=5 * * which would match gets of fields i and k here: @Anno value=4 int i @Anno value=5 int j @Anno value=6 int k</description>
    <commit commitTime="2011-09-07 22:00:30" id="668a0fbd632c4d4862f06d10fa01f2d10fa4689f"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/PatternParser.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/ExactAnnotationTypePattern.java</file>
    </fixedFiles>
  </bug>
  <bug id="357019" reportTime="2011-09-07 18:30:00">
    <summary>change message about 'not built reweavable' into an xlint</summary>
    <description>the message that comes out indicating a type cannot be woven because it has previously been built deliberately in not-reweavable mode is currently a hard error. We should make it an xlint defaulting to error .</description>
    <commit commitTime="2011-09-07 22:56:48" id="476b222ee32dbb61177a58cc764d405c89b6db4f"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/Lint.java</file>
    </fixedFiles>
  </bug>
  <bug id="359332" reportTime="2011-09-29 00:22:00">
    <summary>NPE in AjBuildManager.java:528 after non-Java/AJ file was renamed</summary>
    <description>Build Identifier: Upon using Eclipse's "Rename Resource" dialog to rename my project's "src/main/resources/META-INF/spring/email.properties" file to "scheduler.properties" in the same directory, Eclipse displayed the "AspectJ Internal Compiler Error" dialog with this stack trace: java.io.FileNotFoundException at java.io.FileInputStream.open Native Method at java.io.FileInputStream.&amp;lt;init&amp;gt; FileInputStream.java:120 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesFromFile AjBuildManager.java:528 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesToDestination AjBuildManager.java:466 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:363 ... e error: FileNotFoundException thrown: /Users/aswan/projects/foo/src/main/resources/META-INF/spring/email.properties No such file or directory Reproducible: Couldn't Reproduce Steps to Reproduce: N/A</description>
    <commit commitTime="2011-09-29 16:34:42" id="14a6eac32a20c81682e9b6875e8c3a4a8d9e8897"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="360331" reportTime="2011-10-08 15:07:00">
    <summary>Changes in aop.xml ignored by build process</summary>
    <description>Build Identifier: 20110916-0149 When using AspectJ Bulider customized by aop.xml file changes in the file are not reflected in build process. It looks like it is caused by fix for Bug 329126 introducing caching of configuration. I have found two workarounds: * To restart IDE * To add -Dorg.aspectj.weaver.loadtime.configuration.cache=false into eclipse.ini Nevertheless bug is annoying and second fix may cause bug 329126 to reappear. Moreover it would be nice if saving aop.xml would cause rebuild without manual request by user. Reproducible: Always Steps to Reproduce: 1. Create "Bean Example" from AspectJ Examples 2. Add to project aop.xml with content: &amp;lt;!DOCTYPE aspectj PUBLIC "-//AspectJ//DTD//EN" " http://www.eclipse.org/aspectj/dtd/aspectj.dtd "&amp;gt; &amp;lt;aspectj&amp;gt; &amp;lt;weaver&amp;gt; &amp;lt;exclude within="bean.*" /&amp;gt; &amp;lt;/weaver&amp;gt; &amp;lt;aspects&amp;gt; &amp;lt;aspect name="bean.BoundPoint"/&amp;gt; &amp;lt;/aspects&amp;gt; &amp;lt;/aspectj&amp;gt; 3. Add aop.xml to aop.xml management 4. Rebuild project 5. Change exclude to include in aop.xml 4. Rebuild project</description>
    <commit commitTime="2011-10-11 16:14:02" id="289a692299190ea032348fb0f8243a025245a55c"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="362956" reportTime="2011-11-04 20:33:00">
    <summary>neo4j NPE</summary>
    <description>java.lang.NullPointerException at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches ExactAnnotationTypePattern.java:128 at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches ExactAnnotationTypePattern.java:96 at org.aspectj.weaver.patterns.AndAnnotationTypePattern.matches AndAnnotationTypePattern.java:42 at org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern.matchesExactly AnyWithAnnotationTypePattern.java:55 at org.aspectj.weaver.patterns.TypePattern.matchesStatically TypePattern.java:132 at org.aspectj.weaver.patterns.TypePattern.matches TypePattern.java:146 at org.aspectj.weaver.patterns.SignaturePattern.couldEverMatch SignaturePattern.java:999 at org.aspectj.weaver.patterns.DeclareAnnotation.couldEverMatch DeclareAnnotation.java:483 at org.aspectj.weaver.bcel.BcelClassWeaver.getMatchingSubset BcelClassWeaver.java:1065 at org.aspectj.weaver.bcel.BcelClassWeaver.weaveDeclareAtField BcelClassWeaver.java:1301 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:445 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:100 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1687 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1631 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1394 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1180 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:514 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving AjPipeliningCompilerAdapter.java:447 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:432 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:98 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:652 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:392 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1021 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:268 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:181 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:371</description>
    <commit commitTime="2011-11-07 16:17:10" id="942da06faacec35b0aab76eb2729e55b174e3c97"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java</file>
    </fixedFiles>
  </bug>
  <bug id="363962" reportTime="2011-11-16 14:24:00">
    <summary>NPE got when dealing with Bootstrap classloaded classes</summary>
    <description>Using a LifeRay + Spring + jBoss + extra LTW we got the next exception: 2011-11-15 17:23:23,735 ERROR [org.springframework.web.context.ContextLoader] main Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'com.liferay.portal.spring.bean.BeanReferenceAnnotationBeanPostProcessor#0' defined in class path resource [META-INF/base-spring.xml]: BeanPostProcessor before instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.aop.aspectj.AspectJPointcutAdvisor#0': Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.aop.aspectj.AspectJPointcutAdvisor]: Constructor threw exception; nested exception is java.lang.NullPointerException         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean AbstractAutowireCapableBeanFactory.java:452         at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject AbstractBeanFactory.java:291         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton DefaultSingletonBeanRegistry.java:222         at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean AbstractBeanFactory.java:288         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean AbstractBeanFactory.java:194         at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors AbstractApplicationContext.java:722         at org.springframework.context.support.AbstractApplicationContext.refresh AbstractApplicationContext.java:410         at org.springframework.web.context.ContextLoader.createWebApplicationContext ContextLoader.java:276         at org.springframework.web.context.ContextLoader.initWebApplicationContext ContextLoader.java:197         at org.springframework.web.context.ContextLoaderListener.contextInitialized ContextLoaderListener.java:47         at com.liferay.portal.spring.context.PortalContextLoaderListener.contextInitialized PortalContextLoaderListener.java:65         at org.apache.catalina.core.StandardContext.listenerStart StandardContext.java:3910 A LOT OF CAUSED BY - NESTED: [...] Caused by: java.lang.NullPointerException         at org.aspectj.weaver.WeakClassLoaderReference.&amp;lt;init&amp;gt; WeakClassLoaderReference.java:43         at org.aspectj.weaver.tools.PointcutParser.setClassLoader PointcutParser.java:218         at org.aspectj.weaver.tools.PointcutParser.&amp;lt;init&amp;gt; PointcutParser.java:205         at org.aspectj.weaver.tools.PointcutParser.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution PointcutParser.java:167         at org.springframework.aop.aspectj.AspectJExpressionPointcut.initializePointcutParser AspectJExpressionPointcut.java:207         at org.springframework.aop.aspectj.AspectJExpressionPointcut.buildPointcutExpression AspectJExpressionPointcut.java:189         at org.springframework.aop.aspectj.AspectJExpressionPointcut.checkReadyToMatch AspectJExpressionPointcut.java:181         at org.springframework.aop.aspectj.AspectJExpressionPointcut.getMethodMatcher AspectJExpressionPointcut.java:167         at org.springframework.aop.aspectj.AbstractAspectJAdvice.buildSafePointcut AbstractAspectJAdvice.java:188         at org.springframework.aop.aspectj.AspectJPointcutAdvisor.&amp;lt;init&amp;gt; AspectJPointcutAdvisor.java:51         at sun.reflect.NativeConstructorAccessorImpl.newInstance0 Native Method         at sun.reflect.NativeConstructorAccessorImpl.newInstance NativeConstructorAccessorImpl.java:39         at sun.reflect.DelegatingConstructorAccessorImpl.newInstance DelegatingConstructorAccessorImpl.java:27         at java.lang.reflect.Constructor.newInstance Constructor.java:513         at org.springframework.beans.BeanUtils.instantiateClass BeanUtils.java:126         ... 96 more Where, the code where the NPE is arising is: public WeakClassLoaderReference ClassLoader loader { 42-&amp;gt; loaderRef = new WeakReference loader ; 43-&amp;gt; hashcode = loader.hashCode * 37; } Because when setting the classLoader for the PointcutParser a null is received:  private PointcutParser Set&amp;lt;PointcutPrimitive&amp;gt; supportedPointcutKinds { supportedPrimitives = supportedPointcutKinds; for PointcutPrimitive pointcutPrimitive : supportedPointcutKinds { if pointcutPrimitive == PointcutPrimitive.IF || pointcutPrimitive == PointcutPrimitive.CFLOW || pointcutPrimitive == PointcutPrimitive.CFLOW_BELOW { throw new UnsupportedOperationException "Cannot handle if, cflow, and cflowbelow primitives" ; } } 205-&amp;gt; setClassLoader PointcutParser.class.getClassLoader ; } I guess this is caused because  the PointcutParser is considered a base type loaded from a bootstrap class loader , so the class.getClassLoader that is involved returns null as it was loaded from the javaagent option. This happens when both types of Weaving loadtime + offline are put in place... I would like to suggest the next patch: public WeakClassLoaderReference ClassLoader loader { loaderRef = new WeakReference loader ; if loader == null { hashcode = System.identityHashCode this ; }else{ hashcode = loader.hashCode * 37; } } Please find it attached to this bug report. What do you think? Thanks in advance, Best regards.</description>
    <commit commitTime="2011-11-17 21:20:07" id="51632439ca42fc130148eaa8715d406416fdda6d"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/WeakClassLoaderReference.java</file>
    </fixedFiles>
  </bug>
  <bug id="363979" reportTime="2011-11-16 17:06:00">
    <summary>MissingImplementationException when an annotation exists with child annotations.</summary>
    <description>Build Identifier: STS Version: 2.8.0.RELEASE Build Id: 201110171000 Currently can reproduce consistently when applying an aspect that has a declare parents declaration that uses an annotation attribute as a discriminator AND the compliation unit class contains another annotation that subsequently contains child annotations. i.e. Aspect has: declare parents: @SomeAnnotation someAttribute=someValue * extends SomeClass; Compilation Unit contains annotations of: @SomeAnnotation someAttribute = someValue @YetAnotherAnnotation value = @SomeChildAnnotation public class Example { ... } Here is the specific stack trace from my instance, but can reproduce generically. [ERROR] Please raise an AspectJ bug. AspectJ does not know how to convert this annotation value [@NamedQuery name = "Department.findAll",query = "select d from Department d order by d.name ASC",hints = {@QueryHint name = "org.hibernate.cacheable",value = "true" } ] [ERROR] org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType$MissingImplementationException: Please raise an AspectJ bug. AspectJ does not know how to convert this annotation value [@NamedQuery name = "Department.findAll",query = "select d from Department d order by d.name ASC",hints = {@QueryHint name = "org.hibernate.cacheable",value = "true" } ] [ERROR] at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.generateElementValueForNonConstantExpression EclipseSourceType.java:796 [ERROR] at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.generateElementValue EclipseSourceType.java:765 [ERROR] at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.generateElementValueForNonConstantExpression EclipseSourceType.java:809 [ERROR] at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.generateElementValue EclipseSourceType.java:765 [ERROR] at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.generateAnnotation EclipseSourceType.java:721 [ERROR] at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.convertEclipseAnnotation EclipseSourceType.java:676 [ERROR] at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.getAnnotations EclipseSourceType.java:656 [ERROR] at org.aspectj.weaver.ReferenceType.getAnnotationOfType ReferenceType.java:224 [ERROR] at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches ExactAnnotationTypePattern.java:122 [ERROR] at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches ExactAnnotationTypePattern.java:96 [ERROR] at org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern.matchesExactly TypePattern.java:568 [ERROR] at org.aspectj.weaver.patterns.TypePattern.matchesStatically TypePattern.java:133 [ERROR] at org.aspectj.weaver.patterns.DeclareParents.match DeclareParents.java:63 [ERROR] at org.aspectj.weaver.patterns.DeclareParents.findMatchingNewParents DeclareParents.java:358 [ERROR] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareParents AjLookupEnvironment.java:880 [ERROR] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:730 Reproducible: Always Steps to Reproduce: 1. Define an aspect with declare parents that depends on an annotation with an attribute value 2. Define a class that has that annotation and attribute value, as well as another annotation that contains child annotations i.e. @NamedQueries { @NamedQuery... 3. Compile.</description>
    <commit commitTime="2011-11-17 18:15:59" id="49e0427bb885251ed491c5e243f2f5995149f57f"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java</file>
    </fixedFiles>
  </bug>
  <bug id="368046" reportTime="2012-01-06 12:05:00">
    <summary>configure a set of classloader for which weavers should not be created in an LTW scenario</summary>
    <description>Prototyped and tested for JspClassLoaders see the thread 'aspectj and jsp load' on the mailing list . That was done through a system property but it would be easier via aop.xml. However, this would be the first time we have an aop.xml setting that affects global operation of loadtime weaving. When any classloader actually got far enough to load the aop.xmls it would discover this setting and from that point on it would be set. In our JspClassLoader case this would mean that either some non-JspClassLoader is run early enough to discover this setting and turn it off for all JspClassLoaders or the first JspClassLoader will discover the setting and turn it off for all other JspClassLoaders. I think we can live with that mode of operation.</description>
    <commit commitTime="2013-07-29 22:24:55" id="0c0adc560d413ad0ec2a6dcd076e3ab292d12806"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc174/Ajc174Tests.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Options.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Aj.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="371684" reportTime="2012-02-15 17:16:00">
    <summary>type construction for signature makes mistakes with wildcards</summary>
    <description>If you have a type with multiple type params, like this: Foo&amp;lt;?,T&amp;gt; the signature is: LFoo&amp;lt;*TT;&amp;gt;; and the handling of * is not working in TypeFactory. If that signature is passed in it will actually build: Foo&amp;lt;?&amp;gt; having lost the second type parameter, this breaks code later that has expectations on the number of params. e.g. ArrayIndexOutOfBoundsException when building parameterization map</description>
    <commit commitTime="2012-02-15 14:25:02" id="89756cdfe58319d4e8e29b88de6fd8810d84244d"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/TypeFactory.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="371998" reportTime="2012-02-19 15:42:00">
    <summary>org.aspectj.weaver.BCException compiling @DeclareParents with value using "||"</summary>
    <description>Build Identifier: 20110916-0149 Using: import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.DeclareParents; @Aspect public class AspectTest { private interface X {} private static class XImpl {} @DeclareParents value="java.lang.Runnable || java.util.concurrent.Callable", defaultImpl=XImpl.class private X xImpl; } Throws: org.aspectj.weaver.BCException at org.aspectj.weaver.patterns.ExactTypePattern.resolveBindings ExactTypePattern.java:312 at org.aspectj.weaver.patterns.OrTypePattern.resolveBindings OrTypePattern.java:121 at org.aspectj.weaver.bcel.AtAjAttributes.handleDeclareParentsAnnotation AtAjAttributes.java:746 at org.aspectj.weaver.bcel.AtAjAttributes.readAj5ClassAttributes AtAjAttributes.java:384 at org.aspectj.weaver.bcel.BcelObjectType.ens ... \Program Files\Java\jre6\lib\ext\sunjce_provider.jar;C:\Users\xxx\software\eclipse-j2ee\\plugins/org.eclipse.equinox.launcher_1.2.0.v20110502.jar; Current workaround is to use multiple DeclareParents annotations on different variables. Reproducible: Always Steps to Reproduce: 1. Create new class given the code in the details. 2. Save and compile in Eclipse.</description>
    <commit commitTime="2012-03-02 08:17:44" id="f37c56e02982a1043e7821bf033b58495f8a6b74"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="374745" reportTime="2012-03-20 07:19:00">
    <summary>Performance regression in 1.6.12</summary>
    <description>Build Identifier: 1.6.12 The application I'm working on takes 152 seconds to start under the 1.6.11 LTW agent, but takes 37 *minutes* to start under the 1.6.12 LTW agent. Profiling it under the 1.6.12 LTW agent shows the extra time is spent in ReferenceType.addDependentType being called from TypeFactory.createParameterizedType . Under a debugger, I can see that the ReferenceType.derivativeTypes HashSet is getting very very big because ResolvedType.equals falls back to ==, so there are lots of 'duplicates' in the HashSet , which is causing each successive add to get slower and slower. It looks like derivativeTypes was changed from ArrayList to HashSet in 1.6.12 as part of the changeset for bug 344005 , which seems to be what caused the performance regression. Changing derivativeTypes back to ArrayList solves the issue and brings startup times back in line with 1.6.11. I'm not sure if this is the best fix though, I started thinking about storing parameterized types in World.typeMap to remove duplicate instances globally and/or changing ResolvedType.equals to remove duplicate instances inside of derivativeTypes, but quickly got in over my head. Reproducible: Always</description>
    <commit commitTime="2012-03-23 16:44:03" id="549d227a8ded88d708415162b36cb273ec496b77"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/UnresolvedTypeVariableReferenceType.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/TypeFactory.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/World.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/TypeVariableReferenceType.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/UnresolvedType.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java</file>
    </fixedFiles>
  </bug>
  <bug id="374964" reportTime="2012-03-21 14:02:00">
    <summary>Performance - improve pointcut expensiveness calculation</summary>
    <description>Build Identifier: 1.6.12 I'm able to reduce the AspectJ LTW startup overhead on the app I'm working on, from 95 seconds down to 47 seconds, just by switching the "expensiveness" of THIS_OR_TARGET and CALL in PointcutEvaluationExpenseComparator. It seems to make sense to me that THIS_OR_TARGET is more expensive since it requires type matching under profiler ExactTypePattern.matchesInstanceof is what shows up as very expensive , whereas CALL can evaluate very quickly in most cases since it just fails to match on method name. I'm not sure if this is specific to my particular usage, but cutting 50% of the LTW startup is a very nice improvement. If you think this change doesn't make sense for everyone, I can work on a patch that makes this configurable somehow. Thanks. Reproducible: Always</description>
    <commit commitTime="2012-03-23 18:17:09" id="f85631fd2fb2e0f3213abb9c5a7cd86eec2c9ab5"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/PointcutEvaluationExpenseComparator.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="376139" reportTime="2012-04-05 00:00:00">
    <summary>AspectJ throws Nullpointer after its IDE plugin update</summary>
    <description>Build Identifier: Version: Indigo Service Release 2 Build id: 20120216-1857 java.lang.NullPointerException at org.aspectj.org.eclipse.jdt.internal.compiler.ast.SwitchStatement.analyseCode SwitchStatement.java:118 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode MethodDeclaration.java:104 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode TypeDeclaration.java:730 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseC ... oBuildJob.run AutoBuildJob.java:241 at org.eclipse.core.internal.jobs.Worker.run Worker.java:54 Compile error: NullPointerException thrown: null Reproducible: Always Steps to Reproduce: 1. After updating the eclipse plugin</description>
    <commit commitTime="2012-04-05 15:17:56" id="62fca9a2dd7c7a0f9eef9b2186f82fd8e695162b"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="376351" reportTime="2012-04-09 15:13:00">
    <summary>attribute problems with Java 7 compilation</summary>
    <description>From the mailing list, this goes wrong: ***R.java*** public class R{ public static void main String[] args {System.out.println new R .getClass .getName ;} } ***R1.java*** public class R1 extends R {} ***RAj.aj*** public aspect RAj { private ThreadLocal&amp;lt;Object&amp;gt; inAspect = new ThreadLocal&amp;lt;Object&amp;gt; ; pointcut createR : execution R.new ; Object around : createR { System.out.println "aspect:" + inAspect.get + ":" + this ; if inAspect.get != null { return proceed ; } else { inAspect.set this ; return new R1 ; } } } compile command: /cygdrive/c/Program\ Files/Java/aspectj-1.6.12/bin/ajc.bat -source 1.7 -outxml -outjar araj.jar -classpath "aspectjrt.jar;." RAj.aj run: /cygdrive/c/Program\ Files/Java/aspectj-1.6.12/bin/aj5.bat -classpath ".;./araj.jar" R errors: Apr 06, 2012 1:37:40 PM org.aspectj.weaver.tools.Jdk14Trace error SEVERE: register definition failed java.lang.RuntimeException: Problem processing attributes in RAj at org.aspectj.weaver.bcel.BcelObjectType.ensureAspectJAttributesUnpacked BcelObjectType.java:385</description>
    <commit commitTime="2012-04-09 14:15:55" id="be063b851651ebcfe1e147198842e28ea7dbbb26"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/asm/StackMapAdder.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="376990" reportTime="2012-04-17 11:35:00">
    <summary>iajc does not support source compliance level 1.7</summary>
    <description>Build Identifier: Version: 3.7.2 Build id: M20120208-0800 I am using AspectJ 1.7.0.M1. I changed the examples build.xml to use a source compliance level of 1.7 and verbose=true as follows: &amp;lt;iajc destdir="${classes.dir}" verbose="true" source="1.7" argfiles="${list}" When I run this using 'ant bean' I get the following line: [iajc] ignored: -source 1.7 at E:\aspectj1.7\doc\examples\build.xml:136: I have tried running the compiler 'ajc' directly specifying -source 1.7 and that works. I am trying to use this on a large development project that uses AspectJ and has been migrated over to Java 7. The project uses ant to do builds so it is critical that iajc support 1.7. The project can't be built if any Java 7 features are used in the source files which defeats the whole purpose of moving to Java 7. Reproducible: Always Steps to Reproduce: 1.Change the examples build.xml to use a source compliance level of 1.7 and verbose=true as follows: &amp;lt;iajc destdir="${classes.dir}" verbose="true" source="1.7" argfiles="${list}" 2.Run using 'ant bean' I get the following line: [iajc] ignored: -source 1.7 at E:\aspectj1.7\doc\examples\build.xml:136:</description>
    <commit commitTime="2012-04-17 09:39:41" id="89c178fba21e32dd3a7d1ab23c8f8fc3e822c881"/>
    <fixedFiles>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="377096" reportTime="2012-04-18 10:33:00">
    <summary>BCException in recordClassFile</summary>
    <description>Was originally being tracked as part of bug 375777 . The exception is: org.aspectj.weaver.BCException at org.aspectj.ajdt.internal.core.builder.AjState.recordClassFile AjState.java:1500 at org.aspectj.ajdt.internal.core.builder.AjState.noteResult AjState.java:1322 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$3.acceptResult AjBuildManager.java:1058 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:426 There is an attached full trace to that other bug.</description>
    <commit commitTime="2013-01-28 14:03:09" id="59b8e77965f0b92d869b803706386d7c22aeb94c"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</file>
    </fixedFiles>
  </bug>
  <bug id="382189" reportTime="2012-06-10 10:48:00">
    <summary>NPE in BcelTypeMunger.createBridgeMethod</summary>
    <description>Build Identifier: Since I updated to version AspectJ Development Tools 2.2.0.e37x-20120529-0900 I get during compile: java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelTypeMunger.createBridgeMethod BcelTypeMunger.java:1325 at org.aspectj.weaver.bcel.BcelTypeMunger.createAnyBridgeMethodsForCovariance BcelTypeMunger.java:1272 at org.aspectj.weaver.bcel.BcelTypeMunger.mungeNewMethod BcelTypeMunger.java:971 at org.aspectj.weaver.bcel.BcelTypeMunger.munge BcelTypeMunger.java:108 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeave ... Before, I had AspectJ Development Tools 2.2.0.e37x-20120507-1400 and the same project compiled without that exception. Reproducible: Always</description>
    <commit commitTime="2012-06-15 17:42:25" id="a7483038e86dd39894d9b347f227eb6c3a33e09e"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java</file>
    </fixedFiles>
  </bug>
  <bug id="382435" reportTime="2012-06-12 16:15:00">
    <summary>Problems with "nested" generic return types in ITDs</summary>
    <description>Build Identifier: When I have a "nested" generic return type like List&amp;lt;List&amp;lt;T&amp;gt;&amp;gt; in a base class, there are compiler errors when I try to extend from this base class in an ITD declare parents and the try to override the method with something like List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;. Please see the compiler error that occures for the attached project. Reproducible: Always Steps to Reproduce: See attached eclipse project.</description>
    <commit commitTime="2012-06-15 17:42:25" id="a7483038e86dd39894d9b347f227eb6c3a33e09e"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java</file>
    </fixedFiles>
  </bug>
  <bug id="382723" reportTime="2012-06-15 06:31:00">
    <summary>An package-level abstract generic privileged aspect, which extends an abstract generic aspect, gives a IlligalStateException on a method call in around advice</summary>
    <description>Build Identifier: AJDT Version: 2.1.3.e37x-20110628-1900 / AspectJ version: 1.6.12.20110613132200 / eclipse.buildId=M20120208-0800 around advice targetting a generic constructor call in a package visability generic privileged abstract apsect, which extends a abstract generic aspect gives a compiler error when in this around advice a method call is made to a method defined in the aspect, superaspect or abstract defined methods. This only affects around advice and only when the aspect is package-visible and privileged. Workaround: either make the aspect public or remove privileged. Compiler output: Compile error: IllegalStateException thrown: Use generic type, not parameterized type StackTrace: java.lang.IllegalStateException: Use generic type, not parameterized type at org.aspectj.weaver.ResolvedTypeMunger.&amp;lt;init&amp;gt; ResolvedTypeMunger.java:72 at org.aspectj.weaver.PrivilegedAccessMunger.&amp;lt;init&amp;gt; PrivilegedAccessMunger.java:31 at org.aspectj.weaver.CrosscuttingMembers.addPrivilegedAccesses CrosscuttingMembers.java:232 at org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers ResolvedType.java:756 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect CrosscuttingMembersSet.java:89 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect CrosscuttingMembersSet.java:69 at org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave BcelWeaver.java:512 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.ensureWeaverInitialized AjPipeliningCompilerAdapter.java:529 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:509 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving AjPipeliningCompilerAdapter.java:447 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:432 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:98 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:652 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:392 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1021 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:305 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:185 at org.aspectj.ajde.core.internal.AjdeCoreBuildManager.performBuild AjdeCoreBuildManager.java:127 at org.aspectj.ajde.core.AjCompiler.build AjCompiler.java:91 at org.eclipse.ajdt.core.builder.AJBuilder.build AJBuilder.java:257 at org.eclipse.core.internal.events.BuildManager$2.run BuildManager.java:728 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:42 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:199 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:239 at org.eclipse.core.internal.events.BuildManager$1.run BuildManager.java:292 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:42 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:295 at org.eclipse.core.internal.events.BuildManager.basicBuildLoop BuildManager.java:351 at org.eclipse.core.internal.events.BuildManager.build BuildManager.java:374 at org.eclipse.core.internal.events.AutoBuildJob.doBuild AutoBuildJob.java:143 at org.eclipse.core.internal.events.AutoBuildJob.run AutoBuildJob.java:241 at org.eclipse.core.internal.jobs.Worker.run Worker.java:54 Session data: eclipse.buildId=M20120208-0800 java.version=1.6.0_22 java.vendor=Sun Microsystems Inc. BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=nl_NL Command-line arguments: -data C:\workspace\ -os win32 -ws win32 -arch x86_64 Reproducible: Always Steps to Reproduce: 1. In a empty AspectJ project create the file Foo.java: import java.util.LinkedList; public class Foo { public LinkedList bar { new LinkedList ; return null; } } 2. Create the file FooAspect.aj containing: import java.util.AbstractList; import java.util.List; abstract aspect FooAspectParent&amp;lt;T extends List&amp;gt; { protected int getNumber int k { return -1*k; } } abstract privileged aspect FooAspect&amp;lt;T extends AbstractList&amp;gt; extends FooAspectParent&amp;lt;T&amp;gt; { pointcut pc : call T.new ; T around :pc { //getNumber 1 ; //&amp;lt;-- method call to superAspect fails //method ; // &amp;lt;-- method call to abstract local defined method fails //localMethod ; //&amp;lt;-- method call to local private method fails Math.random ; //&amp;lt;-- works hashCode ; //&amp;lt;-- works return null; } private void localMethod {} protected abstract T method ; } 3. Uncomment one or more of the three commentted functions calls in the around advice and the compiler will reproduce the error. note: this example with List which is a generic object is just for illustration of hierachy, this problem occured on production code when doing the same with non-generic, but hierachal objects. This way was the easiest to issolate and reproduce the bug the fastest.</description>
    <commit commitTime="2012-06-15 11:29:35" id="ba9d43ccaf2660ddc9916ea48f79a77ba60d435e"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="384189" reportTime="2012-07-03 14:06:00">
    <summary>make ajcore file creation optional</summary>
    <description>Although cores are useful, there may be situations where you are working around whatever they are reporting and are perhaps unable to pick up a later version of AJ that includes the fix. In these situations it might be helpful to make the creation of cores optional, through a sys prop.</description>
    <commit commitTime="2012-07-03 13:46:29" id="5d0e1860cb5069b266ba70d33bc356d36e285a90"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/Dump.java</file>
    </fixedFiles>
  </bug>
  <bug id="384398" reportTime="2012-07-05 13:42:00">
    <summary>Type Mismatch error when using inner classes contained in generic types within ITDs</summary>
    <description>Please see attached example project. I get the following strange compiler error: Type mismatch: cannot convert from A&amp;lt;T&amp;gt;.InnerA&amp;lt;&amp;gt; to A.InnerA BAspect.aj /AspectJInnerclassInGenericTypeBug/src/de/example line 12</description>
    <commit commitTime="2012-07-10 10:18:35" id="bf949d3260232dd69a5fd3a2b81a19cb3dd1a6a6"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
      <file>tests/src/org/aspectj/systemtest/AllTests17.java</file>
    </fixedFiles>
  </bug>
  <bug id="384401" reportTime="2012-07-05 14:04:00">
    <summary>NPE when no pointcut in afterthrowing annotation style advice</summary>
    <description>From the mailing list: import org.aspectj.lang.JoinPoint; import org.aspectj.lang.annotation.AfterThrowing; import org.aspectj.lang.annotation.Aspect; @Aspect public class X { // @AfterThrowing pointcut="execution * * .. ",throwing = "e" @AfterThrowing throwing = "e" public void bizLoggerWithException JoinPoint thisJoinPoint,Throwable e { // .....// do some stuff } } class BizLoggable {}</description>
    <commit commitTime="2012-08-23 13:05:24" id="55ebaa15305cc686c6ed5915ff1115071b3c80bd"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc171/Ajc171Tests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java</file>
    </fixedFiles>
  </bug>
  <bug id="386049" reportTime="2012-07-26 10:15:00">
    <summary>Error "must implement abstract inter-type declaration" even though build is fine</summary>
    <description>Build Identifier: Version: 4.2.0 Build id: I20120608-1400 I have an AspectJ project with Java classes like this schematically, not the full code : public abstract class BasicFilter { protected abstract String getLogMessage ; } public class PreJTidyFilter extends BasicFilter { @Override protected String getLogMessage { return "Fixing HTML so as to enable JTidy to parse it"; } } public class JTidyFilter extends BasicFilter { @Override protected String getLogMessage { return "Converting to clean, pretty-printed XHTML"; } } public class XOMUnclutterFilter extends BasicFilter { @Override protected String getLogMessage { return "Removing clutter header, footer, navigation, ads and fixing structure"; } } ################################### I also have this aspect: privileged aspect LoggingAspect { pointcut runFilter : execution * BasicFilter.run ; void around BasicFilter filter : runFilter &amp;amp;&amp;amp; this filter { String message = filter.getLogMessage ; SimpleLogger.verbose message, IndentMode.INDENT_AFTER ; proceed filter ; SimpleLogger.dedent ; } } ################################### The aspects compile and run fine, but the Eclipse error view always shows two errors: must implement abstract inter-type declaration: java.lang.String de.scrum_master.galileo.filter.BasicFilter.getLogMessage XOMUnclutterFilter.java must implement abstract inter-type declaration: java.lang.String de.scrum_master.galileo.filter.BasicFilter.getLogMessage JTidyFilter.java The errors even re-occur after cleaning and rebuilding the project. But as I said, the code runs just fine. Please note: The funny thing is that in those two classes I just need to add and remove whitespace, then save the file, and the error goes away file by file. As soon as I rebuild though, the errors are there again. Please also note: The errors always are shown for subclasses XOMUnclutterFilter and JTidyFilter, but strangely *not* for subclass PreJTidyFilter, even though it is affected by the same pointcut and advice as the others and also subclassing the same base class. Reproducible: Always Steps to Reproduce: I do not know if there is a way for you to reproduce this behaviour with the little code snippets I provided above, but here it happens all the time. If you would like to clone my project, it is located at https://github.com/kriegaex/Galileo-Openbook-Cleaner . My Eclipse was configured via Yoxos, but AJDT Version: 2.2.0.e42x-RELEASE-20120703-2200 AspectJ version: 1.7.0.20120703164200 was installed by me manually because right after the Juno release AJDT were not available via Yoxos yet I do not know if they are now .</description>
    <commit commitTime="2012-08-22 12:43:56" id="7c6e9361dae7f2ee4cf15b68eccdf54e889d1f75"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc171/Ajc171Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java</file>
    </fixedFiles>
  </bug>
  <bug id="386337" reportTime="2012-07-31 11:53:00">
    <summary>Light AOP Parser does not support declare-annotation</summary>
    <description>As default aop.xml parser is not the light version, some new elements have been added See Bug 375881 . Unless the element declare-annotation was not supported by SimpleAopParser.java. Thanks and regards.</description>
    <commit commitTime="2012-07-31 10:21:10" id="bd0f94bfe1fde96900130a1bb4c70cea2de52e48"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/loadtime/definition/SimpleAOPParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="386888" reportTime="2012-08-08 16:12:00">
    <summary>spring-data hello-worlds sample fails to compile with 1.7.0</summary>
    <description>Clone the project from: git@github.com :SpringSource/spring-data-neo4j.git go into hello-worlds and 'mvn clean test'. It works as it is using 1.6.12. But edit the pom and change it to 1.7.0 and you get errors on compile: [ERROR] Failed to execute goal org.codehaus.mojo:aspectj-maven-plugin:1.2:compile default on project spring-data-neo4j-hello-worlds: Compiler errors : [ERROR] error at public class World { [ERROR] ^^^^ [ERROR] /Users/aclement/gits/spring-data-neo4j/spring-data-neo4j-examples/hello-worlds/src/main/java/org/springframework/data/neo4j/examples/hellograph/World.java:12:0::0 The type org.springframework.data.neo4j.examples.hellograph.World must implement the inherited abstract method org.springframework.data.neo4j.aspects.core.NodeBacked.relateTo Lorg/springframework/data/neo4j/aspects/core/NodeBacked;Ljava/lang/Class;Ljava/lang/String; [ERROR] see also: org/springframework/data/neo4j/aspects/core/NodeBacked.java::0 [ERROR] see also: org/springframework/data/neo4j/aspects/support/node/Neo4jNodeBacking.aj:66::0 [ERROR] error at public class World { [ERROR] ^^^^ [ERROR] /Users/aclement/gits/spring-data-neo4j/spring-data-neo4j-examples/hello-worlds/src/main/java/org/springframework/data/neo4j/examples/hellograph/World.java:12:0::0 The type org.springframework.data.neo4j.examples.hellograph.World must implement the inherited abstract method org.springframework.data.neo4j.aspects.core.NodeBacked.relateTo Lorg/springframework/data/neo4j/aspects/core/NodeBacked;Ljava/lang/Class;Ljava/lang/String;Z [ERROR] see also: org/springframework/data/neo4j/aspects/core/NodeBacked.java::0 [ERROR] see also: org/springframework/data/neo4j/aspects/support/node/Neo4jNodeBacking.aj:66::0</description>
    <commit commitTime="2012-08-24 15:45:53" id="77d14748c35ced62f5c14f34389cb2bc942c410f"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ResolvedMemberImpl.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="387444" reportTime="2012-08-16 20:46:00">
    <summary>Softening exception in try-with-resources</summary>
    <description>From this post on the Eclipse AJDT forum: http://www.eclipse.org/forums/index.php/t/369503/ When softening exceptions, AspectJ doesn't seem to soften the exception thrown by the automatic close invocation when using the try-with-resources syntax introduced in Java 7 often an IOException . eg: --- In Java code: try BufferedReader reader = new BufferedReader new FileReader "test.txt" { System.out.println reader.readLine ; } In AspectJ code: declare soft: IOException: within * --- The above will result in a compilation error, "Unhandled exception type IOException thrown by automatic close invocation". A workaround is to add a catch for the IOException, or to add a throws clause to the method, which kind of makes the exception softening somewhat redundant. If you're using AJDT, doing these workarounds then adds AJDT add markers to the try-with-resources block, one of which looks like it's for the automatic close - maybe the 'unhandled exception' error is preventing AspectJ from properly softening the exception?</description>
    <commit commitTime="2012-08-23 12:19:58" id="76d695ff1a6f8863a1b64f17e38a5ffee170f09f"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc171/Ajc171Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="387568" reportTime="2012-08-20 04:03:00">
    <summary>Warning "Xlint:unresolvableMember" for enums</summary>
    <description>Obviously ajc does not recognise that an enumeration declared via the Java keyword "enum" actually extends Enum, because it does not know its super class methods. Consequently, the compiler throws the following warnings copied from Eclipse problem view : Description Resource Path Location Type can not resolve this member: de.scrum_master.galileo.Book[] de.scrum_master.galileo.Book.values [Xlint:unresolvableMember] LoggingAspect.aj /Galileo Openbook Cleaner/src/de/scrum_master/galileo line 46 Java Problem can not resolve this member: de.scrum_master.galileo.Book de.scrum_master.galileo.Book.valueOf java.lang.String [Xlint:unresolvableMember] LoggingAspect.aj /Galileo Openbook Cleaner/src/de/scrum_master/galileo line 46 Java Problem can not resolve this member: de.scrum_master.galileo.Book[] de.scrum_master.galileo.Book.values [Xlint:unresolvableMember] LoggingAspect.aj /Galileo Openbook Cleaner/src/de/scrum_master/galileo line 46 Java Problem My pointcuts and advice run just fine, but I am not actually advising the Enum itself, it is just used as a parameter in my program, and some of its methods like 'valueOf ' and 'values ' are used in some places.</description>
    <commit commitTime="2012-08-22 12:43:56" id="7c6e9361dae7f2ee4cf15b68eccdf54e889d1f75"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc171/Ajc171Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java</file>
    </fixedFiles>
  </bug>
  <bug id="387718" reportTime="2012-08-21 13:30:00">
    <summary>RuntimeException when trying to compile broken code</summary>
    <description>java.lang.RuntimeException at org.aspectj.weaver.NameMangler.makeVisibilityName NameMangler.java:297 at org.aspectj.weaver.NameMangler.interMethod NameMangler.java:242 at org.aspectj.weaver.AjcMemberMaker.interMethod AjcMemberMaker.java:538 at org.aspectj.ajdt.internal.compiler.problem.AjProblemReporter.methodMustOverride AjProblemReporter.java:385 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements M ... dJob.java:241 at org.eclipse.core.internal.jobs.Worker.run Worker.java:54 Compile error: RuntimeException thrown: protected inter-types not allowed</description>
    <commit commitTime="2012-08-22 13:13:54" id="cbb6f5a7d50075dbb4482ff1a112463661aafe19"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
    </fixedFiles>
  </bug>
  <bug id="388971" reportTime="2012-09-06 12:34:00">
    <summary>Double Synthetic attributes on some around advice members</summary>
    <description>Some of the support members in aspects were getting Synthetic attributes added twice once when compiled, once when used as an aspect library . Some JVMs appear to flag this as a verify error. The fix is simply to check before adding to make sure the attribute isn't added twice.</description>
    <commit commitTime="2012-09-06 09:37:31" id="c2ff74fd569ea2ef0c4abdc06e3f36a77b1ddd2c"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="389456" reportTime="2012-09-12 19:05:00">
    <summary>NPE in EclipseTypeMunger.mungeNewMethod</summary>
    <description>Likely related to: 302460 NullPointerException in BcelTypeMunger.mungeNewMethod Seems to have been fixed there, but seems to still be present in the EclipseTypeMunger. kerouac:base giuliano$ gradle compileTestJava The reportsDir property has been deprecated and will be removed in the next version of Gradle. Please use the reporting.baseDir property instead. :processResources UP-TO-DATE :compileTestJava [ant:iajc] /Users/giuliano/baynote/src-dev/ramsay/base/src/test/java/com/baynote/base/BaynoteObjectsTests.java [error] Internal compiler error [ant:iajc] java.lang.NullPointerException [ant:iajc] at org.aspectj.ajdt.internal.compiler.lookup.EclipseTypeMunger.mungeNewMethod EclipseTypeMunger.java:143 [ant:iajc] at org.aspectj.ajdt.internal.compiler.lookup.EclipseTypeMunger.munge EclipseTypeMunger.java:120 [ant:iajc] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:813 [ant:iajc] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:652 [ant:iajc] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.createBinaryTypeFrom AjLookupEnvironment.java:1398 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom LookupEnvironment.java:599 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.accept Compiler.java:276 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType LookupEnvironment.java:113 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve UnresolvedReferenceBinding.java:49 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType BinaryTypeBinding.java:99 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getTypeOrPackage PackageBinding.java:167 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.getTypeOrPackage Scope.java:2507 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.getType Scope.java:2228 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.SingleTypeReference.getTypeBinding SingleTypeReference.java:44 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType TypeReference.java:142 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.resolve LocalDeclaration.java:148 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements AbstractMethodDeclaration.java:433 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements MethodDeclaration.java:196 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve AbstractMethodDeclaration.java:404 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1121 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1200 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve CompilationUnitDeclaration.java:366 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:636 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:392 [ant:iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1021 [ant:iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:268 [ant:iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:181 [ant:iajc] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 [ant:iajc] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 [ant:iajc] at org.aspectj.tools.ajc.Main.run Main.java:371 [ant:iajc] at org.aspectj.tools.ajc.Main.runMain Main.java:248 [ant:iajc] at org.aspectj.tools.ajc.Main.main Main.java:84 [ant:iajc] [ant:iajc] no source information available [ant:iajc] ABORT [ant:iajc] [ant:iajc] Exception thrown from AspectJ 1.6.11 [ant:iajc] [ant:iajc] This might be logged as a bug already -- find current bugs at [ant:iajc] http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler [ant:iajc] [ant:iajc] Bugs for exceptions thrown have titles File:line from the top stack, [ant:iajc] e.g., "SomeFile.java:243" [ant:iajc] [ant:iajc] If you don't find the exception below in a bug, please add a new bug [ant:iajc] at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ [ant:iajc] To make the bug a priority, please include a test program [ant:iajc] that can reproduce this exception. [ant:iajc] [ant:iajc] when batch building BuildConfig[null] #Files=5 AopXmls=#0 [ant:iajc] null [ant:iajc] java.lang.NullPointerException [ant:iajc] at org.aspectj.ajdt.internal.compiler.lookup.EclipseTypeMunger.mungeNewMethod EclipseTypeMunger.java:143 [ant:iajc] at org.aspectj.ajdt.internal.compiler.lookup.EclipseTypeMunger.munge EclipseTypeMunger.java:120 [ant:iajc] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:813 [ant:iajc] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:652 [ant:iajc] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.createBinaryTypeFrom AjLookupEnvironment.java:1398 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom LookupEnvironment.java:599 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.accept Compiler.java:276 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType LookupEnvironment.java:113 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve UnresolvedReferenceBinding.java:49 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType BinaryTypeBinding.java:99 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getTypeOrPackage PackageBinding.java:167 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.getTypeOrPackage Scope.java:2507 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.getType Scope.java:2228 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.SingleTypeReference.getTypeBinding SingleTypeReference.java:44 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType TypeReference.java:142 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.resolve LocalDeclaration.java:148 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements AbstractMethodDeclaration.java:433 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements MethodDeclaration.java:196 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve AbstractMethodDeclaration.java:404 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1121 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1200 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve CompilationUnitDeclaration.java:366 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:636 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:392 [ant:iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1021 [ant:iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:268 [ant:iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:181 [ant:iajc] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 [ant:iajc] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 [ant:iajc] at org.aspectj.tools.ajc.Main.run Main.java:371 [ant:iajc] at org.aspectj.tools.ajc.Main.runMain Main.java:248 [ant:iajc] at org.aspectj.tools.ajc.Main.main Main.java:84 [ant:iajc] [ant:iajc] Sep 12, 2012 4:03:20 PM org.aspectj.weaver.tools.Jdk14Trace info [ant:iajc] INFO: Dumping to /Users/giuliano/baynote/src-dev/ramsay/base/./ajcore.20120912.160320.442.txt [ant:iajc] [ant:iajc] 1 fail|abort, 1 error FAILURE: Build failed with an exception. * Where: Script '/Users/giuliano/baynote/src-dev/ramsay/base/aspectJ.gradle' line: 46 * What went wrong: Execution failed for task ':compileTestJava'. &amp;gt; compile errors: 255 * Try: Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. BUILD FAILED Total time: 27.316 secs</description>
    <commit commitTime="2012-09-20 13:38:35" id="b8ebdc33c75aa081ac3bf9b1a45f79e4177467a6"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="389750" reportTime="2012-09-17 14:25:00">
    <summary>Inconsistent classfile encountered: The undefined type parameter xxx is referenced from within yyy</summary>
    <description>With the declare parents pattern below, I'm getting this **runtime** error compiler completes ok : Inconsistent classfile encountered: The undefined type parameter ID is referenced from within PersistableAspect If I remove the generics part of the interface declaration, the error goes away. Here's the pattern: interface: ========== package example.trait; // imports... public interface Persistable&amp;lt;ID extends Serializable&amp;gt; { Object getOid ; ID getId ; String getIdString ; long getVersion ; } annotation: =========== package example.anno; // imports... @Target TYPE @Retention RUNTIME @Trait public @interface Persistable { String in default "MONGO"; StoreType inAsEnum default StoreType.MONGO; String id default "STRING"; IdType idAsEnum default IdType.STRING; } aspect: ======= package example.aspect; // imports... public privileged aspect PersistableAspect { public interface I&amp;lt;ID extends Serializable&amp;gt; extends example.trait.Persistable&amp;lt;ID&amp;gt; { } public interface L extends I&amp;lt;Long&amp;gt; { } public interface S extends I&amp;lt;String&amp;gt; { } declare parents : @Persistable id="LONG" * implements L; declare parents : @Persistable id="STRING" * implements S; // remaining code is ITDs introducing vars &amp;amp; methods... }</description>
    <commit commitTime="2012-09-19 10:19:17" id="b9c7a190f452cf888854e4fa6599269a5a2c0212"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AstUtil.java</file>
      <file>tests/src/org/aspectj/systemtest/AllTests17.java</file>
    </fixedFiles>
  </bug>
  <bug id="389752" reportTime="2012-09-17 14:47:00">
    <summary>declare parents &amp; @type not matching on annotation properties of enum types</summary>
    <description>NOTE: real project private git repo demonstrating bug has been shared with Andy Clement privately. I'm reporting bug as Andy requested with as much info as I feel I can. I have a case where 'declare parents' and 'declare @type' instructions are not being applied because their type patterns, which use annotations whose properties are of enumerated types, are not matching. Below find the relevant artifacts and their shapes. The lines in the aspect PersistableJpaAspect that are not matching as they should are the 'declare parents' and 'declare @type'. If I change the annotation properties to be of type String and change the type patterns to use string literals see "matches" comments in annotation: StoreType.JPA =&amp;gt; "JPA" and IdType.LONG =&amp;gt; "LONG" , the matching works properly. enums: ====== public enum StoreType { MONGO, JDO, JPA; } ===== public enum IdType { LONG, STRING; } annotation: =========== public @interface Persistable { StoreType in default StoreType.MONGO; // doesn't match // matches: String in default "MONGO"; IdType id default IdType.STRING; // doesn't match // matches: String id default "STRING"; } aspect: ======= public abstract privileged aspect PersistableAspect { public interface I extends ....trait.interfaces.persistence.Persistable { long version ; void version long version ; } public interface L extends I { Long idLong ; void idLong Long id ; } public interface S extends I { String idString ; void idString String id ; } declare @type : I+ : @Configurable; // ... } ===== public privileged aspect PersistableJpaAspect extends PersistableAspect { public interface JL extends L { } public interface JS extends S { } declare parents : @Persistable id = IdType.LONG, in = StoreType.JPA * implements JL; declare parents : @Persistable id = IdType.STRING, in = StoreType.JPA * implements JS; declare @type : @Persistable in="JPA" JL+ : @Entity; declare @type : @Persistable in="JPA" JS+ : @Entity; // ... }</description>
    <commit commitTime="2012-09-19 16:35:53" id="0d69bd3eba361bcfb1ba013466841ee3611b3531"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/StandardAnnotation.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/EnumAnnotationValue.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java</file>
    </fixedFiles>
  </bug>
  <bug id="389967" reportTime="2012-09-20 02:38:00">
    <summary>Weaved aspects mechanism does not take into account modified classes</summary>
    <description>The current caching mechanism assumes that if the same class is encountered then its cached weaved version can be used. However, the mechanism uses only the fully qualified class name to identify the class and does not take into account the fact that the class bytes may have changed e.g., the user re-compiled and re-deployed some changes to the same class .</description>
    <commit commitTime="2012-10-01 13:22:37" id="9a3cc2bc5c824d252140fb3d1e2e27f2163e6d53"/>
    <fixedFiles>
      <file>util/src/org/aspectj/util/LangUtil.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/cache/DefaultCacheKeyResolver.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/cache/CachedClassReference.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/tools/cache/DefaultFileCacheBackingTest.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/tools/GeneratedClassHandler.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/cache/CachedClassEntry.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/cache/DefaultCacheFactory.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/cache/CacheStatistics.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/cache/CacheBacking.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/tools/cache/WeavedClassCacheTest.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/cache/GeneratedCachedClassHandler.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/cache/DefaultFileCacheBacking.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/WeavingURLClassLoader.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/cache/WeavedClassCache.java</file>
    </fixedFiles>
  </bug>
  <bug id="390269" reportTime="2012-09-24 16:06:00">
    <summary>AbstractMethodError when calling generic ITD method</summary>
    <description>After upgrading to ajc 1.7.2-BUILD-SNAPSHOT, I'm now getting an AbstractMethodError in a unit test: ============ testCreateUser app.domain.test.unit.UserTest Time elapsed: 0.098 sec &amp;lt;&amp;lt;&amp;lt; FAILURE! java.lang.AbstractMethodError: app.domain.model.Person.getId Ljava/lang/Object; at com.scispike.foundation.domain.aspectj.trait.persistence.PersistableAspect.ajc$interMethod$com_scispike_foundation_domain_aspectj_trait_persistence_PersistableAspect$com_scispike_foundation_domain_aspectj_trait_persistence_PersistableAspect$I$hashCode PersistableAspect.aj:91 at app.domain.model.Person.hashCode Person.java:1 at java.util.WeakHashMap.put WeakHashMap.java:401 at org.apache.commons.lang3.builder.ToStringStyle.register ToStringStyle.java:182 at org.apache.commons.lang3.builder.ToStringStyle.appendClassName ToStringStyle.java:1444 at org.apache.commons.lang3.builder.ToStringStyle.appendStart ToStringStyle.java:369 at org.apache.commons.lang3.builder.ToStringBuilder.&amp;lt;init&amp;gt; ToStringBuilder.java:263 at org.apache.commons.lang3.builder.ReflectionToStringBuilder.&amp;lt;init&amp;gt; ReflectionToStringBuilder.java:456 at org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString ReflectionToStringBuilder.java:282 at org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString ReflectionToStringBuilder.java:145 at com.scispike.foundation.domain.aspectj.trait.basic.StringifiableAspect.buildString StringifiableAspect.aj:63 at com.scispike.foundation.domain.aspectj.trait.basic.StringifiableAspect.ajc$interMethod$com_scispike_foundation_domain_aspectj_trait_basic_StringifiableAspect$com_scispike_foundation_domain_aspectj_trait_basic_StringifiableAspect$S$toString StringifiableAspect.aj:41 at app.domain.model.Person.toString Person.java:1 at java.lang.String.valueOf String.java:2826 at java.util.Arrays.toString Arrays.java:4071 at com.scispike.foundation.domain.aspectj.validation.ApacheBvalMethodValidationAspect.buildMessage ApacheBvalMethodValidationAspect.aj:74 at com.scispike.foundation.domain.aspectj.validation.ApacheBvalMethodValidationAspect.ajc$before$com_scispike_foundation_domain_aspectj_validation_ApacheBvalMethodValidationAspect$2$68590448 ApacheBvalMethodValidationAspect.aj:147 at app.domain.model.User.setPerson User.java:45 at app.domain.model.User.&amp;lt;init&amp;gt; User.java:37 at app.domain.test.unit.UserTest.create UserTest.java:23 at app.domain.test.unit.UserTest.create UserTest.java:19 at app.domain.test.unit.UserTest.testCreateUser UserTest.java:40 ============ If I remove the annotation that is causing the application of ApacheBvalMethodValidationAspect by removing @NotNull on User#setPerson Person , the code executes ok during unit testing, but then fails during integration testing: ============ testPersistEach app.domain.test.integration.mongo.UserRepositoryIntegrationTest Time elapsed: 0.084 sec &amp;lt;&amp;lt;&amp;lt; FAILURE! java.lang.AbstractMethodError: app.domain.model.User.getId Ljava/lang/Object; at com.scispike.foundation.domain.aspectj.trait.persistence.PersistableAspect.ajc$interMethod$com_scispike_foundation_domain_aspectj_trait_persistence_PersistableAspect$com_scispike_foundation_domain_aspectj_trait_persistence_PersistableAspect$I$getIdString PersistableAspect.aj:53 at app.domain.model.User.getIdString User.java:1 at app.domain.test.integration.mongo.UserRepositoryIntegrationTest.testPersistEach UserRepositoryIntegrationTest.java:31 ============ The codebase is available to Andy; it's the same as that used to diagnose &amp;amp; resolve https://bugs.eclipse.org/bugs/show_bug.cgi?id=389750 and https://bugs.eclipse.org/bugs/show_bug.cgi?id=389752 This bug is **NOT** on the "master" branch, it is on the "features/test-persistence-trait" branch.</description>
    <commit commitTime="2012-09-28 21:46:05" id="0bbb4f252a1efa7408f55e06fc062baddce0dcba"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="391123" reportTime="2012-10-04 10:14:00">
    <summary>Added support for more cache backing s</summary>
    <description>Created attachment 221903 [details] Asynchronous file cache backing s patch Added support for asynchronouse cache backings - one uses a "flat" model similar to the default cache backing only does the updates in the background. The other uses a ZIP file to hold the cached bytes. Attached is a patch file for the fix/feature</description>
    <commit commitTime="2012-10-29 12:46:03" id="df1823b297d7b543c1917804ac650502bd4601b2"/>
    <fixedFiles>
      <file>util/src/org/aspectj/util/LangUtil.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/tools/cache/CacheTests.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/tools/cache/WeavedClassCacheTest.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/tools/cache/DefaultCacheKeyResolverTest.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/cache/AbstractIndexedFileCacheBacking.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/cache/DefaultFileCacheBacking.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/tools/cache/DefaultFileCacheBackingTest.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/tools/cache/SimpleClassCacheTest.java</file>
      <file>build/src/org/aspectj/internal/tools/ant/taskdefs/Checklics.java</file>
    </fixedFiles>
  </bug>
  <bug id="391384" reportTime="2012-10-09 00:09:00">
    <summary>WildAnnotationTypePattern.java:231</summary>
    <description>OK, I get that this is not supported and what I *want* here is matching on the existence of the supplied header *among* the headers in the String[] . A feature request might be in order, but a syntax for specifying how you want to match the array would be needed.... The bug that I'm reporting is that trying to *save* this program gets an error that pops up a dialog. This should just become another error marker. It might the compiler that has to change what it throws, but in the end it's the Eclipse IDE that ends up breaking from a user standpoint. RequestMapping.headers is of type String[] . public aspect Fail { pointcut testable : execution public * @RequestMapping headers="x-test=test" com.example..* .. ; } java.lang.RuntimeException at org.aspectj.weaver.patterns.WildAnnotationTypePattern.resolveAnnotationValues WildAnnotationTypePattern.java:231 at org.aspectj.weaver.patterns.WildAnnotationTypePattern.resolveBindings WildAnnotationTypePattern.java:325 at org.aspectj.weaver.patterns.WildTypePattern.resolveBindings WildTypePattern.java:657 at org.aspectj.weaver.patterns.SignaturePattern.resolveBindings SignaturePattern.java:81 at org.a ... n Worker.java:53 Compile error: RuntimeException thrown: Compiler limitation: annotation value support not implemented for type java.lang.String[]</description>
    <commit commitTime="2013-02-05 11:14:40" id="edb41e385f232f7aebe1f6517d9a201221175a55"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/WeaverMessages.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java</file>
    </fixedFiles>
  </bug>
  <bug id="394234" reportTime="2012-11-13 18:48:00">
    <summary>Invalid StackMapTable generated in Java 7</summary>
    <description>When compiling for Java 7, AspectJ can compute an invalid StackMapTable. The verifier will throw a ClassNotFoundException when the generated class is loaded. Example: class Parent&amp;lt;T&amp;gt; {} class ChildA&amp;lt;T&amp;gt; extends Parent&amp;lt;T&amp;gt; {} class ChildB&amp;lt;T&amp;gt; extends Parent&amp;lt;T&amp;gt; {} public Object methodWithBadStackMapTable boolean value { return value ? new ChildA&amp;lt;String&amp;gt; : new ChildB&amp;lt;String&amp;gt; ; } javap shows the computed StackMapTable to be: StackMapTable: number_of_entries = 2 frame_type = 15 /* same */ frame_type = 71 /* same_locals_1_stack_item */ stack = [ class "Parent&amp;lt;T&amp;gt;" ] when it should be: StackMapTable: number_of_entries = 2 frame_type = 15 /* same */ frame_type = 71 /* same_locals_1_stack_item */ stack = [ class Parent ]</description>
    <commit commitTime="2012-11-14 15:41:57" id="fc554310bc0268244c001a421d2868d14cb45fb1"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/asm/StackMapAdder.java</file>
    </fixedFiles>
  </bug>
  <bug id="394535" reportTime="2012-11-18 10:54:00">
    <summary>Java throws OutOfMemory in call to Class.getGenericSuperclass on woven class</summary>
    <description>Ran AspectJ compiler on this class: public class Bug { @org.springframework.beans.factory.annotation.Configurable public static class ClassA&amp;lt;T extends Interface1 &amp;amp; Interface2&amp;gt; { } public static class ClassB extends ClassA&amp;lt;ClassB&amp;gt; implements Interface1, Interface2 { } public interface Interface1 { } public interface Interface2 { } public static void main String[] args throws Exception { System.out.println ClassB.class.getGenericSuperclass ; } } Then tried to execute the class' main method using Java 1.6.0-37 and got OOM: Exception in thread "main" java.lang.OutOfMemoryError: Java heap space at java.util.Arrays.copyOf Arrays.java:2760 at java.util.Arrays.copyOf Arrays.java:2734 at java.util.ArrayList.ensureCapacity ArrayList.java:167 at java.util.ArrayList.add ArrayList.java:351 at sun.reflect.generics.parser.SignatureParser.parseFormalTypeParameters SignatureParser.java:190 at sun.reflect.generics.parser.SignatureParser.parseZeroOrMoreFormalTypeParameters SignatureParser.java:177 at sun.reflect.generics.parser.SignatureParser.parseClassSignature SignatureParser.java:171 at sun.reflect.generics.parser.SignatureParser.parseClassSig SignatureParser.java:126 at sun.reflect.generics.repository.ClassRepository.parse ClassRepository.java:34 at sun.reflect.generics.repository.ClassRepository.parse ClassRepository.java:23 at sun.reflect.generics.repository.AbstractRepository.&amp;lt;init&amp;gt; AbstractRepository.java:56 at sun.reflect.generics.repository.GenericDeclRepository.&amp;lt;init&amp;gt; GenericDeclRepository.java:30 at sun.reflect.generics.repository.ClassRepository.&amp;lt;init&amp;gt; ClassRepository.java:30 at sun.reflect.generics.repository.ClassRepository.make ClassRepository.java:47 at java.lang.Class.getGenericInfo Class.java:2254 at java.lang.Class.getTypeParameters Class.java:621 at sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.validateConstructorArguments ParameterizedTypeImpl.java:39 at sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.&amp;lt;init&amp;gt; ParameterizedTypeImpl.java:35 at sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.make ParameterizedTypeImpl.java:77 at sun.reflect.generics.factory.CoreReflectionFactory.makeParameterizedType CoreReflectionFactory.java:86 at sun.reflect.generics.visitor.Reifier.visitClassTypeSignature Reifier.java:122 at sun.reflect.generics.tree.ClassTypeSignature.accept ClassTypeSignature.java:31 at sun.reflect.generics.repository.ClassRepository.getSuperclass ClassRepository.java:66 at java.lang.Class.getGenericSuperclass Class.java:677 at Bug.main Bug.java:18 Using JDK 1.7 we get a java.lang.reflect.GenericSignatureFormatError instead. Users mailing list discussion thread: http://dev.eclipse.org/mhonarc/lists/aspectj-users/msg13789.html This bug may be related to Bug #360253 . Reproducible test case will be attached.</description>
    <commit commitTime="2013-02-05 10:45:03" id="46f90792c01a4333eb62bc2ea6a1dcfb3efb0d23"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/TypeVariable.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="395221" reportTime="2012-11-27 17:34:00">
    <summary>weird error about unbound formals when mixing generics with annotation style</summary>
    <description>From the mailing list: I have following problem with following Aspect: @Aspect public class CounterAspect extends AbstractMoskitoAspect { @Around value = "execution * * .. &amp;amp;&amp;amp; @annotation method " public Object countMethod ProceedingJoinPoint pjp, Count method throws Throwable { return count pjp, method.producerId , method.subsystem , method.category ; } @Around value = "execution * * .. &amp;amp;&amp;amp; @annotation method " public Object countByParameter ProceedingJoinPoint pjp, CountByParameter method throws Throwable { return countByParameter pjp, method.producerId , method.subsystem , method.category ; } @Around value = "execution * *.* .. &amp;amp;&amp;amp; @within clazz " public Object countClass ProceedingJoinPoint pjp, Count clazz throws Throwable { return count pjp, clazz.producerId , clazz.subsystem , clazz.category ; } private Object countByParameter ProceedingJoinPoint pjp, String aProducerId, String aSubsystem, String aCategory throws Throwable { .... It works. However, since I have two similar aspects that differ only in using some internal classes, I made my super class using generics: public class AbstractMoskitoAspect&amp;lt;S extends IStats&amp;gt; { @Aspect public class CounterAspect extends AbstractMoskitoAspect&amp;lt;CounterStats&amp;gt; { this breaks the build instantly with the very unhelpful error message: [ERROR] Failed to execute goal org.codehaus.mojo:aspectj-maven-plugin:1.4:compile default on project moskito-aop: Compiler errors: [ERROR] error at @Around value = "execution * * .. &amp;amp;&amp;amp; @annotation method " [ERROR] ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [ERROR] /Users/another/projects/moskito/moskito-aop/java/net/anotheria/moskito/aop/aspect/CounterAspect.java:24:0::0 the parameter pjp is not bound in [all branches of] pointcut [ERROR] error at @Around value = "execution * * .. &amp;amp;&amp;amp; @annotation method " [ERROR] ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [ERROR] /Users/another/projects/moskito/moskito-aop/java/net/anotheria/moskito/aop/aspect/CounterAspect.java:29:0::0 the parameter pjp is not bound in [all branches of] pointcut [ERROR] error at @Around value = "execution * *.* .. &amp;amp;&amp;amp; @within clazz " [ERROR] ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [ERROR] /Users/another/projects/moskito/moskito-aop/java/net/anotheria/moskito/aop/aspect/CounterAspect.java:34:0::0 the parameter pjp is not bound in [all branches of] pointcut what am i doing wrong here?</description>
    <commit commitTime="2012-11-27 14:52:33" id="3e5af0fdccbe49653ddd59f05e14e33c177c5fc4"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/AndPointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="398588" reportTime="2013-01-20 01:42:00">
    <summary>Using aspect 'requires' clause causes all aspects with 'requires' clauses not be loaded regardless</summary>
    <description>The usage of the 'requires' clause causes all aspects that have have 'requires' clauses not to be loaded regardless of whether the specified required class exists or not. Here is the scenario and why it happens: Let's assume we have a bunch of aspects A1, A2, A3, etc. - all with 'requires' clauses and all referencing classes that can be satisfied. ClassLoaderWeavingAdaptor#registerAspects goes over the aspects in a Definition one by one. It reaches aspect A1 and detects that it has a 'requires' clause, and so it invokes BcelWorld#addAspectRequires. This causes the aspect A1 and its required class to be registered in an internal 'aspectRequiredTypes' map. Then the code calls BcelWeaver#addLibraryAspect with A1 as the argument, which in turn calls addOrReplaceAspect which invokes 'hasUnsatisfiedDependency'. The 'hasUnsatisfiedDependency' has been written to run only ONCE - i.e., it checks if it has already run, and if so then it does nothing. Otherwise, it removes from the 'aspectRequiredTypes' map all the types that can be resolved, thus leaving only those that cannot be resolved. In other words, it assumes that after having run once !!! any remaining type must be unsatified. Thus, when it is invoked with A1, being the 1st time, it resolves the required type by A1 and leaves the 'aspectRequiredTypes' map empty - but also marks that no further running is required. When the ClassLoaderWeavingAdaptor#registerAspects loop reaches A2, it call BcelWorld#addAspectRequires since A2 also declares a 'requires' clause. This causes A2 and its referenced class to be mapped in the 'aspectRequiredTypes' map. However, when BcelWeaver#addLibraryAspect is called with A2 and the code reaches 'hasUnsatisfiedDependency' - the code assumes that it has already run which it has - with A1 , so it does not check if indeed A2's referenced class can be satisfied which we assume it can . In other words, all subsequent aspects A2, A3, etc. are declared as having unsatisified dependencies - which they don't. The quick bugfix seems rather simple: every time BcelWorld#addAspectRequires method is called, it should mark 'aspectRequiredTypesProcessed' as FALSE, in order to force a re-evaluation in case 'hasUnsatisfiedDependency' is called.</description>
    <commit commitTime="2013-01-21 10:46:15" id="96ebaaed65fe5d507cae3d56126d76f217a9f13a"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="399408" reportTime="2013-01-29 12:01:00">
    <summary>NPE in ExactAnnotationTypePattern.matches</summary>
    <description>[ERROR] java.lang.NullPointerException [ERROR] at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches ExactAnnotationTypePattern.java:137 [ERROR] at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches ExactAnnotationTypePattern.java:96 [ERROR] at org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern.matchesExactly AnyWithAnnotationTypePattern.java:55 [ERROR] at org.aspectj.weaver.patterns.TypePattern.matchesStatically TypePattern.java:132 [ERROR] at org.aspectj.weaver.patterns.DeclareParents.match DeclareParents.java:63 [ERROR] at org.aspectj.weaver.patterns.DeclareParents.findMatchingNewParents DeclareParents.java:358 [ERROR] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareParents AjLookupEnvironment.java:885 [ERROR] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:766 [ERROR] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveIntertypes AjLookupEnvironment.java:424 [ERROR] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveIntertypes AjLookupEnvironment.java:410 [ERROR] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:261</description>
    <commit commitTime="2013-01-29 09:20:10" id="d524403d64f7d5d8f84ddb3e91afa4e3b91fd958"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java</file>
    </fixedFiles>
  </bug>
  <bug id="399590" reportTime="2013-01-31 04:17:00">
    <summary>Bad generics signature generated</summary>
    <description>Please see http://jira.springsource.org/browse/SPR-5949 . The bug ID https://bugs.eclipse.org/bugs/show_bug.cgi?id=284297 was raised for this issue and fixed in version 1.6.6. We were using AspectJ version 1.7.1 and got hit by this bug today. During investigation we have found that the problem does not occur with AspectJ versions 1.6.6 - 1.6.8 but it resurfaces with version 1.6.9 and can be reproduced all the way up to the current version 1.7.1.</description>
    <commit commitTime="2013-02-04 13:33:26" id="4af4b1e634c9dbb8af1741aad22a2c3441aa1751"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/BoundedReferenceType.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="404345" reportTime="2013-03-26 05:59:00">
    <summary>AjState.java:1518</summary>
    <description>I was working on a Spring Roo project using Springsource Tool Suite STS 3.2.0 with AspectJ 2.2.2, when the following exception occured: org.aspectj.weaver.BCException at org.aspectj.ajdt.internal.core.builder.AjState.recordClassFile AjState.java:1518 at org.aspectj.ajdt.internal.core.builder.AjState.noteResult AjState.java:1324 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$3.acceptResult AjBuildManager.java:1058 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:426 at org.aspectj.ajdt.intern ... r;C:\Program Files\Java\jdk1.7.0_15\jre\lib\ext\zipfs.jar;C:\eclipse\\plugins/org.eclipse.equinox.launcher_1.3.0.v20120522-1813.jar; It seems to occur in some cases when the class file is changed, but there are missing imports for Annotations e.g. when some code is copied into the class . When saving the file, the Java compiler complains about unknown types, and the AspectJ builder crashes with the exception shown above. When all the imports are added and the class is saved again, it compiles successfully, and AspectJ works again.</description>
    <commit commitTime="2016-11-10 12:13:43" id="f33db67c2e3d840b19896f4ec45dd1078eb412dc"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/AjdeInteractionTestbed.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjTestMessageHandler.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjTestCompilerConfiguration.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="404594" reportTime="2013-03-28 16:53:00">
    <summary>Assertion failed at ResolvedType.java:614</summary>
    <description>Created attachment 229171 [details] Sample Maven project Stacktrace: java.lang.AssertionError at org.aspectj.weaver.ResolvedType.lookupResolvedMember ResolvedType.java:614 at org.aspectj.weaver.JoinPointSignatureIterator.findSignaturesFromSupertypes JoinPointSignatureIterator.java:192 at org.aspectj.weaver.JoinPointSignatureIterator.hasNext JoinPointSignatureIterator.java:68 at org.aspectj.weaver.patterns.SignaturePattern.matches SignaturePattern.java:317 at org.aspectj.weaver.patterns.KindedPointcut.matchInternal KindedPointcut.java:202 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:137 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:51 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:137 at org.aspectj.weaver.patterns.OrPointcut.matchInternal OrPointcut.java:50 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:137 at org.aspectj.weaver.patterns.OrPointcut.matchInternal OrPointcut.java:50 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:137 at org.aspectj.weaver.patterns.OrPointcut.matchInternal OrPointcut.java:50 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:137 at org.aspectj.weaver.ShadowMunger.match ShadowMunger.java:113 at org.aspectj.weaver.Advice.match Advice.java:109 at org.aspectj.weaver.bcel.BcelAdvice.match BcelAdvice.java:149 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:3167 at org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction BcelClassWeaver.java:3115 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2773 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2553 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:480 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:99 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1691 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1635 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1400 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1186 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:514 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving AjPipeliningCompilerAdapter.java:447 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:432 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:98 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:805 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:468 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1028 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:272 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:185 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:371 at org.aspectj.tools.ajc.Main.runMain Main.java:248 ... Sample Maven project attached. It fails on test-compile phase, and assertions should be enabled: "MAVEN_OPTS=-ea mvn test-compile".</description>
    <commit commitTime="2013-04-01 15:29:13" id="4e34477ab6aa6701b93f0f331f2c6874e70b424f"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java</file>
    </fixedFiles>
  </bug>
  <bug id="404600" reportTime="2013-03-29 00:48:00">
    <summary>Unhandled RuntimeException</summary>
    <description>I'm getting an unhandled RuntimeException from STS 3.2.0.RELEASE: java.lang.RuntimeException at org.aspectj.asm.AsmManager.sameType AsmManager.java:897 at org.aspectj.asm.AsmManager.removeRelationshipsTargettingThisType AsmManager.java:711 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1033 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:514 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeavin ... ndation-domain/src\/main\/java&amp;lt;com.scispike.foundation.domain.trait.persistence*PersistableAspect.aj%com.scispike.foundation.domain.trait.persistence Andy Clement, this can be reproduced in our private foundation repo's dev branch at commit d879446f2bfd83b51bf711d2931f4b28ce8c1901. After clicking ok on the exception dialog, there is an error marker on the package statement with text: Internal compiler error: java.lang.RuntimeException: Exception whilst walking up from target com.scispike.foundation.domain.trait.persistence kind= package declaration hid= =foundation-domain/src\/main\/java&amp;lt;com.scispike.foundation.domain.trait.persistence*PersistableAspect.aj%com.scispike.foundation.domain.trait.persistence at org.aspectj.asm.AsmManager.sameType AsmManager.java:897 If I do a Project\Clean..., the exception is not reproduced and everything compiles ok. Next edit repros the exception.</description>
    <commit commitTime="2013-04-02 12:26:57" id="ff0859d6f529a17c851dd774488ee7b0ca8391d3"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="404848" reportTime="2013-04-03 15:32:00">
    <summary>You should resolve this member and call getAnnotationOfType on the result...</summary>
    <description>reported on skype: You should resolve this member and call getAnnotationOfType on the result... java.lang.UnsupportedOperationException: You should resolve this member and call getAnnotationOfType on the result... at org.aspectj.weaver.ResolvedMemberImpl.getAnnotationOfType ResolvedMemberImpl.java:1239 at org.aspectj.weaver.JoinPointSignature.getAnnotationOfType JoinPointSignature.java:87 at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches ExactAnnotationTypePattern.java:124 at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches ExactAnnotationTypePattern.java:96 at org.aspectj.weaver.patterns.SignaturePattern.matchesAnnotations SignaturePattern.java:713 at org.aspectj.weaver.patterns.SignaturePattern.matchesExactly SignaturePattern.java:372 at org.aspectj.weaver.patterns.SignaturePattern.matches SignaturePattern.java:320 at org.aspectj.weaver.patterns.KindedPointcut.matchInternal KindedPointcut.java:202 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:137 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:55 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:137 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:51 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:137 at org.aspectj.weaver.patterns.OrPointcut.matchInternal OrPointcut.java:54 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:137 at org.aspectj.weaver.ShadowMunger.match ShadowMunger.java:113 at org.aspectj.weaver.Checker.match Checker.java:86 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:3156 at org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction BcelClassWeaver.java:3080 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2762 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2542</description>
    <commit commitTime="2013-04-03 12:58:01" id="d6e95662492576829120f61c096b5fc1af5bd269"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ResolvedMemberImpl.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ResolvedMember.java</file>
    </fixedFiles>
  </bug>
  <bug id="406167" reportTime="2013-04-21 04:05:00">
    <summary>Weaving failure with complex generic type</summary>
    <description>Created attachment 229935 [details] The classes I fail to weave and my weaving code Using aspectjtools 1.7.2 I get the following exception: INFO: abort ABORT -- IllegalStateException Expecting .,&amp;lt;, or ;, but found / while unpacking Lcom/a/a/b/t&amp;lt;TK;TV;&amp;gt;.com/a/a/b/af.com/a/a/b/ag;Ljava/util/ListIterator&amp;lt;TV;&amp;gt;; Expecting .,&amp;lt;, or ;, but found / while unpacking Lcom/a/a/b/t&amp;lt;TK;TV;&amp;gt;.com/a/a/b/af.com/a/a/b/ag;Ljava/util/ListIterator&amp;lt;TV;&amp;gt;; java.lang.IllegalStateException: Expecting .,&amp;lt;, or ;, but found / while unpacking Lcom/a/a/b/t&amp;lt;TK;TV;&amp;gt;.com/a/a/b/af.com/a/a/b/ag;Ljava/util/ListIterator&amp;lt;TV;&amp;gt;; Attached are the classes I try to weave, and my code that does the actual weaving reproducible also by command line .</description>
    <commit commitTime="2015-04-01 08:02:01" id="c6753a8aaf104ddd8e3d50ea493ea3ab579fc2fc"/>
    <fixedFiles>
      <file>util/src/org/aspectj/util/GenericSignatureParser.java</file>
      <file>util/testsrc/org/aspectj/util/GenericSignatureParserTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="407017" reportTime="2013-05-01 15:10:00">
    <summary>Stack trace being printed, but want to mute it</summary>
    <description>In org.aspectj.ajdt.internal.core.builder.AjState.getDelegate ReferenceType , there is a call to printStackTrace . On the AJDT build server, this exception is being printed and causing some noise. Can you replace that call with a call to the IMessageHandler for the build?</description>
    <commit commitTime="2013-06-28 16:30:34" id="e6cb5086ad825e8df5f182aa0c5586b0b4af9d21"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</file>
    </fixedFiles>
  </bug>
  <bug id="407494" reportTime="2013-05-08 03:36:00">
    <summary>ClassNotFoundException if classname contains multiple dollar character</summary>
    <description>After updating Spring from 3.0.5 to 3.2.2 I'm seeing the exception below in my server start up log. While debugging I found out that in org.aspectj.weaver.ResolvedType.getDeclaringType the following is done: public ResolvedType getDeclaringType { if isArray { return null; } String name = getName ; int lastDollar = name.lastIndexOf '$' ; while lastDollar &amp;gt; 0 { // allow for classes starting '$' pr120474 ResolvedType ret = world.resolve UnresolvedType.forName name.substring 0, lastDollar , true ; if !ResolvedType.isMissing ret { return ret; } lastDollar = name.lastIndexOf '$', lastDollar - 1 ; } return null; } Now getName returns "org.springframework.transaction.aspectj.AbstractTransactionAspect$AbstractTransactionAspect$1" which contains two dollar characters in the name. Which means that the first world.resolve is entered with "org.springframework.transaction.aspectj.AbstractTransactionAspect$AbstractTransactionAspect" which still contains one dollar character. This class is not found in org.aspectj.apache.bcel.util.ClassLoaderRepository.loadClass ClassLoaderRepository.java:292 and throws a ClassNotFoundException. The exception is then catched in org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass and logged as ERROR. I do not want to disable the whole aspectj log just because of this exception. Maybe the exception handling should be changed or the lookup of the java class. private JavaClass lookupJavaClass ClassPathManager classPath, String name { if classPath == null { try { ensureRepositorySetup ; JavaClass jc = delegate.loadClass name ; if trace.isTraceEnabled { trace.event "lookupJavaClass", this, new Object[] { name, jc } ; } return jc; } catch ClassNotFoundException e { if trace.isTraceEnabled { trace.error "Unable to find class '" + name + "' in repository", e ; } return null; } } java.lang.ClassNotFoundException: org.springframework.transaction.aspectj.AbstractTransactionAspect$AbstractTransactionAspect not found - unable to determine URL at org.aspectj.apache.bcel.util.ClassLoaderRepository.loadClass ClassLoaderRepository.java:292 ~[aspectjweaver.jar:1.7.2] at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass BcelWorld.java:402 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate BcelWorld.java:376 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.ltw.LTWWorld.resolveDelegate LTWWorld.java:107 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.World.resolveToReferenceType World.java:477 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.World.resolve World.java:318 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.ResolvedType.getDeclaringType ResolvedType.java:1513 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.WithinPointcut.isWithinType WithinPointcut.java:49 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.WithinPointcut.matchInternal WithinPointcut.java:79 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:137 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:51 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:137 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:51 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:137 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:51 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:137 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.OrPointcut.matchInternal OrPointcut.java:50 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:137 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.OrPointcut.matchInternal OrPointcut.java:50 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:137 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.OrPointcut.matchInternal OrPointcut.java:50 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:137 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.OrPointcut.matchInternal OrPointcut.java:50 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:137 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.OrPointcut.matchInternal OrPointcut.java:50 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:137 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.OrPointcut.matchInternal OrPointcut.java:50 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:137 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.OrPointcut.matchInternal OrPointcut.java:50 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:137 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.ShadowMunger.match ShadowMunger.java:113 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.Advice.match Advice.java:109 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.bcel.BcelAdvice.match BcelAdvice.java:149 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:3156 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2549 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:480 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:100 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1691 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1635 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1400 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1186 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:527 [aspectjweaver.jar:1.7.2] at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:363 [aspectjweaver.jar:1.7.2] at org.eclipse.equinox.weaving.aspectj.loadtime.OSGiWeavingAdaptor.weaveClass Unknown Source [org.eclipse.equinox.weaving.aspectj_1.0.200.I20130127-2000.jar:na] at org.eclipse.equinox.weaving.aspectj.AspectJWeavingService.preProcess Unknown Source [org.eclipse.equinox.weaving.aspectj_1.0.200.I20130127-2000.jar:na] at org.eclipse.equinox.weaving.adaptors.WeavingAdaptor.weaveClass Unknown Source [org.eclipse.equinox.weaving.hook_1.0.200.I20130127-2000.jar:na] at org.eclipse.equinox.weaving.hooks.WeavingHook.processClass Unknown Source [org.eclipse.equinox.weaving.hook_1.0.200.I20130127-2000.jar:na] at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.defineClass ClasspathManager.java:594 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findClassImpl ClasspathManager.java:562 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClassImpl ClasspathManager.java:486 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass ClasspathManager.java:459 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLocalClass DefaultClassLoader.java:216 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass BundleLoader.java:400 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal BundleLoader.java:476 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.internal.loader.BundleLoader.findClass BundleLoader.java:429 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.internal.loader.BundleLoader.findClass BundleLoader.java:417 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass DefaultClassLoader.java:107 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at java.lang.ClassLoader.loadClass ClassLoader.java:356 [na:1.7.0_21] at org.springframework.transaction.aspectj.AbstractTransactionAspect.ajc$around$org_springframework_transaction_aspectj_AbstractTransactionAspect$1$2a73e96c AbstractTransactionAspect.aj:63 [org.springframework.aspects-3.2.2.RELEASE.jar:3.2.2.RELEASE] at com.softmodeler.service.impl.CategoryService.init CategoryService.java:117 [com.softmodeler.server/:na] at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method ~[na:1.7.0_21] at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:57 ~[na:1.7.0_21] at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:43 ~[na:1.7.0_21] at java.lang.reflect.Method.invoke Method.java:601 ~[na:1.7.0_21] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod AbstractAutowireCapableBeanFactory.java:1614 [org.springframework.beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods AbstractAutowireCapableBeanFactory.java:1555 [org.springframework.beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean AbstractAutowireCapableBeanFactory.java:1485 [org.springframework.beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean AbstractAutowireCapableBeanFactory.java:524 [org.springframework.beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean AbstractAutowireCapableBeanFactory.java:461 [org.springframework.beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject AbstractBeanFactory.java:295 [org.springframework.beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton DefaultSingletonBeanRegistry.java:223 [org.springframework.beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean AbstractBeanFactory.java:292 [org.springframework.beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean AbstractBeanFactory.java:194 [org.springframework.beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.osgi.service.exporter.support.OsgiServiceFactoryBean.afterPropertiesSet OsgiServiceFactoryBean.java:167 [org.springframework.osgi.core_1.2.1.jar:1.2.1] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods AbstractAutowireCapableBeanFactory.java:1547 [org.springframework.beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean AbstractAutowireCapableBeanFactory.java:1485 [org.springframework.beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean AbstractAutowireCapableBeanFactory.java:524 [org.springframework.beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean AbstractAutowireCapableBeanFactory.java:461 [org.springframework.beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject AbstractBeanFactory.java:295 [org.springframework.beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton DefaultSingletonBeanRegistry.java:223 [org.springframework.beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean AbstractBeanFactory.java:292 [org.springframework.beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean AbstractBeanFactory.java:194 [org.springframework.beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons DefaultListableBeanFactory.java:608 [org.springframework.beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization AbstractApplicationContext.java:932 [org.springframework.context-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.access$1600 AbstractDelegatedExecutionApplicationContext.java:69 [org.springframework.osgi.core_1.2.1.jar:1.2.1] at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run AbstractDelegatedExecutionApplicationContext.java:355 [org.springframework.osgi.core_1.2.1.jar:1.2.1] at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL PrivilegedUtils.java:85 [org.springframework.osgi.core_1.2.1.jar:1.2.1] at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh AbstractDelegatedExecutionApplicationContext.java:320 [org.springframework.osgi.core_1.2.1.jar:1.2.1] at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run DependencyWaiterApplicationContextExecutor.java:132 [org.springframework.osgi.extender_1.2.1.jar:1.2.1] at org.springframework.core.task.SyncTaskExecutor.execute SyncTaskExecutor.java:49 [org.springframework.core-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.stageTwo DependencyWaiterApplicationContextExecutor.java:299 [org.springframework.osgi.extender_1.2.1.jar:1.2.1] at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.stageOne DependencyWaiterApplicationContextExecutor.java:244 [org.springframework.osgi.extender_1.2.1.jar:1.2.1] at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.refresh DependencyWaiterApplicationContextExecutor.java:169 [org.springframework.osgi.extender_1.2.1.jar:1.2.1] at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.refresh AbstractDelegatedExecutionApplicationContext.java:175 [org.springframework.osgi.core_1.2.1.jar:1.2.1] at org.springframework.osgi.extender.internal.activator.ContextLoaderListener$2.run ContextLoaderListener.java:716 [org.springframework.osgi.extender_1.2.1.jar:1.2.1] at org.springframework.core.task.SyncTaskExecutor.execute SyncTaskExecutor.java:49 [org.springframework.core-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.osgi.extender.internal.activator.ContextLoaderListener.maybeCreateApplicationContextFor ContextLoaderListener.java:781 [org.springframework.osgi.extender_1.2.1.jar:1.2.1] at org.springframework.osgi.extender.internal.activator.ContextLoaderListener$ContextBundleListener.handleEvent ContextLoaderListener.java:229 [org.springframework.osgi.extender_1.2.1.jar:1.2.1] at org.springframework.osgi.extender.internal.activator.ContextLoaderListener$BaseListener.bundleChanged ContextLoaderListener.java:172 [org.springframework.osgi.extender_1.2.1.jar:1.2.1] at org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent BundleContextImpl.java:847 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent EventManager.java:230 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous ListenerQueue.java:148 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEventPrivileged Framework.java:1523 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent Framework.java:1459 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent Framework.java:1454 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.framework.internal.core.BundleHost.startWorker BundleHost.java:391 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.framework.internal.core.AbstractBundle.start AbstractBundle.java:299 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.framework.util.SecureAction.start SecureAction.java:440 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.internal.loader.BundleLoader.setLazyTrigger BundleLoader.java:268 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.core.runtime.internal.adaptor.EclipseLazyStarter.postFindLocalClass EclipseLazyStarter.java:107 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass ClasspathManager.java:463 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLocalClass DefaultClassLoader.java:216 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass BundleLoader.java:400 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.internal.loader.SingleSourcePackage.loadClass SingleSourcePackage.java:35 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal BundleLoader.java:464 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.internal.loader.BundleLoader.findClass BundleLoader.java:429 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.internal.loader.BundleLoader.findClass BundleLoader.java:417 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass DefaultClassLoader.java:107 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at java.lang.ClassLoader.loadClass ClassLoader.java:356 [na:1.7.0_21] at com.softmodeler.aspose.Activator.start Activator.java:53 [com.softmodeler.aspose/:na] at org.eclipse.osgi.framework.internal.core.BundleContextImpl$1.run BundleContextImpl.java:711 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at java.security.AccessController.doPrivileged Native Method [na:1.7.0_21] at org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator BundleContextImpl.java:702 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.framework.internal.core.BundleContextImpl.start BundleContextImpl.java:683 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.framework.internal.core.BundleHost.startWorker BundleHost.java:381 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.framework.internal.core.AbstractBundle.resume AbstractBundle.java:389 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.framework.internal.core.Framework.resumeBundle Framework.java:1131 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles StartLevelManager.java:559 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles StartLevelManager.java:544 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.framework.internal.core.StartLevelManager.incFWSL StartLevelManager.java:457 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel StartLevelManager.java:243 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.framework.internal.core.StartLevelManager.dispatchEvent StartLevelManager.java:438 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.framework.internal.core.StartLevelManager.dispatchEvent StartLevelManager.java:1 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent EventManager.java:230 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na] at org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.run EventManager.java:340 [org.eclipse.osgi_3.7.2.v20120110-1415.jar:na]</description>
    <commit commitTime="2013-05-31 23:07:29" id="31d8e259e5cd8b1b4810d69bbf4b9ea45ae4a4c8"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/ReferencePointcut.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegate.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/CompileAndRunTestCase.java</file>
      <file>weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc173/Ajc173Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="407739" reportTime="2013-05-10 09:06:00">
    <summary>Change remove and declare annottation is not working</summary>
    <description>Created attachment 230774 [details] Maven projetct that demonstrates the bug Hi, I want to change an annotation. I have dropped the old annotation and added again as described here: http://dev.eclipse.org/mhonarc/lists/aspectj-users/msg13661.html But it is not working. Only remove is working. Only declare annotation is working. Remove and declare together are not working, on the end the annotation is missing. The output from another project says that the filed should have the annotattion after compile irrelevant code changed to ... : 'private String dummy [RuntimeVisibleAnnotations]' of type '...User' User.java has had @Column field annotation removed by '...ChangeColumnAspect' ChangeColumnAspect.aj:7 'private String dummy [RuntimeVisibleAnnotations]' of type '...User' User.java is annotated with @Column insertable = false,updatable = false field annotation from '...ChangeColumnAspect' ChangeColumnAspect.aj:8</description>
    <commit commitTime="2013-06-13 12:29:45" id="5b0b6b07d2b581cddd1bac4a2a6b12cd4ac02b07"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/CrosscuttingMembers.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/CrosscuttingMembersSet.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc173/Ajc173Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="408721" reportTime="2013-05-22 12:10:00">
    <summary>java.util.ConcurrentModificationException when multiple threads enter the weaver</summary>
    <description>I am using AspectJ 1.7.1. Occasionally I see the following exception, which I believe is related to multiple threads initializing some internal state. java.util.ConcurrentModificationException: null at java.util.ArrayList$Itr.checkForComodification Unknown Source ~[na:1.7.0_11] at java.util.ArrayList$Itr.next Unknown Source ~[na:1.7.0_11] at org.aspectj.weaver.ReferenceType.findDerivativeType ReferenceType.java:1122 ~[aspectjweaver.jar:1.7.1] at org.aspectj.weaver.TypeFactory.createParameterizedType TypeFactory.java:44 ~[aspectjweaver.jar:1.7.1] at org.aspectj.weaver.ResolvedType.parameterize ResolvedType.java:2479 ~[aspectjweaver.jar:1.7.1] at org.aspectj.weaver.ReferenceType.getDeclaredInterfaces ReferenceType.java:673 ~[aspectjweaver.jar:1.7.1] at org.aspectj.weaver.ResolvedType.getDirectSupertypes ResolvedType.java:82 ~[aspectjweaver.jar:1.7.1] at org.aspectj.weaver.patterns.TypePattern.matchesSubtypes TypePattern.java:178 ~[aspectjweaver.jar:1.7.1] at org.aspectj.weaver.patterns.ExactTypePattern.matchesSubtypes ExactTypePattern.java:74 ~[aspectjweaver.jar:1.7.1] at org.aspectj.weaver.patterns.TypePattern.matchesStatically TypePattern.java:130 ~[aspectjweaver.jar:1.7.1] at org.aspectj.weaver.patterns.KindedPointcut.fastMatch KindedPointcut.java:130 ~[aspectjweaver.jar:1.7.1] at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.couldMatchJoinPointsInType PointcutExpressionImpl.java:84 ~[aspectjweaver.jar:1.7.1] at org.springframework.aop.aspectj.AspectJExpressionPointcut.matches AspectJExpressionPointcut.java:250 ~[spring-aop.jar:3.2.1.RELEASE] at org.springframework.aop.support.AopUtils.canApply AopUtils.java:208 ~[spring-aop.jar:3.2.1.RELEASE] at org.springframework.aop.support.AopUtils.canApply AopUtils.java:262 ~[spring-aop.jar:3.2.1.RELEASE] at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply AopUtils.java:294 ~[spring-aop.jar:3.2.1.RELEASE] at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply AbstractAdvisorAutoProxyCreator.java:118 ~[spring-aop.jar:3.2.1.RELEASE]</description>
    <commit commitTime="2013-06-26 15:08:06" id="3f6e16677d20489a6390dde825608e0d2e29f5d7"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java</file>
    </fixedFiles>
  </bug>
  <bug id="413378" reportTime="2013-07-20 02:22:00">
    <summary>A constructor added by ITD cannot invoke the method of its super class</summary>
    <description>AspectJ Development Tools 2.2.0.e37x-RELEASE-20120704-0900 It seems *super.someMethod * can not be correctly resolved in the constructor added by ITD It can be compiled with no problem, but* at runtime, exception is raised.* The class which I'll add a new constructor to: public class Child extends Parent{ public String mParent = "John"; public Child String parent { this.mParent = parent; } public String getParent { return this.mParent; } } As we can see, *Child * extends *Parent* class Parent has a method getAge public class Parent { private String mName = "John"; private int mAge = 50; public int getAge { return mAge; } } If I add a new constructor for the *Child * in my aspect. public aspect MyTest { public Child.new String parent, int age { this parent ; System.out.println "Get Age:" + super.getAge ; System.out.println "Child Name:" + this.mParent ; } } The above aspect code will trigger an exception. Exception in thread "main" java.lang.NoSuchMethodError: com.test.Child.ajc$superDispatch$com_test_Child$getAge I at MyTest.ajc$postInterConstructor$MyTest$com_test_Child MyTest.aj:13 at com.test.Child.&amp;lt;init&amp;gt; Child.java:1 at MainProgram.main MainProgram.java:14 Is this a limitation of AspectJ? Is this the only way to resolve this issue? I also attach the src &amp;amp; compiled binary files</description>
    <commit commitTime="2013-07-22 14:47:02" id="302c14ee680d5782cba619d8cc748e60afd09561"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
      <file>tests/src/org/aspectj/systemtest/AllTests17.java</file>
    </fixedFiles>
  </bug>
  <bug id="415266" reportTime="2013-08-16 17:51:00">
    <summary>LTW not working when JMX is enabled</summary>
    <description>When I enable JMX remote management on a JVM along with AspectJ load-time weaving LTW , our Aspect doesn't appear to get woven in. This are the JVM arguments: -Dvisualvm.display.name=JdbcTimingAspectTest -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.port=1024 -javaagent:/jars/aspectjweaver.jar -Dorg.aspectj.weaver.loadtime.configuration=com/trgr/cobalt/infrastructure/instrumentation/aspects/timing/jdbc/jdbcmonitor.xml Note that if I don't enable JMX remote management by remove the -Dcom.sun.management.jmxremote.* JVM arguments , the Aspect works fine.</description>
    <commit commitTime="2013-10-01 10:08:31" id="9e992d6e5e2809afdc18ee4ce4e3bc42b9883e00"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Aj.java</file>
    </fixedFiles>
  </bug>
  <bug id="415957" reportTime="2013-08-27 10:18:00">
    <summary>ComplianceLevel 1.8 does not enable AspectJ 5 changes</summary>
    <description>Annotation type patterns are not available when using complianceLevel 1.8, as shown in the attached project. I'm getting the following compilation error: annotation type patterns are only supported at Java 5 compliance level or above If I change the parameters to build at 1.7 while still using 1.8.0.M1, the build passes. How to reproduce with the sample project: - Failing 1.8: $ mvn clean package - Working 1.7: $ mvn -Dmaven.compiler.source=1.7 -Dmaven.compiler.target=1.7 clean package Or manually, without using maven just to show it's not a problem with the aspectj-maven-plugin , using either the compliance level or source + target: - Failing 1.8: $ mkdir -p target/classes $ java -jar $HOME/.m2/repository/org/aspectj/aspectjtools/1.8.0.M1/aspectjtools-1.8.0.M1.jar -encoding UTF-8 -1.8 -classpath $HOME/.m2/repository/org/aspectj/aspectjrt/1.8.0.M1/aspectjrt-1.8.0.M1.jar:target/classes -d target/classes src/main/java/MyClass.java src/main/aspect/MyAspect.aj /.../annotation/src/main/aspect/MyAspect.aj:2 [error] annotation type patterns are only supported at Java 5 compliance level or above pointcut all : execution @javax.annotation.Resource * * .. ; ^^^^^^^^^^^^^^^^^^^^^ 1 error $ java -jar $HOME/.m2/repository/org/aspectj/aspectjtools/1.8.0.M1/aspectjtools-1.8.0.M1.jar -encoding UTF-8 -source 1.8 -target 1.8 -classpath $HOME/.m2/repository/org/aspectj/aspectjrt/1.8.0.M1/aspectjrt-1.8.0.M1.jar:target/classes -d target/classes src/main/java/MyClass.java src/main/aspect/MyAspect.aj /.../annotation/src/main/aspect/MyAspect.aj:2 [error] annotation type patterns are only supported at Java 5 compliance level or above pointcut all : execution @javax.annotation.Resource * * .. ; ^^^^^^^^^^^^^^^^^^^^^ 1 error - Working 1.7: $ java -jar $HOME/.m2/repository/org/aspectj/aspectjtools/1.8.0.M1/aspectjtools-1.8.0.M1.jar -encoding UTF-8 -1.7 -classpath $HOME/.m2/repository/org/aspectj/aspectjrt/1.8.0.M1/aspectjrt-1.8.0.M1.jar:target/classes -d target/classes src/main/java/MyClass.java src/main/aspect/MyAspect.aj /.../annotation/src/main/aspect/MyAspect.aj:5 [warning] advice defined in MyAspect has not been applied [Xlint:adviceDidNotMatch] 1 warning $ java -jar $HOME/.m2/repository/org/aspectj/aspectjtools/1.8.0.M1/aspectjtools-1.8.0.M1.jar -encoding UTF-8 -source 1.7 -target 1.7 -classpath $HOME/.m2/repository/org/aspectj/aspectjrt/1.8.0.M1/aspectjrt-1.8.0.M1.jar:target/classes -d target/classes src/main/java/MyClass.java src/main/aspect/MyAspect.aj /.../annotation/src/main/aspect/MyAspect.aj:5 [warning] advice defined in MyAspect has not been applied [Xlint:adviceDidNotMatch] 1 warning</description>
    <commit commitTime="2013-08-27 13:25:30" id="d82db7bf44e2e0d5f68798c22cd7eb373452bc54"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc180/Ajc180Tests.java</file>
      <file>ajde.core/src/org/aspectj/ajde/core/internal/AjdeCoreBuildManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="418129" reportTime="2013-09-26 14:31:00">
    <summary>Can't introduce annotation onto introduced method from trait-patterned aspect</summary>
    <description>Created attachment 235865 [details] eclipse AspectJ testcase An aspect is introducing a field and a method. Introducing an annotation onto the introduced field works fine; introducing an annotation onto the introduced **method** fails with the message "The method '...' does not exist" where '...' is the method pattern . Aspect follows trait pattern: public interface Behavior { String hello ; } ===== @Target ElementType.TYPE @Retention RetentionPolicy.RUNTIME public @interface Behaved {} ===== public aspect Trait { public interface I extends Behavior {} declare parents: @Behaved * implements I; private String I.name = getClass .getName ; public String I.hello { return "hello" + name; } } ===== @Behaved public class Target { public static aspect A { declare @field: * Target.name: @Tagged; // WORKY declare @method: * Target.hello .. : @Tagged; // NO WORKY } } ===== @Target { ElementType.TYPE, ElementType.METHOD, ElementType.FIELD, ElementType.CONSTRUCTOR } @Retention RetentionPolicy.RUNTIME public @interface Tagged {} Test eclipse AspectJ project attached.</description>
    <commit commitTime="2013-10-01 10:00:14" id="2393befbdf0ef3842b838591f7af08e7d1467e34"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc174/Ajc174Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="419279" reportTime="2013-10-11 15:20:00">
    <summary>ajc option to change -Xlint level per-message without Xlintfile</summary>
    <description>The -Xlintfile option is not a great fit for controlling message across multiple build projects, specifically in my case from the pluginManagement section of a maven parent pom. The problem is that you need a local file to configure the per-message output levels ignore/warning/error when you really want to specify it in the build script or in a shared file. As an alternative to -Xlintfile, it would be handy to be able to change an Xlint warning level per message using command line options. For example: ajc -Xlint:adviceDidNotMatch=ignore would override the XlintDefault.properties file for the adviceDidNotMatch message. With Regards Rob</description>
    <commit commitTime="2013-10-23 12:44:23" id="b2cd5fa175facc39bd0d1af5a4646b9b39c8bcda"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc174/Ajc174Tests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/Lint.java</file>
      <file>testing/newsrc/org/aspectj/testing/CompileSpec.java</file>
    </fixedFiles>
  </bug>
  <bug id="420210" reportTime="2013-10-23 16:00:00">
    <summary>Support additional message insert keys in declare error/warning</summary>
    <description>It would be good to be able to insert the enclosing class name or enclosing member for a joinpoint.</description>
    <commit commitTime="2013-10-23 13:16:20" id="9319e343d54a65bcfc4a8c19e4305147ce9e27b8"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc174/Ajc174Tests.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/Checker.java</file>
    </fixedFiles>
  </bug>
  <bug id="423257" reportTime="2013-12-04 19:43:00">
    <summary>LTW - java.lang.VerifyError: Bad return type with generics and local variables</summary>
    <description>This code: package com.foo.bar; public class Test { abstract class X&amp;lt;T&amp;gt; {} class X1 extends X&amp;lt;Integer&amp;gt; {} class X2 extends X&amp;lt;String&amp;gt; {} public Test foo { return this; } public &amp;lt;T&amp;gt; X&amp;lt;T&amp;gt; createMessage int n { X x; if n == 0 { x = new X1 ; } else { x = new X2 ; } return x; } } produces: java.lang.VerifyError: Bad return type in method com.foo.bar.Test.createMessage I Lcom/foo/bar/Test$X; at offset 26 at com.betfair.marketupdates.Main.start Main.java:18 at org.vertx.java.platform.Verticle.start Verticle.java:82 at org.vertx.java.platform.impl.DefaultPlatformManager$19.run DefaultPlatformManager.java:1551 at org.vertx.java.core.impl.DefaultContext$3.run DefaultContext.java:176 at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks SingleThreadEventExecutor.java:354 at io.netty.channel.nio.NioEventLoop.run NioEventLoop.java:353 at io.netty.util.concurrent.SingleThreadEventExecutor$2.run SingleThreadEventExecutor.java:101 at java.lang.Thread.run Thread.java:722 even when the createMessage is not being weaved: package com.foo.bar; @Aspect public class AspectX { @Before "execution * com.foo.bar.Test.foo " public void advice { System.out.println "Hello" ; } } The problem lies in the first local variable type as can be seen by analyzing the bytecode notice the last line : Before: public &amp;lt;T extends java/lang/Object&amp;gt; com.foo.bar.Test$X&amp;lt;T&amp;gt; createMessage int ; flags: ACC_PUBLIC Code: stack=3, locals=3, args_size=2 0: iload_1 1: ifne 16 4: new #2 // class com/foo/bar/Test$X1 7: dup 8: aload_0 9: invokespecial #3 // Method com/foo/bar/Test$X1."&amp;lt;init&amp;gt;": Lcom/foo/bar/Test; V 12: astore_2 13: goto 25 16: new #4 // class com/foo/bar/Test$X2 19: dup 20: aload_0 21: invokespecial #5 // Method com/foo/bar/Test$X2."&amp;lt;init&amp;gt;": Lcom/foo/bar/Test; V 24: astore_2 25: aload_2 26: areturn LineNumberTable: line 17: 0 line 18: 4 line 20: 16 line 22: 25 LocalVariableTable: Start Length Slot Name Signature 13 3 2 x Lcom/foo/bar/Test$X; 0 27 0 this Lcom/foo/bar/Test; 0 27 1 n I 25 2 2 x Lcom/foo/bar/Test$X; StackMapTable: number_of_entries = 2 frame_type = 16 /* same */ frame_type = 252 /* append */ offset_delta = 8 locals = [ class com/foo/bar/Test$X ] After: public &amp;lt;T extends java/lang/Object&amp;gt; com.foo.bar.Test$X&amp;lt;T&amp;gt; createMessage int ; flags: ACC_PUBLIC Code: stack=3, locals=3, args_size=2 0: iload_1 1: ifne 16 4: new #2 // class com/foo/bar/Test$X1 7: dup 8: aload_0 9: invokespecial #3 // Method com/foo/bar/Test$X1."&amp;lt;init&amp;gt;": Lcom/foo/bar/Test; V 12: astore_2 13: goto 25 16: new #4 // class com/foo/bar/Test$X2 19: dup 20: aload_0 21: invokespecial #5 // Method com/foo/bar/Test$X2."&amp;lt;init&amp;gt;": Lcom/foo/bar/Test; V 24: astore_2 25: aload_2 26: areturn LocalVariableTable: Start Length Slot Name Signature 13 3 2 x Lcom/foo/bar/Test$X; 0 27 0 this Lcom/foo/bar/Test; 0 27 1 n I 25 2 2 x Lcom/foo/bar/Test$X; LineNumberTable: line 17: 0 line 18: 4 line 20: 16 line 22: 25 StackMapTable: number_of_entries = 2 frame_type = 16 /* same */ frame_type = 252 /* append */ offset_delta = 8 locals = [ class java/lang/Object ] Note: This is probably the same bug as https://bugs.eclipse.org/bugs/show_bug.cgi?id=417041 Note2: I'm running jdk1.7.0_17</description>
    <commit commitTime="2013-12-06 10:33:48" id="dd88d21ef6d515bbc7034ca429d392f62101802a"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/asm/StackMapAdder.java</file>
      <file>tests/src/org/aspectj/systemtest/AllTests17.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="431541" reportTime="2014-03-28 18:09:00">
    <summary>[plan] NullAnnotationMatching.java:142 when compiling AspectJ 1.8.0 RC2</summary>
    <description>Upgraded Eclipse eclipse.buildId=4.3.2.M20140221-1700 to: - AspectJ Development Tools 2.2.4.e43x-20140320-1000 - AspectJ Compiler 1.8.0.20140320104000 and started getting compile error messages with the following stacktrace: java.lang.NullPointerException at org.aspectj.org.eclipse.jdt.internal.compiler.ast.NullAnnotationMatching.analyse NullAnnotationMatching.java:142 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.NullAnnotationMatching.analyse NullAnnotationMatching.java:112 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Statement.internalCheckAgainstNullTypeAnnotation Statement.java:190 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Statement.checkAgainstNullTypeAnnotation Statement.java:186 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.ReturnStatement.checkAgainstNullAnnotation ReturnStatement.java:186 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.ReturnStatement.analyseCode ReturnStatement.java:85 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Block.analyseCode Block.java:48 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TryStatement.analyseCode TryStatement.java:165 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode MethodDeclaration.java:124 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode TypeDeclaration.java:766 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode TypeDeclaration.java:262 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.analyseCode CompilationUnitDeclaration.java:118 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:793 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:471 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1031 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:272 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:185 at org.aspectj.ajde.core.internal.AjdeCoreBuildManager.performBuild AjdeCoreBuildManager.java:105 at org.aspectj.ajde.core.AjCompiler.buildFresh AjCompiler.java:100 at org.eclipse.ajdt.core.builder.AJBuilder.build AJBuilder.java:255 at org.eclipse.core.internal.events.BuildManager$2.run BuildManager.java:733 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:42 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:206 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:246 at org.eclipse.core.internal.events.BuildManager$1.run BuildManager.java:299 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:42 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:302 at org.eclipse.core.internal.events.BuildManager.basicBuildLoop BuildManager.java:358 at org.eclipse.core.internal.events.BuildManager.build BuildManager.java:381 at org.eclipse.core.internal.events.AutoBuildJob.doBuild AutoBuildJob.java:143 at org.eclipse.core.internal.events.AutoBuildJob.run AutoBuildJob.java:241 at org.eclipse.core.internal.jobs.Worker.run Worker.java:53 This is reproducible when I run Project-&amp;gt;Clean on my AspectJ project. The -source and -target I also have the following Java 8 patch plugin installed: - Eclipse JDT Java Development Tools Patch with Java 8 support for Kepler SR2 1.0.0.v20140317-1956 The following settings are in org.eclipse.jdt.core.prefs the my AspectJ project: org.eclipse.jdt.core.compiler.compliance=1.8 org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve org.eclipse.jdt.core.compiler.debug.sourceFile=generate org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.8 org.eclipse.jdt.core.compiler.problem.enumIdentifier=error org.eclipse.jdt.core.compiler.debug.lineNumber=generate eclipse.preferences.version=1 org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled org.eclipse.jdt.core.compiler.source=1.8</description>
    <commit commitTime="2014-04-04 12:01:18" id="4ffb0fd285609fa955450964e54fc3f8fd2996ad"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc180/Ajc180Tests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/Proceed.java</file>
    </fixedFiles>
  </bug>
  <bug id="431976" reportTime="2014-04-04 03:40:00">
    <summary>thisJoinPoint may not have been initialized</summary>
    <description>Created attachment 241601 [details] aspectj plugin to reproduce the bug In case an aspect is defined as privileged and the variable thisJoindPoint is used in an advice you get the compile error: The local variable thisJoinPoint may not have been initialized</description>
    <commit commitTime="2014-04-04 12:33:45" id="331399f82b33cc4cff8239aab18e405dfe0dd2b9"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc180/Ajc180Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="432178" reportTime="2014-04-07 13:30:00">
    <summary>Concrete class percflow NoSuchMethodError: ajc$perCflowPush V</summary>
    <description>Please consider following reproducible example. This test has been made under the current aspectj development version aspectj-DEVELOPMENT-20130612103400.jar and java 1.6 &amp;amp; 1.7. src/A.java: public class A { public static void main String [] args { B test = new B ; test.met ; } } src/B.java: public class B { public void met { System.out.println "foo" ; } } aspects/PerCFlowBug.java public abstract aspect PerCFlowBug percflow pointexp { String name = "bar"; abstract pointcut pointexp ; after : pointexp { System.out.println name ; } } META-INF/aop.xml: &amp;lt;aspectj&amp;gt; &amp;lt;aspects&amp;gt; &amp;lt;concrete-aspect name="PerCFlowBugImpl" extends="PerCFlowBug"&amp;gt; &amp;lt;pointcut name="pointexp" expression=" call void *.met .. "/&amp;gt; &amp;lt;/concrete-aspect&amp;gt; &amp;lt;/aspects&amp;gt; &amp;lt;weaver options="-verbose -debug -showWeaveInfo" /&amp;gt; &amp;lt;/aspectj&amp;gt; aj5 -cp aspects/:src/:. A [AppClassLoader@1feed786] info AspectJ Weaver Version 1.7.5-DEVELOPMENT built on Friday Dec 6, 2013 at 18:25:29 GMT [AppClassLoader@1feed786] info register classloader sun.misc.Launcher$AppClassLoader@1feed786 [AppClassLoader@1feed786] info using configuration /user/2/.base/guirohug/home/shared/acs/bug_poc/META-INF/aop.xml [AppClassLoader@1feed786] info define aspect PerCFlowBugImpl [AppClassLoader@1feed786] debug weaving 'PerCFlowBugImpl' [AppClassLoader@1feed786] debug generating class 'PerCFlowBugImpl' [AppClassLoader@1feed786] debug weaving 'A' [AppClassLoader@1feed786] weaveinfo Join point 'method-call void B.met ' in Type 'A' A.java:6 advised by after advice from 'PerCFlowBugImpl' PerCFlowBug.java:9 [with runtime test] [AppClassLoader@1feed786] debug weaving 'B' [AppClassLoader@1feed786] weaveinfo Join point 'method-call void java.io.PrintStream.println java.lang.String ' in Type 'B' B.java:7 advised by after advice from 'PerCFlowBugImpl' PerCFlowBug.java:9 [with runtime test] Exception in thread "main" java.lang.NoSuchMethodError: PerCFlowBugImpl.ajc$perCflowPush V at A.main A.java:6 It seems that using LoadTime weaving, implementing abstract class having a percflow behavior always throw a java.lang.NoSuchMethodError PerCFlowBugImpl.java: public aspect PerCFlowBugImpl extends PerCFlowBug { pointcut pointexp : call void *.met .. ; } Using compile-time weaving PerCFlowBugImpl.java above , it works well. Thanks.</description>
    <commit commitTime="2014-04-15 16:51:02" id="c641ffdbb6c04956a7b1a6d6c89c9c6c67be0761"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc180/Ajc180Tests.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="432714" reportTime="2014-04-14 04:29:00">
    <summary>Java 1.8.0: VerifyError with Java8 but not with Java6</summary>
    <description>In our Nuclos ERP system git sources at https://bitbucket.org/nuclos/nuclos , I encounter the following with Java 1.8.0: &amp;gt; cd nuclos-server &amp;gt; mvn -Djava.version=1.8 clean install [ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.17:test default-test on project nuclos-server: Execution default-test of goal org.apache.maven.plugins:maven-surefire-plugin:2.17:test failed: There was an error in the forked process [ERROR] java.lang.VerifyError: Bad type on operand stack [ERROR] Exception Details: [ERROR] Location: [ERROR] org/nuclos/server/history/ejb3/HistoryFacadeBean.getHistoryData_aroundBody6 Lorg/nuclos/server/history/ejb3/HistoryFacadeBean;Lorg/nuclos/common/UID;Ljava/lang/Object; Ljava/util/Collection; @40: invokestatic [ERROR] Reason: [ERROR] Type 'java/lang/Object' current frame, stack[0] is not assignable to 'org/nuclos/common/FieldMeta' [ERROR] Current Frame: [ERROR] bci: @40 [ERROR] flags: { } [ERROR] locals: { 'org/nuclos/server/history/ejb3/HistoryFacadeBean', 'org/nuclos/common/UID', 'java/lang/Object', 'org/nuclos/common/collect/collectable/searchcondition/CollectableComparison' } [ERROR] stack: { 'java/lang/Object', 'org/nuclos/common/collect/collectable/searchcondition/ComparisonOperator', 'java/lang/Object' } [ERROR] Bytecode: [ERROR] 0000000: b200 43b4 01b5 b201 b92b b801 bf4e 2cc1 [ERROR] 0000010: 0061 9900 0cb2 0043 b400 63a7 0009 b200 [ERROR] 0000020: 43b4 0049 b201 b92c b801 bf3a 052a b700 [ERROR] 0000030: cdb2 0043 05bd 01c5 5903 2d53 5904 1905 [ERROR] 0000040: 53b8 01c7 04b9 01cb 0400 3a07 2cc1 0061 [ERROR] 0000050: 9900 0cb2 0043 b401 cfa7 0009 b200 43b4 [ERROR] 0000060: 01d3 b201 b92c b801 bf3a 092a b700 cdb2 [ERROR] 0000070: 0043 1909 04b9 01cb 0400 b901 d701 003a [ERROR] 0000080: 0ba7 003d 190b b901 5901 00c0 0105 3a0d [ERROR] 0000090: 190d b200 43b4 01da b601 de3a 0f2a b400 [ERROR] 00000a0: 7d19 0fb6 01e1 b600 a73a 1119 112b b600 [ERROR] 00000b0: 9b99 000d 1907 190d b901 e402 0057 190b [ERROR] 00000c0: b901 8201 009a ffbf b201 e53a 0d2a b701 [ERROR] 00000d0: eb2b 2c03 b800 cf12 d4b6 00d6 b901 ed05 [ERROR] 00000e0: 003a 0da7 0030 3a0b b200 1c13 01f1 190b [ERROR] 00000f0: b601 f3a7 0020 3a0b b200 1c13 01f1 190b [ERROR] 0000100: b601 f3a7 0010 3a0b b200 1c13 01f1 190b [ERROR] 0000110: b601 f319 0db9 0151 0100 b901 5501 003a [ERROR] 0000120: 0fa7 005c 190f b901 5901 00c0 01f7 3a0b [ERROR] 0000130: 2ab7 00cd 190b b601 f919 0bb6 01fa 2cb9 [ERROR] 0000140: 01fd 0400 b902 0101 003a 13a7 0028 1913 [ERROR] 0000150: b901 5901 00c0 0105 3a11 1907 2a19 11b6 [ERROR] 0000160: 0204 b601 2d19 11b6 0208 b602 09b9 020b [ERROR] 0000170: 0200 5719 13b9 0182 0100 9aff d419 0fb9 [ERROR] 0000180: 0182 0100 9aff a0bb 014a 59b7 014c 3a0b [ERROR] 0000190: bb01 4a59 1907 b702 0fb6 0212 3a11 a700 [ERROR] 00001a0: 6219 11b9 0159 0100 c001 053a 0f19 0fb2 [ERROR] 00001b0: 0043 b402 13b6 0217 1301 01b6 021a c001 [ERROR] 00001c0: 013a 1319 0b19 13b9 015e 0200 9a00 3419 [ERROR] 00001d0: 0b19 13b9 0172 0200 57b2 0043 b402 13b2 [ERROR] 00001e0: 01b9 1913 b801 bf3a 1519 072a b700 cdb2 [ERROR] 00001f0: 0043 1915 04b9 01cb 0400 b902 0b02 0057 [ERROR] 0000200: 1911 b901 8201 009a ff9a 1907 bb02 1d59 [ERROR] 0000210: 2ab7 021f b802 22b0 4ebb 00de 592d b700 [ERROR] 0000220: e0bf [ERROR] Exception Handler Table: [ERROR] bci [205, 227] =&amp;gt; handler: 230 [ERROR] bci [205, 227] =&amp;gt; handler: 246 [ERROR] bci [205, 227] =&amp;gt; handler: 262 [ERROR] bci [0, 535] =&amp;gt; handler: 536 [ERROR] Stackmap Table: [ERROR] append_frame @30,Object[#579] [ERROR] same_locals_1_stack_item_frame @36,Object[#80] [ERROR] full_frame @92,{Object[#1],Object[#97],Object[#80],Object[#579],Top,Object[#579],Top,Object[#472]},{} [ERROR] same_locals_1_stack_item_frame @98,Object[#80] [ERROR] full_frame @132,{Object[#1],Object[#97],Object[#80],Object[#579],Top,Object[#579],Top,Object[#472],Top,Object[#579],Top,Object[#346]},{} [ERROR] same_frame @190 [ERROR] full_frame @230,{Object[#1],Object[#97],Object[#80],Object[#579],Top,Object[#579],Top,Object[#472],Top,Object[#579],Top,Object[#346],Top,Object[#136]},{Object[#222]} [ERROR] same_locals_1_stack_item_frame @246,Object[#552] [ERROR] same_locals_1_stack_item_frame @262,Object[#554] [ERROR] full_frame @275,{Object[#1],Object[#97],Object[#80],Object[#579],Top,Object[#579],Top,Object[#472],Top,Object[#579],Top,Object[#80],Top,Object[#136]},{} [ERROR] append_frame @292,Top,Object[#346] [ERROR] full_frame @334,{Object[#1],Object[#97],Object[#80],Object[#579],Top,Object[#579],Top,Object[#472],Top,Object[#579],Top,Object[#503],Top,Object[#136],Top,Object[#346],Top,Top,Top,Object[#346]},{} [ERROR] same_frame @371 [ERROR] full_frame @381,{Object[#1],Object[#97],Object[#80],Object[#579],Top,Object[#579],Top,Object[#472],Top,Object[#579],Top,Object[#80],Top,Object[#136],Top,Object[#346]},{} [ERROR] full_frame @417,{Object[#1],Object[#97],Object[#80],Object[#579],Top,Object[#579],Top,Object[#472],Top,Object[#579],Top,Object[#330],Top,Object[#136],Top,Object[#80],Top,Object[#346]},{} [ERROR] same_frame_extended @512 [ERROR] full_frame @536,{Object[#1],Object[#97],Object[#80]},{Object[#554]} [ERROR] [ERROR] at java.lang.Class.getDeclaredMethods0 Native Method [ERROR] at java.lang.Class.privateGetDeclaredMethods Class.java:2688 [ERROR] at java.lang.Class.privateGetPublicMethods Class.java:2814 [ERROR] at java.lang.Class.getMethods Class.java:1602 [ERROR] at org.testng.internal.TestNGClassFinder.&amp;lt;init&amp;gt; TestNGClassFinder.java:59 [ERROR] at org.testng.TestRunner.initMethods TestRunner.java:409 [ERROR] at org.testng.TestRunner.init TestRunner.java:235 [ERROR] at org.testng.TestRunner.init TestRunner.java:205 [ERROR] at org.testng.TestRunner.&amp;lt;init&amp;gt; TestRunner.java:153 [ERROR] at org.testng.SuiteRunner$DefaultTestRunnerFactory.newTestRunner SuiteRunner.java:536 [ERROR] at org.testng.SuiteRunner.init SuiteRunner.java:159 [ERROR] at org.testng.SuiteRunner.&amp;lt;init&amp;gt; SuiteRunner.java:113 [ERROR] at org.testng.TestNG.createSuiteRunner TestNG.java:1299 [ERROR] at org.testng.TestNG.createSuiteRunners TestNG.java:1286 [ERROR] at org.testng.TestNG.runSuitesLocally TestNG.java:1140 [ERROR] at org.testng.TestNG.run TestNG.java:1057 [ERROR] at org.apache.maven.surefire.testng.TestNGExecutor.run TestNGExecutor.java:293 [ERROR] at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute TestNGXmlTestSuite.java:84 [ERROR] at org.apache.maven.surefire.testng.TestNGProvider.invoke TestNGProvider.java:91 [ERROR] at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader ForkedBooter.java:200 [ERROR] at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess ForkedBooter.java:153 [ERROR] at org.apache.maven.surefire.booter.ForkedBooter.main ForkedBooter.java:103 [ERROR] -&amp;gt; [Help 1] This was tested against our sources, commit 3ede638f268a481123144e607b95c51b6cc13828 on branch master. Technical it is still the same bug as bug 421307 . However, there is no way to circumvent it, as -XX:-UseSplitVerifier has been removed from the VM.</description>
    <commit commitTime="2014-04-14 15:01:56" id="5aaca752afa424015f81379dcd0a69e737340e56"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/asm/StackMapAdder.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc180/Ajc180Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="432874" reportTime="2014-04-15 23:50:00">
    <summary>StringIndexOutOfBoundsException after adding project to inpath</summary>
    <description>when I add my project to Preference-&amp;gt;AspectJ Build-&amp;gt;Inpath, it report an exception error. ADJT version:2.2.3 Eclipse version:4.3.1 aspectJ-1.8.0.M1.jar aspectjweaver-1.8.0.M1.jar I have added both jar file above to referenced libraries and Android private Libraries Error log see below. java.lang.StringIndexOutOfBoundsException at java.lang.String.substring String.java:1911 at org.aspectj.weaver.bcel.BcelObjectType.getOuterClass BcelObjectType.java:899 at org.aspectj.weaver.AbstractReferenceTypeDelegate.getFormalTypeParametersFromOuterClass AbstractReferenceTypeDelegate.java:108 at org.aspectj.weaver.bcel.BcelObjectType.ensureGenericSignatureUnpacked BcelObjectType.java:767 at org.aspectj.weaver.bcel.BcelObjectType.getS ... 43 at org.eclipse.core.internal.jobs.Worker.run Worker.java:53 Compile error: StringIndexOutOfBoundsException thrown: String index out of range: -1</description>
    <commit commitTime="2015-09-02 09:05:35" id="415ef622d9435806ef0736341402772487deed23"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
    </fixedFiles>
  </bug>
  <bug id="433351" reportTime="2014-04-23 22:43:00">
    <summary>Declare parents fails on interfaces on the inpath depending on directory structure</summary>
    <description>A declare parents ITD that extends one interface with another interface is not applied if: - the new parent interface is supplied on the inpath - the jar or classes folder specified on the inpath has the package root at the root of the jar or classes folder See the attached test case. To run the test case: - edit the three build*.sh scripts and set AJHOME and PROJHOME appropriately - make sure you have the right java on the path, or edit the build scripts to invoke the right java - run test.sh - inspect the results* files Then: proj1/jar/proj1.jar is a jar with a non-package internal structure. proj1/jar/proj1v2.jar is a jar with an internal structure that follows the package structure. With AspectJ 1.7, supplying proj1.jar on the inpath results in sucessful weaving of the interface ITD specified in proj2/src/test/extender/Extender.aj, but supplying proj1v2.jar results in no weaving. With either jar the class ITD is successful. AspectJ 1.6.10 works for both class and interface ITDs with either input jar. For example, in result_1.7_fromjar we see: Extending interface set for type 'test.InterfaceProj1' InterfaceProj1.java to include 'test.extender.InterfaceProj2' Extender.aj for the first compilation run lines 1-31 , but this message is missing for the second compilation run lines 32-end</description>
    <commit commitTime="2014-06-19 09:24:38" id="3c2b8b77881c721b5c274db939a30bcb3130a401"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc181/Ajc181Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="435446" reportTime="2014-05-21 16:26:00">
    <summary>ClassFormatError when targetting nested forEach lambda expressions</summary>
    <description>Created attachment 243368 [details] Sample source code I tried to help somebody on http://stackoverflow.com/questions/23787068/aspect-breaking-bytecode-on-specific-class . I was able to reduce his sample code to something simple. Obviously there are problems with Java 8 when using nested 'forEach' loops with lambda expressions. Here is my sample application: package de.scrum_master.app; import java.util.HashMap; import java.util.Map; public class Application { public static void main String[] args { Map&amp;lt;String, Map&amp;lt;Integer, String&amp;gt;&amp;gt; languages = new HashMap&amp;lt;&amp;gt; ; Map&amp;lt;Integer, String&amp;gt; englishNumbers = new HashMap&amp;lt;&amp;gt; ; englishNumbers.put 11, "eleven" ; englishNumbers.put 12, "twelve" ; englishNumbers.put 13, "thirteen" ; languages.put "EN", englishNumbers ; Map&amp;lt;Integer, String&amp;gt; germanNumbers = new HashMap&amp;lt;&amp;gt; ; germanNumbers.put 11, "elf" ; germanNumbers.put 12, "zwölf" ; germanNumbers.put 13, "dreizehn" ; languages.put "DE", germanNumbers ; languages.entrySet .stream .forEach language -&amp;gt; { String languageCode = language.getKey ; Map&amp;lt;Integer, String&amp;gt; numbers = language.getValue ; System.out.println "Language code = " + languageCode ; // numbers.entrySet .stream .forEach number -&amp;gt; { // int numericValue = number.getKey ; // String textualValue = number.getValue ; // System.out.println " " + numericValue + " -&amp;gt; " + textualValue ; // } ; } ; } } And here is a simple aspect: package de.scrum_master.aspect; import de.scrum_master.app.Application; public aspect MyAspect { before : execution * Application.* .. { System.out.println thisJoinPointStaticPart ; } } This works as expected, the output is: execution void de.scrum_master.app.Application.main String[] execution void de.scrum_master.app.Application.lambda$0 Map.Entry Language code = DE execution void de.scrum_master.app.Application.lambda$0 Map.Entry Language code = EN But now uncomment the inner 'forEach' loop, i.e. this part: numbers.entrySet .stream .forEach number -&amp;gt; { int numericValue = number.getKey ; String textualValue = number.getValue ; System.out.println " " + numericValue + " -&amp;gt; " + textualValue ; } ; This yields the following exception when starting the driver application: Exception in thread "main" java.lang.ClassFormatError: Invalid length 65517 in LocalVariableTable in class file de/scrum_master/app/Application at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:760 at java.security.SecureClassLoader.defineClass SecureClassLoader.java:142 at java.net.URLClassLoader.defineClass URLClassLoader.java:455 at java.net.URLClassLoader.access$100 URLClassLoader.java:73 at java.net.URLClassLoader$1.run URLClassLoader.java:367 at java.net.URLClassLoader$1.run URLClassLoader.java:361 at java.security.AccessController.doPrivileged Native Method at java.net.URLClassLoader.findClass URLClassLoader.java:360 at java.lang.ClassLoader.loadClass ClassLoader.java:424 at sun.misc.Launcher$AppClassLoader.loadClass Launcher.java:308 at java.lang.ClassLoader.loadClass ClassLoader.java:357 at sun.launcher.LauncherHelper.checkAndLoadMain LauncherHelper.java:495 A dirty workaround is to exclude the lambda methods in the pointcut like this: before : execution * Application.* .. &amp;amp;&amp;amp; !execution * *.lambda$* .. { System.out.println thisJoinPointStaticPart ; } Now it works again and the output is: execution void de.scrum_master.app.Application.main String[] Language code = DE 11 -&amp;gt; elf 12 -&amp;gt; zwölf 13 -&amp;gt; dreizehn Language code = EN 11 -&amp;gt; eleven 12 -&amp;gt; twelve 13 -&amp;gt; thirteen</description>
    <commit commitTime="2014-05-23 13:25:57" id="6e5c19b7529d637084564d155d1515f6c4058e05"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/ConstantsInitializer.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc181/Ajc181Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="436531" reportTime="2014-06-03 23:38:00">
    <summary>NPE MethodParameters.dump</summary>
    <description>java.lang.NullPointerException at org.aspectj.apache.bcel.classfile.MethodParameters.dump MethodParameters.java:65 at org.aspectj.apache.bcel.classfile.AttributeUtils.writeAttributes AttributeUtils.java:34 at org.aspectj.apache.bcel.classfile.FieldOrMethod.dump FieldOrMethod.java:119 at org.aspectj.apache.bcel.classfile.JavaClass.dump JavaClass.java:274 at org.aspectj.apache.bcel.classfile.JavaClass.getBytes JavaClass.java:227 at org.aspectj.weaver.bcel.LazyClassGen.getJavaClassBytesIncludingReweavable LazyClassGen.java:697 at org.aspectj.weaver.bcel.BcelWeaver.getClassFilesFor BcelWeaver.java:1440 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1402 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1184 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:527 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:363 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:121 at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform ClassPreProcessorAgentAdapter.java:54 at sun.instrument.TransformerManager.transform TransformerManager.java:188 at sun.instrument.InstrumentationImpl.transform InstrumentationImpl.java:428 at java.lang.ClassLoader.defineClass1 Native Method</description>
    <commit commitTime="2014-06-17 15:05:43" id="c4f9f951c35f7b7645696ffded594e2dded07476"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/MethodParameters.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc181/Ajc181Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="440983" reportTime="2014-08-01 09:20:00">
    <summary>Attribute RuntimeInvisibleTypeAnnotations is not supported</summary>
    <description>BCEL version used by org.aspectj.weaver 1.8.1 I cannot select it in Version list, available here: http://www.eclipse.org/downloads/download.php?file=/tools/aspectj/aspectj-1.8.1.jar During parsing of classes compiled using JDT compiler, following exception is thrown: java.lang.IllegalStateException: null at org.aspectj.apache.bcel.classfile.Attribute.readAttribute Attribute.java:168 ~[na:na] at org.aspectj.apache.bcel.classfile.AttributeUtils.readAttributes AttributeUtils.java:19 ~[na:na] at org.aspectj.apache.bcel.classfile.FieldOrMethod.&amp;lt;init&amp;gt; FieldOrMethod.java:97 ~[na:na] at org.aspectj.apache.bcel.classfile.Method.&amp;lt;init&amp;gt; Method.java:97 ~[na:na] at org.aspectj.apache.bcel.classfile.ClassParser.readMethods ClassParser.java:240 ~[na:na] at org.aspectj.apache.bcel.classfile.ClassParser.parse ClassParser.java:144 ~[na:na] at org.aspectj.apache.bcel.util.ClassLoaderRepository.loadClass ClassLoaderRepository.java:323 ~[na:na] at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass BcelWorld.java:418 ~[na:na] at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate BcelWorld.java:392 ~[na:na] at org.aspectj.weaver.ltw.LTWWorld.resolveDelegate LTWWorld.java:107 ~[na:na] at org.aspectj.weaver.World.resolveToReferenceType World.java:477 ~[na:na] at org.aspectj.weaver.World.resolve World.java:318 ~[na:na] at org.aspectj.weaver.World.resolve World.java:228 ~[na:na] at org.aspectj.weaver.UnresolvedType.resolve UnresolvedType.java:615 ~[na:na] at org.aspectj.weaver.bcel.BcelGenericSignatureToTypeXConverter.classTypeSignature2TypeX BcelGenericSignatureToTypeXConverter.java:72 ~[na:na] at org.aspectj.weaver.bcel.BcelGenericSignatureToTypeXConverter.classTypeSignature2TypeX BcelGenericSignatureToTypeXConverter.java:41 ~[na:na] at org.aspectj.weaver.bcel.BcelObjectType.ensureGenericSignatureUnpacked BcelObjectType.java:787 ~[na:na] at org.aspectj.weaver.bcel.BcelObjectType.getDeclaredInterfaces BcelObjectType.java:257 ~[na:na] at org.aspectj.weaver.ReferenceType.getDeclaredInterfaces ReferenceType.java:703 ~[na:na] at org.aspectj.weaver.ResolvedType.getDirectSupertypes ResolvedType.java:82 ~[na:na] at org.aspectj.weaver.ResolvedType.collectInterTypeMungers ResolvedType.java:1393 ~[na:na] at org.aspectj.weaver.ResolvedType.collectInterTypeMungers ResolvedType.java:1398 ~[na:na] at org.aspectj.weaver.ResolvedType.getInterTypeMungersIncludingSupers ResolvedType.java:1374 ~[na:na] at org.aspectj.weaver.ResolvedType.checkInterTypeMungers ResolvedType.java:1445 ~[na:na] at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1669 ~[na:na] at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1633 ~[na:na] at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1398 ~[na:na] at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1184 ~[na:na] at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:527 ~[na:na] at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:363 ~[na:na] What I investigated, the used version of BCEL doesn't support value 21 in switch within: org.aspectj.apache.bcel.classfile.Attribute.readAttribute method.</description>
    <commit commitTime="2014-08-06 08:20:07" id="b09622f37d7c6d10eb3331097e2c09d670db61fa"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/annotation/RuntimeInvisTypeAnnos.java</file>
      <file>tests/src/org/aspectj/systemtest/AllTests18.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/annotation/RuntimeVisTypeAnnos.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/Attribute.java</file>
    </fixedFiles>
  </bug>
  <bug id="442425" reportTime="2014-08-23 06:13:00">
    <summary>ajc exits with dump file + IllegalStateException upon @DeclareParents for generic interface</summary>
    <description>Created attachment 246276 [details] Maven project incl. source code I was trying to help someone on StackOverflow who wants to declare a *generic* interface as a parent for classes with a certain annotation, also providing a default implementation. This is the working solution I found for him: --------------------------------------------------------- package de.scrum_master.app; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Retention RetentionPolicy.RUNTIME @Target ElementType.TYPE public @interface EntityController {} --------------------------------------------------------- package de.scrum_master.app; public interface IEntityController&amp;lt;T&amp;gt; { void setEntity T entity ; T getEntity ; static aspect EntityControllerAspect { private T IEntityController.entity; public void IEntityController.setEntity T entity { this.entity = entity; } public T IEntityController.getEntity { return entity; } declare parents : @EntityController * implements IEntityController; } } --------------------------------------------------------- package de.scrum_master.app; import java.lang.reflect.Method; @EntityController public class MyAnnotatedController&amp;lt;T&amp;gt; { public void doSomething { System.out.println "Doing something" ; } public static void main String[] args { // Use class type directly so as to call its method MyAnnotatedController&amp;lt;String&amp;gt; annotatedTextController = new MyAnnotatedController&amp;lt;&amp;gt; ; annotatedTextController.doSomething ; // Print all declared methods should also show interface methods introduced via ITD for Method method : annotatedTextController.getClass .getDeclaredMethods { if !method.getName .startsWith "ajc$" System.out.println method ; } // Prove that class type is compatible with interface type IEntityController&amp;lt;String&amp;gt; entityTextController = annotatedTextController; entityTextController.setEntity "foo" ; // Would not work here because generic interface type is type-safe: // entityNumberController.setEntity 123 ; System.out.println "Entity value = " + entityTextController.getEntity ; // Create another object and directly assign it to interface type IEntityController&amp;lt;Integer&amp;gt; entityNumberController = new MyAnnotatedController&amp;lt;&amp;gt; ; entityNumberController.setEntity 123 ; // Would not work here because generic interface type is type-safe: // entityNumberController.setEntity "foo" ; System.out.println "Entity value = " + entityNumberController.getEntity ; } } --------------------------------------------------------- Console output when running the MyAnnotatedController.main: Doing something public static void de.scrum_master.app.MyAnnotatedController.main java.lang.String[] public java.lang.Object de.scrum_master.app.MyAnnotatedController.getEntity public void de.scrum_master.app.MyAnnotatedController.doSomething public void de.scrum_master.app.MyAnnotatedController.setEntity java.lang.Object Entity value = foo Entity value = 123 --------------------------------------------------------- So far, so good. Now, comment out or remove the embedded static aspect from the interface and add an @AspectJ style aspect plus a stand-alone interface default implementation instead: package de.scrum_master.app; public interface IEntityController&amp;lt;T&amp;gt; { void setEntity T entity ; T getEntity ; } --------------------------------------------------------- package de.scrum_master.app; public class EntityMongoController&amp;lt;T&amp;gt; implements IEntityController&amp;lt;T&amp;gt; { private T entity; public void setEntity T entity { this.entity = entity; } public T getEntity { return entity; } } --------------------------------------------------------- package de.scrum_master.app; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.DeclareParents; @Aspect public class EntityControllerAspect { @DeclareParents value = "@EntityController *", defaultImpl = EntityMongoController.class private IEntityController iEntityController; } --------------------------------------------------------- If you compile this, ajc will throw an exception and exit: ---- AspectJ Properties --- AspectJ Compiler 1.8.2 built on Thursday Aug 14, 2014 at 21:45:02 GMT ---- Dump Properties --- Dump file: ajcore.20140823.112821.661.txt Dump reason: java.lang.IllegalStateException Dump on exception: true Dump at exit condition: abort ---- Exception Information --- java.lang.IllegalStateException: Use generic type, not raw type at org.aspectj.weaver.ResolvedTypeMunger.&amp;lt;init&amp;gt; ResolvedTypeMunger.java:69 at org.aspectj.weaver.MethodDelegateTypeMunger.&amp;lt;init&amp;gt; MethodDelegateTypeMunger.java:61 at org.aspectj.weaver.bcel.AtAjAttributes.handleDeclareParentsAnnotation AtAjAttributes.java:852 at org.aspectj.weaver.bcel.AtAjAttributes.readAj5ClassAttributes AtAjAttributes.java:383 at org.aspectj.weaver.bcel.BcelObjectType.ensureAspectJAttributesUnpacked BcelObjectType.java:395 at org.aspectj.weaver.bcel.BcelObjectType.&amp;lt;init&amp;gt; BcelObjectType.java:162 at org.aspectj.weaver.bcel.BcelWorld.buildBcelDelegate BcelWorld.java:410 at org.aspectj.weaver.bcel.BcelWorld.addSourceObjectType BcelWorld.java:494 at org.aspectj.weaver.bcel.BcelWorld.addSourceObjectType BcelWorld.java:456 at org.aspectj.weaver.bcel.BcelWeaver.addClassFile BcelWeaver.java:453 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:506 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving AjPipeliningCompilerAdapter.java:447 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:432 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:103 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:822 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:480 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:420 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1036 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:272 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:185 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:371 at org.aspectj.tools.ajc.Main.runMain Main.java:248 ... --------------------------------------------------------- Am I making a mistake or is there a bug in the compiler? I am attaching an ajcore.txt as well as a Maven project with both the failing and the working case. Run "mvn compile" to reproduce the problem. Alternatively, just comment out the @DeclareParents statement in the stand-alone aspect and comment in the embedded aspect in IEntityController to get it working with native AspectJ style.</description>
    <commit commitTime="2014-08-27 13:25:21" id="d929114a6659d64d71c47f7bf8f70e9973e5c857"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</file>
    </fixedFiles>
  </bug>
  <bug id="443355" reportTime="2014-09-04 18:37:00">
    <summary>methods using Type.super.XX failing to compile</summary>
    <description>interface Foo { static Foo getMeAFoo { return new FooImpl ; } // void printMessage ; default void printMessage { System.out.println "Message from Foo!" ; } } //interface Bar { // default void printMessage { // System.out.println "Message from Bar!" ; // } //} class FooImpl implements Foo { @Override public void printMessage { Bar.super.printMessage ; } } public class Demo { public static void main String[] args { Foo f = Foo.getMeAFoo ; f.printMessage ; } } aspect X { before : execution * Foo.* .. { System.out.println thisJoinPoint ; } }</description>
    <commit commitTime="2014-10-08 13:23:50" id="dddd1236cd21982a07f887ff7fa5d484ebc3b86c"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc183/Ajc183Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="443477" reportTime="2014-09-08 02:54:00">
    <summary>AspectJ Compiler produces ByteCode which is considered invalid by JDK 1.7.0_67 "java.lang.VerifyError: Bad &lt;init&gt; method call from after the start of a try block"</summary>
    <description>Created attachment 246808 [details] Sample eclipse project to reproduce the problem, needs AspectJ 1.7.4 and Junit I encountered a strange problem with one of my existing aspects after updating to the latest Java 7 version jdk 1.7.0_67 . With this JDK, I receive a "java.lang.VerifyError: Bad &amp;lt;init&amp;gt; method call from after the start of a try block" when one of my instrumented classes is used. The verification Error is produced by the following change in the JDK http://hg.openjdk.java.net/jdk7u/jdk7u/hotspot/rev/458f18560343 . I created a small sample project which reproduces the problem and attached it to this issue. My production scenario is: Modify the result of a call to a particular object if the call originates from an untrusted package. Therefor, I created the following Aspect: public aspect Experiment { pointcut insideTrustedPackage : within com.icw.ehf.aspectj.lab.service..* ; Object around com.icw.ehf.aspectj.lab.pojo.SomePojo input : !cflow insideTrustedPackage &amp;amp;&amp;amp; this input { System.out.println "from untrusted package " + thisJoinPoint.toString ; return proceed input ; } } If I use JDK version 1.7.0_55, everything works as expected. However, when using JDK 1.7.0_67, running the unit test in my example project results in the following VerifyError java.lang.VerifyError: Bad &amp;lt;init&amp;gt; method call from after the start of a try block Exception Details: Location: com/icw/ehf/aspectj/lab/service/SomeService.&amp;lt;init&amp;gt; V @30: invokespecial Reason: Error exists in the bytecode Bytecode: 0000000: 2ab2 002b b600 3000 a700 0e3a 0ab2 002b 0000010: b600 3319 0abf 00b2 002b b600 3300 b700 0000020: 09b2 002b b600 30b2 002b b600 30b2 002b 0000030: b600 30b2 000b a700 0c4d b200 2bb6 0033 0000040: 2cbf 00b2 002b b600 3300 1211 b200 2bb6 0000050: 0030 b600 13a7 000e 3a04 b200 2bb6 0033 0000060: 1904 bf00 b200 2bb6 0033 00a7 000e 3a06 0000070: b200 2bb6 0033 1906 bfb2 002b b600 33a7 0000080: 000e 3a08 b200 2bb6 0033 1908 bfb2 002b 0000090: b600 33b1 Exception Handler Table: bci [82, 85] =&amp;gt; handler: 88 bci [51, 54] =&amp;gt; handler: 57 bci [45, 110] =&amp;gt; handler: 110 bci [39, 130] =&amp;gt; handler: 130 bci [7, 8] =&amp;gt; handler: 11 Stackmap Table: same_locals_1_stack_item_frame @11,Object[#57] same_locals_1_stack_item_frame @22,UninitializedThis full_frame @57,{Object[#1]},{Object[#57]} same_locals_1_stack_item_frame @66,Object[#20] same_locals_1_stack_item_frame @88,Object[#57] same_frame @99 same_locals_1_stack_item_frame @110,Object[#57] same_frame @121 same_locals_1_stack_item_frame @130,Object[#57] same_frame @141 at com.icw.ehf.aspectj.lab.ExperimentAspectTest.test ExperimentAspectTest.java:13 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:57 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:43 at java.lang.reflect.Method.invoke Method.java:606 at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall FrameworkMethod.java:47 at org.junit.internal.runners.model.ReflectiveCallable.run ReflectiveCallable.java:12 at org.junit.runners.model.FrameworkMethod.invokeExplosively FrameworkMethod.java:44 at org.junit.internal.runners.statements.InvokeMethod.evaluate InvokeMethod.java:17 at org.junit.runners.ParentRunner.runLeaf ParentRunner.java:271 at org.junit.runners.BlockJUnit4ClassRunner.runChild BlockJUnit4ClassRunner.java:70 at org.junit.runners.BlockJUnit4ClassRunner.runChild BlockJUnit4ClassRunner.java:50 at org.junit.runners.ParentRunner$3.run ParentRunner.java:238 at org.junit.runners.ParentRunner$1.schedule ParentRunner.java:63 at org.junit.runners.ParentRunner.runChildren ParentRunner.java:236 at org.junit.runners.ParentRunner.access$000 ParentRunner.java:53 at org.junit.runners.ParentRunner$2.evaluate ParentRunner.java:229 at org.junit.runners.ParentRunner.run ParentRunner.java:309 at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run JUnit4TestReference.java:50 at org.eclipse.jdt.internal.junit.runner.TestExecution.run TestExecution.java:38 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests RemoteTestRunner.java:467 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests RemoteTestRunner.java:683 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run RemoteTestRunner.java:390 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main RemoteTestRunner.java:197 I disassembled the bytecode of the SomeService.class which I added to the very end of this description. In this mnemonic representation of the bytecocde, I can see, that the actual .&amp;lt;init&amp;gt; Method call is not the first Java statement in the constructor, which the comment in the JDK checkin indicates is no longer considered valid. Unfortunately, I haven't found any useful information regarding this problem in the archives. Disassembled ByteCode: $ javap -c -s bin/com/icw/ehf/aspectj/lab/service/SomeService.class Compiled from "SomeService.java" public class com.icw.ehf.aspectj.lab.service.SomeService { public com.icw.ehf.aspectj.lab.service.SomeService ; Signature: V Code: 0: aload_0 1: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 4: invokevirtual #48 // Method org/aspectj/runtime/internal/CFlowCounter.inc: V 7: nop 8: goto 22 11: astore 10 13: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 16: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 19: aload 10 21: athrow 22: nop 23: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 26: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 29: nop 30: invokespecial #9 // Method java/lang/Object."&amp;lt;init&amp;gt;": V 33: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 36: invokevirtual #48 // Method org/aspectj/runtime/internal/CFlowCounter.inc: V 39: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 42: invokevirtual #48 // Method org/aspectj/runtime/internal/CFlowCounter.inc: V 45: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 48: invokevirtual #48 // Method org/aspectj/runtime/internal/CFlowCounter.inc: V 51: getstatic #11 // Field java/lang/System.out:Ljava/io/PrintStream; 54: goto 66 57: astore_2 58: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 61: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 64: aload_2 65: athrow 66: nop 67: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 70: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 73: nop 74: ldc #17 // String Constructor SomeService 76: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 79: invokevirtual #48 // Method org/aspectj/runtime/internal/CFlowCounter.inc: V 82: invokevirtual #19 // Method java/io/PrintStream.println: Ljava/lang/String; V 85: goto 99 88: astore 4 90: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 93: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 96: aload 4 98: athrow 99: nop 100: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 103: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 106: nop 107: goto 121 110: astore 6 112: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 115: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 118: aload 6 120: athrow 121: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 124: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 127: goto 141 130: astore 8 132: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 135: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 138: aload 8 140: athrow 141: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 144: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 147: return Exception table: from to target type 82 85 88 Class java/lang/Throwable 51 54 57 Class java/lang/Throwable 45 110 110 Class java/lang/Throwable 39 130 130 Class java/lang/Throwable 7 8 11 Class java/lang/Throwable public com.icw.ehf.aspectj.lab.pojo.SomePojo retreiveSomePojo ; Signature: Lcom/icw/ehf/aspectj/lab/pojo/SomePojo; Code: 0: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 3: invokevirtual #48 // Method org/aspectj/runtime/internal/CFlowCounter.inc: V 6: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 9: invokevirtual #48 // Method org/aspectj/runtime/internal/CFlowCounter.inc: V 12: getstatic #11 // Field java/lang/System.out:Ljava/io/PrintStream; 15: goto 27 18: astore_2 19: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 22: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 25: aload_2 26: athrow 27: nop 28: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 31: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 34: nop 35: ldc #31 // String SomeService#retreiveSomePojo 37: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 40: invokevirtual #48 // Method org/aspectj/runtime/internal/CFlowCounter.inc: V 43: invokevirtual #19 // Method java/io/PrintStream.println: Ljava/lang/String; V 46: goto 60 49: astore 4 51: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 54: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 57: aload 4 59: athrow 60: nop 61: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 64: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 67: nop 68: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 71: invokevirtual #48 // Method org/aspectj/runtime/internal/CFlowCounter.inc: V 74: new #33 // class com/icw/ehf/aspectj/lab/pojo/SomePojo 77: dup 78: invokespecial #35 // Method com/icw/ehf/aspectj/lab/pojo/SomePojo."&amp;lt;init&amp;gt;": V 81: goto 95 84: astore 6 86: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 89: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 92: aload 6 94: athrow 95: nop 96: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 99: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 102: nop 103: astore 9 105: goto 119 108: astore 8 110: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 113: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 116: aload 8 118: athrow 119: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 122: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 125: aload 9 127: areturn Exception table: from to target type 74 81 84 Class java/lang/Throwable 43 46 49 Class java/lang/Throwable 12 15 18 Class java/lang/Throwable 6 108 108 Class java/lang/Throwable static {}; Signature: V Code: 0: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 3: invokevirtual #48 // Method org/aspectj/runtime/internal/CFlowCounter.inc: V 6: goto 31 9: astore_1 10: aload_1 11: instanceof #53 // class java/lang/ExceptionInInitializerError 14: ifeq 22 17: aload_1 18: checkcast #53 // class java/lang/ExceptionInInitializerError 21: athrow 22: nop 23: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 26: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 29: aload_1 30: athrow 31: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 34: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 37: return Exception table: from to target type 6 9 9 Class java/lang/Throwable }</description>
    <commit commitTime="2014-10-07 15:07:00" id="34cff6034e44295417149fdb85dd2cebac8c983f"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>tests/bugs183/443477/Coo.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc183/Ajc183Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="444398" reportTime="2014-09-17 13:43:00">
    <summary>Abstract aspect hierarchy and annotation style leads to NPE</summary>
    <description>import org.aspectj.lang.annotation.*; @Aspect public abstract class Bottom extends Middle { } import org.aspectj.lang.annotation.*; @Aspect public abstract class Middle extends Top { } public abstract class Top { } gives: java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.getPerClauseForTypeDeclaration EclipseSourceType.java:1034</description>
    <commit commitTime="2014-09-17 10:53:29" id="d0b8c7a1bfbc2b2f92b22bcf63598ab2442781b6"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java</file>
      <file>tests/src/org/aspectj/systemtest/AllTests18.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc183/Ajc183Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="445395" reportTime="2014-09-29 14:54:00">
    <summary>ClassCastException: ConstantUtf8 cannot be cast to ConstantInvokeDynamic</summary>
    <description>Created attachment 247455 [details] A Maven project showing the ClassCastException when running tests. Hi, When compiling a simple project [1] using aspectj-maven-plugin, I get the error below. It only happens when the pointcut gets applied. If I make the pointcut intercept nothing [2], it compiles successfully. [ERROR] Failed to execute goal org.codehaus.mojo:aspectj-maven-plugin:1.7:compile default on project lambda-control-flow-poc: AJC compiler errors: [ERROR] error at no source information available [ERROR] /home/chous/github/LambdaControlFlowPoC/src/main/java/org/acmsl/pocs/lambdafor/ControlFlowDriver.java:0::0 Internal compiler error: java.lang.ClassCastException: org.aspectj.apache.bcel.classfile.ConstantUtf8 cannot be cast to org.aspectj.apache.bcel.classfile.ConstantInvokeDynamic at org.aspectj.apache.bcel.generic.InvokeDynamic.getSignature InvokeDynamic.java:108 [ERROR] abort ABORT -- ClassCastException org.aspectj.apache.bcel.classfile.ConstantUtf8 cannot be cast to org.aspectj.apache.bcel.classfile.ConstantInvokeDynamic [ERROR] org.aspectj.apache.bcel.classfile.ConstantUtf8 cannot be cast to org.aspectj.apache.bcel.classfile.ConstantInvokeDynamic [ERROR] java.lang.ClassCastException: org.aspectj.apache.bcel.classfile.ConstantUtf8 cannot be cast to org.aspectj.apache.bcel.classfile.ConstantInvokeDynamic [ERROR] at org.aspectj.apache.bcel.generic.InvokeDynamic.getSignature InvokeDynamic.java:108 [ERROR] at org.aspectj.apache.bcel.generic.InvokeDynamic.getReturnType InvokeDynamic.java:99 [ERROR] at org.aspectj.apache.bcel.generic.InvokeInstruction.produceStack InvokeInstruction.java:107 [ERROR] at org.aspectj.apache.bcel.generic.MethodGen.getMaxStack MethodGen.java:988 [ERROR] at org.aspectj.apache.bcel.generic.MethodGen.setMaxStack MethodGen.java:876 [ERROR] at org.aspectj.weaver.bcel.LazyMethodGen.pack LazyMethodGen.java:1019 The context is: - Project uses lambda expressions. - Java 1.8.11 on gentoo linux 64b. - aspectjrt, aspectjtools 1.8.2 - aspectj-maven-plugin 1.7 [1] https://github.com/rydnr/LambdaControlFlowPoC [2] https://github.com/rydnr/LambdaControlFlowPoC/blob/master/src/main/aspect/org/acmsl/pocs/lambdafor/ForReplacer.aj I'm attaching the Maven project with a hopefully resolvable pom should it helps to figure out the issue. Just run mvn test. I've downloaded aspectj 1.8.2 sources, and when debugging, the invalid cast is produced by extracting "org/acmsl/pocs/lambdafor/ControlFlowCommand" String from the constant pool at index 62. I've no idea what could be causing this. I've tried adding some defensive programming hacks but it causes one NPE in the caller for each guarding condition. I think InvokeDynamic class is not prepared yet to handle ConstantUtf8 instances, but I'm far from solving this by myself. Thank you very much in advance. Jose.</description>
    <commit commitTime="2014-09-30 10:50:54" id="e26c781374ac7afeaf8859baf4fc55d7dfb7b3a7"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/ConstantsInitializer.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/BootstrapMethods.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/InstructionList.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/ConstantPool.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/ExceptionConstants.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/ConstantInvokeDynamic.java</file>
    </fixedFiles>
  </bug>
  <bug id="445968" reportTime="2014-10-05 08:51:00">
    <summary>AbstractIndexedFileCacheBacking#createIndexEntry creates wrong index entry for ignored entries</summary>
    <description>The code states: if !classEntry.isIgnored { indexEntry.crcClass = crc originalBytes ; indexEntry.crcWeaved = crc classEntry.getBytes ; } In other words, if the entry is ignored then the 'crcClass' value is ZERO. However, in AsynchronousFileCacheBacking#get CachedClassReference ref, byte[] originalBytes method, the following code is run: if crc originalBytes != indexEntry.crcClass { remove key ; return null; } if indexEntry.ignored { return new CachedClassEntry ref, WeavedClassCache.ZERO_BYTES, CachedClassEntry.EntryType.IGNORED ; } But for ignored entries, the crc originalBytes is ALWAYS not equal to the 'crcClass' value which is ZERO . This means that the whole issue of caching simply does not work for the ignored entries. The fix is simple: in bstractIndexedFileCacheBacking#createIndexEntry the code should ALWAYS calculate the 'crcClass' value on the original bytes, and add the 'crcWeaved' one only for non-ignored ones.</description>
    <commit commitTime="2014-10-07 16:53:15" id="170b1cef3f6f2c4792eb4c07c76ab19bee9daca7"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/tools/cache/AbstractIndexedFileCacheBacking.java</file>
    </fixedFiles>
  </bug>
  <bug id="449401" reportTime="2014-10-30 17:19:00">
    <summary>thisAspectInstance compile problem with -1.8</summary>
    <description>Similar to other 'well known' local variables like thisJoinPoint, the eclipse 1.8 compiler is complaining that thisAspectInstance is not initialized when it is a variable that we AspectJ look after. The fix is the same as for thisJoinPoint et al - just special case this well known variable. This did not surface in earlier testing because all the thisAspectInstance tests in the 1.6.12 testsuite compile with -1.5 - it is only when compiling with -1.8 that the extra checking is done. I'm copying the 1.6.12 tests into the 1.8.4 suite and having them specify -1.8.</description>
    <commit commitTime="2014-10-30 14:33:12" id="e91fcabde7a38787ac03b5f98c6588aa8b3e411c"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
      <file>tests/src/org/aspectj/systemtest/AllTests18.java</file>
    </fixedFiles>
  </bug>
  <bug id="449739" reportTime="2014-11-03 07:09:00">
    <summary>Improve is pointcut to support class modifiers like 'final'</summary>
    <description>The original intent of https://bugs.eclipse.org/bugs/show_bug.cgi?id=44365 was to support matching class modifiers like final, protected etc. This was not achived by the is pointcut. One prominent use case for my suggestion would be Spring AOP users wishing to exclude final types from weaving because Spring uses dynamic CGLIB proxies which cannot extend final types. It would be nice if I could write something like: execution public * * .. &amp;amp;&amp;amp; !within is EnumType &amp;amp;&amp;amp; !within is FinalType Would it be hard to add support for class modifiers that way? I think it would come in handy sometimes. I am not going as far as wanting support for my favourite variant of direct modifier support is AspectJ pointcut syntax, e.g.: execution public * !final * .* .. or !within final * That would be even better, but I am trying not to be too greedy. ;-</description>
    <commit commitTime="2014-11-05 08:27:45" id="11fba64f400694713cc6571c97e194eaf3b99f40"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc184/Ajc184Tests.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/TypeCategoryTypePattern.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/PatternParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="450634" reportTime="2014-11-08 07:01:00">
    <summary>Improve ajc.bat to pass &gt;9 arguments</summary>
    <description>This bugs seems to be related to https://bugs.eclipse.org/bugs/show_bug.cgi?id=341788 and re-occurs on my Win 8.1 machine. The fix is the same as mentioned in the other ticket: In the last batch file line which contains ... org.aspectj.tools.ajc.Main %1 %2 %3 %4 %5 %6 %7 %8 %9 just replace "%1 %2 %3 %4 %5 %6 %7 %8 %9" by "%*".</description>
    <commit commitTime="2015-01-08 08:28:35" id="8db5893d03d4bdcdf7bcfe7409cd3b1b66dc406e"/>
    <fixedFiles>
      <file>build/src/$installer$/org/aspectj/Main.java</file>
    </fixedFiles>
  </bug>
  <bug id="456003" reportTime="2014-12-22 16:19:00">
    <summary>BUG - Use of Wrong Operator in String Comparison - WildAnnotationTypePattern.java</summary>
    <description>We are currently using aspectjweaver-1.6.9.jar and during veracode analysis, this scanner found this bug in WildAnnotationTypePattern.java line 110,119,137,146,155 y 164 : Type: Use of Wrong Operator in String Comparison Description: Using '==' to compare two strings for equality or '!=' for inequality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic. Recommendations Use the equals method to compare strings, not the '==' or '!=' operator.</description>
    <commit commitTime="2015-01-07 16:35:49" id="b45ec3291d0f7380e747c59c30262fb5b68d1743"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java</file>
    </fixedFiles>
  </bug>
  <bug id="456374" reportTime="2014-12-30 15:10:00">
    <summary>BUG - Use of Wrong Operator in String Comparison - LazyClassGen.java</summary>
    <description>We are currently using aspectjweaver-1.6.9.jar and during veracode analysis, this scanner found this bug in LazyClassGen.java Line 767 in the version 1.6.8, 1.6.9 and 1.8.4 Line 793 : Type: Use of Wrong Operator in String Comparison Description: Using '==' to compare two strings for equality or '!=' for inequality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic. Recommendations Use the equals method to compare strings, not the '==' or '!=' operator. is this a false positive? Thanks.</description>
    <commit commitTime="2015-01-07 16:49:21" id="fa8938845f03855f59fff155b1e0d118e85ead7f"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="456457" reportTime="2014-12-31 17:40:00">
    <summary>Data set parameter default value missing after saving invalid query</summary>
    <description>Step to reproduce: 1. Create a dataset, set a parameter and give it a default value 2. Preview the dataset 3. modify the query to create an error 4. save the data set 5. reopen the data set to correct the error, save the data set Upon saving the data set, a notice about input parameter has empty value will show and ask if the user wants to leave it empty. The previously set default value has missing upon this point.</description>
    <commit commitTime="2015-01-07 16:22:57" id="7569aad932296bce469e719e67a67a8d1bc8bc8b"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc185/Ajc185Tests.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/MemberImpl.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
      <file>testing/newsrc/org/aspectj/testing/XMLBasedAjcTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="458871" reportTime="2015-01-31 07:20:00">
    <summary>Make weaving agent attachable during runtime via VirtualMachine.loadAgent</summary>
    <description>Created attachment 250406 [details] Patch for AspectJ weaver to enable dynamic weaver attachment Currently the weaving agent in aspectjweaver.jar does not contain an 'agentmain' method and a corresponding manifest entry. I added those to the code and patched my JAR with the updated Agent.class and MANIFEST.MF. Now dynamically attaching the agent to the current classloader works. I am attaching - a patch against current Git master, - an Eclipse sample project showing the effect. You need to adjust the path of tools.jar needed for compilation . A patched version of aspectjweaver.jar and a sample aspect.jar with a 'before : execution * * .. ' pointcut so we have something to weave are contained in the 'lib' subdirectory. If you just run the 'Application' class as a Java, it will determine that the aspect weaver has not been loaded and attach it dynamically. Subsequently defined/loaded classes will then be subject to weaving as can be seen in the console output: Hello world! java.lang.UnsupportedOperationException: AspectJ weaving agent was neither started via '-javaagent' preMain nor attached via 'VirtualMachine.loadAgent' agentMain [AppClassLoader@2d63c5bb] info AspectJ Weaver Version 1.8.4 built on Thursday Nov 6, 2014 at 20:19:21 GMT [AppClassLoader@2d63c5bb] info register classloader sun.misc.Launcher$AppClassLoader@2d63c5bb [AppClassLoader@2d63c5bb] info using configuration file:/C:/Users/Alexander/Documents/java-src/SO_AJ_LTW_CheckIfWeaverIsLoaded/lib/aspect.jar!/META-INF/aop.xml [AppClassLoader@2d63c5bb] info register aspect com.aspect.generic.GenericAspect [AppClassLoader@2d63c5bb] weaveinfo Join point 'method-execution void de.scrum_master.app.Dummy.doSomething ' in Type 'de.scrum_master.app.Dummy' Dummy.java:4 advised by before advice from 'com.aspect.generic.GenericAspect' GenericAspect.aj [AppClassLoader@2d63c5bb] weaveinfo Join point 'method-execution int de.scrum_master.app.Dummy.square int ' in Type 'de.scrum_master.app.Dummy' Dummy.java:9 advised by before advice from 'com.aspect.generic.GenericAspect' GenericAspect.aj execution void de.scrum_master.app.Dummy.doSomething Do something execution int de.scrum_master.app.Dummy.square int Square of 7 = 49 [AppClassLoader@2d63c5bb] weaveinfo Join point 'method-execution void de.scrum_master.app.Application$1.run ' in Type 'de.scrum_master.app.Application$1' Application.java:50 advised by before advice from 'com.aspect.generic.GenericAspect' GenericAspect.aj execution void de.scrum_master.app.Application.1.run Anonymous runnable Hello world!</description>
    <commit commitTime="2015-09-08 13:33:06" id="83acbdaf168b82f227c6307436ef90e7fb71155d"/>
    <fixedFiles>
      <file>loadtime5/java5-src/org/aspectj/weaver/loadtime/Agent.java</file>
    </fixedFiles>
  </bug>
  <bug id="461323" reportTime="2015-03-03 11:05:00">
    <summary>ClassFormatError "invalid modifier 0x8" when trying to make a default method @Loggable</summary>
    <description>Created attachment 251258 [details] JUnit test case I am using JDK 1.8, jcabi-aspects 0.21.1 and AspectJ 1.8.5 in Eclipse Luna SR2. I build either in Eclipse or with the jcabi-maven-plugin 0.12. I have annotated a default method in an interface as @Loggable. After weaving, trying to load that class leads to an error: java.lang.BootstrapMethodError: java.lang.ClassFormatError: Method apply_aroundBody0 in class java8/aspectsjtest/TheInterface has illegal modifiers: 0x8 That's the "static" modifier. I have attached an example. Please compile and try to run java8.aspectsjtest.TheInterfaceTest as a JUnit 4 test. The intent is to log all function invocations through TheInterface, so I override java.util.functions.Function#apply/1 which is called in existing code to delegate to a new abstract method, and annotate the apply-method.</description>
    <commit commitTime="2015-11-19 08:54:14" id="af8a5a2ac9a64e6f48101d7442024a685450285a"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/bcel/MoveInstructionsWeaveTestCase.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc188/Ajc188Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/Utility.java</file>
    </fixedFiles>
  </bug>
  <bug id="462146" reportTime="2015-03-14 13:41:00">
    <summary>[iajc] Compiler argument parameters and iajc</summary>
    <description>I want to have both: 1. the Java 8 feature of parameter names per reflection. Therefore the compiler argument -parameters must be given. 2. Run the build including AspectJ compilation via ANT. When i build my project in Eclipse, it seems to work, to set that compiler option and use the AspectJ builder. But in ANT, i can't see how to do it. The iajc task does not accept the &amp;lt;compilerarg value="-parameters" /&amp;gt; element. And I cannot find hints in the documentation. thx Frank</description>
    <commit commitTime="2015-03-26 17:19:37" id="0c9521ae358073133859d9bacbf269cee56258cf"/>
    <fixedFiles>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="462821" reportTime="2015-03-23 05:40:00">
    <summary>Bytecode dump weaving annotation based aspect on Java 8 using asjectjtools &gt;1.8.2</summary>
    <description>Created attachment 251819 [details] Maven project that reproduces the issue Apologies for the non-descriptive title but I really have no idea how to better classify this. When trying to upgrade an existing project from java 7 to java 8, aspectj weaving started to fail for one of the project's modules: [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 2.362 s [INFO] Finished at: 2015-03-23T10:19:18+01:00 [INFO] Final Memory: 21M/164M [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.codehaus.mojo:aspectj-maven-plugin:1.7:compile default on project testapp: AJC compiler errors: [ERROR] abort trouble in: [ERROR] public class no.kantega.FooService extends java.lang.Object: [ERROR] public void &amp;lt;init&amp;gt; : [ERROR] ALOAD_0 // Lno/kantega/FooService; this line 3 [ERROR] INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V [ERROR] constructor-execution void no.kantega.FooService.&amp;lt;init&amp;gt; [ERROR] | RETURN [ERROR] constructor-execution void no.kantega.FooService.&amp;lt;init&amp;gt; [ERROR] end public void &amp;lt;init&amp;gt; [ERROR] [ERROR] public String doSomething org.aspectj.weaver.MethodDeclarationLineNumber: 6:92 [ERROR] : [ERROR] GETSTATIC no.kantega.FooService.ajc$tjp_0 Lorg/aspectj/lang/JoinPoint$StaticPart; [ERROR] ALOAD_0 [ERROR] ALOAD_0 [ERROR] INVOKESTATIC org.aspectj.runtime.reflect.Factory.makeJP Lorg/aspectj/lang/JoinPoint$StaticPart;Ljava/lang/Object;Ljava/lang/Object; Lorg/aspectj/lang/JoinPoint; [ERROR] ASTORE_1 [ERROR] method-execution java.lang.String no.kantega.FooService.doSomething [ERROR] | LDC "foo" line 7 [ERROR] | ARETURN [ERROR] method-execution java.lang.String no.kantega.FooService.doSomething [ERROR] end public String doSomething [ERROR] [ERROR] end public class no.kantega.FooService [ERROR] -- BCException Class no.kantega.FooServiceLoggerAspect does not have a method handleInfoJoinPointsToLog with signature Lorg/aspectj/lang/ProceedingJoinPoint; Ljava/lang/Object; [ERROR] when implementing on shadow method-execution java.lang.String no.kantega.FooService.doSomething [ERROR] when weaving type no.kantega.FooService [ERROR] when weaving classes [ERROR] when weaving [ERROR] when batch building BuildConfig[null] #Files=3 AopXmls=#0 [ERROR] [ERROR] Class no.kantega.FooServiceLoggerAspect does not have a method handleInfoJoinPointsToLog with signature Lorg/aspectj/lang/ProceedingJoinPoint; Ljava/lang/Object; [ERROR] when implementing on shadow method-execution java.lang.String no.kantega.FooService.doSomething [ERROR] when weaving type no.kantega.FooService [ERROR] when weaving classes [ERROR] when weaving [ERROR] when batch building BuildConfig[null] #Files=3 AopXmls=#0 [ERROR] [ERROR] org.aspectj.weaver.BCException: Class no.kantega.FooServiceLoggerAspect does not have a method handleInfoJoinPointsToLog with signature Lorg/aspectj/lang/ProceedingJoinPoint; Ljava/lang/Object; [ERROR] when implementing on shadow method-execution java.lang.String no.kantega.FooService.doSomething [ERROR] when weaving type no.kantega.FooService [ERROR] when weaving classes [ERROR] when weaving [ERROR] when batch building BuildConfig[null] #Files=3 AopXmls=#0 [ERROR] [ERROR] at org.aspectj.weaver.bcel.LazyClassGen.getLazyMethodGen LazyClassGen.java:1548 [ERROR] at org.aspectj.weaver.bcel.LazyClassGen.getLazyMethodGen LazyClassGen.java:1533 [ERROR] at org.aspectj.weaver.bcel.BcelAdvice.canInline BcelAdvice.java:244 [ERROR] at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:363 [ERROR] at org.aspectj.weaver.Shadow.implementMungers Shadow.java:632 [ERROR] at org.aspectj.weaver.Shadow.implement Shadow.java:547 [ERROR] at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:3335 [ERROR] at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:496 [ERROR] at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:100 [ERROR] at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1689 [ERROR] at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1633 [ERROR] at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1398 [ERROR] at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1184 [ERROR] at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:514 [ERROR] at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving AjPipeliningCompilerAdapter.java:447 [ERROR] at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:432 [ERROR] at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:103 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:822 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:480 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:420 [ERROR] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1036 [ERROR] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:272 [ERROR] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:185 [ERROR] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 [ERROR] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 [ERROR] at org.aspectj.tools.ajc.Main.run Main.java:371 [ERROR] at org.aspectj.tools.ajc.Main.runMain Main.java:248 [ERROR] at org.codehaus.mojo.aspectj.AbstractAjcCompiler.execute AbstractAjcCompiler.java:524 [ERROR] at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo DefaultBuildPluginManager.java:132 [ERROR] at org.apache.maven.lifecycle.internal.MojoExecutor.execute MojoExecutor.java:208 [ERROR] at org.apache.maven.lifecycle.internal.MojoExecutor.execute MojoExecutor.java:153 [ERROR] at org.apache.maven.lifecycle.internal.MojoExecutor.execute MojoExecutor.java:145 [ERROR] at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject LifecycleModuleBuilder.java:116 [ERROR] at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject LifecycleModuleBuilder.java:80 [ERROR] at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build SingleThreadedBuilder.java:51 [ERROR] at org.apache.maven.lifecycle.internal.LifecycleStarter.execute LifecycleStarter.java:120 [ERROR] at org.apache.maven.DefaultMaven.doExecute DefaultMaven.java:355 [ERROR] at org.apache.maven.DefaultMaven.execute DefaultMaven.java:155 [ERROR] at org.apache.maven.cli.MavenCli.execute MavenCli.java:584 [ERROR] at org.apache.maven.cli.MavenCli.doMain MavenCli.java:216 [ERROR] at org.apache.maven.cli.MavenCli.main MavenCli.java:160 [ERROR] at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method [ERROR] at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:62 [ERROR] at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:43 [ERROR] at java.lang.reflect.Method.invoke Method.java:483 [ERROR] at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced Launcher.java:289 [ERROR] at org.codehaus.plexus.classworlds.launcher.Launcher.launch Launcher.java:229 [ERROR] at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode Launcher.java:415 [ERROR] at org.codehaus.plexus.classworlds.launcher.Launcher.main Launcher.java:356 [ERROR] -&amp;gt; [Help 1] [ERROR] Relevant versions are maven 3.2.5, maven-compiler-plugin 3.1, aspectj-maven-plugin 1.7, aspectjrt/tools 1.8.5. I've attached a small stand-alone maven project that reproduces the issue on my machine. As for workarounds, the build works fine if I back down to aspectjrools/aspectjrt 1.8.2. 1.8.3 through 1.8.5 all fail the same way. Additionally, setting compliance levels to 1.7 works, even on 1.8.5, though that workaround would lock us out of using Java 8 constructs for now. I'm not sure why this particular module fails while the others worked fine through the upgrade, but I'm guessing it has to do with this particular module being the only one to use annotation based aspects.</description>
    <commit commitTime="2015-03-23 12:54:54" id="a1cfe944a602101d144c8efd7df217ab20e4b9ee"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</file>
      <file>tests/src/org/aspectj/systemtest/AllTests18.java</file>
    </fixedFiles>
  </bug>
  <bug id="464604" reportTime="2015-04-14 09:37:00">
    <summary>ajdoc fails when run with JDK 7</summary>
    <description>Created attachment 252382 [details] the Maven output I'm executing ajdoc via Maven and set source, target to 1.7 and complianceLevel to 1.8. When running the report generation with JDK 1.7.0_72 or 1.7.0_76, I run into the attached issue. 1.8.0_40 does not lead to the problem. So, it looks to me as if the JDK 1.7 and 1.8 doclets are not properly identified.</description>
    <commit commitTime="2015-09-04 14:40:23" id="09b57263e817325b7e9505060e8aca9ecd464096"/>
    <fixedFiles>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java</file>
    </fixedFiles>
  </bug>
  <bug id="464749" reportTime="2015-04-15 22:57:00">
    <summary>Top-level class "Play" in aspectjtools.jar and aspectjweaver.jar conflicts with Play sbt plugin</summary>
    <description>There is a top-level class called "Play" added to the aspectjtools.jar and aspectjweaver.jar that is not part of the sources jar and appears to be added during packaging. This poses a problem for sbt builds using the Play framework https://www.playframework.com/ and plugins that pull in aspectjtools.jar or aspectjweaver.jar such as sbt-aspectj https://github.com/sbt/sbt-aspectj . As best as I can tell this class is some kind of test code: https://github.com/eclipse/org.aspectj/blob/master/bcel-builder/testsrc/Play.java . It would be helpful if this class were not at the top level as it produces warnings inside sbt builds that are used to build Play projects such as: error: imported `Play' is permanently hidden by definition of object Play import _root_.sbt.plugins.IvyPlugin, _root_.sbt.plugins.JvmPlugin, _root_.sbt.plugins.CorePlugin, _root_.sbt.plugins.JUnitXmlReportPlugin, _root_.play.Play, _root_.play.PlayJava, _root_.play.PlayScala, _root_.play.twirl.sbt.SbtTwirl, _root_.com.typesafe.sbt.jse.SbtJsEngine, _root_.com.typesafe.sbt.jse.SbtJsTask, _root_.com.typesafe.sbt.web.SbtWeb, _root_.com.typesafe.sbt.webdriver.SbtWebDriver, _root_.com.typesafe.sbt.coffeescript.SbtCoffeeScript, _root_.com.typesafe.sbt.digest.SbtDigest, _root_.com.typesafe.sbt.gzip.SbtGzip, _root_.com.typesafe.sbt.jshint.SbtJSHint, _root_.com.typesafe.sbt.less.SbtLess, _root_.com.typesafe.sbt.rjs.SbtRjs</description>
    <commit commitTime="2015-04-20 09:18:50" id="ad445b570dcd02f6f84013a0759619eca671a67e"/>
    <fixedFiles>
      <file>bcel-builder/testsrc/Play.java</file>
    </fixedFiles>
  </bug>
  <bug id="467415" reportTime="2015-05-15 11:18:00">
    <summary>Weaver created bridge methods missing ACC_SYNTHETIC</summary>
    <description>Related to the issue about methods incorrectly having ACC_INTERFACE on them, bridge methods created by the weaver seem to be missing ACC_SYNTHETIC.</description>
    <commit commitTime="2015-05-15 08:20:50" id="066dc11d46731d5a60866dc1ded2dd3e3ef2fcd0"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/Constants.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="470658" reportTime="2015-06-21 12:14:00">
    <summary>Corrupted Local Variable Table</summary>
    <description>Created attachment 254594 [details] Zip containing all files to reproduce the issue Hi :- I have found an issue during weaving, which can be reproduced by the attached files. The weaved class after running ajc has some corrupted Local Variable Tables, where some slots are missing. When opening the weaved class - com/crashlytics/android/v.class - and looking at it using Sublime for example, I could see the following: LocalVariableTable: Start Length Slot Name Signature 0 154 0 arg0 Lcom/crashlytics/android/internal/aq; 0 154 1 arg1 I 0 154 2 arg2 J 0 154 4 arg3 Ljava/lang/String; As seen above, Slot 3 is missing... This issue causes some problems with Android's build framework. To reproduce the problem please do the following: - Unzip the attached - Define a ASPECTJ_HOME env variable, or simply edit the run.cmd file - Execute run.cmd The result would be ajc weaving the class v.class, using FilesApsect.aj found under the src dir. And the weaved jar will contain a v.class with the problem. Thanks! Ariel</description>
    <commit commitTime="2015-08-10 11:35:19" id="5219b4af2c6ed2c477d91d3ea0a364a0e5fc3652"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/World.java</file>
    </fixedFiles>
  </bug>
  <bug id="473555" reportTime="2015-07-24 20:41:00">
    <summary>File descriptors leak in ExtensibleURLClassLoader</summary>
    <description>Undeploying a Webapp leaves open file descriptors if ExtensibleClassLoader has been used to load any "plugins". We see this in Hudson when deployed to a Tomcat server: at java.util.zip.ZipFile.&amp;lt;init&amp;gt; ZipFile.java:146 at java.util.zip.ZipFile.&amp;lt;init&amp;gt; ZipFile.java:159 at org.aspectj.weaver.bcel.ClassPathManager$ZipFileEntry.ensureOpen ClassPathManager.java:294 at org.aspectj.weaver.bcel.ClassPathManager$ZipFileEntry.find ClassPathManager.java:264 at org.aspectj.weaver.bcel.ClassPathManager.find ClassPathManager.java:101 at org.aspectj.weaver.bcel.ExtensibleURLClassLoader.getBytes ExtensibleURLClassLoader.java:77 at org.aspectj.weaver.loadtime.WeavingURLClassLoader.getBytes WeavingURLClassLoader.java:180 at org.aspectj.weaver.bcel.ExtensibleURLClassLoader.findClass ExtensibleURLClassLoader.java:50 at java.lang.ClassLoader.loadClass ClassLoader.java:425 at java.lang.ClassLoader.loadClass ClassLoader.java:358 at hudson.util.XStream2$AssociatedConverterImpl.findConverter XStream2.java:185 at hudson.util.XStream2$AssociatedConverterImpl.canConvert XStream2.java:225 ZipFile accumulates in a cache in ClassPathManager which is never completely cleared.</description>
    <commit commitTime="2015-08-05 12:33:31" id="9f19c3d57acfe94b07fcb060abef1ad0e63fb4eb"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/ExtensibleURLClassLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="474165" reportTime="2015-08-03 13:50:00">
    <summary>Annotation on introduced interface through declareparents causes AspectJ compiler error</summary>
    <description>I'm using @DeclareParents to introduce an interface to certain entites. The problem is that when I add the following annotation @JsonView View.Minimal.class to the introduced interface, I get the following AspectJ compiler error: org.aspectj.ajdt.internal.compiler.lookup.EclipseAnnotationConvertor$MissingImplementationException: Please raise an AspectJ bug. AspectJ does not know how to convert this annotation value [View.Minimal.class] at org.aspectj.ajdt.internal.compiler.lookup.EclipseAnnotationConvertor.generateElementValueForNonConstantExpression EclipseAnnotationConvertor.java:221 at org.aspectj.ajdt.internal.compiler.lookup.EclipseAnnotationConvertor.generateElementValue EclipseAnnotationConvertor.java:129 at org.aspectj.ajdt.internal.compiler.lookup.EclipseAnnotationConvertor.generateAnnotation EclipseAnnotationConvertor.java:100 at org.aspectj.ajdt.internal.compiler.lookup.EclipseAnnotationConvertor.convertEclipseAnnotation EclipseAnnotationConvertor.java:58 at org.aspectj.ajdt.internal.compiler.lookup.EclipseResolvedMember.getAnnotations EclipseResolvedMember.java:102 at org.aspectj.weaver.bcel.BcelTypeMunger.mungeMethodDelegate BcelTypeMunger.java:1413 at org.aspectj.weaver.bcel.BcelTypeMunger.munge BcelTypeMunger.java:112</description>
    <commit commitTime="2015-08-06 13:53:56" id="7a61a0d50d7371ef0a8e9904e8da7e93922fe8e4"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseAnnotationConvertor.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc187/Ajc187Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="475152" reportTime="2015-08-17 09:20:00">
    <summary>infinite loop during build time weaving when more than 2 aspects in hierarchy at org.aspectj.weaver.bcel.BcelAdvice.canInline</summary>
    <description>Created attachment 255894 [details] proposed patch When weaving aspect, which has two base aspects, code from a1cfe944a602101d144c8efd7df217ab20e4b9ee goes into an infinite loop. There isn't assignment of boType inside while loop, so if lazyMethodGen doesn't find matching method in direct base class, it stays forewer in while loop, stack trace from build thread: "main" #1 prio=5 os_prio=0 tid=0x00007fd6c4008800 nid=0x9e8 runnable [0x00007fd6ca11d000] java.lang.Thread.State: RUNNABLE at org.aspectj.weaver.bcel.BcelAdvice.canInline BcelAdvice.java:257 at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:378 at org.aspectj.weaver.Shadow.implementMungers Shadow.java:632 at org.aspectj.weaver.Shadow.implement Shadow.java:547 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:3335 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:496 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:100 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1689 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1633 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1398 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1184 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:514 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving AjPipeliningCompilerAdapter.java:447 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:432 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:103 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:822 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:480 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:420 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1036 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:272 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:185 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:371 at org.aspectj.tools.ajc.Main.runMain Main.java:248 at org.codehaus.mojo.aspectj.AbstractAjcCompiler.execute AbstractAjcCompiler.java:524 I'm attaching simple maven test case and patch working for me.</description>
    <commit commitTime="2015-09-02 09:49:22" id="a9ea7010ab7075d934aeb49d48dec33d48b722c4"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc187/Ajc187Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="475728" reportTime="2015-08-24 11:09:00">
    <summary>LTW breaks Eclipse classloading for non javac-named inner classes</summary>
    <description>Hi, in the past days I experienced a bug in the org.aspectj.weaver plug-in using equinox load-time weaving. The problematic source code is contained in org.aspectj.weaver.bcel.BcelObjectType at lines 903-905 of the method getOuterClass . The method should resolve the declaring class for a current inner class. The problematic code tries to resolve the declaring class using String operations. It assumes the compiled class to follow the javac naming conventions. If this isn't the case like it can happen e.g. for obfuscated classes , a StringIndexOutOfBoundException is raised since the javac-specific $ in the inner-classe's name wasn't found . This Exception is propagated and never catched which results in the class to be never loaded neither woven nor unwoven . A NoClassDefFoundError is the result and the class loading process is broken in this moment. To fix this, properly the outerclass check should not rely on the javac assumption. A hotfix could be to catch the Exception to avoid a broken class loading process... Best regards, Lukas PS: A similar problem is maybe described in Bug 432874</description>
    <commit commitTime="2015-09-02 09:05:35" id="415ef622d9435806ef0736341402772487deed23"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
    </fixedFiles>
  </bug>
  <bug id="476245" reportTime="2015-08-31 11:58:00">
    <summary>Issue Resolving Type with Java 8 Lambda Functions</summary>
    <description>Created attachment 256265 [details] Source code demonstrating bug I get a compiler error from ajc 1.8.6 when I try to compile a Java class making use of lambda functions: ajc: Type mismatch: cannot convert from Object to boolean The code that triggers this error is below. Note that this compiles with the Oracle JDK 1.8.0_60 compiler. import java.util.Optional; public class Testing { public static void main String[] args { Optional&amp;lt;Integer&amp;gt; value1 = Optional.of 15 ; Optional&amp;lt;Integer&amp;gt; value2 = Optional.of 30 ; boolean passed = value1.flatMap v1 -&amp;gt; value2.map v2 -&amp;gt; v2 / v1 == 2 .orElse false ; System.out.println passed ; } }</description>
    <commit commitTime="2015-09-04 13:33:52" id="0095636d6bb3bf50d33104df7460f28ab3a76f4d"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc187/Ajc187Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="478003" reportTime="2015-09-21 17:52:00">
    <summary>NullPointerException with generic inter type method declaration</summary>
    <description>Created attachment 256733 [details] dump Below snippet produce NullPointerException. If I replace line public OrientDBValue OrientKey&amp;lt;T&amp;gt;.getOrientDBValue with public OrientDBValue OrientKey.getOrientDBValue it compiles ok import com.flickbay.orientdb.OrientKey; public aspect OrientDBKeyIO { public interface IO&amp;lt;T&amp;gt; { OrientDBValue&amp;lt;T&amp;gt; getOrientDBValue ; } declare parents : OrientKey implements IO; public SimpleOrientDBValue OrientKey&amp;lt;T&amp;gt;.value = null; public OrientDBValue OrientKey&amp;lt;T&amp;gt;.getOrientDBValue { return this.value; } }</description>
    <commit commitTime="2015-11-18 14:43:41" id="12d0a8268abb5100d7982e5be13c6cb0f8cdbf83"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="482945" reportTime="2015-11-24 15:07:00">
    <summary>NullPointerException and core dump on specific obfuscated inner class</summary>
    <description>I'm getting a NullPointerException on a specific class during loadtime weaving, which then results in an ajcore dump file. See below for part of the dump. I traced it back to an earlier bug and fix 432874. In this fix, getOuterClass has been fixed to return null in case the outer class of an obfuscated inner class no $ in name anymore cannot be determined. It seems that now the next step faills where the code tries to access the outerClass object anyway. Workaround is to exclude the class from the weaver. I can provide the specific classes upon request. SEVERE: com/tibco/xml/parsers/xmlfactories/b java.lang.NullPointerException at org.aspectj.weaver.AbstractReferenceTypeDelegate.getFormalTypeParametersFromOuterClass AbstractReferenceTypeDelegate.java:111 at org.aspectj.weaver.bcel.BcelObjectType.ensureGenericSignatureUnpacked BcelObjectType.java:772 at org.aspectj.weaver.bcel.BcelObjectType.getSuperclass BcelObjectType.java:231 at org.aspectj.weaver.ReferenceType.getSuperclass ReferenceType.java:987 at org.aspectj.weaver.bcel.BcelWeaver.weaveParentsFor BcelWeaver.java:1300 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1119 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:527 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:363 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:121 at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform ClassPreProcessorAgentAdapter.java:54 at sun.instrument.TransformerManager.transform Unknown Source at sun.instrument.InstrumentationImpl.transform Unknown Source at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClass Unknown Source at java.security.SecureClassLoader.defineClass Unknown Source at java.net.URLClassLoader.defineClass Unknown Source at java.net.URLClassLoader.access$100 Unknown Source at java.net.URLClassLoader$1.run Unknown Source at java.net.URLClassLoader$1.run Unknown Source at java.security.AccessController.doPrivileged Native Method at java.net.URLClassLoader.findClass Unknown Source at java.lang.ClassLoader.loadClass Unknown Source at sun.misc.Launcher$AppClassLoader.loadClass Unknown Source at java.lang.ClassLoader.loadClass Unknown Source at com.tibco.xml.parsers.xmlfactories.XMLParsersFactory.a XMLParsersFactory.java:150 at com.tibco.xml.parsers.xmlfactories.XMLParsersFactory.a XMLParsersFactory.java:134</description>
    <commit commitTime="2015-12-07 16:09:21" id="9b220fe52ad9bb117140692f7cf455d78a17be11"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/AbstractReferenceTypeDelegate.java</file>
    </fixedFiles>
  </bug>
  <bug id="482990" reportTime="2015-11-25 05:22:00">
    <summary>Load time weaving silently generates invalid classes without StackMapTables if aj.org.objectweb.asm package is not found</summary>
    <description>After upgrading from AspectJ 1.7.2 Spring EBR osgi bundle to 1.8.7 Apache ServiceMix osgi bundle in our OSGI environment, we started seeing VerifyErrors like these for load-time woven classes: HttpServiceContext{httpContext=our.paclage.BundleHttpContext@5552fc77}: java.lang.VerifyError: Expecting a stackmap frame at branch target 63|Exception Details:| Location:| our/package/OurResource.&amp;lt;init&amp;gt; V @23: ifnull| Reason:| Expected stackmap frame at this location.| Bytecode:| 0x0000000: 2ab7 0001 b200 c62a 2ab8 009c 4db2 0096| 0x0000010: 2a2a b800 9c4c 2ac6 0028 2ab6 00ac 12ae| 0x0000020: b600 bc99 001c 2ab6 00ac 12ae b600 b4c0| 0x0000030: 00ae b800 b899 000a b800 a22a b600 a800| 0x0000040: 2ac6 0021 2ab6 00ac 12ae b600 bc99 0015| 0x0000050: 2ab6 00ac 12ae b600 b4c0 00ae b800 b89a| 0x0000060: 0021 2ac6 001d 2ab6 00ac 12ae b600 bc99| 0x0000070: 0011 2bb8 00c3 9900 0ab8 00a2 2ab6 00bf| 0x0000080: 00a7 0003 2ab6 00ac 12ae b600 b4c0 00ae| 0x0000090: b800 b89a 0011 2cb8 00c3 9900 0ab8 00a2| 0x00000a0: 2ab6 00bf b1 | java.lang.VerifyError: Expecting a stackmap frame at branch target 63|Exception Details:| Location:| our/package/OurResource.&amp;lt;init&amp;gt; V @23: ifnull| Reason:| Expected stackmap frame at this location.| Bytecode:| 0x0000000: 2ab7 0001 b200 c62a 2ab8 009c 4db2 0096| 0x0000010: 2a2a b800 9c4c 2ac6 0028 2ab6 00ac 12ae| 0x0000020: b600 bc99 001c 2ab6 00ac 12ae b600 b4c0| 0x0000030: 00ae b800 b899 000a b800 a22a b600 a800| 0x0000040: 2ac6 0021 2ab6 00ac 12ae b600 bc99 0015| 0x0000050: 2ab6 00ac 12ae b600 b4c0 00ae b800 b89a| 0x0000060: 0021 2ac6 001d 2ab6 00ac 12ae b600 bc99| 0x0000070: 0011 2bb8 00c3 9900 0ab8 00a2 2ab6 00bf| 0x0000080: 00a7 0003 2ab6 00ac 12ae b600 b4c0 00ae| 0x0000090: b800 b89a 0011 2cb8 00c3 9900 0ab8 00a2| 0x00000a0: 2ab6 00bf b1 | at java.lang.Class.getDeclaredConstructors0 Native Method ... Investigation of the woven bytecode in _ajdump revealed that the woven classes were indeed missing their StackMapTables. After much searching, we found out that the root cause was the fact that the ServiceMix bundle did not include the renamed ASM library aj.org.objectweb.asm.* packages . We logged a bug for this here: https://issues.apache.org/jira/browse/SM-2744 It took us a long time to find this, because instead of throwing an Exception ClassNotFoundException or similar , AspectJ simply decides to not generate StackMapTables, thus generating bytecode that is completely invalid for Java 1.7 or higher. The relevant code snippets: org.aspectj.weaver.bcel.LazyClassGen: if myGen.getMajor == Constants.MAJOR_1_6 &amp;amp;&amp;amp; world.shouldGenerateStackMaps || myGen.getMajor &amp;gt; Constants.MAJOR_1_6 &amp;amp;&amp;amp; AsmDetector.isAsmAround { wovenClassFileData = StackMapAdder.addStackMaps world, wovenClassFileData ; } org.aspectj.weaver.bcel.asm.AsmDetector: public class AsmDetector { public static boolean isAsmAround; static { try { Class&amp;lt;?&amp;gt; reader = Class.forName "aj.org.objectweb.asm.ClassReader" ; Class&amp;lt;?&amp;gt; visitor = Class.forName "aj.org.objectweb.asm.ClassVisitor" ; Method m = reader.getMethod "accept", new Class[] { visitor, Integer.TYPE } ; isAsmAround = m != null; } catch Exception e { isAsmAround = false; } // System.out.println isAsmAround?"ASM detected":"No ASM found" ; } } As far as I can see, The LazyClassGen class should throw an Exception if myGen.getMajor &amp;gt; Constants.MAJOR_1_6 &amp;amp;&amp;amp; !AsmDetector.isAsmAround Also, I think AsmDetector could be more lenient and also accept a regular non-included ASM. If I've seen correctly, the aj-prefixed inlined version is simply a renamed copy of ASM 5.0.4, so using the regular ASM should work. I'm also not sure why this ASM needs to be renamed and embedded in the first place, but there is probably a reason that I'm not aware of.</description>
    <commit commitTime="2015-11-25 12:19:12" id="fd1888b49c109ad97d539060b61dd38ceb8d7151"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="484941" reportTime="2015-12-28 04:55:00">
    <summary>NPE AnnotationDiscoveryVisitor</summary>
    <description>Created attachment 258921 [details] Gradle project which produces the bug Getting a NPE in AnnotationDiscoveryVisitor when compiling a Test class: java.lang.NullPointerException at org.aspectj.org.eclipse.jdt.internal.compiler.apt.dispatch.AnnotationDiscoveryVisitor.resolveAnnotations AnnotationDiscoveryVisitor.java:238 at org.aspectj.org.eclipse.jdt.internal.compiler.apt.dispatch.AnnotationDiscoveryVisitor.visit AnnotationDiscoveryVisitor.java:217 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse TypeDeclaration.java:1348 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse CompilationUnitDeclaration.java:748 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse CompilationUnitDeclaration.java:709 at org.aspectj.org.eclipse.jdt.internal.compiler.apt.dispatch.RoundEnvImpl.&amp;lt;init&amp;gt; RoundEnvImpl.java:60 at org.aspectj.org.eclipse.jdt.internal.compiler.apt.dispatch.BaseAnnotationProcessorManager.processAnnotations BaseAnnotationProcessorManager.java:148 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.processAnnotations Compiler.java:924 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:434 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1036 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:272 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:185 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:114 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:371 at org.aspectj.tools.ajc.Main.runMain Main.java:248 at org.aspectj.tools.ajc.Main.main Main.java:84</description>
    <commit commitTime="2016-01-05 13:06:22" id="d9029474077ebd405ec34d44913eed3051f2691e"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjPipeliningCompilerAdapter.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc188/Ajc188Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="485055" reportTime="2015-12-31 09:45:00">
    <summary>None</summary>
    <description>Created attachment 258948 [details] error dialog "Interneal Compiler Error:.." public aspect AspectWithStringConstant { /* * Just compile this aspect in eclipse luna in an AspectJ project... * then an error dialog box see ErrorDialog.pdf atached * "Interneal Compiler Error:.." with the following details will arise: * java.lang.ClassCastException at org.aspectj.apache.bcel.generic.FieldGen.setValue FieldGen.java:142 at org.aspectj.apache.bcel.generic.FieldGen.&amp;lt;init&amp;gt; FieldGen.java:115 at org.aspectj.weaver.bcel.BcelField.getField BcelField.java:233 at org.aspectj.weaver.bcel.LazyClassGen.writeBack LazyClassGen.java:522 at org.aspectj.weaver.bcel.LazyClassGen.getJavaClassBytesIncludingReweavable LazyClassGen.java:697 at org.aspectj.weaver.bcel.Bc ... error: ClassCastException thrown: org.aspectj.apache.bcel.classfile.ConstantString cannot be cast to org.aspectj.apache.bcel.classfile.ConstantObject * * In the "RESOLVED" "FIXED" Bug 327141 the exception was related to an * "static final int" field. * For this case and for "long" and "double" final fields the Bug was * fixed by Andrew Clement. * * In our case here, for final fields of type String, the * "java.lang.ClassCastException" still occurs. * * My guess is, that there is a general issue with types which allow only to * create immutable objects like the types int, long, double etc. * and of course String. * * I couldn't find the piece of code which was fixed by Andrew, so I couldn't * check whether it is possible or not, but maybe it is reasonable to * re-engineer that fix in a bit more abstract fashion in order to make it * work for all fields of "immutable-forcing"-types. * * Remark: I run also few other tests with fields of non * "immutable-forcing"-type. * There came no "java.lang.ClassCastException...". * So I assume the Bugis only left in the case the field * type is final String. * */ declare @field : String AspectWithStringConstant.SOME_NAME : @Loggable; public final String SOME_NAME = ""; @interface Loggable { } public static void main String[] args { System.out.println "success" ; } }</description>
    <commit commitTime="2016-01-05 15:44:25" id="482995299ca0078f67c6a6038d3ce7e3745663e9"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc188/Ajc188Tests.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/FieldGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="485448" reportTime="2016-01-08 13:32:00">
    <summary>Building Roo projects NPE in AnnotationDiscoveryVisitor</summary>
    <description>Just building pet clinic: [ERROR] java.lang.NullPointerException [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.apt.dispatch.AnnotationDiscoveryVisitor.resolveAnnotations AnnotationDiscoveryVisitor.java:239 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.apt.dispatch.AnnotationDiscoveryVisitor.visit AnnotationDiscoveryVisitor.java:217 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse TypeDeclaration.java:1348 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse CompilationUnitDeclaration.java:748 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse CompilationUnitDeclaration.java:709 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.apt.dispatch.RoundEnvImpl.&amp;lt;init&amp;gt; RoundEnvImpl.java:60 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.apt.dispatch.BaseAnnotationProcessorManager.processAnnotations BaseAnnotationProcessorManager.java:148 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.processAnnotations Compiler.java:924 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:434</description>
    <commit commitTime="2016-01-08 11:49:22" id="e3d5df726f39207ae93de93e4389dd004c93984c"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
    </fixedFiles>
  </bug>
  <bug id="485583" reportTime="2016-01-11 16:41:00">
    <summary>NullPointerException in org.aspectj.ajdt.internal.compiler.ast.PointcutDeclaration</summary>
    <description>Created attachment 259112 [details] Tar file with maven project to reproduce error During maven build with aspectj-maven-plugin I got the following NullPointerException: [ERROR] Failed to execute goal org.codehaus.mojo:aspectj-maven-plugin:1.8:compile compile on project patterntesting-check-rt: AJC compiler errors: [ERROR] abort ABORT -- NullPointerException null [ERROR] null [ERROR] java.lang.NullPointerException [ERROR] at org.aspectj.ajdt.internal.compiler.ast.PointcutDeclaration.isAtAspectJ PointcutDeclaration.java:122 [ERROR] at org.aspectj.ajdt.internal.compiler.ast.PointcutDeclaration.postParse PointcutDeclaration.java:94 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ClassScope.postParse ClassScope.java:215 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ClassScope.buildFieldsAndMethods ClassScope.java:191 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.buildFieldsAndMethods CompilationUnitScope.java:84 [ERROR] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:141 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile Compiler.java:852 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:385 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:428 [ERROR] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1036 [ERROR] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:272 [ERROR] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:185 [ERROR] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:114 [ERROR] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 [ERROR] at org.aspectj.tools.ajc.Main.run Main.java:371 [ERROR] at org.aspectj.tools.ajc.Main.runMain Main.java:248 [ERROR] at org.codehaus.mojo.aspectj.AbstractAjcCompiler.execute AbstractAjcCompiler.java:537 From the listed stacktrace it seems to be a bug of the AspectJ compiler or AJDT. The problem only occurs on Linux tested with Ubuntu 14.04 and Debian with Java 8 or Java 7, and with Maven 3.3 and Maven 3.0. The bug does not appear on MacOS. Steps to reproduce the error: 1. Extract the attached 'testcase.tgz' on a Linux machine 2. go to the directory testcase/patterntesting-check-rt 3. start 'mvn clean compile'</description>
    <commit commitTime="2016-02-10 15:46:53" id="b54540d9a4843a46d6c2a25f6d2e7470648ef7c7"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc189/Ajc189Tests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java</file>
    </fixedFiles>
  </bug>
  <bug id="486203" reportTime="2016-01-20 16:34:00">
    <summary>Mylyn Docs committer tools are not correctly formatted</summary>
    <description>Created attachment 259286 [details] Screenshot of Mylyn Docs committer tools with bad formatting I think the screenshot says it all.</description>
    <commit commitTime="2016-01-18 16:08:03" id="448dc83571dc16c8b087e2d5e2242474c02ff819"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/AllTests18.java</file>
    </fixedFiles>
  </bug>
  <bug id="486612" reportTime="2016-01-26 19:18:00">
    <summary>Can lose a super type bound when weaving a type using generics in its declaration</summary>
    <description>Raised on the AspectJ mailing list, I've recreated it. Weaving here: class B&amp;lt;T extends SomeClass &amp;amp; SomeInterface&amp;gt; extends C&amp;lt;T&amp;gt; implements Serializable { weaving into this with a declare parents to add another interface causes SomeClass to disappear. This may not be exactly what the user was doing but it does indicate there is a way in which we write out type signatures and damage them. Maybe he has different cause but it leads to the same problem.</description>
    <commit commitTime="2016-01-27 11:49:38" id="4bee355d22f5dd4bb2120ca725f0c8b9eb904976"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc189/Ajc189Tests.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/TypeVariable.java</file>
    </fixedFiles>
  </bug>
  <bug id="487694" reportTime="2016-02-11 16:48:00">
    <summary>Race condition in annotation unpacking can surface through Spring AOP</summary>
    <description>See the Spring bug https://jira.spring.io/browse/SPR-13380 . I don't have a spring test case but I determined that the inflate mechanism in RuntimeAnnos and in RuntimeParamAnnos can get into trouble if two threads are in it at the same time for the same JavaClass. The Java15AnnotationFinder says: JavaClass jc = bcelRepository.loadClass forClass ; org.aspectj.apache.bcel.classfile.annotation.AnnotationGen[] anns = jc.getAnnotations ; bcelRepository.clear ; if anns == null return ResolvedType.NONE; ResolvedType[] ret = new ResolvedType[anns.length]; for int i = 0; i &amp;lt; ret.length; i++ { ret[i] = inWorld.resolve UnresolvedType.forSignature anns[i].getTypeSignature ; } return ret; If two threads go through here asking about the same class they will potentially get the same JavaClass back from the repository if the first thread hasn't called 'clear' before the second thread asks the repository for the class . Annotations are unpacked on demand and if two threads ask for them at the same time they will both be unpacking simultaneously and the unpack code is not thread safe.</description>
    <commit commitTime="2016-02-11 13:59:51" id="a17b28a1a9a0756cfc2181bf2b095650e186425a"/>
    <fixedFiles>
      <file>weaver5/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/annotation/RuntimeParamAnnos.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/annotation/RuntimeAnnos.java</file>
    </fixedFiles>
  </bug>
  <bug id="487927" reportTime="2016-02-17 06:11:00">
    <summary>ClassFormatException if LocalVariableTable data cannot be fully read</summary>
    <description>Created attachment 259786 [details] Stracktrace of the ClassFormatException We stumbled upon the issue that sometimes a fully valid Java class could not be loaded / parsed by the aspectjweaver runtime. After heavy debugging we found out that the issue is a wrong call to "DataInputStream.read buffer " where actually the library expects all data to be read into the buffer; "DataInputStream.readFully buffer " must be used instead. The edge case was that the LocalVariableTable of the class lay exactly over the "buffer border" of the wrapping BufferedInputStream. The read would not read all data, but returned less what was left in the byte buffer and told the underlying BufferedInputStream to load more data from the stream. As this data actually belonged to the not-fully-read LocalVariableTable any further byte-based evaluation of the class would lead to a ClassFormatException The issue is present at least in aspectjweaver 1.8.6, 1.8.8 and the current git version.</description>
    <commit commitTime="2016-02-18 12:23:24" id="3274cbbc06a28ceea357acdd2538f4cf04e95d2e"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/LineNumberTable.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/BootstrapMethods.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/annotation/RuntimeParamAnnos.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/LocalVariableTable.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/MethodParameters.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/annotation/RuntimeTypeAnnos.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/annotation/RuntimeAnnos.java</file>
    </fixedFiles>
  </bug>
  <bug id="488216" reportTime="2016-02-22 06:53:00">
    <summary>Load-time weaver looses class changes of preceding -javaagent</summary>
    <description>Created attachment 259860 [details] Maven project that reproduces the bug I have the requirement to run JaCoCo's java-agent [1] before the one from AspectJ. This is due to the fact that JaCoCo refuses to generate reports for classes where there is a difference between the class bytes[] it instrumented and the ones the report-generator reads from disk. But when I run the agents in this order, first JaCoCo, then AspectJ, it seems as if the AspectJ weaver completely removes JaCoCo's code changes. The attached maven project reproduces this: 1. mvn -Pjacoco-agent,jacoco-report clean package 2. Decompiling _ajdump/_before/example/*.class shows that JaCoCo instrumented the classes 3. Decompiling _ajdump/example/*.class shows that those changes are gone after AspectJ touched the classes JaCoCo also supports offline-instrumentation. When using that AspectJ keeps JaCoCo's changes: 1. mvn -Pjacoco-instrument,jacoco-report clean package 2. Decompiling _ajdump/example/*.class shows both the changes made by JaCoCo and AspectJ are now present So this problem seems to be restricted to java-agents running before AspectJ. Using offline-instrumentation is a workaround for now but the actual project where I'm having this problem has a much more involved build-setup and doing instrumentation offline really complicates matters because it requires additional steps to remove it before the jars are published. I used fernflower [2] to decompile and inspect the classes. [1] http://eclemma.org/jacoco/trunk/doc/agent.html , http://eclemma.org/jacoco/ [2] https://github.com/fesh0r/fernflower</description>
    <commit commitTime="2016-03-08 08:52:39" id="9216ef518ac4c9af48c559ee8a6966164ddbb237"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/tools/AbstractTrace.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/tools/Trace.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/tools/DefaultTrace.java</file>
    </fixedFiles>
  </bug>
  <bug id="490315" reportTime="2016-03-23 12:04:00">
    <summary>InvokeDynamic.java:126 there is no classname for invokedynamic</summary>
    <description>The following exception occurs twice and shows modal error popups twice each time I try to save any file containing advices in my project. This is obviously very annoying. I'm not sure what data is relevant to this, Eclipse is Version: Mars.1 Release 4.5.1 Build id: 20150924-1200 AJDT support was installed from: http://download.eclipse.org/tools/ajdt/45/dev/update/ couldn't find non-dev release for Mars . m2e AJDT adapter project is Maven-based was installed via Preferences -&amp;gt; Maven -&amp;gt; Discovery and is: Maven Integration for AJDT Optional 0.14.0.201506231302 org.maven.ide.eclipse.ajdt.feature.feature.group Sonatype, Inc. Project didn't seem to convert to AspectJ by itself, so I did right-click -&amp;gt; Configure -&amp;gt; Convert to AspectJ project. It seems to work it does show pointcuts &amp;amp; stuff . The following data will be sent: ------ STATUS ------ pluginId org.eclipse.ajdt.ui pluginVersion 2.2.4.201603152120 code 0 severity 4 message trouble in: [redacted] fingerprint b4b6d52c Exception:java.lang.IllegalStateException: there is no classname for invokedynamic at org.aspectj.apache.bcel.generic.InvokeDynamic.getClassName InvokeDynamic.java:126 at org.aspectj.weaver.bcel.BcelAccessForInlineMunger.openAroundAdvice BcelAccessForInlineMunger.java:141 at org.aspectj.weaver.bcel.BcelAccessForInlineMunger.munge BcelAccessForInlineMunger.java:80 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:440 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:100 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1697 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1641 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1406 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1159 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:514 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving AjPipeliningCompilerAdapter.java:447 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:432 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:103 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:902 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.processCompiledUnits Compiler.java:545 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:458 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1036 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:272 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:185 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:320 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:189 at org.aspectj.ajde.core.internal.AjdeCoreBuildManager.performBuild AjdeCoreBuildManager.java:127 at org.aspectj.ajde.core.AjCompiler.build AjCompiler.java:91 at org.eclipse.ajdt.core.builder.AJBuilder.build AJBuilder.java:257 at org.eclipse.core.internal.events.BuildManager$2.run BuildManager.java:734 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:42 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:205 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:245 at org.eclipse.core.internal.events.BuildManager$1.run BuildManager.java:300 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:42 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:303 at org.eclipse.core.internal.events.BuildManager.basicBuildLoop BuildManager.java:359 at org.eclipse.core.internal.events.BuildManager.build BuildManager.java:382 at org.eclipse.core.internal.events.AutoBuildJob.doBuild AutoBuildJob.java:144 at org.eclipse.core.internal.events.AutoBuildJob.run AutoBuildJob.java:235 at org.eclipse.core.internal.jobs.Worker.run Worker.java:55 ------ REPORT ------ eclipseBuildId 4.5.1.M20150904-0015 eclipseProduct org.eclipse.epp.package.jee.product javaRuntimeVersion 1.8.0_20-b26 osgiWs win32 osgiOs Windows7 osgiOsVersion 6.1.0 osgiArch x86_64 logMessage false ignoreSimilar false ------- BUNDLES ------- name org.aspectj.ajde version 1.8.9.201603152120 name org.aspectj.weaver version 1.8.9.201603152120 name org.eclipse.ajdt.core version 2.2.4.201603152120 name org.eclipse.core.jobs version 3.7.0.v20150330-2103 name org.eclipse.core.runtime version 3.11.1.v20150903-1804</description>
    <commit commitTime="2016-03-29 10:01:01" id="9eae797dd9c96826c7ab23f1ed9d3c26552c5c88"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAccessForInlineMunger.java</file>
      <file>tests/src/org/aspectj/systemtest/AllTests18.java</file>
    </fixedFiles>
  </bug>
  <bug id="493554" reportTime="2016-05-12 11:47:00">
    <summary>Missing InnerClasses attribute for nested interfaces created by AspectJ</summary>
    <description>Created attachment 261695 [details] Demo project According to JVMS 4.7.6 [1]: 1 A nested class or nested interface must have an `InnerClasses` attribute with information about its containing class or interface. 2 A class or interface with nested classes and/or nested interfaces must also have an `InnerClasses` attribute with information about its nested classes and/or nested interfaces. AspectJ correctly creates `InnerClasses` attributes for item 1 but not for item 2. This hinders interoperability with other compilers/libraries that rely on such information. For more details please see the description, attachments, and comments on KT-12179 [2]. The demo project attachment from KT-12179 is attached here as well for your convenience. [1] http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.7.6 [2] https://youtrack.jetbrains.com/issue/KT-12179</description>
    <commit commitTime="2016-05-12 15:27:22" id="d8ccdb732982e855a9d1a17c844a9d85a3a82866"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/HelperInterfaceBinding.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc1810/Ajc1810Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="500035" reportTime="2016-08-21 04:10:00">
    <summary>ProceedingJoinPoint changes order of input parameters</summary>
    <description>The following example demonstrates the problem: @Around value = "args regex, replacement &amp;amp;&amp;amp; target targetObject " + "&amp;amp;&amp;amp; call public String String.replaceFirst String, String ", argNames = "proceedingJoinPoint,targetObject,regex,replacement,thisJoinPoint" public String replaceFirstAspect ProceedingJoinPoint proceedingJoinPoint, String targetObject, String regex, String replacement, JoinPoint thisJoinPoint throws Throwable { String returnObject = String proceedingJoinPoint.proceed new Object[]{ targetObject, regex, replacement} ; return returnObject; } Same aspect written using AJ file instead of Java works as expected. Using Java and annotations however executes proceed on a wrong object.</description>
    <commit commitTime="2016-11-18 09:00:28" id="b6f2b6337fbaf95b78c20862cd90f0e027509531"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/DeclareParents.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc187/AllTestsAspectJ187.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/MethodGen.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjTestOutputLocationManager.java</file>
      <file>testing/src/org/aspectj/testing/harness/bridge/AbstractRunSpec.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc152/SynchronizationTransformTests.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc188/AllTestsAspectJ188.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java</file>
      <file>testing/src/org/aspectj/testing/harness/bridge/AjcMessageHandler.java</file>
      <file>testing/src/org/aspectj/testing/harness/bridge/DirChanges.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/IncrementalOutputLocationManagerTests.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/util/NonCachingClassLoaderRepository.java</file>
      <file>testing/src/org/aspectj/internal/tools/ant/taskdefs/MainWrapper.java</file>
      <file>runtime/src/org/aspectj/runtime/reflect/JoinPointImpl.java</file>
      <file>testing/src/org/aspectj/internal/tools/ant/taskdefs/Ajctest.java</file>
      <file>testing/src/org/aspectj/testing/harness/bridge/FlatSuiteReader.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/AjdeInteractionTestbed.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc180/AllTestsAspectJ180.java</file>
      <file>bcel-builder/testsrc/org/aspectj/apache/bcel/classfile/tests/ParameterAnnotationsTest.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc185/Ajc185Tests.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc151/NewarrayJoinpointTests.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc182/AllTestsAspectJ182.java</file>
      <file>bridge/src/org/aspectj/bridge/context/PinpointingMessageHandler.java</file>
      <file>build/testsrc/org/aspectj/internal/build/ModulesTest.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc187/Ajc187Tests.java</file>
      <file>build/testsrc/org/aspectj/internal/build/BuildModuleTest.java</file>
      <file>bridge/src/org/aspectj/bridge/Version.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc1810/Ajc1810Tests.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/OutputLocationManagerTests.java</file>
      <file>build/testsrc/org/aspectj/build/BuildModuleTests.java</file>
      <file>ajde/src/org/aspectj/ajde/Ajde.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MoreOutputLocationManagerTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="500796" reportTime="2016-09-03 07:01:00">
    <summary>Aspectj inproperly instuments classes that contains methods with fake variables</summary>
    <description>Created attachment 263947 [details] sample project Kotlin compiler generates additional fake local variables in local variable table that are not used in method code, after instumentation of such method i get ClassFormatError on runtime "java.lang.ClassFormatError: Invalid index 6 in LocalVariableTable in class file test/TestTarget" . Originally this problem linked to BCEL https://issues.apache.org/jira/browse/BCEL-280 issue, BCEL keeps local variable table as is but decreases 'maxLocal' value that is cause a problem. Aspectj could simply make a workaround for this problem in LazyMethodGen.pack with substitution of gen.setMaxLocals ; to gen.setMaxLocals ; gen.setMaxLocals Math.max gen.getMaxLocals , index of entry in local variable table with max index + it's size ; Sample code: package test import ru.yandex.qatools.allure.annotations.Step class TestTarget { @Step fun test2 { } fun test { val list = arrayListOf 1, 2, 3 list.forEach { println it } } companion object { @JvmStatic fun main args: Array&amp;lt;String&amp;gt; { TestTarget .test } } }</description>
    <commit commitTime="2016-11-07 16:18:54" id="611e04a9e1f3f2368f3ce3237b6288b119ac9943"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/GenericITDsDesign.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc163/Ajc163Tests.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/bcel/WorldTestCase.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc160/SanityTests.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/MethodGen.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/AnnotationBinding.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc1610/NewFeatures.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/UnwovenClassFile.java</file>
    </fixedFiles>
  </bug>
  <bug id="502119" reportTime="2016-09-26 02:03:00">
    <summary>InterTypeFieldBinding.java:122 - NullPointerException</summary>
    <description>---- Exception Information --- java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.lookup.InterTypeFieldBinding.canBeSeenBy InterTypeFieldBinding.java:122 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.findSingleStaticImport CompilationUnitScope.java:561 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.findSingleImport CompilationUnitScope.java:540 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.faultInImports CompilationUnitScope.java:418 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.faultInTypes CompilationUnitScope.java:466 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:869 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.processCompiledUnits Compiler.java:545 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:458 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1036 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:272 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:185 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:371 at org.aspectj.tools.ajc.Main.runMain Main.java:248 at org.aspectj.tools.ajc.Main.main Main.java:84 I am trying to compile the following: https://github.com/juherr/testng/commit/bb279d1c9816d54767c94acfa6b0272dda49553e</description>
    <commit commitTime="2016-11-10 14:07:57" id="e8be95bbfd291f93319d1a1e9920e44cd7eb7569"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeFieldBinding.java</file>
    </fixedFiles>
  </bug>
</BugReportRepository>
