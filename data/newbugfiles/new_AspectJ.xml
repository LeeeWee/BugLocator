<?xml version="1.0" encoding="UTF-8"?><BugReportRepository product="AspectJ">
  <bug id="28919" reportTime="2002-12-30 16:40:00">
    <summary>waever tries to weave into native methods ...</summary>
    <description>If you don't find the exception below in a bug, please add a new bug To make the bug a priority, please include a test program that can reproduce this exception. bad non-abstract method with no code: private native int nativeMessagePumpInitialize on public class plc.comm.pvi.PviCom$LinkEventHandlerImpl bad non-abstract method with no code: private native int nativeMessagePumpInitialize on public class plc.comm.pvi.PviCom$LinkEventHandlerImpl java.lang.RuntimeException: bad non-abstract method with no code: private native int nativeMessagePumpInitialize on public class plc.comm.pvi.PviCom$LinkEventHandlerImpl at org.aspectj.weaver.bcel.LazyMethodGen.&amp;lt;init&amp;gt; Unknown Source at org.aspectj.weaver.bcel.LazyClassGen.&amp;lt;init&amp;gt; Unknown Source at org.aspectj.weaver.bcel.BcelObjectType.getLazyClassGen Unknown Source at org.aspectj.weaver.bcel.BcelWeaver.weave Unknown Source at org.aspectj.weaver.bcel.BcelWeaver.weave Unknown Source at org.aspectj.ajdt.internal.core.builder.AjBuildManager.weaveAndGenerateClassFiles Unknown Source at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild Unknown Source at org.aspectj.ajdt.ajc.AjdtCommand.runCommand Unknown Source at org.aspectj.tools.ajc.Main.run Unknown Source at org.aspectj.tools.ajc.Main.runMain Unknown Source at org.aspectj.tools.ajc.Main.main Unknown Source</description>
    <commit commitTime="2003-01-14 20:02:43" id="2781720"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="29662" reportTime="2003-01-16 15:12:47">
    <summary>VerifyError on accessing objects not accessible to the weaver: Incompatible object argument for invokespecial</summary>
    <description>I use aspectj1.1b4 (the version list box did not let me choose, it offered only "unspecified"). Compiling the program below yields a warning that a affected type is not exposed to the weaver. Running it crashes the program with this message: "java.lang.VerifyError: (class: VerifyError, method: finalize signature: ()V) Incompatible object argument for invokespecial" public class VerifyError { public static void main(String args[]) { VerifyError ve = new VerifyError(); } protected void finalize() {} } aspect FinalizeContract { pointcut finalizeCall(Object o): this(Object+) &amp;&amp; this(o) &amp;&amp; execution(void finalize()); void around(Object o) throws Throwable: finalizeCall(o) { super.finalize(); proceed(o); } }</description>
    <commit commitTime="2003-01-22 07:00:00" id="2d297d7"/>
    <fixedFiles>
      <file>tests/bugs/AroundAccess.java</file>
    </fixedFiles>
  </bug>
  <bug id="30168" reportTime="2003-01-24 07:25:00">
    <summary>Error with certain combination of advice</summary>
    <description>This program causes the java VM to crash. It is a minimal example -- if you remove anything in the aspects it works. 1. PROGRAM CODE package test; import org.aspectj.lang.*; import org.aspectj.lang.reflect.*; public class Test3 { public static void main String[] args throws Exception { Test3 a = new Test3 ; a.foo -3 ; } public void foo int i { this.x=i; } int x; } aspect Log { pointcut assign Object newval, Object targ : set * test..* &amp;amp;&amp;amp; args newval &amp;amp;&amp;amp; target targ ; before Object newval, Object targ : assign newval,targ { Signature sign = thisJoinPoint.getSignature ; System.out.println targ.toString + "." + sign.getName + ":=" + newval ; } /* } // Different error message if you divide into two aspects aspect Tracing { */ pointcut tracedCall : call * test..* .. /* &amp;amp;&amp;amp; !within Tracing */ &amp;amp;&amp;amp; !within Log ; after returning Object o : tracedCall { // Works if you comment out either of these two lines thisJoinPoint.getSignature ; System.out.println thisJoinPoint ; } } 2. RESULTS ON SOLARIS [erik@oden test] java test.Test3 test.Test3@b8df17.x :=-3 Unexpected Signal : 11 occurred at PC=0xFA415A00 Function=[Unknown.] Library= N/A NOTE: We are unable to locate the function name symbol for the error just occurred. Please refer to release documentation for possible reason and solutions. Current Java thread: Dynamic libraries: 0x10000 java 0xff350000 /usr/lib/libthread.so.1 0xff390000 /usr/lib/libdl.so.1 0xff200000 /usr/lib/libc.so.1 0xff330000 /usr/platform/SUNW,Ultra-250/lib/libc_psr.so.1 0xfe000000 /usr/j2se/jre/lib/sparc/client/libjvm.so 0xff2e0000 /usr/lib/libCrun.so.1 0xff1e0000 /usr/lib/libsocket.so.1 0xff100000 /usr/lib/libnsl.so.1 0xff0d0000 /usr/lib/libm.so.1 0xff310000 /usr/lib/libw.so.1 0xff0b0000 /usr/lib/libmp.so.2 0xff080000 /usr/j2se/jre/lib/sparc/native_threads/libhpi.so 0xff050000 /usr/j2se/jre/lib/sparc/libverify.so 0xff020000 /usr/j2se/jre/lib/sparc/libjava.so 0xfe7e0000 /usr/j2se/jre/lib/sparc/libzip.so 0xfe5b0000 /usr/lib/locale/sv_SE/sv_SE.so.2 Local Time = Fri Jan 24 13:38:29 2003 Elapsed Time = 2 # # HotSpot Virtual Machine Error : 11 # Error ID : 4F530E43505002D3 01 # Please report this error at # http://java.sun.com/cgi-bin/bugreport.cgi # # Java VM: Java HotSpot TM Client VM 1.4.0-b92 mixed mode # # An error report file has been saved as hs_err_pid15099.log. # Please refer to the file for further information. # Abort [erik@oden test] [erik@oden test] /usr/j2se.old/bin/java test.Test3 test.Test3@1afa3.x :=-3 Unexpected Signal : 11 occurred at PC=0x85c24 Function name= N/A Library= N/A NOTE: We are unable to locate the function name symbol for the error just occurred. Please refer to release documentation for possible reason and solutions. Current Java thread: Dynamic libraries: 0x10000 /usr/j2se.old/bin/../bin/sparc/native_threads/java 0xff350000 /usr/lib/libthread.so.1 0xff390000 /usr/lib/libdl.so.1 0xff200000 /usr/lib/libc.so.1 0xff330000 /usr/platform/SUNW,Ultra-250/lib/libc_psr.so.1 0xfe480000 /usr/j2se.old/jre/lib/sparc/client/libjvm.so 0xff2e0000 /usr/lib/libCrun.so.1 0xff1e0000 /usr/lib/libsocket.so.1 0xff100000 /usr/lib/libnsl.so.1 0xff0d0000 /usr/lib/libm.so.1 0xff310000 /usr/lib/libw.so.1 0xff0b0000 /usr/lib/libmp.so.2 0xff080000 /usr/j2se.old/jre/lib/sparc/native_threads/libhpi.so 0xff050000 /usr/j2se.old/jre/lib/sparc/libverify.so 0xfe440000 /usr/j2se.old/jre/lib/sparc/libjava.so 0xff020000 /usr/j2se.old/jre/lib/sparc/libzip.so 0xfe260000 /usr/lib/locale/sv_SE/sv_SE.so.2 Local Time = Fri Jan 24 13:39:20 2003 Elapsed Time = 2 # # HotSpot Virtual Machine Error : 11 # Error ID : 4F530E43505002C4 01 # Please report this error at # http://java.sun.com/cgi-bin/bugreport.cgi # # Java VM: Java HotSpot TM Client VM 1.3.1_02-b02 mixed mode # # An error report file has been saved as hs_err_pid15100.log. # Please refer to the file for further information. # Abort [erik@oden test] 3. RESULTS ON WINDOWS 2000 Results on Windows 2000 If I have copied it correctly &amp;gt;java -classpath ..\..\aspectj1.1\lib\aspectjrt.jar;. test.Test3 test.Test3@1a8c4e7.x :=-3 Exception in thread "main" java.lang.NullPointerException at test.Log.ajc$afterReturning$test_Log$30d Test3.java:37 at test.Test3.main Test3.java:8 &amp;gt;java -version java version "1.4.1_01" Java TM 2 Runtime Environment, Standard Edition build 1.4.1_01-b01 Java HotSpot TM Client VM build 1.4.1_01-b01, mixed mode java</description>
    <commit commitTime="2003-02-13 22:00:34" id="d15eb32"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ThisJoinPointVisitor.java</file>
    </fixedFiles>
  </bug>
  <bug id="30026" reportTime="2003-01-22 17:06:50">
    <summary>NullPointerException when compiling</summary>
    <description>With the following program I get a NullPointerException during compiling and a warning that the source code of Object is not available for weaving: public class NullPtr { public static void main(String args[]) { NullPtr np = new NullPtr(); np = null; } public void finalize() throws Throwable { } } aspect FinalizeContract { pointcut finalizeCall(Object o): this(Object+) &amp;&amp; this(o) &amp;&amp; execution(void finalize()); void around(Object o) throws Throwable: finalizeCall(o) { o.finalize(); // error ((NullPtr) o).finalize(); // ok proceed(o); } } It works if I comment out the line indicated by the // error comment or if I declare the aspect as privileged.</description>
    <commit commitTime="2003-02-14 10:33:20" id="8e6cef0"/>
    <fixedFiles>
      <file>tests/bugs/Finalizer.java</file>
    </fixedFiles>
  </bug>
  <bug id="33948" reportTime="2003-03-06 02:48:01">
    <summary>inter-type no-arg constructor declaration conflict with compiler-generated constructor</summary>
    <description>Get error "inter-type declaration from A conflicts with existing member" when declaring a no-arg constructor in an aspect on another type which has no constructors. Likely the compiler is generating a default constructor which collides in the weaver. See test case: tests/bugs/ConstructorDeclaration.java Can the weaver reliably check that a default constructor was generated by the compiler (ours or javac or ...)? Otherwise, this could be a known limitation.</description>
    <commit commitTime="2003-03-06 16:40:00" id="6a8fa08"/>
    <fixedFiles>
      <file>tests/bugs/ConstructorDeclaration.java</file>
    </fixedFiles>
  </bug>
  <bug id="32421" reportTime="2003-02-20 17:33:00">
    <summary>can't resolve nested public interfaces</summary>
    <description>This may be caused by the bug as 32399 file TransactionTest.java: import sub.ExecutionMonitor; public class TransactionTest { static Transaction theTransaction; private void assertCommitted { theTransaction.getCount "method-execution", "commit" ; } static aspect MonitorTest { declare parents: Transaction implements ExecutionMonitor.MonitoredItem; } } class Transaction { } file sub/ExecutionMonitor.aj: package sub; public aspect ExecutionMonitor { public interface MonitoredItem { int getCount String eventType, String eventName ; } public int MonitoredItem.getCount String eventType, String eventName { return 0; } } sample compilation: C:\devel&amp;gt;ajc -1.4 TransactionTest.java sub\ExecutionMonitor.aj can't bind type name 'ExecutionMonitor$MonitoredItem' C:/devel/TransactionTest.java:7: The method getCount java.lang.String, java.lang .String is undefined for the type Transaction theTransaction.getCount "method-execution", "commit" ; ^^^^^^^^ 2 errors</description>
    <commit commitTime="2003-03-06 22:12:00" id="0a175d2"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseScope.java</file>
      <file>tests/new/EachObjectInDeepPackage.java</file>
    </fixedFiles>
  </bug>
  <bug id="32239" reportTime="2003-02-19 10:07:00">
    <summary>Dumps assembly code if Object[] used in args BcelRenderer.java:152</summary>
    <description>PROGRAM import org.aspectj.lang.*; import java.lang.reflect.*; import org.aspectj.lang.reflect.*; public class Test4 { public static void main String[] args throws Exception { Test4 t = new Test4 ; System.out.println t.foo "a" ; } String foo Object s { return "x"+s; } } aspect profile { // It's the [] that is offending the compiler Object around Object targ, Object[] x : call * * .. &amp;amp;&amp;amp; target targ &amp;amp;&amp;amp; !within profile &amp;amp;&amp;amp; args x { System.out.println "" + targ + "," + x ; return proceed targ,x ; } } RESULT OF COMPILATION [erik@oden test] ajc Test4.java trouble in: public class Test4 extends java.lang.Object: public void &amp;lt;init&amp;gt; : ALOAD_0 // Test4 this line 5 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V constructor-execution void Test4.&amp;lt;init&amp;gt; | RETURN constructor-execution void Test4.&amp;lt;init&amp;gt; end public void &amp;lt;init&amp;gt; public static void main String[] throws java.lang.Exception: method-execution void Test4.main java.lang.String[] | NEW Test4 line 7 | DUP | constructor-call void Test4.&amp;lt;init&amp;gt; | | INVOKESPECIAL Test4.&amp;lt;init&amp;gt; V | constructor-call void Test4.&amp;lt;init&amp;gt; | ASTORE_1 | field-get java.io.PrintStream java.lang.System.out | | GETSTATIC java.lang.System.out Ljava/io/PrintStream; line 8 | field-get java.io.PrintStream java.lang.System.out | ALOAD_1 // Test4 t | LDC "a" | ASTORE_2 | ASTORE_3 | method-call void java.io.PrintStream.println java.lang.String | | INVOKEVIRTUAL java.io.PrintStream.println Ljava/lang/String; V | method-call void java.io.PrintStream.println java.lang.String | RETURN line 9 method-execution void Test4.main java.lang.String[] end public static void main String[] throws java.lang.Exception String foo Object : method-execution java.lang.String Test4.foo java.lang.Object | NEW java.lang.StringBuffer line 11 | DUP | LDC "x" | constructor-call void java.lang.StringBuffer.&amp;lt;init&amp;gt; java.lang.String | | INVOKESPECIAL java.lang.StringBuffer.&amp;lt;init&amp;gt; Ljava/lang/String; V | constructor-call void java.lang.StringBuffer.&amp;lt;init&amp;gt; java.lang.String | ALOAD_1 // java.lang.Object s | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.Object | | INVOKEVIRTUAL java.lang.StringBuffer.append Ljava/lang/Object; Ljava/lang/StringBuffer; | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.Object | method-call java.lang.String java.lang.StringBuffer.toString | | INVOKEVIRTUAL java.lang.StringBuffer.toString Ljava/lang/String; | method-call java.lang.String java.lang.StringBuffer.toString | ARETURN method-execution java.lang.String Test4.foo java.lang.Object end String foo Object static final String foo_aroundBody0 Test4, Object : ALOAD_0 ALOAD_1 INVOKEVIRTUAL Test4.foo Ljava/lang/Object; Ljava/lang/String; line 8 ARETURN end static final String foo_aroundBody0 Test4, Object end public class Test4 Exception thrown from AspectJ 1.1beta4 This might be logged as a bug already -- see the bug database at http://dev.eclipse.org product: AspectJ, component: compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug To make the bug a priority, please include a test program that can reproduce this exception. org.apache.bcel.generic.ArrayType org.apache.bcel.generic.ArrayType java.lang.ClassCastException: org.apache.bcel.generic.ArrayType at org.aspectj.weaver.bcel.BcelRenderer.visit BcelRenderer.java:152 at org.aspectj.weaver.ast.Instanceof.accept Instanceof.java:29 at org.aspectj.weaver.bcel.BcelRenderer.recur BcelRenderer.java:128 at org.aspectj.weaver.bcel.BcelRenderer.renderTest BcelRenderer.java:94 at org.aspectj.weaver.bcel.BcelAdvice.getTestInstructions BcelAdvice.java:271 at org.aspectj.weaver.bcel.BcelShadow.weaveAroundInline BcelShadow.java:1199 at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:117 at org.aspectj.weaver.Shadow.implementMungers Shadow.java:306 at org.aspectj.weaver.Shadow.implement Shadow.java:278 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:917 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:244 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:35 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:312 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:264 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.weaveAndGenerateClassFiles AjBuildManager.java:351 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager. java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:54 at org.aspectj.tools.ajc.Main.run Main.java:199 at org.aspectj.tools.ajc.Main.runMain Main.java:138 at org.aspectj.tools.ajc.Main.main Main.java:58 1 fail|abort</description>
    <commit commitTime="2003-03-11 06:06:56" id="ae0ef30"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelRenderer.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/Utility.java</file>
    </fixedFiles>
  </bug>
  <bug id="29934" reportTime="2003-01-21 20:13:00">
    <summary>runtime NullPointerException when applying around advice to other around advice</summary>
    <description>When the program below is run, it produces a NullPointerException... java.lang.NullPointerException at A2.ajc$around$A2$3b6proceed CflowCycles.java at A2.ajc$around$A2$3b6_aroundBody3 CflowCycles.java:35 at Target.run CflowCycles.java:24 at CflowCycles.run_aroundBody4 CflowCycles.java:8 at CflowCycles.main_aroundBody6 CflowCycles.java:24 at CflowCycles.main CflowCycles.java:24 --- in new/CflowCycles.java and in ajcTestsFailing.xml import org.aspectj.testing.Tester; /** @testcase cflow cycles in advice from different aspects */ public class CflowCycles { public static void main String args[] { Tester.expectEvent "target A1" ; Tester.expectEvent "target A2" ; new Target .run ; Tester.checkAllEventsIgnoreDups ; } } class Target { public void run { } } aspect A1 { pointcut TargetRunFlow // ok if no cflow: within Target &amp;amp;&amp;amp; execution * * .. &amp;amp;&amp;amp; !within A1+ ; : !within A1+ &amp;amp;&amp;amp; !preinitialization new .. &amp;amp;&amp;amp; !initialization new .. //cflow within Target &amp;amp;&amp;amp; execution * * .. &amp;amp;&amp;amp; !within A1+ ; Object around : TargetRunFlow { Tester.event "target A1" ; return proceed ; } // ok if in the same class } aspect A2 { pointcut TargetRun : within Target &amp;amp;&amp;amp; execution * * .. &amp;amp;&amp;amp; !within A2+ ; ; Object around : TargetRun { Tester.event "target A2" ; return proceed ; } }</description>
    <commit commitTime="2003-03-12 00:48:57" id="0fb5f69"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="34925" reportTime="2003-03-13 11:58:00">
    <summary>compiler crash on yesterday's rc1 build</summary>
    <description>These test files crash the compiler in fact if you just compile ConvertToUnchecked it crashes it : ConvertToUnchecked.java: import java.io.IOException; // example 3 aspect ConvertToUnchecked { // make all exceptions in an application unchecked; "soft" //declare soft: Exception &amp;amp;&amp;amp; !RuntimeException : within com.foo.app..* ; // convert IOExceptions in a package to PersistenceException pointcut module : within test.* ; // within com.foo.framework.persistence.* ; // convert exceptions // within test.* would work to allow an immediate catch, except for // the last statement in a try block // however, I suspect that would also generate inefficient code // even this might be inefficient: it needs to wrap every method body in a // try ... catch block after throwing IOException e : within test.* { throw new PersistenceException e ; } declare soft: IOException : module ; } // tested by: test.ConvertToUnchecked ---- PersistenceException.java public class PersistenceException extends Exception { public PersistenceException Throwable cause { super cause ; } } --- sample run: C:\ron\devel\articles\errorHandling&amp;gt;ajc -1.4 ConvertToUnchecked.java Persistence Exception.java java.lang.RuntimeException: unimplemented: throw new PersistenceException e at org.aspectj.ajdt.internal.compiler.lookup.EclipseShadow.makeShadow Ec lipseShadow.java:148 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeShadow E clipseFactory.java:292 at org.aspectj.ajdt.internal.compiler.problem.AjProblemReporter.unhandle dException AjProblemReporter.java:67 at org.eclipse.jdt.internal.compiler.flow.FlowContext.checkExceptionHand lers FlowContext.java:249 at org.eclipse.jdt.internal.compiler.ast.ThrowStatement.analyseCode Thro wStatement.java:35 at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.analy seCode AbstractMethodDeclaration.java:106 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode Typ eDeclaration.java:445 at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.anal yseCode CompilationUnitDeclaration.java:76 at org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:539 at org.aspectj.ajdt.internal.compiler.AjCompiler.process AjCompiler.java :65 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:340 at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile Ab stractImageBuilder.java:232 at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile Ab stractImageBuilder.java:171 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$BatchBuilder.ru n AjBuildManager.java:656 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:139 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:55 at org.aspectj.tools.ajc.Main.run Main.java:216 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 C:\ron\devel\articles\errorHandling\ConvertToUnchecked.java:0 Internal compiler error java.lang.RuntimeException: unimplemented: throw new PersistenceException e at org.aspectj.ajdt.internal.compiler.lookup.EclipseShadow.makeShadow Ec lipseShadow.java:148 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeShadow E clipseFactory.java:292 at org.aspectj.ajdt.internal.compiler.problem.AjProblemReporter.unhandle dException AjProblemReporter.java:67 at org.eclipse.jdt.internal.compiler.flow.FlowContext.checkExceptionHand lers FlowContext.java:249 at org.eclipse.jdt.internal.compiler.ast.ThrowStatement.analyseCode Thro wStatement.java:35 at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.analy seCode AbstractMethodDeclaration.java:106 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode Typ eDeclaration.java:445 at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.anal yseCode CompilationUnitDeclaration.java:76 at org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:539 at org.aspectj.ajdt.internal.compiler.AjCompiler.process AjCompiler.java :65 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:340 at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile Ab stractImageBuilder.java:232 at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile Ab stractImageBuilder.java:171 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$BatchBuilder.ru n AjBuildManager.java:656 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:139 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:55 at org.aspectj.tools.ajc.Main.run Main.java:216 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 !! no source information available !! ABORT Exception thrown from AspectJ 1.1rc1 This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. unimplemented: throw new PersistenceException e unimplemented: throw new PersistenceException e java.lang.RuntimeException: unimplemented: throw new PersistenceException e at org.aspectj.ajdt.internal.compiler.lookup.EclipseShadow.makeShadow Ec lipseShadow.java:148 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeShadow E clipseFactory.java:292 at org.aspectj.ajdt.internal.compiler.problem.AjProblemReporter.unhandle dException AjProblemReporter.java:67 at org.eclipse.jdt.internal.compiler.flow.FlowContext.checkExceptionHand lers FlowContext.java:249 at org.eclipse.jdt.internal.compiler.ast.ThrowStatement.analyseCode Thro wStatement.java:35 at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.analy seCode AbstractMethodDeclaration.java:106 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode Typ eDeclaration.java:445 at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.anal yseCode CompilationUnitDeclaration.java:76 at org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:539 at org.aspectj.ajdt.internal.compiler.AjCompiler.process AjCompiler.java :65 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:340 at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile Ab stractImageBuilder.java:232 at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile Ab stractImageBuilder.java:171 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$BatchBuilder.ru n AjBuildManager.java:656 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:139 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:55 at org.aspectj.tools.ajc.Main.run Main.java:216 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 1 fail|abort, 1 error</description>
    <commit commitTime="2003-03-13 19:16:53" id="56cc4f2"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseShadow.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
    </fixedFiles>
  </bug>
  <bug id="36046" reportTime="2003-04-03 18:21:00">
    <summary>inter-type declaration bug with abstract classes</summary>
    <description>This error occurs when you do an inter-type declaration on an interface, use declare parents to make an abstract base class implement it, and then try to use the declared method , it fails. If you make the base class concrete, then this doesn't fail. The following code demonstrates the error. If you run java Driver you get: java.lang.AbstractMethodError: Derived.getExecutions Ljava/lang/String; I at Driver.main Driver.java:23 Exception in thread "main" public class Driver { public static void main String args[] { Derived generator = new Derived ; System.out.println generator.getExecutions "processEvents" ; } static aspect MonitorBase { declare parents: Base implements ExecutionMonitor.MonitoredItem; } } class Derived extends Base { public String getName { return null; } } abstract class Base { abstract public String getName ; } aspect ExecutionMonitor { /** marker interface to indicate the execution monitor should track calls and executions on this class. */ public interface MonitoredItem { int getExecutions String methodName ; } /** a Map of events to mutable integers */ public int MonitoredItem.getExecutions String methodName { return 0; } }</description>
    <commit commitTime="2003-04-10 22:20:14" id="808bae8"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="35725" reportTime="2003-03-26 15:16:24">
    <summary>Inter type declaration to base class not seen by derived class</summary>
    <description>The following code shows what I believe is an incorrect error - the base class AImpl is made concrete by the aspect Af, but the compilation of BImpl does not recognize this fact. This problem is for version 1.1rc1 and is not seen in 1.0.6. // --------------------- // A.java package a_intf; public interface A { A f(); } // --------------------- // AImpl.java package a_impl; import a_intf.A; public class AImpl implements A { } // --------------------- // Af.java package a_impl; import a_intf.A; aspect Af { public A AImpl.f() { System.out.println( "f called" ); return null; } } // --------------------- // B.java package b_intf; import a_intf.A; public interface B extends A { B g(); } // --------------------- // BImpl.java package b_impl; import a_impl.AImpl; import b_intf.B; public class BImpl extends AImpl implements B { public B g() { System.out.println( "g called" ); return null; } } // Compiler Error: // BImpl.java:7 Class must implement the inherited abstract method a_intf.A.f()</description>
    <commit commitTime="2003-04-11 05:26:40" id="11b3b07"/>
    <fixedFiles>
      <file>tests/bugs/interInherit/a_impl/AImpl.java</file>
      <file>tests/bugs/interInherit/a_impl/Af.java</file>
      <file>tests/bugs/interInherit/a_intf/A.java</file>
      <file>tests/bugs/interInherit/b_impl/BImpl.java</file>
      <file>tests/bugs/interInherit/b_intf/B.java</file>
    </fixedFiles>
  </bug>
  <bug id="36564" reportTime="2003-04-16 08:42:00">
    <summary>Internal compiler error</summary>
    <description>Eclipse: 2.1.0, 200302211557 AspectJ: 1.1.1 I get the following internal error when using "thisJoinPoint.getStaticPart " in around advice at a call joinpoit source below . Using just "thisJoinPoint" is fine. java.lang.NullPointerException at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode MessageSend.java:40 at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode MessageSend.java:44 at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.analyseCode AbstractMethodDeclaration.java:106 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode TypeDeclaration.java:445 at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.analyseCode CompilationUnitDeclaration.java:76 at org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:539 at org.aspectj.ajdt.internal.compiler.AjCompiler.process AjCompiler.java:65 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:340 at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile AbstractImageBuilder.java:232 at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile AbstractImageBuilder.java:171 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$BatchBuilder.run AjBuildManager.java:655 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:139 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:92 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:213 Exceptions.java AspectJ Bugs/src/compiler Source: package compiler; import java.io.*; /** * @author websterm * * To change this generated comment go to * Window&amp;gt;Preferences&amp;gt;Java&amp;gt;Code Generation&amp;gt;Code and Comments */ public class Test { public static void main String[] args throws Exception{ FileInputStream in = new FileInputStream "test" ; } } /* * Created on 14-Apr-03 * * To change this generated comment go to * Window&amp;gt;Preferences&amp;gt;Java&amp;gt;Code Generation&amp;gt;Code and Comments */ package compiler; import java.io.*; import org.aspectj.lang.*; /** * @author websterm * * To change this generated comment go to * Window&amp;gt;Preferences&amp;gt;Java&amp;gt;Code Generation&amp;gt;Code and Comments */ public aspect Exceptions { pointcut exceptionMethods : call * java.io.*.* .. throws IOException ; Object around throws IOException : exceptionMethods &amp;amp;&amp;amp; !within Exceptions { Object obj = proceed ; System.out.println thisJoinPoint.getStaticPart ; return obj; } }</description>
    <commit commitTime="2003-04-22 17:55:13" id="0a8dbde"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ThisJoinPointVisitor.java</file>
    </fixedFiles>
  </bug>
  <bug id="29665" reportTime="2003-01-16 15:18:00">
    <summary>Inconsistant stack height</summary>
    <description>Using AspectJ1.1b4 running the following program crashes it with this message: "Inconsistent stack height 0 != 2". While reducing my original program to the minimum example below I had also stack height 0 != 1, but I guess that is related, so I didn't reproduce it mail me if this you need this, too . mport java.lang.reflect.Method; public class StackError { public static void main String args[] {} void assertTrue String msg, boolean b {} public void testEqualsNull { StackError one = new StackError ; StackError two = new StackError ; assertTrue "equal", one.equals two ; // does not work boolean yes = one.equals two ; // works } public boolean equals Object other { return true; } } aspect EqualsContract { pointcut equalsCall Object thisOne, Object otherOne : target Object+ &amp;amp;&amp;amp; target thisOne &amp;amp;&amp;amp; call public boolean equals Object+ &amp;amp;&amp;amp; args otherOne &amp;amp;&amp;amp; !within EqualsContract ; boolean around Object thisOne, Object otherOne : equalsCall thisOne, otherOne { boolean result = proceed thisOne, otherOne ; Class cls = thisOne.getClass ; String name = cls.getName ; boolean hasHashCode = false; try { Method m = cls.getDeclaredMethod "hashCode", null ; String lookFor = "public int " + name + ".hashCode "; hasHashCode = lookFor.equals m.toString ; } catch NoSuchMethodException nsme {} return result; } } The program does not crash if you comment out the line indicated with the "does not work" comment. Note the line below that comment "works" does work.</description>
    <commit commitTime="2003-04-22 21:58:02" id="6c9118b"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="34951" reportTime="2003-03-13 14:38:00">
    <summary>NPE compiling without aspectjrt.jar</summary>
    <description>Compiling spacewar without specifying aspectjrt.jar on the classpath causes a NPE. Expected an error message "aspectjrt.jar required". Steps to reproduce 1 install latest 2 cd doc/examples 3 java -jar ../../lib/aspectjtools.jar -verbose @spacewar/debug.lst RESULT:NPE in attached log</description>
    <commit commitTime="2003-04-27 23:29:27" id="f236927"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BasicCommandTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="36936" reportTime="2003-04-25 16:36:56">
    <summary>Error when introducing members of type Class</summary>
    <description>Using AspectJ 1.1 RC1 public aspect Asp { public Class Trg.member = String.class; } public class Trg { public static void main(String args[]) { new Trg(); System.out.println("All ok"); } } Compiling with "ajc Asp.java Trg.java" and running Trg, prints "All ok", as it should. Compiling with "ajc Trg.java Asp.java" and running Trg gives: Exception in thread "main" java.lang.NoSuchFieldError: class$0 at Asp.ajc$interFieldInit$Asp$Trg$member(Asp.java:2) at Trg.&lt;init&gt;(Trg.java:1) at Trg.main(Trg.java:3) Note, introduced field must be of type Class, or array of Classes, works fine else.</description>
    <commit commitTime="2003-04-28 08:33:20" id="8d793a3"/>
    <fixedFiles>
      <file>tests/bugs/interSpecials/Asp.java</file>
      <file>tests/bugs/interSpecials/Trg.java</file>
    </fixedFiles>
  </bug>
  <bug id="37021" reportTime="2003-04-28 15:03:42">
    <summary>source path wrong in declare warning on binary files</summary>
    <description>In declare warning messages when targeting .class files from -injars, the source path is listed in the form "app.Main.class" rather than "app/Main.[java|aj]". See tests/new/binaryWarnings/.. for code to run to see the problem. Limitations of the tests: - These tests return false positives when detecting this error because filename checking is not enabled in harness verification of messages. - I have also see the filenames not appear at all, but these tests do not reproduce that problem. (I saw it in AJDT, so perhaps if the filename makes no sense to AJDT, AJDT simply omits it.)</description>
    <commit commitTime="2003-04-29 04:00:00" id="9b30f9f"/>
    <fixedFiles>
      <file>tests/new/binaryWarnings/src/app/Main.java</file>
      <file>tests/new/binaryWarnings/src/aspects/MainWarnings.java</file>
    </fixedFiles>
  </bug>
  <bug id="37739" reportTime="2003-05-15 21:20:00">
    <summary>Unexpected Xlint:unresolvableMember warning with withincode</summary>
    <description>The following code produces an Xlint:unresolvableMember warning: class A { A Class type {} A { this String.class ; } } class B { public void test { } public void test2 { test ; } } aspect C { void around : call void B.test &amp;amp;&amp;amp; withincode void B.test2 { proceed ; } } The warning text is: Warning.java:22 can not resolve this member: void A.&amp;lt;catch&amp;gt; java.lang.ClassNotFoundException [Xlint:unresolvableMember] Line 22 is the line in the aspect that says "withincode". If I comment out the aspect, the warning goes away. Also, if I comment out A's default constructor, it goes away. The "String.class" seems to have something to do with the warning. I can reproduce this with 1.1rc1 and 1.1rc2.</description>
    <commit commitTime="2003-05-19 18:06:04" id="2072ac1"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="38131" reportTime="2003-05-27 01:46:00">
    <summary>ajc needs -d . option while correctly compiling classes from subpackage</summary>
    <description>I am using 1.1rc1. This is a regression since rc1 and a deviation from javac. I am guessing this may have to do something with change in the underlying Eclipse compiler. Create a class in a subpackage such as: package subpackage; public class Test { public static void main String[] args { System.out.println "Hello" ; } } Then compile using following command: &amp;gt; ajc subpackage\Test.java You will see a directory "subpackage" created under the existing "subpackage" directory. The test.class is then put in subpackage\subpackage directory. This means running java command results in Exception in thread "main" java.lang.NoClassDefFoundError: subpackage/Test Running either of the following command fixes the problem: &amp;gt; ajc -d . subpackage\Test.java or &amp;gt; javac subpackage\Test.java No big deal, really. But it will be nice to have same behavior as javac.</description>
    <commit commitTime="2003-05-27 17:35:13" id="c509c6f"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BasicCommandTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="39458" reportTime="2003-06-29 23:42:00">
    <summary>Compiler crash in ajc 1.1</summary>
    <description>Here is the compiler output. Source code below. --- C:\devel\test\entAJtutorial\test&amp;gt;ajc Processing.java C:\devel\test\entAJtutorial\test\Processing.java:17 this affected type is not ex posed to the weaver: java.lang.Void needed for privileged access [Xlint:typeNo tExposedToWeaver] java.lang.NullPointerException at org.eclipse.jdt.internal.compiler.lookup.SyntheticAccessMethodBinding .initializeConstructorAccessor SyntheticAccessMethodBinding.java:215 at org.eclipse.jdt.internal.compiler.lookup.SyntheticAccessMethodBinding .&amp;lt;init&amp;gt; SyntheticAccessMethodBinding.java:136 at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.addSynthet icMethod SourceTypeBinding.java:332 at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.manageSynt heticAccessIfNecessary AllocationExpression.java:200 at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.analyseCod e AllocationExpression.java:60 at org.eclipse.jdt.internal.compiler.ast.ReturnStatement.analyseCode Ret urnStatement.java:37 at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode Block.java:41 at org.eclipse.jdt.internal.compiler.ast.IfStatement.analyseCode IfState ment.java:84 at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode M ethodDeclaration.java:70 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyse Code TypeDeclaration.java:639 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode Typ eDeclaration.java:196 at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.anal yseCode CompilationUnitDeclaration.java:78 at org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:541 at org.aspectj.ajdt.internal.compiler.AjCompiler.process AjCompiler.java :65 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:338 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:372 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:133 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:78 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:106 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 C:\devel\test\entAJtutorial\test\Processing.java:0 Internal compiler error java.lang.NullPointerException at org.eclipse.jdt.internal.compiler.lookup.SyntheticAccessMethodBinding .initializeConstructorAccessor SyntheticAccessMethodBinding.java:215 at org.eclipse.jdt.internal.compiler.lookup.SyntheticAccessMethodBinding .&amp;lt;init&amp;gt; SyntheticAccessMethodBinding.java:136 at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.addSynthet icMethod SourceTypeBinding.java:332 at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.manageSynt heticAccessIfNecessary AllocationExpression.java:200 at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.analyseCod e AllocationExpression.java:60 at org.eclipse.jdt.internal.compiler.ast.ReturnStatement.analyseCode Ret urnStatement.java:37 at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode Block.java:41 at org.eclipse.jdt.internal.compiler.ast.IfStatement.analyseCode IfState ment.java:84 at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode M ethodDeclaration.java:70 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyse Code TypeDeclaration.java:639 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode Typ eDeclaration.java:196 at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.anal yseCode CompilationUnitDeclaration.java:78 at org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:541 at org.aspectj.ajdt.internal.compiler.AjCompiler.process AjCompiler.java :65 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:338 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:372 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:133 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:78 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:106 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 !! no source information available !! ABORT Exception thrown from AspectJ 1.1.0 This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. null java.lang.NullPointerException at org.eclipse.jdt.internal.compiler.lookup.SyntheticAccessMethodBinding .initializeConstructorAccessor SyntheticAccessMethodBinding.java:215 at org.eclipse.jdt.internal.compiler.lookup.SyntheticAccessMethodBinding .&amp;lt;init&amp;gt; SyntheticAccessMethodBinding.java:136 at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.addSynthet icMethod SourceTypeBinding.java:332 at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.manageSynt heticAccessIfNecessary AllocationExpression.java:200 at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.analyseCod e AllocationExpression.java:60 at org.eclipse.jdt.internal.compiler.ast.ReturnStatement.analyseCode Ret urnStatement.java:37 at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode Block.java:41 at org.eclipse.jdt.internal.compiler.ast.IfStatement.analyseCode IfState ment.java:84 at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode M ethodDeclaration.java:70 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyse Code TypeDeclaration.java:639 at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode Typ eDeclaration.java:196 at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.anal yseCode CompilationUnitDeclaration.java:78 at org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:541 at org.aspectj.ajdt.internal.compiler.AjCompiler.process AjCompiler.java :65 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:338 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:372 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:133 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:78 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:106 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 1 fail|abort, 1 error, 1 warning Processing.java source: --- import org.aspectj.lang.*; import org.aspectj.lang.reflect.*; import java.lang.reflect.Method; public aspect Processing { Object around : call new .. { return proceed ; } Object around : call * * .. { MethodSignature sig = MethodSignature thisJoinPoint.getSignature ; Class returnType = sig.getReturnType ; if returnType == java.lang.Void.TYPE { return new java.lang.Void ; // this works if you make it null } } }</description>
    <commit commitTime="2003-07-02 23:12:18" id="ba41fae"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AdviceDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/PrivilegedHandler.java</file>
    </fixedFiles>
  </bug>
  <bug id="39993" reportTime="2003-07-13 15:02:00">
    <summary>ajc stack trace on declaring hashcode method in aspect</summary>
    <description>From an email sent to the user's list 6/26/2003: ------------------------------------------ ajc 1.1 NPE when an aspect declares hashcode as follows: interface Identifiable { void setId Id id ; Id getId ; } aspect IdentifiableAspect { private Id Identifiable.id = null; public Id Identifiable.getId { return this.id; } public void Identifiable.setId Id id { this.id = id; } public int Identifiable.hashCode { return this.getId == null ? super.hashCode : this.getId .hashCode ; } } A workaround for callers the compiler controls is to replace the declaration with around advice: int around Identifiable i : target i &amp;amp;&amp;amp; call public int hashCode { return i.getId == null ? proceed i : i.getId .hashCode ; }</description>
    <commit commitTime="2003-07-22 20:57:17" id="026b272"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeDeclaration.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="39842" reportTime="2003-07-09 19:31:00">
    <summary>allow use of an environment variable to set compiler arguments</summary>
    <description>I'm trying to create a special jsp compilation servlet in Tomcat 4.x that uses the aspectj compiler. I can plug in the compiler adapter, but I don't have control of the ant code they use to invoke the compiler, so I'd like to use an environment variable to do this apparently the only mechanism they do support . I'm doing this so I can pass an aspectpath in to weave aspects into the compiled jsp servlet.</description>
    <commit commitTime="2003-07-26 04:13:54" id="2502ee5"/>
    <fixedFiles>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</file>
      <file>taskdefs/testsrc/org/aspectj/tools/ant/taskdefs/AjcTaskTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="39959" reportTime="2003-07-11 16:01:33">
    <summary>AJC Compiler generates invalid class files under certain circunstances.</summary>
    <description>I made a package (I will attach it to this bug with the name bug.zip) which shows a sample Java program that correctly runs when compiled with javac and have classloading problems every time it is compiled with ajc. Please see the file README.TO.DEMONSTRATE.BUG inside the bug.zip archive for detailed (although simple) instructions on reproducing the bug. There are two shell scripts attached to make things easier. Please keep me informed of the status of this issue.</description>
    <commit commitTime="2003-07-29 20:00:00" id="ee03a3e"/>
    <fixedFiles>
      <file>tests/bugs/bootstrapClasspath/UsesDOMParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="38717" reportTime="2003-06-10 12:03:00">
    <summary>".lst" file parsing errors should include sourceline information</summary>
    <description>To check for this bug add an erroneous line to an ".lst" file and compile it with AJDE. The error message returned is project-specific. It should be specific to the ".lst" file in which the error originated i.e. the message needs a SourceLocation .</description>
    <commit commitTime="2003-07-30 17:29:44" id="a26cac9"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/AjdtCommand.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="41170" reportTime="2003-08-05 20:19:15">
    <summary>-classpath entries in .lst files overwrite command-line -classpath entries</summary>
    <description>If the command-line specifies both a -classpath entry and a .lst file with a -classpath entry, the .lst file entry seems to replace rather than supplement the command-line entry. I expect options to be cumulative. See tests/bugs/options/classpath</description>
    <commit commitTime="2003-08-06 08:33:20" id="40fb451"/>
    <fixedFiles>
      <file>tests/bugs/options/classpath/Client.java</file>
      <file>tests/bugs/options/classpath/lib/Library.java</file>
    </fixedFiles>
  </bug>
  <bug id="40257" reportTime="2003-07-16 15:06:00">
    <summary>parsing of "../" paths in LST files is broken</summary>
    <description>Relative paths e.g. "../" are no longer parser properly in AJDE 1.1.0.</description>
    <commit commitTime="2003-08-07 08:10:01" id="acdf688"/>
    <fixedFiles>
      <file>ajde/src/org/aspectj/ajde/ui/swing/CompilerMessagesCellRenderer.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/AjdtAjcTests.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/ajc/BuildArgParserTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="41123" reportTime="2003-08-05 00:39:00">
    <summary>Weaving failure when using injars</summary>
    <description>Sample run that fails using injars: C:\devel\test\libraryWeave&amp;gt;ajc ajee\testing\ExecutionMonitor.aj C:\devel\test\libraryWeave&amp;gt;jar cf ajee.jar ajee\testing\*.class C:\devel\test\libraryWeave&amp;gt;ajc -injars ajee.jar model\BusObj.java model\MonitorB usObj.java C:\devel\test\libraryWeave\model\BusObj.java:3 Class must implement the inherite d abstract method ExecutionMonitor.MonitoredItem.ajc$interMethodDispatch2 $ajee_t esting_ExecutionMonitor$record String, String public class BusObj { ^^^^^^ 1 error It works in a single pass compilation: C:\devel\test\libraryWeave&amp;gt;ajc ajee\testing\ExecutionMonitor.aj model\BusObj.jav a model\MonitorBusObj.java C:\devel\test\libraryWeave&amp;gt; Sample source code: package ajee.testing; public aspect ExecutionMonitor { public interface MonitoredItem {} private void MonitoredItem.record String eventType, String eventName {} } --- package model; public class BusObj { } --- package model; import ajee.testing.ExecutionMonitor; public aspect MonitorBusObj { declare parents: BusObj implements ExecutionMonitor.MonitoredItem; }</description>
    <commit commitTime="2003-08-08 01:23:31" id="3e59745"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="39436" reportTime="2003-06-27 14:32:00">
    <summary>[Tasks] No summary shown in status line</summary>
    <description>build I20030625 The old tasks view showed a summary of the number of tasks, errors, warnings and infos in the status line. This is missing in the reworked view.</description>
    <commit commitTime="2003-08-21 16:02:53" id="d90acdc"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="41888" reportTime="2003-08-23 00:20:38">
    <summary>call PCD fails when given subtype of defining type</summary>
    <description/>
    <commit commitTime="2003-08-23 11:40:00" id="9df9062"/>
    <fixedFiles>
      <file>tests/bugs/CallReference.java</file>
    </fixedFiles>
  </bug>
  <bug id="41359" reportTime="2003-08-09 11:19:00">
    <summary>percflow aspects compiled from jars share one instance for all entry points</summary>
    <description>When a percflow aspect is woven into source code from a jar using the aspectPath compiler option, it produces only one instance of the aspect for each entrypoint defined in the source code.</description>
    <commit commitTime="2003-08-28 21:44:55" id="5a07dce"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java</file>
    </fixedFiles>
  </bug>
  <bug id="43709" reportTime="2003-09-25 18:30:00">
    <summary>structure view crash when extending library aspects</summary>
    <description>I have an library with an aspect that includes advice, which I compile into an outjar. In my client project I extend it, and make a concrete pointcut that results in the library aspect affecting parts of my system. There is a bug and an enhancement request here: 1 A bug: when you look at the structure view for affected classes, there is a problem if you try to navigate from calls to advice in AJDT, it results in an NPE . Here is the stack trace in AJDT: java.lang.NullPointerException at org.aspectj.asm.internal.ProgramElement.toLinkLabelString ProgramElement.java:403 at org.eclipse.ajdt.internal.core.AJDTStructureViewNode.getLabel AJDTStructureViewNode.java:171 at org.eclipse.ajdt.internal.core.AJDTStructureViewNodeAdapter.getLabel AJDTStructureViewNodeAdapter.java:89 at org.eclipse.ui.model.WorkbenchLabelProvider.getText WorkbenchLabelProvider.java:142 at org.eclipse.jface.viewers.TreeViewer.doUpdateItem TreeViewer.java:95 at org.eclipse.jface.viewers.AbstractTreeViewer$UpdateItemSafeRunnable.run AbstractTreeViewer.java:87 at org.eclipse.core.internal.runtime.InternalPlatform.run InternalPlatform.java:1006 at org.eclipse.core.runtime.Platform.run Platform.java:413 at org.eclipse.jface.viewers.AbstractTreeViewer.doUpdateItem AbstractTreeViewer.java:406 at org.eclipse.jface.viewers.StructuredViewer$UpdateItemSafeRunnable.run StructuredViewer.java:119 at org.eclipse.core.internal.runtime.InternalPlatform.run InternalPlatform.java:1006 at org.eclipse.core.runtime.Platform.run Platform.java:413 at org.eclipse.jface.viewers.StructuredViewer.updateItem StructuredViewer.java:1271 at org.eclipse.jface.viewers.AbstractTreeViewer.createTreeItem AbstractTreeViewer.java:320 at org.eclipse.jface.viewers.AbstractTreeViewer$1.run AbstractTreeViewer.java:303 at org.eclipse.swt.custom.BusyIndicator.showWhile BusyIndicator.java:69 at org.eclipse.jface.viewers.AbstractTreeViewer.createChildren AbstractTreeViewer.java:289 at org.eclipse.jface.viewers.AbstractTreeViewer.handleTreeExpand AbstractTreeViewer.java:697 at org.eclipse.jface.viewers.AbstractTreeViewer$4.treeExpanded AbstractTreeViewer.java:709 at org.eclipse.swt.widgets.TypedListener.handleEvent TypedListener.java:175 at org.eclipse.swt.widgets.EventTable.sendEvent EventTable.java:81 at org.eclipse.swt.widgets.Widget.sendEvent Widget.java:840 at org.eclipse.swt.widgets.Widget.sendEvent Widget.java:865 at org.eclipse.swt.widgets.Widget.sendEvent Widget.java:849 at org.eclipse.swt.widgets.Tree.wmNotifyChild Tree.java:1909 at org.eclipse.swt.widgets.Control.WM_NOTIFY Control.java:3815 at org.eclipse.swt.widgets.Composite.WM_NOTIFY Composite.java:642 at org.eclipse.swt.widgets.Control.windowProc Control.java:2816 at org.eclipse.swt.widgets.Display.windowProc Display.java:2361 at org.eclipse.swt.internal.win32.OS.CallWindowProcW Native Method at org.eclipse.swt.internal.win32.OS.CallWindowProc OS.java:1236 at org.eclipse.swt.widgets.Tree.callWindowProc Tree.java:156 at org.eclipse.swt.widgets.Tree.WM_LBUTTONDOWN Tree.java:1517 at org.eclipse.swt.widgets.Control.windowProc Control.java:2799 at org.eclipse.swt.widgets.Display.windowProc Display.java:2361 at org.eclipse.swt.internal.win32.OS.DispatchMessageW Native Method at org.eclipse.swt.internal.win32.OS.DispatchMessage OS.java:1303 at org.eclipse.swt.widgets.Display.readAndDispatch Display.java:1543 at org.eclipse.ui.internal.Workbench.runEventLoop Workbench.java:1402 at org.eclipse.ui.internal.Workbench.run Workbench.java:1385 at org.eclipse.core.internal.boot.InternalBootLoader.run InternalBootLoader.java:858 at org.eclipse.core.boot.BootLoader.run BootLoader.java:461 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke Unknown Source at sun.reflect.DelegatingMethodAccessorImpl.invoke Unknown Source at java.lang.reflect.Method.invoke Unknown Source at org.eclipse.core.launcher.Main.basicRun Main.java:291 at org.eclipse.core.launcher.Main.run Main.java:747 at org.eclipse.core.launcher.Main.main Main.java:583 2 The enhancement request: the concrete aspect that applies the advice should also show what is affected in the project. Of course, it would also be nice to see how a given concrete library aspect in the aspect path affects your project too.</description>
    <commit commitTime="2003-09-26 05:24:49" id="426d89b"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/internal/ProgramElement.java</file>
    </fixedFiles>
  </bug>
  <bug id="47318" reportTime="2003-11-23 16:18:00">
    <summary>org.aspectj.asm.IRelationship.Kind.ALL does not contain all kinds</summary>
    <description>org.aspectj.asm.IRelationship.Kind.ALL is an array that should contain all kinds that an IRelationship may have. There are three possible kinds defined in IRelationship.java: ADVICE, DECLARE and DECLARE_INTER_TYPE. The Kind[] ALL does only contain ADVICE and DECLARE. This can lead to an ArrayIndexOutOfBoundsException.</description>
    <commit commitTime="2003-11-23 21:32:30" id="bdc79f1"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/IRelationship.java</file>
    </fixedFiles>
  </bug>
  <bug id="49457" reportTime="2004-01-02 00:21:00">
    <summary>No error on overloaded pointcuts unless binding variables</summary>
    <description>The compiler might not be detecting overloaded pointcut names when parameters are not bound, and/or might not be implementing the pointcut correctly. Below is the context from my reply to Ron Bodkin on aspectj-dev "Proper behavior of overloaded pointcut definitions". I have not checked this code recently or submitted a test case, nor have I evaluated whether my code below actually replicates Ron's bug. ---- context from the email The programming guide says, It is an error for two pointcuts to be named with the same name in the same class or aspect declaration. When I compile with overloaded pointcut names, I do get an error. pointcut pc Runnable r : target r &amp;amp;&amp;amp; call void run ; pointcut pc SubRunnable r : target r &amp;amp;&amp;amp; call void run ; $ aspectj-1.1.1 -classpath $ajrt11 OverloadedPointcut.java ...\OverloadedPointcut.java:14 duplicate pointcut name: pc ...\OverloadedPointcut.java:15 duplicate pointcut name: pc ... When I use these pointcuts with bound parameters, I get an error. before Runnable r : pc r { log "pc Runnable r " ; } before SubRunnable r : pc r { log "pc SubRunnable r " ; } When I use these pointcuts with type parameters, I get no errors. before : pc Runnable { log "pc Runnable " ; } before : pc SubRunnable { log "pc SubRunnable " ; } before : pc * { log "pc * " ; } [...] ---- my code public class OverloadedPointcut { public static void main String[] args { new C .run ; } } class C { public void run {} } aspect A { declare parents: C implements Runnable; declare parents: C implements SubRunnable; interface SubRunnable extends Runnable {} pointcut pc Runnable r : target r &amp;amp;&amp;amp; call void run ; pointcut pc SubRunnable r : target r &amp;amp;&amp;amp; call void run ; before Runnable r : pc r { log "pc Runnable r " ; } before SubRunnable r : pc r { log "pc SubRunnable r " ; } before : pc Runnable { log "pc Runnable " ; } before : pc SubRunnable { log "pc SubRunnable " ; } before : pc * { log "pc * " ; } void log String s { System.out.println s ; } } ---- Ron's code [...] the following program compiles with no warnings, produces no output when run under AspectJ 1.1.1. It appears to behave as if the more specific definition is the only definition of the pointcut [...] Here is a simple program that illustrates the question and odd behavior: package lib; public class RunnablePointcuts { public pointcut runnableCalls Runnable runnable, Object caller : call * run .. &amp;amp;&amp;amp; target runnable &amp;amp;&amp;amp; this caller ; //public pointcut specialRunnableCalls SpecialRunnable runnable, Object caller : public pointcut runnableCalls SpecialRunnable runnable, Object caller : call * run .. &amp;amp;&amp;amp; target runnable &amp;amp;&amp;amp; this caller ; } --- package lib; public interface SpecialRunnable extends Runnable { } --- package client; import lib.RunnablePointcuts; import lib.SpecialRunnable; public aspect Use { before Object caller : RunnablePointcuts.runnableCalls *, caller &amp;amp;&amp;amp; target MyRunnable { System.out.println "my runnable called from "+caller ; } public static void main String args[] { Use.aspectOf .doIt ; } public void doIt { new MyRunnable .run ; } } // the advice will run if you make this implement SpecialRunnable //class MyRunnable implements SpecialRunnable { class MyRunnable implements Runnable { public void run {} }</description>
    <commit commitTime="2004-01-07 13:10:07" id="c517e85"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
    </fixedFiles>
  </bug>
  <bug id="49250" reportTime="2003-12-21 15:01:00">
    <summary>alias getCause for getWrappedThrowable in SoftException</summary>
    <description>SoftException should implement getCause : public Throwable getCause { return inner; } As pointed out by Ramnivas, misc mail messages, code comments... Using getCause means the chain should print as expected in 1.4+, esp. when SoftException is itself wrapped as a RemoteException. Since getCause replicates getWrappedThrowable , we could deprecate that, but we must continue to support it to maintain upwards binary compatibility in the runtime classes.</description>
    <commit commitTime="2004-01-07 13:30:26" id="eac16ae"/>
    <fixedFiles>
      <file>runtime/src/org/aspectj/lang/SoftException.java</file>
    </fixedFiles>
  </bug>
  <bug id="47754" reportTime="2003-11-29 03:48:00">
    <summary>illegal method modifier</summary>
    <description>the attached example throws this at class load time. please note that this bug results in a different exception when happens in a different setup, and when the class is loaded by JBoss. more cryptic, talking about generic class format error Exception in thread "main" java.lang.ClassFormatError: com/netvisor/nvsr/client/InvalidByteCodeBug$Test$ITest Illegal method modifiers: 0x409 at java.lang.ClassLoader.defineClass0 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:537 at java.security.SecureClassLoader.defineClass SecureClassLoader.java: 123 at java.net.URLClassLoader.defineClass URLClassLoader.java:251 at java.net.URLClassLoader.access$100 URLClassLoader.java:55 at java.net.URLClassLoader$1.run URLClassLoader.java:194 at java.security.AccessController.doPrivileged Native Method at java.net.URLClassLoader.findClass URLClassLoader.java:187 at java.lang.ClassLoader.loadClass ClassLoader.java:289 at sun.misc.Launcher$AppClassLoader.loadClass Launcher.java:274 at java.lang.ClassLoader.loadClass ClassLoader.java:235 at java.lang.ClassLoader.loadClassInternal ClassLoader.java:302 at java.lang.ClassLoader.defineClass0 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:537 at java.security.SecureClassLoader.defineClass SecureClassLoader.java: 123 at java.net.URLClassLoader.defineClass URLClassLoader.java:251 at java.net.URLClassLoader.access$100 URLClassLoader.java:55 at java.net.URLClassLoader$1.run URLClassLoader.java:194 at java.security.AccessController.doPrivileged Native Method at java.net.URLClassLoader.findClass URLClassLoader.java:187 at java.lang.ClassLoader.loadClass ClassLoader.java:289 at sun.misc.Launcher$AppClassLoader.loadClass Launcher.java:274 at java.lang.ClassLoader.loadClass ClassLoader.java:235 at java.lang.ClassLoader.loadClassInternal ClassLoader.java:302 at com.netvisor.nvsr.client.InvalidByteCodeBug.run InvalidByteCodeBug. java:15 at com.netvisor.nvsr.client.InvalidByteCodeBug.main InvalidByteCodeBug. java:8</description>
    <commit commitTime="2004-01-07 15:57:25" id="7322131"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java</file>
    </fixedFiles>
  </bug>
  <bug id="44586" reportTime="2003-10-09 13:53:43">
    <summary>After throwing advice on ctors doesn't execute for inter-type decls</summary>
    <description>The following code doesn't work in Ajc 1.1.1, in Ajc built from CVS HEAD (as of yesterday), nor in Ajc 1.0.6: Output: C:\devel\test\excHandling&gt;java AfterThrowingCtor Exception in thread "main" java.lang.IllegalStateException: crash at Foo.initVal(AfterThrowingCtor.java:21) at AfterThrowingCtor.ajc$interFieldInit$AfterThrowingCtor$Foo$val (AfterT hrowingCtor.java:9) at Foo.&lt;init&gt;(AfterThrowingCtor.java:13) at AfterThrowingCtor.main(AfterThrowingCtor.java:6) Correct Output: threw java.lang.IllegalStateException: crash at execution(Foo()) Exception in thread "main" java.lang.IllegalStateException: crash at Foo.initVal(AfterThrowingCtor.java:21) at AfterThrowingCtor.ajc$interFieldInit$AfterThrowingCtor$Foo$val (AfterT hrowingCtor.java:9) at Foo.&lt;init&gt;(AfterThrowingCtor.java:13) at AfterThrowingCtor.main(AfterThrowingCtor.java:6) Input source: public aspect AfterThrowingCtor { after() throwing (Throwable t) : execution(Foo.new(..)) { System.err.println("threw "+t+" at "+thisJoinPointStaticPart); } public static void main(String args[]) { new Foo(); } private Object Foo.val = Foo.initVal(); } class Foo { Foo() { } // if you uncomment this line and comment out the inter-type decl. // the advice runs correctly //private Object val = initVal(); static Object initVal() { throw new IllegalStateException("crash"); } } --- AspectJ 1.1.1 runs the after throwing advice correctly if the field is declared normally (AspectJ 1.0.6 fails to do even this).</description>
    <commit commitTime="2004-01-14 00:06:40" id="87db1e7"/>
    <fixedFiles>
      <file>tests/bugs/AfterThrowingCtor.java</file>
    </fixedFiles>
  </bug>
  <bug id="36234" reportTime="2003-04-08 14:04:00">
    <summary>out of memory error when compiling</summary>
    <description>Getting an out of memory error when compiling with Ajc 1.1 RC1. I know this is not very descriptive, but maybe you can point me into a direction of getting more output. here some additional information though: Code base is medium size about 1500 classfiles I removed all my aspects and still receive the error. Running it from the command line: ajc -classpath whateveritis -sourceroots whateveritis -d whateveritis</description>
    <commit commitTime="2004-01-15 11:43:14" id="b3b1eec"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java</file>
    </fixedFiles>
  </bug>
  <bug id="42515" reportTime="2003-09-04 07:12:20">
    <summary>NPE When compiling intertype declaration</summary>
    <description/>
    <commit commitTime="2004-01-15 20:33:20" id="6d2abc1"/>
    <fixedFiles>
      <file>tests/bugs/caseSensitivity/uniqueId/Numbered.java</file>
    </fixedFiles>
  </bug>
  <bug id="50200" reportTime="2004-01-19 06:01:00">
    <summary>aspectjrt.jar manifest file name needs changing to upper case</summary>
    <description>The name of the aspectjrt.jar's manifest file should be changed from META-INF/manifest.mf to META-INF/MANIFEST.MF According to the Jar file specification see http://java.sun.com/products/jdk/1 . 2/docs/guide/jar/manifest.html the name of the manifest file needs to be all upper case. It's beyond trivial, I know, but it does cause an unnecessary warning in at least one popular IDE for J2EE development IBM WebSphere Studio when the aspectjrt.jar is packaged in an EAR file. If there was an option to assign this a "very, very trivial" severity level I would.</description>
    <commit commitTime="2004-01-22 10:55:43" id="6f099df"/>
    <fixedFiles>
      <file>build/src/org/aspectj/internal/tools/ant/taskdefs/AntBuilder.java</file>
    </fixedFiles>
  </bug>
  <bug id="45489" reportTime="2003-10-24 06:34:00">
    <summary>Structure model is wrong when re-opened</summary>
    <description>Some elements have the wrong kinds when a saved structure model is loaded. E.g. if I close then re-open the eclipse workbench classes are shown as interface in the outline view. Also if I traverse the tree with the code below I get the wrong kinds assigned to classed, interfaces, aspects and import declarations. List list = StructureModelUtil.getPackagesInModel ; for Iterator i = list.iterator ; i.hasNext ; { Object[] o = Object[] i.next ; IProgramElement node = IProgramElement o[0]; List files = StructureModelUtil.getFilesInPackage node ; for Iterator i2 = files.iterator ; i2.hasNext ; { IProgramElement file = IProgramElement i2.next ; System.out.println "file " + file.getKind .toString + ", " + file.getName ; boolean added2 = false; List file_children = file.getChildren ; // file children can be classes, aspects or other things for Iterator i3 = file_children.iterator ; i3.hasNext ; { IProgramElement file_child = IProgramElement i3.next ; System.out.println "kind: " + file_child.getKind .toString +", " + file_child.getName ;</description>
    <commit commitTime="2004-02-19 16:02:06" id="669cd7c"/>
    <fixedFiles>
      <file>ajde/testsrc/org/aspectj/ajde/AjdeTests.java</file>
      <file>asm/src/org/aspectj/asm/IProgramElement.java</file>
    </fixedFiles>
  </bug>
  <bug id="51929" reportTime="2004-02-12 21:13:00">
    <summary>Advice calling protected super method causing java.lang.VerifyError 'Bad access to protected data'</summary>
    <description>A java.lang.VerifyError is thrown at runtime complaining about 'Bad access to protected data' when advice, on a sub-aspect, that calls a protected method, on the super-aspect, is woven into a class. However another call to the same method woven into the same class but due to advice declared in the super-aspect works fine. The aspects were woven into precompiled by sun's 1.4 javac classes. The verify error occurs under both sun's 1.4 and blackdowns 1.3 VMs, and presumably all VMs. Workaround: Making the protected method public fixes the verify error. A test case is available in CVS: tests/bugs/protectedvf/... tests/ajcTestFailing.xml</description>
    <commit commitTime="2004-02-19 22:09:16" id="6ddae42"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InlineAccessFieldBinding.java</file>
      <file>tests/bugs/protectedvf/main/Driver.java</file>
    </fixedFiles>
  </bug>
  <bug id="52394" reportTime="2004-02-18 13:35:00">
    <summary>inter-type declarations cause JRockit Crash</summary>
    <description>BEA's JRockit JVM version: 8.1sp2-1.4.1_05-Load10-viking-win32-sthqa29-20031105-1554 crashes on simple inter-type declarations. Obviously I have also submitted this bug to BEA, but the AJ team may be able to shed some light on what is going on and where if anywhere BEA's JVM is behaving wrong. The cannonical example lies below: public class SimpleClass { public static void main String[] args { SimpleClass simple = new SimpleClass ; } } public aspect SimpleAspect { public int SimpleClass.foo; } When running SimpleClass I get a JVM crash with the following thread stack trace. Thread Stack Trace: at _exprPush+112 @0082FF70 at COM.jrockit.vm.RNI.toNative Native Method @32520000 at COM.jrockit.vm.RNI.clinitTrampoline Native Method @325200FA at com.vms.adbase.jvmcrashtest.SimpleClass.&amp;lt;init&amp;gt; SimpleClass.java:4 @344B0055 at com.vms.adbase.jvmcrashtest.SimpleClass.main SimpleClass.java:6 @344B0034 --- End of stack trace Feel free to ask me for further details. JRockit can be downloaded at: http://commerce.bea.com/showallversions.jsp?family=WLJR . I reproduced this error on Windows XP, but it also happend on RedHat. Is it worth adding JRockit to AspectJ's compatibility test suite?</description>
    <commit commitTime="2004-03-04 16:09:34" id="5d73494"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectClinit.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="50776" reportTime="2004-01-28 12:21:00">
    <summary>fail in compiling aspect with overriding method introduction with different throws clause</summary>
    <description>A first class class A declares only one method with some exceptions in the throws clause void m throws Exception . A second class class B extends it without redefinig the method. An aspect declares a method introduction in the class B, with the same name, signature and return type of the one in class A, but without throws clause; this is a legal override. In the second class class B each invocation to the overriden method doesn't need a try-catch block, because it refers to his hown method that raises no exception. This code compiles using ajc version 1.0.6 built Jul 24, 2002 6:21 PM PST running on java 1.4.0 But not using AspectJ Compiler 1.1.1 AspectJ Compiler 1.1.0 class A{ public A {} public void m throws Exception{} } class B extends A{ public B {} public void some_code { m ;} } aspect C{ public void B.m {} }</description>
    <commit commitTime="2004-03-05 10:50:50" id="c798923"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeMemberFinder.java</file>
    </fixedFiles>
  </bug>
  <bug id="51322" reportTime="2004-02-07 17:11:00">
    <summary>Introduce Unknown Type to class causes Null pointer exception</summary>
    <description>Introduce method with an unknown type as an arguement as follows: class A {} public abstract aspect B { public void A.someMethod WCharType a { //blah } } WCharType is an unknown type or is forgotten to be imported in my case . This shall cause ajc to puke the following: java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.ast.InterTypeMethodDeclaration.build InterTypeMethodDeclaration .java:87 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTypeAndPerClause AspectDeclarat ion.java:744 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildInterTypeAndPerClause AjLookupE nvironment.java:206 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnviron ment.java:94 at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:310 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:324 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:373 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:125 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:70 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:99 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 /home/czhang/eclipse/workspace/lib/libajob/org/omg/PortableServer/portable/Delegate.java:0 Internal compiler error java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.ast.InterTypeMethodDeclaration.build InterTypeMethodDeclaration .java:87 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTypeAndPerClause AspectDeclarat ion.java:744 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildInterTypeAndPerClause AjLookupE nvironment.java:206 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnviron ment.java:94 at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:310 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:324 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:373 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:125 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:70 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:99 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 !! no source information available !! !! no source information available !! ABORT Exception thrown from AspectJ 1.1.1 This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. null java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.ast.InterTypeMethodDeclaration.build InterTypeMethodDeclaration .java:87 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTypeAndPerClause AspectDeclarat ion.java:744 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildInterTypeAndPerClause AjLookupE nvironment.java:206 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnviron ment.java:94 at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:310 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:324 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:373 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:125 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:70 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:99 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:217 at org.aspectj.tools.ajc.Main.runMain Main.java:155 at org.aspectj.tools.ajc.Main.main Main.java:72 1 fail|abort, 1 error</description>
    <commit commitTime="2004-03-15 22:38:03" id="5c67166"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java</file>
    </fixedFiles>
  </bug>
  <bug id="54965" reportTime="2004-03-16 10:08:00">
    <summary>Incremental compilation does twice as much work as necessary</summary>
    <description>When I added support for -outjar in the test harness, I was surprised to find duplicate entry exceptions coming from the output file writing to the outjar. I traced it through, and found that every source file passed to an incremental compile is in fact compiled twice! The first time round we note the references, and of course each file has a reference to itself. Then we call "AjState.getFilesToCompile" looking to see if there are any further files to compile in another iteration. This method does not remember the set of files it just compiled, so since we have referenced each type we just compiled, and we have no reord of that fact, we compile them again. Second time around, the bytecodes are identical to the previous go, so recordClassFile doesn't note their dependents - and thus this time we terminate.</description>
    <commit commitTime="2004-03-16 15:07:19" id="41c6f6d"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</file>
    </fixedFiles>
  </bug>
  <bug id="54625" reportTime="2004-03-12 09:43:00">
    <summary>Incremental support does not work with outjar</summary>
    <description>Either fix the class file deleting etc. to work with jars, or always do a batch build when working with outjars.</description>
    <commit commitTime="2004-03-16 15:16:46" id="1a4c02c"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</file>
    </fixedFiles>
  </bug>
  <bug id="55134" reportTime="2004-03-17 14:09:00">
    <summary>Incremental compilation does not delete weaver-generated class files</summary>
    <description>During incremental compilation, AjState records classes generated from source files following the initial compile phase, but before weaving. So that these can be passed to the weaver on a subsequent iteration if we need to reweave the world . During weaving of a given class file, the weaver may generate additional class files for e.g. around closures that get written to the output. If the orginal source file is deleted, these additional weaver generated classes are not deleted from the output since AjState does not know about them.</description>
    <commit commitTime="2004-03-18 14:36:58" id="7d6b500"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/UnwovenClassFile.java</file>
    </fixedFiles>
  </bug>
  <bug id="52928" reportTime="2004-02-24 08:25:36">
    <summary>Private members introduced via an interface are visible to the class</summary>
    <description>If private members are introduced via an interface to classes, the introduced members are visible inside the classes themselves, although the visibility is supposed to be relative to the aspect. Here's a sample: public class Sample { public static void main(String[] args) { Sample s = new Sample(); s.aMethod(); } public void aMethod() { // x is introduced by the following aspect as private // so it should not be accessible here System.out.println("I have " + x); } } aspect SampleAspect { private interface Tag {}; private int Tag.x = 0; declare parents: Sample implements Tag; }</description>
    <commit commitTime="2004-03-19 06:46:40" id="5795b4a"/>
    <fixedFiles>
      <file>tests/bugs/VisiblePrivateInterfaceITDs.java</file>
    </fixedFiles>
  </bug>
  <bug id="57430" reportTime="2004-04-05 04:58:00">
    <summary>exception printing</summary>
    <description>Exceptions thrown from the compiler used to be printed once, with the submit-bug header. Now they are printed twice, without and with the header. True of CVS version.</description>
    <commit commitTime="2004-04-07 09:07:43" id="e7ac54f"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java</file>
    </fixedFiles>
  </bug>
  <bug id="57436" reportTime="2004-04-05 05:42:00">
    <summary>Java 1.5 fails to run classes produced by ajc</summary>
    <description>Java 1.5 beta reports a ClassFormatError when running programs e.g., spacewar compiled by ajc 1.1.1 and the latest CVS head. Sun's Java 1.5 beta binary-compatibility docs say that some obfuscators violated the .class format specification, so those .class files will fail when run under 1.5. The docs also say they are still incomplete. Although 1.5 is still beta, we would want to submit a bug to Sun if our implementation techniques are valid, so we don't have to change those techniques. For 1.2, we should at document if we don't fix, since many people are using 1.5.</description>
    <commit commitTime="2004-04-08 10:46:58" id="b0d32ca"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java</file>
    </fixedFiles>
  </bug>
  <bug id="59596" reportTime="2004-04-22 05:11:00">
    <summary>Null pointer exception while weaving java.awt.Label</summary>
    <description>I tried to add an Aspect to java.awt.Label. I compile the aspect via: ajc -inpath /usr/local/j2sdk_nb/j2sdk1.4.2/jre/lib/rt.jar Timestamp.java Here is the aspect Timestamp.java: aspect Timestamp { private int java.awt.Label._ts_read = 0; private int java.awt.Label._ts_write = 0; pointcut writeOp : call void java.awt.Label.setText String ; pointcut readOp : call String java.awt.Label.getText ; after java.awt.Label b returning: readOp &amp;amp;&amp;amp; target b { b._ts_read++; } after java.awt.Label b returning: writeOp &amp;amp;&amp;amp; target b { b._ts_write++; System.out.println b._ts_write ; } public static void main String[] args { java.awt.Label b1 = new java.awt.Label ; b1.setText "abc" ; } } Here is the error message I get from ajc: null java.lang.NullPointerException at org.aspectj.ajdt.internal.core.builder.EclipseAdapterUtils.makeLocationContext EclipseAdapterUtils.java:50 at org.aspectj.ajdt.internal.core.builder.EclipseAdapterUtils.makeSourceLocation EclipseAdapterUtils.java:120 at org.aspectj.ajdt.internal.core.builder.EclipseAdapterUtils.makeMessage EclipseAdapterUtils.java:129 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$4.acceptResult AjBuildManager.java:663 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.acceptResult AjCompilerAdapter.java:178 at org.aspectj.ajdt.internal.compiler.WeaverAdapter.finishedWith WeaverAdapter.java:203 at org.aspectj.ajdt.internal.compiler.WeaverAdapter.weaveCompleted WeaverAdapter.java:167 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:570 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:239 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:114 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:376 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:600 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:160 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:94 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:102 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:280 at org.aspectj.tools.ajc.Main.runMain Main.java:217 at org.aspectj.tools.ajc.Main.main Main.java:79 1 fail|abort</description>
    <commit commitTime="2004-04-23 16:24:27" id="a97f3b6"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java</file>
    </fixedFiles>
  </bug>
  <bug id="59909" reportTime="2004-04-26 05:40:00">
    <summary>CFlowStack removesThreads to late</summary>
    <description>Problem: The current implementation of CFlowStack Version 1.1-till 1.2 rc1 stores all threads in a hashtable. These Threads are removes after several calls to the methods getThreadStack . In our cases &amp;gt;70 calls. In our project, this cycle is much to long. We have soveral long running threads, which grap quite a lot of lot of memory. This memory can only be freed after the threads have been removed from the CFlowStack. In our production code we sum up to more than 300 Threads stored in different CFlowStack Varaibles. Often this results in out of memory Errors. Added patch provides an improved freeing scheme. It checks if the size of the table has grown, if it has, it checks if it can remove some threads.</description>
    <commit commitTime="2004-05-05 10:18:01" id="5f6b18b"/>
    <fixedFiles>
      <file>runtime/src/org/aspectj/runtime/internal/CFlowStack.java</file>
    </fixedFiles>
  </bug>
  <bug id="59599" reportTime="2004-04-22 06:03:00">
    <summary>Race condition in test suite for incremental</summary>
    <description>On faster machines my linux desktop, andy's home pc several of the tests in ajcTests.xml are failing suite attached . This appears to be due to a race condition between checking directory contents and waiting for the compilation to complete. I have an environment in which I can test candidate fixes if you can give me a pointer for what to tweak...</description>
    <commit commitTime="2004-05-05 10:18:34" id="bd16033"/>
    <fixedFiles>
      <file>testing/src/org/aspectj/testing/harness/bridge/DirChanges.java</file>
    </fixedFiles>
  </bug>
  <bug id="61411" reportTime="2004-05-07 12:00:00">
    <summary>AJDoc launch script on Windows can lose arguments</summary>
    <description>Using AspectJ 1.2rc1 on Windows XP This report highlights a problem that I've seen using ajdoc.bat on Windows but the issue applies equally to the ajc.bat and ajbrowser.bat files as well. The %ASPECTJ_HOME%\bin\ajdoc.bat file that users run to launch the ajdoc tool imposes a limit of only 9 command line arguments that may be passed to the class org.aspectj.tools.ajdoc.Main. In scenarios where there the -sourcepath, -classpath, -d etc options are used it is easy for these to "eat up" the list of arguments that are passed into the JVM. A long list of packages entered at the end of the ajdoc.bat command can be truncated or possibly even ignored in which case an error message will be output telling the user that no classes or packages have been specified . In order to prevent a limit being put on the number of arguments passed to the launched JVM, the invocation line needs to end with %* rather than the %1 %2 %3 %4 %5 %6 %7 %8 %9 list it currently uses. The proposed fix also *seems* could somebody else confirm this ? to sort out another problem regarding the ajdoc.bat file which is this : long semi- colon delimited paths supplied as the arguments for the -sourcepath and -classpath options seem to get split apart and passed into the JVM as separate arguments unless the entire path list is supplied inside quotes. This should not be necessary. It seems that the batch file processor interprets the semi-colons in a path list as delimiters between arguments. Consequently each element in the path list is treated as a separate argument instead of being part of one big string representing the sourcepath or classpath.</description>
    <commit commitTime="2004-05-28 15:19:14" id="39c3a3b"/>
    <fixedFiles>
      <file>build/src/$installer$/org/aspectj/Main.java</file>
    </fixedFiles>
  </bug>
  <bug id="68494" reportTime="2004-06-24 12:04:00">
    <summary>ajdoc does not support .aj files</summary>
    <description>In addition to accepting .java source files ajdoc needs to accept .aj files.</description>
    <commit commitTime="2004-06-24 22:11:53" id="3707411"/>
    <fixedFiles>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/Main.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/StructureUtil.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="69011" reportTime="2004-06-30 10:22:00">
    <summary>ajdoc fails when using default package</summary>
    <description>When trying to document classes that are in the default package, the following error occurs: &amp;gt; Calling ajc... &amp;gt; Building signature files... &amp;gt; Calling javadoc... Loading source file C:\eclipse_RC3\eclipse\ajdocworkingdir\A.java... C:\eclipse_RC3\eclipse\ajdocworkingdir\A.java:1: &amp;lt;identifier&amp;gt; expected package ; ^ 1 error &amp;gt; Decorating html files... &amp;gt; Decorating C:\doc\classX.html... An internal error occured in ajdoc Please copy the following text into an email message and send it, along with any additional information you can add to: aspectj-dev@eclipse.org java.io.FileNotFoundException: C:\doc\classX.html The system cannot find the file specified java.io.FileNotFoundException: C:\doc\classX.html The system cannot find the file specified at java.io.FileInputStream.open Native Method at java.io.FileInputStream.&amp;lt;init&amp;gt; FileInputStream.java:106 at java.io.FileReader.&amp;lt;init&amp;gt; FileReader.java:55 at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFile HtmlDecorator.java:142 at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromDecl HtmlDecorator.java:115 at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromDecls HtmlDecorator.java:54 at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromInputFiles HtmlDecorator.java:43 at org.aspectj.tools.ajdoc.Main.main Main.java:210</description>
    <commit commitTime="2004-07-05 18:19:15" id="2cc4826"/>
    <fixedFiles>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="70008" reportTime="2004-07-14 07:16:00">
    <summary>problem with ajdoc -public</summary>
    <description>Using the spacewar example, the following works fine: ajdoc -private -d doc spacewar coordination but the following breaks: ajdoc -public -d doc spacewar coordination The end of the failing output is below. Display.html and Display.DisplayAspect.html were not generated as the types are not public, so presumably the decorator shouldn't be looking for them in this case. &amp;gt; Decorating html files... &amp;gt; Decorating C:\aspectj1.2\doc\examples\doc\spacewar\Debug.html... &amp;gt; Decorating C:\aspectj1.2\doc\examples\doc\spacewar\Display.DisplayAspect.html. .. An internal error occured in ajdoc Please copy the following text into an email message and send it, along with any additional information you can add to: aspectj-dev@eclipse.org java.io.FileNotFoundException: C:\aspectj1.2\doc\examples\doc\spacewar\Display.D isplayAspect.html The system cannot find the file specified java.io.FileNotFoundException: C:\aspectj1.2\doc\examples\doc\spacewar\Display.D isplayAspect.html The system cannot find the file specified at java.io.FileInputStream.open Native Method at java.io.FileInputStream.&amp;lt;init&amp;gt; FileInputStream.java:106 at java.io.FileReader.&amp;lt;init&amp;gt; FileReader.java:55 at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFile HtmlDecorator. java:142 at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromDecl HtmlDecora tor.java:115 at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromDecls HtmlDecor ator.java:54 at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromInputFiles Html Decorator.java:43 at org.aspectj.tools.ajdoc.Main.main Main.java:210</description>
    <commit commitTime="2004-07-14 20:36:00" id="8dc0845"/>
    <fixedFiles>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/SpacewarTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="70773" reportTime="2004-07-23 21:07:00">
    <summary>AspectJ Error: ConncurrentModificationException thrown: null</summary>
    <description>In AspectJ 1.1.11 for Eclipse, build ID 1.2.0 and also in the previous 1.1.10 on Eclipse version 3.0.0, build ID 200406351208: If I enable incremental compilation and make a change to a file typing a space and deleting it, or editing a comment , I get a "ConncurrentModificationException thrown: null" error.</description>
    <commit commitTime="2004-08-02 10:14:39" id="9aed31d"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
    </fixedFiles>
  </bug>
  <bug id="67774" reportTime="2004-06-18 04:54:00">
    <summary>Nullpointer-exception in pointcuts using withincode clause</summary>
    <description>Hi, I am getting null-pointer-exceptions whenever I try to specify a pointcut with a "withincode Signature " clause. E.g.: public aspect DetectSystemOutErrorUsage { pointcut allSystemOutAndSystemErrAccesses : get * System.out || get * System.err ; declare warning: allSystemOutAndSystemErrAccesses &amp;amp;&amp;amp; !adviceexecution &amp;amp;&amp;amp; !within com.tivoli.act..Test* &amp;amp;&amp;amp; !within com.tivoli.act.log..* &amp;amp;&amp;amp; !execution * com.tivoli.act..*.main .. &amp;amp;&amp;amp; !execution * com.tivoli.act..*.usage // &amp;amp;&amp;amp; !withincode * com.tivoli.act..*.main .. // &amp;amp;&amp;amp; !withincode * com.tivoli.act..*.usage : "Warning: use of System.out or System.err - consider logging instead!"; } In the above example excluding main and usage methods from the pointcut using an execution ... -clause shows works but using a withincode -clause as commented always yields an NPE: trouble in: null java.lang.NullPointerException at org.aspectj.weaver.patterns.SignaturePattern.matches SignaturePattern.java:87 at org.aspectj.weaver.patterns.WithincodePointcut.match WithincodePointcut.java:42 at org.aspectj.weaver.patterns.NotPointcut.match NotPointcut.java:45 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:42 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:42 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:42 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:42 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:42 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:42 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:42 at org.aspectj.weaver.ShadowMunger.match ShadowMunger.java:62 at org.aspectj.weaver.Checker.match Checker.java:48 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:1121 at org.aspectj.weaver.bcel.BcelClassWeaver.matchInit BcelClassWeaver.java:895 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:793 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:343 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:80 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:724 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:689 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:615 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:563 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:239 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:114 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:376 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:601 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:160 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:94 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:108 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:165 !SESSION Jun 18, 2004 10:49:48.666 --------------------------------------------- eclipse.buildId=I200406110010 java.version=1.4.2_03 java.vendor=Sun Microsystems Inc. BootLoader constants: OS=win32, ARCH=x86, WS=win32, NL=de_CH !ENTRY org.eclipse.ajdt.ui 4 0 Jun 18, 2004 10:49:48.666 !MESSAGE NullPointerException thrown: null !STACK 0 java.lang.NullPointerException at org.aspectj.weaver.patterns.SignaturePattern.matches SignaturePattern.java:87 at org.aspectj.weaver.patterns.WithincodePointcut.match WithincodePointcut.java:42 at org.aspectj.weaver.patterns.NotPointcut.match NotPointcut.java:45 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:42 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:42 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:42 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:42 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:42 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:42 at org.aspectj.weaver.patterns.AndPointcut.match AndPointcut.java:42 at org.aspectj.weaver.ShadowMunger.match ShadowMunger.java:62 at org.aspectj.weaver.Checker.match Checker.java:48 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:1121 at org.aspectj.weaver.bcel.BcelClassWeaver.matchInit BcelClassWeaver.java:895 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:793 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:343 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:80 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:724 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:689 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:615 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:563 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:239 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:114 at org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:376 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:601 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:160 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:94 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:108 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:165 Michael</description>
    <commit commitTime="2004-08-02 13:43:43" id="7f19ab4"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="57666" reportTime="2004-04-06 17:22:00">
    <summary>duplicate manifests cause resource-copying to gack</summary>
    <description>Ah, the joy of build infrastructure... Mostly self-explanatory trace, from a build Monday Apr 5, 2004 at 08:46:01 GMT: duplicate entry: META-INF/MANIFEST.MF duplicate entry: META-INF/MANIFEST.MF java.util.zip.ZipException: duplicate entry: META-INF/MANIFEST.MF at java.util.zip.ZipOutputStream.putNextEntry ZipOutputStream.java:163 at java.util.jar.JarOutputStream.putNextEntry JarOutputStream.java:90 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.writeResource AjBuildManager.java:344 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesFromJarFile AjBuildManager.java:288 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesToDestination AjBuildManager.java:253 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:195 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:94 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:102 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:53 at org.aspectj.tools.ajc.Main.run Main.java:280 at org.aspectj.tools.ajc.Main.runMain Main.java:217 at org.aspectj.tools.ajc.Main.main Main.java:79</description>
    <commit commitTime="2004-08-02 15:47:02" id="2b8fa31"/>
    <fixedFiles>
      <file>ajde/testsrc/org/aspectj/ajde/AjdeTests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/BcweaverJarMaker.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="71377" reportTime="2004-08-04 10:21:00">
    <summary>Cannot advise private method call in around advice</summary>
    <description>Pointcuts should match call joint points in advice. However AspectJ does not match calls to _private_ methods in around advice. The same applies to get/set pointcuts for _private fields. This is probably because in the testcase below a call to "privateMethod " in the body of the around advice is a call to an accessor method: ajc$inlineAccessMethod$bug_nnnn_JoinPointInAroundAdvice$bug_nnnn_JoinPointInAro undAdvice$privateMethod "around" ; public aspect JoinPointInAroundAdvice { private static Set privateCalls = new HashSet ; private static Set publicCalls = new HashSet ; pointcut internalCall : call * JoinPointInAroundAdvice.privateMethod .. ; before : internalCall { privateCalls.add thisJoinPoint ; } pointcut externalCall : call * JoinPointInAroundAdvice.publicMethod .. ; before : externalCall { publicCalls.add thisJoinPoint ; } pointcut execTest : execution * JoinPointInAroundAdvice.test ; before : execTest { privateMethod "before" ; publicMethod "before" ; } void around : execTest { privateMethod "around" ; publicMethod "around" ; proceed ; } // void around : execTest { // Runnable runnable = new Runnable { // public void run { // privateMethod "around closure" ; // publicMethod; // proceed ; // } // }; // runnable.run ; // } after : execTest { privateMethod "after" ; publicMethod "after" ; } private static void privateMethod String from { System.out.println "? privateMethod " + from ; } public static void publicMethod String from { System.out.println "? publicMethod " + from ; } public static void test { System.out.println "? test " ; privateMethod "test" ; publicMethod "test" ; } public static void main String[] args { test ; if privateCalls.size != publicCalls.size { throw new RuntimeException "Missing join point" ; } else { System.out.println "Success." ; } } }</description>
    <commit commitTime="2004-08-09 10:26:53" id="851da68"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="53981" reportTime="2004-03-06 22:43:00">
    <summary>proceed used as method name in around advice</summary>
    <description>Using a method named proceed .. in around advice confuses the compiler in at least the 2-3 ways shown below . True of the current tree untested in 1.1.1 . Workaround for now is to rename the method. ---- first problem: NPE in compiler java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.ast.MakeDeclsPublicVisitor.endVisit MakeDeclsPublicVisitor.java:44 public class Proceeding { public static void main String[] args { } static aspect A { interface IProceed { void proceed Runnable next ; } IProceed decorator; void around : execution void main String[] { decorator.proceed new Runnable { public void run { proceed ; } } ; } } } ---- second problem: incorrect error wrt number of arguments public class Proceeding { public static void main String[] args { } static aspect A { void around : execution void main String[] { Proceeding.proceed null ; // BUG: treated as proceed Object ; } } static void proceed Object o {} } ---- third hypothetical: we should document how ambiguity is resolved public class Proceeding { public static void main String[] args { } static aspect A { void around : execution void main String[] { proceed ; // special form or Proceeding.proceed ? } } void proceed {} }</description>
    <commit commitTime="2004-08-10 13:22:08" id="05dabd1"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/Proceed.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="68991" reportTime="2004-06-30 07:51:00">
    <summary>intertype initialisers should match field set pointcuts</summary>
    <description>/* initialisers of intertype fields should match field set pointcuts. In the example below, the output should be set field set int C.n set field set int C.m get field get int C.n set field set int C.n but the first field set of C.n is not picked up. */ aspect Aspect { private int C.n = 13; before : get * C.* { System.out.println "get field "+thisJoinPointStaticPart ; } before : set * C.* { System.out.println "set field "+thisJoinPointStaticPart ; } public void C.foo { n++; } } class C { int m = 20; } public class ITFieldsAdvice { public static void main String[] args { C c = new C ; c.foo ; } }</description>
    <commit commitTime="2004-08-11 12:24:27" id="64183c3"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeFieldDeclaration.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="61768" reportTime="2004-05-11 13:35:00">
    <summary>scope for intertype methods</summary>
    <description>/* According to the documentation, the scope rules for intertype method declarations are interpreted from the originating aspect. The only exceptions I thought are the use of "this" and "super" which refer to the target type. According to that interpretation, the program below is type correct, but ajc generates two error messages, shown in comments at the relevant lines. Note that it's ok to access private static fields of the aspect, but not to use private classes of the aspect. If this is a feature and not a bug, what are the precise scope rules for intertype method declarations? */ aspect Aspect { private static int y = 5; private class A { int x = 3; } private static void B.happy { System.out.println y ; // happy accessing private field y } private static void B.foo A z { System.out.println z.x ; // ERROR: The type Aspect.A is not visible } public void B.bar { B.foo new A ; // ERROR: The type A is not visible } } class B { } public class IT { public static void main String[] args { new B .bar ; } }</description>
    <commit commitTime="2004-08-11 16:51:24" id="8c5d743"/>
    <fixedFiles>
      <file>tests/bugs/oxford/PR62475.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="71878" reportTime="2004-08-12 12:24:00">
    <summary>Bad injar aspect name on Linux</summary>
    <description>If you checkout the "JarUsingProject" project from "org.eclipse.ajdt.test/manual testing" in the AJDT 1.1.12 tree, and look at the advised-by entries in the outline view and the context menu of the gutter annotation, on Windows you get "injar aspect: AbstractAspect.aj", but on Linux you get "injar aspect: C:\eclipse30AJDTPluginTest\eclipse\workspace\JarGeneratingProject\src\p1\AbstractAspect.aj". The Windows-style path indicates the location of the original class files in the JAR file, which was clearly built on Windows.</description>
    <commit commitTime="2004-08-13 14:49:39" id="2dfc738"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java</file>
    </fixedFiles>
  </bug>
  <bug id="67578" reportTime="2004-06-17 01:45:00">
    <summary>Privileged Aspect Access Problem Across Packages</summary>
    <description>From Irum Godil's aspectj-users posting: package a; public class ITD { private void returnNothing Object a { } } package b; import a.*; privileged aspect B { public void ITD.newFun { returnNothing "a" ; } } returns: C:\devel\test\priv\b\B.aj:8 error The method returnNothing Object from the type ITD is not visible returnNothing "a" ; ^^^^^^ 1 error Which it should not and AspectJ 1.0.6 does not give an error Work around: use this.returnNothing "a" ;</description>
    <commit commitTime="2004-08-16 16:16:20" id="6b1ef0f"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="70241" reportTime="2004-07-16 11:41:00">
    <summary>outline view shows anonymous inner classes in different way than jdt outline</summary>
    <description>See screenshots.</description>
    <commit commitTime="2004-08-17 09:37:46" id="a2469c7"/>
    <fixedFiles>
      <file>ajde/testsrc/org/aspectj/ajde/ExtensionTests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</file>
    </fixedFiles>
  </bug>
  <bug id="62642" reportTime="2004-05-18 10:23:00">
    <summary>proper handling of ExceptionInIntializer inside &lt;clinit&gt; in presence of after throwing advice</summary>
    <description>When a &amp;lt;clinit&amp;gt; of a class contains after throwing advice that may catch ExceptionInInitializer errors due to an embedded advice aspectOf that fails, the ExceptionInIntializer error does not get properly reported. For the example below: public class Main { static int x = 13; int y; public Main { y= 14; } public static void main String args[] { Main m = new Main ; m.y = 3; System.out.println "hi" ; } } aspect Aspect { before : within * { System.out.println "BEFORE " + thisJoinPointStaticPart.getKind + " at " + thisJoinPointStaticPart.getSourceLocation ; } after : within * { System.out.println "AFTER " + thisJoinPointStaticPart.getKind + " at " + thisJoinPointStaticPart.getSourceLocation ; } } .... when compiled with ajc, and then run, the following exception is given, Exception in thread "main" java.lang.NoClassDefFoundError at Main.&amp;lt;clinit&amp;gt; Main.java:1 when really one wants the following: Exception in thread "main" java.lang.ExceptionInInitializerError at Main. ... Caused by: org.aspectj.lang.NoAspectBoundException: Aspect at Aspect.aspectOf .. ------------- Here is a fix ... I give the decompiled &amp;lt;clinit&amp;gt; for Main.java and indicate with comments, look for ***LJH ****, what can be woven to fix it. Basically, the catch block for after throwing, when in &amp;lt;clinit&amp;gt;, should first check if the caught exception if a ExceptionInInitializerError, and if so just throw it. ----------- static { org.aspectj.runtime.reflect.Factory r1; java.lang.Throwable r2, r31; int $i0; r1 = new Factory "Main.java", Class.forName "Main" ; ajc$tjp_0 = r1.makeSJP "field-set", r1.makeFieldSig "8-x-Main-int-" , 2 ; ajc$tjp_1 = r1.makeSJP "staticinitialization", r1.makeInitializerSig "8--Main-" , 2 ; ajc$tjp_10 = r1.makeSJP "preinitialization", r1.makeConstructorSig "1--Main----" , 5 ; ajc$tjp_2 = r1.makeSJP "field-set", r1.makeFieldSig "0-y-Main-int-" , 6 ; ajc$tjp_3 = r1.makeSJP "constructor-execution", r1.makeConstructorSig "1--Main----" , 6 ; ajc$tjp_4 = r1.makeSJP "constructor-call", r1.makeConstructorSig "1--Main----" , 10 ; ajc$tjp_5 = r1.makeSJP "field-set", r1.makeFieldSig "0-y-Main-int-" , 11 ; ajc$tjp_6 = r1.makeSJP "field-get", r1.makeFieldSig "19-out-java.lang.System-java.io.PrintStream-" , 12 ; ajc$tjp_7 = r1.makeSJP "method-call", r1.makeMethodSig "1-println-java.io.PrintStream-java.lang.String:-arg0:--void-" , 12 ; ajc$tjp_8 = r1.makeSJP "method-execution", r1.makeMethodSig "9-main-Main-[Ljava.lang.String;:-args:--void-" , 10 ; ajc$tjp_9 = r1.makeSJP "initialization", r1.makeConstructorSig "1--Main----" , 6 ; try { Aspect.aspectOf .ajc$before$Aspect$1$36f01b1c ajc$tjp_1 ; $i0 = 13; try { Aspect.aspectOf .ajc$before$Aspect$1$36f01b1c ajc$tjp_0 ; x = $i0; } catch Throwable $r30 { /*** LJH insert here *****/ if $r30 instanceof ExceptionInIntializerError //*** throw $r30 ; //*** /***********/ r31 = $r30; Aspect.aspectOf .ajc$after$Aspect$2$36f01b1c ajc$tjp_0 ; throw r31; } Aspect.aspectOf .ajc$after$Aspect$2$36f01b1c ajc$tjp_0 ; } catch Throwable $r36 { /*** LJH insert here *****/ if $r36 instanceof ExceptionInIntializerError //*** throw $r36 ; //*** /***********/ r2 = $r36; Aspect.aspectOf .ajc$after$Aspect$2$36f01b1c ajc$tjp_1 ; throw r2; } Aspect.aspectOf .ajc$after$Aspect$2$36f01b1c ajc$tjp_1 ; }</description>
    <commit commitTime="2004-08-17 14:04:29" id="84e4e53"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="71076" reportTime="2004-07-29 09:58:00">
    <summary>Missing Javadoc comments that aren't missing</summary>
    <description>Reported in the AJDT newsgroup: Go to Preferences &amp;gt; Java &amp;gt; Compiler &amp;gt; Javadoc and set "Missing javadoc comments" to "Warning". You then get warnings against things you wouldn't expect, such as after advice. /** * A comment */ public aspect World { pointcut greeting : execution * Hello.sayHello .. ; /** * A comment */ after returning : greeting { System.out.println "world" ; } } This gives two warnings, one for the aspect itself, and one for the after returning advice. The warnings occur both with and without the existence of Javadoc comments!</description>
    <commit commitTime="2004-08-18 10:33:07" id="5b90224"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/AjdtBatchTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="71723" reportTime="2004-08-10 13:32:00">
    <summary>Inconsistency in scoping of protected members in ITDs</summary>
    <description>When introducing new member functions to existing classes via inter-type declarations, the scoping rules that apply to the ITD bodies are the same as for the aspect - for example, private members of the target class cannot be accessed unless the aspect is privileged. Similarly, protected members of classes in different packages should not be visible in ITDs unless the aspect is privileged. This rule is only enforced for protected members declared in the target class - protected members that are inherited are visible from ITDs in aspects in different packages. The following is an example of this: ---------------------- package foo; public class Foo extends AncientFoo { protected int i { return 42; } public static void main String[] args { new Foo .doStuff ; } public void doStuff { } protected int ancientI { return 42; } } class AncientFoo { protected int ancientI { return -42; } protected int ancientJ { return 0; } } ---------- package bar; import foo.Foo; aspect Bar { public void Foo.doing { try { System.out.println i ; // fails in ajc System.out.println ancientI ; // fails in ajc System.out.println ancientJ ; // succeeds System.out.println clone ; // succeeds } catch Throwable t { } } before Foo f : call * doStuff .. &amp;amp;&amp;amp; target f { f.doing ; } } ------------------- All four calls in Foo.doing should fail, as they refer to protected members of foo.Foo from package bar. However, only the first 2 - the ones directly declared/overridden in foo.Foo - are detected as errors, and removing them makes the rest compile and execute. Best wishes, Pavel</description>
    <commit commitTime="2004-08-18 12:39:40" id="dfb15c1"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="71811" reportTime="2004-08-11 13:40:00">
    <summary>AJDoc: should be able to set encoding like javadoc</summary>
    <description>ajdoc doesn't support the -encoding -docencoding and -charset options of javadoc. Especially, it doesn't pass on the -encoding to ajc. If your project uses a source file encoding e.g. UTF-8 differing form the platform standard, and some java identifiers use characters byond the standard ASCII range, you won't be able to use ajdoc at all.</description>
    <commit commitTime="2004-08-20 01:01:45" id="5f80c8c"/>
    <fixedFiles>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/Main.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="72699" reportTime="2004-08-26 11:46:00">
    <summary>Bogus error message: The abstract method ajc$pointcut$$tracingScope$a2 in type Tracing can only be defined by an abstract class</summary>
    <description>When attempting to compile the following aspect the resulting error message should say something like "The abstract method pointcut tracingScope in type Tracing can only be defined by an abstract aspect" public aspect Tracing { public abstract pointcut tracingScope ; }</description>
    <commit commitTime="2004-08-27 11:18:01" id="5e08765"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="46298" reportTime="2003-11-07 14:40:00">
    <summary>Aspectj generate code does not de-compile cleanly.</summary>
    <description>Under certain condition you can not cleanly decompile code generated by the aspectj compiler/byte code weaver. package com.regular; public class ExceptionCatcher { public ExceptionCatcher { super ; } public void catchException { try { ExceptionThrower throwUp = new ExceptionThrower ; throwUp.throwException ; } catch Exception e { System.out.println "Inside my catch block" ; } } public static void main String[] args { ExceptionCatcher catcher = new ExceptionCatcher ; catcher.catchException ; } } package com.aop; import org.aspectj.lang.JoinPoint; public aspect ExceptionHandler { pointcut classList : within com.regular..* ; before Throwable e : classList &amp;amp;&amp;amp; handler * &amp;amp;&amp;amp; args e { System.out.println "Starting before block" ; log thisJoinPointStaticPart, e ; System.out.println "End of before block" ; } private void log JoinPoint.StaticPart jp, Throwable e { System.out.println "Class Name: " + jp.getSignature .getDeclaringType ; System.out.println "Error Message" + e.getMessage ; } } Runing JAD: jad ExceptionCatcher.class Parsing ExceptionCatcher.class... Generating ExceptionCatcher.jad Couldn't fully decompile method catchException Couldn't resolve all exception handlers in method catchException Now the JAD Output: // Decompiled by Jad v1.5.7. Copyright 1997-99 Pavel Kouznetsov. // Jad home page: http://www.geocities.com/SiliconValley/Bridge/8617/jad.html // Decompiler options: packimports 3 // Source File Name: ExceptionCatcher.java package com.regular; import com.aop.ExceptionHandler; import com.capitalone.risk.aop.ITestInterface; import com.capitalone.risk.aop.ITestInterfaceAspect; import java.io.PrintStream; import org.aspectj.runtime.reflect.Factory; // Referenced classes of package com.regular: // ExceptionThrower public class ExceptionCatcher implements com.aop.IntroductionPointCut.IPhilipsTarget { public ExceptionCatcher { } public void catchException { if this instanceof ITestInterface ITestInterfaceAspect.aspectOf .ajc$before$com_capitalone_risk_aop_ITestInterfaceAspect$113 ITestInterface this ; ExceptionThrower throwUp = new ExceptionThrower ; throwUp.throwException ; break MISSING_BLOCK_LABEL_77; Exception exception; exception; ExceptionHandler.aspectOf .ajc$before$com_aop_ExceptionHandler$1f8 exception, ajc$tjp_0 ; Exception e = exception; System.out.println "Inside my catch block" ; break MISSING_BLOCK_LABEL_77; Throwable throwable; throwable; if this instanceof ITestInterface ITestInterfaceAspect.aspectOf .ajc$after$com_capitalone_risk_aop_ITestInterfaceAspect$172 ITestInterface this ; throw throwable; if this instanceof ITestInterface ITestInterfaceAspect.aspectOf .ajc$after$com_capitalone_risk_aop_ITestInterfaceAspect$172 ITestInterface this ; return; } public static void main String args[] { ExceptionCatcher catcher = new ExceptionCatcher ; catcher.catchException ; } public static final org.aspectj.lang.JoinPoint.StaticPart ajc$tjp_0; static { Factory factory = new Factory "ExceptionCatcher.java", Class.forName "com.regular.ExceptionCatcher" ; ajc$tjp_0 = factory.makeSJP "exception-handler", factory.makeCatchClauseSig "0--com.regular.ExceptionCatcher- java.lang.Exception-&amp;lt;missing&amp;gt;-" , 33 ; } } The aspect class: jad ExceptionHandler.class Parsing ExceptionHandler.class... Generating ExceptionHandler.jad Couldn't fully decompile method aspectOf // Decompiled by Jad v1.5.7. Copyright 1997-99 Pavel Kouznetsov. // Jad home page: http://www.geocities.com/SiliconValley/Bridge/8617/jad.html // Decompiler options: packimports 3 // Source File Name: ExceptionHandler.java package com.aop; import java.io.PrintStream; import org.aspectj.lang.NoAspectBoundException; import org.aspectj.lang.Signature; public class ExceptionHandler { public ExceptionHandler { } public void ajc$before$com_aop_ExceptionHandler$1f8 Throwable e, org.aspectj.lang.JoinPoint.StaticPart thisJoinPointStaticPart { System.out.println "Starting before block" ; log thisJoinPointStaticPart, e ; System.out.println "End of before block" ; } private void log org.aspectj.lang.JoinPoint.StaticPart jp, Throwable e { System.out.println "Class Name: " + jp.getSignature .getDeclaringType ; System.out.println "Error Message" + e.getMessage ; } public static ExceptionHandler aspectOf { ajc$perSingletonInstance; JVM INSTR dup ; JVM INSTR ifnull 8; goto _L1 _L2 _L1: return; _L2: throw new NoAspectBoundException ; } public static boolean hasAspect { return ajc$perSingletonInstance != null; } private static void ajc$postClinit { ajc$perSingletonInstance = new ExceptionHandler ; } public static final ExceptionHandler ajc$perSingletonInstance; static { ajc$postClinit ; } } Enjoy! Ron</description>
    <commit commitTime="2004-09-01 15:26:43" id="4921f0c"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="73433" reportTime="2004-09-08 05:46:00">
    <summary>AspectJ does not correctly support -cp</summary>
    <description>Discovered by Andy Brodie. -cp is a shorthand for -classpath supported by the JDT compiler. AspectJ does not correctly support -cp option. Look at this example: C:\aspectj1.2&amp;gt;ajc -inpath injar.jar -outjar outjar.jar -cp lib\aspectjrt.jar [error] can't find type org.aspectj.lang.JoinPoint 1 error C:\aspectj1.2&amp;gt;ajc -inpath injar.jar -outjar outjar.jar -classpath lib\aspectjrt.jar This is due to the arg parser in AspectJ only recognizing -classpath. It doesn't fail when it encounters -cp, it just ignores it and passes it down to JDT for processing. The fix is to recognize -cp too.</description>
    <commit commitTime="2004-09-08 10:14:44" id="8e4d898"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="72157" reportTime="2004-08-18 06:39:00">
    <summary>declare soft can cause programs with invalid exception behaviour to be generated</summary>
    <description>Compiling the program below results in the constructor for the class SCE2 throwing Exception, which it is not declared to throw either in the source code or in the generated bytecode. If the 'declare soft' statement is removed, then the super call in the SCE2 constructor is correctly reported as throwing an undeclared exception; it seems that the 'declare soft' statement turns off the exception checking of the super call despite there being no join point which covers this call that would actually soften the exception. I'm using 'DEVELOPMENT built on Monday Aug 16, 2004 at 13:50:47 GMT'. public class SuperConsExc { public SuperConsExc throws Exception { throw new Exception ; } public static void main String[] args { new SCE2 ; } } class SCE2 extends SuperConsExc { public SCE2 { super ; } } aspect SCEAspect { declare soft: Exception: within SCE2 ; }</description>
    <commit commitTime="2004-09-08 12:04:49" id="eca1429"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
      <file>tests/bugs/ConvertToUnchecked.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="74238" reportTime="2004-09-19 05:51:00">
    <summary>Applet which uses cflow pointcut gets AccessControlException</summary>
    <description>When I used cflow pointcut for my applet, I couldn't launch the Applet. java.lang.ExceptionInInitializerError at SandAspect.ajc$preClinit SandAspect.aj at SandAspect.&amp;lt;clinit&amp;gt; SandAspect.aj at SandApplet.init SandApplet.java at sun.applet.AppletPanel.run AppletPanel.java:353 at java.lang.Thread.run Thread.java:534 Caused by: java.security.AccessControlException: access denied java.util.Proper tyPermission aspectj.runtime.cflowstack.usethreadlocal read at java.security.AccessControlContext.checkPermission AccessControlConte xt.java:269 at java.security.AccessController.checkPermission AccessController.java: 401 at java.lang.SecurityManager.checkPermission SecurityManager.java:524 at java.lang.SecurityManager.checkPropertyAccess SecurityManager.java:12 76 at java.lang.System.getProperty System.java:612 at org.aspectj.runtime.internal.CFlowStack.selectFactoryForVMVersion CFl owStack.java:124 at org.aspectj.runtime.internal.CFlowStack.&amp;lt;clinit&amp;gt; CFlowStack.java:59 ... 5 more It because CFlowStack uses System.getProperty method with no try..catch block. Applet doesn't have permission to read system property: "aspectj.runtime.cflowstack.usethreadlocal". workaround: modify CFlowStack.java 1.5 line 123,124 like this ----- private static String getSystemPropertyWithNoSecurityException String aPropertyName, String aDefaultValue { try{ return System.getProperty aPropertyName, aDefaultValue ; } catch java.lang.SecurityException e { return aDefaultValue; } } private static void selectFactoryForVMVersion { String override = getSystemPropertyWithNoSecurityException "aspectj.runtime.cflowstack.usethreadlocal" , "unspecified" ; ----- I think defining getSystemPropertyWithNoSecurityException or more simple name :- method in some utility class and using it where you call System.getProperty are better way.</description>
    <commit commitTime="2004-10-14 08:12:09" id="6e155a6"/>
    <fixedFiles>
      <file>runtime/src/org/aspectj/runtime/internal/CFlowCounter.java</file>
      <file>runtime/src/org/aspectj/runtime/internal/CFlowStack.java</file>
    </fixedFiles>
  </bug>
  <bug id="75568" reportTime="2004-10-04 10:12:00">
    <summary>ajc changes classfile timestamps even if compilation fails regression</summary>
    <description>It appears that ajc 1.2 updates a classfile timestamps even if the compilation fails. This breaks the integration with the Ant build system. E.g. using the ant "javac" task with the Ajc11CompilerAdapter interface, the compilation may fail on the first attempt and succeed on the second attempt, - because ajc has touched the timestamp and Ant hence decides that nothing needs to be recompiled. This did not happen in ajc 1.1. To reproduce: 1. In the examples/observer folder, run a build: ajc -sourceroots . 2. Edit the "Demo.java" class and insert the line "DONT COMPILE" 3. Run the compilation again. The compiler displays the correct error message but the Demo.class file has been updated with the compile-time timestamp.</description>
    <commit commitTime="2004-10-14 12:51:18" id="0a77939"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjCompilerAdapter.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjCompilerOptions.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AspectJBuilder.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/ajdt/internal/compiler/batch/AjdtBatchTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="76096" reportTime="2004-10-12 12:17:00">
    <summary>Anonymous classes unaware of introductions into abstract classes error can't find type $Local$</summary>
    <description>The example below generates a compiler error, on both Linux and Windows. The error occurs for ajdt eclipse as well. The compiler error: $ ajc -version &amp;gt; AspectJ Compiler 1.2 built on Friday May 21, 2004 at &amp;gt; 15:06:22 GMT &amp;gt; $ ajc ConcreteClassA.java &amp;gt; error can't find type $Local$ &amp;gt; &amp;gt; /home/marin/tests/ConcreteClassA.java:18 error Class &amp;gt; must implement the inherited abstract method &amp;gt; InterfaceA.a2 &amp;gt; InterfaceA a = new AbstractClassA { &amp;gt; ^^^^^^^^^^^^^ &amp;gt; &amp;gt; 2 errors &amp;gt; -------- &amp;gt; The example in ConcreteClassA.java : interface InterfaceA { public void a1 ; public void a2 ; } abstract class AbstractClassA implements InterfaceA { public void a1 { System.out.println "AbstractClassA.a " ; } } public class ConcreteClassA extends AbstractClassA { public void someMethod { InterfaceA a = new AbstractClassA { }; } } aspect IntroAspectA { public void AbstractClassA.a2 { System.out.println "AbstractClassA.a2 from IntroAspectA" ; } } ------------ If you comment out the body of someMethod the anonymous class , the code compiles without errors.</description>
    <commit commitTime="2004-10-19 10:37:31" id="6beb43f"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="74952" reportTime="2004-09-24 11:04:00">
    <summary>before,after ! cflow within Trace* prints nothing</summary>
    <description>Reference: "cflow within C vs within C ||cflowbelow within C in aspectj-users mailing list. The aspect TraceClass below doesn't print any message when the pointcut is defined to "!cflow within Trace* ". The other defintion "! within Trace* || cflowbelow within Trace* " works fine. Wes Isberg in his reply explained that cflow should never be used alone but he thought "there is a bug or two in here" class SomeClass { static public void main String [] args { } } // SomeClass aspect TraceClass { // members static private int level = 0; static private void offset { int i; for i = 0; i &amp;lt; level; ++i { System.out.print " " ; } } // offset pointcut pc : !cflow within Trace* // ! within Trace* || cflowbelow within Trace* ; before : pc { offset ; System.out.println "-&amp;gt; " + thisJoinPoint ; ++level; } after : pc { --level; offset ; System.out.println "&amp;lt;- " + thisJoinPoint ; } } // TraceClass In order to try to figure out what is happening within TraceClass, I added a second aspect, TraceTrace, just to trace TraceClass. aspect TraceTrace { // members static private int level = 0; static private void offset { int i; for i = 0; i &amp;lt; level; ++i { System.out.print " " ; } } // offset pointcut pc : within TraceClass ; before : pc { offset ; System.out.println "=&amp;gt; " + thisJoinPoint ; ++level; } after : pc { --level; offset ; System.out.println "&amp;lt;= " + thisJoinPoint ; } } // TraceTrace Here is what TraceTrace prints when TraceClass uses "!cflow within Trace* " =&amp;gt; staticinitialization TraceClass.&amp;lt;clinit&amp;gt; =&amp;gt; set int TraceClass.level &amp;lt;= set int TraceClass.level =&amp;gt; preinitialization TraceClass =&amp;gt; initialization TraceClass =&amp;gt; execution TraceClass &amp;lt;= execution TraceClass &amp;lt;= initialization TraceClass &amp;lt;= staticinitialization TraceClass.&amp;lt;clinit&amp;gt; The after advice is not executed for preinitialization.</description>
    <commit commitTime="2004-10-21 12:55:49" id="a303a09"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc121/Ajc121Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="77799" reportTime="2004-11-04 01:48:00">
    <summary>NullPointerException in StructureSearchManager</summary>
    <description>Calling Ajde.getDefault .getStructureSearchManager .findMatches ... for an AspectJ project that has not been built results in a NullPointerException in StructureSearchManager.findMatchesHelper ... line 58 Simple patch is attached.</description>
    <commit commitTime="2004-11-04 15:44:51" id="aab9c2c"/>
    <fixedFiles>
      <file>ajde/src/org/aspectj/ajde/ui/StructureSearchManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="80249" reportTime="2004-12-06 05:20:00">
    <summary>Order of types passed to compiler determines weaving behavior</summary>
    <description>Currently, the order in which you specify types when passing them to the compiler can affect how they are woven: For example, if we have class A and class B extends A - Also, an aspect that 'declare parents: A+ implements Serializable' then depending on whether we see A first, we may or may not make B serializable. The fix is that when we weave a type, we first weave its supertype then its superinterfaces if they were also passed to the compiler . The problematic construct is declare parents - so we only process the types in a special order if there are declare parents around. Also, because we can't currently do decp when binary weaving, the order processing logic is only being put into the source weaving pipeline.</description>
    <commit commitTime="2004-12-06 10:38:07" id="9052d5d"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="82218" reportTime="2005-01-05 04:49:00">
    <summary>fails to doc spacewar using AJDT 1.2.0M2</summary>
    <description>Using AJDT 1.2.0M2 {with Java 5 JRE on XP SP2}, install Spacewar example and generate to Spacewar/docs. Result: output has no cross-references and displays special AJDT tags , and stderr lists this exception: java.lang.StringIndexOutOfBoundsException: String index out of range: -1 at java.lang.AbstractStringBuilder.insert AbstractStringBuilder.java:980 at java.lang.StringBuffer.insert StringBuffer.java:447 at org.aspectj.tools.ajdoc.HtmlDecorator.insertDeclarationsDetails HtmlDecorator.java:350 at org.aspectj.tools.ajdoc.HtmlDecorator.addAspectDocumentation HtmlDecorator.java:234 at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFile HtmlDecorator.java:188 at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromDecl HtmlDecorator.java:116 at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromDecls HtmlDecorator.java:54 at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromInputFiles HtmlDecorator.java:43 at org.aspectj.tools.ajdoc.Main.main Main.java:210</description>
    <commit commitTime="2005-01-13 04:22:51" id="f70b383"/>
    <fixedFiles>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java</file>
      <file>ajdoc/testdata/coverage/foo/ModelCoverage.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="82340" reportTime="2005-01-06 12:25:00">
    <summary>Visibility selector ignored for pointcuts</summary>
    <description>Using ajdoc under AJDT 1.1.12 or AspectJ 1.2.1 at the commandline has the following aspect has problems. public abstract aspect Aspect { private pointcut privatePointcut ; protected pointcut protectedPointcut ; public pointcut publicPointcut ; private void privateMethod { } public void protectedMethod { } public void publicMethod { } } 1. Asking for "protected" gives all pointcuts public, protected _and_ private 2. The Aspect entry is wrong: "public abstract class Aspect" 3. The "Methods inherited ..." section has a leading comma: ", clone, equals, finalize, ..."</description>
    <commit commitTime="2005-01-13 15:53:01" id="b460597"/>
    <fixedFiles>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java</file>
      <file>ajdoc/testdata/coverage/foo/NoMembers.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="83626" reportTime="2005-01-25 11:20:00">
    <summary>@AJ</summary>
    <description>Andy wants a patch format + a bugzilla for @AJ work due to some funny license issue. Here it is as drafted</description>
    <commit commitTime="2005-01-26 14:01:30" id="7b4c7d7"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/MethodGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="83565" reportTime="2005-01-24 17:13:00">
    <summary>BCException "bad type name" thrown when compiling</summary>
    <description>I just downloaded AJDT version 1.2.0.20050124144759 and I am running Eclipse 3.1M4. I tried to use aspectJ on an existing Java 5 project. There are no aspects in it yet, just straight Java 5. The project runs just fine as a standard Java project. When add the AspectJ nature and I try to compile the project, no class files are generated and I get this error generated on a type that is parameterized: Internal compiler error org.aspectj.weaver.BCException: Bad type name: at org.aspectj.weaver.TypeX.nameToSignature TypeX.java:634 at org.aspectj.weaver.TypeX.forName TypeX.java:87 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding EclipseFactory.java:155 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBindings EclipseFactory.java:163 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember EclipseFactory.java:229 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember EclipseFactory.java:224 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.visit AsmHierarchyBuilder.java:675 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.traverse ConstructorDeclaration.java:447 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse TypeDeclaration.java:1133 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse CompilationUnitDeclaration.java:314 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.internalBuild AsmHierarchyBuilder.java:171 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.buildStructureForCompilationUnit AsmHierarchyBuilder.java:111 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishedCompilationUnit EclipseFactory.java:354 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing AjCompilerAdapter.java:138 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:373 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:682 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:168 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:102 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:165 The source code of the file that generates this error is: package mj.compiler.ast; import java.util.Vector; import mj.compiler.Driver; import mj.compiler.Visitor; public class Sequence&amp;lt;T extends AST&amp;gt; extends AST { private Vector&amp;lt;T&amp;gt; elements = new Vector&amp;lt;T&amp;gt; ; public Sequence { super 0, 0 ; } public Sequence T element { super element ; elements.add element ; } public int length { return elements.size ; } public T elementAt int i { return elements.elementAt i ; } public Sequence add T element { elements.add element ; return this; } public Sequence add int pos, T element { elements.add pos, element ; return this; } public Sequence addAll Sequence&amp;lt;T&amp;gt; others { if others == null return this; elements.addAll others.elements ; return this; } public void visitChildren Visitor v { for AST element : elements { element.visit v ; } } public void replaceChild AST old, AST gnu { T NEW = T gnu; for int i = 0; i &amp;lt; elements.size ; i++ { if elements.get i == old { elements.set i, NEW ; return; } } throw new Driver.CompileError "Can't find child in replaceChild." ; } /*** START GENERATED VISITOR PROTOCOL ***///TODO public void visit mj.compiler.Visitor v { v.visitSequence this ; } /*** END GENERATED VISITOR PROTOCOL ***/ } Hope this helps something. ps- I am able to create and run a very simple AspectJ project with an aspect, advice, and some Java 5 syntax.</description>
    <commit commitTime="2005-01-27 17:21:17" id="5765d53"/>
    <fixedFiles>
      <file>ajde/testsrc/org/aspectj/ajde/AjdeTests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</file>
    </fixedFiles>
  </bug>
  <bug id="87376" reportTime="2005-03-08 10:11:00">
    <summary>NPE when unresolved type of a bound var in a pointcut expression EclipseFactory.java:224</summary>
    <description>see attached mini-project to reproduce</description>
    <commit commitTime="2005-03-10 13:34:55" id="85aa152"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="84122" reportTime="2005-02-01 05:03:00">
    <summary>Allow aspectPath to contain directories</summary>
    <description>The -aspectpath option to the compiler only allows jar/zip files, not directories. But inpath and classpath allow directories. This capability would improve the handling of aspects spanning multiple projects in Eclipse. AJDT can currently only support jar/zip files on the aspect path, which requires one of the projects to create an outjar instead of writing to the bin directory as usual. The iajc ant task could then also be enhanced to support aspectpath directories.</description>
    <commit commitTime="2005-03-23 16:47:55" id="68f6350"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="84333" reportTime="2005-02-03 10:14:00">
    <summary>BCException: Bad type name: TypeX.nameToSignature TypeX.java:635</summary>
    <description>To reproduce: cd doc\examples\introduction ajc -1.5 @files.lst Output from ajcore is below. This looks similar to bug 83565 , but we aren't building the structure model here. ---- AspectJ Properties --- AspectJ Compiler DEVELOPMENT built on Tuesday Feb 1, 2005 at 18:05:49 GMT ---- Dump Properties --- Dump file: ajcore.20050203.150321.210.txt Dump reason: org.aspectj.weaver.BCException Dump on exception: true Dump at exit condition: abort ---- Exception Information --- org.aspectj.weaver.BCException: Bad type name: at org.aspectj.weaver.TypeX.nameToSignature TypeX.java:635 at org.aspectj.weaver.TypeX.forName TypeX.java:88 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding EclipseFactory.java:155 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBindings EclipseFactory.java:163 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember EclipseFactory.java:229 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember EclipseFactory.java:224 at org.aspectj.ajdt.internal.compiler.problem.AjProblemReporter.abstractMethodMustBeImplemented AjProblemReporter.java:203 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.checkAbstractMethod MethodVerifier.java:96 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.checkMethods MethodVerifier.java:261 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.verify MethodVerifier.java:575 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.verifyMethods SourceTypeBinding.java:1376 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.verifyMethods CompilationUnitScope.java:672 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:543 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:365 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:682 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:168 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:102 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:109 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:291 at org.aspectj.tools.ajc.Main.runMain Main.java:227 at org.aspectj.tools.ajc.Main.main Main.java:80 ---- System Properties --- java.runtime.name=Java TM 2 Runtime Environment, Standard Edition sun.boot.library.path=e:\sun150\jre\bin java.vm.version=1.5.0_01-b08 java.vm.vendor=Sun Microsystems Inc. java.vendor.url= http://java.sun.com/ path.separator=; java.vm.name=Java HotSpot TM Client VM file.encoding.pkg=sun.io user.country=GB sun.os.patch.level=Service Pack 1 java.vm.specification.name=Java Virtual Machine Specification user.dir=C:\aspectj1.5\doc\examples\introduction java.runtime.version=1.5.0_01-b08 java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment java.endorsed.dirs=e:\sun150\jre\lib\endorsed os.arch=x86 java.io.tmpdir=C:\DOCUME~1\mchapman\LOCALS~1\Temp\ line.separator= java.vm.specification.vendor=Sun Microsystems Inc. user.variant= os.name=Windows XP sun.jnu.encoding=Cp1252 java.library.path=e:\sun150\bin;.;C:\WINDOWS\System32;C:\WINDOWS;e:\sun150\jre\bin;c:\aspectj1.5\bin;C:\PROGRAM FILES\THINKPAD\UTILITIES;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\Program Files\IBM\Infoprint Select;C:\Program Files\ATI Technologies\ATI Control Panel;C:\Program Files\PC-Doctor for Windows\services;C:\Program Files\ObjREXX;C:\Program Files\ObjREXX\OODIALOG;;c:\cygwin\bin;c:\utilities;e:\ant\bin;c:\aspectj1.2\bin java.specification.name=Java Platform API Specification java.class.version=49.0 sun.management.compiler=HotSpot Client Compiler os.version=5.1 user.home=C:\Documents and Settings\mchapman user.timezone=Europe/London java.awt.printerjob=sun.awt.windows.WPrinterJob file.encoding=Cp1252 java.specification.version=1.5 java.class.path=c:\aspectj1.5\lib\aspectjtools.jar;e:\sun150\lib\tools.jar;c:\aspectj1.5\lib\aspectjrt.jar user.name=mchapman java.vm.specification.version=1.0 java.home=e:\sun150\jre sun.arch.data.model=32 user.language=en java.specification.vendor=Sun Microsystems Inc. awt.toolkit=sun.awt.windows.WToolkit java.vm.info=mixed mode java.version=1.5.0_01 java.ext.dirs=e:\sun150\jre\lib\ext sun.boot.class.path=e:\sun150\jre\lib\rt.jar;e:\sun150\jre\lib\i18n.jar;e:\sun150\jre\lib\sunrsasign.jar;e:\sun150\jre\lib\jsse.jar;e:\sun150\jre\lib\jce.jar;e:\sun150\jre\lib\charsets.jar;e:\sun150\jre\classes java.vendor=Sun Microsystems Inc. file.separator=\ java.vendor.url.bug= http://java.sun.com/cgi-bin/bugreport.cgi sun.io.unicode.encoding=UnicodeLittle sun.cpu.endian=little sun.desktop=windows sun.cpu.isalist=pentium_pro+mmx pentium_pro pentium+mmx pentium i486 i386 i86 ---- Command Line --- -1.5 @files.lst ---- Full Classpath --- e:\sun150\jre\lib\rt.jar 37600990 bytes e:\sun150\jre\lib\i18n.jar missing e:\sun150\jre\lib\sunrsasign.jar missing e:\sun150\jre\lib\jsse.jar 549229 bytes e:\sun150\jre\lib\jce.jar 81615 bytes e:\sun150\jre\lib\charsets.jar 8628006 bytes e:\sun150\jre\classes missing e:\sun150\jre\lib\ext\dnsns.jar 8176 bytes e:\sun150\jre\lib\ext\localedata.jar 802502 bytes e:\sun150\jre\lib\ext\sunjce_provider.jar 153036 bytes e:\sun150\jre\lib\ext\sunpkcs11.jar 173235 bytes e:\sun150\lib\tools.jar 6812965 bytes c:\aspectj1.5\lib\aspectjrt.jar 42013 bytes e:\sun150\jre\lib\ext\dnsns.jar 8176 bytes e:\sun150\jre\lib\ext\localedata.jar 802502 bytes e:\sun150\jre\lib\ext\sunjce_provider.jar 153036 bytes e:\sun150\jre\lib\ext\sunpkcs11.jar 173235 bytes e:\sun150\lib\tools.jar 6812965 bytes c:\aspectj1.5\lib\aspectjrt.jar 42013 bytes ---- Compiler Messages --- error at no source information available C:\aspectj1.5\doc\examples\introduction\Point.java:0::0 Internal compiler error org.aspectj.weaver.BCException: Bad type name: at org.aspectj.weaver.TypeX.nameToSignature TypeX.java:635 at org.aspectj.weaver.TypeX.forName TypeX.java:88 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding EclipseFactory.java:155 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBindings EclipseFactory.java:163 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember EclipseFactory.java:229 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember EclipseFactory.java:224 at org.aspectj.ajdt.internal.compiler.problem.AjProblemReporter.abstractMethodMustBeImplemented AjProblemReporter.java:203 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.checkAbstractMethod MethodVerifier.java:96 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.checkMethods MethodVerifier.java:261 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.verify MethodVerifier.java:575 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.verifyMethods SourceTypeBinding.java:1376 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.verifyMethods CompilationUnitScope.java:672 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:543 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:365 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:682 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:168 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:102 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:109 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:291 at org.aspectj.tools.ajc.Main.runMain Main.java:227 at org.aspectj.tools.ajc.Main.main Main.java:80 abort ABORT -- BCException Bad type name: Bad type name: org.aspectj.weaver.BCException: Bad type name: at org.aspectj.weaver.TypeX.nameToSignature TypeX.java:635 at org.aspectj.weaver.TypeX.forName TypeX.java:88 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding EclipseFactory.java:155 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBindings EclipseFactory.java:163 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember EclipseFactory.java:229 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember EclipseFactory.java:224 at org.aspectj.ajdt.internal.compiler.problem.AjProblemReporter.abstractMethodMustBeImplemented AjProblemReporter.java:203 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.checkAbstractMethod MethodVerifier.java:96 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.checkMethods MethodVerifier.java:261 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.verify MethodVerifier.java:575 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.verifyMethods SourceTypeBinding.java:1376 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.verifyMethods CompilationUnitScope.java:672 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:543 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:365 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:682 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:168 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:102 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:109 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:291 at org.aspectj.tools.ajc.Main.runMain Main.java:227 at org.aspectj.tools.ajc.Main.main Main.java:80 ---- org.aspectj.weaver.bcel.BcelWorld ---- Shadow mungers: Empty Type mungers: EclipseTypeMunger ResolvedTypeMunger Method, java.lang.Object introduction.Point.clone BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.Cloneable. EclipseTypeMunger ResolvedTypeMunger Method, int introduction.Point.hashCode EclipseTypeMunger ResolvedTypeMunger Method, boolean introduction.Point.equals java.lang.Object EclipseTypeMunger ResolvedTypeMunger Method, int introduction.Point.compareTo java.lang.Object BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.Comparable.</description>
    <commit commitTime="2005-03-23 20:26:21" id="fb01cad"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="85297" reportTime="2005-02-15 12:31:00">
    <summary>Improvements to incremental compilation</summary>
    <description>This bug is to track compiler improvements to incremental compilation. There are multiple scenarios to think about but the first focus is changing one source file for a class/interface that is affected by an Aspect - it should compile/weave almost instantly. Recently response times have been reported of &amp;gt;3seconds and worse... and this is not reasonable. I've put the following improvements in today: - Caching classpath calculations rather than performing them repeatedly. - Improved logic to detect weaver completion. - Removed unnecessary serialization of the structure model. These are available in dev builds right now: ajdt_1.2.0.20050215161840 I'd be interested in user feedback on whether they see noticeable improvements in their particular projects. more improvements to follow shortly.</description>
    <commit commitTime="2005-04-05 14:50:06" id="e460b1e"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/IncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="90588" reportTime="2005-04-07 06:32:11">
    <summary>compiler verifyerror and an NPE</summary>
    <description/>
    <commit commitTime="2005-04-13 21:46:40" id="d697649"/>
    <fixedFiles>
      <file>tests/bugs150/pr90588/AbstractClass.java</file>
      <file>tests/bugs150/pr90588/ConcreteClass.java</file>
      <file>tests/src/org/aspectj/systemtest/knownfailures/KnownfailuresTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="92630" reportTime="2005-04-25 15:26:00">
    <summary>Null Pointer Exception thrown by ajc compiler</summary>
    <description>Hi, I wrote my first aspect using aspect J as follows to enable logging: package com.apple.ist.espresso.aspects; import com.apple.ist.espresso.util.EspressoLogger; public class EspressoTrace { private static EspressoLogger logger = null; public static void initLogger EspressoLogger l { logger = l; } public static void TraceEntry String message { logger.debug "Entering : " + message ; } public static void TraceExit String message { logger.debug "Exiting : " + message ; } } My aspect is in the file EspressoTraceAspect.java as follows: package com.apple.ist.espresso.aspects; aspect EspressoTraceAspect { pointcut traceCall : execution public * com.apple.ist.espresso..*.* .. ; before : traceCall { Trace.traceEntry "" + thisJointPointStaticPart.getSignature ; } after : traceCall { Trace.traceExit "" + thisJointPointStaticPart.getSignature ; public static void main String[] args { Trace.initStream EspressoLogger.getLogger TraceAspect.class ; } } When i compiled it using the following target: init target that sets the required variables are done as shown in the example build.xml file and are NOT shown here &amp;lt;target name="Ajx" depends="init"&amp;gt; &amp;lt;iajc destdir="${build.dir}/classes" fork="true" forkclasspath="${aspectjtools.jar}" argfiles="${list}"&amp;gt; &amp;lt;src path="${src.dir}"/&amp;gt; &amp;lt;src path="${sharedsrc.dir}"/&amp;gt; &amp;lt;src path="${gensrc.dir}"/&amp;gt; &amp;lt;classpath&amp;gt; &amp;lt;path refid="classpath"/&amp;gt; &amp;lt;path refid="aspectj.lib"/&amp;gt; &amp;lt;/classpath&amp;gt; &amp;lt;/iajc&amp;gt; &amp;lt;/target&amp;gt; i'm getting the following exception. [error] Internal compiler error [iajc] java.lang.NullPointerException [iajc] at org.aspectj.weaver.bcel.UnwovenClassFile.deleteRealFile UnwovenClassFile.java:170 [iajc] at org.aspectj.ajdt.internal.core.builder.AjState.deleteClassFile AjState.java:413 [iajc] at org.aspectj.ajdt.internal.core.builder.AjState.noteResult AjState.java:450 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager$3.acceptResult AjBuildManager.java: 704 [iajc] at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing AjCompilerAdapter.java:144 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:373 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:683 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:168 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:102 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:109 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 [iajc] at org.aspectj.tools.ajc.Main.run Main.java:291 [iajc] at org.aspectj.tools.ajc.Main.runMain Main.java:227 [iajc] at org.aspectj.tools.ajc.Main.main Main.java:80 [iajc] no source information available [iajc] /Users/manjulajayaraman/projects/JADE/jadecvs/NewEspresso/ServerDevelopment/Phase1/ src/com/apple/ist/espresso/aspects/EspressoTrace.java:6 [error] The type EspressoTrace is already defined [iajc] public class EspressoTrace { [iajc] ^^^^^^^^^^^^ [iajc] ABORT [iajc] [iajc] Exception thrown from AspectJ 1.5.0M2 [iajc] This might be logged as a bug already -- find current bugs at [iajc] http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler [iajc] Bugs for exceptions thrown have titles File:line from the top stack, [iajc] e.g., "SomeFile.java:243" [iajc] If you don't find the exception below in a bug, please add a new bug [iajc] at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ [iajc] To make the bug a priority, please include a test program [iajc] that can reproduce this exception. [iajc] null [iajc] java.lang.NullPointerException [iajc] at org.aspectj.weaver.bcel.UnwovenClassFile.deleteRealFile UnwovenClassFile.java:170 [iajc] at org.aspectj.ajdt.internal.core.builder.AjState.deleteClassFile AjState.java:413 [iajc] at org.aspectj.ajdt.internal.core.builder.AjState.noteResult AjState.java:450 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager$3.acceptResult AjBuildManager.java: 704 [iajc] at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing AjCompilerAdapter.java:144 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:373 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:683 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:168 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:102 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:109 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 [iajc] at org.aspectj.tools.ajc.Main.run Main.java:291 [iajc] at org.aspectj.tools.ajc.Main.runMain Main.java:227 [iajc] at org.aspectj.tools.ajc.Main.main Main.java:80 [iajc] 1 fail|abort, 2 errors BUILD FAILED Could someone please let me know what's the problem and how do i proceed now? Thanks, Manjula</description>
    <commit commitTime="2005-04-26 16:14:06" id="02f75ba"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/UnwovenClassFile.java</file>
    </fixedFiles>
  </bug>
  <bug id="91719" reportTime="2005-04-18 05:21:00">
    <summary>Work with Oli B to pull in examples of generating all the LINT messages</summary>
    <description>Oli on the dev list has written code examples that generate each type of lint warning, work with him to pull them into the codebase. The relevant email is below. Make sure they go via a bugzilla attachment to ensure EPL rules are met. ==== Hi Andrew, for "unresolvableMember" I gave up to find an example. But for the other Xlint warnings you can find my example under http://www.javatux.de/aj/ as compress tarfile xlint.tgz or as directory for online browsing . BTW - I read the announcement from Adrian. There are new Xlint warnings? Which ones? Happy Eastern Oliver Andrew Clement wrote: &amp;gt; &amp;gt; Hi Oli, &amp;gt; &amp;gt; If you can come up with examples that produce all of them, I'd be keen to &amp;gt; include them as testcases in AspectJ where appropriate as I know we don't &amp;gt; properly test some of them. A good place to start would be searching &amp;gt; in the bugzilla database - I'm not sure how accurately that is indexed &amp;gt; by google. Here's a bit of info I've quickly dug up: &amp;gt; &amp;gt; &amp;gt; * invalidWildcardTypeName &amp;gt; Never signalled anywhere in the codebase! so ignore this one... &amp;gt; &amp;gt; &amp;gt; * unresolvableMember, &amp;gt; This one is hard to reproduce, see bug 59596 where I've done a bit &amp;gt; of write up about it. &amp;gt; &amp;gt; &amp;gt; * typeNotExposedToWeaver &amp;gt; Should be recreatable by trying to weave into something that is &amp;gt; actually on the classpath rather than the inpath. &amp;gt; &amp;gt; &amp;gt; * shadowNotInStructure &amp;gt; Signalled if the structure model is broken, probably can't happen &amp;gt; right now as we work hard to ensure it is always correct. &amp;gt; &amp;gt; &amp;gt; * unmatchedSuperTypeInCall &amp;gt; These two covariance problems demonstrate this xlint. it is related &amp;gt; to specifying the declaring type in a call type pattern and it &amp;gt; not matching as you expected... &amp;gt; &amp;gt; CovBaseProgram01.java &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; &amp;gt; &amp;gt; class Car {} &amp;gt; &amp;gt; class FastCar extends Car {} &amp;gt; &amp;gt; class Super { &amp;gt; Car getCar { &amp;gt; return new Car ; &amp;gt; } &amp;gt; } &amp;gt; &amp;gt; class Sub extends Super { &amp;gt; FastCar getCar { &amp;gt; return new FastCar ; &amp;gt; } &amp;gt; } &amp;gt; &amp;gt; public class CovBaseProgram01 { &amp;gt; public static void main String[] argv { &amp;gt; new CovBaseProgram01 .run ; &amp;gt; } &amp;gt; &amp;gt; public void run { &amp;gt; Super instance_super = new Super ; &amp;gt; Sub instance_sub = new Sub ; &amp;gt; &amp;gt; Car c1 = instance_super.getCar ; &amp;gt; Car c2 = instance_sub.getCar ; &amp;gt; } &amp;gt; } &amp;gt; &amp;gt; // FastCar is a subclass of Car. &amp;gt; // Sub is a subclass of Super. &amp;gt; ============== &amp;gt; CovAspect06.aj &amp;gt;&amp;gt;&amp;gt; &amp;gt; &amp;gt; aspect CovAspect06 { &amp;gt; &amp;gt; pointcut p : call Car Sub.getCar ; &amp;gt; &amp;gt; @org.aspectj.lang.annotation.SuppressAjWarnings &amp;gt; before : p { &amp;gt; System.out.println "[call Car Sub.getCar matched on &amp;gt; '"+thisJoinPoint+":"+thisJoinPoint.getSourceLocation +"']" ; &amp;gt; } &amp;gt; &amp;gt; } &amp;gt; ================ &amp;gt; ajc -1.5 CovAspect06.aj CovBaseProgram01.ja &amp;gt; &amp;gt; &amp;gt; * noInterfaceCtorJoinpoint &amp;gt; related to trying to put advice on constructor execution join point for &amp;gt; an interface I think... &amp;gt; &amp;gt; &amp;gt; hope some of that is useful... &amp;gt; &amp;gt; Andy. &amp;gt; &amp;gt; &amp;gt; &amp;gt; *"Oli B." &amp;lt; boehm@javatux.de &amp;gt;* &amp;gt; Sent by: aspectj-dev-admin@eclipse.org</description>
    <commit commitTime="2005-05-04 14:37:41" id="70b9ffd"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/xlint/XLintTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="87282" reportTime="2005-03-07 11:27:00">
    <summary>Compilation error on generic member introduction</summary>
    <description>The compiler aborts with the following introduction code: aspect introductionToA{ private ArrayList&amp;lt;B&amp;gt; A.m_Array = new ArrayList&amp;lt;B&amp;gt; ; public void A.addB B tmp { m_Array.add tmp ; } } The error message is "[error] The method add E in the type ArrayList&amp;lt;E&amp;gt; is not applicable for the arguments B m_Array.add tmp " Compiling with AspectJ Development version 2005/02/18 .</description>
    <commit commitTime="2005-05-06 15:42:28" id="51c018d"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="93345" reportTime="2005-04-30 08:49:00">
    <summary>unresolved joinpoint in cflow causes ClassCastException on BcelWeaver:933</summary>
    <description>I'm getting ClassCastException while compiling following code: ---- Test.java ---- class AClass { // void method {} } aspect AnAspect { pointcut annt : cflow execution * * .. ; before : annt { System.out.println "before annt" ; } } ---- Here's output of the compiler: --- out --- java.lang.ClassCastException: org.aspectj.weaver.ResolvedMember at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:933 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:244 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:119 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:385 [cut] ------ The problem is caused by cflow on unresolved not existing jointpoint. When you uncomment the method in AnClass, the problem disappears. I found this bug when I was introducing an aspect which has pointcuts based on annotations to fresh object-oriented system without annotated classes. When I started to annotate the classes problem disappeared. Following code illustates simplified situation: --- Test2.java --- import java.lang.annotation.*; @Target ElementType.METHOD @interface Ann {} class AClass { // @Ann void method {} } aspect AnAspect { pointcut annt : cflow execution @Ann * * .. ; before : annt { System.out.println "before annt" ; } } ---- I'm attaching those sources and ajcore files. Best regards, Michal</description>
    <commit commitTime="2005-05-09 11:08:28" id="f603458"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/AllTestsAspectJ150.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/SuppressedWarnings.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="86832" reportTime="2005-02-28 09:59:00">
    <summary>Internal compiler error generics?</summary>
    <description>Attached is project that will generate an "Internal compiler error" for a single class that extends "ArrayList&amp;lt;Object&amp;gt;". If the class extends just "ArrayList" the compiler error does not occur. Note that the "extends ArrayList&amp;lt;Object&amp;gt;" class compiles successuflly without the aspectj nature. --- exception --- Severity Description Resource In Folder Location Creation Time 2 Internal compiler error java.lang.NullPointerException at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ClassScope.detectHierarchyCycle ClassScope.java:945 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference.internalResolveType ParameterizedSingleTypeReference.java:143 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference.resolveType ParameterizedSingleTypeReference.java:208 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveSuperType TypeReference.java:112 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ClassScope.findSupertype ClassScope.java:1092 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectSuperclass ClassScope.java:747 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ClassScope.connectTypeHierarchy ClassScope.java:884 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy CompilationUnitScope.java:249 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:91 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:331 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:348 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:682 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:168 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:102 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:165 FlattenedListExtendsArrayListObject.java opentrader.infra/src/org/opentrader/infra/springframework February 28, 2005 9:59:42 AM</description>
    <commit commitTime="2005-05-12 09:32:03" id="0cb826c"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="96371" reportTime="2005-05-23 17:22:00">
    <summary>Patch to support loading aop.xml properly</summary>
    <description>AspectJ 5 load-time weaving in CVS HEAD isn't loading aop.xml files properly from a jar file without specifying the global -D flag. The following patch fixes the problem for me so I can load aop.xml files from jars on the classpath without a global flag: ClassLoaderWeavingAdaptor.java:109: - Enumeration xmls = loader.getResources "/META-INF/aop.xml" ; + Enumeration xmls = loader.getResources "META-INF/aop.xml" ; I.e., getResources doesn't work with a leading separator, at least not on the Sun VM or JRockIt on Windows. Writing a unit test for this would require significant changes to the loadtime module, so I wrote a standalone test of the API: public class TestApi extends TestCase { public void testLoadResource throws Exception { URL urlList[] = { new URL "file:testsrc/org/aspectj/weaver/loadtime/test/sample.jar" }; ClassLoader loader = new URLClassLoader urlList ; Enumeration xmls = loader.getResources "META-INF/aop.xml" ; //this version fails: //Enumeration xmls = loader.getResources "/META-INF/aop.xml" ; assertTrue xmls.hasMoreElements ; } }</description>
    <commit commitTime="2005-05-30 10:00:21" id="f14646f"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
      <file>loadtime5/java5-src/org/aspectj/weaver/loadtime/ClassPreProcessorAgentAdapter.java</file>
      <file>tests/java5/ataspectj/ataspectj/SingletonAspectBindingsTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="81846" reportTime="2004-12-23 07:27:00">
    <summary>EclipseAdapterUtils.java:83</summary>
    <description>java.lang.ArrayIndexOutOfBoundsException: 3 Unfortunately I can't provide much more information, please see the attached compiler dump.</description>
    <commit commitTime="2005-06-01 16:12:58" id="a675b65"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java</file>
    </fixedFiles>
  </bug>
  <bug id="94167" reportTime="2005-05-09 13:37:00">
    <summary>NPE in reflect implementation</summary>
    <description>Proposed fix I'd like input on how to best add test cases for this so I can submit a tested patch ; I believe this will work because if you uncomment the work-around line, it works : Change line 63 from: method = declaringType.getDeclaredMethod getName ,getParameterTypes ; to method = getDeclaringType .getDeclaredMethod getName ,getParameterTypes ; Test source: package reflect; import org.aspectj.lang.*; import org.aspectj.lang.reflect.*; import java.lang.reflect.*; aspect Test { before : call * * .. &amp;amp;&amp;amp; !within Test { MethodSignature sig = MethodSignature thisJoinPoint.getSignature ; //sig.getDeclaringType ; // uncomment to work-around Method method = sig.getMethod ; } } public class MinimalErr { public static void main String args[] { try { Inner.foo ; } catch Throwable t { t.printStackTrace ; } } public static class Inner { public static void foo {} } }</description>
    <commit commitTime="2005-06-07 12:17:30" id="3824b1c"/>
    <fixedFiles>
      <file>runtime/src/org/aspectj/runtime/reflect/AdviceSignatureImpl.java</file>
      <file>runtime/src/org/aspectj/runtime/reflect/MethodSignatureImpl.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="84260" reportTime="2005-02-02 14:23:00">
    <summary>import static fails when importing a method</summary>
    <description>I got the following error: ============================================== MyClass2.java:3 [error] The import MyClass.myMethod cannot be resolved import static MyClass.myMethod; ============================================== other import static statements Strings/Enums appear to work.</description>
    <commit commitTime="2005-06-08 10:48:50" id="f747b82"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="99168" reportTime="2005-06-09 11:20:00">
    <summary>[generics][itds] ITD on generic inner class crashes ajc</summary>
    <description>inter-type declaration on a generic inner class crashes the compiler: class Outer { class Inner {} class Generic_Inner&amp;lt;T&amp;gt; {} } class Generic_Outer&amp;lt;T&amp;gt; { } aspect Injector { int Outer.outer; // works int Outer.Inner.inner; // works int Generic_Outer.outer; // works int Outer.Generic_Inner.inner; // crashes } /home/user/sgelin3/dev/java/ajc/new_bug/Bug.java [error] Internal compiler error java.lang.RuntimeException: can't handle: class Generic_Inner#RAW extends NULL TYPENULL SUPERINTERFACES enclosing type : OuterNULL FIELDSNULL METHODS at org.aspectj.ajdt.internal.compiler.lookup.InterTypeScope.makeSourceTypeBinding InterTypeScope.java:35 at org.aspectj.ajdt.internal.compiler.lookup.InterTypeScope.&amp;lt;init&amp;gt; InterTypeScope.java:28 at org.aspectj.ajdt.internal.compiler.ast.InterTypeDeclaration.resolve InterTypeDeclaration.java:101 at org.aspectj.ajdt.internal.compiler.ast.InterTypeFieldDeclaration.resolve InterTypeFieldDeclaration.java:141 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1076 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.resolve AspectDeclaration.java:110 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1125 ...</description>
    <commit commitTime="2005-06-14 14:53:37" id="588023e"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeScope.java</file>
    </fixedFiles>
  </bug>
  <bug id="100260" reportTime="2005-06-15 14:29:00">
    <summary>[generics][itds] methods inherited from a generic parent</summary>
    <description>when using an intertype declaration to add a method to a generic class, the method is not correctly inherited. the bug doesn't apply to fields. Strangely enough, raw types generic types instantiated without specifying a type parameter inherit the methods properly: class Generic_Parent&amp;lt;T&amp;gt; {} class Child extends Generic_Parent&amp;lt;Integer&amp;gt; {} class Generic_Child&amp;lt;T&amp;gt; extends Generic_Parent&amp;lt;Integer&amp;gt; {} aspect Injector { public void Generic_Parent.inherited_method {} public int Generic_Parent.inherited_field; public void test { int inherited_field; inherited_field = new Generic_Child .inherited_field; // works inherited_field = new Generic_Child&amp;lt;Integer&amp;gt; .inherited_field; // works inherited_field = new Child .inherited_field; // works new Generic_Child .inherited_method ; // works new Generic_Child&amp;lt;Integer&amp;gt; .inherited_method ; // unresolved new Child .inherited_method ; // unresolved } }</description>
    <commit commitTime="2005-06-16 11:57:28" id="b54831f"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="83935" reportTime="2005-01-28 10:29:00">
    <summary>@AJ and formal binding impl</summary>
    <description>Some notes on formal binding impl for @AJ In code style, the advice signature is always looking the same ..bindings.., org.aspectj.lang.Part thisJoinPointStaticPart, JoinPoint thisJoinPoint, org.aspectj.lang.Part thisEnclosingJoinPointStaticPart In @ style, it is user defined. The current impl is handling the formal binding in a way that only args/this/target can be bound. I had to add some conditionals to handles cases like that: void myAdvice JoinPoint jp, Object target {..} where target binding is at index 1, while the index 0 is not an unbound but actually "virtually" bound to the joinpoint. Pointcut are thus having a virtuallyBoundedNames String[] that is the list of arguments for which we don't want any complain if it not bound. This one is populated during @ extraction, and Pointcut.concretize make sure the info is not lost when composition occurs with PerClause f.e. The only issue is that currently, binding JP/SJP/ESJP themselves is not possible f.e. "... &amp;amp;&amp;amp; args jp " myAdvice JoinPoint jp, JoinPoint currentJp Is that a big issue ? May be impact adviceexecution and could impact some use cases around mock testing.</description>
    <commit commitTime="2005-07-11 15:05:44" id="639b4fd"/>
    <fixedFiles>
      <file>tests/java5/ataspectj/ataspectj/SingletonAspectBindingsTest.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjSyntaxTests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</file>
    </fixedFiles>
  </bug>
  <bug id="103266" reportTime="2005-07-10 01:40:00">
    <summary>NPE on syntax error</summary>
    <description>This example program generates an NPE on CVS HEAD and M2. I will attach the ajcore file. public abstract aspect WorkerExample { after returning RequestContext newContext : call RequestContext+.new .. { System.out.println "constructing "+newContext+" at "+thisJoinPoint.toLongString +" from "+thisEnclosingJoinPointStaticPart+":" ; } public abstract class RequestContext { public final Object execute { return doExecute ; } /** template method */ public abstract Object doExecute ; } public static void main String args[] { new Runnable { public void run {} }.run ; }; } aspect ConcreteAlpha extends WorkerExample { Object around final Object runnable : execution void Runnable.run &amp;amp;&amp;amp; this runnable { System.out.println "monitoring operation: "+runnable+" at "+thisJoinPoint+", for "+thisJoinPoint.getThis ; RequestContext requestContext = new RequestContext { public Object doExecute { return proceed runnable ; } }; return requestContext.execute ; } } aspect ConcreteBeta extends WorkerExample { Object around : call void awqeyuwqer { RequestContext requestContext = new ConnectionRequestContext { public Object doExecute { return proceed ; } }; return requestContext.execute ; } }</description>
    <commit commitTime="2005-07-18 08:27:44" id="bba9c50"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/MakeDeclsPublicVisitor.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="104212" reportTime="2005-07-18 09:25:00">
    <summary>static method call from subclass signature is wrong</summary>
    <description>a very bad bug... or ? in the snip below, getMethod says null and the factory is actually thinking that test is a static method of AspectJBugMain instead of Assert... wondering why we don't catch that in the test suite or what could happen recently around that. Or is it something I am confused about ? i doubt a jp.getSignature .getMethod is supposed to return null in some cases though.. @Aspect public class Sam { @Pointcut "call * *.* .. " public void methodCalls { } @Around "methodCalls &amp;amp;&amp;amp; !within alex.sam.Sam &amp;amp;&amp;amp; within alex..* " public Object aroundMethodCalls ProceedingJoinPoint jp throws Throwable { String typeName = jp.getSignature .getDeclaringTypeName ; System.out.println "declType " + typeName ; System.out.println "method " + MethodSignature jp.getSignature .getMethod ; return jp.proceed ; } } class Assert { public static void test { System.out.println "RUN Assert.test" ; } } class AspectJBugMain extends Assert { public static void main String[] args { test ; } // public static void test { // System.out.println "RUN AspectJBugMain.test" ; // } }</description>
    <commit commitTime="2005-07-22 14:57:40" id="619a6ad"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjSyntaxTests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
    </fixedFiles>
  </bug>
  <bug id="106634" reportTime="2005-08-10 11:04:00">
    <summary>regression: argument causes BcelGenericSignatureToTypeXConverter.java:203</summary>
    <description>the following reported a compile error using AspectJ Compiler DEVELOPMENT built on Monday Jun 20, 2005 at 08:14:57 GMT but now crashes using AspectJ Compiler DEVELOPMENT built on Wednesday Aug 10, 2005 at 13:12:53 GMT import java.util.Vector; // works if java.util.* is used public class Bug extends Vector { // works if Vector is not extended void test DoesNotExist argument {} // works without the argument } also, the bug only appears if the -1.5 flag is used.</description>
    <commit commitTime="2005-08-11 10:38:15" id="477c575"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="64568" reportTime="2004-05-28 11:21:00">
    <summary>Wildcarding in ITDs needs clearer compiler error message.</summary>
    <description>If a user attempts to define an ITD using a type pattern illegal since AspectJ 1.1 they get back a compiler error message of the following form :- MyAspect.java:4 error Syntax error on token "*", around expected public String foo.bar.*.name; A clearer error message informing the user of their use of illegal syntax would help.</description>
    <commit commitTime="2005-08-19 12:43:13" id="5e9aca9"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="91114" reportTime="2005-04-12 08:03:00">
    <summary>[jdt-parser] Parser error on System.out.printf "..." + after-before + "..."</summary>
    <description>Following code fragment: ***************************** class Foo { public void bar { long before = 0; long after = 0; System.out.println "... " + before - after + " ..." ; } } ***************************** leads to following parser error ***************************** [...].java:25 [error] Syntax error on token "-", invalid AssignmentOperator System.out.println "... " + before - after + " ..." ; ***************************** Problems seems to vanish when I rename the before variable.</description>
    <commit commitTime="2005-08-19 13:50:20" id="169a488"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="78261" reportTime="2004-11-10 01:58:00">
    <summary>field pattern with "void" type should be compile-time error</summary>
    <description>We really should barf early on get void i as opposed to just compiling through and treating it as something that'll never match. I rated this as minor since this is just an error message issue.</description>
    <commit commitTime="2005-08-19 14:47:59" id="2b23e91"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="104529" reportTime="2005-07-20 12:46:00">
    <summary>@SuppressWarnings "unchecked" is not ignoring type safety checks</summary>
    <description>AJDT is ignoring the @SuppressWarnings "unchecked" annotation. It is giving me a type safety warning when I don't specify the type when declaring a generic even though I have the @SuppressWarnings "unchecked" annotation specified.</description>
    <commit commitTime="2005-08-19 19:18:31" id="7b32570"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="107713" reportTime="2005-08-23 06:56:00">
    <summary>ClassCastException popup</summary>
    <description>Whenever I change any file and save auto-compile I get this in a popup. ClassCastException thrown: org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType cannot be cast to org.aspectj.weaver.bcel.BcelObjectType This started happening when I wrote these aspects. Before this started happening the IDE showed this line as an error. b.support.firePropertyChange property, oldval == null ? oldval : new String oldval , new String newval ; ---------------------------------------------------------------- /** * */ package com.blueprint.util.mixin.test; import java.beans.PropertyChangeListener; import java.beans.PropertyChangeSupport; import java.lang.reflect.Field; import com.blueprint.util.mixin.test.*; import org.aspectj.lang.Signature; public aspect PropertySupportAspect { PropertyChangeSupport PropertySupport.support = new PropertyChangeSupport this ; public interface PropertySupport{ public void addPropertyChangeListener PropertyChangeListener listener ; public void addPropertyChangeListener String propertyName, PropertyChangeListener listener ; public void removePropertyChangeListener String propertyName, PropertyChangeListener listener ; public void removePropertyChangeListener PropertyChangeListener listener ; public void hasListeners String propertyName ; } public void PropertySupport.addPropertyChangeListener PropertyChangeListener listener { support.addPropertyChangeListener listener ; } public void PropertySupport.addPropertyChangeListener String propertyName, PropertyChangeListener listener { support.addPropertyChangeListener propertyName, listener ; } public void PropertySupport.removePropertyChangeListener String propertyName, PropertyChangeListener listener { support.removePropertyChangeListener propertyName, listener ; } public void PropertySupport.removePropertyChangeListener PropertyChangeListener listener { support.removePropertyChangeListener listener ; } public void PropertySupport.hasListeners String propertyName { support.hasListeners propertyName ; } pointcut callSetter Bean b : call public void com.blueprint.util.test.Bean.setName String &amp;amp;&amp;amp; target b ; void around Bean b : callSetter b { String propertyName = getField thisJoinPointStaticPart.getSignature . getName ; System.out.println "The property is [" + propertyName + "]" ; String oldValue = b.getName ; proceed b ; firePropertyChange b, propertyName, oldValue, b.getName ; } private Field getField Signature signature { Field field = null; System.out.println "Getting the field name of [" +signature.getName + "]" ; try{ String methodName = signature.getName ; field = signature.getDeclaringType . getDeclaredField methodName. substring 3, methodName.length . toLowerCase ; field.setAccessible true ; }catch NoSuchFieldException nsfe { nsfe.printStackTrace ; } return field; } void firePropertyChange Bean b, String property, String oldval, String newval { System.out.println "The property is [" + property + "]" ; System.out.println "The old value is [" + oldval + "]" ; System.out.println "The new value is [" + newval + "]" ; b.support.firePropertyChange property, oldval == null ? oldval : new String oldval , new String newval ; } } ---------------------------------------------------------------- import java.io.Serializable; public class Bean implements Serializable{ private String name; public String getName { return name; } public void setName String name { this.name = name; } } ---------------------------------------------------------------- public aspect BeanSupport { declare parents: Bean implements PropertySupportAspect.PropertySupport; } ----------------------------------------------------------------</description>
    <commit commitTime="2005-08-26 09:09:35" id="100d9e0"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
    </fixedFiles>
  </bug>
  <bug id="108377" reportTime="2005-08-30 11:01:00">
    <summary>Verify Error on intertype field indirection in intertype method</summary>
    <description>When I run this program: public class A { public static void main String[] args { System.out.println new A .foo ; } } aspect Aspect1 { public A A.a; public String A.value; public String A.foo { return a.value; } } I get the error: Exception in thread "main" java.lang.VerifyError: class: Aspect1, method: ajc$interMethod$Aspect1$A$foo signature: LA; Ljava/lang/String; Incompatible type for getting or setting field at A.&amp;lt;init&amp;gt; A.java:1 at A.main A.java:3 Javap reveals that the field name is missing the class name part: 1: getfield #50; //Field a:LA; 4: getfield #46; //Field A.value:Ljava/lang/String; If I replace a.value by this.a.value, the correct code is generated: 1: getfield #37; //Field A.a:LA; 4: getfield #46; //Field A.value:Ljava/lang/String;</description>
    <commit commitTime="2005-08-31 09:34:59" id="be750d5"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="108448" reportTime="2005-08-31 02:35:00">
    <summary>IllegalStateException: Undeclared type variable when hiding</summary>
    <description>ISE thrown compiling http://sourceforge.net/projects/collections 4.0beta3 source. javac issues two warnings, but Eclipse 3.1 JDT issues *many* for type parameter hiding types perhaps bug 103783 . I haven't isolated a test case or tried it on earlier releases - sorry.</description>
    <commit commitTime="2005-08-31 11:42:29" id="2c9ea11"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelField.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelGenericSignatureToTypeXConverter.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelMethod.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/bcel/BcelGenericSignatureToTypeXTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="95992" reportTime="2005-05-19 14:12:00">
    <summary>Problems resolving type name inside generic class</summary>
    <description>ajc reports an error when compiling the following code: interface Base&amp;lt;T&amp;gt; { static interface Inner { } } class Test&amp;lt;T extends Test.InnerTest&amp;gt; implements Base&amp;lt;T&amp;gt; { static class InnerTest implements Inner { } } $ ajc -1.5 Test.java Test.java:14 [error] Inner cannot be resolved to a type static class InnerTest implements Inner { Sun's javac compiles it without any error. The error can be avoided by simply writing "Base.Inner" instead of just "Inner". Also, it compiles fine if the constraint "extends Test.InnerTest" is left away.</description>
    <commit commitTime="2005-08-31 13:48:16" id="b953c03"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="104024" reportTime="2005-07-15 11:16:00">
    <summary>combining varargs and inner classes crashes the parser</summary>
    <description>class Outer { public class Inner {} } public class Bug { public void varargs Object... varargs {} public void test { Outer.Inner inner = new Outer .new Inner ; varargs inner ; // works varargs new Outer .new Inner ; // crashes } }</description>
    <commit commitTime="2005-08-31 14:15:45" id="f2af562"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="107858" reportTime="2005-08-24 10:53:00">
    <summary>illegal argument to proceed crashes the parser</summary>
    <description>in a context where proceed requires zero arguments, calling it with an extra argument crashes the compiler, but only if that argument is a field access: class Foo { Foo field; void test {} } public aspect Bug { void around : call void Foo.test { Foo foo = new Foo .field; proceed foo ; // caught at compile time proceed new Foo .field ; // crashes } } /home/user/sgelin3/dev/java/ajc/new_bug/Bug.java [error] Internal compiler error java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.ast.AccessForInlineVisitor.getAccessibleField AccessForInlineVisitor.java:145 at org.aspectj.ajdt.internal.compiler.ast.AccessForInlineVisitor.endVisit AccessForInlineVisitor.java:108 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.FieldReference.traverse FieldReference.java:609 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse MessageSend.java:467 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse MethodDeclaration.java:212</description>
    <commit commitTime="2005-08-31 14:24:14" id="6c8747b"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="74048" reportTime="2004-09-16 05:30:00">
    <summary>AJDT reports unnecessary compile time warnings for private static aspects</summary>
    <description>When using private static aspects inside a class e.g. using the Participant pattern as described in Laddad: AspectJ in Action , the compiler reports a warning about the type never being used, e.g.: The private type RowSet.ConstructorCallControlAspect is never used locally This, of course, only happens when the setting "Window--&amp;gt;Preferences--&amp;gt;Java-- &amp;gt;Compiler--&amp;gt;Unused code--&amp;gt;Unused or unread private members" is set to Warning. These warnings should not be generated as aspects are almost never referred to anywhere else in the code, so they are not really unused even if references do not exist.</description>
    <commit commitTime="2005-09-01 09:38:36" id="16512b2"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="98290" reportTime="2005-06-03 10:57:00">
    <summary>no "matches declare" entry in structure model for single declare warning statement</summary>
    <description>A project containing one class and one aspect: ----------------------------------------------------- package pack; public class C { public static void main String[] args { new C .sayHello ; } public void sayHello { System.out.println "HELLO" ; } } ---------------------------------------------------- package pack; public aspect A { declare warning : execution * C.sayHello .. : "blah blah"; } ----------------------------------------------------- has the "matched by" entry for A.aj, but doesn't have the "matches declare" entry for C.java. This means that in AJDT, C.sayHello isn't added to our map and consequently we don't get any relationships showing in the Cross Reference view for A.aj.</description>
    <commit commitTime="2005-09-01 19:47:37" id="619f8bc"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="59076" reportTime="2004-04-19 10:52:41">
    <summary>Reduce footprint of JoinPoint.StaticPart objects</summary>
    <description>Tests show that each object consumes 180+ bytes. For a large project (1000+ classes) where an aspect is used to implement a pervasive cross-cutting concern e.g. exception logging this can lead to &gt;1MB of additional heap space. Two possible approaches could be: 1. Break literal String used by Factory.makeXXXSig() methods into component parts e.g. package, class, method. ... names. These could then be shared automatically by the JVM as interned Strings. 2. Lazy instantiation of handler static JPs in the catch block. Any enhancements could be enabled by a compiler option similar to -XlazyTjp.</description>
    <commit commitTime="2005-09-01 21:06:40" id="a5e645f"/>
    <fixedFiles>
      <file>runtime/src/org/aspectj/runtime/reflect/Factory.java</file>
      <file>runtime/src/org/aspectj/runtime/reflect/SignatureImpl.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="99136" reportTime="2005-06-09 08:36:00">
    <summary>xlint advice not applied appears twice with cflows</summary>
    <description>////////////// in the following code aspect A{ before : call * * .. &amp;amp;&amp;amp; cflow execution * * .. {} } //////////////////////////////////// two "advice not appied" xlint messages are produced, one for the before advice and one for the cflow within the before advice.</description>
    <commit commitTime="2005-09-02 10:40:19" id="047173e"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>tests/src/org/aspectj/systemtest/xlint/XLintTests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="102212" reportTime="2005-06-29 17:07:00">
    <summary>[itds] abstract synchronized: compile error expected</summary>
    <description>when using intertype declaration, the compiler doesn't check for illegal modifier combinations such as "abstract synchronized". another manifestation of this problem is when using intertype declaration to add a synchronized method to an interface. the problem is more severe in this case because conceptually, this method is not abstract at all. interface Interface {} abstract class Parent {} class Child extends Parent implements Interface {} aspect Bug { // illegal modifier combination not caught by ajc public abstract synchronized void Parent._abstract ; public synchronized void Child._abstract {} // the following has the same effect, but is easier to miss public /* implicit abstract */ synchronized void Interface._interface {} // use Child to make java complain: "illegal modifiers: 0x421" // this corresponds to "public abstract synchronized" public static void main String[] args { new Child ; } }</description>
    <commit commitTime="2005-09-02 14:38:11" id="b17ff4e"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="101606" reportTime="2005-06-24 05:17:00">
    <summary>AspectJ compiler does not process unused code compiler options properly for aspects</summary>
    <description>In Eclipse 3.0 click 'Window' &amp;gt; 'Preferences' &amp;gt; 'Java' &amp;gt; 'Compiler'. Select the 'Unused Code' tab on the compiler preference page. Change 'Unused or unread private members' to Warning or Error. Create a project that contains an aspect with some private pointcuts. You will see warnings or errors for these pointcuts saying that they are unused.</description>
    <commit commitTime="2005-09-02 14:44:26" id="2c88c59"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="99125" reportTime="2005-06-09 06:25:00">
    <summary>Repetitive method name/signature in class file</summary>
    <description>This is what the VM sais: java.lang.ClassFormatError: Repetitive method name/signature in class file com/ netvisor/metadata_view/ComponentFactory at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:620 at java.security.SecureClassLoader.defineClass SecureClassLoader.java: 124 at java.net.URLClassLoader.defineClass URLClassLoader.java:260 at java.net.URLClassLoader.access$100 URLClassLoader.java:56 at java.net.URLClassLoader$1.run URLClassLoader.java:195 at java.security.AccessController.doPrivileged Native Method at java.net.URLClassLoader.findClass URLClassLoader.java:188 at java.lang.ClassLoader.loadClass ClassLoader.java:306 at sun.misc.Launcher$AppClassLoader.loadClass Launcher.java:268 at java.lang.ClassLoader.loadClass ClassLoader.java:251 at java.lang.ClassLoader.loadClassInternal ClassLoader.java:319 And this is why: I've got an interface ComponentFactory and an aspect that adds various ITD methods trough that interface. I've added some methods to both the interface and the aspect, some other methods are only added trough the aspect. The situation is a bit more complex, I've got a base interface/aspect with these two methods and the subaspects implement the problematic two methods . And those methods that are both in the interface and the aspect are the ones that get duplicated in the interface class file. This is working fine in the old CVS branch 1.2.* . Hope it helps, good luck!</description>
    <commit commitTime="2005-09-02 17:12:43" id="df46c6f"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="108902" reportTime="2005-09-07 02:53:00">
    <summary>Type mismatch: cannot convert from Collection to Collection</summary>
    <description>From aspectj-users The program below produces the erroneous message: [iajc] D:\workdir\DPsample\main\src\com\designpattern\observer\ObserverProt ocol.aj:39 [error] Type mismatch: cannot convert from Collection to Collection [iajc] return observers; [iajc] ^^^^^ //Subject.java interface Subject { public void addObserver Observer observer ; public void removeObserver Observer observer ; public Collection getObservers ; } //Observer.java interface Observer { public void update ; } //ObserverProtocol public abstract aspect ObserverProtocol{ abstract pointcut stateChange Subject subject ; after Subject subject :stateChange subject { Iterator it=subject.getObservers .iterator ; while it.hasNext { Observer observer= Observer it.next ; observer.update ; } } private Collection Subject.observers=new ArrayList ; public void Subject.addObserver Observer observer { observers.add observer ; } public void Subject.removeObserver Observer observer { observers.remove observer ; } public Collection Subject.getObservers { return observers; } }</description>
    <commit commitTime="2005-09-08 13:40:33" id="2505485"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="109042" reportTime="2005-09-08 08:13:00">
    <summary>parameter ajc_aroundclosure is never read</summary>
    <description>Similar to [ http://dev.eclipse.org/newslists/news.eclipse.technology.ajdt/ msg00691.html] I get the following warning in the attached test project: Severity Description Resource In Folder Location Creation Time 1 The parameter ajc_aroundClosure is never read PlaylistAspect.aj Jukebox/ src/playlist line 1 8. September 2005 14:10:12</description>
    <commit commitTime="2005-09-08 14:09:18" id="08d6a5d"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="109124" reportTime="2005-09-09 05:44:00">
    <summary>VerifyError with inner classes</summary>
    <description>This bug apparently occurs only when compiling with the -1.5 option Adrian Colyer managed to reproduce it . Considering the code below, when I set a 'set' pointcut on the fields of inner class Node, I get an error from the class verifier: Exception in thread "main" java.lang.VerifyError: class: test/List$Node, method: &amp;lt;init&amp;gt; signature: Ltest/List;I V Expecting to find object/array on stack When the Node class is moved out of the List class, it works fine. The decompiled code for the inner class is included below for reference. ////////////////////////////////////////////////////////////////////// // List.java package test; public class List { class Node { int value; Node next; Node int v { value = v; } } private Node head; public List { head = null; } public void add int v { Node n = new Node v ; n.next = head; head = n; } public void print { Node n = head; while n != null { System.out.print " " + n.value ; n = n.next; } System.out.println ; } public static void main String[] args { List l = new List ; for int i = 0; i &amp;lt; 10; i++ l.add i ; l.print ; } } ////////////////////////////////////////////////////////////////////// // ListAspect.aj package test; public aspect ListAspect { pointcut setField Object t : target t &amp;amp;&amp;amp; set * List.Node+.* ; before Object t : setField t { System.out.println "WRITE" ; // Do something with t... } } ////////////////////////////////////////////////////////////////////// // List@Node.jad package test; // Referenced classes of package test: // List, ListAspect class List$Node { int value; List$Node next; final List this$0; List$Node int v { //* 0 0:aload_0 List list1 = List.this; // 1 1:aload_1 // 2 2:astore_3 List$Node list$node = this; // 3 3:astore 4 ListAspect.aspectOf .ajc$before$test_ListAspect$1$3f3247a5 list$node ; // 4 5:invokestatic #37 &amp;lt;Method test.ListAspect test.ListAspect.aspectOf &amp;gt; // 5 8:aload 4 // 6 10:invokevirtual #41 &amp;lt;Method void test.ListAspect.ajc$before$test_ListAspect$1$3f3247a5 java.lang.Object &amp;gt; list$node.this$0 = list1; // 7 13:aload 4 // 8 15:aload_3 // 9 16:putfield #16 &amp;lt;Field test.List test.List$Node.this$0&amp;gt; super ; // 10 19:aload_0 // 11 20:invokespecial #19 &amp;lt;Method void Object &amp;gt; //* 12 23:aload_0 int i = v; // 13 24:iload_2 // 14 25:istore 5 List$Node list$node1 = this; // 15 27:astore 6 ListAspect.aspectOf .ajc$before$test_ListAspect$1$3f3247a5 list$node1 ; // 16 29:invokestatic #37 &amp;lt;Method test.ListAspect test.ListAspect.aspectOf &amp;gt; // 17 32:aload 6 // 18 34:invokevirtual #41 &amp;lt;Method void test.ListAspect.ajc$before$test_ListAspect$1$3f3247a5 java.lang.Object &amp;gt; list$node1.value = i; // 19 37:aload 6 // 20 39:iload 5 // 21 41:putfield #21 &amp;lt;Field int test.List$Node.value&amp;gt; // 22 44:return } }</description>
    <commit commitTime="2005-09-09 10:48:58" id="a9ca915"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelField.java</file>
    </fixedFiles>
  </bug>
  <bug id="108826" reportTime="2005-09-06 08:13:00">
    <summary>AJDT Error: Can't find type</summary>
    <description>In Eclipse 3.1, using the latest AspectJ build 1.5.0_M3a compiler and 1.3.0 plugin I get an error "can't find type test.T" , using the following code: =============== package test; public class CantFindType { public &amp;lt;T&amp;gt; T[] method T[] array { return null; } } ================ The error occurs, if the return type, or the parameter is an array of a generic type. The code compiles fine, but Eclipse shows the error, but doesn't show the folder or the location for the error.</description>
    <commit commitTime="2005-09-09 14:19:19" id="2942ca0"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="109486" reportTime="2005-09-14 06:06:00">
    <summary>Internal compiler error ClassParser.java:242</summary>
    <description>Testcase: A.aj containing: final abstract aspect A {} This causes the compiler to abort with an internal compiler error: C:\Documents and Settings\mchapman\A.aj [error] Internal compiler error org.aspectj.apache.bcel.classfile.ClassFormatException: Class can't be both final and abstract at org.aspectj.apache.bcel.classfile.ClassParser.readClassInfo ClassPars er.java:242 at org.aspectj.apache.bcel.classfile.ClassParser.parse ClassParser.java: 165 at org.aspectj.weaver.bcel.Utility.makeJavaClass Utility.java:489 at org.aspectj.weaver.bcel.UnwovenClassFile.getJavaClass UnwovenClassFil e.java:63 at org.aspectj.weaver.bcel.UnwovenClassFile.getClassName UnwovenClassFil e.java:147 at org.aspectj.ajdt.internal.core.builder.AjState.noteResult AjState.jav a:497 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$3.acceptResult AjBuildManager.java:748 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing AjCompilerAdapter.java:186 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning $org_aspectj_ajdt_internal_compiler_CompilerAdapter$4$6b855184 CompilerAdapter.a j:89 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compil er.java:528 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compil er.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:728 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:206 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:140 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:324 at org.aspectj.tools.ajc.Main.runMain Main.java:238 at org.aspectj.tools.ajc.Main.main Main.java:82 no source information available C:\Documents and Settings\mchapman\A.aj:1 [error] The class A can be either abst ract or final, not both final abstract aspect A {} ABORT Exception thrown from AspectJ DEVELOPMENT C:\Documents and Settings\mchapman&amp;gt;ajc -version AspectJ Compiler DEVELOPMENT built on Tuesday Sep 13, 2005 at 22:31:40 GMT The expected behaviour is naturally just to get a regular compiler errror saying "The aspect A can be either abstract or final, not both".</description>
    <commit commitTime="2005-09-14 11:10:52" id="87e5c2e"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/ClassParser.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="76374" reportTime="2004-10-15 13:23:00">
    <summary>Problem with declare parents when using non-public classes</summary>
    <description>Non-public classes, when explicitly named, do not get woven. The test case below exhibits this problem when the package declaration is uncommented. If the package declaration is commented out, the class is woven correctly. If the package declaration is uncommented, a compilation failure occurs with AspectJ 1.2. According to Andrew Clement, AspectJ 1.2.1 compiles, but does not weave. If the "MyInnerClass" is changed to be public [regardless of the package declaration status], the class is woven correctly. Also: When the "MyInnerClass" is moved out of "MyClass", but kept in the MyClass.java file, then the following behavior is exhibited: If the package declaration is commented out, the class is woven correctly. If the package declaration is uncommented out, a compilation failure occurs with AspectJ 1.2. Note, in this case, MyInnerClass cannot be declared as public. It also appears that if the RunnableAspect is placed in the same package as "MyClass", weaving occurs correctly, regardless of any class access modifiers &amp;lt;MyClass.java&amp;gt; // package mypackage; public class MyClass { public MyClass { MyInnerClass mic = new MyInnerClass ; if mic instanceof Runnable mic.run ; } class MyInnerClass { public void run { System.out.println "In MyInnerClass.run !!" ; } } public static void main String args[] { new MyClass ; } } &amp;lt;/MyClass.java&amp;gt; &amp;lt;RunnableAspect.aj&amp;gt; public aspect RunnableAspect { declare parents: MyClass$MyInnerClass implements Runnable; // declare parents: mypackage.MyClass$MyInnerClass implements Runnable; } &amp;lt;/RunnableAspect.aj&amp;gt;</description>
    <commit commitTime="2005-09-21 16:51:15" id="ca9c1f7"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="109173" reportTime="2005-09-09 12:49:00">
    <summary>Weaving Adaptor enhancements for performance, configuration and diagnosis</summary>
    <description>Here are some suggested enhancements as a result of exhaustive testing in the Eclipse/OSGi environment. 1. If no aspects are declared for a particular class loader, either because there are no visible aop.xml files or they contain no aspect definitions, then we should short-circuit the implementation of weaveClass so that byte-code is not unnecessarily passed to the weaver. This is especially important under OSGi where there may be hundreds of class bundles, each with their own class loader only some of which are being woven. We can use the existing “enabled” flag. 2. As previously discussed on aspectj-dev the META-INF directory is considered private in OSGi and is therefore an inappropriate location for aop.xml files declaring shared aspects. I therefore propose a System property to set the a resource names for finding aop.xml files which would default to “META-INF/aop.xml” e.g. -Dorg.aspectj.weaver.loadtime.configuration=META- INF/aop.xml;org/aspectj/aop.xml. 3. We should not be catching Throwable in Aj. Instead we should catch known exceptions e.g. BCException and issue messages while letting other runtime exceptions pass back to the class loader. A user provided IMessageHandler implementation can decide under what circumstances to abort. Alternatively if Aj is considered to be a “safe” interface for weaving agents e.g. JVMTI then the dump logic it contains should be moved to the WeavingAdaptor so that it can be used directly from a class loader.</description>
    <commit commitTime="2005-09-23 14:40:27" id="03b20bc"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Aj.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="102933" reportTime="2005-07-06 16:20:00">
    <summary>problem with Object arrays and clone with 1.4 .class compatibility</summary>
    <description>environment - eclipse AspectJ project using jdk 1.42_0 - JDK 'generated .class compatibility' set to 1.4 under JDK-&amp;gt;compiler- &amp;gt;Compliance and class files . I did this because I wanted to use JDK 1.4 assertions. sample project includes one class: package com.test; public class Foo { public void test { Foo[] array = new Foo[0]; Foo[] arrayClone = Foo[] array.clone ; } } and one aspect: package com.test; aspect MyAspect { declare warning: call * * .. : "a call within foo"; } When I build this project, I get an error on the Foo java file telling me that it 'can't find com.test.Foo type' with no line numbers. When I change the JDK 'generated .class compatibility' set to 1.3 everything compiles fine..</description>
    <commit commitTime="2005-09-27 15:10:58" id="fb428d0"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="101047" reportTime="2005-06-21 10:13:00">
    <summary>Weaver produces wrong local variable table bytecode</summary>
    <description>AspectJ version: DEVELOPMENT also observed in 1.2.1 When weaving with a before or after advice, the generated local variable table will, on branch instructions, offset the "length" field of a local variable wrongly by one instruction. Also, the weaver will mix up local variables with the same name, thus violating the java VM specification: // Test.aj aspect Test { before : execution * Foo.foo .. { System.out.println "before" ; } // Foo.java public class Foo { private String myString = "A String"; public static void main String[] args { new Foo .foo ; } private void foo { String myLocal = myString; if myLocal.endsWith "X" { String local1 = "local1"; System.out.println local1 ; } else if myLocal.endsWith "Y" { String local2 = "local2"; System.out.println local2 ; } else { String local1 = "local3"; System.out.println local1 ; } } } --- We compilw with ajc -sourceroots . and dumps Foo with javap: javap -c -l -s -private Foo .... .... private void foo ; Signature: V Code: 0: invokestatic #65; //Method Test.aspectOf: LTest; 3: invokevirtual #68; //Method Test.ajc$before$Test$1$f0485e90: V 6: aload_0 7: getfield #15; //Field myString:Ljava/lang/String; 10: astore_1 11: aload_1 12: ldc #30; //String X 14: invokevirtual #36; //Method java/lang/String.endsWith: Ljava/lang/String; Z 17: ifeq 33 20: ldc #38; //String local1 22: astore_2 23: getstatic #44; //Field java/lang/System.out:Ljava/io/PrintStream; 26: aload_2 27: invokevirtual #50; //Method java/io/PrintStream.println: Ljava/lang/String; V 30: goto 65 33: aload_1 34: ldc #52; //String Y 36: invokevirtual #36; //Method java/lang/String.endsWith: Ljava/lang/String; Z 39: ifeq 55 42: ldc #54; //String local2 44: astore_2 45: getstatic #44; //Field java/lang/System.out:Ljava/io/PrintStream; 48: aload_2 49: invokevirtual #50; //Method java/io/PrintStream.println: Ljava/lang/String; V 52: goto 65 55: ldc #56; //String local3 57: astore_2 58: getstatic #44; //Field java/lang/System.out:Ljava/io/PrintStream; 61: aload_2 62: invokevirtual #50; //Method java/io/PrintStream.println: Ljava/lang/String; V 65: return LineNumberTable: line 7: 6 line 8: 11 line 9: 20 line 10: 23 line 11: 33 line 12: 42 line 13: 45 line 15: 55 line 16: 58 line 18: 65 LocalVariableTable: Start Length Slot Name Signature 6 60 0 this LFoo; 11 55 1 myLocal Ljava/lang/String; 45 12 2 local2 Ljava/lang/String; 23 43 2 local1 Ljava/lang/String; We see that the two occurences of the "local1" variable erroneously have been combined into one entry, starting at byte 23 and ending at byte 66. This is obviously wrong, since "local1" has no value in the "local2" block. Secondly, the "local2" variable end is wrongly offset by one instruction offset.</description>
    <commit commitTime="2005-09-28 20:10:19" id="85a4b0a"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/MethodGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="108118" reportTime="2005-08-26 10:37:00">
    <summary>Complete implementation of @SuppressAjWarnings</summary>
    <description>ensure that @SuppressAJWarnings are indeed suppressed during pointcut operations. This requires wrapping major pointcut operations with calls to Lint from the associated advice.</description>
    <commit commitTime="2005-09-29 15:42:52" id="81a0790"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/SuppressedWarnings.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/Utility.java</file>
    </fixedFiles>
  </bug>
  <bug id="77269" reportTime="2004-10-29 06:25:00">
    <summary>Advice on inner classes not show in Outline view or gutter</summary>
    <description>Advice associated with pointcuts that match join points in inner classes are not shown. Declare warning/error are shown however. See attached screenshot for example below. Notice WEAVEINFO messages indicate problem is in AJDT not AspectJ. Also notice phantom entry in Outline view "injar aspectL Test.java". package bug_nnnnn; public class Test { public void test { new Runnable { public void run { try { throw new Exception ; } catch Exception ex { handleException ex ; } } }; } public static void handleException Throwable th { } public static void main String[] args { try { throw new Exception ; } catch Exception ex { handleException ex ; } } } aspect Aspect { declare warning : call void handleException .. &amp;amp;&amp;amp; !within Aspect : "Only Aspect should handle exceptions"; pointcut caughtExceptions Throwable th : handler Throwable+ &amp;amp;&amp;amp; args th ; before Throwable th : caughtExceptions th { Test.handleException th ; } }</description>
    <commit commitTime="2005-10-04 08:05:55" id="4573068"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="111481" reportTime="2005-10-04 12:25:00">
    <summary>varargs doesn't work for ITD'd constructors</summary>
    <description>The following program doesn't compile: class MyClass { public static void main String []argv { new MyClass new Object[]{"a","b","c"} ; new MyClass "a","b","c" ; } } aspect A { public MyClass.new Object... names { System.out.println names[0] ; } } this is similar to bug 110906</description>
    <commit commitTime="2005-10-05 08:12:20" id="2b0e675"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeConstructorDeclaration.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="92837" reportTime="2005-04-26 17:48:00">
    <summary>[inc-compilation] Incremental Compilation Fails for ITD's on Aspects</summary>
    <description>On my project, when I save an aspect that calls an inter-type declaration defined on itself, the incremental compiler gives a message like this: The method logError String, Exception is undefined for the type Foo Foo.java Running a full build clears the error. This might be a compiler bug, or it might be AJDT I never run command-line incremental compilation, so I don't know :- . Unfortunately, simple test cases or extracts of just the 2 aspects aren't reproducing the issue, so let me know if you need me to spend some time trying to create a small isolated version of the issue.</description>
    <commit commitTime="2005-10-05 14:01:43" id="727b0f5"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="56779" reportTime="2004-03-30 12:31:00">
    <summary>[ajdoc] add ajdoc support for inter-type declarations and other declare forms</summary>
    <description>Currently ajdoc only exposes the "Advises" and "Advised by" relationships from the structure model. It needs to support inter-type field and member declarations using a UI similar to how Javadoc presents inherited members. It also needs to support the other declare forms: error, warning, soft, parents, and precedence.</description>
    <commit commitTime="2005-10-05 16:15:43" id="ab6c7a5"/>
    <fixedFiles>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/StructureUtil.java</file>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/AjdocTests.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/CoverageTestCase.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/ExecutionTestCase.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/PatternsTestCase.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/PointcutVisibilityTest.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/SpacewarTestCase.java</file>
      <file>asm/src/org/aspectj/asm/IRelationship.java</file>
    </fixedFiles>
  </bug>
  <bug id="112514" reportTime="2005-10-13 13:24:00">
    <summary>ajc compile crash, not giving information which class file cause it</summary>
    <description>I run ajc compile on a directory that contains many class file. In the dump file, it doesn't give me information on which class causes the compile to crash. If this information is given, it will be a real big help to find the problem. Is there any configuration that I overlook that might provides better error message? And the dump message is following: ---- AspectJ Properties --- AspectJ Compiler 1.2.1 built on Friday Nov 5, 2004 at 12:30:41 GMT ---- Dump Properties --- Dump file: ajcore.20051012.173235.117.txt Dump reason: org.aspectj.apache.bcel.classfile.ClassFormatException Dump on exception: true Dump at exit condition: abort ---- Exception Information --- org.aspectj.apache.bcel.classfile.ClassFormatException: Invalid byte tag in constant pool: 0 at org.aspectj.apache.bcel.classfile.Constant.readConstant Constant.java:145 at org.aspectj.apache.bcel.classfile.ConstantPool.&amp;lt;init&amp;gt; ConstantPool.java:103 at org.aspectj.apache.bcel.classfile.ClassParser.readConstantPool ClassParser.java:254 at org.aspectj.apache.bcel.classfile.ClassParser.parse ClassParser.java:162 at org.aspectj.weaver.bcel.Utility.makeJavaClass Utility.java:365 at org.aspectj.weaver.bcel.UnwovenClassFile.getJavaClass UnwovenClassFile.java:63 at org.aspectj.weaver.bcel.BcelWeaver.addClassFile BcelWeaver.java:280 at org.aspectj.weaver.bcel.BcelWeaver.addClassFile BcelWeaver.java:295 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.initBcelWorld AjBuildManager.java:533 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:151 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:102 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:109 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:291 at com.fortify.appdefense.cmd.Instrumenter.runWeaver Instrumenter.java:432 at com.fortify.appdefense.cmd.Instrumenter.instrumentClasses Instrumenter.java:400 at com.fortify.appdefense.cmd.Instrumenter.instrumentApplication Instrumenter.java:144 at com.fortify.appdefense.cmd.Instrumenter.instrument Instrumenter.java:118 at com.fortify.appdefense.cmd.Main.run Main.java:207 at com.fortify.appdefense.cmd.Main.main Main.java:177 ---- System Properties --- java.runtime.name=Java TM 2 Runtime Environment, Standard Edition sun.boot.library.path=C:\Program Files\Java\jre1.5.0_04\bin java.vm.version=1.5.0_04-b05 java.vm.vendor=Sun Microsystems Inc. java.vendor.url= http://java.sun.com/ path.separator=; java.vm.name=Java HotSpot TM Client VM file.encoding.pkg=sun.io user.country=US sun.os.patch.level=Service Pack 2 java.vm.specification.name=Java Virtual Machine Specification user.dir=c:\p4sandbox\main\_stage\win32\ADS_EE com.fortify.appdefense.instrumenter.ignoreJars= java.runtime.version=1.5.0_04-b05 java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment java.endorsed.dirs=C:\Program Files\Java\jre1.5.0_04\lib\endorsed os.arch=x86 java.io.tmpdir=C:\DOCUME~1\mxue\LOCALS~1\Temp\ line.separator= java.vm.specification.vendor=Sun Microsystems Inc. user.variant= os.name=Windows XP sun.jnu.encoding=Cp1252 FORTIFY_HOME=c:\p4sandbox\main\_stage\win32\ADS_EE\Core java.library.path=c:\WINDOWS\system32;.;C:\WINDOWS\system32;C:\WINDOWS;C:\cygwin\usr\local\bin;C:\cygwin\bin;C:\cygwin\bin;C:\cygwin\usr\X11R6\bin;c:\WINDOWS\system32;c:\WINDOWS;c:\WINDOWS\System32\Wbem;c:\Program Files\Perforce;C:\cygwin\bin;c:\mysql\bin;c:\Program Files\Microsoft SQL Server\90\Tools\binn\;c:\Program Files\Microsoft Visual Studio 8\Common7\IDE\;c:\Program Files\Microsoft Visual Studio 8\VC\bin;c:\app\apache-ant-1.6.5\bin java.specification.name=Java Platform API Specification java.class.version=49.0 sun.management.compiler=HotSpot Client Compiler os.version=5.1 user.home=C:\Documents and Settings\mxue user.timezone=America/Los_Angeles java.awt.printerjob=sun.awt.windows.WPrinterJob file.encoding=Cp1252 java.specification.version=1.5 java.class.path=;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\activation.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\ad_engine.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\antlr-2.7.5H3.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\appdefense.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\appdefensert.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\asm-attrs.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\asm.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\aspectjrt.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\aspectjtools.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\castor-0.9.5.4.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\cglib-2.1.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\cglib-nodep-2.1_2.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\common.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\commons-codec-1.3.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\commons-collections-3.1.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\commons-dbcp-1.2.1.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\commons-logging-1.0.4.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\commons-pool-1.2.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\dom4j-1.6.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\ehcache-1.1.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\fortify-tools.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\hibernate3.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\hsqldb.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\intellijui.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\jakarta-oro-2.0.8.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\jargs-0.5.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\jdbc2_0-stdext.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\jsp-api.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\jsr173_1.0_api.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\jsr173_1.0_ri.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\jta.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\jug.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\junit.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\JWizardComponent.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\log4j-1.2.9.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\log4j.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\mail.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\servlet-api.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\spring.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\struts.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\xercesImpl-2.6.2.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\lib\xmlParserAPIs-2.6.2.jar;c:\p4sandbox\main\_stage\win32\ADS_EE\Core\config;c:\p4sandbox\main\_stage\win32\ADS_EE\Core user.name=mxue com.fortify.Home=C:\p4sandbox\main\_stage\win32\ADS_EE\Core java.vm.specification.version=1.0 java.home=C:\Program Files\Java\jre1.5.0_04 sun.arch.data.model=32 user.language=en java.specification.vendor=Sun Microsystems Inc. awt.toolkit=sun.awt.windows.WToolkit java.vm.info=mixed mode, sharing java.version=1.5.0_04 java.ext.dirs=C:\Program Files\Java\jre1.5.0_04\lib\ext sun.boot.class.path=C:\Program Files\Java\jre1.5.0_04\lib\rt.jar;C:\Program Files\Java\jre1.5.0_04\lib\i18n.jar;C:\Program Files\Java\jre1.5.0_04\lib\sunrsasign.jar;C:\Program Files\Java\jre1.5.0_04\lib\jsse.jar;C:\Program Files\Java\jre1.5.0_04\lib\jce.jar;C:\Program Files\Java\jre1.5.0_04\lib\charsets.jar;C:\Program Files\Java\jre1.5.0_04\classes java.vendor=Sun Microsystems Inc. file.separator=\ java.vendor.url.bug= http://java.sun.com/cgi-bin/bugreport.cgi sun.io.unicode.encoding=UnicodeLittle sun.cpu.endian=little sun.desktop=windows sun.cpu.isalist= ---- Command Line --- -cp C:\p4sandbox\main\_stage\win32\ADS_EE\Core/lib/aspectjrt.jar;C:\p4sandbox\main\_stage\win32\ADS_EE\Core/lib/struts.jar;C:\p4sandbox\main\_stage\win32\ADS_EE\Core/lib/servlet-api.jar;C:\p4sandbox\main\_stage\win32\ADS_EE\Core/lib/jsp-api.jar;;C:\DOCUME~1\mxue\LOCALS~1\Temp\fortify47533.tmp\_libraries\activation.jar;C:\DOCUME~1\mxue\LOCALS~1\Temp\fortify47533.tmp\_libraries\jTDS2.jar;C:\DOCUME~1\mxue\LOCALS~1\Temp\fortify47533.tmp\_libraries\jconn2.jar;C:\DOCUME~1\mxue\LOCALS~1\Temp\fortify47533.tmp\_libraries\ldapfilt.jar;C:\DOCUME~1\mxue\LOCALS~1\Temp\fortify47533.tmp\_libraries\ldapjdk.jar;C:\DOCUME~1\mxue\LOCALS~1\Temp\fortify47533.tmp\_libraries\mail.jar -inpath C:\DOCUME~1\mxue\LOCALS~1\Temp\fortify47533.tmp\original_archive\WEB-INF\classes -d C:\DOCUME~1\mxue\LOCALS~1\Temp\fortify47533.tmp\original_archive\WEB-INF\classes -aspectpath C:\p4sandbox\main\_stage\win32\ADS_EE\Core/lib/appdefensert.jar -showWeaveInfo ---- Full Classpath --- Empty ---- Compiler Messages --- info zipfile classpath entry does not exist: C:\Program Files\Java\jre1.5.0_04\lib\i18n.jar info zipfile classpath entry does not exist: C:\Program Files\Java\jre1.5.0_04\lib\sunrsasign.jar info directory classpath entry does not exist: C:\Program Files\Java\jre1.5.0_04\classes abort ABORT -- ClassFormatException Invalid byte tag in constant pool: 0 Invalid byte tag in constant pool: 0 org.aspectj.apache.bcel.classfile.ClassFormatException: Invalid byte tag in constant pool: 0 at org.aspectj.apache.bcel.classfile.Constant.readConstant Constant.java:145 at org.aspectj.apache.bcel.classfile.ConstantPool.&amp;lt;init&amp;gt; ConstantPool.java:103 at org.aspectj.apache.bcel.classfile.ClassParser.readConstantPool ClassParser.java:254 at org.aspectj.apache.bcel.classfile.ClassParser.parse ClassParser.java:162 at org.aspectj.weaver.bcel.Utility.makeJavaClass Utility.java:365 at org.aspectj.weaver.bcel.UnwovenClassFile.getJavaClass UnwovenClassFile.java:63 at org.aspectj.weaver.bcel.BcelWeaver.addClassFile BcelWeaver.java:280 at org.aspectj.weaver.bcel.BcelWeaver.addClassFile BcelWeaver.java:295 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.initBcelWorld AjBuildManager.java:533 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:151 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:102 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:109 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:291 at com.fortify.appdefense.cmd.Instrumenter.runWeaver Instrumenter.java:432 at com.fortify.appdefense.cmd.Instrumenter.instrumentClasses Instrumenter.java:400 at com.fortify.appdefense.cmd.Instrumenter.instrumentApplication Instrumenter.java:144 at com.fortify.appdefense.cmd.Instrumenter.instrument Instrumenter.java:118 at com.fortify.appdefense.cmd.Main.run Main.java:207 at com.fortify.appdefense.cmd.Main.main Main.java:177 ---- org.aspectj.weaver.bcel.BcelWorld ---- Shadow mungers: around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.UnhandledException &amp;amp;&amp;amp; execution void javax.servlet.http.HttpServlet.* javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse &amp;amp;&amp;amp; args BindingTypePattern javax.servlet.http.HttpServletRequest, 0 , BindingTypePattern javax.servlet.http.HttpServletResponse, 1 -&amp;gt;void com.fortify.appdefense.runtime.aspects.UnhandledException.ajc$around$com_fortify_appdefense_runtime_aspects_UnhandledException$1$29b5f492 javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.UnhandledException &amp;amp;&amp;amp; execution org.apache.struts.action.ActionForward org.apache.struts.action.Action.* org.apache.struts.action.ActionMapping, org.apache.struts.action.ActionForm, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse &amp;amp;&amp;amp; args BindingTypePattern org.apache.struts.action.ActionMapping, 0 , BindingTypePattern org.apache.struts.action.ActionForm, 1 , BindingTypePattern javax.servlet.http.HttpServletRequest, 2 , BindingTypePattern javax.servlet.http.HttpServletResponse, 3 -&amp;gt;org.apache.struts.action.ActionForward com.fortify.appdefense.runtime.aspects.UnhandledException.ajc$around$com_fortify_appdefense_runtime_aspects_UnhandledException$2$5d7db7b0 org.apache.struts.action.ActionMapping, org.apache.struts.action.ActionForm, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.SQLInjection &amp;amp;&amp;amp; call java.sql.ResultSet java.sql.Statement.executeQuery java.lang.String &amp;amp;&amp;amp; args BindingTypePattern java.lang.String, 0 -&amp;gt;java.sql.ResultSet com.fortify.appdefense.runtime.aspects.SQLInjection.ajc$around$com_fortify_appdefense_runtime_aspects_SQLInjection$1$6ee9ac24 java.lang.String, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void javax.servlet.ServletContext.log java.lang.String &amp;amp;&amp;amp; args BindingTypePattern java.lang.String, 0 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$1$7a5aaa2a java.lang.String, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void javax.servlet.ServletContext.log java.lang.String, java.lang.Throwable &amp;amp;&amp;amp; args BindingTypePattern java.lang.String, 0 , BindingTypePattern java.lang.Throwable, 1 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$2$3b51861a java.lang.String, java.lang.Throwable, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.lang.System.setOut java.io.PrintStream &amp;amp;&amp;amp; args BindingTypePattern java.io.PrintStream, 0 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$3$ea55ab8a java.io.PrintStream, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.lang.System.setErr java.io.PrintStream &amp;amp;&amp;amp; args BindingTypePattern java.io.PrintStream, 0 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$4$14017ea1 java.io.PrintStream, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.util.logging.Logger.info java.lang.String &amp;amp;&amp;amp; args BindingTypePattern java.lang.String, 0 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$5$426f2ff4 java.lang.String, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.util.logging.Logger.log java.util.logging.Level, java.lang.String &amp;amp;&amp;amp; args BindingTypePattern java.util.logging.Level, 0 , BindingTypePattern java.lang.String, 1 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$6$765ad887 java.util.logging.Level, java.lang.String, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.util.logging.Logger.log java.util.logging.Level, java.lang.String, java.lang.Object &amp;amp;&amp;amp; args BindingTypePattern java.util.logging.Level, 0 , BindingTypePattern java.lang.String, 1 , BindingTypePattern java.lang.Object, 2 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$7$44505c35 java.util.logging.Level, java.lang.String, java.lang.Object, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.util.logging.Logger.log java.util.logging.Level, java.lang.String, java.lang.Object[] &amp;amp;&amp;amp; args BindingTypePattern java.util.logging.Level, 0 , BindingTypePattern java.lang.String, 1 , BindingTypePattern java.lang.Object[], 2 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$8$c880a936 java.util.logging.Level, java.lang.String, java.lang.Object[], org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.util.logging.Logger.log java.util.logging.Level, java.lang.String, java.lang.Throwable &amp;amp;&amp;amp; args BindingTypePattern java.util.logging.Level, 0 , BindingTypePattern java.lang.String, 1 , BindingTypePattern java.lang.Throwable, 2 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$9$4cb0f637 java.util.logging.Level, java.lang.String, java.lang.Throwable, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.util.logging.Logger.logp java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String &amp;amp;&amp;amp; args BindingTypePattern java.util.logging.Level, 0 , BindingTypePattern java.lang.String, 1 , BindingTypePattern java.lang.String, 2 , BindingTypePattern java.lang.String, 3 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$10$bf9e1536 java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.util.logging.Logger.logp java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Object &amp;amp;&amp;amp; args BindingTypePattern java.util.logging.Level, 0 , BindingTypePattern java.lang.String, 1 , BindingTypePattern java.lang.String, 2 , BindingTypePattern java.lang.String, 3 , BindingTypePattern java.lang.Object, 4 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$11$a907c742 java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Object, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.util.logging.Logger.logp java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Object[] &amp;amp;&amp;amp; args BindingTypePattern java.util.logging.Level, 0 , BindingTypePattern java.lang.String, 1 , BindingTypePattern java.lang.String, 2 , BindingTypePattern java.lang.String, 3 , BindingTypePattern java.lang.Object[], 4 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$12$d6e061a1 java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Object[], org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.util.logging.Logger.logp java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Throwable &amp;amp;&amp;amp; args BindingTypePattern java.util.logging.Level, 0 , BindingTypePattern java.lang.String, 1 , BindingTypePattern java.lang.String, 2 , BindingTypePattern java.lang.String, 3 , BindingTypePattern java.lang.Throwable, 4 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$13$4b8fc00 java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Throwable, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.util.logging.Logger.logrb java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String &amp;amp;&amp;amp; args BindingTypePattern java.util.logging.Level, 0 , BindingTypePattern java.lang.String, 1 , BindingTypePattern java.lang.String, 2 , BindingTypePattern java.lang.String, 3 , BindingTypePattern java.lang.String, 4 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$14$ab6fcbcf java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.util.logging.Logger.logrb java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Object &amp;amp;&amp;amp; args BindingTypePattern java.util.logging.Level, 0 , BindingTypePattern java.lang.String, 1 , BindingTypePattern java.lang.String, 2 , BindingTypePattern java.lang.String, 3 , BindingTypePattern java.lang.String, 4 , BindingTypePattern java.lang.Object, 5 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$15$c8323e5b java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Object, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.util.logging.Logger.logrb java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Object[] &amp;amp;&amp;amp; args BindingTypePattern java.util.logging.Level, 0 , BindingTypePattern java.lang.String, 1 , BindingTypePattern java.lang.String, 2 , BindingTypePattern java.lang.String, 3 , BindingTypePattern java.lang.String, 4 , BindingTypePattern java.lang.Object[], 5 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$16$4693423a java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Object[], org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void java.util.logging.Logger.logrb java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Throwable &amp;amp;&amp;amp; args BindingTypePattern java.util.logging.Level, 0 , BindingTypePattern java.lang.String, 1 , BindingTypePattern java.lang.String, 2 , BindingTypePattern java.lang.String, 3 , BindingTypePattern java.lang.String, 4 , BindingTypePattern java.lang.Throwable, 5 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$17$c4f44619 java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Throwable, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.InformationLeakage &amp;amp;&amp;amp; call void org.apache.log4j.Logger.warn java.lang.Object || call void org.apache.log4j.Logger.debug java.lang.Object || call void org.apache.log4j.Logger.info java.lang.Object || call void org.apache.log4j.Logger.error java.lang.Object || call void org.apache.log4j.Logger.fatal java.lang.Object &amp;amp;&amp;amp; args BindingTypePattern java.lang.Object, 0 -&amp;gt;void com.fortify.appdefense.runtime.aspects.InformationLeakage.ajc$around$com_fortify_appdefense_runtime_aspects_InformationLeakage$18$e4a81d46 java.lang.Object, org.aspectj.runtime.internal.AroundClosure around extraFlags: 1 : persingleton com.fortify.appdefense.runtime.aspects.CrossSiteScripting &amp;amp;&amp;amp; call java.lang.String java.sql.ResultSet+.getString .. -&amp;gt;java.lang.String com.fortify.appdefense.runtime.aspects.CrossSiteScripting.ajc$around$com_fortify_appdefense_runtime_aspects_CrossSiteScripting$1$e6d7e248 org.aspectj.runtime.internal.AroundClosure Type mungers: BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void javax.servlet.http.HttpServletRequest. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void javax.servlet.http.HttpServletResponse. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void org.apache.struts.action.ActionMapping. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void org.apache.struts.action.ActionForm. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void javax.servlet.http.HttpServletRequest. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void javax.servlet.http.HttpServletResponse. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.Throwable. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.io.PrintStream. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.io.PrintStream. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.util.logging.Level. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.util.logging.Level. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.Object. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.util.logging.Level. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.Object[]. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.util.logging.Level. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.Throwable. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.util.logging.Level. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.util.logging.Level. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.Object. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.util.logging.Level. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.Object[]. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.util.logging.Level. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.Throwable. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.util.logging.Level. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.util.logging.Level. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.Object. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.util.logging.Level. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.Object[]. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.util.logging.Level. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.String. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.Throwable. BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.Object.</description>
    <commit commitTime="2005-10-14 08:39:32" id="999d9b0"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/ClassParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="113073" reportTime="2005-10-19 09:24:00">
    <summary>weaveinfo messages not reported if applying declare @method on an ITD'd method</summary>
    <description>Given the following class: @interface Annotation{} aspect B { declare @method : public * C.anotherMethod .. : @Annotation; } class C { } aspect D { public void C.anotherMethod String s { } public void C.anotherMethod { } } I would expect a two weaveinfo messages of the form: weaveinfo 'public void C.anotherMethod ' pr99191_4.java is annotated with @Annotation method annotation from 'B' pr99191_4.java:3 weaveinfo 'public void C.anotherMethod String ' pr99191_4.java is annotated with @Annotation method annotation from 'B' pr99191_4.java:3 However, only the two "intertyped" messages are coming out.</description>
    <commit commitTime="2005-10-20 13:54:50" id="f06df41"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="113511" reportTime="2005-10-24 05:39:00">
    <summary>LTW enhancements</summary>
    <description>Alex, here is the basic patch that is working well before you leave for the weekend ;- I'll let Matthew post it officially to bugzilla since it was his idea. The earlier return from !enabled is a small addition I made that seems to help further. It would be great to have this in HEAD so I can report performance numbers based on it in part 2 of my article on developerworks ;- Hope you are enjoying your new addition! Thanks! Index: ClassLoaderWeavingAdaptor.java =================================================================== RCS file: /home/technology/org.aspectj/modules/loadtime/src/org/aspectj/weaver/loadtim e/ClassLoaderWeavingAdaptor.java,v retrieving revision 1.18 diff -u -r1.18 ClassLoaderWeavingAdaptor.java --- ClassLoaderWeavingAdaptor.java 19 Oct 2005 13:11:36 -0000 1.18 +++ ClassLoaderWeavingAdaptor.java 21 Oct 2005 16:04:41 -0000 @@ -107,8 +107,13 @@ // register the definitions registerDefinitions weaver, loader ; + if !enabled { + return; + } messageHandler = bcelWorld.getMessageHandler ; + bcelWorld.setResolutionLoader ClassLoader null ;//loader.getParent ; + // after adding aspects weaver.prepareForWeave ; } @@ -148,7 +153,11 @@ definitions.add DocumentParser.parse xml ; } } - + if definitions.isEmpty { + enabled = false; + return; + } + // still go thru if definitions is empty since we will configure // the default message handler in there registerOptions weaver, loader, definitions ;</description>
    <commit commitTime="2005-10-24 09:48:39" id="70888dd"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Aj.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="99191" reportTime="2005-06-09 12:08:00">
    <summary>declare @field allowed for non existent fields</summary>
    <description>///// in this code @interface anInterface{} aspect B { declare @field : int B.noSuchField : @anInterface; // should be an error } ////////////////// I don't get an error, even though B.noSuchField doesn't exist. If I try declare @field on NoSuchCLass.noSuchField I do get an error though.</description>
    <commit commitTime="2005-10-27 15:49:49" id="2da9b31"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="108892" reportTime="2005-09-06 22:05:00">
    <summary>Load Time Weaving problem with Aspect Definition at 2 Levels of Hierarchy</summary>
    <description>I am trying to weave into Tomcat with a system-level aspect META-INF/aop.xml is found in a jar on the system classpath , and also have a Web application with an aop.xml properly deployed. When I try to run them both together, only the system-level aspects work. If I remove the system-level aspect jar from the classpath, the application-level aspects work. What would be a reasonable way to isolate this into a test case? If I could package up a simple system.jar and app.war file for Tomcat 5.5.9, would that be useful for you to use in debugging it? I tried making a simple standalone version with 2 aop.xml files in the same app classloader but that works just fine.</description>
    <commit commitTime="2005-10-28 12:07:14" id="794f9b5"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</file>
    </fixedFiles>
  </bug>
  <bug id="113510" reportTime="2005-10-24 05:36:00">
    <summary>readAspect</summary>
    <description>clearly define what the goal for readAspect is old byte per byte reading cause NPE in some test case current impl is hashcode for aspect name + classloader - ie unstable across startups.</description>
    <commit commitTime="2005-11-02 10:36:05" id="62d16d5"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="114744" reportTime="2005-11-02 07:56:00">
    <summary>NPE at CaptureBinding.java on wildcard in intertype field type</summary>
    <description>When compiling this program with ajc -1.5 public aspect Wildcard { Class&amp;lt;? extends Wildcard&amp;gt; Wildcard.cl; void foo throws Exception { Wildcard ci = cl.newInstance ; } } ajc throws this exception java.lang.NullPointerException at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CaptureBinding.initializeBounds CaptureBinding.java:75 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding.capture ParameterizedTypeBinding.java:105 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.SingleNameReference.resolveType SingleNameReference.java:772 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType MessageSend.java:293 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.resolve LocalDeclaration.java:199 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements AbstractMethodDeclaration.java:422 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements MethodDeclaration.java:178 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve AbstractMethodDeclaration.java:400 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1076 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.resolve AspectDeclaration.java:114 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1125 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve CompilationUnitDeclaration.java:305 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:514 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:759 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:225 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:151 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:326 at org.aspectj.tools.ajc.Main.runMain Main.java:240 at org.aspectj.tools.ajc.Main.main Main.java:83</description>
    <commit commitTime="2005-11-02 16:16:29" id="ade32bc"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="112476" reportTime="2005-10-13 09:44:00">
    <summary>"declare parents" does not work with bytecode weaving</summary>
    <description>1. download and unpack http://www.fuurou.org/downloads/aspectjtest.zip I couldn't find a way of attaching it 2. copy the aspectj jars into the lib directory 3. run ant The ant file executes both source code and byte code weaving and then it veryfies that the class hierarchy was changed. As you can see from the output in case of source weaving the test is: [java] Is [class lib.C] subcass of [class weaved.SuperC]? true while when weaving bytecode: [java] Is [class lib.C] subcass of [class weaved.SuperC]? false</description>
    <commit commitTime="2005-11-04 10:47:47" id="a7e13f1"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="90143" reportTime="2005-04-04 06:46:00">
    <summary>[itds] Problem with an ITD on an interface</summary>
    <description>If an ITD method is declared on an interface with an anonymous inner class returned as the result, the compiler generates an error for any "super.xxx" calls in the anonymous inner class. The example project shows this with a nested inner interface, but the same problem occurs with an ITD of this kind on any interface. The error does not occur if the ITD is declared on an inner class as shown in the example or a normal class.</description>
    <commit commitTime="2005-11-04 16:26:06" id="21cf37d"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterSuperFixerVisitor.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="114005" reportTime="2005-10-27 13:23:00">
    <summary>annotated ITD fields on interfaces have no annotation</summary>
    <description>As stated in the notebook it is allowed to annotate field ITDs. This seems not to work properly with interfaces. public interface TestInterface { } @Retention RetentionPolicy.RUNTIME public @interface SampleAnnotation { } public aspect Declaration { declare parents: @SampleAnnotation * implements TestInterface; // this is fine @SampleAnnotation public transient String Test.firstProperty; / this does not work @SampleAnnotation public transient String TestInterface.secondProperty; // this also does not work declare @field: * TestInterface+.*: @SampleAnnotation; } secondProperty has no Annotation as one can see with: public class Test implements TestInterface { public static void main String[] args { for Field field: Test.class.getFields { System.err.println field.toString .concat " " .concat String.valueOf field.isAnnotationPresent SampleAnnotation.class ; } } } I did not try whether this is also the case for method ITS on interfaces. Secondly the field name is ajc$interField$test_Declaration$test_TestInterface$secondProperty instead of simply secondProperty. Is this what is meant with bug 73507 ? What is with private and package protected ITD of fields and runtime reflection? Because the field name is mangled Test.class.getField "firstProperty" raises a NoSuchFieldException when declared private or package protected . Also "declare @field: * Test+.*: @SampleAnnotation;" is not applied for private or package protected declarations. So should one only annotate public field IDTs supported by compiler warnings to have useful runtime behaviour with runtime RetentionPolicy annotations ? So it is strange that the introductory example on annotations shows annotated private field ITDs on interfaces :- Thank you very much for your help, Vincenz</description>
    <commit commitTime="2005-11-08 12:13:05" id="d9757d7"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="112830" reportTime="2005-10-17 14:01:00">
    <summary>Warning "couldn't find aspectjrt.jar on classpath"</summary>
    <description>The compiler makes this warning if "aspectrt.jar" file has a different name like "aspectrt-1.3.jar", which is the case when compiling with maven.</description>
    <commit commitTime="2005-11-08 16:41:54" id="1f51499"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="112756" reportTime="2005-10-16 23:56:00">
    <summary>ajdt compiler generate false warnings</summary>
    <description>I was working on aspect that should raise an error for junit test methods that didn't use any assertions. Apparently I had to use pointcut like "call void Assert+.assert* .. " on which ajdt compiler complained about using "assert" keyword. I don't think such warning should be shown in such case. Anyway, here is the complete aspect code. import junit.framework.Test; import junit.framework.Assert; import junit.framework.AssertionFailedError; public aspect AssertionCounter { private ThreadLocal counts = new ThreadLocal ; public pointcut testMethodExecution : execution void Test+.test* ; public pointcut assertCall : cflow testMethodExecution &amp;amp;&amp;amp; call void Assert+.assert* .. ; void around : testMethodExecution { counts.set new Counter ; proceed ; if Counter counts.get .getCount ==0 { throw new AssertionFailedError "No assertions had been called" ; } } before : assertCall { Counter counts.get .inc ; } }</description>
    <commit commitTime="2005-11-09 10:37:51" id="7a1002a"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="113118" reportTime="2005-10-19 14:01:00">
    <summary>ClassFormatException with tracing aspect</summary>
    <description>Build id: 20051017111807 AspectJ version: 1.5.0.200510141300 The following aspect resulted in the CFE: public aspect CallTrace { /** * A marker interface used to pick the classes to trace. Declare any class you want to * trace to implement this interface. The best way is using an aspect like the one in * the class comment block above. */ public static interface Traced {} /** * A marker annoation, can be used instead of {@link Traced}. */ @Documented @Retention RetentionPolicy.RUNTIME @Target {ElementType.TYPE, ElementType.ANNOTATION_TYPE} public @interface TracedAnno {} private static Level level = Level.INFO; /** * Set the global logging level used for reporting traced calls. Defaults to INFO. * @param newLevel */ public static void setLevel Level newLevel { level = newLevel; } /** * @return the Level used for writing traced output. */ public static Level getLevel { return level; } private static Logger log = Logger.getLogger Traced.class ; private int nesting = 0; private static StringBuffer prefixStr = null; static { new StringBuffer 1024 ; for int i=0; i&amp;lt;128; i++ { // stuff with "+". prefixStr.append "++++++++" ; } } public pointcut exclusions : within CallTrace || within *Tracer ; // Distinguish between initialization JPs and other method calls, to work // around AJ limitation that around advice isn't supported for initializations. public pointcut traceIntfInit : initialization Traced+.new .. ; public pointcut traceIntf : call * Traced+.* .. ; public pointcut traceAnnoInit : initialization com.adteractive..*.new .. &amp;amp;&amp;amp; @target TracedAnno ; public pointcut traceAnno : call * com.adteractive..*.* .. &amp;amp;&amp;amp; @target TracedAnno ; public pointcut traceInit : !exclusions &amp;amp;&amp;amp; traceIntfInit || traceAnnoInit ; public pointcut trace : !exclusions &amp;amp;&amp;amp; traceIntf || traceAnno ; before : traceInit { nesting++; String pre = prefixStr.substring 0,nesting ; log.log level, pre+"&amp;gt; "+thisJoinPointStaticPart ; } after : traceInit { String pre = prefixStr.substring 0,nesting ; log.log level, pre+"&amp;lt; "+thisJoinPointStaticPart ; nesting--; } Object around : trace { nesting++; String pre = prefixStr.substring 0,nesting ; log.log level, pre+"&amp;gt; "+thisJoinPointStaticPart ; Object result = proceed ; log.log level, pre+"&amp;lt; "+thisJoinPointStaticPart ; nesting--; return result; } } A separate aspect is used to "declare parent" or "declare @type" either the marker interface or annotation, thereby adding tracing to the user-specified classes. E.g., public aspect CallTraceTestTracer { // declare @type: com.me.foo..*: @CallTrace.TracedAnno; declare parents: com.me.foo..* implements CallTrace.Traced; } The exception wasn't thrown in a previous version when I used just before advice for both the "trace" and "traceInit" pointcuts. org.aspectj.apache.bcel.classfile.ClassFormatException at org.aspectj.apache.bcel.classfile.Utility.typeOfSignature Utility.java:1293 at org.aspectj.apache.bcel.generic.Type.getTypeInternal Type.java:166 at org.aspectj.apache.bcel.generic.Type.getTypeInternal Type.java:174 at org.aspectj.apache.bcel.generic.Type.getType Type.java:155 at org.aspectj.weaver.bcel.BcelWorld.makeBcelType BcelWorld.java:198 at org.aspectj.weaver.bcel.BcelShadow.createMethodGen BcelShadow.java:2999 at org.aspectj.weaver.bcel.BcelShadow.extractMethod BcelShadow.java:2826 at org.aspectj.weaver.bcel.BcelShadow.weaveAroundInline BcelShadow.java:2020 at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:211 at org.aspectj.weaver.Shadow.implementMungers Shadow.java:514 at org.aspectj.weaver.Shadow.implement Shadow.java:391 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:1781 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:394 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:98 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1464 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1429 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1203 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1039 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:300 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:178 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.a jdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:759 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:249 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:158 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 trouble in: public class com.adteractive.framework.test.ConditionTestFilterTest extends junit.framework.TestCase: com.adteractive.framework.ConditionTestFilter ctf [Signature Lcom/adteractive/framework/ConditionTestFilter&amp;lt;Lcom/adteractive/framework/test/InputStub;Lcom/adteractive/framework/test/OutputStub;&amp;gt;; ] static Class class$0 private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0 public void &amp;lt;init&amp;gt; : ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 16 INVOKESPECIAL junit.framework.TestCase.&amp;lt;init&amp;gt; V constructor-execution void com.adteractive.framework.test.ConditionTestFilterTest.&amp;lt;init&amp;gt; | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 17 | ACONST_NULL | PUTFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | RETURN line 16 constructor-execution void com.adteractive.framework.test.ConditionTestFilterTest.&amp;lt;init&amp;gt; end public void &amp;lt;init&amp;gt; protected void setUp throws java.lang.Exception org.aspectj.weaver.MethodDeclarationLineNumber: 23:543 : method-execution void com.adteractive.framework.test.ConditionTestFilterTest.setUp | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 24 | INVOKESPECIAL junit.framework.TestCase.setUp V | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 25 | NEW com.adteractive.framework.test.ConditionTestFilterStub | DUP | LDC "ctf" | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this | ASTORE_1 | method-call com.adteractive.framework.Filter[] com.adteractive.framework.test.ConditionTestFilterTest.makeBranches | | ALOAD_1 | | INVOKESPECIAL com.adteractive.framework.test.ConditionTestFilterTest.makeBranches [Lcom/adteractive/framework/Filter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.test.ConditionTestFilterTest.makeBranches | INVOKESPECIAL com.adteractive.framework.test.ConditionTestFilterStub.&amp;lt;init&amp;gt; Ljava/lang/String;[Lcom/adteractive/framework/Filter; V | PUTFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | RETURN line 26 method-execution void com.adteractive.framework.test.ConditionTestFilterTest.setUp end protected void setUp throws java.lang.Exception public void testExecute org.aspectj.weaver.MethodDeclarationLineNumber: 31:754 : method-execution void com.adteractive.framework.test.ConditionTestFilterTest.testExecute | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 32 | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | NEW com.adteractive.framework.test.InputStub | DUP | INVOKESPECIAL com.adteractive.framework.test.InputStub.&amp;lt;init&amp;gt; V | method-call com.adteractive.framework.Output com.adteractive.framework.ConditionTestFilter.execute com.adteractive.framework.Input | | INVOKEVIRTUAL com.adteractive.framework.ConditionTestFilter.execute Lcom/adteractive/framework/Input; Lcom/adteractive/framework/Output; | method-call com.adteractive.framework.Output com.adteractive.framework.ConditionTestFilter.execute com.adteractive.framework.Input | CHECKCAST com.adteractive.framework.test.OutputStub | ASTORE_1 | LDC "bf12" line 33 | ALOAD_1 // com.adteractive.framework.test.OutputStub output | method-call com.adteractive.framework.Status com.adteractive.framework.test.OutputStub.getStatus | | INVOKEVIRTUAL com.adteractive.framework.test.OutputStub.getStatus Lcom/adteractive/framework/Status; | method-call com.adteractive.framework.Status com.adteractive.framework.test.OutputStub.getStatus | method-call java.lang.String com.adteractive.framework.Status.getAdditionalMessage | | INVOKEINTERFACE com.adteractive.framework.Status.getAdditionalMessage Ljava/lang/String; | method-call java.lang.String com.adteractive.framework.Status.getAdditionalMessage | method-call void junit.framework.Assert.assertEquals java.lang.String, java.lang.String | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertEquals Ljava/lang/String;Ljava/lang/String; V | method-call void junit.framework.Assert.assertEquals java.lang.String, java.lang.String | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 34 | NEW com.adteractive.framework.test.ConditionTestFilterStub | DUP | INVOKESPECIAL com.adteractive.framework.test.ConditionTestFilterStub.&amp;lt;init&amp;gt; V | PUTFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 35 | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | NEW com.adteractive.framework.test.InputStub | DUP | INVOKESPECIAL com.adteractive.framework.test.InputStub.&amp;lt;init&amp;gt; V | method-call com.adteractive.framework.Output com.adteractive.framework.ConditionTestFilter.execute com.adteractive.framework.Input | | INVOKEVIRTUAL com.adteractive.framework.ConditionTestFilter.execute Lcom/adteractive/framework/Input; Lcom/adteractive/framework/Output; | method-call com.adteractive.framework.Output com.adteractive.framework.ConditionTestFilter.execute com.adteractive.framework.Input | CHECKCAST com.adteractive.framework.test.OutputStub | ASTORE_1 // com.adteractive.framework.test.OutputStub output | ALOAD_1 // com.adteractive.framework.test.OutputStub output line 36 | method-call void junit.framework.Assert.assertNotNull java.lang.Object | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertNotNull Ljava/lang/Object; V | method-call void junit.framework.Assert.assertNotNull java.lang.Object | RETURN line 37 method-execution void com.adteractive.framework.test.ConditionTestFilterTest.testExecute end public void testExecute public void testGetFilterBranches org.aspectj.weaver.MethodDeclarationLineNumber: 42:1111 : method-execution void com.adteractive.framework.test.ConditionTestFilterTest.testGetFilterBranches | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 43 | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | | INVOKEVIRTUAL com.adteractive.framework.ConditionTestFilter.getFilterBranches [Lcom/adteractive/framework/Filter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | method-call void junit.framework.Assert.assertNotNull java.lang.Object | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertNotNull Ljava/lang/Object; V | method-call void junit.framework.Assert.assertNotNull java.lang.Object | ICONST_3 line 44 | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | | INVOKEVIRTUAL com.adteractive.framework.ConditionTestFilter.getFilterBranches [Lcom/adteractive/framework/Filter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | ARRAYLENGTH | method-call void junit.framework.Assert.assertEquals int, int | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertEquals II V | method-call void junit.framework.Assert.assertEquals int, int | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 45 | NEW com.adteractive.framework.test.ConditionTestFilterStub | DUP | INVOKESPECIAL com.adteractive.framework.test.ConditionTestFilterStub.&amp;lt;init&amp;gt; V | PUTFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 46 | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | | INVOKEVIRTUAL com.adteractive.framework.ConditionTestFilter.getFilterBranches [Lcom/adteractive/framework/Filter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | method-call void junit.framework.Assert.assertNull java.lang.Object | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertNull Ljava/lang/Object; V | method-call void junit.framework.Assert.assertNull java.lang.Object | RETURN line 47 method-execution void com.adteractive.framework.test.ConditionTestFilterTest.testGetFilterBranches end public void testGetFilterBranches public void testSetFilterBranches org.aspectj.weaver.MethodDeclarationLineNumber: 52:1441 : method-execution void com.adteractive.framework.test.ConditionTestFilterTest.testSetFilterBranches | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 53 | method-call com.adteractive.framework.Filter[] com.adteractive.framework.test.ConditionTestFilterTest.makeBranches | | INVOKESPECIAL com.adteractive.framework.test.ConditionTestFilterTest.makeBranches [Lcom/adteractive/framework/Filter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.test.ConditionTestFilterTest.makeBranches | ASTORE_1 | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 54 | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | ALOAD_1 // com.adteractive.framework.Filter[] branches | method-call void com.adteractive.framework.ConditionTestFilter.setFilterBranches com.adteractive.framework.Filter[] | | INVOKEVIRTUAL com.adteractive.framework.ConditionTestFilter.setFilterBranches [Lcom/adteractive/framework/Filter; V | method-call void com.adteractive.framework.ConditionTestFilter.setFilterBranches com.adteractive.framework.Filter[] | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 55 | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | | INVOKEVIRTUAL com.adteractive.framework.ConditionTestFilter.getFilterBranches [Lcom/adteractive/framework/Filter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | method-call void junit.framework.Assert.assertNotNull java.lang.Object | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertNotNull Ljava/lang/Object; V | method-call void junit.framework.Assert.assertNotNull java.lang.Object | ICONST_3 line 56 | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | | INVOKEVIRTUAL com.adteractive.framework.ConditionTestFilter.getFilterBranches [Lcom/adteractive/framework/Filter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | ARRAYLENGTH | method-call void junit.framework.Assert.assertEquals int, int | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertEquals II V | method-call void junit.framework.Assert.assertEquals int, int | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 57 | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | ACONST_NULL | method-call void com.adteractive.framework.ConditionTestFilter.setFilterBranches com.adteractive.framework.Filter[] | | INVOKEVIRTUAL com.adteractive.framework.ConditionTestFilter.setFilterBranches [Lcom/adteractive/framework/Filter; V | method-call void com.adteractive.framework.ConditionTestFilter.setFilterBranches com.adteractive.framework.Filter[] | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 58 | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | | INVOKEVIRTUAL com.adteractive.framework.ConditionTestFilter.getFilterBranches [Lcom/adteractive/framework/Filter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | method-call void junit.framework.Assert.assertNull java.lang.Object | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertNull Ljava/lang/Object; V | method-call void junit.framework.Assert.assertNull java.lang.Object | RETURN line 59 method-execution void com.adteractive.framework.test.ConditionTestFilterTest.testSetFilterBranches end public void testSetFilterBranches public void testConditionTestFilter org.aspectj.weaver.MethodDeclarationLineNumber: 64:1847 : method-execution void com.adteractive.framework.test.ConditionTestFilterTest.testConditionTestFilter | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 65 | NEW com.adteractive.framework.test.ConditionTestFilterStub | DUP | INVOKESPECIAL com.adteractive.framework.test.ConditionTestFilterStub.&amp;lt;init&amp;gt; V | PUTFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 66 | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | | INVOKEVIRTUAL com.adteractive.framework.ConditionTestFilter.getFilterBranches [Lcom/adteractive/framework/Filter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | method-call void junit.framework.Assert.assertNull java.lang.Object | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertNull Ljava/lang/Object; V | method-call void junit.framework.Assert.assertNull java.lang.Object | LDC com.adteractive.framework.test.ConditionTestFilterStub line 67 | method-call java.lang.String java.lang.Class.getSimpleName | | INVOKEVIRTUAL java.lang.Class.getSimpleName Ljava/lang/String; | method-call java.lang.String java.lang.Class.getSimpleName | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | method-call java.lang.String com.adteractive.framework.FilterHelper.getName | | INVOKEVIRTUAL com.adteractive.framework.FilterHelper.getName Ljava/lang/String; | method-call java.lang.String com.adteractive.framework.FilterHelper.getName | method-call void junit.framework.Assert.assertEquals java.lang.String, java.lang.String | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertEquals Ljava/lang/String;Ljava/lang/String; V | method-call void junit.framework.Assert.assertEquals java.lang.String, java.lang.String | RETURN line 68 method-execution void com.adteractive.framework.test.ConditionTestFilterTest.testConditionTestFilter end public void testConditionTestFilter public void testConditionTestFilterString org.aspectj.weaver.MethodDeclarationLineNumber: 73:2158 : method-execution void com.adteractive.framework.test.ConditionTestFilterTest.testConditionTestFilterString | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 74 | NEW com.adteractive.framework.test.ConditionTestFilterStub | DUP | LDC "foo" | INVOKESPECIAL com.adteractive.framework.test.ConditionTestFilterStub.&amp;lt;init&amp;gt; Ljava/lang/String; V | PUTFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 75 | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | | INVOKEVIRTUAL com.adteractive.framework.ConditionTestFilter.getFilterBranches [Lcom/adteractive/framework/Filter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | method-call void junit.framework.Assert.assertNull java.lang.Object | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertNull Ljava/lang/Object; V | method-call void junit.framework.Assert.assertNull java.lang.Object | LDC "foo" line 76 | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | method-call java.lang.String com.adteractive.framework.FilterHelper.getName | | INVOKEVIRTUAL com.adteractive.framework.FilterHelper.getName Ljava/lang/String; | method-call java.lang.String com.adteractive.framework.FilterHelper.getName | method-call void junit.framework.Assert.assertEquals java.lang.String, java.lang.String | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertEquals Ljava/lang/String;Ljava/lang/String; V | method-call void junit.framework.Assert.assertEquals java.lang.String, java.lang.String | RETURN line 77 method-execution void com.adteractive.framework.test.ConditionTestFilterTest.testConditionTestFilterString end public void testConditionTestFilterString public void testConditionTestFilterStringFilterOfIOArray org.aspectj.weaver.MethodDeclarationLineNumber: 82:2456 : method-execution void com.adteractive.framework.test.ConditionTestFilterTest.testConditionTestFilterStringFilterOfIOArray | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 83 | NEW com.adteractive.framework.test.ConditionTestFilterStub | DUP | LDC "foo" | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this | method-call com.adteractive.framework.Filter[] com.adteractive.framework.test.ConditionTestFilterTest.makeBranches | | INVOKESPECIAL com.adteractive.framework.test.ConditionTestFilterTest.makeBranches [Lcom/adteractive/framework/Filter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.test.ConditionTestFilterTest.makeBranches | INVOKESPECIAL com.adteractive.framework.test.ConditionTestFilterStub.&amp;lt;init&amp;gt; Ljava/lang/String;[Lcom/adteractive/framework/Filter; V | PUTFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this line 84 | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | | INVOKEVIRTUAL com.adteractive.framework.ConditionTestFilter.getFilterBranches [Lcom/adteractive/framework/Filter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | method-call void junit.framework.Assert.assertNotNull java.lang.Object | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertNotNull Ljava/lang/Object; V | method-call void junit.framework.Assert.assertNotNull java.lang.Object | ICONST_3 line 85 | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | | INVOKEVIRTUAL com.adteractive.framework.ConditionTestFilter.getFilterBranches [Lcom/adteractive/framework/Filter; | method-call com.adteractive.framework.Filter[] com.adteractive.framework.ConditionTestFilter.getFilterBranches | ARRAYLENGTH | method-call void junit.framework.Assert.assertEquals int, int | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertEquals II V | method-call void junit.framework.Assert.assertEquals int, int | LDC "foo" line 86 | ALOAD_0 // com.adteractive.framework.test.ConditionTestFilterTest this | GETFIELD com.adteractive.framework.test.ConditionTestFilterTest.ctf Lcom/adteractive/framework/ConditionTestFilter; | method-call java.lang.String com.adteractive.framework.FilterHelper.getName | | INVOKEVIRTUAL com.adteractive.framework.FilterHelper.getName Ljava/lang/String; | method-call java.lang.String com.adteractive.framework.FilterHelper.getName | method-call void junit.framework.Assert.assertEquals java.lang.String, java.lang.String | | INVOKESTATIC com.adteractive.framework.test.ConditionTestFilterTest.assertEquals Ljava/lang/String;Ljava/lang/String; V | method-call void junit.framework.Assert.assertEquals java.lang.String, java.lang.String | RETURN line 87 method-execution void com.adteractive.framework.test.ConditionTestFilterTest.testConditionTestFilterStringFilterOfIOArray end public void testConditionTestFilterStringFilterOfIOArray private com.adteractive.framework.Filter[] makeBranches org.aspectj.weaver.MethodDeclarationLineNumber: 89:2749 : method-execution com.adteractive.framework.Filter[] com.adteractive.framework.test.ConditionTestFilterTest.makeBranches | ICONST_3 line 90 | ANEWARRAY com.adteractive.framework.test.FilterHelperStub | ASTORE_1 | ALOAD_1 // com.adteractive.framework.Filter[] branches line 91 | ICONST_0 | NEW com.adteractive.framework.test.FilterHelperStub | DUP | LDC "bf1" | INVOKESPECIAL com.adteractive.framework.test.FilterHelperStub.&amp;lt;init&amp;gt; Ljava/lang/String; V | AASTORE | ALOAD_1 // com.adteractive.framework.Filter[] branches line 92 | ICONST_1 | NEW com.adteractive.framework.test.FilterHelperStub | DUP | LDC "bf12" | INVOKESPECIAL com.adteractive.framework.test.FilterHelperStub.&amp;lt;init&amp;gt; Ljava/lang/String; V | AASTORE | ALOAD_1 // com.adteractive.framework.Filter[] branches line 93 | ICONST_2 | NEW com.adteractive.framework.test.FilterHelperStub | DUP | LDC "bf" | INVOKESPECIAL com.adteractive.framework.test.FilterHelperStub.&amp;lt;init&amp;gt; Ljava/lang/String; V | AASTORE | ALOAD_1 // com.adteractive.framework.Filter[] branches line 94 | ARETURN method-execution com.adteractive.framework.Filter[] com.adteractive.framework.test.ConditionTestFilterTest.makeBranches end private com.adteractive.framework.Filter[] makeBranches end public class com.adteractive.framework.test.ConditionTestFilterTest when implementing on shadow method-call com.adteractive.framework.Filter[] com.adteractive.framework.test.ConditionTestFilterTest.makeBranches when weaving type com.adteractive.framework.test.ConditionTestFilterTest when weaving classes when weaving when incrementally building BuildConfig[C:\cygwin\home\dwampler\work\workspace\.metadata\.plugins\org.eclipse.ajdt.core\adserver-service.generated.lst] #Files=259</description>
    <commit commitTime="2005-11-11 15:13:33" id="d7d5947"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="116626" reportTime="2005-11-16 03:54:00">
    <summary>Load-time weaving - exception from the weaver</summary>
    <description>Hi again :- I'm trying to use loadtime weaving and getting an exception. Please look at the testcase: Java code: ========== public class Test&amp;lt;T&amp;gt; { Set&amp;lt;T&amp;gt; intsSet; public Test { this.intsSet = new HashSet&amp;lt;T&amp;gt; ; } public &amp;lt;T&amp;gt; T[] getObjs T[] a { return intsSet.toArray a ; } public static void main String[] args { System.out.println "AAA :- " ; new TTT .foo ; } } class TTT { public void foo { Test&amp;lt;Object&amp;gt; mt = new Test&amp;lt;Object&amp;gt; ; Object[] arr = mt.getObjs new Object[]{} ; } } Aspect: ======= public privileged aspect TestAspect { pointcut TestToArray Test mt : target mt &amp;amp;&amp;amp; !within TestAspect ; Object[] around Test mt, Object[] objs : TestToArray mt &amp;amp;&amp;amp; args objs &amp;amp;&amp;amp; execution Object[] com.mprv.secsph.Test.getObjs Object[] { objs = proceed mt, objs ; System.out.println "GO Aspects!" ; return objs; } } aop.xml ======= &amp;lt;aspectj&amp;gt; &amp;lt;aspects&amp;gt; &amp;lt;aspect name="com.mprv.secsph.TestAspect"/&amp;gt; &amp;lt;/aspects&amp;gt; &amp;lt;weaver options="-verbose -XlazyTjp -showWeaveInfo"&amp;gt; &amp;lt;include within="com.mprv.*"/&amp;gt; &amp;lt;/weaver&amp;gt; &amp;lt;/aspectj&amp;gt; Program output: ============== AAA :- info weaving 'com/mprv/secsph/TestAspect' java.lang.NullPointerException at org.aspectj.weaver.tools.WeavingAdaptor$WeavingClassFileProvider.getBytes WeavingAdaptor.java:390 at org.aspectj.weaver.tools.WeavingAdaptor.getAtAspectJAspectBytes WeavingAdaptor.java:259 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:181 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:66 at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform ClassPreProcessorAgentAdapter.java:52 at sun.instrument.TransformerManager.transform TransformerManager.java:122 at sun.instrument.InstrumentationImpl.transform InstrumentationImpl.java:155 at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:620 at java.security.SecureClassLoader.defineClass SecureClassLoader.java:124 at java.net.URLClassLoader.defineClass URLClassLoader.java:260 at java.net.URLClassLoader.access$100 URLClassLoader.java:56 at java.net.URLClassLoader$1.run URLClassLoader.java:195 at java.security.AccessController.doPrivileged Native Method at java.net.URLClassLoader.findClass URLClassLoader.java:188 at java.lang.ClassLoader.loadClass ClassLoader.java:306 at sun.misc.Launcher$AppClassLoader.loadClass Launcher.java:268 at java.lang.ClassLoader.loadClass ClassLoader.java:251 at java.lang.ClassLoader.loadClassInternal ClassLoader.java:319 at com.mprv.secsph.Test.getObjs Test.java:1 at com.mprv.secsph.TTT.foo Test.java:34 at com.mprv.secsph.Test.main Test.java:27 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:585 at com.intellij.rt.execution.application.AppMain.main AppMain.java:86 GO Aspects! ==== This exception doesn't happen all the time ... but if you will try a few times, you will probably get it. May you can understand what is the problem event without running the test case. Anyway, I took a look at your code, and have a guess but it's only the guess - My aspect is in the application classpath. Actually it's in the same package, so may be you are trying to weave the aspect with itself somehow ... Thanks! Misha.</description>
    <commit commitTime="2005-11-18 09:01:17" id="c760895"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="116949" reportTime="2005-11-17 17:09:00">
    <summary>[waitingOnAJDTdrop]Exception thrown from AspectJ compiler</summary>
    <description>java.lang.ClassCastException at org.aspectj.weaver.bcel.BcelClassWeaver.checkForOverride BcelClassWeaver.java:607 at org.aspectj.weaver.bcel.BcelClassWeaver.calculateAnyRequiredBridgeMethods BcelClassWeaver.java:676 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1537 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1485 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1266 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1088 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:300 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:178 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspect j_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:809 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:254 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:163 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 trouble in: public class ts.simul.client.AbstractClient$OptionSetter extends ts.util.CmdLineProgram$OptionSetterBase: final ts.simul.client.AbstractClient this$0 private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0 public void &amp;lt;init&amp;gt; ts.simul.client.AbstractClient org.aspectj.weaver.MethodDeclarationLineNumber: 59:1411 : ALOAD_0 // ts.simul.client.AbstractClient$OptionSetter this line 60 ALOAD_1 PUTFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 Lts/simul/client/AbstractClient; ALOAD_0 // ts.simul.client.AbstractClient$OptionSetter this line 59 ALOAD_1 INVOKESPECIAL ts.util.CmdLineProgram$OptionSetterBase.&amp;lt;init&amp;gt; Lts/util/CmdLineProgram; V constructor-execution void ts.simul.client.AbstractClient$OptionSetter.&amp;lt;init&amp;gt; ts.simul.client.AbstractClient | RETURN constructor-execution void ts.simul.client.AbstractClient$OptionSetter.&amp;lt;init&amp;gt; ts.simul.client.AbstractClient end public void &amp;lt;init&amp;gt; ts.simul.client.AbstractClient public boolean setOption_file String throws ts.util.IllegalProgramArgumentException org.aspectj.weaver.MethodDeclarationLineNumber: 62:1469 : method-execution boolean ts.simul.client.AbstractClient$OptionSetter.setOption_file java.lang.String | ALOAD_1 // java.lang.String optParam line 65 | method-call int java.lang.String.length | | INVOKEVIRTUAL java.lang.String.length I | method-call int java.lang.String.length | IFLE L1 | ALOAD_0 // ts.simul.client.AbstractClient$OptionSetter this line 66 | GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 Lts/simul/client/AbstractClient; | ALOAD_1 // java.lang.String optParam | PUTFIELD ts.simul.client.AbstractClient.fileName Ljava/lang/String; | NEW java.io.File line 67 | DUP | ALOAD_0 // ts.simul.client.AbstractClient$OptionSetter this | GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 Lts/simul/client/AbstractClient; | GETFIELD ts.simul.client.AbstractClient.fileName Ljava/lang/String; | constructor-call void java.io.File.&amp;lt;init&amp;gt; java.lang.String | | INVOKESPECIAL java.io.File.&amp;lt;init&amp;gt; Ljava/lang/String; V | constructor-call void java.io.File.&amp;lt;init&amp;gt; java.lang.String | ASTORE_2 | ALOAD_2 // java.io.File file line 68 | method-call boolean java.io.File.exists | | INVOKEVIRTUAL java.io.File.exists Z | method-call boolean java.io.File.exists | IFNE L0 | NEW ts.util.IllegalProgramArgumentException line 69 | DUP | NEW java.lang.StringBuilder | DUP | LDC "Cannot find file: [" | constructor-call void java.lang.StringBuilder.&amp;lt;init&amp;gt; java.lang.String | | INVOKESPECIAL java.lang.StringBuilder.&amp;lt;init&amp;gt; Ljava/lang/String; V | constructor-call void java.lang.StringBuilder.&amp;lt;init&amp;gt; java.lang.String | ALOAD_0 // ts.simul.client.AbstractClient$OptionSetter this | GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 Lts/simul/client/AbstractClient; | GETFIELD ts.simul.client.AbstractClient.fileName Ljava/lang/String; | method-call java.lang.StringBuilder java.lang.StringBuilder.append java.lang.String | | INVOKEVIRTUAL java.lang.StringBuilder.append Ljava/lang/String; Ljava/lang/StringBuilder; | method-call java.lang.StringBuilder java.lang.StringBuilder.append java.lang.String | LDC "]" | method-call java.lang.StringBuilder java.lang.StringBuilder.append java.lang.String | | INVOKEVIRTUAL java.lang.StringBuilder.append Ljava/lang/String; Ljava/lang/StringBuilder; | method-call java.lang.StringBuilder java.lang.StringBuilder.append java.lang.String | method-call java.lang.String java.lang.StringBuilder.toString | | INVOKEVIRTUAL java.lang.StringBuilder.toString Ljava/lang/String; | method-call java.lang.String java.lang.StringBuilder.toString | constructor-call void ts.util.IllegalProgramArgumentException.&amp;lt;init&amp;gt; java.lang.String | | INVOKESPECIAL ts.util.IllegalProgramArgumentException.&amp;lt;init&amp;gt; Ljava/lang/String; V | constructor-call void ts.util.IllegalProgramArgumentException.&amp;lt;init&amp;gt; java.lang.String | ATHROW | L0: ICONST_1 line 70 | IRETURN | L1: ICONST_0 line 73 | IRETURN method-execution boolean ts.simul.client.AbstractClient$OptionSetter.setOption_file java.lang.String end public boolean setOption_file String throws ts.util.IllegalProgramArgumentException public boolean setOption_class String throws ts.util.IllegalProgramArgumentException org.aspectj.weaver.MethodDeclarationLineNumber: 76:1971 : method-execution boolean ts.simul.client.AbstractClient$OptionSetter.setOption_class java.lang.String | ALOAD_1 // java.lang.String optParam line 79 | method-call int java.lang.String.length | | INVOKEVIRTUAL java.lang.String.length I | method-call int java.lang.String.length | IFLE L1 | ALOAD_0 // ts.simul.client.AbstractClient$OptionSetter this line 80 | GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 Lts/simul/client/AbstractClient; | ALOAD_1 // java.lang.String optParam | PUTFIELD ts.simul.client.AbstractClient.className Ljava/lang/String; | catch ts.simul.SimulationException -&amp;gt; E0 | | ALOAD_0 // ts.simul.client.AbstractClient$OptionSetter this line 82 | | GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 Lts/simul/client/AbstractClient; | | ALOAD_0 // ts.simul.client.AbstractClient$OptionSetter this | | GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 Lts/simul/client/AbstractClient; | | GETFIELD ts.simul.client.AbstractClient.className Ljava/lang/String; | | method-call java.lang.Class ts.simul.SceneFactory.getSceneClass java.lang.String | | | INVOKESTATIC ts.simul.SceneFactory.getSceneClass Ljava/lang/String; Ljava/lang/Class; | | method-call java.lang.Class ts.simul.SceneFactory.getSceneClass java.lang.String | | PUTFIELD ts.simul.client.AbstractClient.sceneClass Ljava/lang/Class; | | ALOAD_0 // ts.simul.client.AbstractClient$OptionSetter this line 83 | | GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 Lts/simul/client/AbstractClient; | | method-call void ts.simul.client.AbstractClient.setBeanInfoSearchPath | | | INVOKESTATIC ts.simul.Architecture.aspectOf Lts/simul/Architecture; | | | GETSTATIC ts.simul.client.AbstractClient$OptionSetter.ajc$tjp_0 Lorg/aspectj/lang/JoinPoint$StaticPart; | | | INVOKEVIRTUAL ts.simul.Architecture.ajc$before$ts_simul_Architecture$1$ae285a4d Lorg/aspectj/lang/JoinPoint$StaticPart; V | | | INVOKEVIRTUAL ts.simul.client.AbstractClient.setBeanInfoSearchPath V | | method-call void ts.simul.client.AbstractClient.setBeanInfoSearchPath | | GOTO L0 | catch ts.simul.SimulationException -&amp;gt; E0 | E0: ASTORE_2 line 85 | NEW ts.util.IllegalProgramArgumentException line 86 | DUP | ALOAD_2 // ts.simul.SimulationException e | method-call java.lang.String ts.simul.SimulationException.getMessage | | INVOKEVIRTUAL ts.simul.SimulationException.getMessage Ljava/lang/String; | method-call java.lang.String ts.simul.SimulationException.getMessage | constructor-call void ts.util.IllegalProgramArgumentException.&amp;lt;init&amp;gt; java.lang.String | | INVOKESPECIAL ts.util.IllegalProgramArgumentException.&amp;lt;init&amp;gt; Ljava/lang/String; V | constructor-call void ts.util.IllegalProgramArgumentException.&amp;lt;init&amp;gt; java.lang.String | ATHROW | L0: ICONST_1 line 88 | IRETURN | L1: ICONST_0 line 91 | IRETURN method-execution boolean ts.simul.client.AbstractClient$OptionSetter.setOption_class java.lang.String end public boolean setOption_class String throws ts.util.IllegalProgramArgumentException public boolean setOption_name String org.aspectj.weaver.MethodDeclarationLineNumber: 94:2593 : method-execution boolean ts.simul.client.AbstractClient$OptionSetter.setOption_name java.lang.String | ALOAD_0 // ts.simul.client.AbstractClient$OptionSetter this line 96 | GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 Lts/simul/client/AbstractClient; | ALOAD_1 // java.lang.String optParam | PUTFIELD ts.simul.client.AbstractClient.sceneName Ljava/lang/String; | ICONST_1 line 97 | IRETURN method-execution boolean ts.simul.client.AbstractClient$OptionSetter.setOption_name java.lang.String end public boolean setOption_name String public boolean setOption_actors String org.aspectj.weaver.MethodDeclarationLineNumber: 100:2739 : method-execution boolean ts.simul.client.AbstractClient$OptionSetter.setOption_actors java.lang.String | catch java.lang.NumberFormatException -&amp;gt; E0 | | ALOAD_1 // java.lang.String optParam line 103 | | method-call int java.lang.Integer.parseInt java.lang.String | | | INVOKESTATIC java.lang.Integer.parseInt Ljava/lang/String; I | | method-call int java.lang.Integer.parseInt java.lang.String | | ISTORE_2 | | GOTO L0 | catch java.lang.NumberFormatException -&amp;gt; E0 | E0: ASTORE_2 // int n line 105 | ICONST_0 line 106 | IRETURN | L0: ICONST_1 line 108 | IRETURN method-execution boolean ts.simul.client.AbstractClient$OptionSetter.setOption_actors java.lang.String end public boolean setOption_actors String end public class ts.simul.client.AbstractClient$OptionSetter when weaving type ts.simul.client.AbstractClient$OptionSetter when weaving classes when weaving when incrementally building BuildConfig [c:\Projects\eclipse\.metadata\.plugins\org.eclipse.ajdt.core\TS.generated.lst] #Files=79</description>
    <commit commitTime="2005-11-18 09:17:56" id="dd9a9b2"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="115607" reportTime="2005-11-09 04:35:00">
    <summary>Incorrect structure model for simple declare @type program?</summary>
    <description>This program: ---8&amp;lt;----- @interface I {} class Simple {} public aspect C { declare @type: Simple : @I; } ---8&amp;lt;----- all in a file called C.java, open with the AJ editor when built shows incorrect gutter markers, it shows a double headed arrow on Simple implying that it annotates itself - rather than something outgoing from the declare statement and something incoming on the Simple type.</description>
    <commit commitTime="2005-11-21 16:33:56" id="9ed75a1"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceLocation.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="114332" reportTime="2005-10-31 03:42:00">
    <summary>Reflection API not detecting ITD method correctly in all circumstances</summary>
    <description>As reported on the aspectj mailing list: Hi, I'm using the 'getDeclaredITDMethods' method available in the reflection api to find all ITD methods in the Billing aspect from the aspectj examples . The Billing aspect contains 4 ITD methods Connection.callRate, LongDistance.callRate, Local.callRate and Customer.addCharge , but I got only 3 of them using this method. The 'Connection.callRate' is not returned by the 'getDeclaredITDMethods' method maybe because it is abstract . In the implementation of method 'getDeclaredITDMethods' in 'org.aspectj.internal.lang.reflect.AjTypeImpl' there is the following condition: if !m.getName .contains "ajc$interMethod$" continue; Looking the names in the debbuger, I could not find a: public static long telecom.Billing.ajc$interMethod$telecom_Billing$telecom_Connection$callRate telecom.Connection But only: public static long telecom.Billing.ajc$interMethodDispatch1$telecom_Billing$telecom_Connection$callRate telecom.Connection if a take a concrete method, I get two objects, named: public static long telecom.Billing.ajc$interMethod$telecom_Billing$telecom_LongDistance$callRate telecom.LongDistance public static long telecom.Billing.ajc$interMethodDispatch1$telecom_Billing$telecom_LongDistance$callRate telecom.LongDistance One of them satisfies the predicate !m.getName .contains "ajc$interMethod$" . Is this behavior correct? ps.: I'm using the example bellow. ---------------------------------------------------------------- public aspect Billing { ... public abstract long Connection.callRate ; public long LongDistance.callRate { return LONG_DISTANCE_RATE; } public long Local.callRate { return LOCAL_RATE; } public void Customer.addCharge long charge { totalCharge += charge; } ... } --------------------------------------------------------------------------------------- - import org.aspectj.lang.reflect.AjType; import org.aspectj.lang.reflect.AjTypeSystem; import org.aspectj.lang.reflect.InterTypeMethodDeclaration; import telecom.Billing; public class Test { public static void main String args[] throws ClassNotFoundException{ AjType c = AjTypeSystem.getAjType Billing.class ; InterTypeMethodDeclaration[] itdmethods = c.getDeclaredITDMethods ; for int i = 0; i &amp;lt; itdmethods.length; i++ { System.out.println "ITD Method:" + itdmethods[i].getTargetType .getName +"."+itdmethods[i].getName ; } } } ---------------------------------------------------------------- Output: ITD Method:telecom.LongDistance.callRate ITD Method:telecom.Local.callRate ITD Method:telecom.Customer.addCharge Expected Output: ITD Method:telecom.Connection.callRate ITD Method:telecom.LongDistance.callRate ITD Method:telecom.Local.callRate ITD Method:telecom.Customer.addCharge I'm using ajde 1.5.0.20051014142856. Regards, Eduardo Piveta http://www.inf.ufrgs.br/~epiveta</description>
    <commit commitTime="2005-11-21 22:05:46" id="735d94f"/>
    <fixedFiles>
      <file>aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/AjTypeImpl.java</file>
      <file>aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/InterTypeConstructorDeclarationImpl.java</file>
      <file>aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/InterTypeDeclarationImpl.java</file>
      <file>aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/InterTypeFieldDeclarationImpl.java</file>
      <file>aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/InterTypeMethodDeclarationImpl.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="103051" reportTime="2005-07-07 14:03:00">
    <summary>Declare Soft not Affecting Explicit Adviceexecution</summary>
    <description>The following aspect should compile successfully: import java.io.IOException; public aspect SoftenAdvice { declare soft: IOException: within SoftenAdvice &amp;amp;&amp;amp; adviceexecution ; before : execution * main .. { throw new IOException "test" ; } public static void main String args[] { } } But both 1.5.0M2 and HEAD from 2 days ago give this output: C:\devel\scratch\err&amp;gt;ajc SoftenAdvice.aj C:\devel\scratch\err\SoftenAdvice.aj:7 [error] Unhandled exception type IOExcept ion throw new IOException "test" ; ^^^^^^^^^^^^^^^^^^^^ 1 error However if you change the declare soft to be the following, it correctly softens at the advice execution join point. declare soft: IOException: within SoftenAdvice &amp;amp;&amp;amp; !withincode * * .. ;</description>
    <commit commitTime="2005-11-22 09:28:09" id="554e733"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseShadow.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="117189" reportTime="2005-11-19 13:05:00">
    <summary>Contribution: reduce overhead when no aspects define</summary>
    <description>This patch to the ClassLoaderWeavingAdaptor adds two optimizations when enabled is false for the adaptor: it immediately returns false for accept and it also avoids the overhead of constructing a weaver or world. It also contains commented out code that was letting me improve performance by loading reflective proxies instead of creating BCEL objects for a resolution loader which is currently broken since reflective proxies now require a ReflectionWorld...</description>
    <commit commitTime="2005-11-23 09:01:53" id="a5ac5af"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="117681" reportTime="2005-11-23 04:27:00">
    <summary>VerifyError when using annotations to define inter-type annotation</summary>
    <description>Using Sun JDK1.5.0_04 Audit.java public interface Audit { public String getLastUpdatedBy ; public void setLastUpdatedBy String un ; } AuditImpl.java public class AuditImpl implements Audit { private String lastUpdatedBy; public String getLastUpdatedBy { return lastUpdatedBy; } public void setLastUpdatedBy String un { lastUpdatedBy = un; } } TestAspect.java import org.aspectj.lang.annotation.*; Test.java @Aspect public class TestAspect { @DeclareParents "Test" public static Audit introduced = new AuditImpl ; } public class Test { public static void main String[] args { Test t = new Test ; Audit a = Audit t; a.setLastUpdatedBy "username" ; System.out.println "Username ="+a.getLastUpdatedBy ; } } files.lst Audit.java AuditImpl.java TestAspect.java Test.java Compiled using the following command d:\aspectj1.5\bin\ajc -classpath "d:\aspectj1.5\lib\aspectjrt.jar" -argfi le files.lst -1.5 d:\aspectj1.5\bin\aj5 Test Exception in thread "main" java.lang.VerifyError: class: Test, method: setLastUpdatedBy signature: Ljava/lang/String; V Incompatible argument to function d:\aspectj1.5\bin\aj5 -noverify Test Username=</description>
    <commit commitTime="2005-11-23 12:54:02" id="11ab99f"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="116254" reportTime="2005-11-14 11:16:00">
    <summary>AjTypeSystem interface cannot be used in LTW environment</summary>
    <description>This API uses unqualified calls to Class.forName . See bug 116229 for more details. The attached patches better simulate a run-time environment and a fix that uses the class loader associated with the type provided by the user.</description>
    <commit commitTime="2005-11-23 13:14:22" id="81e6b60"/>
    <fixedFiles>
      <file>aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/DeclareSoftImpl.java</file>
      <file>aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/StringToType.java</file>
    </fixedFiles>
  </bug>
  <bug id="116899" reportTime="2005-11-17 12:31:00">
    <summary>Using -verbose in aop.xml does not yield info messages</summary>
    <description>The interpretation of the -verbose option for LTW is not consistent with other uses in AspectJ e.g. ajc, iajc. It should allow info as well as warining and error messages to be output. The option parser and testcase need to be updated.</description>
    <commit commitTime="2005-11-24 09:27:06" id="76d7e83"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Options.java</file>
      <file>tests/java5/ataspectj/ataspectj/ltwlog/MessageHolder.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="117209" reportTime="2005-11-20 01:07:00">
    <summary>None</summary>
    <description>AspectJ compiler version: 1.5M5 AJDT plugin version: 1.3.0 This is the same error as reported by Bug#69706 , even the bug is resolved I'm still experiencing problem by using the classes attached at the bottom. // RUNTIME ERROR MESSAGE ======================== Exception in thread "main" java.lang.VerifyError: class: DefaultInterfaceImplementationRecipe, method: &amp;lt;clinit&amp;gt; signature: V Stack size too large at MyClass_ch16.main MyClass_ch16.java:15 // MyClass_ch16.java ==================== public class MyClass_ch16 { public void foo int number, String name { System.out.println "Inside foo int, String with args: " + number + ":" + name ; } public static void main String[] args { // Create an instance of MyClass MyInterface_ch16 myObject = MyInterface_ch16 new MyClass_ch16 ; // Make the call to foo myObject.bar "Russ" ; } } //MyInterface_ch16.java ======================= public interface MyInterface_ch16 { public void bar String name ; } // DefaultInterfaceImplementationRecipe.aj ========================================== public aspect DefaultInterfaceImplementationRecipe { declare parents : MyClass_ch16 implements MyInterface_ch16; // Declare the default implementation of the bar method public void MyInterface_ch16.bar String name { System.out.println "bar String called on " + this ; } }</description>
    <commit commitTime="2005-11-30 19:51:24" id="551b9ca"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/AjdeInteractionTestbed.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="118698" reportTime="2005-11-30 15:18:00">
    <summary>Not Allowing Access to Private ITD inside Nested Type</summary>
    <description>AspectJ is failing to allow access to a private ITD field from a type nested inside the aspect, which is inconsistent with Java's access rules. Here is the source. See also the follow up patch to tests that integrates it into the ajc150 test suite. public aspect prUnknown { private static interface Marker {} private class Foo implements Marker { public Foo { bar = null; // allowed listener = null; // should also be allowed this.listener = null; // so should this Marker.this.listener = null; // and this Marker this .listener = null; // and this } } private Object Marker.listener; private Object bar; }</description>
    <commit commitTime="2005-12-02 11:06:37" id="6d94d09"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeFieldBinding.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="118715" reportTime="2005-11-30 16:53:00">
    <summary>Load Time Weaving wipes out Xlint files if no Xlint values</summary>
    <description>In ClassLoaderWeavingAdaptor if weaverOption.lint is null, then a loaded Xlint properties file gets overwritten by the default Xlint properties. See attached patch to fix this problem.</description>
    <commit commitTime="2005-12-06 13:02:38" id="1e1bbb3"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
      <file>testing/newsrc/org/aspectj/testing/OutputSpec.java</file>
      <file>testing/newsrc/org/aspectj/testing/RunSpec.java</file>
      <file>testing/newsrc/org/aspectj/testing/XMLBasedAjcTestCase.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/ltw/LTWTests.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</file>
      <file>weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java</file>
    </fixedFiles>
  </bug>
  <bug id="119352" reportTime="2005-12-05 23:04:00">
    <summary>AjType.getSupertype breaks for null</summary>
    <description>I ran into this while using reflection proxies with LTW... See attached patches for these test cases and my fix: public void testObjectSupertype { AjType&amp;lt;?&amp;gt; objectSuper = AjTypeSystem.getAjType Object.class .getSupertype ; assertNull objectSuper ; } public void testInterfaceSupertype { AjType&amp;lt;?&amp;gt; serializableSuper = AjTypeSystem.getAjType Serializable.class .getSupertype ; assertNull serializableSuper ; } public AjType&amp;lt;? super T&amp;gt; getSupertype { Class&amp;lt;? super T&amp;gt; superclass = clazz.getSuperclass ; return superclass==null ? null : AjType&amp;lt;? super T&amp;gt; new AjTypeImpl superclass ; }</description>
    <commit commitTime="2005-12-06 15:39:08" id="6e8bf52"/>
    <fixedFiles>
      <file>aspectj5rt/java5-src/org/aspectj/internal/lang/reflect/AjTypeImpl.java</file>
      <file>aspectj5rt/java5-testsrc/org/aspectj/internal/lang/reflect/AjTypeTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="109614" reportTime="2005-09-15 09:57:00">
    <summary>[waiting-on-build] [iajc.task] java.lang.RuntimeException: Ranges must be updated with an enclosing instructionList</summary>
    <description>I am getting following error when compiling code using iajc ant task: [iajc.task] trouble in: [iajc.task] public class admin.modelbean.AdminUserMB extends web.FormSupport: [iajc.task] private static final org.apache.log4j.Logger log .... Ljava/lang/String; Ljava/lang/StringBuffer; [iajc.task] | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.String [iajc.task] | LDC_W "}" line 249 [iajc.task] | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.String [iajc.task] | | INVOKEVIRTUAL java.lang.StringBuffer.append Ljava/lang/String; Ljava/lang/StringBuffer; [iajc.task] | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.String [iajc.task] | method-call java.lang.String java.lang.StringBuffer.toString [iajc.task] | | INVOKEVIRTUAL java.lang.StringBuffer.toString Ljava/lang/String; line 236 [iajc.task] | method-call java.lang.String java.lang.StringBuffer.toString [iajc.task] | ARETURN [iajc.task] method-execution java.lang.String admin.modelbean.AdminUserMB.toString [iajc.task] end public String toString [iajc.task] end public class admin.modelbean.AdminUserMB [iajc.task] java.lang.RuntimeException: Ranges must be updated with an enclosing instructionList [iajc.task] at org.aspectj.weaver.bcel.Range.updateTarget Range.java:170 [iajc.task] at org.aspectj.weaver.bcel.BcelShadow.retargetFrom BcelShadow.java:235 [iajc.task] at org.aspectj.weaver.bcel.BcelShadow.deleteNewAndDup BcelShadow.java:212 [iajc.task] at org.aspectj.weaver.bcel.BcelShadow.prepareForMungers BcelShadow.java:252 [iajc.task] at org.aspectj.weaver.Shadow.implement Shadow.java:374 [iajc.task] at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:1754 [iajc.task] at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:393 [iajc.task] at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:96 [iajc.task] at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1372 [iajc.task] at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1337 [iajc.task] at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1114 [iajc.task] at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1001 [iajc.task] at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:286 [iajc.task] at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:165 [iajc.task] at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 [iajc.task] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 [iajc.task] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:728 [iajc.task] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:206 [iajc.task] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:140 [iajc.task] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 [iajc.task] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 [iajc.task] at org.aspectj.tools.ajc.Main.run Main.java:324 [iajc.task] at org.aspectj.tools.ajc.Main.runMain Main.java:238 [iajc.task] at org.aspectj.tools.ajc.Main.main Main.java:82 [iajc.task] ABORT [iajc.task] [iajc.task] Exception thrown from AspectJ 1.5.0_M3a [iajc.task] This might be logged as a bug already -- find current bugs at [iajc.task] http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler [iajc.task] Bugs for exceptions thrown have titles File:line from the top stack, [iajc.task] e.g., "SomeFile.java:243" [iajc.task] If you don't find the exception below in a bug, please add a new bug [iajc.task] at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ [iajc.task] To make the bug a priority, please include a test program [iajc.task] that can reproduce this exception. [iajc.task] Ranges must be updated with an enclosing instructionList [iajc.task] Ranges must be updated with an enclosing instructionList [iajc.task] java.lang.RuntimeException: Ranges must be updated with an enclosing instructionList [iajc.task] at org.aspectj.weaver.bcel.Range.updateTarget Range.java:170 [iajc.task] at org.aspectj.weaver.bcel.BcelShadow.retargetFrom BcelShadow.java:235 [iajc.task] at org.aspectj.weaver.bcel.BcelShadow.deleteNewAndDup BcelShadow.java:212 [iajc.task] at org.aspectj.weaver.bcel.BcelShadow.prepareForMungers BcelShadow.java:252 [iajc.task] at org.aspectj.weaver.Shadow.implement Shadow.java:374 [iajc.task] at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:1754 [iajc.task] at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:393 [iajc.task] at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:96 [iajc.task] at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1372 [iajc.task] at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1337 [iajc.task] at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1114 [iajc.task] at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1001 [iajc.task] at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:286 [iajc.task] at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:165 [iajc.task] at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 [iajc.task] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 [iajc.task] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:728 [iajc.task] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:206 [iajc.task] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:140 [iajc.task] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 [iajc.task] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 [iajc.task] at org.aspectj.tools.ajc.Main.run Main.java:324 [iajc.task] at org.aspectj.tools.ajc.Main.runMain Main.java:238 [iajc.task] at org.aspectj.tools.ajc.Main.main Main.java:82 [iajc.task] 1 fail|abort BUILD FAILED /home/sbhatti/workspace/devint/build.xml:100: The following error occurred while executing this line: /home/sbhatti/workspace/devint/build.xml:164: The following error occurred while executing this line: /home/sbhatti/workspace/devint/modules/novo/build.xml:59: The following error occurred while executing this line: /opt/sbhatti/dev/current/novo/build.xml:326: failure[-1] running ajc</description>
    <commit commitTime="2005-12-08 11:43:16" id="94159f9"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="120351" reportTime="2005-12-12 05:17:00">
    <summary>cflowbelow issue when binding, in @AJ</summary>
    <description>Sam wrote: &amp;gt; I'm trying something and it works from .aj but not from .java. When &amp;gt; I try it with annotation based stuff I get a nasty exception: &amp;gt; &amp;gt; [iajc] trouble in: &amp;gt; [iajc] public class gsc.repository.IdentifierTest extends &amp;gt; junit.framework.TestCase: &amp;gt; [iajc] private static final org.aspectj.lang.JoinPoint &amp;gt; $StaticPart ajc$tjp_0 &amp;gt; [iajc] public void &amp;lt;init&amp;gt; : &amp;gt; [iajc] ALOAD_0 &amp;gt; [iajc] INVOKESPECIAL &amp;gt; junit.framework.TestCase.&amp;lt;init&amp;gt; V &amp;gt; [iajc] constructor-execution void &amp;gt; gsc.repository.IdentifierTest.&amp;lt;init&amp;gt; &amp;gt; [iajc] | RETURN &amp;gt; [iajc] constructor-execution void &amp;gt; gsc.repository.IdentifierTest.&amp;lt;init&amp;gt; &amp;gt; [iajc] end public void &amp;lt;init&amp;gt; &amp;gt; &amp;gt; [iajc] public void testIdentifierExactMatch throws &amp;gt; java.security.NoSuchAlgorithmException, java.io.IOException: &amp;gt; [iajc] method-execution void &amp;gt; gsc.repository.IdentifierTest.testIdentifierExactMatch &amp;gt; [iajc] | NEW java.io.File &amp;gt; [iajc] | DUP &amp;gt; [iajc] | LDC "test-repository/ant-test/jars/ &amp;gt; ant-1.6.2.jar" &amp;gt; [iajc] | INVOKESPECIAL java.io.File.&amp;lt;init&amp;gt; &amp;gt; Ljava/lang/String; V &amp;gt; [iajc] | INVOKESTATIC &amp;gt; gsc.repository.Identifier.interrogate Ljava/io/File; Ljava/util/List; &amp;gt; [iajc] | ASTORE_1 &amp;gt; [iajc] | ALOAD_1 &amp;gt; [iajc] | ICONST_0 &amp;gt; [iajc] | INVOKEINTERFACE java.util.List.get &amp;gt; I Ljava/lang/Object; &amp;gt; [iajc] | CHECKCAST gsc.repository.ejb.Jar &amp;gt; [iajc] | ASTORE_2 &amp;gt; [iajc] | ALOAD_2 &amp;gt; [iajc] | INVOKEVIRTUAL &amp;gt; gsc.repository.ejb.Jar.getVersion Ljava/lang/String; &amp;gt; [iajc] | LDC "1.6.2" &amp;gt; [iajc] | INVOKESTATIC &amp;gt; gsc.repository.IdentifierTest.assertEquals Ljava/lang/String;Ljava/ &amp;gt; lang/String; V &amp;gt; [iajc] | RETURN &amp;gt; [iajc] method-execution void &amp;gt; gsc.repository.IdentifierTest.testIdentifierExactMatch &amp;gt; [iajc] end public void testIdentifierExactMatch throws &amp;gt; java.security.NoSuchAlgorithmException, java.io.IOException &amp;gt; &amp;gt; [iajc] public void testIdentifierExactSameClasses throws &amp;gt; java.security.NoSuchAlgorithmException, java.io.IOException: &amp;gt; [iajc] method-execution void &amp;gt; gsc.repository.IdentifierTest.testIdentifierExactSameClasses &amp;gt; [iajc] | NEW java.io.File &amp;gt; [iajc] | DUP &amp;gt; [iajc] | LDC "test-jars/ant-1.6.2-test.jar" &amp;gt; [iajc] | INVOKESPECIAL java.io.File.&amp;lt;init&amp;gt; &amp;gt; Ljava/lang/String; V &amp;gt; [iajc] | INVOKESTATIC &amp;gt; gsc.repository.Identifier.interrogate Ljava/io/File; Ljava/util/List; &amp;gt; [iajc] | ASTORE_1 &amp;gt; [iajc] | ALOAD_1 &amp;gt; [iajc] | ICONST_0 &amp;gt; [iajc] | INVOKEINTERFACE java.util.List.get &amp;gt; I Ljava/lang/Object; &amp;gt; [iajc] | CHECKCAST gsc.repository.ejb.Jar &amp;gt; [iajc] | ASTORE_2 &amp;gt; [iajc] | ALOAD_2 &amp;gt; [iajc] | INVOKEVIRTUAL &amp;gt; gsc.repository.ejb.Jar.getVersion Ljava/lang/String; &amp;gt; [iajc] | LDC "1.6.2" &amp;gt; [iajc] | INVOKESTATIC &amp;gt; gsc.repository.IdentifierTest.assertEquals Ljava/lang/String;Ljava/ &amp;gt; lang/String; V &amp;gt; [iajc] | RETURN &amp;gt; [iajc] method-execution void &amp;gt; gsc.repository.IdentifierTest.testIdentifierExactSameClasses &amp;gt; [iajc] end public void testIdentifierExactSameClasses &amp;gt; throws java.security.NoSuchAlgorithmException, java.io.IOException &amp;gt; &amp;gt; [iajc] public void testIdentifierMixedUp throws &amp;gt; java.security.NoSuchAlgorithmException, java.io.IOException: &amp;gt; [iajc] method-execution void &amp;gt; gsc.repository.IdentifierTest.testIdentifierMixedUp &amp;gt; [iajc] | NEW java.io.File &amp;gt; [iajc] | DUP &amp;gt; [iajc] | LDC "test-jars/groovy-1.0-beta-4-and- &amp;gt; commons-logging-1.0.2.jar" &amp;gt; [iajc] | INVOKESPECIAL java.io.File.&amp;lt;init&amp;gt; &amp;gt; Ljava/lang/String; V &amp;gt; [iajc] | INVOKESTATIC &amp;gt; gsc.repository.Identifier.interrogate Ljava/io/File; Ljava/util/List; &amp;gt; [iajc] | ASTORE_1 &amp;gt; [iajc] | ALOAD_1 &amp;gt; [iajc] | INVOKEINTERFACE java.util.List.size I &amp;gt; [iajc] | ICONST_2 &amp;gt; [iajc] | INVOKESTATIC &amp;gt; gsc.repository.IdentifierTest.assertEquals II V &amp;gt; [iajc] | ICONST_2 &amp;gt; [iajc] | ISTORE_2 &amp;gt; [iajc] | ALOAD_1 &amp;gt; [iajc] | INVOKEINTERFACE &amp;gt; java.util.List.iterator Ljava/util/Iterator; &amp;gt; [iajc] | ASTORE_3 &amp;gt; [iajc] | L0: ALOAD_3 &amp;gt; [iajc] | INVOKEINTERFACE &amp;gt; java.util.Iterator.hasNext Z &amp;gt; [iajc] | IFEQ L3 &amp;gt; [iajc] | ALOAD_3 &amp;gt; [iajc] | INVOKEINTERFACE &amp;gt; java.util.Iterator.next Ljava/lang/Object; &amp;gt; [iajc] | CHECKCAST gsc.repository.ejb.Jar &amp;gt; [iajc] | ASTORE 4 &amp;gt; [iajc] | ALOAD 4 &amp;gt; [iajc] | INVOKEVIRTUAL &amp;gt; gsc.repository.ejb.Jar.getGroupid Ljava/lang/String; &amp;gt; [iajc] | LDC "groovy" &amp;gt; [iajc] | INVOKEVIRTUAL &amp;gt; java.lang.String.equals Ljava/lang/Object; Z &amp;gt; [iajc] | IFEQ L1 &amp;gt; [iajc] | ALOAD 4 &amp;gt; [iajc] | INVOKEVIRTUAL &amp;gt; gsc.repository.ejb.Jar.getGroupid Ljava/lang/String; &amp;gt; [iajc] | LDC "groovy" &amp;gt; [iajc] | INVOKESTATIC &amp;gt; gsc.repository.IdentifierTest.assertEquals Ljava/lang/String;Ljava/ &amp;gt; lang/String; V &amp;gt; [iajc] | ALOAD 4 &amp;gt; [iajc] | INVOKEVIRTUAL &amp;gt; gsc.repository.ejb.Jar.getArtifactid Ljava/lang/String; &amp;gt; [iajc] | LDC "groovy" &amp;gt; [iajc] | INVOKESTATIC &amp;gt; gsc.repository.IdentifierTest.assertEquals Ljava/lang/String;Ljava/ &amp;gt; lang/String; V &amp;gt; [iajc] | ALOAD 4 &amp;gt; [iajc] | INVOKEVIRTUAL &amp;gt; gsc.repository.ejb.Jar.getVersion Ljava/lang/String; &amp;gt; [iajc] | LDC "1.0-beta-4" &amp;gt; [iajc] | INVOKESTATIC &amp;gt; gsc.repository.IdentifierTest.assertEquals Ljava/lang/String;Ljava/ &amp;gt; lang/String; V &amp;gt; [iajc] | IINC 2 -1 &amp;gt; [iajc] | GOTO L2 &amp;gt; [iajc] | L1: ALOAD 4 &amp;gt; [iajc] | INVOKEVIRTUAL &amp;gt; gsc.repository.ejb.Jar.getGroupid Ljava/lang/String; &amp;gt; [iajc] | LDC "commons-logging" &amp;gt; [iajc] | INVOKESTATIC &amp;gt; gsc.repository.IdentifierTest.assertEquals Ljava/lang/String;Ljava/ &amp;gt; lang/String; V &amp;gt; [iajc] | ALOAD 4 &amp;gt; [iajc] | INVOKEVIRTUAL &amp;gt; gsc.repository.ejb.Jar.getArtifactid Ljava/lang/String; &amp;gt; [iajc] | LDC "commons-logging" &amp;gt; [iajc] | INVOKESTATIC &amp;gt; gsc.repository.IdentifierTest.assertEquals Ljava/lang/String;Ljava/ &amp;gt; lang/String; V &amp;gt; [iajc] | ALOAD 4 &amp;gt; [iajc] | INVOKEVIRTUAL &amp;gt; gsc.repository.ejb.Jar.getVersion Ljava/lang/String; &amp;gt; [iajc] | LDC "1.0.2" &amp;gt; [iajc] | INVOKESTATIC &amp;gt; gsc.repository.IdentifierTest.assertEquals Ljava/lang/String;Ljava/ &amp;gt; lang/String; V &amp;gt; [iajc] | IINC 2 -1 &amp;gt; [iajc] | L2: GOTO L0 &amp;gt; [iajc] | L3: ILOAD_2 &amp;gt; [iajc] | ICONST_0 &amp;gt; [iajc] | INVOKESTATIC &amp;gt; gsc.repository.IdentifierTest.assertEquals II V &amp;gt; [iajc] | RETURN &amp;gt; [iajc] method-execution void &amp;gt; gsc.repository.IdentifierTest.testIdentifierMixedUp &amp;gt; [iajc] end public void testIdentifierMixedUp throws &amp;gt; java.security.NoSuchAlgorithmException, java.io.IOException &amp;gt; &amp;gt; [iajc] end public class gsc.repository.IdentifierTest &amp;gt; &amp;gt; [iajc] &amp;gt; [iajc] Exception thrown from AspectJ 1.5.0M5 &amp;gt; &amp;gt; [iajc] This might be logged as a bug already -- find current &amp;gt; bugs at &amp;gt; [iajc] http://bugs.eclipse.org/bugs/buglist.cgi ? &amp;gt; product=AspectJ&amp;amp;component=Compiler &amp;gt; &amp;gt; [iajc] Bugs for exceptions thrown have titles File:line from &amp;gt; the top stack, &amp;gt; [iajc] e.g., "SomeFile.java:243" &amp;gt; &amp;gt; [iajc] If you don't find the exception below in a bug, please &amp;gt; add a new bug &amp;gt; [iajc] at http://bugs.eclipse.org/bugs/enter_bug.cgi ? &amp;gt; product=AspectJ &amp;gt; [iajc] To make the bug a priority, please include a test program &amp;gt; [iajc] that can reproduce this exception. &amp;gt; [iajc] Incorrectly attempting counter operation on stacked cflow &amp;gt; &amp;gt; [iajc] when implementing on shadow method-execution void &amp;gt; gsc.repository.IdentifierTest.testIdentifierExactMatch &amp;gt; [iajc] when weaving type gsc.repository.IdentifierTest &amp;gt; [iajc] when weaving classes &amp;gt; [iajc] when weaving &amp;gt; [iajc] when batch building with classpath: /Users/sam/Library/ &amp;gt; Java/Extensions/jsk-policy.jar:/System/Library/Java/Extensions/ &amp;gt; CoreAudio.jar:/System/Library/Java/Extensions/dns_sd.jar:/System/ &amp;gt; Library/Java/Extensions/j3daudio.jar:/System/Library/Java/Extensions/ &amp;gt; j3dcore.jar:/System/Library/Java/Extensions/j3dutils.jar:/System/ &amp;gt; Library/Java/Extensions/jai_codec.jar:/System/Library/Java/Extensions/ &amp;gt; jai_core.jar:/System/Library/Java/Extensions/mlibwrapper_jai.jar:/ &amp;gt; System/Library/Java/Extensions/MRJToolkit.jar:/System/Library/Java/ &amp;gt; Extensions/QTJava.zip:/System/Library/Java/Extensions/QTJSupport.jar:/ &amp;gt; System/Library/Java/Extensions/vecmath.jar:/System/Library/Frameworks/ &amp;gt; JavaVM.framework/Versions/1.5.0/Home/lib/ext/apple_provider.jar:/ &amp;gt; System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Home/lib/ &amp;gt; ext/dnsns.jar:/System/Library/Frameworks/JavaVM.framework/Versions/ &amp;gt; 1.5.0/Home/lib/ext/localedata.jar:/System/Library/Frameworks/ &amp;gt; JavaVM.framework/Versions/1.5.0/Home/lib/ext/sunjce_provider.jar:/ &amp;gt; Users/sam/gs/squire/jardb/.aspectj-lib/aspectjrt-1.5.0_M5.jar:/Users/ &amp;gt; sam/gs/squire/jardb/.aspectj-lib/aspectjtools-1.5.0_M5.jar:/Users/sam/ &amp;gt; gs/squire/jardb/target/classes:/Users/sam/gs/squire/jardb/target/test- &amp;gt; classes:/Users/sam/gs/squire/jardb/.lib/antlr-2.7.5.jar:/Users/sam/gs/ &amp;gt; squire/jardb/.lib/asm-1.5.3.jar:/Users/sam/gs/squire/jardb/.lib/ &amp;gt; cglib-2.1_2.jar:/Users/sam/gs/squire/jardb/.lib/commons- &amp;gt; collections-2.1.1.jar:/Users/sam/gs/squire/jardb/.lib/commons- &amp;gt; logging-1.0.4.jar:/Users/sam/gs/squire/jardb/.lib/dom4j-1.6.jar:/ &amp;gt; Users/sam/gs/squire/jardb/.lib/ehcache-1.1.jar:/Users/sam/gs/squire/ &amp;gt; jardb/.lib/ejb3-persistence-pr.jar:/Users/sam/gs/squire/jardb/.lib/ &amp;gt; emma-2.0.latest.jar:/Users/sam/gs/squire/jardb/.lib/ &amp;gt; emma_ant-2.0.latest.jar:/Users/sam/gs/squire/jardb/.lib/ &amp;gt; hibernate-3.1alpha1.jar:/Users/sam/gs/squire/jardb/.lib/hibernate- &amp;gt; annotations-3.1beta3.jar:/Users/sam/gs/squire/jardb/.lib/hibernate- &amp;gt; entitymanager-3.1beta1.jar:/Users/sam/gs/squire/jardb/.lib/ &amp;gt; jta-1.0.jar:/Users/sam/gs/squire/jardb/.lib/junit-3.8.1.jar:/Users/ &amp;gt; sam/gs/squire/jardb/.lib/postgresql-7.4.1-jdbc3.jar:/Users/sam/gs/ &amp;gt; squire/jardb/.lib/svn-javahl-1.2.0.jar:/Users/sam/gs/squire/jardb/lib/ &amp;gt; testng-4.2-jdk15.jar:/Users/sam/gs/squire/jardb/target/aspects.jar: &amp;gt; [iajc] Incorrectly attempting counter operation on stacked cflow &amp;gt; [iajc] java.lang.RuntimeException: Incorrectly attempting &amp;gt; counter operation on stacked cflow &amp;gt; [iajc] at org.aspectj.weaver.bcel.BcelShadow.weaveCflowEntry &amp;gt; BcelShadow.java:1890 &amp;gt; [iajc] at org.aspectj.weaver.bcel.BcelAdvice.implementOn &amp;gt; BcelAdvice.java:231 &amp;gt; [iajc] at org.aspectj.weaver.Shadow.implementMungers &amp;gt; Shadow.java:514 &amp;gt; [iajc] at org.aspectj.weaver.Shadow.implement Shadow.java:391 &amp;gt; [iajc] at org.aspectj.weaver.bcel.BcelClassWeaver.implement &amp;gt; BcelClassWeaver.java:2142 &amp;gt; [iajc] at org.aspectj.weaver.bcel.BcelClassWeaver.weave &amp;gt; BcelClassWeaver.java:467 &amp;gt; [iajc] at org.aspectj.weaver.bcel.BcelClassWeaver.weave &amp;gt; BcelClassWeaver.java:102 &amp;gt; [iajc] at org.aspectj.weaver.bcel.BcelWeaver.weave &amp;gt; BcelWeaver.java:1534 &amp;gt; [iajc] at &amp;gt; org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java: &amp;gt; 1485 &amp;gt; [iajc] at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify &amp;gt; BcelWeaver.java:1266 &amp;gt; [iajc] at org.aspectj.weaver.bcel.BcelWeaver.weave &amp;gt; BcelWeaver.java:1088 &amp;gt; [iajc] at &amp;gt; org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave &amp;gt; AjCompilerAdapter.java:300 &amp;gt; [iajc] at &amp;gt; org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling &amp;gt; AjCompilerAdapter.java:178 &amp;gt; [iajc] at &amp;gt; org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning &amp;gt; $org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 &amp;gt; CompilerAdapter.aj:70 &amp;gt; [iajc] at &amp;gt; org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile &amp;gt; Compiler.java:367 &amp;gt; [iajc] at &amp;gt; org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation &amp;gt; AjBuildManager.java:809 &amp;gt; [iajc] at &amp;gt; org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild &amp;gt; AjBuildManager.java:230 &amp;gt; [iajc] at &amp;gt; org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild &amp;gt; AjBuildManager.java:156 &amp;gt; [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand &amp;gt; AjdtCommand.java:112 &amp;gt; [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand &amp;gt; AjdtCommand.java:60 &amp;gt; [iajc] at org.aspectj.tools.ajc.Main.run Main.java:326 &amp;gt; [iajc] at org.aspectj.tools.ajc.Main.runMain Main.java:240 &amp;gt; [iajc] at &amp;gt; org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM AjcTask.java: &amp;gt; 1210 &amp;gt; [iajc] at org.aspectj.tools.ant.taskdefs.AjcTask.execute &amp;gt; AjcTask.java:1001 &amp;gt; [iajc] at org.apache.tools.ant.UnknownElement.execute &amp;gt; UnknownElement.java:275 &amp;gt; [iajc] at org.apache.tools.ant.Task.perform Task.java:364 &amp;gt; [iajc] at org.apache.tools.ant.taskdefs.Sequential.execute &amp;gt; Sequential.java:64 &amp;gt; [iajc] at org.apache.tools.ant.UnknownElement.execute &amp;gt; UnknownElement.java:275 &amp;gt; [iajc] at org.apache.tools.ant.Task.perform Task.java:364 &amp;gt; [iajc] at &amp;gt; org.apache.tools.ant.taskdefs.MacroInstance.execute &amp;gt; MacroInstance.java:378 &amp;gt; [iajc] at org.apache.tools.ant.UnknownElement.execute &amp;gt; UnknownElement.java:275 &amp;gt; [iajc] at org.apache.tools.ant.Task.perform Task.java:364 &amp;gt; [iajc] at org.apache.tools.ant.Target.execute Target.java:341 &amp;gt; [iajc] at org.apache.tools.ant.Target.performTasks &amp;gt; Target.java:369 &amp;gt; [iajc] at org.apache.tools.ant.Project.executeSortedTargets &amp;gt; Project.java:1216 &amp;gt; [iajc] at org.apache.tools.ant.Project.executeTarget &amp;gt; Project.java:1185 &amp;gt; [iajc] at &amp;gt; org.apache.tools.ant.helper.DefaultExecutor.executeTargets &amp;gt; DefaultExecutor.java:40 &amp;gt; [iajc] at org.apache.tools.ant.Project.executeTargets &amp;gt; Project.java:1068 &amp;gt; [iajc] at org.apache.tools.ant.Main.runBuild Main.java:668 &amp;gt; [iajc] at org.apache.tools.ant.Main.startAnt Main.java:187 &amp;gt; [iajc] at org.apache.tools.ant.launch.Launcher.run &amp;gt; Launcher.java:246 &amp;gt; [iajc] at org.apache.tools.ant.launch.Launcher.main &amp;gt; Launcher.java:67 &amp;gt; &amp;gt; &amp;gt; package gsc.aspects.testing; &amp;gt; &amp;gt; import junit.framework.*; &amp;gt; import java.io.*; &amp;gt; import java.util.*; &amp;gt; &amp;gt; import org.aspectj.lang.annotation.Pointcut; &amp;gt; import org.aspectj.lang.annotation.Before; &amp;gt; import org.aspectj.lang.annotation.Aspect; &amp;gt; import org.aspectj.lang.annotation.After; &amp;gt; import org.aspectj.lang.JoinPoint; &amp;gt; &amp;gt; @Aspect &amp;gt; public class TestMethodMapperAnnotations { &amp;gt; &amp;gt; @Pointcut "this testCase &amp;amp;&amp;amp; this TestCase &amp;amp;&amp;amp; execution void &amp;gt; test* " &amp;gt; public void inTestClass TestCase testCase { &amp;gt; } &amp;gt; &amp;gt; private Map&amp;lt;String, Map&amp;lt;String, Integer&amp;gt;&amp;gt; coverage; &amp;gt; &amp;gt; @Before "cflowbelow inTestClass testCase &amp;amp;&amp;amp; execution * * .. " &amp;gt; public void beforeMethodExecution JoinPoint thisJoinPoint, &amp;gt; TestCase testCase { &amp;gt; String testname = testCase.getClass .getName ; &amp;gt; String methodSignature = thisJoinPoint.getStaticPart &amp;gt; .getSignature .toString ; &amp;gt; Map&amp;lt;String, Integer&amp;gt; tests = coverage.get methodSignature ; &amp;gt; if tests == null { &amp;gt; tests = new HashMap&amp;lt;String, Integer&amp;gt; ; &amp;gt; coverage.put methodSignature, tests ; &amp;gt; } &amp;gt; Integer count = tests.get testname ; &amp;gt; if count == null { &amp;gt; count = 1; &amp;gt; } else { &amp;gt; count++; &amp;gt; } &amp;gt; tests.put testname, count ; &amp;gt; } &amp;gt; &amp;gt; @Before "inTestClass testCase " &amp;gt; public void beforeExecutingTestMethod TestCase testCase { &amp;gt; try { &amp;gt; File file = new File "results.ser" ; &amp;gt; if file.exists { &amp;gt; ObjectInputStream ois = new ObjectInputStream new &amp;gt; FileInputStream file ; &amp;gt; coverage = Map&amp;lt;String, Map&amp;lt;String, Integer&amp;gt;&amp;gt; &amp;gt; ois.readObject ; &amp;gt; ois.close ; &amp;gt; } else { &amp;gt; coverage = new HashMap&amp;lt;String, Map&amp;lt;String, Integer&amp;gt;&amp;gt; ; &amp;gt; } &amp;gt; } catch Exception e { &amp;gt; e.printStackTrace ; &amp;gt; } &amp;gt; } &amp;gt; &amp;gt; @After "inTestClass testCase " &amp;gt; public void afterExecutingTestMethod TestCase testCase { &amp;gt; try { &amp;gt; File file = new File "results.ser" ; &amp;gt; ObjectOutputStream oos = new ObjectOutputStream new &amp;gt; FileOutputStream file ; &amp;gt; oos.writeObject coverage ; &amp;gt; oos.close ; &amp;gt; } catch Exception e { &amp;gt; e.printStackTrace ; &amp;gt; } &amp;gt; } &amp;gt; &amp;gt; } &amp;gt; &amp;gt; vs. &amp;gt; &amp;gt; package gsc.aspects.testing; &amp;gt; &amp;gt; import junit.framework.*; &amp;gt; import java.io.*; &amp;gt; import java.util.*; &amp;gt; &amp;gt; public aspect TestMethodMapper { &amp;gt; &amp;gt; pointcut inTestClass TestCase testCase : this testCase &amp;amp;&amp;amp; this &amp;gt; TestCase &amp;amp;&amp;amp; execution void test* ; &amp;gt; private Map&amp;lt;String, Map&amp;lt;String, Integer&amp;gt;&amp;gt; coverage; &amp;gt; &amp;gt; before TestCase testCase : cflowbelow inTestClass testCase &amp;amp;&amp;amp; &amp;gt; execution * * .. { &amp;gt; String testname = testCase.getClass .getName ; &amp;gt; String methodSignature = thisJoinPointStaticPart.getSignature &amp;gt; .toString ; &amp;gt; Map&amp;lt;String, Integer&amp;gt; tests = coverage.get methodSignature ; &amp;gt; if tests == null { &amp;gt; tests = new HashMap&amp;lt;String, Integer&amp;gt; ; &amp;gt; coverage.put methodSignature, tests ; &amp;gt; } &amp;gt; Integer count = tests.get testname ; &amp;gt; if count == null { &amp;gt; count = 1; &amp;gt; } else { &amp;gt; count++; &amp;gt; } &amp;gt; tests.put testname, count ; &amp;gt; } &amp;gt; &amp;gt; before TestCase testCase : inTestClass testCase { &amp;gt; try { &amp;gt; File file = new File "results.ser" ; &amp;gt; if file.exists { &amp;gt; ObjectInputStream ois = new ObjectInputStream new FileInputStream &amp;gt; file ; &amp;gt; coverage = Map&amp;lt;String, Map&amp;lt;String, Integer&amp;gt;&amp;gt; ois.readObject ; &amp;gt; ois.close ; &amp;gt; } else { &amp;gt; coverage = new HashMap&amp;lt;String, Map&amp;lt;String, Integer&amp;gt;&amp;gt; ; &amp;gt; } &amp;gt; } catch Exception e { &amp;gt; e.printStackTrace ; &amp;gt; } &amp;gt; } &amp;gt; &amp;gt; after TestCase testCase : inTestClass testCase { &amp;gt; try { &amp;gt; File file = new File "results.ser" ; &amp;gt; ObjectOutputStream oos = new ObjectOutputStream new &amp;gt; FileOutputStream file ; &amp;gt; oos.writeObject coverage ; &amp;gt; oos.close ; &amp;gt; } catch Exception e { &amp;gt; e.printStackTrace ; &amp;gt; } &amp;gt; } &amp;gt; &amp;gt; } &amp;gt; &amp;gt; &amp;gt;</description>
    <commit commitTime="2005-12-12 10:48:46" id="979124d"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="120363" reportTime="2005-12-12 08:42:00">
    <summary>LTW weaver include and exclude does not behave correctly</summary>
    <description>According to the specification http://www.eclipse.org/aspectj/doc/next/adk15notebook/ltw-configuration.html "The set of types to be woven are those types matched by at least one weaver include element and not matched by any weaver exclude element." However if an includ elemement can be fast matched e.g. "com.foo..*" any exclude elements are ignored see bug 117854 . There is no explicit test in the harness for this feature.</description>
    <commit commitTime="2005-12-12 15:42:19" id="9edb4b6"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/ataspectj/AtAjLTWTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="120521" reportTime="2005-12-13 03:18:00">
    <summary>named pointcut not resolved in pertarget pointcut</summary>
    <description>Get incorrect error "can't find pointcut ..." when declaring pertarget pointcut using pointcut declared outside the aspect. True of HEAD right now. Not true of pointcuts declared inside the aspect or issingleton aspects. I thought this was reported and fixed, but I couldn't find the bug. Sorry if it is a duplicate. ------------------------------------------------- package bugs; public class PerTargetSubaspectError { public static void main String[] args { C.run ; } static class C { static void run {} } pointcut doit : execution void C.run ; // no error if not pertarget static aspect CPT pertarget pc { // no error if doit defined in CPT protected pointcut pc : doit ; // unexpected CE before : doit {} // no CE } }</description>
    <commit commitTime="2005-12-13 09:25:38" id="ae500c6"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="120543" reportTime="2005-12-13 06:40:00">
    <summary>Issue version message during load-time weaving</summary>
    <description>It would be very useful to know exactly which version of the weaver is being used for LTW. An informational message could be issued when each WeavingAdaptor instance is created it is possible to have multiple versions of AspectJ in a system . This message could be similar to the that issued by "ajc -version".</description>
    <commit commitTime="2005-12-13 14:03:53" id="9d32b76"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="120743" reportTime="2005-12-13 16:15:50">
    <summary>Improvements to define new server wizard page</summary>
    <description>On the panel where the server location and button to install the server is shown, a couple of usability improvements could be made... (1) If I choose browse and choose a location. Then hit install server, the fs browser should not be brought back up since I have already hitten browse and selected a location. (2) If (1) and the location chosen contains no server, and the server is downlodable, classpath validation errors should not show, but a message stating that no server is found but can be installed by selecting the install server button.</description>
    <commit commitTime="2005-12-14 05:40:00" id="588e7b9"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Aj.java</file>
    </fixedFiles>
  </bug>
  <bug id="58520" reportTime="2004-04-14 13:29:00">
    <summary>ajdoc doesn't navigate to target details in some cases</summary>
    <description>When a file is advised, javadoc uses the following naming convention for setting its "A NAME": convertCheckedException java.lang.Throwable However, ajdoc uses the unqualified name for the argument, resuting in the follwing in-file anchor link: &amp;lt;class-name&amp;gt;.html#convertCheckedException Throwable   Which fails to navigate to the anchor within the file, although it does always go to the right file.</description>
    <commit commitTime="2005-12-21 10:37:43" id="bbdd496"/>
    <fixedFiles>
      <file>ajdoc/testdata/pr119453/src/pack/C.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/AjdocTests.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</file>
    </fixedFiles>
  </bug>
  <bug id="121385" reportTime="2005-12-19 05:32:00">
    <summary>around advice does not work when LTW</summary>
    <description>I defined a aop.xml and a aspect, I have already copy aspectjweaver.jar D:\work\BTM\lib\aspectjweaver.jar, and added -javaagent:D:\work\BTM\lib\aspectjweaver.jar option to the JVM in Eclipse, it works fine if there are before and after advice in aspect, but it will be wrong once I used around advice. if I use compile-time weaving, this around advice works fine. my Eclipse env: eclipse 3.0.2 + AJDT 1.2.1 RC1 release + Sun JDK 1.5.0. aspect file: import org.aspectj.lang.Signature; import org.aspectj.lang.JoinPoint; public abstract aspect World { //private Object result; pointcut greeting : execution * Hello.sayWorld .. ; Object around : greeting { System.out.println "around start!" ; Object result = proceed ; System.out.println "around end!" ; return result; } // before : greeting { // Signature signature = thisJoinPoint.getSignature ; // System.out.println "before " + signature.getName ; // } // after returning : greeting { // Signature signature = thisJoinPoint.getSignature ; // System.out.println "after " + signature.getName ; // } } aop.xml file: &amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt; &amp;lt;aspectj&amp;gt; &amp;lt;aspects&amp;gt; &amp;lt;aspect name="World"/&amp;gt; &amp;lt;concrete-aspect name="World1" extends="World"&amp;gt; &amp;lt;pointcut name="greeting" expression="execution * Hello.sayWorld .. || execution * Hello.sayHello .. "/&amp;gt; &amp;lt;/concrete-aspect&amp;gt; &amp;lt;/aspects&amp;gt; &amp;lt;weaver options="-Xreweavable -verbose -XlazyTjp -showWeaveInfo"&amp;gt; &amp;lt;include within="Hello"/&amp;gt; &amp;lt;/weaver&amp;gt; &amp;lt;/aspectj&amp;gt; around advice error message in eclipse console as below: info register aspect World info generating class 'World1' info weaving 'Hello' info weaver operating in reweavable mode. Need to verify any required types exist. abort trouble in: public class Hello extends java.lang.Object: public void &amp;lt;init&amp;gt; : ALOAD_0 // Hello this line 2 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V constructor-execution void Hello.&amp;lt;init&amp;gt; | RETURN constructor-execution void Hello.&amp;lt;init&amp;gt; end public void &amp;lt;init&amp;gt; public static void main String[] org.aspectj.weaver.MethodDeclarationLineNumber: 7:75 : INVOKESTATIC Hello.sayHello V line 9 RETURN line 10 end public static void main String[] public static void sayHello org.aspectj.weaver.MethodDeclarationLineNumber: 12:180 : end public static void sayHello public static int sayWorld org.aspectj.weaver.MethodDeclarationLineNumber: 17:268 : method-execution int Hello.sayWorld | GETSTATIC java.lang.System.out Ljava/io/PrintStream; line 18 | LDC "World" | INVOKEVIRTUAL java.io.PrintStream.println Ljava/lang/String; V | ICONST_0 line 19 | IRETURN method-execution int Hello.sayWorld end public static int sayWorld static final void sayHello_aroundBody0 : GETSTATIC java.lang.System.out Ljava/io/PrintStream; line 13 LDC "Hello" INVOKEVIRTUAL java.io.PrintStream.println Ljava/lang/String; V INVOKESTATIC Hello.sayWorld I line 14 POP RETURN line 15 end static final void sayHello_aroundBody0 end public class Hello public class Hello$AjcClosure1 extends org.aspectj.runtime.internal.AroundClosure: public void &amp;lt;init&amp;gt; Object[] : ALOAD_0 ALOAD_1 INVOKESPECIAL org.aspectj.runtime.internal.AroundClosure.&amp;lt;init&amp;gt; [Ljava/lang/Object; V RETURN end public void &amp;lt;init&amp;gt; Object[] public Object run Object[] : ALOAD_0 GETFIELD org.aspectj.runtime.internal.AroundClosure.state [Ljava/lang/Object; ASTORE_2 INVOKESTATIC Hello.sayHello_aroundBody0 V ACONST_NULL ARETURN end public Object run Object[] end public class Hello$AjcClosure1 -- NullPointerException null null java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelAdvice.getAdviceArgSetup BcelAdvice.java:457 at org.aspectj.weaver.bcel.BcelShadow.weaveAroundClosure BcelShadow.java:2685 at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:230 at org.aspectj.weaver.Shadow.implementMungers Shadow.java:588 at org.aspectj.weaver.Shadow.implement Shadow.java:405 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:2146 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:467 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:102 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1543 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1494 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1275 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1097 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:263 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:196 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:65 at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform ClassPreProcessorAgentAdapter.java:52 at sun.instrument.TransformerManager.transform TransformerManager.java:122 at sun.instrument.InstrumentationImpl.transform InstrumentationImpl.java:155 at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:620 at java.security.SecureClassLoader.defineClass SecureClassLoader.java:124 at java.net.URLClassLoader.defineClass URLClassLoader.java:260 at java.net.URLClassLoader.access$100 URLClassLoader.java:56 at java.net.URLClassLoader$1.run URLClassLoader.java:195 at java.security.AccessController.doPrivileged Native Method at java.net.URLClassLoader.findClass URLClassLoader.java:188 at java.lang.ClassLoader.loadClass ClassLoader.java:306 at sun.misc.Launcher$AppClassLoader.loadClass Launcher.java:268 at java.lang.ClassLoader.loadClass ClassLoader.java:251 at java.lang.ClassLoader.loadClassInternal ClassLoader.java:319 Message: abort trouble in: public class Hello extends java.lang.Object: public void &amp;lt;init&amp;gt; : ALOAD_0 // Hello this line 2 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V constructor-execution void Hello.&amp;lt;init&amp;gt; | RETURN constructor-execution void Hello.&amp;lt;init&amp;gt; end public void &amp;lt;init&amp;gt; public static void main String[] org.aspectj.weaver.MethodDeclarationLineNumber: 7:75 : INVOKESTATIC Hello.sayHello V line 9 RETURN line 10 end public static void main String[] public static void sayHello org.aspectj.weaver.MethodDeclarationLineNumber: 12:180 : end public static void sayHello public static int sayWorld org.aspectj.weaver.MethodDeclarationLineNumber: 17:268 : method-execution int Hello.sayWorld | GETSTATIC java.lang.System.out Ljava/io/PrintStream; line 18 | LDC "World" | INVOKEVIRTUAL java.io.PrintStream.println Ljava/lang/String; V | ICONST_0 line 19 | IRETURN method-execution int Hello.sayWorld end public static int sayWorld static final void sayHello_aroundBody0 : GETSTATIC java.lang.System.out Ljava/io/PrintStream; line 13 LDC "Hello" INVOKEVIRTUAL java.io.PrintStream.println Ljava/lang/String; V INVOKESTATIC Hello.sayWorld I line 14 POP RETURN line 15 end static final void sayHello_aroundBody0 end public class Hello public class Hello$AjcClosure1 extends org.aspectj.runtime.internal.AroundClosure: public void &amp;lt;init&amp;gt; Object[] : ALOAD_0 ALOAD_1 INVOKESPECIAL org.aspectj.runtime.internal.AroundClosure.&amp;lt;init&amp;gt; [Ljava/lang/Object; V RETURN end public void &amp;lt;init&amp;gt; Object[] public Object run Object[] : ALOAD_0 GETFIELD org.aspectj.runtime.internal.AroundClosure.state [Ljava/lang/Object; ASTORE_2 INVOKESTATIC Hello.sayHello_aroundBody0 V ACONST_NULL ARETURN end public Object run Object[] end public class Hello$AjcClosure1 -- NullPointerException null null java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelAdvice.getAdviceArgSetup BcelAdvice.java:457 at org.aspectj.weaver.bcel.BcelShadow.weaveAroundClosure BcelShadow.java:2685 at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:230 at org.aspectj.weaver.Shadow.implementMungers Shadow.java:588 at org.aspectj.weaver.Shadow.implement Shadow.java:405 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:2146 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:467 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:102 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1543 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1494 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1275 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1097 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:263 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:196 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:65 at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform ClassPreProcessorAgentAdapter.java:52 at sun.instrument.TransformerManager.transform TransformerManager.java:122 at sun.instrument.InstrumentationImpl.transform InstrumentationImpl.java:155 at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:620 at java.security.SecureClassLoader.defineClass SecureClassLoader.java:124 at java.net.URLClassLoader.defineClass URLClassLoader.java:260 at java.net.URLClassLoader.access$100 URLClassLoader.java:56 at java.net.URLClassLoader$1.run URLClassLoader.java:195 at java.security.AccessController.doPrivileged Native Method at java.net.URLClassLoader.findClass URLClassLoader.java:188 at java.lang.ClassLoader.loadClass ClassLoader.java:306 at sun.misc.Launcher$AppClassLoader.loadClass Launcher.java:268 at java.lang.ClassLoader.loadClass ClassLoader.java:251 at java.lang.ClassLoader.loadClassInternal ClassLoader.java:319 org.aspectj.bridge.AbortException: trouble in: public class Hello extends java.lang.Object: public void &amp;lt;init&amp;gt; : ALOAD_0 // Hello this line 2 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V constructor-execution void Hello.&amp;lt;init&amp;gt; | RETURN constructor-execution void Hello.&amp;lt;init&amp;gt; end public void &amp;lt;init&amp;gt; public static void main String[] org.aspectj.weaver.MethodDeclarationLineNumber: 7:75 : INVOKESTATIC Hello.sayHello V line 9 RETURN line 10 end public static void main String[] public static void sayHello org.aspectj.weaver.MethodDeclarationLineNumber: 12:180 : end public static void sayHello public static int sayWorld org.aspectj.weaver.MethodDeclarationLineNumber: 17:268 : method-execution int Hello.sayWorld | GETSTATIC java.lang.System.out Ljava/io/PrintStream; line 18 | LDC "World" | INVOKEVIRTUAL java.io.PrintStream.println Ljava/lang/String; V | ICONST_0 line 19 | IRETURN method-execution int Hello.sayWorld end public static int sayWorld static final void sayHello_aroundBody0 : GETSTATIC java.lang.System.out Ljava/io/PrintStream; line 13 LDC "Hello" INVOKEVIRTUAL java.io.PrintStream.println Ljava/lang/String; V INVOKESTATIC Hello.sayWorld I line 14 POP RETURN line 15 end static final void sayHello_aroundBody0 end public class Hello public class Hello$AjcClosure1 extends org.aspectj.runtime.internal.AroundClosure: public void &amp;lt;init&amp;gt; Object[] : ALOAD_0 ALOAD_1 INVOKESPECIAL org.aspectj.runtime.internal.AroundClosure.&amp;lt;init&amp;gt; [Ljava/lang/Object; V RETURN end public void &amp;lt;init&amp;gt; Object[] public Object run Object[] : ALOAD_0 GETFIELD org.aspectj.runtime.internal.AroundClosure.state [Ljava/lang/Object; ASTORE_2 INVOKESTATIC Hello.sayHello_aroundBody0 V ACONST_NULL ARETURN end public Object run Object[] end public class Hello$AjcClosure1 at org.aspectj.bridge.MessageWriter.handleMessage MessageWriter.java:47 at org.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHandler.handleMessage WeavingAdaptor.java:395 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1554 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1494 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1275 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1097 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:263 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:196 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:65 at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform ClassPreProcessorAgentAdapter.java:52 at sun.instrument.TransformerManager.transform TransformerManager.java:122 at sun.instrument.InstrumentationImpl.transform InstrumentationImpl.java:155 at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:620 at java.security.SecureClassLoader.defineClass SecureClassLoader.java:124 at java.net.URLClassLoader.defineClass URLClassLoader.java:260 at java.net.URLClassLoader.access$100 URLClassLoader.java:56 at java.net.URLClassLoader$1.run URLClassLoader.java:195 at java.security.AccessController.doPrivileged Native Method at java.net.URLClassLoader.findClass URLClassLoader.java:188 at java.lang.ClassLoader.loadClass ClassLoader.java:306 at sun.misc.Launcher$AppClassLoader.loadClass Launcher.java:268 at java.lang.ClassLoader.loadClass ClassLoader.java:251 at java.lang.ClassLoader.loadClassInternal ClassLoader.java:319 Hello World</description>
    <commit commitTime="2005-12-21 17:21:57" id="a778ac4"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc150/Ajc150Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="122728" reportTime="2006-01-05 03:21:00">
    <summary>ajdoc crashes</summary>
    <description>When trying to run ajdoc on a moderate size code base 266 classes / interfaces / aspects , ajdoc crashes. Here's what happens: D:\work\napa\jnapa\core&amp;gt;ajdoc -source 1.5 -classpath D:\work\napa\jnapa\core\lib\aspectjrt.jar;D:\work\napa\jnapa\core\l ib\dom4j-1.5.2.jar;D:\work\napa\jnapa\core\lib\groovy-all-1.0-jsr-03.jar -d D:\work\napa\jnapa\core\build\doc\internal - author -package -argfile D:\work\napa\jnapa\core\jnapafilelist34352.lst &amp;gt; Calling ajc... D:\work\napa\jnapa\commons\utils\src\fi\napa\util\aspects\CachingAspect.aj:72 [warning] advice defined in fi.napa.util.a spects.CachingAspect has not been applied [Xlint:adviceDidNotMatch] 1 warning &amp;gt; Building signature files... An internal error occured in ajdoc Please copy the following text into an email message and send it, along with any additional information you can add to: aspectj-dev@eclipse.org java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 at java.util.ArrayList.RangeCheck ArrayList.java:546 at java.util.ArrayList.get ArrayList.java:321 at org.aspectj.tools.ajdoc.StubFileGenerator.processMembers StubFileGenerator.java:124 at org.aspectj.tools.ajdoc.StubFileGenerator.processTypeDeclaration StubFileGenerator.java:99 at org.aspectj.tools.ajdoc.StubFileGenerator.processMembers StubFileGenerator.java:113 at org.aspectj.tools.ajdoc.StubFileGenerator.processTypeDeclaration StubFileGenerator.java:99 at org.aspectj.tools.ajdoc.StubFileGenerator.processFile StubFileGenerator.java:61 at org.aspectj.tools.ajdoc.StubFileGenerator.doFiles StubFileGenerator.java:38 at org.aspectj.tools.ajdoc.Main.main Main.java:157 The file jnapafilelist34352.lst contains only file entries w/ absolute paths, e.g. D:\work\napa\jnapa\core\src\fi\napa\core\tableprocessing\transfer\mapping\Transformation.java I am using ajc and ajdoc 1.5.0 release version. I'll be happy to provide any other information that may help in solving this issue. D:\work\napa\jnapa\core&amp;gt;ajdoc -v ajdoc version 1.5.0 D:\work\napa\jnapa\core&amp;gt;ajc -v AspectJ Compiler 1.5.0 built on Tuesday Dec 20, 2005 at 12:05:54 GMT</description>
    <commit commitTime="2006-01-09 13:31:55" id="d69ce9a"/>
    <fixedFiles>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/StubFileGenerator.java</file>
      <file>ajdoc/testsrc/org/aspectj/tools/ajdoc/AjdocTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="122248" reportTime="2005-12-28 09:35:00">
    <summary>BUG for ajdt_1.3_for_eclipse_3.1.zip</summary>
    <description>Hi !! I use ajdt_1.3_for_eclipse_3.1.zip with eclipse 3.1.1 and fick this error when the eclipse try to make the workbrench: java.lang.IllegalStateException at org.aspectj.weaver.TypeFactory.createParameterizedType TypeFactory.java:42 at org.aspectj.weaver.bcel.BcelGenericSignatureToTypeXConverter.classTypeSignature2TypeX BcelGenericSignatureToTypeXConverter.java:82 at org.aspectj.weaver.bcel.BcelGenericSignatureToTypeXConverter.classTypeSignature2TypeX BcelGenericSignatureToTypeXConverter.java:42 at org.aspectj.weaver.bcel.BcelObjectType.unpackGenericSignature BcelObjectType.java:657 at org.aspectj.weaver.bcel.BcelObjectType.getSuperclass BcelObjectType.java:181 at org.aspectj.weaver.ReferenceType.getSuperclass ReferenceType.java:514 at org.aspectj.weaver.bcel.BcelWeaver.weaveParentsFor BcelWeaver.java:1192 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1047 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:300 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:178 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:811 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:230 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:156 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 IllegalStateException thrown: Expecting raw type</description>
    <commit commitTime="2006-01-15 21:33:55" id="3f77e75"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelField.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelMethod.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/MemberTestCase15.java</file>
    </fixedFiles>
  </bug>
  <bug id="124399" reportTime="2006-01-18 16:59:00">
    <summary>AJDT AspectJ Internal Compiler Error</summary>
    <description>In Eclipse 3.1.1 with AJDT 1.3 the December 20th 2005 release I got this message in an error dialog: org.aspectj.weaver.BCException at org.aspectj.weaver.bcel.LazyClassGen.getLazyMethodGen LazyClassGen.java:1216 at org.aspectj.weaver.bcel.LazyClassGen.getLazyMethodGen LazyClassGen.java:1201 at org.aspectj.weaver.bcel.BcelShadow.weaveAroundInline BcelShadow.java:2048 at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:232 at org.aspectj.weaver.Shadow.implementMungers Shadow.java:588 at org.aspectj.weaver.Shadow.implement Shadow.java:405 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:2146 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:467 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:102 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1543 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1494 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1275 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1097 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:300 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:178 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:811 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:254 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:163 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 trouble in: public class edu.ucsd.aosd.MyApplication extends java.lang.Object: public void &amp;lt;init&amp;gt; : ALOAD_0 // edu.ucsd.aosd.MyApplication this line 5 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V constructor-execution void edu.ucsd.aosd.MyApplication.&amp;lt;init&amp;gt; | RETURN constructor-execution void edu.ucsd.aosd.MyApplication.&amp;lt;init&amp;gt; end public void &amp;lt;init&amp;gt; public static void main String[] org.aspectj.weaver.MethodDeclarationLineNumber: 8:124 : method-execution void edu.ucsd.aosd.MyApplication.main java.lang.String[] | ALOAD_0 // java.lang.String[] args line 9 | ASTORE 4 | ICONST_0 | ISTORE_2 | ALOAD 4 | ARRAYLENGTH | ISTORE_3 | GOTO L1 | L0: ALOAD 4 | ILOAD_2 | AALOAD | ASTORE_1 | GETSTATIC java.lang.System.out Ljava/io/PrintStream; line 10 | NEW java.lang.StringBuilder | DUP | LDC "got: " | INVOKESPECIAL java.lang.StringBuilder.&amp;lt;init&amp;gt; Ljava/lang/String; V | ALOAD_1 // java.lang.String arg | method-call java.lang.StringBuilder java.lang.StringBuilder.append java.lang.String | | INVOKEVIRTUAL java.lang.StringBuilder.append Ljava/lang/String; Ljava/lang/StringBuilder; | method-call java.lang.StringBuilder java.lang.StringBuilder.append java.lang.String | method-call java.lang.String java.lang.StringBuilder.toString | | INVOKEVIRTUAL java.lang.StringBuilder.toString Ljava/lang/String; | method-call java.lang.String java.lang.StringBuilder.toString | ASTORE 5 | ASTORE 6 | method-call void java.io.PrintStream.println java.lang.String | | ALOAD 6 | | ALOAD 5 | | INVOKEVIRTUAL java.io.PrintStream.println Ljava/lang/String; V | method-call void java.io.PrintStream.println java.lang.String | GETSTATIC java.lang.System.out Ljava/io/PrintStream; line 11 | LDC "got: %s\n" | ICONST_1 | ANEWARRAY java.lang.Object | DUP | ICONST_0 | ALOAD_1 // java.lang.String arg | AASTORE | method-call java.io.PrintStream java.io.PrintStream.printf java.lang.String, java.lang.Object[] | | INVOKEVIRTUAL java.io.PrintStream.printf Ljava/lang/String;[Ljava/lang/Object; Ljava/io/PrintStream; | method-call java.io.PrintStream java.io.PrintStream.printf java.lang.String, java.lang.Object[] | POP | IINC 2 1 line 9 | L1: ILOAD_2 | ILOAD_3 | IF_ICMPLT L0 | RETURN line 13 method-execution void edu.ucsd.aosd.MyApplication.main java.lang.String[] end public static void main String[] end public class edu.ucsd.aosd.MyApplication when implementing on shadow method-call void java.io.PrintStream.println java.lang.String when weaving type edu.ucsd.aosd.MyApplication when weaving classes when weaving when incrementally building BuildConfig[C:\EclipseWorkspace\.metadata\.plugins\org.eclipse.ajdt.core\AspectJSemanticsTest.generated.lst] #Files=2 It occured when I editing this file, in an AspectJ project with an recently renamed .aj extension: package edu.ucsd.aosd; import java.io.PrintStream; public class MyApplication { // main public static void main String[] args { for String arg : args { System.out.println "got: " + arg ; System.out.printf "got: %s\n", arg ; } } } aspect Printing { pointcut printlnCalls PrintStream ps, String out : call * PrintStream+.println String &amp;amp;&amp;amp; target ps &amp;amp;&amp;amp; args out ; Object around PrintStream ps, String out : printlnCalls ps, out &amp;amp;&amp;amp; !adviceexecution { return proceed ps, out ; } pointcut printfCalls PrintStream ps, String fmt, Object[] objs : call * PrintStream+.printf String, Object...##### &amp;amp;&amp;amp; target ps &amp;amp;&amp;amp; args fmt, objs ; } Where "#####" is where my cursor was when I saved. My previously saved version didn't have the printfCalls pointcut nor the call to printf in the main. Thus, you might want to try the println version first, save it, and then make the new additions. Though, I hope the debug information is enough.</description>
    <commit commitTime="2006-01-24 09:59:17" id="d916002"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="124999" reportTime="2006-01-24 08:41:00">
    <summary>[generics] Incorrect call to generic inherited method in around advice</summary>
    <description>The following case produces a runtime error: package aj; public abstract aspect GenericInheritedMethod&amp;lt;T&amp;gt; { protected final T getSomething { return null; } } package aj; aspect UseInheritedMethod extends GenericInheritedMethod&amp;lt;Integer&amp;gt; { // works as expected before : execution void someMethod { System.out.println getSomething ; } // Runtime Error void around : execution void someMethod { System.out.println getSomething ; } public static void main String[] args { someMethod ; } private static void someMethod { } } &amp;gt;java aj.UseInheritedMethod null Exception in thread "main" java.lang.NoSuchMethodError: aj.UseInheritedMethod.getSomething Ljava/lang/Integer; at aj.UseInheritedMethod.ajc$inlineAccessMethod$aj_UseInheritedMethod$aj_UseInheritedMethod$getSomething UseInheritedMethod.aj at aj.UseInheritedMethod.ajc$around$aj_UseInheritedMethod$2$c74e36b7 UseInheritedMethod.aj:12 at aj.UseInheritedMethod.someMethod UseInheritedMethod.aj:1 at aj.UseInheritedMethod.main UseInheritedMethod.aj:16 The "inlineAccessMethod" should call "getSomething Ljava/lang/Object;" as the before advice does.</description>
    <commit commitTime="2006-01-24 16:47:42" id="a4bd19d"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="125101" reportTime="2006-01-24 19:40:00">
    <summary>StackOverFlow in ReferenceType.isAssignableFrom</summary>
    <description>Hi. I am weaving two aspects into a jar file "jar-to-jar". ajc 1.5.0 gives me a huge error message see attachement . Would be great if I could get any recommendations on this. Thanks! Eric</description>
    <commit commitTime="2006-01-25 17:41:21" id="efb20c5"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
    </fixedFiles>
  </bug>
  <bug id="125295" reportTime="2006-01-26 04:12:00">
    <summary>None</summary>
    <description>The fix for bug 58520 has caused two AJDT marker tests to fail. The reason for the failures is that the test is checking that the markers have a specific message i.e. advises Demo.foo int, Object runtime test . However, due to the fix for bug 58520 , the message is now saying advises Demo.foo int, java.lang.Object runtime test . Since everything in AJDT works of the same model, the xref view is also showing the fully qualified arguments. However, this is inconsistent with the Outline view. The fix is along the lines of adding the capability to choose whether you want the fully qualified name or not.</description>
    <commit commitTime="2006-01-26 15:32:48" id="7e40a60"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/IProgramElement.java</file>
      <file>asm/src/org/aspectj/asm/internal/ProgramElement.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="121395" reportTime="2005-12-19 06:28:00">
    <summary>invalid aspectj path throws filenotfoundexception</summary>
    <description>An invalid aspectj path missing jar file throws an filenotfoundexception: java.io.FileNotFoundException at java.io.FileInputStream.open Native Method at java.io.FileInputStream.&amp;lt;init&amp;gt; FileInputStream.java:106 at org.aspectj.weaver.bcel.BcelWeaver.addAspectsFromJarFile BcelWeaver.java:202 at org.aspectj.weaver.bcel.BcelWeaver.addLibraryJarFile BcelWeaver.java:192 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.initBcelWorld AjBuildManager.java:623 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:209 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:185 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:163 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 FileNotFoundException thrown: /Users/frankstolle/Documents/workspace/lib_aspects/deploy/lib_aspects.jar No such file or directory should generate an problem entry in the problems-list.</description>
    <commit commitTime="2006-01-27 12:30:21" id="551b446"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/AjdeInteractionTestbed.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="123901" reportTime="2006-01-15 08:39:00">
    <summary>NPE in AccessForInlineVisitor.endVisit AccessForInlineVisitor.java:105</summary>
    <description>java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.ast.AccessForInlineVisitor.endVisit AccessForInlineVisitor.java:105 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference.traverse QualifiedNameReference.java Compiled Code at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse MessageSend.java Compiled Code at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse MessageSend.java Compiled Code at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse MethodDeclaration.java Compiled Code at org.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration.resolveStatements AdviceDeclaration.java:172 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve AbstractMethodDeclaration.java Compiled Code at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java Compiled Code at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.resolve AspectDeclaration.java:115 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java Inlined Compiled Code at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve CompilationUnitDeclaration.java Compiled Code at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:514 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java Compiled Code at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:230 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:185 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:163 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 NullPointerException thrown: null</description>
    <commit commitTime="2006-01-29 10:12:10" id="693945f"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="125657" reportTime="2006-01-29 18:45:17">
    <summary>NullPointerException from BcelShadow.java:1313</summary>
    <description>From within Eclipse 3.0 (RAD 6.0.1) I get an error with the (partial) details listed below. My aspect looks like this: public aspect AAwtEventDispatcherThreadProtection { pointcut awtComponentMethod(java.awt.Component component): target(component) &amp;&amp; call(* *.*(..)); before(java.awt.Component component): awtComponentMethod(component) { if (!SwingUtilities.isEventDispatchThread() &amp;&amp; component.isDisplayable()) { System.err.println("AWT Component method called from another Thread than the AWT-EventDispatchThread! source: " + thisJoinPoint.getSourceLocation() + ", target: " + thisJoinPoint.toLongString()); } } } ---------------- DETAILS (shortened because the size exceeded the 65k limit): java.lang.NullPointerException at at org.aspectj.weaver.bcel.BcelShadow.ensureTargetTypeIsCorrect(BcelShadow.java:1313) at at org.aspectj.weaver.bcel.BcelShadow.initializeTargetVar(BcelShadow.java:1274) at at org.aspectj.weaver.bcel.BcelShadow.getTargetVar(BcelShadow.java:968) at at org.aspectj.weaver.patterns.ThisOrTargetPointcut.findResidueInternal(ThisOrTargetPointcut.java:185) at at org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:268) at at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:97) at at org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:268) at at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:97) at at org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:268) at at org.aspectj.weaver.bcel.BcelAdvice.specializeOn(BcelAdvice.java:132) at at org.aspectj.weaver.bcel.BcelShadow.prepareForMungers(BcelShadow.java:313) at at org.aspectj.weaver.Shadow.implement(Shadow.java:404) at at org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2146) at at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:467) at at org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:102) at at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1543) at at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1494) at at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1275) at at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1097) at at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:300) at at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178) at at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70) at at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367) at at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811) at at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:230) at at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:156) at at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122) at at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191) trouble in: public class com.sun.imageio.plugins.gif.GIFImageMetadata extends javax.imageio.metadata.IIOMetadata:</description>
    <commit commitTime="2006-01-30 19:20:00" id="4934132"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="125809" reportTime="2006-01-31 06:23:00">
    <summary>AjTypeDeclaration in the dom shouldn't have the properties of it's subtype AspectDeclaration</summary>
    <description>The AjTypeDeclaration should not have the properties 'privileged' and 'perClause' which it's subtype AspectDeclaration has. This was shown up whilst building an aspectj for ajdt and a failure in one of the visitor tests.</description>
    <commit commitTime="2006-01-31 12:53:10" id="eec4990"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AjTypeDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AspectDeclaration.java</file>
      <file>org.aspectj.ajdt.core/testsrc/org/aspectj/tools/ajc/AjASTTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="123212" reportTime="2006-01-10 04:12:00">
    <summary>Skip subversion resources when copying files from input to output folders</summary>
    <description>Exception when compile a project under svn. java.io.FileNotFoundException at java.io.FileOutputStream.open Native Method at java.io.FileOutputStream.&amp;lt;init&amp;gt; FileOutputStream.java:179 at java.io.FileOutputStream.&amp;lt;init&amp;gt; FileOutputStream.java:131 at org.aspectj.util.FileUtil.makeOutputStream FileUtil.java:1258 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.writeResource AjBuildManager.java:466 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesFromFile AjBuildManager.java:444 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesToDestination AjBuildManager.java:386 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:298 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:185 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:163 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 FileNotFoundException thrown: /home/chomats/Fede/svn/fede-repos/Tool.Product.ProductServer/classes/.svn/format Permission non accordée</description>
    <commit commitTime="2006-02-10 07:55:32" id="d856e4f"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="120356" reportTime="2005-12-12 07:07:00">
    <summary>@AJ decl err/warn does not show cross structure view</summary>
    <description>Perhaps an issue in the ASM struct for DEOW since cross struct. is empty in AJDT , despite error / warning gutter and message is ok.</description>
    <commit commitTime="2006-02-10 11:25:44" id="f743fb2"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</file>
    </fixedFiles>
  </bug>
  <bug id="119882" reportTime="2005-12-08 10:53:00">
    <summary>BCException when deleting a java-source-file</summary>
    <description>org.aspectj.weaver.BCException at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1087 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:300 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:178 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:811 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:254 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:163 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 BCException thrown: Can't find bcel delegate for training.casino.Konto type=class org.aspectj.weaver.ReferenceType when weaving classes when weaving when incrementally building BuildConfig[C:\Documents and Settings\mheidt\workspace 3.1.1\.metadata\.plugins\org.eclipse.ajdt.core\AspJTraining.generated.lst] #Files=11 deleted a java-source-file before but not the class-file , possibly pointed by a LogAspect. Created a new source file. Error occurs after saving the new file.</description>
    <commit commitTime="2006-02-13 10:51:11" id="0b39aa5"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="121616" reportTime="2005-12-20 14:58:00">
    <summary>[@AspectJ]Lacking import for JoinPoint crahes the compiler</summary>
    <description>Encountered during a JavaPolis demo. I was using a pre-release development version. However, reproducable with latest post-release development version as well. Create the following source file: package banking; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.Pointcut; public class Main { public static void main String[] args { System.out.println "Main" ; } } @Aspect class MainLogger { @Pointcut "execution * main .. " public void log JoinPoint thisJoinPoint { System.out.println "Before " thisJoinPoint" ; } } Note that the import statement for JoinPoint is lacking. Compiling this source file crahses the compiler. Adding import statement for JoinPoint makes it work fine. C:\work\aop\src\workspace\CallDebugBug&amp;gt;ajc -version AspectJ Compiler DEVELOPMENT built on Tuesday Dec 20, 2005 at 13:58:29 GMT C:\work\aop\src\workspace\CallDebugBug&amp;gt;ajc -1.5 banking\Main.java C:\work\aop\src\workspace\CallDebugBug\banking\Main.java [error] Internal compil er error java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVi sitor.buildFormalAdviceBindingsFrom ValidateAtAspectJAnnotationsVisitor.java:417 at org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVi sitor.convertToPointcutDeclaration ValidateAtAspectJAnnotationsVisitor.java:513 at org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVi sitor.visit ValidateAtAspectJAnnotationsVisitor.java:188 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.t raverse MethodDeclaration.java:185 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.tra verse TypeDeclaration.java:1195 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDecl aration.traverse CompilationUnitDeclaration.java:339 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.beforeAnalysing AjCompilerAdapter.java:154 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$before$org_asp ectj_ajdt_internal_compiler_CompilerAdapter$7$db78446d CompilerAdapter.aj:101 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compil er.java:517 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compil er.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:811 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:230 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:156 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:326 at org.aspectj.tools.ajc.Main.runMain Main.java:240 at org.aspectj.tools.ajc.Main.main Main.java:83 no source information available C:\work\aop\src\workspace\CallDebugBug\banking\Main.java:16 [error] JoinPoint ca nnot be resolved to a type public void log JoinPoint thisJoinPoint { ^^^^^^^ C:\work\aop\src\workspace\CallDebugBug\banking\Main.java:17 [error] Syntax error , insert " " to complete MethodInvocation System.out.println "Before " thisJoinPoint" ; C:\work\aop\src\workspace\CallDebugBug\banking\Main.java:17 [error] Syntax error , insert ";" to complete BlockStatements System.out.println "Before " thisJoinPoint" ; ABORT Exception thrown from AspectJ DEVELOPMENT This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. when validating @AspectJ annotations log when analysing types defined in compilation unit C:\work\aop\src\workspace\CallD ebugBug\banking\Main.java when processing compilation unit C:\work\aop\src\workspace\CallDebugBug\banking\ Main.java when batch building with classpath: c:\java\jdk1.5.0_04\jre\lib\ext\dnsns.jar;c: \java\jdk1.5.0_04\jre\lib\ext\localedata.jar;c:\java\jdk1.5.0_04\jre\lib\ext\sun jce_provider.jar;c:\java\jdk1.5.0_04\jre\lib\ext\sunpkcs11.jar;c:\java\jdk1.5.0_ 04\lib\tools.jar;c:\java\jdk1.5.0_04\jre\lib\rt.jar;C:\java\aspectj\aspectj5\lib \aspectjrt.jar;C:\java\log4j\jakarta-log4j-1.2.8\dist\lib\log4j-1.2.8.jar;C:\jav a\jess\Jess61p5\jess.jar;c:\java\j2sdkee1.3.1\lib\system\cloudscape.jar;c:\java\ j2sdkee1.3.1\lib\system\tools.jar;c:\java\j2sdkee1.3.1\lib\cloudscape\RmiJdbc.ja r;c:\java\j2sdkee1.3.1\lib\cloudscape\cloudclient.jar;c:\java\j2sdkee1.3.1\lib\c lasses;c:\java\j2sdkee1.3.1\classes;c:\java\j2sdkee1.3.1\lib\j2ee.jar;c:\java\j2 sdkee1.3.1\lib\toolclasses;c:\java\j2sdkee1.3.1\lib\j2eetools.jar;c:\java\j2sdke e1.3.1\lib\locale;c:\java\j2sdkee1.3.1\lib\j2ee.jar;c:\java\j2sdkee1.3.1\lib\jha ll.jar;c:\java\j2sdkee1.3.1\lib\locale;c:\java\jdk1.5.0_04\lib\tools.jar;c:\java \j2sdkee1.3.1\lib\jhall.jar;C:\java\ws\axis\axis-1_1\lib\axis.jar;C:\java\ws\axi s\axis-1_1\lib\axis-ant.jar;C:\java\ws\axis\axis-1_1\lib\commons-discovery.jar;C :\java\ws\axis\axis-1_1\lib\commons-logging.jar;C:\java\ws\axis\axis-1_1\lib\jax rpc.jar;C:\java\ws\axis\axis-1_1\lib\saaj.jar;C:\java\ws\axis\axis-1_1\lib\log4j -1.2.8.jar;C:\java\ws\axis\axis-1_1\lib\wsdl4j.jar;C:\java\concurrency\concurren cy.jar;C:\java\junit\junit3.8.1\junit.jar;.; null java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVi sitor.buildFormalAdviceBindingsFrom ValidateAtAspectJAnnotationsVisitor.java:417 at org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVi sitor.convertToPointcutDeclaration ValidateAtAspectJAnnotationsVisitor.java:513 at org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVi sitor.visit ValidateAtAspectJAnnotationsVisitor.java:188 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.t raverse MethodDeclaration.java:185 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.tra verse TypeDeclaration.java:1195 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDecl aration.traverse CompilationUnitDeclaration.java:339 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.beforeAnalysing AjCompilerAdapter.java:154 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$before$org_asp ectj_ajdt_internal_compiler_CompilerAdapter$7$db78446d CompilerAdapter.aj:101 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compil er.java:517 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compil er.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion AjBuildManager.java:811 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuild Manager.java:230 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBu ildManager.java:156 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:326 at org.aspectj.tools.ajc.Main.runMain Main.java:240 at org.aspectj.tools.ajc.Main.main Main.java:83 1 fail|abort, 4 errors</description>
    <commit commitTime="2006-02-16 09:33:38" id="d4219e1"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="122370" reportTime="2005-12-30 00:54:00">
    <summary>[@AspectJ] @DeclareParents/declare parents not equivalent</summary>
    <description>Adding a setter to the Moody example makes it clear that the annotation style @DeclareParents results in different behavior than the classic declare parents style. Calling the setter in a "declare parents"-advised object behaves as one would expect. However, calling the setter with a "@DeclareParents"-advised object has no effect -- that is, you can call the setter and see that it's been called and immediately call the getter, only to find that the value didn't change. The following examples all in "package moody;" illustrate: public enum Mood { HAPPY, JOLLY } Classic style: ------------- public aspect ClassicMoodIndicator { public interface Moody { Mood getMood ; void setMood Mood mood ; } private Mood Moody.mood = Mood.HAPPY; public Mood Moody.getMood { return mood; } public void Moody.setMood Mood mood { this.mood = mood; } declare parents : moody.ClassicMoodImplementor implements Moody; } public class ClassicMoodImplementor { } Annotation style: ---------------- import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.DeclareParents; @Aspect public class AnnotationMoodIndicator { public interface Moody { Mood getMood ; void setMood Mood mood ; } public static class MoodyImpl implements Moody { private Mood mood = Mood.HAPPY; public Mood getMood { return mood; } public void setMood Mood mood { this.mood = mood; } } @DeclareParents value="moody.AnnotationMoodImplementor",defaultImpl=MoodyImpl.class private Moody implementedInterface; } public class AnnotationMoodImplementor { } JUnit TestCase: -------------- import junit.framework.TestCase; public class MoodTester extends TestCase { public MoodTester String name { super name ; } public void testClassic { ClassicMoodImplementor cmi0 = new ClassicMoodImplementor ; ClassicMoodImplementor cmi1 = new ClassicMoodImplementor ; assertEquals "cmi0 should be HAPPY", Mood.HAPPY, cmi0.getMood ; cmi1.setMood Mood.JOLLY ; assertEquals "cmi1 should be JOLLY", Mood.JOLLY, cmi1.getMood ; assertEquals "cmi0 should be *still* be HAPPY", Mood.HAPPY, cmi0.getMood ; } public void testAnnotation { AnnotationMoodImplementor ami0 = new AnnotationMoodImplementor ; AnnotationMoodImplementor ami1 = new AnnotationMoodImplementor ; assertEquals "ami0 should be HAPPY", Mood.HAPPY, AnnotationMoodIndicator.Moody ami0 .getMood ; AnnotationMoodIndicator.Moody ami1 .setMood Mood.JOLLY ; assertEquals "ami1 should be JOLLY", Mood.JOLLY, AnnotationMoodIndicator.Moody ami1 .getMood ; assertEquals "ami0 should be *still* be HAPPY", Mood.HAPPY, AnnotationMoodIndicator.Moody ami0 .getMood ; } } Result: ------ The test run is as follows: ..F Time: 0.021 There was 1 failure: 1 testAnnotation moody.MoodTester junit.framework.AssertionFailedError: ami1 should be JOLLY expected:&amp;lt;JOLLY&amp;gt; but was:&amp;lt;HAPPY&amp;gt; at moody.MoodTester.testAnnotation MoodTester.java:27 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at moody.MoodTester.main MoodTester.java:7 FAILURES!!! Tests run: 2, Failures: 1, Errors: 0 For classic, you can see that cmi1.setMood was successful and cmi0/cmi1 are decoupled that is, calling setMood on cmi1 has no impact on cmi0 . The annotation style, however, fails because ami1.setMood appears to have done nothing. The result should have been that ami1 is JOLLY and ami0 HAPPY I include the second assert because both ami0 &amp;amp; ami1 ended up JOLLY in RC1 . The current behavior makes @DeclareParents unusable for retaining field state near as I can tell, it retains state throughout the method invocation, but not beyond it, like it is creating and discarding a backing object with each method invocation .</description>
    <commit commitTime="2006-02-16 16:50:34" id="e874581"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="123553" reportTime="2006-01-12 00:56:00">
    <summary>Can't use named pointcut in advice decl. in generic aspect</summary>
    <description>When defining a generic aspect with a paramterized PC, using that PC in an advice declaration causes an 'incompatible type' error. Example: public abstract aspect GenericAspect&amp;lt;Par1&amp;gt; { abstract pointcut checkpoint Par1 par1 ; // advice declaration causes error after Par1 par1 : checkpoint par1 {// do something} } Using 1.3.0.20051220093604 and AspectJ 1.5.0, the compiler complains: "incompatible type, expected java.lang.Object found BindingTypePattern TPar1;, 0 . Check the type specified in your pointcut" Since it is possible to paramterize a named PC in subaspects: public abstract aspect GenericAspect&amp;lt;Par1&amp;gt; { abstract pointcut checkpoint Par1 par1 ; } public aspect SubAspect1 extends GenericAspect&amp;lt;Main&amp;gt;{ pointcut checkpoint Main main : call void Main.test &amp;amp;&amp;amp; target main ; after Main main : checkpoint main { System.out.println "Caught by 1." ; } } public aspect SubAspect2 extends GenericAspect&amp;lt;Main2&amp;gt;{ pointcut checkpoint Main2 main : call void Main2.test &amp;amp;&amp;amp; target main ; after Main2 main : checkpoint main { System.out.println "Caught by 2." ; } } ... and since it is possible to use generic PC utilizing unnamed PCs in a generic aspect: public abstract aspect GenericAspect&amp;lt;Par1&amp;gt; { // works after Par1 par1 : call void Par1.test &amp;amp;&amp;amp; target par1 {// something } } ... it seems that this is a bug.</description>
    <commit commitTime="2006-02-17 19:41:52" id="1f1ace1"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="128744" reportTime="2006-02-20 23:38:00">
    <summary>LTW doesn't work using JRE1.4 in Eclipse</summary>
    <description>LTW doesn't work using JRE1.4 in Eclipse now I want to support JRE1.4 when LTW. I defined a aop.xml file in application META-INF path, it works fine using JRE1.4 in command-line, aop.xml file is used when LTW, the command as below: "D:\work\BTM\eclipse 3.1.1\eclipse-SDK-3.1.1-win32\eclipse-1.4.2\jre\bin\java" -classpath "C:\aspectj1.5\lib\aspectjweaver.jar" "-Djava.system.class.loader=org.aspectj.weaver.loadtime.WeavingURLClassLoader" "-Daj.class.path=D:\work\BTM\eclipse 3.1.1\jre1.4.2\myTest;C:\aspectj1.5\doc\examples\armtest\jar\btm-deps-e3.1.jar;C:\aspectj1.5\doc\examples\armtest\jar\btm-rt.jar" Hello but it doesn't work in Eclipse, I added upper command to VM arguments, it can't find aop.xml, because if I changed aop.xml to be wrong, there is no any error when execute the application in Eclipse , but there will be error when execute it in command-line, based on this point, I think that aop.xml didn't be used in Eclipse, I also tried to add "-Daj.aspect.path=D:\work\BTM\eclipse 3.1.1\jre1.4.2\myTest", but it is still. so I want to confirm if AspectJ only supports command-line for JRE1.4? doesn't support Eclipse for JRE1.4? BTW, my Eclipse env: eclipse 3.1.1 + ajdt_1.3_for_eclipse_3.1 + Sun JDK 1.4.2. I also tried to use eclipse 3.1.2, but this problem is still existed.</description>
    <commit commitTime="2006-02-21 15:52:36" id="7a2087e"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="128237" reportTime="2006-02-16 11:21:00">
    <summary>[@AspectJ] NPE on @AJ code with pointcut which contains logical OR operation.</summary>
    <description>I got NullPointerException during compilation of any @AspectJ code with pointcut which contains logical OR operation. -----Here is my test case for this bug---------------- import java.io.IOException; import org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.annotation.Around; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.Pointcut; @Aspect class AbstractTracer { @Pointcut " execution public * Foo+.* .. || execution public * Foo+.blablabla .. &amp;amp;&amp;amp; !execution public Foo+.new .. " // @Pointcut " execution public * Foo+.* .. &amp;amp;&amp;amp; !execution public Foo+.new .. " protected void methodCall {}; @Pointcut "methodCall &amp;amp;&amp;amp; this obj " private void objectCall Object obj { }; @Around "objectCall obj " public Object aroundMethodCall ProceedingJoinPoint thisJoinPoint, Object obj throws Throwable { System.out.println "Before "+thisJoinPoint.getSignature .toString ; if thisJoinPoint.getSignature .toString .indexOf "A" != -1 { throw new IOException "Hello from Aspect!" ; // throw new Exception "Hello from Aspect!" ; } Object result = thisJoinPoint.proceed ; System.out.println "After "+thisJoinPoint.getSignature .toString ; return result; } } public class Foo { public void methodA throws IOException { throw new IOException "Foo.methodA" ; } public void methodB boolean b throws Exception { if b { throw new Exception "Foo.methodB" ; } } /** * @param args */ public static void main String[] args { Foo obj = new Foo ; try { obj.methodA ; System.out.println "Something going wrong!" ; } catch IOException e { System.out.println "All right! We got exception" ; e.printStackTrace System.out ; } try { obj.methodB false ; System.out.println "All right!" ; } catch Exception e { System.out.println "Something going wrong! We got exception" ; e.printStackTrace System.out ; } } } ------------------------------------------------------ and here is acj error log ------------------------------------------------------ ---- AspectJ Properties --- AspectJ Compiler 1.5.0 built on Tuesday Dec 20, 2005 at 12:05:54 GMT ---- Dump Properties --- Dump file: ajcore.20060216.175147.608.txt Dump reason: java.lang.NullPointerException Dump on exception: true Dump at exit condition: abort ---- Exception Information --- java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelWeaver.validateOrBranch BcelWeaver.java:611 at org.aspectj.weaver.bcel.BcelWeaver.validateBindings BcelWeaver.java:579 at org.aspectj.weaver.bcel.BcelWeaver.rewritePointcuts BcelWeaver.java:511 at org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave BcelWeaver.java:449 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:283 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:178 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:811 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:230 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:156 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:326 at org.aspectj.tools.ajc.Main.runMain Main.java:240 at org.aspectj.tools.ajc.Main.main Main.java:83 ---- System Properties --- java.runtime.name=Java TM 2 Runtime Environment, Standard Edition sun.boot.library.path=/opt/Java/jdk1.5.0_04/jre/lib/i386 java.vm.version=1.5.0_04-b05 java.vm.vendor=Sun Microsystems Inc. java.vendor.url= http://java.sun.com/ path.separator=: java.vm.name=Java HotSpot TM Client VM file.encoding.pkg=sun.io user.country=RU sun.os.patch.level=unknown java.vm.specification.name=Java Virtual Machine Specification user.dir=/home/kei/ajdt-workspace/AspectJTests java.runtime.version=1.5.0_04-b05 java.awt.graphicsenv=sun.awt.X11GraphicsEnvironment java.endorsed.dirs=/opt/Java/jdk1.5.0_04/jre/lib/endorsed os.arch=i386 java.io.tmpdir=/tmp line.separator= java.vm.specification.vendor=Sun Microsystems Inc. os.name=Linux sun.jnu.encoding=UTF-8 java.library.path=/opt/Java/jdk1.5.0_04/jre/lib/i386/client:/opt/Java/jdk1.5.0_04/jre/lib/i386:/opt/Java/jdk1.5.0_04/jre/../lib/i386:.: java.specification.name=Java Platform API Specification java.class.version=49.0 sun.management.compiler=HotSpot Client Compiler os.version=2.6.15-1.1831_FC4 user.home=/home/kei user.timezone=Europe/Kiev java.awt.printerjob=sun.print.PSPrinterJob file.encoding=UTF-8 java.specification.version=1.5 java.class.path=components/aspectjweaver.jar:components/aspectjtools.jar:components/aspectjrt.jar:components/aspectjlib.jar:/build/auroratest.jar:/opt/Java/aspectj1.5/lib/aspectjtools.jar:/opt/Java/jdk1.5.0_04/lib/tools.jar user.name=kei java.vm.specification.version=1.0 java.home=/opt/Java/jdk1.5.0_04/jre sun.arch.data.model=32 user.language=ru java.specification.vendor=Sun Microsystems Inc. java.vm.info=mixed mode, sharing java.version=1.5.0_04 java.ext.dirs=/opt/Java/jdk1.5.0_04/jre/lib/ext sun.boot.class.path=/opt/Java/jdk1.5.0_04/jre/lib/rt.jar:/opt/Java/jdk1.5.0_04/jre/lib/i18n.jar:/opt/Java/jdk1.5.0_04/jre/lib/sunrsasign.jar:/opt/Java/jdk1.5.0_04/jre/lib/jsse.jar:/opt/Java/jdk1.5.0_04/jre/lib/jce.jar:/opt/Java/jdk1.5.0_04/jre/lib/charsets.jar:/opt/Java/jdk1.5.0_04/jre/classes java.vendor=Sun Microsystems Inc. file.separator=/ java.vendor.url.bug= http://java.sun.com/cgi-bin/bugreport.cgi sun.io.unicode.encoding=UnicodeLittle sun.cpu.endian=little sun.cpu.isalist= ---- Command Line --- -1.5 Foo.java ---- Full Classpath --- /opt/Java/jdk1.5.0_04/jre/lib/rt.jar 39713589 bytes /opt/Java/jdk1.5.0_04/jre/lib/i18n.jar missing /opt/Java/jdk1.5.0_04/jre/lib/sunrsasign.jar missing /opt/Java/jdk1.5.0_04/jre/lib/jsse.jar 549315 bytes /opt/Java/jdk1.5.0_04/jre/lib/jce.jar 81799 bytes /opt/Java/jdk1.5.0_04/jre/lib/charsets.jar 8627836 bytes /opt/Java/jdk1.5.0_04/jre/classes missing /opt/Java/jdk1.5.0_04/jre/lib/ext/localedata.jar 802502 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/sunpkcs11.jar 175414 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/dnsns.jar 8176 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/sunjce_provider.jar 153235 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/bctsp-jdk15-129.jar 38357 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/bcprov-jdk15-129.jar 1168795 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/j3daudio.jar 1386793 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/bcmail-jdk15-129.jar 124831 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/j3dcore.jar 2514820 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/j3dutils.jar 1401997 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/vecmath.jar 290018 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/bcprov-jdk14-129.jar 1157625 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/bcmail-jdk14-129.jar 126679 bytes /home/kei/ajdt-workspace/AspectJTests/components/aspectjweaver.jar 1746917 bytes /home/kei/ajdt-workspace/AspectJTests/components/aspectjrt.jar 108647 bytes /home/kei/ajdt-workspace/AspectJTests/components/aspectjlib.jar 7845 bytes /build/auroratest.jar missing /opt/Java/jdk1.5.0_04/lib/tools.jar 7015499 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/localedata.jar 802502 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/sunpkcs11.jar 175414 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/dnsns.jar 8176 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/sunjce_provider.jar 153235 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/bctsp-jdk15-129.jar 38357 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/bcprov-jdk15-129.jar 1168795 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/j3daudio.jar 1386793 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/bcmail-jdk15-129.jar 124831 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/j3dcore.jar 2514820 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/j3dutils.jar 1401997 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/vecmath.jar 290018 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/bcprov-jdk14-129.jar 1157625 bytes /opt/Java/jdk1.5.0_04/jre/lib/ext/bcmail-jdk14-129.jar 126679 bytes /home/kei/ajdt-workspace/AspectJTests/components/aspectjweaver.jar 1746917 bytes /home/kei/ajdt-workspace/AspectJTests/components/aspectjrt.jar 108647 bytes /home/kei/ajdt-workspace/AspectJTests/components/aspectjlib.jar 7845 bytes /build/auroratest.jar missing /opt/Java/jdk1.5.0_04/lib/tools.jar 7015499 bytes ---- Compiler Messages --- abort ABORT -- NullPointerException null null java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelWeaver.validateOrBranch BcelWeaver.java:611 at org.aspectj.weaver.bcel.BcelWeaver.validateBindings BcelWeaver.java:579 at org.aspectj.weaver.bcel.BcelWeaver.rewritePointcuts BcelWeaver.java:511 at org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave BcelWeaver.java:449 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:283 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:178 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:811 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:230 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:156 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:326 at org.aspectj.tools.ajc.Main.runMain Main.java:240 at org.aspectj.tools.ajc.Main.main Main.java:83 ---- org.aspectj.weaver.bcel.BcelWorld ---- Shadow mungers: around extraFlags: 2 : persingleton AbstractTracer &amp;amp;&amp;amp; execution public * Foo+.* .. || execution public * Foo+.blablabla .. &amp;amp;&amp;amp; !execution public Foo+.new .. &amp;amp;&amp;amp; this BindingTypePattern java.lang.Object, 1 -&amp;gt;java.lang.Object AbstractTracer.aroundMethodCall org.aspectj.lang.ProceedingJoinPoint, java.lang.Object Type mungers: BcelTypeMunger null BcelTypeMunger ResolvedTypeMunger PrivilegedAccess, void java.lang.Object. Late Type mungers: BcelTypeMunger null ------------------------------------------------------------------ I got same error with latest aspectj-DEVELOPMENT-20060216105006 night build.</description>
    <commit commitTime="2006-02-21 15:55:33" id="ba42a09"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="128618" reportTime="2006-02-20 06:36:00">
    <summary>[incremental] XLint warnings in the wrong place with incremental compilation</summary>
    <description>The zip file I am about to attach contains two AspectJ project, one depending on the other. If you make a small change to MainClass.java in 'Test Project' and save you will see a strange warning in that class - "advice defined in ras.FFDC has not been applied [Xlint:adviceDidNotMatch]". If you do a full build the warning goes away. Note that the error would be on line 36 if there were 36 lines in the class, which relates to a line in the FFDC aspect that contains advice.</description>
    <commit commitTime="2006-02-21 16:07:04" id="89d66dc"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/WeaverMessageHandler.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="131505" reportTime="2006-03-13 05:37:00">
    <summary>Generated aop.xml files contain aspects for all the projects ever built</summary>
    <description>Using the -outxml option in AJDT the generated aop.xml files are not correct after the first build and contain all the aspects that have ever been built including those in different projects and duplicates if an aspect has been built twice . It seems that there is a global list of aspects aspectNames in AjBuildManager that is never cleared.</description>
    <commit commitTime="2006-03-15 12:34:48" id="b3cd01d"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="132160" reportTime="2006-03-16 09:52:00">
    <summary>NPE in SingleTypeReference</summary>
    <description>I was C&amp;amp;P'ing the guts of another aspect into a new file from another project that I'm porting over . There are a number of errors in the aspect as most of the references point to the other project . I just changed an object from one type in the other project to a type in the project that the file is in. Eclipse SDK Version: 3.1.2 Build id: M20060118-1600 Version: 1.3.0 Build id: 20051220093604 AspectJ version: 1.5.0 ---------------------------------------------------------------- java.lang.NullPointerException at org.aspectj.org.eclipse.jdt.internal.compiler.ast.SingleTypeReference.getTypeBinding SingleTypeReference.java:39 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.getTypeBindingPublic TypeReference.java:98 at org.aspectj.ajdt.internal.core.builder.AsmElementFormatter.genLabelAndKind AsmElementFormatter.java:230 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.visit AsmHierarchyBuilder.java:399 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse MethodDeclaration.java:185 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse TypeDeclaration.java:1250 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.traverse QualifiedAllocationExpression.java:392 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.traverse LocalDeclaration.java:242 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse MethodDeclaration.java:212 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse TypeDeclaration.java:1195 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse CompilationUnitDeclaration.java:339 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.internalBuild AsmHierarchyBuilder.java:142 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.buildStructureForCompilationUnit AsmHierarchyBuilder.java:82 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishedCompilationUnit EclipseFactory.java:926 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing AjCompilerAdapter.java:195 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$4$6b855184 CompilerAdapter.aj:89 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:528 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:811 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:230 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:185 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:163 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 NullPointerException thrown: null</description>
    <commit commitTime="2006-03-27 19:11:57" id="91473b3"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java</file>
    </fixedFiles>
  </bug>
  <bug id="132087" reportTime="2006-03-15 23:56:00">
    <summary>NPE from unbound variable in advice</summary>
    <description>I get this error from having an unbound reference to a variable in an aspect. See attached AJDT project for an example. java.lang.NullPointerException at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.visit AsmHierarchyBuilder.java:412 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse MethodDeclaration.java:185 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse TypeDeclaration.java:1250 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.traverse QualifiedAllocationExpression.java:392 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.traverse LocalDeclaration.java:242 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse MethodDeclaration.java:212 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse TypeDeclaration.java:1195 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse CompilationUnitDeclaration.java:339 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.internalBuild AsmHierarchyBuilder.java:143 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.buildStructureForCompilationUnit AsmHierarchyBuilder.java:82 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishedCompilationUnit EclipseFactory.java:927 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing AjCompilerAdapter.java:201 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$4$6b855184 CompilerAdapter.aj:90 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:528 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:843 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:243 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:163 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 NullPointerException thrown: null</description>
    <commit commitTime="2006-03-27 21:39:46" id="fa2ed1b"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</file>
    </fixedFiles>
  </bug>
  <bug id="130837" reportTime="2006-03-07 19:52:00">
    <summary>Exception while trying to edit Annotation based Aspect Class normal Java class</summary>
    <description>java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVisitor.buildFormalAdviceBindingsFrom ValidateAtAspectJAnnotationsVisitor.java:417 at org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVisitor.resolveAndSetPointcut ValidateAtAspectJAnnotationsVisitor.java:364 at org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVisitor.validateAdvice ValidateAtAspectJAnnotationsVisitor.java:336 at org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVisitor.visit ValidateAtAspectJAnnotationsVisitor.java:186 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse MethodDeclaration.java:185 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse TypeDeclaration.java:1195 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse CompilationUnitDeclaration.java:339 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.beforeAnalysing AjCompilerAdapter.java:154 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$before$org_aspectj_ajdt_internal_compiler_CompilerAdapter$7$db78446d CompilerAdapter.aj:101 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:517 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:824 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:234 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:189 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:164 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 NullPointerException thrown: null</description>
    <commit commitTime="2006-03-28 08:09:10" id="41f1f3a"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java</file>
    </fixedFiles>
  </bug>
  <bug id="136665" reportTime="2006-04-13 11:34:00">
    <summary>Bug: ajc fails on missing classpath entries with fix</summary>
    <description>[iajc] error at no source information available [iajc] File.aj:0::0 Internal compiler error [iajc] org.aspectj.weaver.BCException: Can't open archive: missingjar [iajc] when resolving types defined in compilation unit File.aj [iajc] when processing compilation unit File.aj [iajc] when batch building BuildConfig[null] #Files=14 [iajc] [iajc] at org.aspectj.weaver.bcel.ClassPathManager$ZipFileEntry.ensureO pen ClassPathManager.java:258 [iajc] at org.aspectj.weaver.bcel.ClassPathManager$ZipFileEntry.find Cl assPathManager.java:225 [iajc] at org.aspectj.weaver.bcel.ClassPathManager.find ClassPathManage r.java:92 [iajc] at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate BcelWorld.j ava:287 [iajc] at org.aspectj.weaver.World.resolveToReferenceType World.java:33 5 [iajc] at org.aspectj.weaver.World.resolve World.java:251 [iajc] at org.aspectj.weaver.patterns.WildTypePattern.lookupTypeInWorld WildTypePattern.java:716 [iajc] at org.aspectj.weaver.patterns.WildTypePattern.resolveBindingsFr omFullyQualifiedTypeName WildTypePattern.java:690 [iajc] at org.aspectj.weaver.patterns.WildTypePattern.resolveBindings W ildTypePattern.java:623 [iajc] at org.aspectj.weaver.patterns.SignaturePattern.resolveBindings SignaturePattern.java:82 [iajc] at org.aspectj.weaver.patterns.KindedPointcut.resolveBindings Ki ndedPointcut.java:259 [iajc] at org.aspectj.weaver.patterns.AndPointcut.resolveBindings AndPo intcut.java:74 [iajc] at org.aspectj.weaver.patterns.Pointcut.resolve Pointcut.java:19 4 [iajc] at org.aspectj.ajdt.internal.compiler.ast.PointcutDesignator.fin ishResolveTypes PointcutDesignator.java:84 [iajc] at org.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration.reso lveStatements AdviceDeclaration.java:118 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMet hodDeclaration.resolve AbstractMethodDeclaration.java:400 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclara tion.resolve TypeDeclaration.java:1088 [iajc] at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.reso lve AspectDeclaration.java:116 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclara tion.resolve TypeDeclaration.java:1137 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Compilation UnitDeclaration.resolve CompilationUnitDeclaration.java:305 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.proces s Compiler.java:514 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compil e Compiler.java:329 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.perform Compilation AjBuildManager.java:845 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:241 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBu ild AjBuildManager.java:161 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:1 12 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java: 60 [iajc] at org.aspectj.tools.ajc.Main.run Main.java:356 [iajc] at org.aspectj.tools.ajc.Main.runMain Main.java:246 [iajc] at org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM AjcTas k.java:1262 [iajc] at org.aspectj.tools.ant.taskdefs.AjcTask.execute AjcTask.java:1 056 [iajc] at org.apache.tools.ant.UnknownElement.execute UnknownElement.ja va:275 [iajc] at org.apache.tools.ant.Task.perform Task.java:364 [iajc] at org.apache.tools.ant.Target.execute Target.java:341 [iajc] at org.apache.tools.ant.Target.performTasks Target.java:369 [iajc] at org.apache.tools.ant.Project.executeTarget Project.java:1214 [iajc] at org.apache.tools.ant.taskdefs.Ant.execute Ant.java:386 [iajc] at org.apache.tools.ant.taskdefs.CallTarget.execute CallTarget.j ava:106 [iajc] at org.apache.tools.ant.UnknownElement.execute UnknownElement.ja va:275 [iajc] at org.apache.tools.ant.Task.perform Task.java:364 [iajc] at org.apache.tools.ant.Target.execute Target.java:341 [iajc] at org.apache.tools.ant.Target.performTasks Target.java:369 [iajc] at org.apache.tools.ant.Project.executeTarget Project.java:1214 [iajc] at org.apache.tools.ant.Project.executeTargets Project.java:1062 [iajc] at org.apache.tools.ant.Main.runBuild Main.java:673 [iajc] at org.apache.tools.ant.Main.startAnt Main.java:188 [iajc] at org.apache.tools.ant.launch.Launcher.run Launcher.java:196 [iajc] at org.apache.tools.ant.launch.Launcher.main Launcher.java:55 [iajc] Caused by: java.util.zip.ZipException: error in opening zip file [iajc] java.util.zip.ZipException: error in opening zip file [iajc] at java.util.zip.ZipFile.open Native Method [iajc] at java.util.zip.ZipFile.&amp;lt;init&amp;gt; ZipFile.java:111 [iajc] at java.util.zip.ZipFile.&amp;lt;init&amp;gt; ZipFile.java:127 [iajc] at org.aspectj.weaver.bcel.ClassPathManager$ZipFileEntry.ensureO pen ClassPathManager.java:252 [iajc] at org.aspectj.weaver.bcel.ClassPathManager$ZipFileEntry.find Cl assPathManager.java:225 [iajc] at org.aspectj.weaver.bcel.ClassPathManager.find ClassPathManage r.java:92 [iajc] at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate BcelWorld.j ava:287 [iajc] at org.aspectj.weaver.World.resolveToReferenceType World.java:33 5 [iajc] at org.aspectj.weaver.World.resolve World.java:251 [iajc] at org.aspectj.weaver.patterns.WildTypePattern.lookupTypeInWorld WildTypePattern.java:716 [iajc] at org.aspectj.weaver.patterns.WildTypePattern.resolveBindingsFr omFullyQualifiedTypeName WildTypePattern.java:690 [iajc] at org.aspectj.weaver.patterns.WildTypePattern.resolveBindings W ildTypePattern.java:623 [iajc] at org.aspectj.weaver.patterns.SignaturePattern.resolveBindings SignaturePattern.java:82 [iajc] at org.aspectj.weaver.patterns.KindedPointcut.resolveBindings Ki ndedPointcut.java:259 [iajc] at org.aspectj.weaver.patterns.AndPointcut.resolveBindings AndPo intcut.java:74 [iajc] at org.aspectj.weaver.patterns.Pointcut.resolve Pointcut.java:19 4 [iajc] at org.aspectj.ajdt.internal.compiler.ast.PointcutDesignator.fin ishResolveTypes PointcutDesignator.java:84 [iajc] at org.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration.reso lveStatements AdviceDeclaration.java:118 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMet hodDeclaration.resolve AbstractMethodDeclaration.java:400 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclara tion.resolve TypeDeclaration.java:1088 [iajc] at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.reso lve AspectDeclaration.java:116 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclara tion.resolve TypeDeclaration.java:1137 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Compilation UnitDeclaration.resolve CompilationUnitDeclaration.java:305 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.proces s Compiler.java:514 [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compil e Compiler.java:329 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.perform Compilation AjBuildManager.java:845 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:241 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBu ild AjBuildManager.java:161 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:1 12 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java: 60 [iajc] at org.aspectj.tools.ajc.Main.run Main.java:356 [iajc] at org.aspectj.tools.ajc.Main.runMain Main.java:246 [iajc] at org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM AjcTas k.java:1262 [iajc] at org.aspectj.tools.ant.taskdefs.AjcTask.execute AjcTask.java:1 056 [iajc] at org.apache.tools.ant.UnknownElement.execute UnknownElement.ja va:275 [iajc] at org.apache.tools.ant.Task.perform Task.java:364 [iajc] at org.apache.tools.ant.Target.execute Target.java:341 [iajc] at org.apache.tools.ant.Target.performTasks Target.java:369 [iajc] at org.apache.tools.ant.Project.executeTarget Project.java:1214 [iajc] at org.apache.tools.ant.taskdefs.Ant.execute Ant.java:386 [iajc] at org.apache.tools.ant.taskdefs.CallTarget.execute CallTarget.j ava:106 [iajc] at org.apache.tools.ant.UnknownElement.execute UnknownElement.ja va:275 [iajc] at org.apache.tools.ant.Task.perform Task.java:364 [iajc] at org.apache.tools.ant.Target.execute Target.java:341 [iajc] at org.apache.tools.ant.Target.performTasks Target.java:369 [iajc] at org.apache.tools.ant.Project.executeTarget Project.java:1214 [iajc] at org.apache.tools.ant.Project.executeTargets Project.java:1062 [iajc] at org.apache.tools.ant.Main.runBuild Main.java:673 [iajc] at org.apache.tools.ant.Main.startAnt Main.java:188 [iajc] at org.apache.tools.ant.launch.Launcher.run Launcher.java:196 [iajc] at org.apache.tools.ant.launch.Launcher.main Launcher.java:55 [iajc] abort ABORT -- BCException Can't open archive: wissing.jar [iajc] when resolving types defined in compilation unit File.aj [iajc] when processing compilation unit File.aj [iajc] when batch building BuildConfig[null] #Files=14</description>
    <commit commitTime="2006-04-18 10:51:38" id="d1a252e"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/ClassPathManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="138540" reportTime="2006-04-25 20:18:00">
    <summary>Patch to add support for -Xset: options</summary>
    <description>I needed to add X="set:activateLightweightDelegates=false” to my ant build configuration, to troubleshoot the out of memory permgen condition. However, the ant task support doesn't currently support adding the new -Xset style options Andy added. Here is a small patch to pass any -Xset: options through, that worked for me.</description>
    <commit commitTime="2006-04-26 07:25:49" id="99882cb"/>
    <fixedFiles>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="138798" reportTime="2006-04-26 20:53:00">
    <summary>BCException on invalid annotation match</summary>
    <description>This unfortunately invalid code: before Throwable throwable, NormalException normalException : handler * &amp;amp;&amp;amp; args throwable &amp;amp;&amp;amp; @withincode normalException { ... Generates this exception in AJDT with post-1.5.1a AspectJ org.aspectj.weaver.BCException at org.aspectj.weaver.bcel.BcelRenderer.visit BcelRenderer.java:237 at org.aspectj.weaver.ast.Literal.accept Literal.java:29 at org.aspectj.weaver.bcel.BcelRenderer.recur BcelRenderer.java:153 at org.aspectj.weaver.bcel.BcelRenderer.renderTest BcelRenderer.java:119 at org.aspectj.weaver.bcel.BcelAdvice.getTestInstructions BcelAdvice.java:537 at org.aspectj.weaver.bcel.BcelAdvice.getAdviceInstructions BcelAdvice.java:376 at org.aspectj.weaver.bcel.BcelShadow.weaveBefore BcelShadow.java:1690 at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:208 at org.aspectj.weaver.Shadow.implementMungers Shadow.java:639 at org.aspectj.weaver.Shadow.implement Shadow.java:456 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:2236 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:491 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:109 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1560 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1511 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1291 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1113 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:311 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:183 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:862 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:242 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:161 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 trouble in: public class glassbox.client.ConnectionManager extends java.lang.Object: public static String propnameNum public static String propnameDefault public static String propnameViewed public static String propnameNickPrefix public static String propnameUrlPrefix public static String propnameViewedPrefix private static String propFilename private static String localhostNickname public static String localhostURL private java.util.List connectionList [Signature Ljava/util/List&amp;lt;Lglassbox/client/ConnectionManager$AgentConnection;&amp;gt;; ] private int defaultConnectionIndex private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0 static void &amp;lt;clinit&amp;gt; : staticinitialization void glassbox.client.ConnectionManager.&amp;lt;clinit&amp;gt; | LDC "glassbox.connections.num" line 13 | PUTSTATIC glassbox.client.ConnectionManager.propnameNum Ljava/lang/String; | LDC "glassbox.connections.default" line 14 | PUTSTATIC glassbox.client.ConnectionManager.propnameDefault Ljava/lang/String; | LDC "glassbox.connections.viewed" line 15 | PUTSTATIC glassbox.client.ConnectionManager.propnameViewed Ljava/lang/String; | LDC "glassbox.connections.nickname_" line 16 | PUTSTATIC glassbox.client.ConnectionManager.propnameNickPrefix Ljava/lang/String; | LDC "glassbox.connections.url_" line 17 | PUTSTATIC glassbox.client.ConnectionManager.propnameUrlPrefix Ljava/lang/String; | LDC "glassbox.connections.viewed_" line 18 | PUTSTATIC glassbox.client.ConnectionManager.propnameViewedPrefix Ljava/lang/String; | LDC "connection.properties" line 20 | PUTSTATIC glassbox.client.ConnectionManager.propFilename Ljava/lang/String; | LDC "localhost" line 21 | PUTSTATIC glassbox.client.ConnectionManager.localhostNickname Ljava/lang/String; | LDC "service:jmx:rmi://localhost:7131/jndi/rmi://localhost:7132/GlassboxTroubleshooter" line 22 | PUTSTATIC glassbox.client.ConnectionManager.localhostURL Ljava/lang/String; | RETURN line 11 staticinitialization void glassbox.client.ConnectionManager.&amp;lt;clinit&amp;gt; end static void &amp;lt;clinit&amp;gt; public void &amp;lt;init&amp;gt; org.aspectj.weaver.MethodDeclarationLineNumber: 23:966 : ALOAD_0 // Lglassbox/client/ConnectionManager; this line 23 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V constructor-execution void glassbox.client.ConnectionManager.&amp;lt;init&amp;gt; | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 24 | INVOKEVIRTUAL glassbox.client.ConnectionManager.init V | RETURN line 25 constructor-execution void glassbox.client.ConnectionManager.&amp;lt;init&amp;gt; end public void &amp;lt;init&amp;gt; public void init org.aspectj.weaver.MethodDeclarationLineNumber: 67:1992 : method-execution void glassbox.client.ConnectionManager.init | catch java.lang.RuntimeException -&amp;gt; E0 | | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 69 | | INVOKEVIRTUAL glassbox.client.ConnectionManager.readFromFile V | | GOTO L0 | catch java.lang.RuntimeException -&amp;gt; E0 | E0: ASTORE_2 | exception-handler void glassbox.client.ConnectionManager.&amp;lt;catch&amp;gt; java.lang.RuntimeException | | ALOAD_2 | exception-handler void glassbox.client.ConnectionManager.&amp;lt;catch&amp;gt; java.lang.RuntimeException | ASTORE_1 line 70 | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 71 | INVOKEVIRTUAL glassbox.client.ConnectionManager.createDefaultList V | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 72 | INVOKEVIRTUAL glassbox.client.ConnectionManager.writeToFile V | L0: RETURN line 74 method-execution void glassbox.client.ConnectionManager.init end public void init public void createDefaultList org.aspectj.weaver.MethodDeclarationLineNumber: 76:2134 : method-execution void glassbox.client.ConnectionManager.createDefaultList | NEW glassbox.client.ConnectionManager$AgentConnection line 77 | DUP | ALOAD_0 // Lglassbox/client/ConnectionManager; this | GETSTATIC glassbox.client.ConnectionManager.localhostNickname Ljava/lang/String; | GETSTATIC glassbox.client.ConnectionManager.localhostURL Ljava/lang/String; | ICONST_1 | INVOKESPECIAL glassbox.client.ConnectionManager$AgentConnection.&amp;lt;init&amp;gt; Lglassbox/client/ConnectionManager;Ljava/lang/String;Ljava/lang/String;Z V | ASTORE_1 | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 78 | NEW java.util.ArrayList | DUP | INVOKESPECIAL java.util.ArrayList.&amp;lt;init&amp;gt; V | PUTFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 79 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | ALOAD_1 // Lglassbox/client/ConnectionManager$AgentConnection; localhost | INVOKEINTERFACE java.util.List.add Ljava/lang/Object; Z | POP | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 80 | ICONST_0 | PUTFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I | RETURN line 81 method-execution void glassbox.client.ConnectionManager.createDefaultList end public void createDefaultList public void writeToFile org.aspectj.weaver.MethodDeclarationLineNumber: 84:2433 : method-execution void glassbox.client.ConnectionManager.writeToFile | NEW java.util.Properties line 85 | DUP | INVOKESPECIAL java.util.Properties.&amp;lt;init&amp;gt; V | ASTORE_1 | ALOAD_1 // Ljava/util/Properties; properties line 86 | GETSTATIC glassbox.client.ConnectionManager.propnameNum Ljava/lang/String; | ALOAD_0 // Lglassbox/client/ConnectionManager; this | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | INVOKEINTERFACE java.util.List.size I | INVOKESTATIC java.lang.String.valueOf I Ljava/lang/String; | INVOKEVIRTUAL java.util.Properties.setProperty Ljava/lang/String;Ljava/lang/String; Ljava/lang/Object; | POP | ALOAD_1 // Ljava/util/Properties; properties line 87 | GETSTATIC glassbox.client.ConnectionManager.propnameDefault Ljava/lang/String; | ALOAD_0 // Lglassbox/client/ConnectionManager; this | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | ALOAD_0 // Lglassbox/client/ConnectionManager; this | GETFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I | INVOKEINTERFACE java.util.List.get I Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname Ljava/lang/String; | INVOKEVIRTUAL java.util.Properties.setProperty Ljava/lang/String;Ljava/lang/String; Ljava/lang/Object; | POP | ICONST_0 line 88 | ISTORE_2 | GOTO L1 | L0: ALOAD_1 // Ljava/util/Properties; properties line 89 | NEW java.lang.StringBuilder | DUP | GETSTATIC glassbox.client.ConnectionManager.propnameNickPrefix Ljava/lang/String; | INVOKESTATIC java.lang.String.valueOf Ljava/lang/Object; Ljava/lang/String; | INVOKESPECIAL java.lang.StringBuilder.&amp;lt;init&amp;gt; Ljava/lang/String; V | ILOAD_2 // I i | INVOKEVIRTUAL java.lang.StringBuilder.append I Ljava/lang/StringBuilder; | INVOKEVIRTUAL java.lang.StringBuilder.toString Ljava/lang/String; | ALOAD_0 // Lglassbox/client/ConnectionManager; this | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | ILOAD_2 // I i | INVOKEINTERFACE java.util.List.get I Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname Ljava/lang/String; | INVOKEVIRTUAL java.util.Properties.setProperty Ljava/lang/String;Ljava/lang/String; Ljava/lang/Object; | POP | ALOAD_1 // Ljava/util/Properties; properties line 90 | NEW java.lang.StringBuilder | DUP | GETSTATIC glassbox.client.ConnectionManager.propnameUrlPrefix Ljava/lang/String; | INVOKESTATIC java.lang.String.valueOf Ljava/lang/Object; Ljava/lang/String; | INVOKESPECIAL java.lang.StringBuilder.&amp;lt;init&amp;gt; Ljava/lang/String; V | ILOAD_2 // I i | INVOKEVIRTUAL java.lang.StringBuilder.append I Ljava/lang/StringBuilder; | INVOKEVIRTUAL java.lang.StringBuilder.toString Ljava/lang/String; | ALOAD_0 // Lglassbox/client/ConnectionManager; this | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | ILOAD_2 // I i | INVOKEINTERFACE java.util.List.get I Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getUrl Ljava/lang/String; | INVOKEVIRTUAL java.util.Properties.setProperty Ljava/lang/String;Ljava/lang/String; Ljava/lang/Object; | POP | ALOAD_1 // Ljava/util/Properties; properties line 91 | NEW java.lang.StringBuilder | DUP | GETSTATIC glassbox.client.ConnectionManager.propnameViewedPrefix Ljava/lang/String; | INVOKESTATIC java.lang.String.valueOf Ljava/lang/Object; Ljava/lang/String; | INVOKESPECIAL java.lang.StringBuilder.&amp;lt;init&amp;gt; Ljava/lang/String; V | ILOAD_2 // I i | INVOKEVIRTUAL java.lang.StringBuilder.append I Ljava/lang/StringBuilder; | INVOKEVIRTUAL java.lang.StringBuilder.toString Ljava/lang/String; | ALOAD_0 // Lglassbox/client/ConnectionManager; this | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | ILOAD_2 // I i | INVOKEINTERFACE java.util.List.get I Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.isViewed Z | INVOKESTATIC java.lang.String.valueOf Z Ljava/lang/String; | INVOKEVIRTUAL java.util.Properties.setProperty Ljava/lang/String;Ljava/lang/String; Ljava/lang/Object; | POP | IINC 2 1 // I i line 88 | L1: ILOAD_2 // I i | ALOAD_0 // Lglassbox/client/ConnectionManager; this | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | INVOKEINTERFACE java.util.List.size I | IF_ICMPLT L0 | catch java.io.IOException -&amp;gt; E0 | | NEW java.io.File line 94 | | DUP | | GETSTATIC glassbox.client.ConnectionManager.propFilename Ljava/lang/String; | | INVOKESPECIAL java.io.File.&amp;lt;init&amp;gt; Ljava/lang/String; V | | ASTORE_2 | | NEW java.io.FileOutputStream line 95 | | DUP | | ALOAD_2 // Ljava/io/File; f | | ICONST_0 | | INVOKESPECIAL java.io.FileOutputStream.&amp;lt;init&amp;gt; Ljava/io/File;Z V | | ASTORE_3 | | ALOAD_1 // Ljava/util/Properties; properties line 96 | | ALOAD_3 // Ljava/io/FileOutputStream; fos | | ACONST_NULL | | INVOKEVIRTUAL java.util.Properties.store Ljava/io/OutputStream;Ljava/lang/String; V | | ALOAD_3 // Ljava/io/FileOutputStream; fos line 97 | | INVOKEVIRTUAL java.io.FileOutputStream.close V | | GOTO L2 | catch java.io.IOException -&amp;gt; E0 | E0: ASTORE_2 line 98 | GETSTATIC java.lang.System.err Ljava/io/PrintStream; line 99 | LDC "Failed to write connection.properties file" | INVOKEVIRTUAL java.io.PrintStream.println Ljava/lang/String; V | GETSTATIC java.lang.System.err Ljava/io/PrintStream; line 100 | ALOAD_2 // Ljava/io/IOException; e | INVOKEVIRTUAL java.io.IOException.toString Ljava/lang/String; | INVOKEVIRTUAL java.io.PrintStream.println Ljava/lang/String; V | L2: RETURN line 102 method-execution void glassbox.client.ConnectionManager.writeToFile end public void writeToFile public void readFromFile org.aspectj.weaver.MethodDeclarationLineNumber: 105:3495 : method-execution void glassbox.client.ConnectionManager.readFromFile | NEW java.util.ArrayList line 107 | DUP | INVOKESPECIAL java.util.ArrayList.&amp;lt;init&amp;gt; V | ASTORE_1 | NEW java.util.Properties line 108 | DUP | INVOKESPECIAL java.util.Properties.&amp;lt;init&amp;gt; V | ASTORE_2 | NEW java.io.File line 110 | DUP | GETSTATIC glassbox.client.ConnectionManager.propFilename Ljava/lang/String; | INVOKESPECIAL java.io.File.&amp;lt;init&amp;gt; Ljava/lang/String; V | ASTORE 4 | catch java.io.IOException -&amp;gt; E0 | | ALOAD_2 // Ljava/util/Properties; properties line 112 | | NEW java.io.FileInputStream | | DUP | | ALOAD 4 // Ljava/io/File; f | | INVOKESPECIAL java.io.FileInputStream.&amp;lt;init&amp;gt; Ljava/io/File; V | | INVOKEVIRTUAL java.util.Properties.load Ljava/io/InputStream; V | | GOTO L0 | catch java.io.IOException -&amp;gt; E0 | E0: ASTORE 5 line 113 | NEW java.lang.RuntimeException line 116 | DUP | NEW java.lang.StringBuilder | DUP | LDC "Can't open " | INVOKESPECIAL java.lang.StringBuilder.&amp;lt;init&amp;gt; Ljava/lang/String; V | ALOAD 4 // Ljava/io/File; f | INVOKEVIRTUAL java.io.File.getAbsolutePath Ljava/lang/String; | INVOKEVIRTUAL java.lang.StringBuilder.append Ljava/lang/String; Ljava/lang/StringBuilder; | INVOKEVIRTUAL java.lang.StringBuilder.toString Ljava/lang/String; | INVOKESPECIAL java.lang.RuntimeException.&amp;lt;init&amp;gt; Ljava/lang/String; V | ATHROW | catch java.lang.Exception -&amp;gt; E1 | | L0: ALOAD_2 // Ljava/util/Properties; properties line 119 | | GETSTATIC glassbox.client.ConnectionManager.propnameNum Ljava/lang/String; | | INVOKEVIRTUAL java.util.Properties.getProperty Ljava/lang/String; Ljava/lang/String; | | INVOKESTATIC java.lang.Integer.valueOf Ljava/lang/String; Ljava/lang/Integer; | | INVOKEVIRTUAL java.lang.Integer.intValue I | | ISTORE 5 | | ALOAD_2 // Ljava/util/Properties; properties line 120 | | GETSTATIC glassbox.client.ConnectionManager.propnameDefault Ljava/lang/String; | | INVOKEVIRTUAL java.util.Properties.getProperty Ljava/lang/String; Ljava/lang/String; | | ASTORE 6 | | ALOAD 6 // Ljava/lang/String; defNickname line 121 | | IFNONNULL L1 | | NEW java.lang.RuntimeException | | DUP | | NEW java.lang.StringBuilder | | DUP | | LDC "missing " | | INVOKESPECIAL java.lang.StringBuilder.&amp;lt;init&amp;gt; Ljava/lang/String; V | | GETSTATIC glassbox.client.ConnectionManager.propnameDefault Ljava/lang/String; | | INVOKEVIRTUAL java.lang.StringBuilder.append Ljava/lang/String; Ljava/lang/StringBuilder; | | INVOKEVIRTUAL java.lang.StringBuilder.toString Ljava/lang/String; | | INVOKESPECIAL java.lang.RuntimeException.&amp;lt;init&amp;gt; Ljava/lang/String; V | | ATHROW | | L1: ILOAD 5 // I num line 122 | | ICONST_1 | | IF_ICMPGE L2 | | NEW java.lang.RuntimeException | | DUP | | NEW java.lang.StringBuilder | | DUP | | LDC "Bad " | | INVOKESPECIAL java.lang.StringBuilder.&amp;lt;init&amp;gt; Ljava/lang/String; V | | GETSTATIC glassbox.client.ConnectionManager.propnameNum Ljava/lang/String; | | INVOKEVIRTUAL java.lang.StringBuilder.append Ljava/lang/String; Ljava/lang/StringBuilder; | | LDC "=" | | INVOKEVIRTUAL java.lang.StringBuilder.append Ljava/lang/String; Ljava/lang/StringBuilder; | | ILOAD 5 // I num | | INVOKEVIRTUAL java.lang.StringBuilder.append I Ljava/lang/StringBuilder; | | INVOKEVIRTUAL java.lang.StringBuilder.toString Ljava/lang/String; | | INVOKESPECIAL java.lang.RuntimeException.&amp;lt;init&amp;gt; Ljava/lang/String; V | | ATHROW | | L2: ICONST_0 line 123 | | ISTORE 7 | | GOTO L9 | | L3: ALOAD_2 // Ljava/util/Properties; properties line 124 | | NEW java.lang.StringBuilder | | DUP | | GETSTATIC glassbox.client.ConnectionManager.propnameNickPrefix Ljava/lang/String; | | INVOKESTATIC java.lang.String.valueOf Ljava/lang/Object; Ljava/lang/String; | | INVOKESPECIAL java.lang.StringBuilder.&amp;lt;init&amp;gt; Ljava/lang/String; V | | ILOAD 7 // I i | | INVOKEVIRTUAL java.lang.StringBuilder.append I Ljava/lang/StringBuilder; | | INVOKEVIRTUAL java.lang.StringBuilder.toString Ljava/lang/String; | | INVOKEVIRTUAL java.util.Properties.getProperty Ljava/lang/String; Ljava/lang/String; | | ASTORE 8 | | ALOAD 8 // Ljava/lang/String; nickname line 125 | | IFNONNULL L4 | | NEW java.lang.RuntimeException | | DUP | | NEW java.lang.StringBuilder | | DUP | | LDC "missing " | | INVOKESPECIAL java.lang.StringBuilder.&amp;lt;init&amp;gt; Ljava/lang/String; V | | GETSTATIC glassbox.client.ConnectionManager.propnameNickPrefix Ljava/lang/String; | | INVOKEVIRTUAL java.lang.StringBuilder.append Ljava/lang/String; Ljava/lang/StringBuilder; | | ILOAD 7 // I i | | INVOKEVIRTUAL java.lang.StringBuilder.append I Ljava/lang/StringBuilder; | | INVOKEVIRTUAL java.lang.StringBuilder.toString Ljava/lang/String; | | INVOKESPECIAL java.lang.RuntimeException.&amp;lt;init&amp;gt; Ljava/lang/String; V | | ATHROW | | L4: ALOAD_2 // Ljava/util/Properties; properties line 126 | | NEW java.lang.StringBuilder | | DUP | | GETSTATIC glassbox.client.ConnectionManager.propnameUrlPrefix Ljava/lang/String; | | INVOKESTATIC java.lang.String.valueOf Ljava/lang/Object; Ljava/lang/String; | | INVOKESPECIAL java.lang.StringBuilder.&amp;lt;init&amp;gt; Ljava/lang/String; V | | ILOAD 7 // I i | | INVOKEVIRTUAL java.lang.StringBuilder.append I Ljava/lang/StringBuilder; | | INVOKEVIRTUAL java.lang.StringBuilder.toString Ljava/lang/String; | | INVOKEVIRTUAL java.util.Properties.getProperty Ljava/lang/String; Ljava/lang/String; | | ASTORE 9 | | ALOAD 9 // Ljava/lang/String; url line 127 | | IFNONNULL L5 | | NEW java.lang.RuntimeException | | DUP | | NEW java.lang.StringBuilder | | DUP | | LDC "missing " | | INVOKESPECIAL java.lang.StringBuilder.&amp;lt;init&amp;gt; Ljava/lang/String; V | | GETSTATIC glassbox.client.ConnectionManager.propnameUrlPrefix Ljava/lang/String; | | INVOKEVIRTUAL java.lang.StringBuilder.append Ljava/lang/String; Ljava/lang/StringBuilder; | | ILOAD 7 // I i | | INVOKEVIRTUAL java.lang.StringBuilder.append I Ljava/lang/StringBuilder; | | INVOKEVIRTUAL java.lang.StringBuilder.toString Ljava/lang/String; | | INVOKESPECIAL java.lang.RuntimeException.&amp;lt;init&amp;gt; Ljava/lang/String; V | | ATHROW | | L5: ALOAD_2 // Ljava/util/Properties; properties line 128 | | NEW java.lang.StringBuilder | | DUP | | GETSTATIC glassbox.client.ConnectionManager.propnameViewedPrefix Ljava/lang/String; | | INVOKESTATIC java.lang.String.valueOf Ljava/lang/Object; Ljava/lang/String; | | INVOKESPECIAL java.lang.StringBuilder.&amp;lt;init&amp;gt; Ljava/lang/String; V | | ILOAD 7 // I i | | INVOKEVIRTUAL java.lang.StringBuilder.append I Ljava/lang/StringBuilder; | | INVOKEVIRTUAL java.lang.StringBuilder.toString Ljava/lang/String; | | INVOKEVIRTUAL java.util.Properties.getProperty Ljava/lang/String; Ljava/lang/String; | | ASTORE 10 | | ALOAD 10 // Ljava/lang/String; viewedStr line 129 | | LDC "true" | | INVOKEVIRTUAL java.lang.String.contentEquals Ljava/lang/CharSequence; Z | | IFEQ L6 | | ICONST_1 | | GOTO L7 | | L6: ICONST_0 | | L7: ISTORE_3 | | ALOAD 9 // Ljava/lang/String; url line 130 | | IFNONNULL L8 | | NEW java.lang.RuntimeException | | DUP | | NEW java.lang.StringBuilder | | DUP | | LDC "missing " | | INVOKESPECIAL java.lang.StringBuilder.&amp;lt;init&amp;gt; Ljava/lang/String; V | | GETSTATIC glassbox.client.ConnectionManager.propnameViewedPrefix Ljava/lang/String; | | INVOKEVIRTUAL java.lang.StringBuilder.append Ljava/lang/String; Ljava/lang/StringBuilder; | | ILOAD 7 // I i | | INVOKEVIRTUAL java.lang.StringBuilder.append I Ljava/lang/StringBuilder; | | INVOKEVIRTUAL java.lang.StringBuilder.toString Ljava/lang/String; | | INVOKESPECIAL java.lang.RuntimeException.&amp;lt;init&amp;gt; Ljava/lang/String; V | | ATHROW | | L8: ALOAD_1 // Ljava/util/List; agcon line 131 | | NEW glassbox.client.ConnectionManager$AgentConnection | | DUP | | ALOAD_0 // Lglassbox/client/ConnectionManager; this | | ALOAD 8 // Ljava/lang/String; nickname | | ALOAD 9 // Ljava/lang/String; url | | ILOAD_3 // Z viewed | | INVOKESPECIAL glassbox.client.ConnectionManager$AgentConnection.&amp;lt;init&amp;gt; Lglassbox/client/ConnectionManager;Ljava/lang/String;Ljava/lang/String;Z V | | INVOKEINTERFACE java.util.List.add Ljava/lang/Object; Z | | POP | | IINC 7 1 // I i line 123 | | L9: ILOAD 7 // I i | | ILOAD 5 // I num | | IF_ICMPLT L3 | | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 133 | | ICONST_M1 | | PUTFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I | | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 134 | | ALOAD_1 // Ljava/util/List; agcon | | PUTFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 135 | | ALOAD 6 // Ljava/lang/String; defNickname | | INVOKEVIRTUAL glassbox.client.ConnectionManager.setAsDefault Ljava/lang/String; V | | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 136 | | GETFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I | | ICONST_M1 | | IF_ICMPNE L10 | | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 137 | | ICONST_0 | | PUTFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I | | GOTO L10 | catch java.lang.Exception -&amp;gt; E1 | E1: ASTORE 5 line 140 | GETSTATIC java.lang.System.err Ljava/io/PrintStream; line 141 | LDC "Failed to read connection.properties file" | INVOKEVIRTUAL java.io.PrintStream.println Ljava/lang/String; V | ALOAD 5 // Ljava/lang/Exception; e2 line 142 | INVOKEVIRTUAL java.lang.Exception.printStackTrace V | NEW java.lang.RuntimeException line 143 | DUP | ALOAD 5 // Ljava/lang/Exception; e2 | INVOKESPECIAL java.lang.RuntimeException.&amp;lt;init&amp;gt; Ljava/lang/Throwable; V | ATHROW | L10: RETURN line 145 method-execution void glassbox.client.ConnectionManager.readFromFile end public void readFromFile public void delete String org.aspectj.weaver.MethodDeclarationLineNumber: 147:5452 : method-execution void glassbox.client.ConnectionManager.delete java.lang.String | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 148 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | INVOKEINTERFACE java.util.List.size I | ICONST_1 | IF_ICMPGT L0 | RETURN | L0: ALOAD_0 // Lglassbox/client/ConnectionManager; this line 149 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | INVOKEINTERFACE java.util.List.iterator Ljava/util/Iterator; | ASTORE_3 | GOTO L3 | L1: ALOAD_3 | INVOKEINTERFACE java.util.Iterator.next Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | ASTORE_2 | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con line 151 | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname Ljava/lang/String; | ALOAD_1 // Ljava/lang/String; nickname | INVOKEVIRTUAL java.lang.String.equals Ljava/lang/Object; Z | IFEQ L3 | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 152 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con | INVOKEINTERFACE java.util.List.lastIndexOf Ljava/lang/Object; I | ALOAD_0 // Lglassbox/client/ConnectionManager; this | GETFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I | IF_ICMPNE L2 | ALOAD_0 // Lglassbox/client/ConnectionManager; this | ICONST_0 | PUTFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I | L2: ALOAD_0 // Lglassbox/client/ConnectionManager; this line 154 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con | INVOKEINTERFACE java.util.List.remove Ljava/lang/Object; Z | POP | GOTO L4 line 155 | L3: ALOAD_3 line 149 | INVOKEINTERFACE java.util.Iterator.hasNext Z | IFNE L1 | L4: RETURN line 158 method-execution void glassbox.client.ConnectionManager.delete java.lang.String end public void delete String public void setAsDefault String org.aspectj.weaver.MethodDeclarationLineNumber: 160:5880 : method-execution void glassbox.client.ConnectionManager.setAsDefault java.lang.String | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 161 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | INVOKEINTERFACE java.util.List.iterator Ljava/util/Iterator; | ASTORE_3 | GOTO L1 | L0: ALOAD_3 | INVOKEINTERFACE java.util.Iterator.next Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | ASTORE_2 | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con line 162 | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname Ljava/lang/String; | ALOAD_1 // Ljava/lang/String; nickname | INVOKEVIRTUAL java.lang.String.equals Ljava/lang/Object; Z | IFEQ L1 | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 163 | ALOAD_0 // Lglassbox/client/ConnectionManager; this | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con | INVOKEINTERFACE java.util.List.lastIndexOf Ljava/lang/Object; I | PUTFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con line 164 | ICONST_1 | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.setViewed Z V | GOTO L2 line 165 | L1: ALOAD_3 line 161 | INVOKEINTERFACE java.util.Iterator.hasNext Z | IFNE L0 | L2: RETURN line 168 method-execution void glassbox.client.ConnectionManager.setAsDefault java.lang.String end public void setAsDefault String public void setSelectViewed String, boolean org.aspectj.weaver.MethodDeclarationLineNumber: 170:6156 : method-execution void glassbox.client.ConnectionManager.setSelectViewed java.lang.String, boolean | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 171 | INVOKEVIRTUAL glassbox.client.ConnectionManager.getDefaultNick Ljava/lang/String; | ASTORE_3 | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 172 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | INVOKEINTERFACE java.util.List.iterator Ljava/util/Iterator; | ASTORE 5 | GOTO L2 | L0: ALOAD 5 | INVOKEINTERFACE java.util.Iterator.next Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | ASTORE 4 | ALOAD 4 // Lglassbox/client/ConnectionManager$AgentConnection; con line 173 | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname Ljava/lang/String; | ALOAD_1 // Ljava/lang/String; nickname | INVOKEVIRTUAL java.lang.String.equals Ljava/lang/Object; Z | IFEQ L2 | ILOAD_2 // Z val line 174 | IFNE L1 | ALOAD_3 // Ljava/lang/String; defNick | ALOAD 4 // Lglassbox/client/ConnectionManager$AgentConnection; con | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname Ljava/lang/String; | IF_ACMPEQ L2 | L1: ALOAD 4 // Lglassbox/client/ConnectionManager$AgentConnection; con line 177 | ILOAD_2 // Z val | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.setViewed Z V | GOTO L3 line 178 | L2: ALOAD 5 line 172 | INVOKEINTERFACE java.util.Iterator.hasNext Z | IFNE L0 | L3: RETURN line 182 method-execution void glassbox.client.ConnectionManager.setSelectViewed java.lang.String, boolean end public void setSelectViewed String, boolean public boolean getSelectViewed String org.aspectj.weaver.MethodDeclarationLineNumber: 184:6636 : method-execution boolean glassbox.client.ConnectionManager.getSelectViewed java.lang.String | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 185 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | INVOKEINTERFACE java.util.List.iterator Ljava/util/Iterator; | ASTORE_3 | GOTO L1 | L0: ALOAD_3 | INVOKEINTERFACE java.util.Iterator.next Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | ASTORE_2 | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con line 186 | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname Ljava/lang/String; | ALOAD_1 // Ljava/lang/String; nickname | INVOKEVIRTUAL java.lang.String.equals Ljava/lang/Object; Z | IFEQ L1 | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con line 187 | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.isViewed Z | IRETURN | L1: ALOAD_3 line 185 | INVOKEINTERFACE java.util.Iterator.hasNext Z | IFNE L0 | ICONST_0 line 190 | IRETURN method-execution boolean glassbox.client.ConnectionManager.getSelectViewed java.lang.String end public boolean getSelectViewed String public String getNicknameFromURL String org.aspectj.weaver.MethodDeclarationLineNumber: 193:6903 : method-execution java.lang.String glassbox.client.ConnectionManager.getNicknameFromURL java.lang.String | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 194 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | INVOKEINTERFACE java.util.List.iterator Ljava/util/Iterator; | ASTORE_3 | GOTO L1 | L0: ALOAD_3 | INVOKEINTERFACE java.util.Iterator.next Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | ASTORE_2 | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con line 195 | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getUrl Ljava/lang/String; | ALOAD_1 // Ljava/lang/String; url | INVOKEVIRTUAL java.lang.String.equals Ljava/lang/Object; Z | IFEQ L1 | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con line 196 | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname Ljava/lang/String; | ARETURN | L1: ALOAD_3 line 194 | INVOKEINTERFACE java.util.Iterator.hasNext Z | IFNE L0 | LDC_W " " line 199 | ARETURN method-execution java.lang.String glassbox.client.ConnectionManager.getNicknameFromURL java.lang.String end public String getNicknameFromURL String public glassbox.client.ConnectionManager$AgentConnection getAgentConnectionFromURL String org.aspectj.weaver.MethodDeclarationLineNumber: 202:7168 : method-execution glassbox.client.ConnectionManager$AgentConnection glassbox.client.ConnectionManager.getAgentConnectionFromURL java.lang.String | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 203 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | INVOKEINTERFACE java.util.List.iterator Ljava/util/Iterator; | ASTORE_3 | GOTO L1 | L0: ALOAD_3 | INVOKEINTERFACE java.util.Iterator.next Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | ASTORE_2 | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con line 204 | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getUrl Ljava/lang/String; | ALOAD_1 // Ljava/lang/String; url | INVOKEVIRTUAL java.lang.String.equals Ljava/lang/Object; Z | IFEQ L1 | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con line 205 | ARETURN | L1: ALOAD_3 line 203 | INVOKEINTERFACE java.util.Iterator.hasNext Z | IFNE L0 | ACONST_NULL line 209 | ARETURN method-execution glassbox.client.ConnectionManager$AgentConnection glassbox.client.ConnectionManager.getAgentConnectionFromURL java.lang.String end public glassbox.client.ConnectionManager$AgentConnection getAgentConnectionFromURL String public glassbox.client.ConnectionManager$AgentConnection getAgentConnectionFromNick String org.aspectj.weaver.MethodDeclarationLineNumber: 212:7429 : method-execution glassbox.client.ConnectionManager$AgentConnection glassbox.client.ConnectionManager.getAgentConnectionFromNick java.lang.String | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 213 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | INVOKEINTERFACE java.util.List.iterator Ljava/util/Iterator; | ASTORE_3 | GOTO L1 | L0: ALOAD_3 | INVOKEINTERFACE java.util.Iterator.next Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | ASTORE_2 | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con line 214 | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname Ljava/lang/String; | ALOAD_1 // Ljava/lang/String; nickname | INVOKEVIRTUAL java.lang.String.equals Ljava/lang/Object; Z | IFEQ L1 | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con line 215 | ARETURN | L1: ALOAD_3 line 213 | INVOKEINTERFACE java.util.Iterator.hasNext Z | IFNE L0 | ACONST_NULL line 218 | ARETURN method-execution glassbox.client.ConnectionManager$AgentConnection glassbox.client.ConnectionManager.getAgentConnectionFromNick java.lang.String end public glassbox.client.ConnectionManager$AgentConnection getAgentConnectionFromNick String public String getURLFromNick String org.aspectj.weaver.MethodDeclarationLineNumber: 221:7695 : method-execution java.lang.String glassbox.client.ConnectionManager.getURLFromNick java.lang.String | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 222 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | INVOKEINTERFACE java.util.List.iterator Ljava/util/Iterator; | ASTORE_3 | GOTO L1 | L0: ALOAD_3 | INVOKEINTERFACE java.util.Iterator.next Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | ASTORE_2 | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con line 223 | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname Ljava/lang/String; | ALOAD_1 // Ljava/lang/String; nick | INVOKEVIRTUAL java.lang.String.equals Ljava/lang/Object; Z | IFEQ L1 | ALOAD_2 // Lglassbox/client/ConnectionManager$AgentConnection; con line 224 | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getUrl Ljava/lang/String; | ARETURN | L1: ALOAD_3 line 222 | INVOKEINTERFACE java.util.Iterator.hasNext Z | IFNE L0 | LDC_W " " line 227 | ARETURN method-execution java.lang.String glassbox.client.ConnectionManager.getURLFromNick java.lang.String end public String getURLFromNick String public void edit String, String org.aspectj.weaver.MethodDeclarationLineNumber: 231:7947 : method-execution void glassbox.client.ConnectionManager.edit java.lang.String, java.lang.String | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 232 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | INVOKEINTERFACE java.util.List.iterator Ljava/util/Iterator; | ASTORE 4 | GOTO L1 | L0: ALOAD 4 | INVOKEINTERFACE java.util.Iterator.next Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | ASTORE_3 | ALOAD_3 // Lglassbox/client/ConnectionManager$AgentConnection; con line 233 | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname Ljava/lang/String; | ALOAD_1 // Ljava/lang/String; nickname | INVOKEVIRTUAL java.lang.String.equals Ljava/lang/Object; Z | IFEQ L1 | ALOAD_3 // Lglassbox/client/ConnectionManager$AgentConnection; con line 234 | ALOAD_2 // Ljava/lang/String; newurl | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.setUrl Ljava/lang/String; V | GOTO L2 line 235 | L1: ALOAD 4 line 232 | INVOKEINTERFACE java.util.Iterator.hasNext Z | IFNE L0 | L2: RETURN line 238 method-execution void glassbox.client.ConnectionManager.edit java.lang.String, java.lang.String end public void edit String, String public void add String, String, boolean, boolean org.aspectj.weaver.MethodDeclarationLineNumber: 240:8150 : method-execution void glassbox.client.ConnectionManager.add java.lang.String, java.lang.String, boolean, boolean | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 241 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | INVOKEINTERFACE java.util.List.iterator Ljava/util/Iterator; | ASTORE 6 | GOTO L1 | L0: ALOAD 6 | INVOKEINTERFACE java.util.Iterator.next Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | ASTORE 5 | ALOAD 5 // Lglassbox/client/ConnectionManager$AgentConnection; con line 242 | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname Ljava/lang/String; | ALOAD_1 // Ljava/lang/String; nickname | INVOKEVIRTUAL java.lang.String.equals Ljava/lang/Object; Z | IFEQ L1 | RETURN | L1: ALOAD 6 line 241 | INVOKEINTERFACE java.util.Iterator.hasNext Z | IFNE L0 | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 244 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | NEW glassbox.client.ConnectionManager$AgentConnection | DUP | ALOAD_0 // Lglassbox/client/ConnectionManager; this | ALOAD_1 // Ljava/lang/String; nickname | ALOAD_2 // Ljava/lang/String; url | ILOAD_3 // Z viewed | INVOKESPECIAL glassbox.client.ConnectionManager$AgentConnection.&amp;lt;init&amp;gt; Lglassbox/client/ConnectionManager;Ljava/lang/String;Ljava/lang/String;Z V | INVOKEINTERFACE java.util.List.add Ljava/lang/Object; Z | POP | ILOAD 4 // Z makeDefault line 245 | IFEQ L2 | ALOAD_0 // Lglassbox/client/ConnectionManager; this | ALOAD_0 // Lglassbox/client/ConnectionManager; this | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | INVOKEINTERFACE java.util.List.size I | ICONST_1 | ISUB | PUTFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I | L2: RETURN line 246 method-execution void glassbox.client.ConnectionManager.add java.lang.String, java.lang.String, boolean, boolean end public void add String, String, boolean, boolean public int getDefaultIndex org.aspectj.weaver.MethodDeclarationLineNumber: 248:8519 : method-execution int glassbox.client.ConnectionManager.getDefaultIndex | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 249 | GETFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I | IRETURN method-execution int glassbox.client.ConnectionManager.getDefaultIndex end public int getDefaultIndex public java.util.List getConnectionList org.aspectj.weaver.MethodDeclarationLineNumber: 252:8611 : method-execution java.util.List glassbox.client.ConnectionManager.getConnectionList | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 253 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | ARETURN method-execution java.util.List glassbox.client.ConnectionManager.getConnectionList end public java.util.List getConnectionList public String getDefaultURL org.aspectj.weaver.MethodDeclarationLineNumber: 256:8683 : method-execution java.lang.String glassbox.client.ConnectionManager.getDefaultURL | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 257 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | ALOAD_0 // Lglassbox/client/ConnectionManager; this | GETFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I | INVOKEINTERFACE java.util.List.get I Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getUrl Ljava/lang/String; | ARETURN method-execution java.lang.String glassbox.client.ConnectionManager.getDefaultURL end public String getDefaultURL public String getDefaultNick org.aspectj.weaver.MethodDeclarationLineNumber: 260:8793 : method-execution java.lang.String glassbox.client.ConnectionManager.getDefaultNick | ALOAD_0 // Lglassbox/client/ConnectionManager; this line 261 | GETFIELD glassbox.client.ConnectionManager.connectionList Ljava/util/List; | ALOAD_0 // Lglassbox/client/ConnectionManager; this | GETFIELD glassbox.client.ConnectionManager.defaultConnectionIndex I | INVOKEINTERFACE java.util.List.get I Ljava/lang/Object; | CHECKCAST glassbox.client.ConnectionManager$AgentConnection | INVOKEVIRTUAL glassbox.client.ConnectionManager$AgentConnection.getNickname Ljava/lang/String; | ARETURN method-execution java.lang.String glassbox.client.ConnectionManager.getDefaultNick end public String getDefaultNick end public class glassbox.client.ConnectionManager when implementing on shadow exception-handler void glassbox.client.ConnectionManager.&amp;lt;catch&amp;gt; java.lang.RuntimeException when weaving type glassbox.client.ConnectionManager when weaving classes when weaving when batch building BuildConfig[C:\devel\glassbox\.metadata\.plugins\org.eclipse.ajdt.core\crankjClient.generated.lst] #Files=52</description>
    <commit commitTime="2006-04-27 07:06:30" id="c5c18aa"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="135780" reportTime="2006-04-09 22:27:00">
    <summary>Java 1.2 dependency in aspectjrt.jar bug with fix</summary>
    <description>The thisJoinPoint.printString fails on a 1.1 VM because it relies on a java.lang.ref.SoftReference. I need this to work because we're using AspectJ on an embedded device that is still using a pre-1.2 VM. The problem lies in org.aspectj.runtime.reflect.SignatureImpl. The attached patch fixes it and passes all the tests. I tested the failing program manually on a 1.1 VM, but automating the test would require adding a 1.1 VM to the regression test infrastructure. Sample: public aspect Java11Test { before : execution * * .. { System.out.println thisJoinPoint.toString ; } public static void main String args[] {} } &amp;gt;ajc -target 1.1 Java11Test.aj &amp;gt;\java\jre1.1.8_010\bin\jre -cp .;%CLASSPATH% Java11Test Exception in thread "main" java.lang.NoClassDefFoundError: java/lang/ref/SoftRef erence at org.aspectj.runtime.reflect.JoinPointImpl$StaticPartImpl.toString Joi nPointImpl.java:43 at org.aspectj.runtime.reflect.JoinPointImpl$StaticPartImpl.toString Joi nPointImpl.java:48 at Java11Test.ajc$before$Java11Test$1$3444dde4 Java11Test.aj:3 at Java11Test.main Java11Test.aj</description>
    <commit commitTime="2006-05-03 16:18:25" id="cb5dfe7"/>
    <fixedFiles>
      <file>runtime/src/org/aspectj/runtime/reflect/SignatureImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="134371" reportTime="2006-04-01 12:05:00">
    <summary>ClassCastException in AjState.recordClassFile</summary>
    <description>I got this exception while working on a static inner aspect. A full rebuild avoided the problem. java.lang.ClassCastException: org.aspectj.weaver.MissingResolvedTypeWithKnownSignature at org.aspectj.ajdt.internal.core.builder.AjState.recordClassFile AjState.java:774 at org.aspectj.ajdt.internal.core.builder.AjState.noteResult AjState.java:627 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$3.acceptResult AjBuildManager.java:867 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing AjCompilerAdapter.java:206 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$4$6b855184 CompilerAdapter.aj:90 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:528 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:845 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:266 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:168 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191</description>
    <commit commitTime="2006-05-05 09:46:43" id="299c3a4"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="138384" reportTime="2006-04-25 10:58:00">
    <summary>java.lang.ClassFormatError: Invalid method Code length 83071 in class file org/eclipse/jdt/internal/compiler/impl/Constant</summary>
    <description>The weaver generates invalid bytecode when weaving a large method. Instead it should issue an error or even split the method . The problem has been reported before but for a different reason: bug 113796 .</description>
    <commit commitTime="2006-05-12 08:17:43" id="5d2b5b8"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/InstructionList.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="129704" reportTime="2006-02-27 20:32:00">
    <summary>BCException</summary>
    <description>org.aspectj.weaver.BCException at org.aspectj.weaver.bcel.BcelShadow.initializeKindedAnnotationVars BcelShadow.java:1553 at org.aspectj.weaver.bcel.BcelShadow.getKindedAnnotationVar BcelShadow.java:995 at org.aspectj.weaver.patterns.AnnotationPointcut.findResidueInternal AnnotationPointcut.java:196 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java:268 at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal AndPointcut.java:97 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java:268 at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal AndPointcut.java:97 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java:268 at org.aspectj.weaver.patterns.AndPointcut.findResidueInternal AndPointcut.java:97 at org.aspectj.weaver.patterns.Pointcut.findResidue Pointcut.java:268 at org.aspectj.weaver.bcel.BcelAdvice.specializeOn BcelAdvice.java:132 at org.aspectj.weaver.bcel.BcelShadow.prepareForMungers BcelShadow.java:313 at org.aspectj.weaver.Shadow.implement Shadow.java:404 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:2146 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:467 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:102 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1543 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1494 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1275 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1097 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:300 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:178 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:811 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:230 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:156 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 trouble in: public class com.ytg.bilette.client.core.providers.DomainContentProvider extends java.lang.Object implements com.ytg.bilette.client.core.providers.IRefreshableStructuredContentProvider: private java.util.HashSet listeners [Signature Ljava/util/HashSet&amp;lt;Lcom/ytg/bilette/client/core/providers/IDomainObjectChangeListener&amp;lt;TT;&amp;gt;;&amp;gt;; ] private com.ytg.bilette.client.core.providers.DomainContentProvider$State state [Signature Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; ] private Class clazz [Signature Ljava/lang/Class&amp;lt;+Lcom/ytg/bilette/model/GenericDomainObject;&amp;gt;; ] private boolean deletable private java.util.List summaries [Signature Ljava/util/List&amp;lt;TT;&amp;gt;; ] static Class class$0 public void &amp;lt;init&amp;gt; Class org.aspectj.weaver.MethodDeclarationLineNumber: 47:1136 : ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 47 &amp;amp;#304;NVOKESPEC&amp;amp;#304;AL java.lang.Object.&amp;lt;init&amp;gt; V constructor-execution void com.ytg.bilette.client.core.providers.DomainContentProvider.&amp;lt;init&amp;gt; java.lang.Class | ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 34 | NEW java.util.HashSet | DUP | &amp;amp;#304;NVOKESPEC&amp;amp;#304;AL java.util.HashSet.&amp;lt;init&amp;gt; V | PUTF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.listeners Ljava/util/HashSet; | ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 36 | GETSTAT&amp;amp;#304;C com.ytg.bilette.client.core.providers.DomainContentProvider$State.NOT_INITIALIZED Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; | PUTF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.state Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; | ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 40 | &amp;amp;#304;CONST_0 | PUTF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.deletable Z | ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 48 | ALOAD_1 // java.lang.Class clazz | PUTF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.clazz Ljava/lang/Class; | ALOAD_1 // java.lang.Class clazz line 50 | &amp;amp;#304;NVOKEV&amp;amp;#304;RTUAL java.lang.Class.getInterfaces [Ljava/lang/Class; | ASTORE_2 | &amp;amp;#304;CONST_0 line 51 | &amp;amp;#304;STORE_3 | GOTO L2 | L0: ALOAD_2 // java.lang.Class[] interfaces line 52 | &amp;amp;#304;LOAD_3 // int i | AALOAD | LDC com.ytg.bilette.model.Deletable | &amp;amp;#304;NVOKEV&amp;amp;#304;RTUAL java.lang.Object.equals Ljava/lang/Object; Z | &amp;amp;#304;FEQ L1 | ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 53 | &amp;amp;#304;CONST_1 | PUTF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.deletable Z | GOTO L3 line 54 | L1: &amp;amp;#304;&amp;amp;#304;NC 3 1 // int i line 51 | L2: &amp;amp;#304;LOAD_3 // int i | ALOAD_2 // java.lang.Class[] interfaces | ARRAYLENGTH | &amp;amp;#304;F_&amp;amp;#304;CMPLT L0 | L3: RETURN line 57 constructor-execution void com.ytg.bilette.client.core.providers.DomainContentProvider.&amp;lt;init&amp;gt; java.lang.Class end public void &amp;lt;init&amp;gt; Class public Object[] getElements Object org.aspectj.weaver.MethodDeclarationLineNumber: 65:1611 : ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 66 ALOAD_1 // java.lang.Object input &amp;amp;#304;NVOKESPEC&amp;amp;#304;AL com.ytg.bilette.client.core.providers.DomainContentProvider.checkInput Ljava/lang/Object; Z &amp;amp;#304;STORE_2 ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 68 &amp;amp;#304;LOAD_2 // boolean includeDeleted &amp;amp;#304;NVOKEV&amp;amp;#304;RTUAL com.ytg.bilette.client.core.providers.DomainContentProvider.getSummaries Z Ljava/util/List; &amp;amp;#304;NVOKE&amp;amp;#304;NTERFACE java.util.List.toArray [Ljava/lang/Object; ARETURN end public Object[] getElements Object private void checkInitialized boolean org.aspectj.weaver.MethodDeclarationLineNumber: 71:1759 : GETSTAT&amp;amp;#304;C com.ytg.bilette.client.core.providers.DomainContentProvider$State.NOT_INITIALIZED Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; line 72 ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this GETF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.state Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; &amp;amp;#304;NVOKEV&amp;amp;#304;RTUAL com.ytg.bilette.client.core.providers.DomainContentProvider$State.equals Ljava/lang/Object; Z &amp;amp;#304;FNE L0 GETSTAT&amp;amp;#304;C com.ytg.bilette.client.core.providers.DomainContentProvider$State.LIGHT_INITIALIZED Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; line 73 ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this GETF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.state Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; &amp;amp;#304;NVOKEV&amp;amp;#304;RTUAL com.ytg.bilette.client.core.providers.DomainContentProvider$State.equals Ljava/lang/Object; Z &amp;amp;#304;FEQ L1 &amp;amp;#304;LOAD_1 // boolean includeDeleted &amp;amp;#304;FEQ L1 L0: ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 74 ACONST_NULL ACONST_NULL &amp;amp;#304;LOAD_1 // boolean includeDeleted &amp;amp;#304;NVOKESPEC&amp;amp;#304;AL com.ytg.bilette.client.core.providers.DomainContentProvider.getData Lcom/ytg/bilette/dao/SummaryDAO;Lorg/eclipse/core/runtime/IProgressMonitor;Z V L1: RETURN line 75 end private void checkInitialized boolean private boolean checkInput Object org.aspectj.weaver.MethodDeclarationLineNumber: 83:2060 : ALOAD_1 // java.lang.Object input line 84 &amp;amp;#304;NSTANCEOF java.lang.Boolean LDC "Input for generic content provider must be Boolean value" line 85 &amp;amp;#304;NVOKESTAT&amp;amp;#304;C org.eclipse.jface.util.Assert.isTrue ZLjava/lang/String; Z line 84 POP ALOAD_1 // java.lang.Object input line 86 CHECKCAST java.lang.Boolean &amp;amp;#304;NVOKEV&amp;amp;#304;RTUAL java.lang.Boolean.booleanValue Z &amp;amp;#304;STORE_2 ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 87 GETF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.deletable Z &amp;amp;#304;FNE L1 ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 88 GETF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.deletable Z &amp;amp;#304;FNE L0 &amp;amp;#304;LOAD_2 // boolean includeDeleted &amp;amp;#304;FEQ L1 L0: &amp;amp;#304;CONST_0 GOTO L2 L1: &amp;amp;#304;CONST_1 L2: LDC "Nondeletable object yet deleted flag!" line 89 &amp;amp;#304;NVOKESTAT&amp;amp;#304;C org.eclipse.jface.util.Assert.isLegal ZLjava/lang/String; Z line 87 POP &amp;amp;#304;LOAD_2 // boolean includeDeleted line 91 &amp;amp;#304;RETURN end private boolean checkInput Object public void dispose org.aspectj.weaver.MethodDeclarationLineNumber: 99:2522 : RETURN line 101 end public void dispose public void inputChanged org.eclipse.jface.viewers.Viewer, Object, Object org.aspectj.weaver.MethodDeclarationLineNumber: 109:2747 : RETURN line 111 end public void inputChanged org.eclipse.jface.viewers.Viewer, Object, Object private void getData com.ytg.bilette.dao.SummaryDAO, org.eclipse.core.runtime.IProgressMonitor, boolean org.aspectj.weaver.MethodDeclarationLineNumber: 115:2954 : ALOAD_1 ASTORE 4 ALOAD_2 ASTORE 5 &amp;amp;#304;LOAD_3 &amp;amp;#304;STORE 6 method-execution void com.ytg.bilette.client.core.providers.DomainContentProvider.getData com.ytg.bilette.dao.SummaryDAO, org.eclipse.core.runtime.IProgressMonitor, boolean | ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 117 | ALOAD_1 // com.ytg.bilette.dao.SummaryDAO dao | ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this | GETF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.clazz Ljava/lang/Class; | &amp;amp;#304;LOAD_3 // boolean includeDeleted | &amp;amp;#304;NVOKE&amp;amp;#304;NTERFACE com.ytg.bilette.dao.SummaryDAO.getSummaries Ljava/lang/Class;Z Ljava/util/List; | PUTF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.summaries Ljava/util/List; | &amp;amp;#304;LOAD_3 // boolean includeDeleted line 118 | &amp;amp;#304;FEQ L0 | ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 119 | GETSTAT&amp;amp;#304;C com.ytg.bilette.client.core.providers.DomainContentProvider$State.FULL_INITIALIZED Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; | PUTF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.state Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; | GOTO L1 | L0: ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 121 | GETSTAT&amp;amp;#304;C com.ytg.bilette.client.core.providers.DomainContentProvider$State.LIGHT_INITIALIZED Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; | PUTF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.state Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; | L1: RETURN line 122 method-execution void com.ytg.bilette.client.core.providers.DomainContentProvider.getData com.ytg.bilette.dao.SummaryDAO, org.eclipse.core.runtime.IProgressMonitor, boolean end private void getData com.ytg.bilette.dao.SummaryDAO, org.eclipse.core.runtime.IProgressMonitor, boolean public java.util.List getSummaries boolean org.aspectj.weaver.MethodDeclarationLineNumber: 128:3308 : ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 129 &amp;amp;#304;LOAD_1 // boolean includeDeleted &amp;amp;#304;NVOKESPEC&amp;amp;#304;AL com.ytg.bilette.client.core.providers.DomainContentProvider.checkInitialized Z V &amp;amp;#304;LOAD_1 // boolean includeDeleted line 131 &amp;amp;#304;FNE L0 GETSTAT&amp;amp;#304;C com.ytg.bilette.client.core.providers.DomainContentProvider$State.LIGHT_INITIALIZED Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this GETF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.state Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; &amp;amp;#304;NVOKEV&amp;amp;#304;RTUAL com.ytg.bilette.client.core.providers.DomainContentProvider$State.equals Ljava/lang/Object; Z &amp;amp;#304;FEQ L1 L0: ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 132 GETF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.summaries Ljava/util/List; ARETURN L1: ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 134 GETF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.summaries Ljava/util/List; &amp;amp;#304;NVOKE&amp;amp;#304;NTERFACE java.util.List.iterator Ljava/util/Iterator; ASTORE_2 NEW java.util.ArrayList line 135 DUP &amp;amp;#304;NVOKESPEC&amp;amp;#304;AL java.util.ArrayList.&amp;lt;init&amp;gt; V ASTORE_3 GOTO L3 line 136 L2: ALOAD_2 // java.util.Iterator i line 137 &amp;amp;#304;NVOKE&amp;amp;#304;NTERFACE java.util.Iterator.next Ljava/lang/Object; CHECKCAST com.ytg.bilette.model.Deletable CHECKCAST com.ytg.bilette.model.Deletable ASTORE 4 ALOAD 4 // com.ytg.bilette.model.Deletable object line 138 &amp;amp;#304;NVOKE&amp;amp;#304;NTERFACE com.ytg.bilette.model.Deletable.isDeleted Z &amp;amp;#304;FNE L3 ALOAD_3 // java.util.ArrayList list line 139 ALOAD 4 // com.ytg.bilette.model.Deletable object CHECKCAST com.ytg.bilette.model.GenericDomainObject &amp;amp;#304;NVOKEV&amp;amp;#304;RTUAL java.util.ArrayList.add Ljava/lang/Object; Z POP L3: ALOAD_2 // java.util.Iterator i line 136 &amp;amp;#304;NVOKE&amp;amp;#304;NTERFACE java.util.Iterator.hasNext Z &amp;amp;#304;FNE L2 ALOAD_3 // java.util.ArrayList list line 142 ARETURN end public java.util.List getSummaries boolean public synchronized void refresh org.aspectj.weaver.MethodDeclarationLineNumber: 148:3783 : ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 149 GETSTAT&amp;amp;#304;C com.ytg.bilette.client.core.providers.DomainContentProvider$State.NOT_INITIALIZED Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; PUTF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.state Lcom/ytg/bilette/client/core/providers/DomainContentProvider$State; &amp;amp;#304;CONST_0 line 150 &amp;amp;#304;STORE_1 ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 152 GETF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.deletable Z &amp;amp;#304;FEQ L2 ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 153 GETF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.listeners Ljava/util/HashSet; &amp;amp;#304;NVOKEV&amp;amp;#304;RTUAL java.util.HashSet.iterator Ljava/util/Iterator; ASTORE_2 GOTO L1 line 154 L0: ALOAD_2 // java.util.Iterator i line 155 &amp;amp;#304;NVOKE&amp;amp;#304;NTERFACE java.util.Iterator.next Ljava/lang/Object; CHECKCAST com.ytg.bilette.client.core.providers.IDomainObjectChangeListener ASTORE_3 ALOAD_3 // com.ytg.bilette.client.core.providers.IDomainObjectChangeListener listener line 156 &amp;amp;#304;NVOKE&amp;amp;#304;NTERFACE com.ytg.bilette.client.core.providers.IDomainObjectChangeListener.isIncludeDeleted Z &amp;amp;#304;FEQ L1 &amp;amp;#304;CONST_1 line 157 &amp;amp;#304;STORE_1 // boolean includeDeleted GOTO L2 line 158 L1: ALOAD_2 // java.util.Iterator i line 154 &amp;amp;#304;NVOKE&amp;amp;#304;NTERFACE java.util.Iterator.hasNext Z &amp;amp;#304;FNE L0 L2: ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 163 ACONST_NULL ACONST_NULL &amp;amp;#304;LOAD_1 // boolean includeDeleted &amp;amp;#304;NVOKESPEC&amp;amp;#304;AL com.ytg.bilette.client.core.providers.DomainContentProvider.getData Lcom/ytg/bilette/dao/SummaryDAO;Lorg/eclipse/core/runtime/IProgressMonitor;Z V ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 165 ACONST_NULL ACONST_NULL &amp;amp;#304;NVOKESPEC&amp;amp;#304;AL com.ytg.bilette.client.core.providers.DomainContentProvider.notifyAllListeners Lcom/ytg/bilette/model/GenericDomainObject;Lcom/ytg/bilette/model/GenericDomainObject; V RETURN line 166 end public synchronized void refresh private synchronized void notifyAllListeners com.ytg.bilette.model.GenericDomainObject, com.ytg.bilette.model.GenericDomainObject org.aspectj.weaver.MethodDeclarationLineNumber: 174:4356 : ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 175 GETF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.listeners Ljava/util/HashSet; &amp;amp;#304;NVOKEV&amp;amp;#304;RTUAL java.util.HashSet.iterator Ljava/util/Iterator; ASTORE_3 GOTO L2 line 176 L0: ALOAD_3 // java.util.Iterator i line 177 &amp;amp;#304;NVOKE&amp;amp;#304;NTERFACE java.util.Iterator.next Ljava/lang/Object; CHECKCAST com.ytg.bilette.client.core.providers.IDomainObjectChangeListener ASTORE 4 ALOAD_1 // com.ytg.bilette.model.GenericDomainObject oldObj line 178 &amp;amp;#304;FNONNULL L1 ALOAD_2 // com.ytg.bilette.model.GenericDomainObject newObj &amp;amp;#304;FNONNULL L1 ALOAD 4 // com.ytg.bilette.client.core.providers.IDomainObjectChangeListener listener line 179 &amp;amp;#304;NVOKE&amp;amp;#304;NTERFACE com.ytg.bilette.client.core.providers.IDomainObjectChangeListener.fullRefresh V GOTO L2 L1: ALOAD 4 // com.ytg.bilette.client.core.providers.IDomainObjectChangeListener listener line 181 ALOAD_1 // com.ytg.bilette.model.GenericDomainObject oldObj ALOAD_2 // com.ytg.bilette.model.GenericDomainObject newObj &amp;amp;#304;NVOKE&amp;amp;#304;NTERFACE com.ytg.bilette.client.core.providers.IDomainObjectChangeListener.concessionChanged Lcom/ytg/bilette/model/GenericDomainObject;Lcom/ytg/bilette/model/GenericDomainObject; V L2: ALOAD_3 // java.util.Iterator i line 176 &amp;amp;#304;NVOKE&amp;amp;#304;NTERFACE java.util.Iterator.hasNext Z &amp;amp;#304;FNE L0 RETURN line 183 end private synchronized void notifyAllListeners com.ytg.bilette.model.GenericDomainObject, com.ytg.bilette.model.GenericDomainObject public synchronized void addListener com.ytg.bilette.client.core.providers.IDomainObjectChangeListener org.aspectj.weaver.MethodDeclarationLineNumber: 185:4715 : ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 186 GETF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.listeners Ljava/util/HashSet; ALOAD_1 // com.ytg.bilette.client.core.providers.IDomainObjectChangeListener listener &amp;amp;#304;NVOKEV&amp;amp;#304;RTUAL java.util.HashSet.add Ljava/lang/Object; Z POP RETURN line 187 end public synchronized void addListener com.ytg.bilette.client.core.providers.IDomainObjectChangeListener public synchronized void removeListener com.ytg.bilette.client.core.providers.IDomainObjectChangeListener org.aspectj.weaver.MethodDeclarationLineNumber: 189:4831 : ALOAD_0 // com.ytg.bilette.client.core.providers.DomainContentProvider this line 190 GETF&amp;amp;#304;ELD com.ytg.bilette.client.core.providers.DomainContentProvider.listeners Ljava/util/HashSet; ALOAD_1 // com.ytg.bilette.client.core.providers.IDomainObjectChangeListener listener &amp;amp;#304;NVOKEV&amp;amp;#304;RTUAL java.util.HashSet.remove Ljava/lang/Object; Z POP RETURN line 191 end public synchronized void removeListener com.ytg.bilette.client.core.providers.IDomainObjectChangeListener end public class com.ytg.bilette.client.core.providers.DomainContentProvider when implementing on shadow method-execution void com.ytg.bilette.client.core.providers.DomainContentProvider.getData com.ytg.bilette.dao.SummaryDAO, org.eclipse.core.runtime.IProgressMonitor, boolean when weaving type com.ytg.bilette.client.core.providers.DomainContentProvider when weaving classes when weaving when batch building BuildConfig[F:\java\Bilette\.metadata\.plugins\org.eclipse.ajdt.core\com.ytg.bilette.client.core.generated.lst] #Files=22</description>
    <commit commitTime="2006-05-12 10:41:42" id="3ca976f"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="135068" reportTime="2006-04-05 12:15:00">
    <summary>VerifyError with LTW and @AJ style aspects</summary>
    <description>I get "VerifyError: Incompatible object argument for function call" error when using LTW with @Aspect stype aspects. Interestingly enough, LTW works as expected with equivalent .aj style aspect. Compile time weaving works with both aspect styles. Tested on Linux with AspectJ 1.5.0, 1.5.1 and DEVELOPMENT-20060404163823 and SUN 1.5.0_06 and IBM 1.5.0SR1 JVMs. I will attach example project shortly.</description>
    <commit commitTime="2006-05-16 07:38:53" id="9ffc63b"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</file>
    </fixedFiles>
  </bug>
  <bug id="141945" reportTime="2006-05-16 04:10:00">
    <summary>Compiler issues message concerning aop.xml even when not doing LTW</summary>
    <description>From the mailing list: ============= I am executing the command as below, COMMAND: ajc -inpath woven_hello1.jar -aspectpath aspect2.jar -outjar woven_hello2.jar I am getting same old error, woven_hello1.jar [error] aspect 'aspect1' woven into 'Hello' must be declared in an aop.xml file. no source information available I have placed both aspect1.class and aspect2.class in CLASSPATH system variable. ============== We shouldn't be putting out messages about aop.xml when we are not doing LTW - this message points the user to a solution that will not work in this case!</description>
    <commit commitTime="2006-05-16 12:30:08" id="fc7db25"/>
    <fixedFiles>
      <file>tests/java5/ataspectj/ataspectj/ltwreweavable/MainReweavableLogging.java</file>
    </fixedFiles>
  </bug>
  <bug id="142466" reportTime="2006-05-18 07:32:00">
    <summary>[ltw] Fail at runtime if abstract methods are not implemented in a hierarchy that finishes with an XML aspect</summary>
    <description>see pr125480 - copying the test for that will be a good basis for a test for this bug. We don't check that when defining a concrete aspect there are no unimplemented abstract methods in the aspect we are concretizing.</description>
    <commit commitTime="2006-05-23 07:55:53" id="69e24e9"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="120739" reportTime="2005-12-13 16:10:00">
    <summary>LTW Optimization: Disable World if it has No Aspects</summary>
    <description>This optimization disables weaving for a ClassLoader where there are no aspects defined. This is actually useful if you have aspect exclusions that exclude all the aspects defined in a parent class loader. It is also helpful in the trivial/rare case where there is an aop.xml definition with no aspect definitions.</description>
    <commit commitTime="2006-06-01 16:30:21" id="4513e92"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="145086" reportTime="2006-06-02 11:35:00">
    <summary>NPE when weak reference set in signature</summary>
    <description>Simon ran into the same problem in setting the values. I will attach a patch to fix this, with test cases to properly verify it works in both cases. java.lang.NullPointerException at org.aspectj.runtime.reflect.SignatureImpl$CacheImpl.set SignatureImpl.java:224 at org.aspectj.runtime.reflect.SignatureImpl.toString SignatureImpl.java:57 at org.aspectj.runtime.reflect.SignatureImpl.toString SignatureImpl.java:62</description>
    <commit commitTime="2006-06-03 08:27:06" id="f821ca3"/>
    <fixedFiles>
      <file>runtime/src/org/aspectj/runtime/reflect/SignatureImpl.java</file>
      <file>runtime/testsrc/org/aspectj/runtime/reflect/JoinPointImplTest.java</file>
      <file>runtime/testsrc/org/aspectj/runtime/reflect/SignatureTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="145322" reportTime="2006-06-05 08:12:00">
    <summary>Failure of testCompareSubclassDelegates on J9 1.5.0 SR1</summary>
    <description>This would appear to be a regression of bug 120909 which was fixed for 1.5.0. The latest J9 can be obtained here http://www-128.ibm.com/developerworks/java/jdk/index.html . TESTROOT RunTheseBeforeYouCommitTests AllTests BcweaverModuleTests15 org.aspectj.weaver.TestJava5ReflectionBasedReferenceTypeDelegate testCompareSubclassDelegates org.aspectj.weaver.TestJava5ReflectionBasedReferenceTypeDelegate junit.framework.AssertionFailedError: Should be one extra clinit in BCEL case, but bcel=41 reflect=41 at junit.framework.Assert.fail Assert.java:47 at junit.framework.Assert.assertTrue Assert.java:20 at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateTest.testCompareSubclassDelegates ReflectionBasedReferenceTypeDelegateTest.java:286 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:64 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:43 at java.lang.reflect.Method.invoke Method.java:615 at junit.framework.TestCase.runTest TestCase.java:154 at junit.framework.TestCase.runBare TestCase.java:127 at junit.framework.TestResult$1.protect TestResult.java:106 at junit.framework.TestResult.runProtected TestResult.java:124 at junit.framework.TestResult.run TestResult.java:109 at junit.framework.TestCase.run TestCase.java:118 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run JUnit3TestReference.java:128 at org.eclipse.jdt.internal.junit.runner.TestExecution.run TestExecution.java:38 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests RemoteTestRunner.java:460 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests RemoteTestRunner.java:673 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run RemoteTestRunner.java:386 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main RemoteTestRunner.java:196</description>
    <commit commitTime="2006-06-06 08:40:16" id="3e0650d"/>
    <fixedFiles>
      <file>weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="146546" reportTime="2006-06-12 07:59:00">
    <summary>Remove hard coded dependency on "|" in getFileName .. methods</summary>
    <description>As part of bug 141730 we need to remove the hard coded dependency on "|" in methods which use handles to get the filename. These methods are: AsmManager.getFileName String AspectJElementHierarchy.getFileName String</description>
    <commit commitTime="2006-06-12 14:00:02" id="38cc0dd"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/AsmManager.java</file>
      <file>asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java</file>
    </fixedFiles>
  </bug>
  <bug id="136707" reportTime="2006-04-13 14:23:00">
    <summary>iajc should print summary like javac</summary>
    <description>The iajc ant task should produce a summary of what it is doing, like the javac task does: [javac] Compiling 189 source files to C:\project\classes</description>
    <commit commitTime="2006-06-13 19:45:44" id="008efca"/>
    <fixedFiles>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</file>
      <file>taskdefs/testsrc/org/aspectj/tools/ant/taskdefs/AjcTaskTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="148007" reportTime="2006-06-21 05:27:00">
    <summary>boolean methods with after advice return incorrect result on JRockit under WLS</summary>
    <description>n 21/06/06, Stearns, Randy &amp;lt; RStearns@knowledgestorm.com &amp;gt; wrote: I've been able to create a reproducible test. My really pared down aspect: public aspect LoggingAspect { pointcut logPointcut : execution * *.* .. &amp;amp;&amp;amp; !within LoggingAspect ; before : logPointcut { System.out.println "entering" ; } after : logPointcut { System.out.println "exiting" ; } } As it only appears in JRockit *while running in WebLogic*, I created a test servlet below As long as there is an after advice, tests 2 and 5 in the servlet return incorrect results. If I remove it, everything works. Also, if tests 2 and 5 return Boolean objects, it works. It appears AJ not like after advice on methods returning primitives. Is there a way to bypass them? Randy package test; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; import java.io.PrintWriter; /** * Hello world! */ public class TestServlet extends HttpServlet { protected void service HttpServletRequest request, HttpServletResponse response throws ServletException, IOException { booleanTest response ; } private void booleanTest HttpServletResponse response throws ServletException { PrintWriter out = null; try { out = response.getWriter ; } catch IOException ioe { throw new ServletException "Could not get writer." ; } out.println "Test 1a. Should be false. Was: " + invert1a ; out.println "Test 1b. Should be true. Was: " + invert1b ; out.println "Test 2. Should be false. Was: " + invert2 ; out.println "Test 3. Should be true. Was: " + invert3 ; out.println "Test 4. Should be true. Was: " + invert4 ; out.println "Test 5. Should be false. Was: " + invert5 ; } private boolean invert1a { return ! true; } private boolean invert1b { return ! false; } private boolean invert2 { return ! isTrue ; } private boolean invert3 { return ! isFalse ; } private boolean invert4 { boolean temp = isFalse ; return ! temp; } private boolean invert5 { boolean temp = isTrue ; return ! temp; } private boolean isTrue { return true; } private boolean isFalse { return false; } }</description>
    <commit commitTime="2006-06-22 04:49:26" id="426cbdc"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/Utility.java</file>
    </fixedFiles>
  </bug>
  <bug id="148786" reportTime="2006-06-27 05:42:00">
    <summary>new array construction join point can fail for freaky array constructors</summary>
    <description>Took me a while to discover how to recreate this problem, but this class: public class A { public static void main String []argv { byte[][] bytes = new byte[][]{{0},{1}}; } } causes this bytecode: 0: iconst_2 1: anewarray #18; //class "[B" and this causes the newarray joinpoint code to go bang. eg. before : call *[].new .. {} java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelWorld.fromBcel BcelWorld.java:236 at org.aspectj.weaver.bcel.BcelWorld.makeJoinPointSignatureForArrayConstruction BcelWorld.java:483 at org.aspectj.weaver.bcel.BcelShadow.makeArrayConstructorCall BcelShadow.java:801 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2510 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2325 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:490 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:115 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1574 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1525 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1305 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1127</description>
    <commit commitTime="2006-06-27 11:34:41" id="792d1df"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
    </fixedFiles>
  </bug>
  <bug id="148388" reportTime="2006-06-23 09:55:00">
    <summary>LTW weaver produces a debug message at the begining</summary>
    <description>Using the code in bug #148381 with any of the working options , LT weaver produces what seems a debug message: "? WeavingClassFileProvider.acceptResult test.Main-&amp;gt;test.Main$AjcClosure1" &amp;gt; java -javaagent:%ASPECTJ_LIB_HOME%\aspectjweaver.jar test.Main ? WeavingClassFileProvider.acceptResult test.Main-&amp;gt;test.Main$AjcClosure1 Method Main.foo took longer than expected Max expected = 1000, actual = 65371</description>
    <commit commitTime="2006-06-27 18:28:17" id="99d1c18"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="148911" reportTime="2006-06-27 19:29:00">
    <summary>NPR compiling Spring</summary>
    <description>The Spring 2.0 RC1 project contains two directories with aspects. Since the eclipse project does not compile cleanly with just the java nature, I decided to try adding the aspectj nature and giving the aspectj builder a shot. I don't have any idea what might be the trigger to the problem, but simply checking out Spring 2.0 RC1 and adding the aspectj nature should be able to reproduce. If I learn more I will add to this bug. ---- java.lang.NullPointerException at org.aspectj.org.eclipse.jdt.internal.compiler.ast.SingleTypeReference.getTypeBinding SingleTypeReference.java:39 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType TypeReference.java:132 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType TypeReference.java:123 at org.aspectj.ajdt.internal.core.builder.AsmElementFormatter.setParameters AsmElementFormatter.java:311 at org.aspectj.ajdt.internal.core.builder.AsmElementFormatter.genLabelAndKind AsmElementFormatter.java:258 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.visit AsmHierarchyBuilder.java:392 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse MethodDeclaration.java:185 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse TypeDeclaration.java:1250 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.traverse QualifiedAllocationExpression.java:392 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.traverse LocalDeclaration.java:242 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse MethodDeclaration.java:212 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse TypeDeclaration.java:1195 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse CompilationUnitDeclaration.java:339 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.internalBuild AsmHierarchyBuilder.java:145 at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.buildStructureForCompilationUnit AsmHierarchyBuilder.java:87 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishedCompilationUnit EclipseFactory.java:941 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing AjCompilerAdapter.java:210 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$4$6b855184 CompilerAdapter.aj:91 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:533 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:887 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:244 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:163 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 NullPointerException thrown: null</description>
    <commit commitTime="2006-06-28 07:32:35" id="b59b036"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmElementFormatter.java</file>
    </fixedFiles>
  </bug>
  <bug id="148972" reportTime="2006-06-28 07:24:00">
    <summary>problems with binary weaving declare parents in mixed environment.</summary>
    <description>These have been reported to me on a large system doing some intricate weaving where some classes are 1.2, some 1.4, some 1.5 and the VM is 1.5. Binary weaving declare parents sometimes refuses to allow the modification of the hierarchy because it sees a clash between two methods when there is none. The two cases I'm fixing are: 1. sometimes the signatures of the return types differ with the '.' or '/' problem fix == be consistent 2. sometimes the syntheticness of the methods in the relationship isn't determined correctly</description>
    <commit commitTime="2006-06-28 11:44:10" id="2f2f568"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc152/Ajc152Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="148737" reportTime="2006-06-26 20:09:00">
    <summary>IllegalStateException for non-generic type</summary>
    <description>I believe this is similar to 112880. The message and stack trace I am getting are -- IllegalStateException Can't ask to parameterize a member of non-generic type: com...object kind raw Can't ask to parameterize a member of non-generic type: com...object kind raw java.lang.IllegalStateException: Can't ask to parameterize a member of non-generic type: com....object kind raw at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith ResolvedMemberImpl.java:612 at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith ResolvedMemberImpl.java:597 at org.aspectj.weaver.ReferenceType.getDeclaredMethods ReferenceType.java:508 at org.aspectj.weaver.ResolvedType$4.get ResolvedType.java:225 at org.aspectj.weaver.Iterators$3$1.hasNext Iterators.java:118 at org.aspectj.weaver.Iterators$5.hasNext Iterators.java:171 at org.aspectj.weaver.Iterators$3.hasNext Iterators.java:128 at org.aspectj.weaver.ResolvedType.lookupMember ResolvedType.java:345 at org.aspectj.weaver.ResolvedType.lookupMethod ResolvedType.java:326 . . . The same code was able to be weaved under 1.5.0. The reason why this is a major issue is 1.5.0 suffers from a StackOverflowException.</description>
    <commit commitTime="2006-07-03 13:49:07" id="f6834c7"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/BuildArgParser.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="148693" reportTime="2006-06-26 13:29:00">
    <summary>woven class does not pass org.apache.bcel.verifier.statics.Pass2Verifier</summary>
    <description>'Number of LocalVariableTable attributes of Code attribute '&amp;lt;CODE&amp;gt;' method 'public static mypackage.MyAspect aspectOf [ Unknown attribute org.aspectj.weaver.AjSynthetic ]' exceeds number of local variable slots '0' 'There may be no more than one LocalVariableTable attribute per local variable in the Code attribute.' .'. ================================================= package mypackage; public aspect MyAspect { pointcut executeMethod : within TestClass &amp;amp;&amp;amp; execution * * .. ; before : executeMethod { System.out.println "Enter "+thisJoinPointStaticPart ; } after : executeMethod { System.out.println "Leave "+thisJoinPointStaticPart ; } } class TestClass { public static void main String[] args { } } ================================================ JustIce by Enver Haase, C 2001-2002. &amp;lt; http://bcel.sourceforge.net &amp;gt; &amp;lt; http://jakarta.apache.org/bcel &amp;gt; Now verifying: mypackage.TestClass Pass 1: VERIFIED_OK Passed verification. Pass 2: VERIFIED_OK Passed verification. Pass 3a, method number 0 ['public void &amp;lt;init&amp;gt; ']: VERIFIED_OK Passed verification. Pass 3b, method number 0 ['public void &amp;lt;init&amp;gt; ']: VERIFIED_OK Passed verification. Pass 3a, method number 1 ['public static void main String[] args [ Unknown attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00 00 00 46 ]']: VERIFIED_REJECTED Instruction invokestatic[184] 3 28 constraint violated: Return type class/interface could not be verified successfully: 'Number of LocalVariableTable attributes of Code attribute '&amp;lt;CODE&amp;gt;' method 'public static mypackage.MyAspect aspectOf [ Unknown attribute org.aspectj.weaver.AjSynthetic ]' exceeds number of local variable slots '0' 'There may be no more than one LocalVariableTable attribute per local variable in the Code attribute.' .'. Pass 3b, method number 1 ['public static void main String[] args [ Unknown attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00 00 00 46 ]']: VERIFIED_NOTYET Not yet verified. Pass 3a, method number 2 ['static void &amp;lt;clinit&amp;gt; ']: VERIFIED_OK Passed verification. Pass 3b, method number 2 ['static void &amp;lt;clinit&amp;gt; ']: VERIFIED_OK Passed verification. Warnings: Pass 2: Attribute ' Unknown attribute org.aspectj.weaver.WeaverVersion: 00 03 00 00 00 00 00 00 00 00... truncated ' as an attribute of the ClassFile structure 'public class mypackage.TestClass extends java.lang.Object filename mypackage.TestClass compiled from TestClass.java compiler version 46.0 access flags 33 constant pool 69 entries ACC_SUPER flag true Attribute s : SourceFile TestClass.java Unknown attribute org.aspectj.weaver.WeaverVersion: 00 03 00 00 00 00 00 00 00 00... truncated Unknown attribute org.aspectj.weaver.WeaverState: 53 00 00 00 01 00 12 6d 79 70... truncated 1 fields: private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0 3 methods: public void &amp;lt;init&amp;gt; public static void main String[] args [ Unknown attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00 00 00 46 ] static void &amp;lt;clinit&amp;gt; ' is unknown and will therefore be ignored. Pass 2: Attribute ' Unknown attribute org.aspectj.weaver.WeaverState: 53 00 00 00 01 00 12 6d 79 70... truncated ' as an attribute of the ClassFile structure 'public class mypackage.TestClass extends java.lang.Object filename mypackage.TestClass compiled from TestClass.java compiler version 46.0 access flags 33 constant pool 69 entries ACC_SUPER flag true Attribute s : SourceFile TestClass.java Unknown attribute org.aspectj.weaver.WeaverVersion: 00 03 00 00 00 00 00 00 00 00... truncated Unknown attribute org.aspectj.weaver.WeaverState: 53 00 00 00 01 00 12 6d 79 70... truncated 1 fields: private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0 3 methods: public void &amp;lt;init&amp;gt; public static void main String[] args [ Unknown attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00 00 00 46 ] static void &amp;lt;clinit&amp;gt; ' is unknown and will therefore be ignored. Pass 2: Attribute '&amp;lt;LocalVariableTable: LocalVariable start_pc = 0, length = 5, index = 0:mypackage.TestClass this &amp;gt;' as an attribute of Code attribute '&amp;lt;CODE&amp;gt;' method 'public void &amp;lt;init&amp;gt; ' will effectively be ignored and is only useful for debuggers and such. Pass 2: Attribute '&amp;lt;LineNumberTable: LineNumber 0, 3 &amp;gt;' as an attribute of Code attribute '&amp;lt;CODE&amp;gt;' method 'public void &amp;lt;init&amp;gt; ' will effectively be ignored and is only useful for debuggers and such. Pass 2: Attribute ' Unknown attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00 00 00 46 ' as an attribute of Method 'public static void main String[] args [ Unknown attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00 00 00 46 ]' is unknown and will therefore be ignored. Pass 2: Attribute ' Unknown attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00 00 00 46 ' as an attribute of Method 'public static void main String[] args [ Unknown attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00 00 00 46 ]' is neither Code nor Exceptions and is therefore only of use for debuggers and such. Pass 2: Unknown attribute ' Unknown attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00 00 00 46 '. This attribute is not known in any context! Pass 2: Attribute '&amp;lt;LocalVariableTable: LocalVariable start_pc = 9, length = 0, index = 0:String[] args &amp;gt;' as an attribute of Code attribute '&amp;lt;CODE&amp;gt;' method 'public static void main String[] args [ Unknown attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00 00 00 46 ]' will effectively be ignored and is only useful for debuggers and such. Pass 2: Attribute '&amp;lt;LineNumberTable: LineNumber 9, 6 &amp;gt;' as an attribute of Code attribute '&amp;lt;CODE&amp;gt;' method 'public static void main String[] args [ Unknown attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00 00 00 46 ]' will effectively be ignored and is only useful for debuggers and such. Pass 2: Class or interface initialization method 'static void &amp;lt;clinit&amp;gt; ' has superfluous access modifier s set: everything but ACC_STRICT is ignored. Pass 2: Attribute '&amp;lt;LineNumberTable: LineNumber 0, 1 &amp;gt;' as an attribute of Code attribute '&amp;lt;CODE&amp;gt;' method 'static void &amp;lt;clinit&amp;gt; ' will effectively be ignored and is only useful for debuggers and such. Pass 2: Unknown attribute ' Unknown attribute org.aspectj.weaver.WeaverVersion: 00 03 00 00 00 00 00 00 00 00... truncated '. This attribute is not known in any context! Pass 2: Unknown attribute ' Unknown attribute org.aspectj.weaver.WeaverState: 53 00 00 00 01 00 12 6d 79 70... truncated '. This attribute is not known in any context!</description>
    <commit commitTime="2006-07-05 08:22:55" id="82f217f"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AspectDeclaration.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="151182" reportTime="2006-07-20 02:50:00">
    <summary>NPE in BcelWeaver using LTW</summary>
    <description>Hi, I created a logging aspect for our application some time ago using 1.5.0 of AspectJ. I enabled this from time to time using Load Time Weaving. I have recently recompiled the aspect using 1.5.2 and tried to run it also using the 1.5.2 weaver jar, but it fails with a NullPointerException. This is part of one of the many stacktraces: 20 jul 2006 07:42:49,046 - java.lang.NullPointerException 20 jul 2006 07:42:49,062 - at org.aspectj.weaver.bcel.BcelWeaver.weaveParentTypeMungers BcelWeaver.java:1367 20 jul 2006 07:42:49,062 - at org.aspectj.weaver.bcel.BcelWeaver.weaveParentsFor BcelWeaver.java:1237 20 jul 2006 07:42:49,062 - at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1072 20 jul 2006 07:42:49,062 - at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:284 20 jul 2006 07:42:49,062 - at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:212 20 jul 2006 07:42:49,062 - at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:65 20 jul 2006 07:42:49,062 - at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform ClassPreProcessorAgentAdapter.java:55 20 jul 2006 07:42:49,062 - at sun.instrument.TransformerManager.transform Unknown Source 20 jul 2006 07:42:49,062 - at sun.instrument.InstrumentationImpl.transform Unknown Source 20 jul 2006 07:42:49,062 - at java.lang.ClassLoader.defineClass1 Native Method 20 jul 2006 07:42:49,062 - at java.lang.ClassLoader.defineClass Unknown Source I then tried with the 1.5.0 weaver jar although the aspect was compiled using 1.5.2 and this ran without problems.</description>
    <commit commitTime="2006-07-27 09:25:50" id="397a19d"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Aj.java</file>
    </fixedFiles>
  </bug>
  <bug id="151845" reportTime="2006-07-26 09:44:00">
    <summary>NPE while building</summary>
    <description>Building of a large project fails while weaving. NPE in EclipseSourceContext.removeUnnecessaryProblems .. The project was just migrated to Eclipse 3.2 Eclipse newly installed with Eclipse SDK and via Update manager with AJDT, CDT, Web/J2EE tools, SubClipse, SpringIDE. Same Project workes in Eclipse 3.1. Simple Test AspectJ-Project workes OK Building with Ant/AspectJ compiler as external Tools Launch in Eclipse works. I tried the following, but got the error anyway: - Checked out as a new AspectJ Project - upgraded to the developement Version of AJDT</description>
    <commit commitTime="2006-07-27 09:27:55" id="54f7bb4"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseSourceContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="151673" reportTime="2006-07-25 05:45:00">
    <summary>Incorrect weaving of after returning when 'input' bytecode is of a strange form</summary>
    <description>We have had a user report a problem where after advice being woven into a particular method is producing code that does not verify. The problem occurs if the bytecode being input to the weaving process includes a subroutine that contains the return from the method. Here is the problematic snippet produced by some unknown compiler: 200: invokespecial #17; //Method com/MyException."&amp;lt;init&amp;gt;": Ljava/lang/String; V 203: athrow 204: aload_3 205: astore 6 207: jsr 234 210: aload 6 212: areturn 213: astore 4 215: aload 4 217: invokevirtual #79; //Method java/lang/Throwable.printStackTrace: V 220: jsr 234 223: goto 238 226: astore 7 228: jsr 234 231: aload 7 233: athrow 234: astore 8 236: aload_3 237: areturn 238: return Exception table: from to target type 2 213 213 Class javax/ejb/FinderException 2 226 226 any see the jsr's jump to 234, but before the subroutine return at 238 there is an areturn out of the method this method returns a String . After weaving we get something like this: 200: invokespecial #17; //Method com/MyException."&amp;lt;init&amp;gt;": Ljava/lang/String; V 203: athrow 204: aload_3 205: astore 6 207: jsr 238 210: aload 6 212: astore 9 214: goto 248 217: astore 4 219: aload 4 221: invokevirtual #79; //Method java/lang/Throwable.printStackTrace: V 224: jsr 238 227: goto 246 230: astore 7 232: jsr 238 235: aload 7 237: athrow 238: astore 8 240: aload_3 241: astore 9 243: goto 248 246: astore 9 248: invokestatic #299; //Method After.aspectOf: LAfter; 251: invokevirtual #302; //Method After.ajc$afterReturning$After$1$26d6d4a7: V 254: aload 9 256: return see how the areturn has been lost - this code will blow up with a verify error the string is on the stack, we just ignore it and 'return' normally</description>
    <commit commitTime="2006-07-27 09:57:26" id="e4ab0ae"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="151978" reportTime="2006-07-27 07:15:00">
    <summary>[3.2compiler] Generics program fails to compile</summary>
    <description>generics problem, reported on newsgroup by Thomas Darimont //package de.tutorials.aspectj; public interface IMessage { void publish ; } interface IErrorMessage extends IMessage{ StackTraceElement[] getStackTrace ; } interface IObjectFactory&amp;lt;E&amp;gt; { public &amp;lt;T extends E&amp;gt; T create Class&amp;lt;T&amp;gt; theObjectType, Object[] theParameters ; } class MessageFactory implements IObjectFactory&amp;lt;IMessage&amp;gt;{ public &amp;lt;T extends IMessage&amp;gt; T create Class&amp;lt;T&amp;gt; theObjectType, Object[] theParameters { return null; } } class Main { public static void main String[] args { IErrorMessage message = new MessageFactory .create IErrorMessage.class, new Object[]{"Foo","Bar"} ; } }</description>
    <commit commitTime="2006-07-28 13:17:57" id="68c36e3"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="151938" reportTime="2006-07-26 19:33:00">
    <summary>Handle Duplicate -javaagent entries more gracefully</summary>
    <description>If you start a java 5 VM with AspectJ's load-time weaver specified more than once using the -javaagent flag, if there is an aop.xml file defined, it chokes badly: it tries to reweave the woven AspectJ code and emits massive amounts of bytecode. It would be better if AspectJ detected that it was specified more than once and gave a warning then disabled all but one of the agents. Failing that, it would be better to fail and give an error message than emit the bytecode. This issue came up for our automated installer, which adds a -javaagent flag to VM startup commands. If the script is wrapped twice, it can generate a duplicate. We are making our scripts more intelligent to avoid this issue, but we are probably not the only people who will hit this issue e.g., if someone manually edits both setclasspath.bat and catalina.bat to add the flag for a Tomcat instance...</description>
    <commit commitTime="2006-08-01 20:41:52" id="bebb364"/>
    <fixedFiles>
      <file>loadtime5/java5-src/org/aspectj/weaver/loadtime/Agent.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="152589" reportTime="2006-08-02 09:33:00">
    <summary>[pipeline] adding a whitespace results in adviceDidNotMatch warning</summary>
    <description>Given the following ------------------------------------------------------------ public aspect A { after throwing Throwable th : execution * * .. { System.err.println thisEnclosingJoinPointStaticPart ; } } class C1 { public void anotherMethod { } } -------------------------------------------------- adding a whitespace before the aspect declaration results in an adviceDidNotMatch warning even though weaving took place and the advice clearly matches. Output from the AJDT event trace shows: 14:38:23 =========================================================================================== 14:38:23 Build kind = AUTOBUILD 14:38:23 Project= bug92895 , kind of build requested=Incremental AspectJ compilation 14:38:23 build: Examined delta - source file changes in required project bug92895 14:38:23 Classpath=/home/hawkinsh/eclipse/workspace32/runtime-New_configuration/ bug92895 /bin:/home/hawkinsh/javas/jdk1.5.0_05/jre/lib/rt.jar:/home/hawkinsh/javas/jdk1.5.0_05/jre/lib/jsse.jar:/home/hawkinsh/javas/jdk1.5.0_05/jre/lib/jce.jar:/home/hawkinsh/javas/jdk1.5.0_05/jre/lib/charsets.jar:/home/hawkinsh/javas/jdk1.5.0_05/jre/lib/ext/sunjce_provider.jar:/home/hawkinsh/javas/jdk1.5.0_05/jre/lib/ext/sunpkcs11.jar:/home/hawkinsh/javas/jdk1.5.0_05/jre/lib/ext/dnsns.jar:/home/hawkinsh/javas/jdk1.5.0_05/jre/lib/ext/localedata.jar:/home/hawkinsh/eclipse/eclipse32/plugins/org.aspectj.runtime_1.5.3.20060801095103/aspectjrt.jar: 14:38:23 Preparing for build: planning to be an incremental build 14:38:23 Starting incremental compilation loop 1 of possibly 5 14:38:23 AJC: compiling source files 14:38:23 Timer event: 215ms: Time to first compiled message 14:38:23 AJC: compiled: /home/hawkinsh/eclipse/workspace32/runtime-New_configuration/ bug92895 /src/pack/A.aj 14:38:23 addSourcelineTask message=advice defined in pack.A has not been applied [Xlint:adviceDidNotMatch] file=/home/hawkinsh/eclipse/workspace32/runtime-New_configuration/ bug92895 /src/pack/A.aj line=4 14:38:23 Dropping back to full build 14:38:23 Preparing for build: not going to be incremental because no successful previous full build 14:38:23 AJC: compiling source files 14:38:23 AJC: compiled: /home/hawkinsh/eclipse/workspace32/runtime-New_configuration/ bug92895 /src/pack/A.aj 14:38:23 AJC: processing reweavable state 14:38:23 AJC: adding type mungers 14:38:23 Timer event: 452ms: Time to first woven message 14:38:23 AJC: woven aspect pack.A from /home/hawkinsh/eclipse/workspace32/runtime-New_configuration/ bug92895 /src/pack/A.aj 14:38:23 AJC: woven class pack.C1 from /home/hawkinsh/eclipse/workspace32/runtime-New_configuration/ bug92895 /src/pack/A.aj 14:38:23 AspectJ reports build successful, build was: FULL 14:38:23 AJDE Callback: finish. Was full build: true 14:38:23 Timer event: 517ms: Total time spent in AJDE 14:38:23 Timer event: 6ms: Create element map 2 rels in project: bug92895 14:38:23 Types affected during build = 1 14:38:23 Timer event: 3ms: Add markers 2 markers 14:38:24 Timer event: 1274ms: Total time spent in AJBuilder.build namely, the adviceDidNotMatch warning was added and then we fell back to a full build and the warning wasn't cleared. Performing a "clean" build fixes the problem. This is since the pipelining changes.</description>
    <commit commitTime="2006-08-03 07:23:55" id="9664058"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjPipeliningCompilerAdapter.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="151991" reportTime="2006-07-27 08:58:00">
    <summary>Missing copyright/license in recently added modules</summary>
    <description>BuildModuleTests does not test for licenses in ajdoc, loadtime, loadtime5, weaver5. When I added the necessary logic there were a couple of failures. Could the owners please step forward ... epl-cpl-ibm|parc|xerox|others LICENSE FAIL: C:\workspaces\org.aspectj-Restructure\weaver5\java5-src\org\aspectj\weaver\reflect\DeferredResolvedPointcutDefinition.java epl-cpl-ibm|parc|xerox|others COPYRIGHT FAIL: C:\workspaces\org.aspectj-Restructure\weaver5\java5-src\org\aspectj\weaver\reflect\DeferredResolvedPointcutDefinition.java epl-cpl-ibm|parc|xerox|others LICENSE FAIL: C:\workspaces\org.aspectj-Restructure\weaver5\java5-src\org\aspectj\weaver\reflect\InternalUseOnlyPointcutParser.java epl-cpl-ibm|parc|xerox|others COPYRIGHT FAIL: C:\workspaces\org.aspectj-Restructure\weaver5\java5-src\org\aspectj\weaver\reflect\InternalUseOnlyPointcutParser.java Total passed: 7 failed: 2 I also noticed the following messages. Does anyone know what they mean? BuildModuleTest: Define "run.build.tests" as a system property to run tests to build run-all-junit-tests this is the only warning class org.aspectj.internal.build.BuildModuleTest.testNoDuplicates incomplete error building module weaver at org.aspectj.internal.tools.ant.taskdefs.BuildModule.build BuildModule.java:145 at org.aspectj.internal.tools.ant.taskdefs.BuildModule.execute BuildModule.java:117 at org.aspectj.internal.build.BuildModuleTest.doTask BuildModuleTest.java:445 at org.aspectj.internal.build.BuildModuleTest.testNoDuplicates BuildModuleTest.java:178 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:585 at junit.framework.TestCase.runTest TestCase.java:154 at junit.framework.TestCase.runBare TestCase.java:127 at junit.framework.TestResult$1.protect TestResult.java:106 at junit.framework.TestResult.runProtected TestResult.java:124 Module at junit.framework.TestResult.run TestResult.java:109 at junit.framework.TestCase.run TestCase.java:118 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at junit.framework.TestSuite.runTest TestSuite.java:208 at junit.framework.TestSuite.run TestSuite.java:203 at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run JUnit3TestReference.java:128 at org.eclipse.jdt.internal.junit.runner.TestExecution.run TestExecution.java:38 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests RemoteTestRunner.java:460 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests RemoteTestRunner.java:673 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run RemoteTestRunner.java:386 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main RemoteTestRunner.java:196</description>
    <commit commitTime="2006-08-03 15:51:04" id="7aa6cfe"/>
    <fixedFiles>
      <file>build/testsrc/org/aspectj/build/BuildModuleTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="152631" reportTime="2006-08-02 13:26:00">
    <summary>Problem with decp on an aspect using cflow</summary>
    <description>This occurs in the AspectJ build in AJDT from August 1 but not from July 31: java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelTypeMunger.enforceDecpRule1_abstractMethodsImplemented BcelTypeMunger.java:250 at org.aspectj.weaver.bcel.BcelTypeMunger.mungeNewParent BcelTypeMunger.java:194 at org.aspectj.weaver.bcel.BcelTypeMunger.munge BcelTypeMunger.java:106 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:454 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:119 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1597 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1548 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1328 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1124 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:451 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving AjPipeliningCompilerAdapter.java:389 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:377 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:98 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:533 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:891 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:246 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:165 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 trouble in:public class glassbox.agent.ErrorContainmentTest$ErrorMockAspect extends java.lang.Object implements glassbox.agent.api.NotSerializable: private static Throwable ajc$initFailureCause [Synthetic] public static final glassbox.agent.ErrorContainmentTest$ErrorMockAspect ajc$perSingletonInstance [Synthetic] static void &amp;lt;clinit&amp;gt; : catch java.lang.Throwable -&amp;gt; E0 | INVOKESTATIC glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$postClinit V line 60 catch java.lang.Throwable -&amp;gt; E0 GOTO L0 E0: ASTORE_0 ALOAD_0 PUTSTATIC glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$initFailureCause Ljava/lang/Throwable; L0: RETURN end static void &amp;lt;clinit&amp;gt; void &amp;lt;init&amp;gt; : ALOAD_0 // Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect; this line 60 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V RETURN end void &amp;lt;init&amp;gt; public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$1$9589fc AdviceAttribute before, scope &amp;amp;&amp;amp; call * hook1 , 0, 1670 : NEW java.lang.RuntimeException line 64 DUP LDC "rte" INVOKESPECIAL java.lang.RuntimeException.&amp;lt;init&amp;gt; Ljava/lang/String; V ATHROW end public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$1$9589fc public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$2$f75db3e2 AdviceAttribute before, execution * glassbox.agent.ErrorContainmentTest.hook5 , 0, 1764 : NEW java.lang.RuntimeException line 67 DUP LDC "rte" INVOKESPECIAL java.lang.RuntimeException.&amp;lt;init&amp;gt; Ljava/lang/String; V ATHROW end public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$2$f75db3e2 public void ajc$around$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$3$a3a17d org.aspectj.runtime.internal.AroundClosure AdviceAttribute around, scope &amp;amp;&amp;amp; call * hook2 , 1, 1913 : NEW java.lang.Error line 71 DUP LDC "foo" INVOKESPECIAL java.lang.Error.&amp;lt;init&amp;gt; Ljava/lang/String; V ATHROW end public void ajc$around$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$3$a3a17d org.aspectj.runtime.internal.AroundClosure static void ajc$around$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$3$a3a17dproceed org.aspectj.runtime.internal.AroundClosure throws java.lang.Throwable org.aspectj.weaver.AjAttribute$AjSynthetic@19a01f9 : ALOAD_0 // Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect; this line 1 ICONST_0 ANEWARRAY java.lang.Object INVOKEVIRTUAL org.aspectj.runtime.internal.AroundClosure.run [Ljava/lang/Object; Ljava/lang/Object; INVOKESTATIC org.aspectj.runtime.internal.Conversions.voidValue Ljava/lang/Object; Ljava/lang/Object; RETURN end static void ajc$around$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$3$a3a17dproceed org.aspectj.runtime.internal.AroundClosure throws java.lang.Throwable public void ajc$after$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$4$bfd07f AdviceAttribute after, scope &amp;amp;&amp;amp; call * hook4 , 0, 1991 : NEW org.aspectj.lang.SoftException line 74 DUP ACONST_NULL INVOKESPECIAL org.aspectj.lang.SoftException.&amp;lt;init&amp;gt; Ljava/lang/Throwable; V ATHROW end public void ajc$after$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$4$bfd07f public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$5$e5bddfdc AdviceAttribute before, logErrorInTest , 0, 2446 : GETSTATIC glassbox.agent.ErrorContainmentTest.logCount I line 84 ICONST_1 IADD PUTSTATIC glassbox.agent.ErrorContainmentTest.logCount I RETURN line 85 end public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$5$e5bddfdc public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$6$16ecfe62 AdviceAttribute before, adviceexecution * * &amp;amp;&amp;amp; within glassbox.util.logging.api.LogManagement &amp;amp;&amp;amp; cflow logError &amp;amp;&amp;amp; cflow execution * testLoggingError .. &amp;amp;&amp;amp; within glassbox.agent.ErrorContainmentTest , 0, 2506 : GETSTATIC java.lang.System.err Ljava/io/PrintStream; line 87 LDC "match" INVOKEVIRTUAL java.io.PrintStream.println Ljava/lang/String; V RETURN line 88 end public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$6$16ecfe62 public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$7$e9ae8482 AdviceAttribute before, adviceexecution * * &amp;amp;&amp;amp; within glassbox.util.logging.api.LogManagement &amp;amp;&amp;amp; cflow execution * testLoggingError .. &amp;amp;&amp;amp; within glassbox.agent.ErrorContainmentTest , 0, 2721 : GETSTATIC java.lang.System.err Ljava/io/PrintStream; line 90 LDC "match in test" INVOKEVIRTUAL java.io.PrintStream.println Ljava/lang/String; V RETURN line 91 end public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$7$e9ae8482 public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$8$c6ac5351 AdviceAttribute before, adviceexecution * * &amp;amp;&amp;amp; within glassbox.util.logging.api.LogManagement &amp;amp;&amp;amp; cflow logError , 0, 2923 : GETSTATIC java.lang.System.err Ljava/io/PrintStream; line 93 LDC "match in log" INVOKEVIRTUAL java.io.PrintStream.println Ljava/lang/String; V RETURN line 94 end public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$8$c6ac5351 public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$9$16ecfe62 AdviceAttribute before, adviceexecution * * &amp;amp;&amp;amp; within glassbox.util.logging.api.LogManagement &amp;amp;&amp;amp; cflow logError &amp;amp;&amp;amp; cflow execution * testLoggingError .. &amp;amp;&amp;amp; within glassbox.agent.ErrorContainmentTest , 0, 3069 : GETSTATIC glassbox.agent.ErrorContainmentTest.recursiveThrows I line 96 ICONST_1 IADD PUTSTATIC glassbox.agent.ErrorContainmentTest.recursiveThrows I GETSTATIC glassbox.agent.ErrorContainmentTest.recursiveThrows I line 97 ICONST_2 IF_ICMPGE L0 NEW java.lang.RuntimeException line 98 DUP LDC "recursive logging failure" INVOKESPECIAL java.lang.RuntimeException.&amp;lt;init&amp;gt; Ljava/lang/String; V ATHROW L0: RETURN line 100 end public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$9$16ecfe62 public static glassbox.agent.ErrorContainmentTest$ErrorMockAspect aspectOf org.aspectj.weaver.AjAttribute$AjSynthetic@3cd8fe : GETSTATIC glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$perSingletonInstance Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect; line 1 IFNONNULL L0 NEW org.aspectj.lang.NoAspectBoundException DUP LDC "glassbox_agent_ErrorContainmentTest$ErrorMockAspect" GETSTATIC glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$initFailureCause Ljava/lang/Throwable; INVOKESPECIAL org.aspectj.lang.NoAspectBoundException.&amp;lt;init&amp;gt; Ljava/lang/String;Ljava/lang/Throwable; V ATHROW L0: GETSTATIC glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$perSingletonInstance Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect; ARETURN end public static glassbox.agent.ErrorContainmentTest$ErrorMockAspect aspectOf public static boolean hasAspect org.aspectj.weaver.AjAttribute$AjSynthetic@1bd4f6 : GETSTATIC glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$perSingletonInstance Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect; line 1 IFNULL L0 ICONST_1 IRETURN L0: ICONST_0 IRETURN end public static boolean hasAspect private static void ajc$postClinit org.aspectj.weaver.AjAttribute$AjSynthetic@1febf91 : NEW glassbox.agent.ErrorContainmentTest$ErrorMockAspect line 1 DUP INVOKESPECIAL glassbox.agent.ErrorContainmentTest$ErrorMockAspect.&amp;lt;init&amp;gt; V PUTSTATIC glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$perSingletonInstance Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect; RETURN end private static void ajc$postClinit end public class glassbox.agent.ErrorContainmentTest$ErrorMockAspect when type munging with BcelTypeMunger ResolvedTypeMunger Parent, null when weaving aspects when weaving when batch building BuildConfig[C:\devel\glassbox\.metadata\.plugins\org.eclipse.ajdt.core\glassboxMonitor.generated.lst] #Files=107 The source is: public class ErrorContainmentTest extends TestCase { ... static aspect ErrorMockAspect implements NotSerializable { ... I will try to narrow this down if the problem isn't obvious.</description>
    <commit commitTime="2006-08-04 10:29:04" id="ff2377a"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="152835" reportTime="2006-08-04 06:00:00">
    <summary>ArrayIndexOutOfBoundsException in EclipseAdapterUtils.makeLocationContext</summary>
    <description>Got the following exception during startup of Eclipse java.lang.ArrayIndexOutOfBoundsException at org.aspectj.ajdt.internal.core.builder.EclipseAdapterUtils.makeLocationContext EclipseAdapterUtils.java:65 at org.aspectj.ajdt.internal.core.builder.EclipseAdapterUtils.makeSourceLocation EclipseAdapterUtils.java:121 at org.aspectj.ajdt.internal.core.builder.EclipseAdapterUtils.makeMessage EclipseAdapterUtils.java:130 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$4.acceptResult AjBuildManager.java:959 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.acceptResult AjPipeliningCompilerAdapter.java:402 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:375 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:98 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:533 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:329 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:891 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:246 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:165 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 ArrayIndexOutOfBoundsException thrown: -2</description>
    <commit commitTime="2006-08-04 11:02:38" id="908b405"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java</file>
    </fixedFiles>
  </bug>
  <bug id="152979" reportTime="2006-08-07 11:04:00">
    <summary>Optimization: Reference Use and URL Caching in ClassLoader Repository</summary>
    <description>I have found that a lot of memory can get pinned by the BCEL ClassLoaderRepository. For example, on a test configuration of Glassbox with WebLogic over 40 megabytes were pinned in memory due to this loader. * I also notice that some of the time spent with loading and parsing redundant classes for shared weaving configuration could be reduced by having a global cache of bytes for URL's instead, i.e., the ClassLoaderRepository is local to a loader, so even if the same class on disk is resolved multiple times in different loaders, it isn't read from cache. This latter issue will be reduced if loading types from a parent loader use reflection delegates instead but BCEL still has to be used for aspects on &amp;lt;1.5 VM's... The attached patch has some metrics in it to measure what's happening and it also uses SoftReferences to cache without pinning the reference types and uses a two-step look up process to maintain a global URL cache. When I run this on WebLogic 9.2 with Glassbox and view their admin console and some smaller apps I get this output: BCEL repository total load time: 7733 ms, in url: 6029 ms for 1427 url cache hits = 1683 missEvicted = 0 missUrlEvicted= 0 all misses = 1427, loader hits = 0 On Tomcat 5.5 with some different sample apps: BCEL repository total load time: 4945 ms, in url: 4319 ms for 636 url cache hits = 548 missEvicted = 0 missUrlEvicted= 190 all misses= 446, loader hits = 3 So at least in my configuration the URL-based cache is quite effective with almost a 50% hit rate whereas the loader-based cache provides little value. From what I've seen, it's worth considering not even using the loader-based BCEL cache at all but others may have configurations where it helps. * This test was on a development build of AspectJ which I had modified so that the LTWWorld evicts classes after loading</description>
    <commit commitTime="2006-08-08 11:26:28" id="387c3ac"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/util/ClassLoaderRepository.java</file>
      <file>bcel-builder/testsrc/org/aspectj/apache/bcel/classfile/tests/AllTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="152388" reportTime="2006-07-31 18:31:00">
    <summary>NPE in MessageUtil.addExtraSourceLocations</summary>
    <description>I get this message from an error in a recent dev build of AspectJ with load-time weaving. I don't know how there is a null source location associated with this message, but either it shouldn't be there or MessageUtil line 806 should use this patch: Index: src/org/aspectj/bridge/MessageUtil.java =================================================================== RCS file: /home/technology/org.aspectj/modules/bridge/src/org/aspectj/bridge/MessageUtil.java,v retrieving revision 1.11 diff -u -r1.11 MessageUtil.java --- src/org/aspectj/bridge/MessageUtil.java 1 Jun 2006 09:36:37 -0000 1.11 +++ src/org/aspectj/bridge/MessageUtil.java 31 Jul 2006 22:32:16 -0000 @@ -803,7 +803,7 @@ writer.println baseMessage ; for Iterator iter = message.getExtraSourceLocations .iterator ; iter.hasNext ; { ISourceLocation element = ISourceLocation iter.next ; - writer.print "\tsee also: " + element.toString ; + writer.print "\tsee also: " + element ; if iter.hasNext { writer.println ; } NPE follows: java.lang.NullPointerException at org.aspectj.bridge.MessageUtil.addExtraSourceLocations MessageUtil.java:806 at org.aspectj.bridge.MessageUtil.renderMessage MessageUtil.java:793 at org.aspectj.bridge.Message.toString Message.java:177 at org.aspectj.bridge.MessageWriter.render MessageWriter.java:73 at org.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHandler.render WeavingAdaptor.java:471 at org.aspectj.bridge.MessageWriter.handleMessage MessageWriter.java:41 at org.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHandler.handleMessage WeavingAdaptor.java:425 at org.aspectj.weaver.bcel.BcelTypeMunger.error BcelTypeMunger.java:378 at org.aspectj.weaver.bcel.BcelTypeMunger.enforceDecpRule1_abstractMethodsImplemented BcelTypeMunger.java:273 at org.aspectj.weaver.bcel.BcelTypeMunger.mungeNewParent BcelTypeMunger.java:194 at org.aspectj.weaver.bcel.BcelTypeMunger.munge BcelTypeMunger.java:106 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:450 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:115 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1613 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1564 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1341 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1163 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:288 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:214 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:76 at org.aspectj.ext.ltw13.ClassPreProcessorAdapter.preProcess ClassPreProcessorAdapter.java:65 at org.codehaus.aspectwerkz.hook.impl.ClassPreProcessorHelper.defineClass0Pre ClassPreProcessorHelper.java:107 at java.lang.ClassLoader.defineClass ClassLoader.java:539 ... NOTE: I'm using Alex Vasseur's adaptor to invoke AspectJ LTW from a 1.4 VM, but with recursion protection added. I don't think that should change the expected behavior of Aj.</description>
    <commit commitTime="2006-08-08 13:48:32" id="a38edd3"/>
    <fixedFiles>
      <file>bridge/src/org/aspectj/bridge/MessageUtil.java</file>
    </fixedFiles>
  </bug>
  <bug id="152161" reportTime="2006-07-28 11:51:00">
    <summary>Contribution: Support -Xset in Load-Time Weaving Configuration</summary>
    <description>I needed this to try out a setting in the pipelined compilation -Xset:runMinimalMemory=true ... I was able to verify that it parsed and set an option correctly in the debugger. I also have included a test that sets all the currently available options.</description>
    <commit commitTime="2006-08-08 13:50:57" id="039be68"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Options.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/ltw/LTWTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="148219" reportTime="2006-06-22 10:05:00">
    <summary>Wrong warning is reported</summary>
    <description>I used ajdt_1.3.1_for_eclipse_3.1.zip on Eclipse 3.1.2. Below is my aspectj code. public aspect MyMessages { pointcut getResourceString String key : args key, .. &amp;amp;&amp;amp; call * CommonPlugin.getResourceString String, .. ; String around String key :getResourceString key { return key; } } The warning message is The parameter key is never read. See my screenshot.</description>
    <commit commitTime="2006-08-08 15:37:36" id="07c2189"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="154332" reportTime="2006-08-18 03:49:00">
    <summary>[annotations] Incorrect handling of java.lang annotations when matching</summary>
    <description>As raised by Mr Bodkin on the list: Can anyone tell me why this compiling this program produces warnings for marker but not for deprecated in a recent dev build of AJDT ? Is this just a bug? Both have runtime retention, so I would expect equivalent behavior. @Deprecated @Marker public aspect Annot { pointcut test : within @Marker * ;// * ; declare warning: staticinitialization @Deprecated * : "deprecated"; declare warning: staticinitialization @Marker * : "marker"; public static void main String argz[] { new Baz .foo ; } } @Deprecated @Marker class Baz { public void foo {} } @Retention RetentionPolicy.RUNTIME public @interface Marker { }</description>
    <commit commitTime="2006-08-18 08:21:58" id="59123b0"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
    </fixedFiles>
  </bug>
  <bug id="150271" reportTime="2006-07-11 11:31:00">
    <summary>Allow multiple levels of LTW information</summary>
    <description>It would be nice if basic information about load-time weaving what version of AspectJ is being used, what loaders are doing weaving and what configuration is being used was available without all of the -verbose information listing of all classes woven or not woven. It's also unfortunate that the flags for weaving level are 2 quite different ones: -Daj.weaving.verbose -Dorg.aspectj.weaver.showWeaveInfo Why not something like -Dorg.aspectj.weaver.level=[none|summary|info|verbose] summary: just what configuration is used info: list affected join points etc. like showWeaveInfo verbose: all like verbose now</description>
    <commit commitTime="2006-08-23 11:52:22" id="8549d86"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/DefaultMessageHandler.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Options.java</file>
      <file>tests/java5/ataspectj/ataspectj/TestHelper.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="129525" reportTime="2006-02-27 03:18:00">
    <summary>Don't Dump Bytecodes to Syserr in LTW</summary>
    <description>The load-time weaving system can produce truly massive quantities of output when there's a weaving error, since the system dumps the bytecode to syserr. It would be much better to produce an ajcore file and just point to it, or use some other log.</description>
    <commit commitTime="2006-08-24 17:32:00" id="04fa1dc"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/WeavingURLClassLoader.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="155972" reportTime="2006-09-01 08:45:00">
    <summary>NullPointerException in ConstructorSignature.getConstructor</summary>
    <description>AspectJ version: 1.5.3.200608290814 When advising a constructor, we can do the following to obtain the constructor as a java.lang.reflect.Member: Member cons = ConstructorSignature thisJoinPointStaticPart .getSignature .getConstructor ; however that sometimes fails, and returns null.</description>
    <commit commitTime="2006-09-04 14:24:51" id="090de7e"/>
    <fixedFiles>
      <file>runtime/src/org/aspectj/runtime/reflect/ConstructorSignatureImpl.java</file>
      <file>runtime/src/org/aspectj/runtime/reflect/FieldSignatureImpl.java</file>
      <file>runtime/src/org/aspectj/runtime/reflect/InitializerSignatureImpl.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="158412" reportTime="2006-09-23 05:11:00">
    <summary>@Pointcut in declare error results in NPE</summary>
    <description>I am trying to use an @AspectJ @Pointcut in a "normal" AspectJ declare error expression. That results in the following exception. java.lang.NullPointerException at org.aspectj.weaver.patterns.ReferencePointcut.concretize1 ReferencePointcut.java:361 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:233 at org.aspectj.weaver.patterns.NotPointcut.concretize1 NotPointcut.java:100 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:233 at org.aspectj.weaver.patterns.AndPointcut.concretize1 AndPointcut.java:97 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:233 at org.aspectj.weaver.patterns.Pointcut.concretize Pointcut.java:220 at org.aspectj.weaver.Checker.concretize Checker.java:45 at org.aspectj.weaver.CrosscuttingMembers.addShadowMunger CrosscuttingMembers.java:91 at org.aspectj.weaver.CrosscuttingMembers.addDeclare CrosscuttingMembers.java:122 at org.aspectj.weaver.CrosscuttingMembers.addDeclares CrosscuttingMembers.java:113 at org.aspectj.weaver.CrosscuttingMembersSet.addAdviceLikeDeclares CrosscuttingMembersSet.java:117 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addAdviceLikeDeclares AjLookupEnvironment.java:382 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:245 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:301 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:315 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:887 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:244 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:199 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:170 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:117 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 NullPointerException thrown: null</description>
    <commit commitTime="2006-09-25 13:51:40" id="e56a69a"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="148908" reportTime="2006-06-27 18:41:00">
    <summary>incorrect source signature for field ipe with qualified allocation expression</summary>
    <description>Ajdoc chokes on interfaces with initializers for final fields it doesn't preserve the initializer value . See attached AJDT project that fails when you run ajdoc with the default options on it: &amp;gt; Calling ajc... &amp;gt; Building signature files... &amp;gt; Calling javadoc... Loading source file C:\eclipse\3.2\ajdocworkingdir\BadInterface.java... 1 error &amp;gt; Decorating html files... &amp;gt; Removing generated tags this may take a while ... &amp;gt; Finished. C:\eclipse\3.2\ajdocworkingdir\BadInterface.java:9: = expected static final Comparator MY_COMPARATOR; ^</description>
    <commit commitTime="2006-09-26 09:26:33" id="fc39df1"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="159143" reportTime="2006-09-28 12:47:00">
    <summary>subtype pattern not working for declare annotation on method</summary>
    <description>Using AspectJ 1.5.3.200609271036, when declaring an annotation on a method, get unexpected error when using subtype wildcard for the declaring type. E.g., declare @method : void Foo+.foo : @MethodAnnotation; Error text: "The method 'void Foo+.foo ' does not exist"</description>
    <commit commitTime="2006-10-04 07:27:44" id="513564a"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="160167" reportTime="2006-10-08 18:51:00">
    <summary>NPE when using crossrefs option for iajc ant task</summary>
    <description>The ant task is shown below. I ommited the full paths to the values of inpath, outJar, and argfiles, because they are somewhat long hence the "..." before the file names : &amp;lt;iajc crossrefs="true" argfiles="...\weave-jars.txt" inpath="...\org.eclipse.core.runtime_3.2.0.v20060603.jar" outJar="...\org.eclipse.core.runtime_3.2.0.v20060603_woven.jar"&amp;gt; &amp;lt;classpath&amp;gt; &amp;lt;pathelement location="C:\aspectj1.5\lib\aspectjrt.jar"/&amp;gt; &amp;lt;fileset dir="${plugins.dir}"&amp;gt; &amp;lt;include name="**/*.jar"/&amp;gt; &amp;lt;/fileset&amp;gt; &amp;lt;/classpath&amp;gt; &amp;lt;/iajc&amp;gt; My argfile only contains the absolute path of a single .aj file, which contains one aspect. The aspect is shown below. It is very basic - advice bodies simply toggle a boolean variable. public aspect FFDC { public static boolean bit = false; protected pointcut ffdcScope : within org.eclipse..* ; protected pointcut excluded : within org.eclipse.ffdc.FFDC+ || within org.eclipse.core.internal.runtime.PlatformActivator ; before CoreException c : ffdcScope &amp;amp;&amp;amp; !excluded &amp;amp;&amp;amp; handler CoreException+ &amp;amp;&amp;amp; args c { bit = !bit; } after throwing CoreException c : ffdcScope &amp;amp;&amp;amp; !excluded &amp;amp;&amp;amp; !handler * { bit = !bit; } after Plugin activator : execution void PlatformActivator.start .. &amp;amp;&amp;amp; this activator { bit = !bit; } } This task worked properly before I added "crossrefs=true". After adding this option, I get the following error: weave-C:\eclipse\sdk-aspect-package\eclipse\plugins\org.eclipse.core.runtime_3.2.0.v20060603.jar: [iajc] abort ABORT -- NullPointerException null [iajc] null [iajc] java.lang.NullPointerException [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:313 [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:163 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 [iajc] at org.aspectj.tools.ajc.Main.run Main.java:367 [iajc] at org.aspectj.tools.ajc.Main.runMain Main.java:246 [iajc] at org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM AjcTask.java:1282 [iajc] at org.aspectj.tools.ant.taskdefs.AjcTask.execute AjcTask.java:1080 [iajc] at org.apache.tools.ant.UnknownElement.execute UnknownElement.java:275 [iajc] at org.apache.tools.ant.Task.perform Task.java:364 [iajc] at org.apache.tools.ant.Target.execute Target.java:341 [iajc] at org.apache.tools.ant.Target.performTasks Target.java:369 [iajc] at org.apache.tools.ant.Project.executeSortedTargets Project.java:1216 [iajc] at org.apache.tools.ant.helper.SingleCheckExecutor.executeTargets SingleCheckExecutor.java:37 [iajc] at org.apache.tools.ant.Project.executeTargets Project.java:1068 [iajc] at org.apache.tools.ant.taskdefs.Ant.execute Ant.java:382 [iajc] at org.apache.tools.ant.taskdefs.CallTarget.execute CallTarget.java:107 [iajc] at org.apache.tools.ant.UnknownElement.execute UnknownElement.java:275 [iajc] at org.apache.tools.ant.Task.perform Task.java:364 [iajc] at org.apache.tools.ant.Target.execute Target.java:341 [iajc] at org.apache.tools.ant.Target.performTasks Target.java:369 [iajc] at org.apache.tools.ant.Project.executeSortedTargets Project.java:1216 [iajc] at org.apache.tools.ant.Project.executeTarget Project.java:1185 [iajc] at org.apache.tools.ant.helper.DefaultExecutor.executeTargets DefaultExecutor.java:40 [iajc] at org.apache.tools.ant.Project.executeTargets Project.java:1068 [iajc] at org.apache.tools.ant.Main.runBuild Main.java:668 [iajc] at org.apache.tools.ant.Main.startAnt Main.java:187 [iajc] at org.apache.tools.ant.launch.Launcher.run Launcher.java:246 [iajc] at org.apache.tools.ant.launch.Launcher.main Launcher.java:67</description>
    <commit commitTime="2006-10-09 12:28:29" id="f7508cf"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="149293" reportTime="2006-06-30 08:20:00">
    <summary>declare annotation problem: AIOOBE at ProblemReporter.java:2992</summary>
    <description>This has been happening a lot, but I'm having trouble figuring out why it's happening. It's always "5". It happens both in Eclipse and from the command line. java.lang.ArrayIndexOutOfBoundsException at org.aspectj.org.eclipse.jdt.internal.compiler.problem.ProblemReporter.invalidType ProblemReporter.java:2992 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.reportInvalidType TypeReference.java:170 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType TypeReference.java:136 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType TypeReference.java:123 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Annotation.resolveType Annotation.java:214 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode.resolveAnnotations ASTNode.java:436 at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.getAnnotationTypes EclipseSourceType.java:443 at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.isAnnotationStyleAspect EclipseSourceType.java:123 at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.isAspect EclipseSourceType.java:108 at org.aspectj.weaver.ReferenceType.isAspect ReferenceType.java:159 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.verifyAnyTypeParametersMeetBounds AjLookupEnvironment.java:269 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:228 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:301 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:315 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:887 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:244 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:163 at org.aspectj.ajde.internal.CompilerAdapter.compile CompilerAdapter.java:122 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 ArrayIndexOutOfBoundsException thrown: 5</description>
    <commit commitTime="2006-10-17 08:08:12" id="bc2f36f"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="161217" reportTime="2006-10-17 08:19:00">
    <summary>NPE in BcelAdvice</summary>
    <description>I've been playing with some aspect deployment models and got into this error during project rebuild from AJDT: java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:199 at org.aspectj.weaver.Shadow.implementMungers Shadow.java:699 at org.aspectj.weaver.Shadow.implement Shadow.java:471 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:2832 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:506 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeave ... lasses when weaving when batch building BuildConfig[...] #Files=6 Here is the aspect and classes it is applied to: ----- @Aspect "percflow execution * InstrumentedBean.getProperty2 " public class GetFieldAtAspect { @Around "execution * ConfigurableBean.getProperty2 " public Object onGet ProceedingJoinPoint jp throws Throwable { return jp.proceed ; } } ------ import org.springframework.beans.factory.InitializingBean; public class InstrumentedBean implements InitializingBean, IInstrumentedBean { private ConfigurableBean configurableBean; private String value; private transient String transientValue = "aaa"; public void afterPropertiesSet throws Exception { this.configurableBean = new ConfigurableBean ; } public String getProperty1 { synchronized this { return this.configurableBean.getProperty1 ; } } public String getProperty2 { synchronized this { return this.configurableBean.getProperty2 ; } } public void setValue String value { synchronized this { this.value = value; } } public Object getValue { synchronized this { return value; } } public Object getTransientValue { return transientValue; } public void setTransientValue String transientValue { this.transientValue = transientValue; } } ------ import java.io.Serializable; import org.springframework.beans.factory.annotation.Configurable; @Configurable public class ConfigurableBean implements Serializable { private static final long serialVersionUID = 1L; private String property1; private String property2; public ConfigurableBean { } public String getProperty1 { return this.property1; } public String getProperty2 { return this.property2; } public void setProperty1 String property1 { this.property1 = property1; } public void setProperty2 String property2 { this.property2 = property2; } }</description>
    <commit commitTime="2006-10-19 14:05:02" id="044542c"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc153/Ajc153Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</file>
    </fixedFiles>
  </bug>
  <bug id="160496" reportTime="2006-10-11 11:41:00">
    <summary>ajdoc Main class needs refactoring for ease of use</summary>
    <description>Whilst looking at other ajdoc bugs it was slightly confusing to read the main ajdoc method. I didn't want to include the refactoring of this within patches for the other bugs as this is mearly for ease of use. Therefore, raising this enhancement to cover it.</description>
    <commit commitTime="2006-10-23 10:39:38" id="efe6cc7"/>
    <fixedFiles>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/Main.java</file>
    </fixedFiles>
  </bug>
  <bug id="165148" reportTime="2006-11-20 08:26:00">
    <summary>[ltw] Unnecessary exceptions during concretization of aspects in aop.xml</summary>
    <description>Due to the mechanism used in ConcreteAspectCodeGen I see a lot of unnecessary exceptions created. The problem is rather than looking up a type to confirm it doesn't exist before defining it, the code uses a resolve to check if it exists and resolve attempts to build it if it isnt there. Because the classloader will never find an aop.xml defined type the class doesn't exist anywhere on the classpath , a spurious exception is created and sometimes traced if collecting a trace . I'm going to change the code to do a lookup, that is all that is really necessary.</description>
    <commit commitTime="2006-11-20 13:20:41" id="e8d2556"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="170102" reportTime="2007-01-10 12:16:00">
    <summary>iajc Ant task doesn't support all warn options</summary>
    <description>The iajc Ant task currently supports only a few of the options provided by the ajc compiler. It would be nice if it could support them all so that builds done using the Ant task generate the same errors/warnings as the ones done within the Eclipse IDE.</description>
    <commit commitTime="2007-01-11 08:43:18" id="5336603"/>
    <fixedFiles>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="171667" reportTime="2007-01-25 09:24:00">
    <summary>When ordering a Clean with Build Automatico I receive the error below.</summary>
    <description>When executing an Clean Project in Eclipse with Automatic Building I receive the error below. line from the top stack, e.g. "SomeFile.jara:243" java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.problem.AjProblemReporter.methodMustOverride AjProblemReporter.java:380 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements MethodDeclaration.java:153 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve AbstractMethodDeclaration.java:400 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDe ... pter.java:107 at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run AspectJBuildManager.java:191 NullPointerException thrown: null</description>
    <commit commitTime="2007-02-16 10:02:27" id="4177bed"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
    </fixedFiles>
  </bug>
  <bug id="211674" reportTime="2007-12-01 13:15:00">
    <summary>[ataspectj] after throwing annotation style is too sensitive to parameter positions</summary>
    <description>Reported on the list by Ashley Williams: Having converted my aspects to use the @AspectJ style, I'm now getting a strange error message when a compile my tracing aspect,. First here is the section of code: @Pointcut "execution @Tracing * * .. &amp;amp;&amp;amp; @annotation tracing " void annotatedMethods Tracing tracing { } @AfterThrowing pointcut = "annotatedMethods tracing ", throwing = "t" public void logException JoinPoint thisJoinPoint, Tracing tracing, Throwable t { Level level = Level.toLevel tracing.level ; if logger.isEnabledFor level { logger.log level, formatter.formatSignatureThrowing thisJoinPoint , t ; } } So I am matching on all methods annotated with @Tracing and logging the subclass of Throwable that may have been thrown. However when I run my test case i get the following error: java.lang.VerifyError: class: com/db/abfo/tracing/PojoOne, method: calculate signature: V catch_type not a subclass of Throwable This used to work when I used the aspectj after throwing language extention form: pointcut annotatedMethods Tracing tracing : execution @Tracing * * .. &amp;amp;&amp;amp; @annotation tracing ; after Tracing tracing throwing Throwable t : annotatedMethods tracing { Level level = tracing.level .getLevel ; if logger.isEnabledFor level { logger.log level, formatter.formatSignatureThrowing thisJoinPoint , t ; } }</description>
    <commit commitTime="2007-12-02 09:24:51" id="9de03b7"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc154/Ajc154Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="203384" reportTime="2007-09-13 19:22:00">
    <summary>AST: Type information not exposed on itmd, itfd...</summary>
    <description>The Types: org/aspectj/org/eclipse/jdt/core/dom/InterTypeFieldDeclaration.java org/aspectj/org/eclipse/jdt/core/dom/InterTypeMethodDeclaration.java Which can be returned by visiting the AjAST tree do not expose the name of the type on which the method or field is added. I require this information in the project I'm currently working on, and would appreciate if it was added.</description>
    <commit commitTime="2008-01-22 18:48:29" id="114db35"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AjASTConverter.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/InterTypeFieldDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/InterTypeMethodDeclaration.java</file>
    </fixedFiles>
  </bug>
  <bug id="210848" reportTime="2007-11-24 17:49:00">
    <summary>Fix javadoc for ProceedingJoinPoint.proceed Object[]</summary>
    <description>Currently, javadoc for ProceedingJoinPoint.proceed Object[] incorrectly mentions that arguments must be the same as the advice context except for the join point object . However, http://www.eclipse.org/aspectj/doc/released/adk15notebook/ataspectj-pcadvice.html mentions a different expectation. It looks like copying the same text as in the aj5notebook into javadoc should do well.</description>
    <commit commitTime="2008-02-21 01:05:35" id="b4715bc"/>
    <fixedFiles>
      <file>runtime/src/org/aspectj/lang/ProceedingJoinPoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="220430" reportTime="2008-02-26 13:41:00">
    <summary>mixup in retrieving the right class in Java15AnnotationFinder</summary>
    <description>See http://jira.springframework.org/browse/SPR-4390 The problem is: The method getAnnotations is called in the Java15AnnotationFinder - and the member that is passed is a method that is defined on some class C. The bcelRepository is then used to load that class. In the buggy situation there are two versions of the class around - one on the regular classpath and one in the core JVM classes in this case JAXBContext on Java6 . The member passed in is from the variant defined as a standard extension or core class. For some reason the bcelRepository loads the Java5 version and then cannot find the member. This is worse than a ClassNotFoundException which would case the AnnotationFinder to fall back on reflection. I think the right thing to do now is recognize this situation and fall back on reflection - which will recover the annotations a different way.</description>
    <commit commitTime="2008-02-26 21:03:19" id="9bbdb41"/>
    <fixedFiles>
      <file>weaver5/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java</file>
    </fixedFiles>
  </bug>
  <bug id="219830" reportTime="2008-02-21 12:47:00">
    <summary>java.lang.NullPointerException in Java15AnnotationFinder when using SWT</summary>
    <description>I receive the following Exception when running SWT with AspjectJ load time weaving through the Spring Framework. The lines around org.aspectj.weaver.reflect.Java15AnnotationFinder.getAnnotations Java15AnnotationFinder.java:123 are as follows: for int i = 0; i &amp;lt; anns.length; i++ { annSet.add world.resolve UnresolvedType.forSignature anns[i].getTypeSignature ; } When using the debugger, I see "world" as a null value. Attached is a stripped down Eclipse project that generates the error during startup. My runtime arguments are as follows: -javaagent:${resource_loc:/AspectJBug/lib/spring-agent.jar} -------------------------------------------- [AppClassLoader@19d819d8] abort trouble in: final class org.eclipse.swt.awt.SWT_AWT$10 extends java.lang.Object implements java.lang.Runnable: private final java.awt.Frame val$frame [Synthetic] void &amp;lt;init&amp;gt; java.awt.Frame : ALOAD_0 // Lorg/eclipse/swt/awt/SWT_AWT$10; this line 274 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V constructor-execution void org.eclipse.swt.awt.SWT_AWT$10.&amp;lt;init&amp;gt; java.awt.Frame | ALOAD_0 // Lorg/eclipse/swt/awt/SWT_AWT$10; this line 1 | ALOAD_1 | PUTFIELD org.eclipse.swt.awt.SWT_AWT$10.val$frame Ljava/awt/Frame; | RETURN constructor-execution void org.eclipse.swt.awt.SWT_AWT$10.&amp;lt;init&amp;gt; java.awt.Frame end void &amp;lt;init&amp;gt; java.awt.Frame public void run : method-execution void org.eclipse.swt.awt.SWT_AWT$10.run | catch java.lang.Throwable -&amp;gt; E0 | | LDC "sun.awt.windows.WComponentPeer" line 277 | | method-call java.lang.Class java.lang.Class.forName java.lang.String | | | INVOKESTATIC java.lang.Class.forName Ljava/lang/String; Ljava/lang/Class; | | method-call java.lang.Class java.lang.Class.forName java.lang.String | | ASTORE_1 | | ALOAD_1 // Ljava/lang/Class; clazz line 278 | | LDC "winGraphicsConfig" | | method-call java.lang.reflect.Field java.lang.Class.getDeclaredField java.lang.String | | | INVOKEVIRTUAL java.lang.Class.getDeclaredField Ljava/lang/String; Ljava/lang/reflect/Field; | | method-call java.lang.reflect.Field java.lang.Class.getDeclaredField java.lang.String | | ASTORE_2 | | ALOAD_2 // Ljava/lang/reflect/Field; field line 279 | | ICONST_1 | | method-call void java.lang.reflect.Field.setAccessible boolean | | | INVOKEVIRTUAL java.lang.reflect.Field.setAccessible Z V | | method-call void java.lang.reflect.Field.setAccessible boolean | | ALOAD_2 // Ljava/lang/reflect/Field; field line 280 | | ALOAD_0 // Lorg/eclipse/swt/awt/SWT_AWT$10; this | | GETFIELD org.eclipse.swt.awt.SWT_AWT$10.val$frame Ljava/awt/Frame; | | method-call java.awt.peer.ComponentPeer java.awt.Frame.getPeer | | | INVOKEVIRTUAL java.awt.Frame.getPeer Ljava/awt/peer/ComponentPeer; | | method-call java.awt.peer.ComponentPeer java.awt.Frame.getPeer | | ALOAD_0 // Lorg/eclipse/swt/awt/SWT_AWT$10; this | | GETFIELD org.eclipse.swt.awt.SWT_AWT$10.val$frame Ljava/awt/Frame; | | INVOKEVIRTUAL java.awt.Frame.getGraphicsConfiguration Ljava/awt/GraphicsConfiguration; | | INVOKEVIRTUAL java.lang.reflect.Field.set Ljava/lang/Object;Ljava/lang/Object; V | catch java.lang.Throwable -&amp;gt; E0 | GOTO L0 | E0: POP line 281 | L0: RETURN line 282 method-execution void org.eclipse.swt.awt.SWT_AWT$10.run end public void run end final class org.eclipse.swt.awt.SWT_AWT$10 -- NullPointerException null null java.lang.NullPointerException at org.aspectj.weaver.reflect.Java15AnnotationFinder.getAnnotations Java15AnnotationFinder.java:123 at org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl.unpackAnnotations ReflectionBasedResolvedMemberImpl.java:174 at org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl.hasAnnotation ReflectionBasedResolvedMemberImpl.java:158 at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches ExactAnnotationTypePattern.java:82 at org.aspectj.weaver.patterns.AnnotationPointcut.matchInternal AnnotationPointcut.java:151 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:52 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.ShadowMunger.match ShadowMunger.java:75 at org.aspectj.weaver.Advice.match Advice.java:112 at org.aspectj.weaver.bcel.BcelAdvice.match BcelAdvice.java:118 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2811 at org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction BcelClassWeaver.java:2773 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2506 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2332 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:494 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:119 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1651 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1602 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1380 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1200 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:360 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:262 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:78 at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform ClassPreProcessorAgentAdapter.java:52 at org.springframework.context.weaving.AspectJWeavingEnabler$AspectJClassBypassingClassFileTransformerDecorator.transform AspectJWeavingEnabler.java:84 at sun.instrument.TransformerManager.transform TransformerManager.java:141 at sun.instrument.InstrumentationImpl.transform InstrumentationImpl.java:174 at java.lang.ClassLoader.defineClassImpl Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:228 at java.security.SecureClassLoader.defineClass SecureClassLoader.java:148 at java.net.URLClassLoader.defineClass URLClassLoader.java:557 at java.net.URLClassLoader.access$400 URLClassLoader.java:120 at java.net.URLClassLoader$ClassFinder.run URLClassLoader.java:962 at java.security.AccessController.doPrivileged AccessController.java:275 at java.net.URLClassLoader.findClass URLClassLoader.java:488 at java.lang.ClassLoader.loadClass ClassLoader.java:607 at sun.misc.Launcher$AppClassLoader.loadClass Launcher.java:327 at java.lang.ClassLoader.loadClass ClassLoader.java:573 at org.eclipse.swt.awt.SWT_AWT.new_Frame SWT_AWT.java:274 Feb 21, 2008 12:09:23 PM org.aspectj.weaver.tools.Jdk14Trace error SEVERE: org/eclipse/swt/awt/SWT_AWT$10 java.lang.NullPointerException at org.aspectj.weaver.reflect.Java15AnnotationFinder.getAnnotations Java15AnnotationFinder.java:123 at org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl.unpackAnnotations ReflectionBasedResolvedMemberImpl.java:174 at org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl.hasAnnotation ReflectionBasedResolvedMemberImpl.java:158 at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches ExactAnnotationTypePattern.java:82 at org.aspectj.weaver.patterns.AnnotationPointcut.matchInternal AnnotationPointcut.java:151 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:52 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:146 at org.aspectj.weaver.ShadowMunger.match ShadowMunger.java:75 at org.aspectj.weaver.Advice.match Advice.java:112 at org.aspectj.weaver.bcel.BcelAdvice.match BcelAdvice.java:118 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2811 at org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction BcelClassWeaver.java:2773 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2506 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2332 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:494 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:119 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1651 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1602 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1380 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1200 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:360 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:262 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:78 at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform ClassPreProcessorAgentAdapter.java:52 at org.springframework.context.weaving.AspectJWeavingEnabler$AspectJClassBypassingClassFileTransformerDecorator.transform AspectJWeavingEnabler.java:84 at sun.instrument.TransformerManager.transform TransformerManager.java:141 at sun.instrument.InstrumentationImpl.transform InstrumentationImpl.java:174 at java.lang.ClassLoader.defineClassImpl Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:228 at java.security.SecureClassLoader.defineClass SecureClassLoader.java:148 at java.net.URLClassLoader.defineClass URLClassLoader.java:557 at java.net.URLClassLoader.access$400 URLClassLoader.java:120 at java.net.URLClassLoader$ClassFinder.run URLClassLoader.java:962 at java.security.AccessController.doPrivileged AccessController.java:275 at java.net.URLClassLoader.findClass URLClassLoader.java:488 at java.lang.ClassLoader.loadClass ClassLoader.java:607 at sun.misc.Launcher$AppClassLoader.loadClass Launcher.java:327 at java.lang.ClassLoader.loadClass ClassLoader.java:573 at org.eclipse.swt.awt.SWT_AWT.new_Frame SWT_AWT.java:274</description>
    <commit commitTime="2008-02-26 23:54:38" id="1bbe6f9"/>
    <fixedFiles>
      <file>weaver5/java5-src/org/aspectj/weaver/reflect/Java15ReflectionBasedReferenceTypeDelegate.java</file>
    </fixedFiles>
  </bug>
  <bug id="193348" reportTime="2007-06-19 12:01:00">
    <summary>NPE on attempt to compile</summary>
    <description>I can't really pinpoint any code that trigger this. It happens on for an incremental, and only some of the time. If I do a full build of the project then I do not get the error and all seems to work. ---- java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelWeaver.raiseUnboundFormalError BcelWeaver.java:833 at org.aspectj.weaver.bcel.BcelWeaver.validateSingleBranch BcelWeaver.java:688 at org.aspectj.weaver.bcel.BcelWeaver.validateBindings BcelWeaver.java:627 at org.aspectj.weaver.bcel.BcelWeaver.rewritePointcuts BcelWeaver.java:556 at org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave BcelWeaver.java:484 at org.aspectj.ajd ... oBuildJob.run AutoBuildJob.java:235 at org.eclipse.core.internal.jobs.Worker.run Worker.java:55 Compile error: NullPointerException thrown: null</description>
    <commit commitTime="2008-03-10 18:09:16" id="a31b3de"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="222437" reportTime="2008-03-12 12:45:00">
    <summary>MANIFEST.MF copying is not always reliable</summary>
    <description>Sometimes an AJDT project gets into a state where it has a meta-inf/manifest.mf - and this file fails to make it out to the destination folder.</description>
    <commit commitTime="2008-03-12 17:51:13" id="906c849"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="222987" reportTime="2008-03-17 13:57:00">
    <summary>More NPEs in Java15AnnotationFinder</summary>
    <description>Reported on the list by Chris Wall and on spring bug http://jira.springframework.org/browse/SPR-4390 --- When my plugin is initiated and during Spring context beans loading, we're getting the following: Caused by: java.lang.NullPointerException at org.aspectj.weaver.reflect.Java15AnnotationFinder.getParameterNamesFromLVT Java15AnnotationFinder.java:196 at org.aspectj.weaver.reflect.Java15AnnotationFinder.getParameterNames Java15AnnotationFinder.java:187 at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.tryToDiscoverParameterNames Java15ReflectionBasedReferenceTypeDelegate.java:297 at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.getDeclaredPointcuts Java15ReflectionBasedReferenceTypeDelegate.java:270 at org.aspectj.weaver.ReferenceType.getDeclaredPointcuts ReferenceType.java:535 at org.aspectj.weaver.ResolvedType$7.get ResolvedType.java:477 at org.aspectj.weaver.Iterators$3$1.hasNext Iterators.java:118 at org.aspectj.weaver.Iterators$3.hasNext Iterators.java:128 at org.aspectj.weaver.ResolvedType.findPointcut ResolvedType.java:488 at org.aspectj.weaver.patterns.ReferencePointcut.resolveBindings ReferencePointcut.java:152 at org.aspectj.weaver.patterns.Pointcut.resolve Pointcut.java:196 at org.aspectj.weaver.tools.PointcutParser.resolvePointcutExpression PointcutParser.java:330 at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression PointcutParser.java:308 at org.springframework.aop.aspectj.AspectJExpressionPointcut.buildPointcutExpression AspectJExpressionPointcut.java:197 at org.springframework.aop.aspectj.AspectJExpressionPointcut.checkReadyToMatch AspectJExpressionPointcut.java:184 at org.springframework.aop.aspectj.AspectJExpressionPointcut.getClassFilter AspectJExpressionPointcut.java:165 at org.springframework.aop.support.AopUtils.canApply AopUtils.java:198 at org.springframework.aop.support.AopUtils.canApply AopUtils.java:253 at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply AopUtils.java:287 at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply AbstractAdvisorAutoProxyCreator.java:113 at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors AbstractAdvisorAutoProxyCreator.java:85 at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean AbstractAdvisorAutoProxyCreator.java:66 at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary AbstractAutoProxyCreator.java:345 at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization AbstractAutoProxyCreator.java:309 at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization AbstractAutowireCapableBeanFactory.java:360 at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean AbstractAutowireCapableBeanFactory.java:1343 at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean AbstractAutowireCapableBeanFactory.java:470 I've tried with with Spring 2.5.2 and 2.5.3 with JDK 1.5. We're using "@AspectJ" so &amp;lt;aop:aspectj-autoproxy/&amp;gt; is set, and aspectjweaver.jar and aspectjrt.jar are included. The Spring IDE shows that AOP advise is applied to expected pointcuts. When compiled and run outside of the Spring IDE, the application encounters the NPE. Ideas?</description>
    <commit commitTime="2008-03-20 15:48:59" id="6c54db9"/>
    <fixedFiles>
      <file>weaver5/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java</file>
    </fixedFiles>
  </bug>
  <bug id="184447" reportTime="2007-04-27 11:00:00">
    <summary>AjLookupEnvironment.java:519</summary>
    <description>Build ID: Eclipse SDK Version: 3.2.2 M20070212-1330 Steps To Reproduce: This occured repeatedly when I saved a .aj file or a .java file that was boing advised. A restart of eclipse made it go away and it has not happen again so I don't know how reproduce it. Sorry. AJDT version 1.4.2.200703020612 More information: java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareAnnotations AjLookupEnvironment.java:803 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:592 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:519 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupE ... AutoBuildJob.run AutoBuildJob.java:217 at org.eclipse.core.internal.jobs.Worker.run Worker.java:58 Compile error: NullPointerException thrown: null</description>
    <commit commitTime="2008-03-21 18:14:28" id="8ce9dcf"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
    </fixedFiles>
  </bug>
  <bug id="224962" reportTime="2008-03-31 14:11:00">
    <summary>AjcTask doesn't work with Java6</summary>
    <description>Although support for Java6 has been added in the last milestone, you can't use it from ant because AjcTask doesn't recognize the "source=1.6" and "target=1.6" parameters. It's easy to fix by modifying AjcTask.java and adding the missing constants: static final String[] TARGET_INPUTS = new String [] { "1.1", "1.2", "1.3", "1.4", "1.5", "1.6" }; static final String[] SOURCE_INPUTS = new String [] { "1.3", "1.4", "1.5", "1.6" }; static final String[] COMPLIANCE_INPUTS = new String [] { "-1.3", "-1.4", "-1.5", "-1.6" }; Thanks.</description>
    <commit commitTime="2008-04-01 04:48:31" id="6bdb87d"/>
    <fixedFiles>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="228633" reportTime="2008-04-24 05:32:00">
    <summary>AST Support for PointcutDesignators</summary>
    <description>I would like an enhancement to be able to match two PointcutDesignators called 'pointcut definitions' in the AJ5 quick reference . Currently, the following test fails: ---------------AjASTMatcherTest.java--------------- public void testMatchDefaultPointcut { AjAST ast = AjAST.newAjAST AST.JLS3 ; DefaultPointcut dp1 = ast.newDefaultPointcut ; DefaultPointcut dp2 = ast.newDefaultPointcut ; dp1.setDetail "call * *.foo .. " ; dp2.setDetail "call * *.bar .. " ; assertFalse dp1.subtreeMatch new AjASTMatcher , dp2 ; } --------------------------------------------------- The reason is that there are no implementations for the many different kinds of pointcut definitions of AspectJ. Instead, DefaultPointcut simply contains the pointcut definition in a String-field "detail" as shown in the test case. The same is true for DefaultTypePattern and SignaturePattern. Additionally, in the current implementation a DefaultPointcut, DefaultTypePattern, and SignaturePattern node will always match another AST node if that node is of the same type instanceof . From what I see, it is necessary to 1 add types for every possible pointcut definition, 2 extend the current implementation of type name patterns and 3 signature patterns, 4 extend the parser internal and external? to create nodes for the pointcut definitions, 5 extend the converter to convert the new node types, and finally 6 extend the matcher to be able to match two pointcut definitions. Implementation is already done for combinations of poincuts using and &amp;amp;&amp;amp; , or || , not ! , cflow, and reference pointcuts without parameters . Please comment on the task list as it is just an initial overview resulting from my limited knowledge on this field.</description>
    <commit commitTime="2008-04-24 16:45:17" id="bed3f4e"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/org/eclipse/jdt/core/dom/AjASTMatcher.java</file>
    </fixedFiles>
  </bug>
  <bug id="230817" reportTime="2008-05-06 22:43:00">
    <summary>LazyMethodGen.remap NullPointerException</summary>
    <description>This has been reported a few times by different users, but has always proved tough to diagnose. The typical stack trace is something like: java.lang.NullPointerException org.aspectj.weaver.bcel.LazyMethodGen.remap LazyMethodGen.java:1237 org.aspectj.weaver.bcel.LazyMethodGen.addExceptionHandlers LazyMethodGen.java:1132 org.aspectj.weaver.bcel.LazyMethodGen.packBody LazyMethodGen.java:1078 org.aspectj.weaver.bcel.LazyMethodGen.pack LazyMethodGen.java:977 org.aspectj.weaver.bcel.LazyMethodGen.getMethod LazyMethodGen.java:484 org.aspectj.weaver.bcel.LazyClassGen.writeBack LazyClassGen.java:512 org.aspectj.weaver.bcel.LazyClassGen.getJavaClassBytesIncludingReweavable LazyClassGen.java:652 org.aspectj.weaver.bcel.BcelWeaver.getClassFilesFor BcelWeaver.java:1420 org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1390 And that is an exception on this line in remap ih = ih.getNext ; called from the addExceptionHandlers line: gen.addExceptionHandler remap r.getRealStart , map , remap r.getRealEnd , map , remap r.getHandler , map , r.getCatchType == null ? null : ObjectType BcelWorld.makeBcelType r.getCatchType ; During weaving, an instruction list is augmented with extra entries representing where shadows start and end method-call, method-execution, handler, etc . When weaving is complete we want to remove these temporary elements and use the remaining instructions to produce the method bytecode. Now sometimes these temporary entries are targeted by other elements line number tags, local variable tags and exception handlers usually . During packing we use remap to reposition the locations so they move off of temporary placeholders and onto real instructions that will make it out into the bytecode. What the above exception tells us is that we started walking over temporary placeholder entries, but before we came to a real instruction, we ran out of instructions! This cannot happen, and indicates something went seriously wrong, we should always encounter an instruction when remapping off a temporary element. After some digging it is actually the remap call for the handler not the start or end that leads to the problem. The handler represents where to jump to in the code when an exception of the specified type occurs between the instructions pointed at by start and end. I sent a debug build to a user encountering this problem I could not recreate it and in that I was looking at where in fact the handler was pointing before we called remap . I learned that when this problem occurs, the handler is not pointing to anywhere in the method currently being processed not good . In a second debug build I tried to ascertain who was setting these handlers to point to nowhere. This debug never triggered, no-one was setting them to point to nowhere... I happened to notice whilst going through the instructions in the debug output that cobertura was being used, a coverage toolkit that works by doing bytecode manipulation to insert calls out to a library. AspectJ was being called after cobertura and I asked the user to try the steps the other way round - it worked fine. Indicating cobertura was doing something to the bytecode that gave us problems. After much messing about, I recreated it by applying around advice to within * to all the classes in rt.jar I just used that as a very large standalone jar file I could weave into . I learned that Cobertura creates catch blocks that look a little different to what javac and other compilers create. The typical bytecode sequence a compiler produces for a catch block starts with a STORE instruction, to store the exception being caught whether the body of the catch block uses it or not . But the cobertura catch blocks started with an INVOKESTATIC instruction, a call out to another method. What does this mean? It means the same instruction has two shadows, a 'handler' shadow and a 'method-call' shadow - and it turns out this is what causes our problem. If around advice is applied to the call join point and it cannot be inlined then the body of the call shadow the call itself is pulled out into a new method. Because the handler was the same instruction, this meant the handler *was also being pulled out* into the new method, leaving behind an exception handler that jumped to an invalid location in fact it 'jumped' to an instruction in a different method! . So the reason I never saw the handler location being set incorrectly is that it was set correctly up front, but then dragged out with the method-call shadow into the wrong place. In bytecode terms it looks like this: method-execution | ICONST_0 | ISTORE_2 | SIPUSH -1 | ISTORE_3 | catch java.lang.Exception 1806389629 -&amp;gt; E0 | | method-call ProjectData ProjectData.getGlobalProjectData | | | INVOKESTATIC ProjectData.getGlobalProjectData | | method-call ProjectData getGlobalProjectData | | LDC "SomeString" | | method-call ClassData getOrCreateClassData java.lang.String | | | INVOKEVIRTUAL ProjectData.getOrCreateClassData LString; | | method-call ClassData ProjectData.getOrCreateClassData String | | SIPUSH 106 | | method-call void ClassData.touch int | | | INVOKEVIRTUAL ClassData.touch I V | | method-call void ClassData.touch int | | ALOAD_1 | | method-call Object Expression.getValue | | | INVOKEVIRTUAL Expression.getValue | | method-call Object Expression.getValue | catch java.lang.Exception 1806389629 -&amp;gt; E0 | ARETURN | method-call nProjectData ProjectData.getGlobalProjectData | | E0: INVOKESTATIC ProjectData.getGlobalProjectData | method-call ProjectData ProjectData.getGlobalProjectData | LDC "Object" We can see the problem in that final method-call. The target for the exception handler seen earlier E0 is within the method-call shadow. What to do?</description>
    <commit commitTime="2008-05-07 15:31:18" id="5f97d46"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="209372" reportTime="2007-11-09 14:27:00">
    <summary>Compile error: IllegalArgumentException thrown: negative line: -1</summary>
    <description>If line numbers have not been added to the generated class files the following exception is thrown: java.lang.IllegalArgumentException at org.aspectj.bridge.SourceLocation.validLine SourceLocation.java:41 at org.aspectj.bridge.SourceLocation.&amp;lt;init&amp;gt; SourceLocation.java:96 at org.aspectj.bridge.SourceLocation.&amp;lt;init&amp;gt; SourceLocation.java:85 at org.aspectj.bridge.SourceLocation.&amp;lt;init&amp;gt; SourceLocation.java:70 at org.aspectj.ajdt.internal.core.builder.EclipseSourceContext.makeSourceLocation EclipseSourceContext.java:57 at org.aspectj.we ... reUtility.java:155 at org.eclipse.core.internal.jobs.Worker.run Worker.java:55 Compile error: IllegalArgumentException thrown: negative line: -1 An easy way to reproduce the problem is to uncheck the corresponding checkbox in the Classfile Generation section of the Java Compiler options in Eclipse. A full build is performed during which an AspectJ Internal Compiler Error is thrown. My Eclipse feature version is org.eclipse.ajdt_1.5.0.200706070619.</description>
    <commit commitTime="2008-05-07 22:08:01" id="d3c3e32"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java</file>
    </fixedFiles>
  </bug>
  <bug id="232712" reportTime="2008-05-18 17:23:00">
    <summary>ClassFormatError during LTW using annotation approach</summary>
    <description>The following exception is obtained when using the annotation approach and load-time weaving: [AppClassLoader@1f12c4e] info AspectJ Weaver Version 1.5.4 built on Thursday Dec 20, 2007 at 13:44:10 GMT [AppClassLoader@1f12c4e] info register classloader sun.misc.Launcher$AppClassLoader@1f12c4e [AppClassLoader@1f12c4e] info using configuration /H:/temp/aspectj_bug/scratch/classes/scratch/aop/annotationbug/aspect/aop-bug.xml [AppClassLoader@1f12c4e] info register aspect scratch.aop.annotationbug.aspect.BugAspect doSomething Exception in thread "main" java.lang.ClassFormatError: Code attribute in native or abstract methods in class file scratch/aop/annotationbug/extra/SubClass at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:620 at java.security.SecureClassLoader.defineClass SecureClassLoader.java:124 at java.net.URLClassLoader.defineClass URLClassLoader.java:260 at java.net.URLClassLoader.access$000 URLClassLoader.java:56 at java.net.URLClassLoader$1.run URLClassLoader.java:195 at java.security.AccessController.doPrivileged Native Method at java.net.URLClassLoader.findClass URLClassLoader.java:188 at java.lang.ClassLoader.loadClass ClassLoader.java:306 at sun.misc.Launcher$AppClassLoader.loadClass Launcher.java:276 at java.lang.ClassLoader.loadClass ClassLoader.java:251 at java.lang.ClassLoader.loadClassInternal ClassLoader.java:319 at scratch.aop.annotationbug.extra.BugOther.getSubClass BugOther.java:22 at scratch.aop.annotationbug.main.BugMain.somethingElse BugMain.java:36 at scratch.aop.annotationbug.main.BugMain.doSomething BugMain.java:30 at scratch.aop.annotationbug.main.BugMain.execute BugMain.java:24 at scratch.aop.annotationbug.main.BugDriver.doExecute BugDriver.java:27 at scratch.aop.annotationbug.main.BugDriver.main BugDriver.java:21 The same advice logic does not result in a ClassFormatError when using the Aspect approach, it only appears using the annotation approach. Unfortunately we have not been able to track down exactly why the above Error occurs but have attached a test case that manifests it. To run simply use the runtime configuration on the BugDriver main : -Dorg.aspectj.weaver.loadtime.configuration="scratch/aop/annotationbug/aspect/aop-bug.xml" Along with the AspectJ Load-Time Weaver Agent. The above occurs with both AspectJ 1.5.4 and AspectJ 1.6.0. Interestingly when using the aspectj 1.6.0 weaver, the AppClassLoader log still indicates "1.5.4".</description>
    <commit commitTime="2008-05-20 18:30:38" id="f014275"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="233497" reportTime="2008-05-22 13:12:00">
    <summary>StringIndexOutOfBoundsException thrown in BcelWeaver</summary>
    <description>Created attachment 101560 [details] Core dump A StringIndexOutOfBoundsException is thrown during weaving with the following stack trace: java.lang.StringIndexOutOfBoundsException: String index out of range: -2 at java.lang.String.substring String.java:1938 at org.aspectj.weaver.bcel.BcelWeaver.addIfAspect BcelWeaver.java:294 at org.aspectj.weaver.bcel.BcelWeaver.addAspectsFromDirectory BcelWeaver.java:282 at org.aspectj.weaver.bcel.BcelWeaver.addLibraryJarFile BcelWeaver.java:231 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.initBcelWorld AjBuildManager.java:803 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:243 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:180 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:382 at org.aspectj.tools.ajc.Main.runMain Main.java:254 at org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM AjcTask.java:1303 at org.aspectj.tools.ant.taskdefs.AjcTask.execute AjcTask.java:1101 at org.apache.tools.ant.UnknownElement.execute UnknownElement.java:288 at sun.reflect.GeneratedMethodAccessor2.invoke Unknown Source at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.apache.tools.ant.dispatch.DispatchUtils.execute DispatchUtils.java:105 at org.apache.tools.ant.Task.perform Task.java:348 at org.apache.tools.ant.Target.execute Target.java:357 at org.apache.tools.ant.Target.performTasks Target.java:385 at org.apache.tools.ant.Project.executeSortedTargets Project.java:1329 at org.apache.tools.ant.helper.SingleCheckExecutor.executeTargets SingleCheckExecutor.java:38 at org.apache.tools.ant.Project.executeTargets Project.java:1181 at org.apache.tools.ant.taskdefs.Ant.execute Ant.java:416 at org.apache.tools.ant.taskdefs.CallTarget.execute CallTarget.java:105 at org.apache.tools.ant.UnknownElement.execute UnknownElement.java:288 at sun.reflect.GeneratedMethodAccessor2.invoke Unknown Source at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.apache.tools.ant.dispatch.DispatchUtils.execute DispatchUtils.java:105 at org.apache.tools.ant.Task.perform Task.java:348 at org.apache.tools.ant.taskdefs.Sequential.execute Sequential.java:62 at com.cdmtech.tools.ant.task.conditional.IfSet.execute IfSet.java:48 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.apache.tools.ant.dispatch.DispatchUtils.execute DispatchUtils.java:105 at org.apache.tools.ant.TaskAdapter.execute TaskAdapter.java:134 at org.apache.tools.ant.UnknownElement.execute UnknownElement.java:288 at sun.reflect.GeneratedMethodAccessor2.invoke Unknown Source at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.apache.tools.ant.dispatch.DispatchUtils.execute DispatchUtils.java:105 at org.apache.tools.ant.Task.perform Task.java:348 at org.apache.tools.ant.Target.execute Target.java:357 at org.apache.tools.ant.Target.performTasks Target.java:385 at org.apache.tools.ant.Project.executeSortedTargets Project.java:1329 at org.apache.tools.ant.Project.executeTarget Project.java:1298 at org.apache.tools.ant.helper.DefaultExecutor.executeTargets DefaultExecutor.java:41 at org.apache.tools.ant.Project.executeTargets Project.java:1181 at org.apache.tools.ant.Main.runBuild Main.java:698 at org.apache.tools.ant.Main.startAnt Main.java:199 at org.apache.tools.ant.launch.Launcher.run Launcher.java:257 at org.apache.tools.ant.launch.Launcher.main Launcher.java:104 The core dump is attached. It appears like the calculation of the binary path is failing in addIfAspect. This is due to "name" not containing "typeName" whereby causing the substring method to be called with -2. This exception appears most frequently when weaving with iajc, but does occur oddly enough less frequently in Eclipse/AJDT. My build is the 12 May 2008 development build.</description>
    <commit commitTime="2008-05-22 18:26:18" id="93b7bed"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="227295" reportTime="2008-04-16 06:24:00">
    <summary>AJC error, somehow connected with generics</summary>
    <description>Build ID: 1.5.0.20070607 Steps To Reproduce: I cannot find a way to reproduce it, it's somehow "randomic", for example it happened to me now while creating a new class in an aspectj project, but when i then saved the .java it compiled properly. That's why I'm filing it in AJDT and not in AspectJ directly. Based on the exception, IIUC, there is a narrowing in a generic UnresolvedType should be something like Converter&amp;lt;?&amp;gt;, while BoundedReferenceType should be somethinf like Converter&amp;lt;? extends Number&amp;gt; , and the weaver is not handling it properly, but simply casting from one to the other .. but this are just silly assumptions. More information: java.lang.ClassCastException at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeTypeBinding1 EclipseFactory.java:656 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeTypeBinding EclipseFactory.java:579 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeTypeBinding1 EclipseFactory.java:640 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeTypeBinding EclipseFactory.java:579 at org.asp ... Worker.java:55 Compile error: ClassCastException thrown: org.aspectj.weaver.UnresolvedType cannot be cast to org.aspectj.weaver.BoundedReferenceType</description>
    <commit commitTime="2008-06-06 20:38:14" id="3b2109a"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="203367" reportTime="2007-09-13 17:23:00">
    <summary>ITD of interface on generic type; can't match calls to methods on interface+</summary>
    <description>Build ID: I20070621-1340 Steps To Reproduce: package bug; // I used a "bug" package under the "src" source folder. public aspect CantMatchOnInterfaceIntroducedToGenericClass { public static interface Marker {} public static class NonGenericClass { public void doit String msg { System.out.println "doit : msg = "+msg ; } } public static class GenericClass&amp;lt;T&amp;gt; { public void doit T t { System.out.println "doit&amp;lt;T&amp;gt; : t = "+t ; } } declare parents: NonGenericClass implements Marker; declare parents: GenericClass implements Marker; pointcut nonGenericCall : call void NonGenericClass.doit .. ; pointcut genericCall : call void GenericClass.doit .. ; pointcut markerCall : call void Marker+.doit .. ; before : nonGenericCall { System.out.println "nonGenericCall: "+thisJoinPointStaticPart ; } before : genericCall { System.out.println "genericCall: "+thisJoinPointStaticPart ; } before : markerCall { System.out.println "markerCall: "+thisJoinPointStaticPart ; } public static void main String args[] { new NonGenericClass .doit "message1" ; new GenericClass&amp;lt;Integer&amp;gt; .doit new Integer 2 ; } } More information: The code pasted in the "steps" demonstrates the bug.</description>
    <commit commitTime="2008-06-17 04:02:05" id="11ebdd8"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc161/Ajc161Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="229829" reportTime="2008-05-01 14:00:00">
    <summary>SourceTypeBinding.sourceStart NPE</summary>
    <description>java.lang.NullPointerException at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.sourceStart SourceTypeBinding.java:1514 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodBinding.sourceStart MethodBinding.java:988 at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.fillDeclaredMembers EclipseSourceType.java:243 at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.getDeclaredFiel ... IRETURN end public boolean isTracingModifications end public class com.centricsoftware.pi.core.data.reflection.Attribute</description>
    <commit commitTime="2008-07-29 16:55:49" id="e9823aa"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java</file>
    </fixedFiles>
  </bug>
  <bug id="238666" reportTime="2008-06-26 15:05:00">
    <summary>Allow the ltw configuration to be directly specified rather than discovered on the classpath</summary>
    <description>Currently the property: org.aspectj.weaver.loadtime.configuration can be set to name the ltw configuration file that the loadtime weaver searches for. The default value is: META-INF/aop.xml;META-INF/aop-ajc.xml;org/aspectj/aop.xml and the weaver searches the classpath for .xml files matching any of those three possibilities. A typical override might therefore be: -Dorg.aspectj.weaver.loadtime.configuration=META-INF/overhere.xml however the weaver will still only look for it on the classpath. In some environments the ltw user may just want to name the aop config file to use, and not be forced to include it on the classpath. We have had the suggestion to make it protocol based, which i like, but for now I would just allow support for 'file:'. If file: is the prefix, it will be treated as direct reference to the file to use, otherwise it will be searched for. This change would mean all existing uses of the override will be fine, but new users will be all to exploit the flexibility of naming their configuration directly.</description>
    <commit commitTime="2008-08-06 18:10:47" id="df49b5c"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="216067" reportTime="2008-01-21 21:05:00">
    <summary>Typo in point example</summary>
    <description>Build ID: 3.3.1.1 Steps To Reproduce: 1. Install AspectJ 2. Navigate to the examples/introduction directory 3. Method in Point.java More information: protected void makeRectangular { if !rectangular { x = rho * Math.sin theta ; y = rho * Math.cos theta ; rectangular = true; } } x and y should be interchanged in the method above, mathetimatical definition. For reference: http://en.wikipedia.org/wiki/Trigonometric_function .. please look at Right Triangle Definitions.</description>
    <commit commitTime="2008-08-20 19:31:42" id="6d906dc"/>
    <fixedFiles>
      <file>docs/dist/doc/examples/introduction/Point.java</file>
    </fixedFiles>
  </bug>
  <bug id="244321" reportTime="2008-08-15 13:54:00">
    <summary>I cannot aspect code written in SJPP-based encoding</summary>
    <description>Created attachment 110112 [details] sjpp.jar to parse encoding I cannot aspect code written in SJPP-based encoding However, I *can* compile the code fine: - if I remove Aspect nature from my project, or - using command line ajc of slightly newer version of AspectJ . i.e., ajc.bat -J-Dpp.charset=%USERPROFILE%\pp.charset.properties -encoding MY_ENCODING -d out ... Adding "-encoding MY_ENCODING" to AspectJ non-standard compiler options did *not* help. source code: ------------ public class Foo { public static void main String [] args { #ifdef A_MACRO System.out.println "ok!" ; #endif } } errors reported by "Problems" view: ----------------------------------- Severity and Description Path Resource Location Creation Time Id A_MACRO cannot be resolved to a type encoded/src Foo.java line 3 1218821924326 474099 out cannot be resolved encoded/src Foo.java line 4 1218821924326 474101 Syntax error on token ".", ; expected encoded/src Foo.java line 4 1218821924326 474100 Syntax error on token "Invalid Character", @ expected encoded/src Foo.java line 3 1218821924326 474098 Syntax error, insert ";" to complete Statement encoded/src Foo.java line 4 1218821924326 474102 project encoding: ----------------- Set to: MY_ENCODING %USERPROFILE%/pp.charset.properties: ------------------------------------ charset = MY_ENCODING MY_ENCODING.defines = A_MACRO My Eclipse environment is: -------------------------- * Eclipse AspectJ Development Tools Version: 1.5.2.200804241330 AspectJ version [for Eclipse]: 1.6.0.20080423100000 * AspectJ version [for ajc]: AspectJ Compiler 1.6.1 1.6.1 - Built: Thursday Jul 3, 2008 at 18:35:41 GMT - Eclipse Compiler 0.785_R33x, 3.3 * Eclipse v3.3.2 M20080221-1800 * C:\jdk1.5\jre\lib\ext\sjpp.jar see attached</description>
    <commit commitTime="2008-08-29 20:08:59" id="d5c2ead"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="246021" reportTime="2008-09-02 18:22:00">
    <summary>FindBugs reporting another optimization</summary>
    <description>Ben Hale reported that FindBugs was producing a warning about a dead store to a local variable a variable that is never then read within the method . This bug is to investigate and hopefully remove the dead store.</description>
    <commit commitTime="2008-09-03 00:28:44" id="78a483d"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="245734" reportTime="2008-08-29 14:27:00">
    <summary>AJDT throws a RuntimeException from EclipseResolvedMember.getAnnotations</summary>
    <description>Build ID: N/A Steps To Reproduce: This exception is happening for us in both Eclipse 3.4 and 3.3 when we run an incremental build on one of our projects. We are using an aspect to declare an annotation on a class in the project, and we only started seeing this exception after we added it. A clean build on the project never throws the exception, only an incremental build. More information: The Exception Stack Trace: java.lang.RuntimeException at org.aspectj.ajdt.internal.compiler.lookup.EclipseResolvedMember.getAnnotations EclipseResolvedMember.java:78 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareAnnotations AjLookupEnvironment.java:794 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:592 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironmen ... at org.eclipse.core.internal.jobs.Worker.run Worker.java:55 Compile error: RuntimeException thrown: not yet implemented - please raise an AJ bug I was going to include the AJDT Event log for the build but it is very long, and mostly unremarkable, so I have included only the section for the project where the exception was thrown. 11:9:50 Build kind = INCREMENTALBUILD 11:9:50 Project=ICODES, kind of build requested=Incremental AspectJ compilation 11:9:50 build: Examined delta - source file changes in required project ICODES 11:9:51 Found state instance managing output location : C:\jnaylor\Java_Dev\workspace\ICDM 11:9:51 Failed to find a state instance managing output location : C:\jnaylor\Java_dev\workspace\Dependencies\MARVEL\resources 11:9:51 Failed to find a state instance managing output location : C:\jnaylor\Java_Dev\workspace\GSG 11:9:52 Failed to find a state instance managing output location : C:\jnaylor\Java_dev\.build\Launch4J 11:9:52 Preparing for build: planning to be an incremental build 11:9:52 Starting incremental compilation loop 1 of possibly 5 11:9:52 AJDE Callback: finish. Was full build: false 11:9:52 Timer event: 2172ms: Total time spent in AJDE 11:9:54 Timer event: 47ms: Create element map 0 rels in project: ICODES 11:9:54 Types affected during build = 0 11:9:54 Timer event: 0ms: Add markers 0 markers 11:9:54 Timer event: 3735ms: Total time spent in AJBuilder.build 11:9:54 =========================================================================================== This is occurring frequently, but not every time so we haven't been able to narrow down a reasonable sized test case.</description>
    <commit commitTime="2008-09-22 23:58:59" id="f376a21"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseResolvedMember.java</file>
    </fixedFiles>
  </bug>
  <bug id="192877" reportTime="2007-06-15 09:57:00">
    <summary>[ataspectj] @AspectJ style inter-type declaration causes false compiler error during incremental build</summary>
    <description>Build ID: M20070212-1330 Steps To Reproduce: Use @DeclareParents to introduce a default interface implementation to an existing type. A full build compiles cleanly and works as expected. An incremental build causes the following type of compile error: "The type FooImpl must implement the inherited abstract method Test.methodA ". In this example FooImpl is the class we are introducing a default implementation of the Test interface which defines the method "methodA". More information: See attached zip for a complete set of files to reproduce. I can repoduce this bug with AJDT 1.4.2.200705221209 for Eclipse 3.2.2 as well as AJDT 1.5RC1 for Eclipse 3.3RC1</description>
    <commit commitTime="2008-09-30 20:51:53" id="9b68a31"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="186884" reportTime="2007-05-14 17:02:00">
    <summary>Unhandled Kind of New Exception when have advice for Pointcut call Throwable+.new ..</summary>
    <description>I get this error when weaving a LifeRay jar compression-filter.jar . Unhandled kind of new -1: impdep1[254] 1 when implementing on shadow constructor-call void java.lang.NoClassDefFoundError.&amp;lt;init&amp;gt; when weaving classes .. To reproduce: 1 extract TestCase.zip. 2 Go to the expanded TestCase/ directory. 3 do: ajc ThrowablesAspect.aj -log "test.log" -cp "&amp;lt;path to aspectjrt.jar&amp;gt;;lib\commons-logging-1.0.4.jar;lib\servlet-api.jar;lib\util-java.jar;lib\portal-kernel.jar" -injars compression-filter.jar -outjar compression-filter.jar.new 4 ajc will say there are 2 fail|aborts NOTE: No advice or doing "around " doesn't produce the error. The error happens when having at least "before " or "after " advice. I tried empty advice and it still fails. Full Stack Trace: -------- trouble in: public class com.liferay.filters.compression.CompressionFilter extends java.lang.Object implements javax.servlet.Filter: static boolean useCompressionFilter public static final String ENCODING private static final String _ALREADY_FILTERED private static final String _COMPRESS = "compress" private static final String _INCLUDE = "javax.servlet.include.request_uri" private static org.apache.commons.logging.Log _log static Class class$com$liferay$filters$compression$CompressionFilter [Synthetic] public void init javax.servlet.FilterConfig : method-execution void com.liferay.filters.compression.CompressionFilter.init javax.servlet.FilterConfig | RETURN line 80 method-execution void com.liferay.filters.compression.CompressionFilter.init javax.servlet.FilterConfig end public void init javax.servlet.FilterConfig public void doFilter javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain throws java.io.IOException, javax.servlet.ServletException: method-execution void com.liferay.filters.compression.CompressionFilter.doFilter javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain | GETSTATIC com.liferay.filters.compression.CompressionFilter._log Lorg/apache/commons/logging/Log; line 86 | method-call boolean org.apache.commons.logging.Log.isDebugEnabled | | INVOKEINTERFACE org.apache.commons.logging.Log.isDebugEnabled Z | method-call boolean org.apache.commons.logging.Log.isDebugEnabled | IFEQ L1 | GETSTATIC com.liferay.filters.compression.CompressionFilter.useCompressionFilter Z line 87 | IFEQ L0 | GETSTATIC com.liferay.filters.compression.CompressionFilter._log Lorg/apache/commons/logging/Log; line 88 | LDC "Compression is enabled" | method-call void org.apache.commons.logging.Log.debug java.lang.Object | | INVOKEINTERFACE org.apache.commons.logging.Log.debug Ljava/lang/Object; V | method-call void org.apache.commons.logging.Log.debug java.lang.Object | GOTO L1 | L0: GETSTATIC com.liferay.filters.compression.CompressionFilter._log Lorg/apache/commons/logging/Log; line 91 | LDC "Compression is disabled" | method-call void org.apache.commons.logging.Log.debug java.lang.Object | | INVOKEINTERFACE org.apache.commons.logging.Log.debug Ljava/lang/Object; V | method-call void org.apache.commons.logging.Log.debug java.lang.Object | L1: ALOAD_1 // Ljavax/servlet/ServletRequest; req line 95 | CHECKCAST javax.servlet.http.HttpServletRequest | ASTORE 4 // Ljavax/servlet/http/HttpServletRequest; httpReq | ALOAD_2 // Ljavax/servlet/ServletResponse; res line 96 | CHECKCAST javax.servlet.http.HttpServletResponse | ASTORE 5 // Ljavax/servlet/http/HttpServletResponse; httpRes | ALOAD 4 // Ljavax/servlet/http/HttpServletRequest; httpReq line 98 | GETSTATIC com.liferay.filters.compression.CompressionFilter.ENCODING Ljava/lang/String; | method-call void javax.servlet.http.HttpServletRequest.setCharacterEncoding java.lang.String | | INVOKEINTERFACE javax.servlet.http.HttpServletRequest.setCharacterEncoding Ljava/lang/String; V | method-call void javax.servlet.http.HttpServletRequest.setCharacterEncoding java.lang.String | ALOAD 4 // Ljavax/servlet/http/HttpServletRequest; httpReq line 100 | method-call java.lang.String com.liferay.util.Http.getCompleteURL javax.servlet.http.HttpServletRequest | | INVOKESTATIC com.liferay.util.Http.getCompleteURL Ljavax/servlet/http/HttpServletRequest; Ljava/lang/String; | method-call java.lang.String com.liferay.util.Http.getCompleteURL javax.servlet.http.HttpServletRequest | ASTORE 6 // Ljava/lang/String; completeURL | GETSTATIC com.liferay.filters.compression.CompressionFilter.useCompressionFilter Z line 102 | IFEQ L3 | ALOAD_0 // Lcom/liferay/filters/compression/CompressionFilter; this | ALOAD 4 // Ljavax/servlet/http/HttpServletRequest; httpReq | method-call boolean com.liferay.filters.compression.CompressionFilter.isCompress javax.servlet.http.HttpServletRequest | | INVOKEVIRTUAL com.liferay.filters.compression.CompressionFilter.isCompress Ljavax/servlet/http/HttpServletRequest; Z | method-call boolean com.liferay.filters.compression.CompressionFilter.isCompress javax.servlet.http.HttpServletRequest | IFEQ L3 | ALOAD_0 // Lcom/liferay/filters/compression/CompressionFilter; this | ALOAD 4 // Ljavax/servlet/http/HttpServletRequest; httpReq | method-call boolean com.liferay.filters.compression.CompressionFilter.isInclude javax.servlet.http.HttpServletRequest | | INVOKEVIRTUAL com.liferay.filters.compression.CompressionFilter.isInclude Ljavax/servlet/http/HttpServletRequest; Z | method-call boolean com.liferay.filters.compression.CompressionFilter.isInclude javax.servlet.http.HttpServletRequest | IFNE L3 | ALOAD 4 // Ljavax/servlet/http/HttpServletRequest; httpReq | method-call boolean com.liferay.util.BrowserSniffer.acceptsGzip javax.servlet.http.HttpServletRequest | | INVOKESTATIC com.liferay.util.BrowserSniffer.acceptsGzip Ljavax/servlet/http/HttpServletRequest; Z | method-call boolean com.liferay.util.BrowserSniffer.acceptsGzip javax.servlet.http.HttpServletRequest | IFEQ L3 | ALOAD_0 // Lcom/liferay/filters/compression/CompressionFilter; this | ALOAD 4 // Ljavax/servlet/http/HttpServletRequest; httpReq | method-call boolean com.liferay.filters.compression.CompressionFilter.isAlreadyFiltered javax.servlet.http.HttpServletRequest | | INVOKEVIRTUAL com.liferay.filters.compression.CompressionFilter.isAlreadyFiltered Ljavax/servlet/http/HttpServletRequest; Z | method-call boolean com.liferay.filters.compression.CompressionFilter.isAlreadyFiltered javax.servlet.http.HttpServletRequest | IFNE L3 | GETSTATIC com.liferay.filters.compression.CompressionFilter._log Lorg/apache/commons/logging/Log; line 106 | method-call boolean org.apache.commons.logging.Log.isDebugEnabled | | INVOKEINTERFACE org.apache.commons.logging.Log.isDebugEnabled Z | method-call boolean org.apache.commons.logging.Log.isDebugEnabled | IFEQ L2 | GETSTATIC com.liferay.filters.compression.CompressionFilter._log Lorg/apache/commons/logging/Log; line 107 | NEW java.lang.StringBuffer | DUP | LDC "Compressing " | constructor-call void java.lang.StringBuffer.&amp;lt;init&amp;gt; java.lang.String | | INVOKESPECIAL java.lang.StringBuffer.&amp;lt;init&amp;gt; Ljava/lang/String; V | constructor-call void java.lang.StringBuffer.&amp;lt;init&amp;gt; java.lang.String | ALOAD 6 // Ljava/lang/String; completeURL | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.String | | INVOKEVIRTUAL java.lang.StringBuffer.append Ljava/lang/String; Ljava/lang/StringBuffer; | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.String | method-call java.lang.String java.lang.StringBuffer.toString | | INVOKEVIRTUAL java.lang.StringBuffer.toString Ljava/lang/String; | method-call java.lang.String java.lang.StringBuffer.toString | method-call void org.apache.commons.logging.Log.debug java.lang.Object | | INVOKEINTERFACE org.apache.commons.logging.Log.debug Ljava/lang/Object; V | method-call void org.apache.commons.logging.Log.debug java.lang.Object | L2: ALOAD 4 // Ljavax/servlet/http/HttpServletRequest; httpReq line 110 | GETSTATIC com.liferay.filters.compression.CompressionFilter._ALREADY_FILTERED Ljava/lang/String; | GETSTATIC java.lang.Boolean.TRUE Ljava/lang/Boolean; | method-call void javax.servlet.http.HttpServletRequest.setAttribute java.lang.String, java.lang.Object | | INVOKEINTERFACE javax.servlet.http.HttpServletRequest.setAttribute Ljava/lang/String;Ljava/lang/Object; V | method-call void javax.servlet.http.HttpServletRequest.setAttribute java.lang.String, java.lang.Object | NEW com.liferay.filters.compression.CompressionResponse line 112 | DUP | ALOAD 5 // Ljavax/servlet/http/HttpServletResponse; httpRes | constructor-call void com.liferay.filters.compression.CompressionResponse.&amp;lt;init&amp;gt; javax.servlet.http.HttpServletResponse | | INVOKESPECIAL com.liferay.filters.compression.CompressionResponse.&amp;lt;init&amp;gt; Ljavax/servlet/http/HttpServletResponse; V | constructor-call void com.liferay.filters.compression.CompressionResponse.&amp;lt;init&amp;gt; javax.servlet.http.HttpServletResponse | ASTORE 7 // Lcom/liferay/filters/compression/CompressionResponse; compressionResponse | ALOAD_3 // Ljavax/servlet/FilterChain; chain line 115 | ALOAD_1 // Ljavax/servlet/ServletRequest; req | ALOAD 7 // Lcom/liferay/filters/compression/CompressionResponse; compressionResponse | method-call void javax.servlet.FilterChain.doFilter javax.servlet.ServletRequest, javax.servlet.ServletResponse | | INVOKEINTERFACE javax.servlet.FilterChain.doFilter Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse; V | method-call void javax.servlet.FilterChain.doFilter javax.servlet.ServletRequest, javax.servlet.ServletResponse | ALOAD 7 // Lcom/liferay/filters/compression/CompressionResponse; compressionResponse line 117 | method-call void com.liferay.filters.compression.CompressionResponse.finishResponse | | INVOKEVIRTUAL com.liferay.filters.compression.CompressionResponse.finishResponse V | method-call void com.liferay.filters.compression.CompressionResponse.finishResponse | GOTO L5 | L3: GETSTATIC com.liferay.filters.compression.CompressionFilter._log Lorg/apache/commons/logging/Log; line 120 | method-call boolean org.apache.commons.logging.Log.isDebugEnabled | | INVOKEINTERFACE org.apache.commons.logging.Log.isDebugEnabled Z | method-call boolean org.apache.commons.logging.Log.isDebugEnabled | IFEQ L4 | GETSTATIC com.liferay.filters.compression.CompressionFilter._log Lorg/apache/commons/logging/Log; line 121 | NEW java.lang.StringBuffer | DUP | LDC "Not compressing " | constructor-call void java.lang.StringBuffer.&amp;lt;init&amp;gt; java.lang.String | | INVOKESPECIAL java.lang.StringBuffer.&amp;lt;init&amp;gt; Ljava/lang/String; V | constructor-call void java.lang.StringBuffer.&amp;lt;init&amp;gt; java.lang.String | ALOAD 6 // Ljava/lang/String; completeURL | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.String | | INVOKEVIRTUAL java.lang.StringBuffer.append Ljava/lang/String; Ljava/lang/StringBuffer; | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.String | method-call java.lang.String java.lang.StringBuffer.toString | | INVOKEVIRTUAL java.lang.StringBuffer.toString Ljava/lang/String; | method-call java.lang.String java.lang.StringBuffer.toString | method-call void org.apache.commons.logging.Log.debug java.lang.Object | | INVOKEINTERFACE org.apache.commons.logging.Log.debug Ljava/lang/Object; V | method-call void org.apache.commons.logging.Log.debug java.lang.Object | L4: ALOAD_3 // Ljavax/servlet/FilterChain; chain line 124 | ALOAD_1 // Ljavax/servlet/ServletRequest; req | ALOAD_2 // Ljavax/servlet/ServletResponse; res | method-call void javax.servlet.FilterChain.doFilter javax.servlet.ServletRequest, javax.servlet.ServletResponse | | INVOKEINTERFACE javax.servlet.FilterChain.doFilter Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse; V | method-call void javax.servlet.FilterChain.doFilter javax.servlet.ServletRequest, javax.servlet.ServletResponse | L5: RETURN line 126 method-execution void com.liferay.filters.compression.CompressionFilter.doFilter javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain end public void doFilter javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain throws java.io.IOException, javax.servlet.ServletException public void destroy : method-execution void com.liferay.filters.compression.CompressionFilter.destroy | RETURN line 129 method-execution void com.liferay.filters.compression.CompressionFilter.destroy end public void destroy protected boolean isAlreadyFiltered javax.servlet.http.HttpServletRequest : method-execution boolean com.liferay.filters.compression.CompressionFilter.isAlreadyFiltered javax.servlet.http.HttpServletRequest | ALOAD_1 // Ljavax/servlet/http/HttpServletRequest; req line 132 | GETSTATIC com.liferay.filters.compression.CompressionFilter._ALREADY_FILTERED Ljava/lang/String; | method-call java.lang.Object javax.servlet.http.HttpServletRequest.getAttribute java.lang.String | | INVOKEINTERFACE javax.servlet.http.HttpServletRequest.getAttribute Ljava/lang/String; Ljava/lang/Object; | method-call java.lang.Object javax.servlet.http.HttpServletRequest.getAttribute java.lang.String | IFNULL L0 | ICONST_1 line 133 | IRETURN | L0: ICONST_0 line 136 | IRETURN method-execution boolean com.liferay.filters.compression.CompressionFilter.isAlreadyFiltered javax.servlet.http.HttpServletRequest end protected boolean isAlreadyFiltered javax.servlet.http.HttpServletRequest protected boolean isCompress javax.servlet.http.HttpServletRequest : method-execution boolean com.liferay.filters.compression.CompressionFilter.isCompress javax.servlet.http.HttpServletRequest | ALOAD_1 // Ljavax/servlet/http/HttpServletRequest; req line 141 | LDC "compress" | ICONST_1 | method-call boolean com.liferay.util.ParamUtil.get javax.servlet.ServletRequest, java.lang.String, boolean | | INVOKESTATIC com.liferay.util.ParamUtil.get Ljavax/servlet/ServletRequest;Ljava/lang/String;Z Z | method-call boolean com.liferay.util.ParamUtil.get javax.servlet.ServletRequest, java.lang.String, boolean | IFNE L0 | ICONST_0 line 142 | IRETURN | L0: ALOAD_1 // Ljavax/servlet/http/HttpServletRequest; req line 151 | LDC "p_p_state" | method-call java.lang.String com.liferay.util.ParamUtil.getString javax.servlet.ServletRequest, java.lang.String | | INVOKESTATIC com.liferay.util.ParamUtil.getString Ljavax/servlet/ServletRequest;Ljava/lang/String; Ljava/lang/String; | method-call java.lang.String com.liferay.util.ParamUtil.getString javax.servlet.ServletRequest, java.lang.String | ASTORE_2 // Ljava/lang/String; windowState | ALOAD_2 // Ljava/lang/String; windowState line 153 | LDC "exclusive" | method-call boolean java.lang.String.equals java.lang.Object | | INVOKEVIRTUAL java.lang.String.equals Ljava/lang/Object; Z | method-call boolean java.lang.String.equals java.lang.Object | IFEQ L1 | ICONST_0 line 154 | IRETURN | L1: ICONST_1 line 157 | IRETURN method-execution boolean com.liferay.filters.compression.CompressionFilter.isCompress javax.servlet.http.HttpServletRequest end protected boolean isCompress javax.servlet.http.HttpServletRequest protected boolean isInclude javax.servlet.http.HttpServletRequest : method-execution boolean com.liferay.filters.compression.CompressionFilter.isInclude javax.servlet.http.HttpServletRequest | ALOAD_1 // Ljavax/servlet/http/HttpServletRequest; req line 163 | LDC "javax.servlet.include.request_uri" | method-call java.lang.Object javax.servlet.http.HttpServletRequest.getAttribute java.lang.String | | INVOKEINTERFACE javax.servlet.http.HttpServletRequest.getAttribute Ljava/lang/String; Ljava/lang/Object; | method-call java.lang.Object javax.servlet.http.HttpServletRequest.getAttribute java.lang.String | CHECKCAST java.lang.String | ASTORE_2 // Ljava/lang/String; uri | ALOAD_2 // Ljava/lang/String; uri line 165 | IFNONNULL L0 | ICONST_0 line 166 | IRETURN | L0: ICONST_1 line 169 | IRETURN method-execution boolean com.liferay.filters.compression.CompressionFilter.isInclude javax.servlet.http.HttpServletRequest end protected boolean isInclude javax.servlet.http.HttpServletRequest static Class class String, boolean : method-execution java.lang.Class com.liferay.filters.compression.CompressionFilter.class java.lang.String, boolean | catch java.lang.ClassNotFoundException -&amp;gt; E0 | | ALOAD_0 line 0 | | method-call java.lang.Class java.lang.Class.forName java.lang.String | | | INVOKESTATIC java.lang.Class.forName Ljava/lang/String; Ljava/lang/Class; | | method-call java.lang.Class java.lang.Class.forName java.lang.String | | ILOAD_1 | | IFNE L0 | | method-call java.lang.Class java.lang.Class.getComponentType | | | INVOKEVIRTUAL java.lang.Class.getComponentType Ljava/lang/Class; | | method-call java.lang.Class java.lang.Class.getComponentType | | L0: ARETURN | catch java.lang.ClassNotFoundException -&amp;gt; E0 | E0: NEW java.lang.NoClassDefFoundError | DUP_X1 | constructor-call void java.lang.NoClassDefFoundError.&amp;lt;init&amp;gt; | | INVOKESPECIAL java.lang.NoClassDefFoundError.&amp;lt;init&amp;gt; V | constructor-call void java.lang.NoClassDefFoundError.&amp;lt;init&amp;gt; | method-call java.lang.Throwable java.lang.Throwable.initCause java.lang.Throwable | | INVOKEVIRTUAL java.lang.Throwable.initCause Ljava/lang/Throwable; Ljava/lang/Throwable; | method-call java.lang.Throwable java.lang.Throwable.initCause java.lang.Throwable | ATHROW method-execution java.lang.Class com.liferay.filters.compression.CompressionFilter.class java.lang.String, boolean end static Class class String, boolean public void &amp;lt;init&amp;gt; : ALOAD_0 // Lcom/liferay/filters/compression/CompressionFilter; this line 52 INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V constructor-execution void com.liferay.filters.compression.CompressionFilter.&amp;lt;init&amp;gt; | RETURN constructor-execution void com.liferay.filters.compression.CompressionFilter.&amp;lt;init&amp;gt; end public void &amp;lt;init&amp;gt; private static final void &amp;lt;clinit&amp;gt; : staticinitialization void com.liferay.filters.compression.CompressionFilter.&amp;lt;clinit&amp;gt; | GETSTATIC com.liferay.filters.compression.CompressionFilter.class$com$liferay$filters$compression$CompressionFilter Ljava/lang/Class; line 54 | DUP | IFNONNULL L0 | POP | LDC "[Lcom.liferay.filters.compression.CompressionFilter;" | ICONST_0 | method-call java.lang.Class com.liferay.filters.compression.CompressionFilter.class java.lang.String, boolean | | INVOKESTATIC com.liferay.filters.compression.CompressionFilter.class Ljava/lang/String;Z Ljava/lang/Class; | method-call java.lang.Class com.liferay.filters.compression.CompressionFilter.class java.lang.String, boolean | DUP | PUTSTATIC com.liferay.filters.compression.CompressionFilter.class$com$liferay$filters$compression$CompressionFilter Ljava/lang/Class; | method-call java.lang.String java.lang.Class.getName | | L0: INVOKEVIRTUAL java.lang.Class.getName Ljava/lang/String; | method-call java.lang.String java.lang.Class.getName | method-call java.lang.String com.liferay.util.SystemProperties.get java.lang.String | | INVOKESTATIC com.liferay.util.SystemProperties.get Ljava/lang/String; Ljava/lang/String; | method-call java.lang.String com.liferay.util.SystemProperties.get java.lang.String | ICONST_1 | method-call boolean com.liferay.util.GetterUtil.getBoolean java.lang.String, boolean | | INVOKESTATIC com.liferay.util.GetterUtil.getBoolean Ljava/lang/String;Z Z | method-call boolean com.liferay.util.GetterUtil.getBoolean java.lang.String, boolean | PUTSTATIC com.liferay.filters.compression.CompressionFilter.useCompressionFilter Z | GETSTATIC com.liferay.filters.compression.CompressionFilter.useCompressionFilter Z line 62 | IFEQ L3 | method-call boolean com.liferay.portal.kernel.util.ServerDetector.isJBoss | | INVOKESTATIC com.liferay.portal.kernel.util.ServerDetector.isJBoss Z line 63 | method-call boolean com.liferay.portal.kernel.util.ServerDetector.isJBoss | IFNE L1 | method-call boolean com.liferay.portal.kernel.util.ServerDetector.isJetty | | INVOKESTATIC com.liferay.portal.kernel.util.ServerDetector.isJetty Z | method-call boolean com.liferay.portal.kernel.util.ServerDetector.isJetty | IFNE L1 | method-call boolean com.liferay.portal.kernel.util.ServerDetector.isJOnAS | | INVOKESTATIC com.liferay.portal.kernel.util.ServerDetector.isJOnAS Z | method-call boolean com.liferay.portal.kernel.util.ServerDetector.isJOnAS | IFNE L1 | method-call boolean com.liferay.portal.kernel.util.ServerDetector.isOC4J | | INVOKESTATIC com.liferay.portal.kernel.util.ServerDetector.isOC4J Z | method-call boolean com.liferay.portal.kernel.util.ServerDetector.isOC4J | IFNE L1 | method-call boolean com.liferay.portal.kernel.util.ServerDetector.isOrion | | INVOKESTATIC com.liferay.portal.kernel.util.ServerDetector.isOrion Z | method-call boolean com.liferay.portal.kernel.util.ServerDetector.isOrion | IFNE L1 | method-call boolean com.liferay.portal.kernel.util.ServerDetector.isTomcat | | INVOKESTATIC com.liferay.portal.kernel.util.ServerDetector.isTomcat Z | method-call boolean com.liferay.portal.kernel.util.ServerDetector.isTomcat | IFEQ L2 | L1: ICONST_1 line 67 | PUTSTATIC com.liferay.filters.compression.CompressionFilter.useCompressionFilter Z | GOTO L3 | L2: ICONST_0 line 70 | PUTSTATIC com.liferay.filters.compression.CompressionFilter.useCompressionFilter Z | L3: NEW java.lang.StringBuffer line 75 | DUP | constructor-call void java.lang.StringBuffer.&amp;lt;init&amp;gt; | | INVOKESPECIAL java.lang.StringBuffer.&amp;lt;init&amp;gt; V | constructor-call void java.lang.StringBuffer.&amp;lt;init&amp;gt; | GETSTATIC com.liferay.filters.compression.CompressionFilter.class$com$liferay$filters$compression$CompressionFilter Ljava/lang/Class; | DUP | IFNONNULL L4 | POP | LDC "[Lcom.liferay.filters.compression.CompressionFilter;" | ICONST_0 | method-call java.lang.Class com.liferay.filters.compression.CompressionFilter.class java.lang.String, boolean | | INVOKESTATIC com.liferay.filters.compression.CompressionFilter.class Ljava/lang/String;Z Ljava/lang/Class; | method-call java.lang.Class com.liferay.filters.compression.CompressionFilter.class java.lang.String, boolean | DUP | PUTSTATIC com.liferay.filters.compression.CompressionFilter.class$com$liferay$filters$compression$CompressionFilter Ljava/lang/Class; | method-call java.lang.String java.lang.Class.getName | | L4: INVOKEVIRTUAL java.lang.Class.getName Ljava/lang/String; | method-call java.lang.String java.lang.Class.getName | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.String | | INVOKEVIRTUAL java.lang.StringBuffer.append Ljava/lang/String; Ljava/lang/StringBuffer; | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.String | LDC ".encoding" | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.String | | INVOKEVIRTUAL java.lang.StringBuffer.append Ljava/lang/String; Ljava/lang/StringBuffer; | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.String | method-call java.lang.String java.lang.StringBuffer.toString | | INVOKEVIRTUAL java.lang.StringBuffer.toString Ljava/lang/String; | method-call java.lang.String java.lang.StringBuffer.toString | method-call java.lang.String com.liferay.util.SystemProperties.get java.lang.String | | INVOKESTATIC com.liferay.util.SystemProperties.get Ljava/lang/String; Ljava/lang/String; | method-call java.lang.String com.liferay.util.SystemProperties.get java.lang.String | LDC "UTF-8" | method-call java.lang.String com.liferay.util.GetterUtil.getString java.lang.String, java.lang.String | | INVOKESTATIC com.liferay.util.GetterUtil.getString Ljava/lang/String;Ljava/lang/String; Ljava/lang/String; | method-call java.lang.String com.liferay.util.GetterUtil.getString java.lang.String, java.lang.String | PUTSTATIC com.liferay.filters.compression.CompressionFilter.ENCODING Ljava/lang/String; | NEW java.lang.StringBuffer line 173 | DUP | constructor-call void java.lang.StringBuffer.&amp;lt;init&amp;gt; | | INVOKESPECIAL java.lang.StringBuffer.&amp;lt;init&amp;gt; V | constructor-call void java.lang.StringBuffer.&amp;lt;init&amp;gt; | GETSTATIC com.liferay.filters.compression.CompressionFilter.class$com$liferay$filters$compression$CompressionFilter Ljava/lang/Class; | DUP | IFNONNULL L5 | POP | LDC "[Lcom.liferay.filters.compression.CompressionFilter;" | ICONST_0 | method-call java.lang.Class com.liferay.filters.compression.CompressionFilter.class java.lang.String, boolean | | INVOKESTATIC com.liferay.filters.compression.CompressionFilter.class Ljava/lang/String;Z Ljava/lang/Class; | method-call java.lang.Class com.liferay.filters.compression.CompressionFilter.class java.lang.String, boolean | DUP | PUTSTATIC com.liferay.filters.compression.CompressionFilter.class$com$liferay$filters$compression$CompressionFilter Ljava/lang/Class; | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.Object | | L5: INVOKEVIRTUAL java.lang.StringBuffer.append Ljava/lang/Object; Ljava/lang/StringBuffer; | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.Object | LDC "_ALREADY_FILTERED" | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.String | | INVOKEVIRTUAL java.lang.StringBuffer.append Ljava/lang/String; Ljava/lang/StringBuffer; | method-call java.lang.StringBuffer java.lang.StringBuffer.append java.lang.String | method-call java.lang.String java.lang.StringBuffer.toString | | INVOKEVIRTUAL java.lang.StringBuffer.toString Ljava/lang/String; | method-call java.lang.String java.lang.StringBuffer.toString | PUTSTATIC com.liferay.filters.compression.CompressionFilter._ALREADY_FILTERED Ljava/lang/String; | GETSTATIC com.liferay.filters.compression.CompressionFilter.class$com$liferay$filters$compression$CompressionFilter Ljava/lang/Class; line 180 | DUP | IFNONNULL L6 | POP | LDC "[Lcom.liferay.filters.compression.CompressionFilter;" | ICONST_0 | method-call java.lang.Class com.liferay.filters.compression.CompressionFilter.class java.lang.String, boolean | | INVOKESTATIC com.liferay.filters.compression.CompressionFilter.class Ljava/lang/String;Z Ljava/lang/Class; | method-call java.lang.Class com.liferay.filters.compression.CompressionFilter.class java.lang.String, boolean | DUP | PUTSTATIC com.liferay.filters.compression.CompressionFilter.class$com$liferay$filters$compression$CompressionFilter Ljava/lang/Class; | method-call org.apache.commons.logging.Log org.apache.commons.logging.LogFactory.getLog java.lang.Class | | L6: INVOKESTATIC org.apache.commons.logging.LogFactory.getLog Ljava/lang/Class; Lorg/apache/commons/logging/Log; | method-call org.apache.commons.logging.Log org.apache.commons.logging.LogFactory.getLog java.lang.Class | PUTSTATIC com.liferay.filters.compression.CompressionFilter._log Lorg/apache/commons/logging/Log; | RETURN staticinitialization void com.liferay.filters.compression.CompressionFilter.&amp;lt;clinit&amp;gt; end private static final void &amp;lt;clinit&amp;gt; end public class com.liferay.filters.compression.CompressionFilter Exception thrown from AspectJ 1.5.2 This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. Unhandled kind of new -1: impdep1[254] 1 when implementing on shadow constructor-call void java.lang.NoClassDefFoundError.&amp;lt;init&amp;gt; when weaving classes when weaving when batch building BuildConfig[null] #Files=1 Unhandled kind of new -1: impdep1[254] 1 java.lang.RuntimeException: Unhandled kind of new -1: impdep1[254] 1 at org.aspectj.weaver.bcel.BcelShadow.deleteNewAndDup BcelShadow.java:226 at org.aspectj.weaver.bcel.BcelShadow.prepareForMungers BcelShadow.java:284 at org.aspectj.weaver.Shadow.implement Shadow.java:470 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:2825 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:502 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:115 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1574 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1525 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1305 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1127 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:321 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:192 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:887 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:244 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:163 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:367 at org.aspectj.tools.ajc.Main.runMain Main.java:246 at org.aspectj.tools.ajc.Main.main Main.java:86 trouble in: public class com.liferay.filters.compression.CompressionStream extends javax.servlet.ServletOutputStream: private static final String _CONTENT_ENCODING = "Content-Encoding" private static final String _GZIP = "gzip" private static org.apache.commons.logging.Log _log private javax.servlet.http.HttpServletResponse _res private javax.servlet.ServletOutputStream _output private java.io.OutputStream _bufferedOutput private boolean _closed static Class class$com$liferay$filters$compression$CompressionStream [Synthetic] public void close throws java.io.IOException: method-execution void com.liferay.filters.compression.CompressionStream.close | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 56 | GETFIELD com.liferay.filters.compression.CompressionStream._closed Z | IFEQ L0 | constructor-call void java.io.IOException.&amp;lt;init&amp;gt; | | INVOKESTATIC com.myco.error.ThrowablesAspect.aspectOf Lcom/myco/error/ThrowablesAspect; | | INVOKEVIRTUAL com.myco.error.ThrowablesAspect.ajc$before$com_myco_error_ThrowablesAspect$1$45ca0c36 V | | NEW java.io.IOException | | DUP | | INVOKESPECIAL java.io.IOException.&amp;lt;init&amp;gt; V line 57 | constructor-call void java.io.IOException.&amp;lt;init&amp;gt; | ATHROW | L0: ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 60 | GETFIELD com.liferay.filters.compression.CompressionStream._bufferedOutput Ljava/io/OutputStream; | INSTANCEOF java.io.ByteArrayOutputStream | IFEQ L1 | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 61 | GETFIELD com.liferay.filters.compression.CompressionStream._bufferedOutput Ljava/io/OutputStream; | CHECKCAST java.io.ByteArrayOutputStream | ASTORE_1 // Ljava/io/ByteArrayOutputStream; baos | NEW java.io.ByteArrayOutputStream line 63 | DUP | constructor-call void java.io.ByteArrayOutputStream.&amp;lt;init&amp;gt; | | INVOKESPECIAL java.io.ByteArrayOutputStream.&amp;lt;init&amp;gt; V | constructor-call void java.io.ByteArrayOutputStream.&amp;lt;init&amp;gt; | ASTORE_2 // Ljava/io/ByteArrayOutputStream; compressedContent | NEW java.util.zip.GZIPOutputStream line 66 | DUP | ALOAD_2 // Ljava/io/ByteArrayOutputStream; compressedContent | constructor-call void java.util.zip.GZIPOutputStream.&amp;lt;init&amp;gt; java.io.OutputStream | | INVOKESPECIAL java.util.zip.GZIPOutputStream.&amp;lt;init&amp;gt; Ljava/io/OutputStream; V | constructor-call void java.util.zip.GZIPOutputStream.&amp;lt;init&amp;gt; java.io.OutputStream | ASTORE_3 // Ljava/util/zip/GZIPOutputStream; gzipOutput | ALOAD_3 // Ljava/util/zip/GZIPOutputStream; gzipOutput line 69 | ALOAD_1 // Ljava/io/ByteArrayOutputStream; baos | method-call byte[] java.io.ByteArrayOutputStream.toByteArray | | INVOKEVIRTUAL java.io.ByteArrayOutputStream.toByteArray [B | method-call byte[] java.io.ByteArrayOutputStream.toByteArray | method-call void java.util.zip.GZIPOutputStream.write byte[] | | INVOKEVIRTUAL java.util.zip.GZIPOutputStream.write [B V | method-call void java.util.zip.GZIPOutputStream.write byte[] | ALOAD_3 // Ljava/util/zip/GZIPOutputStream; gzipOutput line 70 | method-call void java.util.zip.GZIPOutputStream.finish | | INVOKEVIRTUAL java.util.zip.GZIPOutputStream.finish V | method-call void java.util.zip.GZIPOutputStream.finish | ALOAD_2 // Ljava/io/ByteArrayOutputStream; compressedContent line 72 | method-call byte[] java.io.ByteArrayOutputStream.toByteArray | | INVOKEVIRTUAL java.io.ByteArrayOutputStream.toByteArray [B | method-call byte[] java.io.ByteArrayOutputStream.toByteArray | ASTORE 4 // [B compressedBytes | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 74 | GETFIELD com.liferay.filters.compression.CompressionStream._res Ljavax/servlet/http/HttpServletResponse; | ALOAD 4 // [B compressedBytes | ARRAYLENGTH | method-call void javax.servlet.http.HttpServletResponse.setContentLength int | | INVOKEINTERFACE javax.servlet.http.HttpServletResponse.setContentLength I V | method-call void javax.servlet.http.HttpServletResponse.setContentLength int | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 75 | GETFIELD com.liferay.filters.compression.CompressionStream._res Ljavax/servlet/http/HttpServletResponse; | LDC "Content-Encoding" | LDC "gzip" | method-call void javax.servlet.http.HttpServletResponse.addHeader java.lang.String, java.lang.String | | INVOKEINTERFACE javax.servlet.http.HttpServletResponse.addHeader Ljava/lang/String;Ljava/lang/String; V | method-call void javax.servlet.http.HttpServletResponse.addHeader java.lang.String, java.lang.String | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 77 | GETFIELD com.liferay.filters.compression.CompressionStream._output Ljavax/servlet/ServletOutputStream; | ALOAD 4 // [B compressedBytes | method-call void javax.servlet.ServletOutputStream.write byte[] | | INVOKEVIRTUAL javax.servlet.ServletOutputStream.write [B V | method-call void javax.servlet.ServletOutputStream.write byte[] | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 78 | GETFIELD com.liferay.filters.compression.CompressionStream._output Ljavax/servlet/ServletOutputStream; | method-call void javax.servlet.ServletOutputStream.flush | | INVOKEVIRTUAL javax.servlet.ServletOutputStream.flush V | method-call void javax.servlet.ServletOutputStream.flush | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 79 | GETFIELD com.liferay.filters.compression.CompressionStream._output Ljavax/servlet/ServletOutputStream; | method-call void javax.servlet.ServletOutputStream.close | | INVOKEVIRTUAL javax.servlet.ServletOutputStream.close V | method-call void javax.servlet.ServletOutputStream.close | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 81 | ICONST_1 | PUTFIELD com.liferay.filters.compression.CompressionStream._closed Z | GOTO L2 | L1: ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 83 | GETFIELD com.liferay.filters.compression.CompressionStream._bufferedOutput Ljava/io/OutputStream; | INSTANCEOF java.util.zip.GZIPOutputStream | IFEQ L2 | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 84 | GETFIELD com.liferay.filters.compression.CompressionStream._bufferedOutput Ljava/io/OutputStream; | CHECKCAST java.util.zip.GZIPOutputStream | ASTORE_1 // Ljava/util/zip/GZIPOutputStream; gzipOutput | ALOAD_1 // Ljava/util/zip/GZIPOutputStream; gzipOutput line 86 | method-call void java.util.zip.GZIPOutputStream.finish | | INVOKEVIRTUAL java.util.zip.GZIPOutputStream.finish V | method-call void java.util.zip.GZIPOutputStream.finish | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 88 | GETFIELD com.liferay.filters.compression.CompressionStream._output Ljavax/servlet/ServletOutputStream; | method-call void javax.servlet.ServletOutputStream.flush | | INVOKEVIRTUAL javax.servlet.ServletOutputStream.flush V | method-call void javax.servlet.ServletOutputStream.flush | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 89 | GETFIELD com.liferay.filters.compression.CompressionStream._output Ljavax/servlet/ServletOutputStream; | method-call void javax.servlet.ServletOutputStream.close | | INVOKEVIRTUAL javax.servlet.ServletOutputStream.close V | method-call void javax.servlet.ServletOutputStream.close | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 91 | ICONST_1 | PUTFIELD com.liferay.filters.compression.CompressionStream._closed Z | L2: RETURN line 93 method-execution void com.liferay.filters.compression.CompressionStream.close end public void close throws java.io.IOException public void flush throws java.io.IOException: method-execution void com.liferay.filters.compression.CompressionStream.flush | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 96 | GETFIELD com.liferay.filters.compression.CompressionStream._closed Z | IFEQ L0 | constructor-call void java.io.IOException.&amp;lt;init&amp;gt; | | INVOKESTATIC com.myco.error.ThrowablesAspect.aspectOf Lcom/myco/error/ThrowablesAspect; | | INVOKEVIRTUAL com.myco.error.ThrowablesAspect.ajc$before$com_myco_error_ThrowablesAspect$1$45ca0c36 V | | NEW java.io.IOException | | DUP | | INVOKESPECIAL java.io.IOException.&amp;lt;init&amp;gt; V line 97 | constructor-call void java.io.IOException.&amp;lt;init&amp;gt; | ATHROW | L0: ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 100 | GETFIELD com.liferay.filters.compression.CompressionStream._bufferedOutput Ljava/io/OutputStream; | method-call void java.io.OutputStream.flush | | INVOKEVIRTUAL java.io.OutputStream.flush V | method-call void java.io.OutputStream.flush | RETURN line 101 method-execution void com.liferay.filters.compression.CompressionStream.flush end public void flush throws java.io.IOException public void write int throws java.io.IOException: method-execution void com.liferay.filters.compression.CompressionStream.write int | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 104 | GETFIELD com.liferay.filters.compression.CompressionStream._closed Z | IFEQ L0 | constructor-call void java.io.IOException.&amp;lt;init&amp;gt; | | INVOKESTATIC com.myco.error.ThrowablesAspect.aspectOf Lcom/myco/error/ThrowablesAspect; | | INVOKEVIRTUAL com.myco.error.ThrowablesAspect.ajc$before$com_myco_error_ThrowablesAspect$1$45ca0c36 V | | NEW java.io.IOException | | DUP | | INVOKESPECIAL java.io.IOException.&amp;lt;init&amp;gt; V line 105 | constructor-call void java.io.IOException.&amp;lt;init&amp;gt; | ATHROW | L0: ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 112 | GETFIELD com.liferay.filters.compression.CompressionStream._bufferedOutput Ljava/io/OutputStream; | ILOAD_1 // I b | I2B | method-call void java.io.OutputStream.write int | | INVOKEVIRTUAL java.io.OutputStream.write I V | method-call void java.io.OutputStream.write int | RETURN line 113 method-execution void com.liferay.filters.compression.CompressionStream.write int end public void write int throws java.io.IOException public void write byte[] throws java.io.IOException: method-execution void com.liferay.filters.compression.CompressionStream.write byte[] | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 116 | ALOAD_1 // [B b | ICONST_0 | ALOAD_1 // [B b | ARRAYLENGTH | method-call void com.liferay.filters.compression.CompressionStream.write byte[], int, int | | INVOKEVIRTUAL com.liferay.filters.compression.CompressionStream.write [BII V | method-call void com.liferay.filters.compression.CompressionStream.write byte[], int, int | RETURN line 117 method-execution void com.liferay.filters.compression.CompressionStream.write byte[] end public void write byte[] throws java.io.IOException public void write byte[], int, int throws java.io.IOException: method-execution void com.liferay.filters.compression.CompressionStream.write byte[], int, int | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 120 | GETFIELD com.liferay.filters.compression.CompressionStream._closed Z | IFEQ L0 | constructor-call void java.io.IOException.&amp;lt;init&amp;gt; | | INVOKESTATIC com.myco.error.ThrowablesAspect.aspectOf Lcom/myco/error/ThrowablesAspect; | | INVOKEVIRTUAL com.myco.error.ThrowablesAspect.ajc$before$com_myco_error_ThrowablesAspect$1$45ca0c36 V | | NEW java.io.IOException | | DUP | | INVOKESPECIAL java.io.IOException.&amp;lt;init&amp;gt; V line 121 | constructor-call void java.io.IOException.&amp;lt;init&amp;gt; | ATHROW | catch java.io.IOException -&amp;gt; E0 | | L0: ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 129 | | GETFIELD com.liferay.filters.compression.CompressionStream._bufferedOutput Ljava/io/OutputStream; | | ALOAD_1 // [B b | | ILOAD_2 // I off | | ILOAD_3 // I len | | method-call void java.io.OutputStream.write byte[], int, int | | | INVOKEVIRTUAL java.io.OutputStream.write [BII V | | method-call void java.io.OutputStream.write byte[], int, int | catch java.io.IOException -&amp;gt; E0 | GOTO L1 | E0: ASTORE 4 // Ljava/io/IOException; ioe line 131 | GETSTATIC com.liferay.filters.compression.CompressionStream._log Lorg/apache/commons/logging/Log; line 132 | ALOAD 4 // Ljava/io/IOException; ioe | method-call java.lang.String java.io.IOException.getMessage | | INVOKEVIRTUAL java.io.IOException.getMessage Ljava/lang/String; | method-call java.lang.String java.io.IOException.getMessage | method-call void org.apache.commons.logging.Log.warn java.lang.Object | | INVOKEINTERFACE org.apache.commons.logging.Log.warn Ljava/lang/Object; V | method-call void org.apache.commons.logging.Log.warn java.lang.Object | L1: RETURN line 134 method-execution void com.liferay.filters.compression.CompressionStream.write byte[], int, int end public void write byte[], int, int throws java.io.IOException public boolean closed : method-execution boolean com.liferay.filters.compression.CompressionStream.closed | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 137 | GETFIELD com.liferay.filters.compression.CompressionStream._closed Z | IRETURN method-execution boolean com.liferay.filters.compression.CompressionStream.closed end public boolean closed public void reset : method-execution void com.liferay.filters.compression.CompressionStream.reset | RETURN line 141 method-execution void com.liferay.filters.compression.CompressionStream.reset end public void reset static Class class String, boolean : method-execution java.lang.Class com.liferay.filters.compression.CompressionStream.class java.lang.String, boolean | catch java.lang.ClassNotFoundException -&amp;gt; E0 | | ALOAD_0 line 0 | | method-call java.lang.Class java.lang.Class.forName java.lang.String | | | INVOKESTATIC java.lang.Class.forName Ljava/lang/String; Ljava/lang/Class; | | method-call java.lang.Class java.lang.Class.forName java.lang.String | | ILOAD_1 | | IFNE L0 | | method-call java.lang.Class java.lang.Class.getComponentType | | | INVOKEVIRTUAL java.lang.Class.getComponentType Ljava/lang/Class; | | method-call java.lang.Class java.lang.Class.getComponentType | | L0: ARETURN | catch java.lang.ClassNotFoundException -&amp;gt; E0 | E0: NEW java.lang.NoClassDefFoundError | DUP_X1 | constructor-call void java.lang.NoClassDefFoundError.&amp;lt;init&amp;gt; | | INVOKESPECIAL java.lang.NoClassDefFoundError.&amp;lt;init&amp;gt; V | constructor-call void java.lang.NoClassDefFoundError.&amp;lt;init&amp;gt; | method-call java.lang.Throwable java.lang.Throwable.initCause java.lang.Throwable | | INVOKEVIRTUAL java.lang.Throwable.initCause Ljava/lang/Throwable; Ljava/lang/Throwable; | method-call java.lang.Throwable java.lang.Throwable.initCause java.lang.Throwable | ATHROW method-execution java.lang.Class com.liferay.filters.compression.CompressionStream.class java.lang.String, boolean end static Class class String, boolean private final void this : method-execution void com.liferay.filters.compression.CompressionStream.this | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 149 | ACONST_NULL | PUTFIELD com.liferay.filters.compression.CompressionStream._res Ljavax/servlet/http/HttpServletResponse; | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 150 | ACONST_NULL | PUTFIELD com.liferay.filters.compression.CompressionStream._output Ljavax/servlet/ServletOutputStream; | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 151 | ACONST_NULL | PUTFIELD com.liferay.filters.compression.CompressionStream._bufferedOutput Ljava/io/OutputStream; | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 152 | ICONST_0 | PUTFIELD com.liferay.filters.compression.CompressionStream._closed Z | RETURN method-execution void com.liferay.filters.compression.CompressionStream.this end private final void this public void &amp;lt;init&amp;gt; javax.servlet.http.HttpServletResponse throws java.io.IOException: ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 47 INVOKESPECIAL javax.servlet.ServletOutputStream.&amp;lt;init&amp;gt; V constructor-execution void com.liferay.filters.compression.CompressionStream.&amp;lt;init&amp;gt; javax.servlet.http.HttpServletResponse | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this | method-call void com.liferay.filters.compression.CompressionStream.this | | INVOKESPECIAL com.liferay.filters.compression.CompressionStream.this V | method-call void com.liferay.filters.compression.CompressionStream.this | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 49 | ALOAD_1 // Ljavax/servlet/http/HttpServletResponse; res | PUTFIELD com.liferay.filters.compression.CompressionStream._res Ljavax/servlet/http/HttpServletResponse; | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 50 | ALOAD_1 // Ljavax/servlet/http/HttpServletResponse; res | method-call javax.servlet.ServletOutputStream javax.servlet.http.HttpServletResponse.getOutputStream | | INVOKEINTERFACE javax.servlet.http.HttpServletResponse.getOutputStream Ljavax/servlet/ServletOutputStream; | method-call javax.servlet.ServletOutputStream javax.servlet.http.HttpServletResponse.getOutputStream | PUTFIELD com.liferay.filters.compression.CompressionStream._output Ljavax/servlet/ServletOutputStream; | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 51 | NEW java.io.ByteArrayOutputStream | DUP | constructor-call void java.io.ByteArrayOutputStream.&amp;lt;init&amp;gt; | | INVOKESPECIAL java.io.ByteArrayOutputStream.&amp;lt;init&amp;gt; V | constructor-call void java.io.ByteArrayOutputStream.&amp;lt;init&amp;gt; | PUTFIELD com.liferay.filters.compression.CompressionStream._bufferedOutput Ljava/io/OutputStream; | ALOAD_0 // Lcom/liferay/filters/compression/CompressionStream; this line 52 | ICONST_0 | PUTFIELD com.liferay.filters.compression.CompressionStream._closed Z | RETURN line 53 constructor-execution void com.liferay.filters.compression.CompressionStream.&amp;lt;init&amp;gt; javax.servlet.http.HttpServletResponse end public void &amp;lt;init&amp;gt; javax.servlet.http.HttpServletResponse throws java.io.IOException private static final void &amp;lt;clinit&amp;gt; : staticinitialization void com.liferay.filters.compression.CompressionStream.&amp;lt;clinit&amp;gt; | GETSTATIC com.liferay.filters.compression.CompressionStream.class$com$liferay$filters$compression$CompressionStream Ljava/lang/Class; line 147 | DUP | IFNONNULL L0 | POP | LDC "[Lcom.liferay.filters.compression.CompressionStream;" | ICONST_0 | method-call java.lang.Class com.liferay.filters.compression.CompressionStream.class java.lang.String, boolean | | INVOKESTATIC com.liferay.filters.compression.CompressionStream.class Ljava/lang/String;Z Ljava/lang/Class; | method-call java.lang.Class com.liferay.filters.compression.CompressionStream.class java.lang.String, boolean | DUP | PUTSTATIC com.liferay.filters.compression.CompressionStream.class$com$liferay$filters$compression$CompressionStream Ljava/lang/Class; | method-call org.apache.commons.logging.Log org.apache.commons.logging.LogFactory.getLog java.lang.Class | | L0: INVOKESTATIC org.apache.commons.logging.LogFactory.getLog Ljava/lang/Class; Lorg/apache/commons/logging/Log; | method-call org.apache.commons.logging.Log org.apache.commons.logging.LogFactory.getLog java.lang.Class | PUTSTATIC com.liferay.filters.compression.CompressionStream._log Lorg/apache/commons/logging/Log; | RETURN staticinitialization void com.liferay.filters.compression.CompressionStream.&amp;lt;clinit&amp;gt; end private static final void &amp;lt;clinit&amp;gt; end public class com.liferay.filters.compression.CompressionStream Exception thrown from AspectJ 1.5.2 This might be logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler Bugs for exceptions thrown have titles File:line from the top stack, e.g., "SomeFile.java:243" If you don't find the exception below in a bug, please add a new bug at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a test program that can reproduce this exception. Unhandled kind of new -1: impdep1[254] 1 when implementing on shadow constructor-call void java.lang.NoClassDefFoundError.&amp;lt;init&amp;gt; when weaving classes when weaving when batch building BuildConfig[null] #Files=1 Unhandled kind of new -1: impdep1[254] 1 java.lang.RuntimeException: Unhandled kind of new -1: impdep1[254] 1 at org.aspectj.weaver.bcel.BcelShadow.deleteNewAndDup BcelShadow.java:226 at org.aspectj.weaver.bcel.BcelShadow.prepareForMungers BcelShadow.java:284 at org.aspectj.weaver.Shadow.implement Shadow.java:470 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:2825 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:502 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:115 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1574 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1525 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1305 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1127 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave AjCompilerAdapter.java:321 at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling AjCompilerAdapter.java:192 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 CompilerAdapter.aj:70 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:887 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild AjBuildManager.java:244 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:163 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:367 at org.aspectj.tools.ajc.Main.runMain Main.java:246 at org.aspectj.tools.ajc.Main.main Main.java:86</description>
    <commit commitTime="2008-09-30 22:55:35" id="7a398a2"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="249710" reportTime="2008-10-05 18:24:00">
    <summary>[compiling] Problem with -XterminateAfterCompilation</summary>
    <description>Reported on the mailing list by Simone: I tried disabling pipelining as described in bug 146781 , that is using -Xset:pipelineCompilation=false, but unfortunately I get this error while compiling with -XterminateAfterCompilation : java.lang.NullPointerException at org.aspectj.weaver.ReferenceType.isAspect ReferenceType.java:160 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$4.addAspectName AjBuildManager.java:1108 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$4.acceptResult AjBuildManager.java:1047 at</description>
    <commit commitTime="2008-10-29 19:08:05" id="cffe291"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc163/Ajc163Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="256400" reportTime="2008-11-25 04:51:00">
    <summary>An internal error occurred during: "Delete and update AspectJ markers for CoreSource".</summary>
    <description>this occured during a clean and build of the project i'm working on. The following was inthe details. An internal error occurred during: "Delete and update AspectJ markers for CoreSource". java.lang.NullPointerException</description>
    <commit commitTime="2008-11-27 17:59:09" id="155a888"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/internal/JDTLikeHandleProvider.java</file>
    </fixedFiles>
  </bug>
  <bug id="185447" reportTime="2007-05-03 17:18:00">
    <summary>[plan] [ataspectj] Abstract @Aspect causing problems</summary>
    <description>Trying to use an abstract @Aspect from a library jar file is causing problems. In the soon to be attached zip of eclipse projects: * logging-library: defines two abstract trivial logging aspects, one in code-style and one in @AspectJ style. * sample-system: uses the code-style abstract aspect successfully * sample-system2: uses the @AspectJ style abstract aspect and won't compile in Eclipse Exception: java.lang.NullPointerException at org.aspectj.weaver.bcel.AtAjAttributes$LazyResolvedPointcutDefinition.getPointcut AtAjAttributes.java:1632 at org.aspectj.weaver.ShadowMunger.addChildNodes ShadowMunger.java:258 at org.aspectj.weaver.ShadowMunger.createHierarchy ShadowMunger.java:247 at org.aspectj.weaver.AsmRelationshipProvider.adviceMunger AsmRelationshipProvider.java:180 at org.aspectj.weaver.Shadow.implementMungers Shadow.java:717 a ... int; Ljava/lang/String; ARETURN end public Object run Object[]</description>
    <commit commitTime="2008-12-01 21:00:43" id="120b47f"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</file>
      <file>weaver/src/org/aspectj/weaver/model/AsmRelationshipProvider.java</file>
    </fixedFiles>
  </bug>
  <bug id="251326" reportTime="2008-10-19 15:53:00">
    <summary>Anonymous inner classes declare inside an ITD method will cause IllegalAccessError</summary>
    <description>If i declare an aspect in pkgB, having an ITD method for a class in pkgA using an inner anonymous class, is created in the pkgA package, package protected, but then instantiated from pkgB causeing the error. Test case is attached.</description>
    <commit commitTime="2008-12-09 19:21:17" id="f1a83b5"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc163/Ajc163Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="259528" reportTime="2008-12-22 16:42:04">
    <summary>[incremental] [build] Class with ITD declared on it causes too many full builds</summary>
    <description>When there is a structural change to a class that has an ITD on it there is a full build. This should be an incremental build, but the compiler always drops to a full build.</description>
    <commit commitTime="2008-12-24 08:53:20" id="2b43e63"/>
    <fixedFiles>
      <file>tests/multiIncremental/pr259528/base/src/b/IsAdvised.java</file>
      <file>tests/multiIncremental/pr259528/inc1/src/b/IsAdvised.java</file>
    </fixedFiles>
  </bug>
  <bug id="260751" reportTime="2009-01-12 12:43:00">
    <summary>java.lang.StringIndexOutOfBoundsException</summary>
    <description>ava.lang.StringIndexOutOfBoundsException at java.lang.String.substring String.java:1938 at org.aspectj.ajdt.ajc.ConfigParser.stripWhitespaceAndComments ConfigParser.java:103 at org.aspectj.ajdt.ajc.ConfigParser.parseConfigFileHelper ConfigParser.java:69 at org.aspectj.ajdt.ajc.ConfigParser.parseImportedConfigFile ConfigParser.java:224 at org.aspectj.ajdt.ajc.ConfigParser.parseOneArg ConfigParser.java:213 at org.aspectj.ajdt.ajc.ConfigP ... 82 at org.eclipse.core.internal.jobs.Worker.run Worker.java:55</description>
    <commit commitTime="2009-01-12 21:35:16" id="d9bd46d"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/ajc/ConfigParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="261808" reportTime="2009-01-21 07:43:00">
    <summary>iajc-Ant-Task fails "type already defined"</summary>
    <description>Created attachment 123223 [details] Eclipse-project-export that demonstrates the error As attachment you find a simple Eclipse-Project, which reproduces the error. The project-structure consists of two packages "anttest" and "anttest.test". The second package should not be included in the build, so I was trying to exclude it using a dirset. This does not work, because with this configuration iajc always fails with an "already defined"-error for every type class or aspect . As comment I included a simple workaround for this problem in the iajc-task. This workaround does its job, but I want to reuse the source-path-definition, which is not possible this way.</description>
    <commit commitTime="2009-01-31 04:33:22" id="1da1f7c"/>
    <fixedFiles>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="263837" reportTime="2009-02-05 13:25:00">
    <summary>Error during Delete AJ Markers</summary>
    <description>Error sent through the AJDT mailing list. I believe this is an LTW weaving error, so not raising it against AJDT.</description>
    <commit commitTime="2009-02-06 00:15:57" id="1b54b4b"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="264563" reportTime="2009-02-11 13:19:00">
    <summary>[handles] Remove trailing '/' from source path handles</summary>
    <description>In bug 262953 , we noticed that when the .classpath has an entry like: &amp;lt;classpathentry kind="src" path="src/"/&amp;gt; Instead of something like: &amp;lt;classpathentry kind="src" path="src"/&amp;gt; AspectJ handles will include the extra '/', but JDT handles will not. On the AJDT side, I fixed things in Bug 262953 so that this kind of classpath entry will not be created by AJDT. However, for consistency, it is probably a good idea for AspectJ to handle these kinds of paths the same as JDT. For example, the AspectJ handle for the source folder in Spacewar when the .classpath entry contains and extra '/' looks like: =Spacewar Example/src\/ but the JDT handle looks like: =Spacewar Example/src</description>
    <commit commitTime="2009-02-12 17:50:17" id="0af658e"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/internal/JDTLikeHandleProvider.java</file>
    </fixedFiles>
  </bug>
  <bug id="264869" reportTime="2009-02-13 11:54:00">
    <summary>AspectJ depends on Class files having a dot in their source file name attribute</summary>
    <description>The following code in ShadowMunger$getBinaryFile line 169 ff fails if a class file does not contain a proper source file name: if binaryFile == null { String s = getDeclaringType .getBinaryPath ; File f = getDeclaringType .getSourceLocation .getSourceFile ; int i = f.getPath .lastIndexOf '.' ; String path = f.getPath .substring 0, i + ".class"; binaryFile = new File s + "!" + path ; } there is no '.' in the file name, thus this gives a string index out of bounds error .</description>
    <commit commitTime="2009-02-17 16:20:49" id="9f80317"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ShadowMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="266602" reportTime="2009-02-28 16:09:00">
    <summary>Problem with incremental itd compilation</summary>
    <description>Reproduceable from Roo code - commenting out a field after a successful build results in this exception. The underlying cause may also apply to ITD methods and maybe constructors . org.aspectj.weaver.BCException: Couldn't find ITD init member 'void com.springsource.petclinic.domain.Visit_Roo_Entity_Itd.ajc$interFieldInit$com_springsource_petclinic_domain_Visit_Roo_Entity_Itd$com_springsource_petclinic_domain_Visit$id com.springsource.petclinic.domain.Visit ' on aspect com.springsource.petclinic.domain.Visit_Roo_Entity_Itd when type munging with BcelTypeMunger ResolvedTypeMunger Field, java.lang.Long com.springsource.petclinic.domain.Visit.id when weaving type com.springsource.petclinic.domain.Visit when weaving classes when weaving when incrementally building with classpath: C:\temp\petclinic\target\classes;E:/jvms/jdk1.6.0_06/jre/lib/resources.jar;E:/jvms/jdk1.6.0_06/jre/lib/rt.jar;E:/jvms/jdk1.6.0_06/jre/lib/jsse.jar;E:/jvms/jdk1.6.0_06/jre/lib/jce.jar;E:/jvms/jdk1.6.0_06/jre/lib/charsets.jar;E:/jvms/jdk1.6.0_06/jre/lib/ext/dnsns.jar;E:/jvms/jdk1.6.0_06/jre/lib/ext/localedata.jar;E:/jvms/jdk1.6.0_06/jre/lib/ext/sunjce_provider.jar;E:/jvms/jdk1.6.0_06/jre/lib/ext/sunmscapi.jar;E:/jvms/jdk1.6.0_06/jre/lib/ext/sunpkcs11.jar;C:/Users/Andy/.m2/repository/org/antlr/com.springsource.antlr/2.7.6/com.springsource.antlr-2.7.6.jar;C:/Users/Andy/.m2/repository/com/thoughtworks/xstream/com.springsource.com.thoughtworks.xstream/1.3.0/com.springsource.com.thoughtworks.xstream-1.3.0.jar;C:/Users/Andy/.m2/repository/edu/emory/mathcs/backport/com.springsource.edu.emory.mathcs.backport/3.1.0/com.springsource.edu.emory.mathcs.backport-3.1.0.jar;C:/Users/Andy/.m2/repository/edu/oswego/cs/concurrent/com.springsource.edu.oswego.cs.dl.util.concurrent/1.3.4/com.springsource.edu.oswego.cs.dl.util.concurrent-1.3.4.jar;C:/Users/Andy/.m2/repository/org/jboss/javassist/com.springsource.javassist/3.3.0.ga/com.springsource.javassist-3.3.0.ga.jar;C:/Users/Andy/.m2/repository/javax/annotation/com.springsource.javax.annotation/1.0.0/com.springsource.javax.annotation-1.0.0.jar;C:/Users/Andy/.m2/repository/javax/persistence/com.springsource.javax.persistence/1.0.0/com.springsource.javax.persistence-1.0.0.jar;C:/Users/Andy/.m2/repository/javax/servlet/com.springsource.javax.servlet/2.4.0/com.springsource.javax.servlet-2.4.0.jar;C:/Users/Andy/.m2/repository/javax/servlet/com.springsource.javax.servlet.jsp.jstl/1.2.0/com.springsource.javax.servlet.jsp.jstl-1.2.0.jar;C:/Users/Andy/.m2/repository/javax/transaction/com.springsource.javax.transaction/1.1.0/com.springsource.javax.transaction-1.1.0.jar;C:/Users/Andy/.m2/repository/net/sourceforge/cglib/com.springsource.net.sf.cglib/2.1.3/com.springsource.net.sf.cglib-2.1.3.jar;C:/Users/Andy/.m2/repository/net/sourceforge/ehcache/com.springsource.net.sf.ehcache/1.4.1/com.springsource.net.sf.ehcache-1.4.1.jar;C:/Users/Andy/.m2/repository/net/sourceforge/jsr107cache/com.springsource.net.sf.jsr107cache/1.0.0/com.springsource.net.sf.jsr107cache-1.0.0.jar;C:/Users/Andy/.m2/repository/org/antlr/com.springsource.org.antlr/3.0.1/com.springsource.org.antlr-3.0.1.jar;C:/Users/Andy/.m2/repository/org/aopalliance/com.springsource.org.aopalliance/1.0.0/com.springsource.org.aopalliance-1.0.0.jar;C:/Users/Andy/.m2/repository/org/apache/commons/com.springsource.org.apache.commons.collections/3.2.0/com.springsource.org.apache.commons.collections-3.2.0.jar;C:/Users/Andy/.m2/repository/org/apache/commons/com.springsource.org.apache.commons.dbcp/1.2.2.osgi/com.springsource.org.apache.commons.dbcp-1.2.2.osgi.jar;C:/Users/Andy/.m2/repository/org/apache/commons/com.springsource.org.apache.commons.logging/1.1.1/com.springsource.org.apache.commons.logging-1.1.1.jar;C:/Users/Andy/.m2/repository/org/apache/commons/com.springsource.org.apache.commons.pool/1.3.0/com.springsource.org.apache.commons.pool-1.3.0.jar;C:/Users/Andy/.m2/repository/org/apache/log4j/com.springsource.org.apache.log4j/1.2.15/com.springsource.org.apache.log4j-1.2.15.jar;C:/Users/Andy/.m2/repository/org/apache/taglibs/com.springsource.org.apache.taglibs.standard/1.1.2/com.springsource.org.apache.taglibs.standard-1.1.2.jar;C:/Users/Andy/.m2/repository/org/aspectj/com.springsource.org.aspectj.runtime/1.6.2.RELEASE/com.springsource.org.aspectj.runtime-1.6.2.RELEASE.jar;C:/Users/Andy/.m2/repository/org/aspectj/com.springsource.org.aspectj.tools/1.6.2.RELEASE/com.springsource.org.aspectj.tools-1.6.2.RELEASE.jar;C:/Users/Andy/.m2/repository/org/aspectj/com.springsource.org.aspectj.weaver/1.6.2.RELEASE/com.springsource.org.aspectj.weaver-1.6.2.RELEASE.jar;C:/Users/Andy/.m2/repository/org/dom4j/com.springsource.org.dom4j/1.6.1/com.springsource.org.dom4j-1.6.1.jar;C:/Users/Andy/.m2/repository/org/hibernate/com.springsource.org.hibernate/3.2.6.ga/com.springsource.org.hibernate-3.2.6.ga.jar;C:/Users/Andy/.m2/repository/org/hibernate/com.springsource.org.hibernate.annotations/3.3.1.ga/com.springsource.org.hibernate.annotations-3.3.1.ga.jar;C:/Users/Andy/.m2/repository/org/hibernate/com.springsource.org.hibernate.annotations.common/3.3.0.ga/com.springsource.org.hibernate.annotations.common-3.3.0.ga.jar;C:/Users/Andy/.m2/repository/org/hibernate/com.springsource.org.hibernate.ejb/3.3.2.GA/com.springsource.org.hibernate.ejb-3.3.2.GA.jar;C:/Users/Andy/.m2/repository/org/hibernate/com.springsource.org.hibernate.validator/3.0.0.GA/com.springsource.org.hibernate.validator-3.0.0.GA.jar;C:/Users/Andy/.m2/repository/org/hsqldb/com.springsource.org.hsqldb/1.8.0.9/com.springsource.org.hsqldb-1.8.0.9.jar;C:/Users/Andy/.m2/repository/org/jboss/util/com.springsource.org.jboss.util/2.0.4.GA/com.springsource.org.jboss.util-2.0.4.GA.jar;C:/Users/Andy/.m2/repository/org/junit/com.springsource.org.junit/4.4.0/com.springsource.org.junit-4.4.0.jar;C:/Users/Andy/.m2/repository/org/objectweb/asm/com.springsource.org.objectweb.asm/2.2.3/com.springsource.org.objectweb.asm-2.2.3.jar;C:/Users/Andy/.m2/repository/org/objectweb/asm/com.springsource.org.objectweb.asm.attrs/1.5.3/com.springsource.org.objectweb.asm.attrs-1.5.3.jar;C:/Users/Andy/.m2/repository/org/objectweb/asm/com.springsource.org.objectweb.asm.commons/2.2.3/com.springsource.org.objectweb.asm.commons-2.2.3.jar;C:/Users/Andy/.m2/repository/org/xmlpull/com.springsource.org.xmlpull/1.1.3.4-O/com.springsource.org.xmlpull-1.1.3.4-O.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.aop/3.0.0.M1/org.springframework.aop-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.aspects/3.0.0.M1/org.springframework.aspects-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.beans/3.0.0.M1/org.springframework.beans-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.context/3.0.0.M1/org.springframework.context-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.core/3.0.0.M1/org.springframework.core-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.expression/3.0.0.M1/org.springframework.expression-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.jdbc/3.0.0.M1/org.springframework.jdbc-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.orm/3.0.0.M1/org.springframework.orm-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.test/3.0.0.M1/org.springframework.test-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.transaction/3.0.0.M1/org.springframework.transaction-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.web/3.0.0.M1/org.springframework.web-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/org.springframework.web.servlet/3.0.0.M1/org.springframework.web.servlet-3.0.0.M1.jar;C:/Users/Andy/.m2/repository/org/springframework/roo/roo-core/0.2.0-SNAPSHOT/roo-core-0.2.0-SNAPSHOT.jar;F:/eclipse/e342/eclipse/plugins/org.aspectj.runtime_1.6.4.20090205161900/aspectjrt.jar;f:\jvms\jdk1.6.0_06\jre\lib\ext\dnsns.jar;f:\jvms\jdk1.6.0_06\jre\lib\ext\localedata.jar;f:\jvms\jdk1.6.0_06\jre\lib\ext\sunjce_provider.jar;f:\jvms\jdk1.6.0_06\jre\lib\ext\sunmscapi.jar;f:\jvms\jdk1.6.0_06\jre\lib\ext\sunpkcs11.jar;f:\eclipse\e342\eclipse\\plugins\org.eclipse.equinox.launcher_1.0.101.R34x_v20081125.jar; at org.aspectj.weaver.bcel.BcelTypeMunger.mungeNewField BcelTypeMunger.java:1638 at org.aspectj.weaver.bcel.BcelTypeMunger.munge BcelTypeMunger.java:90 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:441 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:103 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1732 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1693 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1458 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1272 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:435 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving AjPipeliningCompilerAdapter.java:371 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:358 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:98 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:652 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:392 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:977 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:301 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:183 at org.aspectj.ajde.core.internal.AjdeCoreBuildManager.performBuild AjdeCoreBuildManager.java:127 at org.aspectj.ajde.core.AjCompiler.build AjCompiler.java:88 at org.eclipse.ajdt.core.builder.AJBuilder.build AJBuilder.java:223 at org.eclipse.core.internal.events.BuildManager$2.run BuildManager.java:633 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:37 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:170 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:201 at org.eclipse.core.internal.events.BuildManager$1.run BuildManager.java:253 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:37 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:256 at org.eclipse.core.internal.events.BuildManager.basicBuildLoop BuildManager.java:309 at org.eclipse.core.internal.events.BuildManager.build BuildManager.java:341 at org.eclipse.core.internal.events.AutoBuildJob.doBuild AutoBuildJob.java:140 at org.eclipse.core.internal.events.AutoBuildJob.run AutoBuildJob.java:238 at org.eclipse.core.internal.jobs.Worker.run Worker.java:55</description>
    <commit commitTime="2009-03-02 04:00:31" id="2f36e7f"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="266996" reportTime="2009-03-04 05:49:00">
    <summary>AspectJElementHierarchy.java:427 NullPointerException</summary>
    <description>Since an recent update to eclipse I get errors when using ajdt compile time weaving. Single used aspect is @Configurable from spring 2.5.6. I call this critical because my application wont run without that aspect compiled in. When doing a build two popups "AspectJ Internal Compiler Error" are showing up with instructions to look for and post bugreports. 1st popup: -------------------------------- java.lang.NullPointerException at org.aspectj.asm.internal.AspectJElementHierarchy.findCloserMatchForLineNumber AspectJElementHierarchy.java:427 at org.aspectj.weaver.model.AsmRelationshipProvider.addRelationship AsmRelationshipProvider.java:130 at org.aspectj.weaver.bcel.BcelTypeMunger.munge BcelTypeMunger.java:124 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:441 at org.aspectj.weaver.bcel.BcelClassWeaver.weave ... end abstract interface org.springframework.beans.factory.aspectj.AbstractInterfaceDrivenDependencyInjectionAspect$ConfigurableDeserializationSupport -------------------------------- 2nd popup -------------------------------- java.lang.NullPointerException at org.aspectj.asm.internal.AspectJElementHierarchy.findCloserMatchForLineNumber AspectJElementHierarchy.java:427 at org.aspectj.weaver.model.AsmRelationshipProvider.addRelationship AsmRelationshipProvider.java:130 at org.aspectj.weaver.bcel.BcelTypeMunger.munge BcelTypeMunger.java:124 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:441 at org.aspectj.weaver.bcel.BcelClassWeaver.weave ... ibatis/domain/Banf; I IRETURN end public volatile int compareTo Object end public class de.synaix.k070_Banf.ibatis.domain.Banf -------------------------------- Output of AJDT Event trace window: -------------------------------- 11:21:34 Removed problems and tasks for project SOME_webapp 11:21:34 Builder: Tidied output folder s , removed class files and derived resources 11:21:35 Timer event: 1ms: Delete markers: SOME_webapp Finished deleting markers for SOME_webapp 11:21:38 Compiler configuration for project SOME_webapp doesn't know previous state, so assuming EVERYTHING has changed. 11:21:38 =========================================================================================== 11:21:38 Build kind = FULLBUILD 11:21:38 Project=SOME_webapp, kind of build requested=Full AspectJ compilation 11:21:38 Builder: Tidied output folder s , removed class files and derived resources 11:21:38 Timer event: 442ms: Pre compile 11:21:38 Compiler configuration for project SOME_webapp has been read by compiler. Resetting. 11:21:38 Configuration was [PROJECTSOURCEFILES_CHANGED, JAVAOPTIONS_CHANGED, ASPECTPATH_CHANGED, CLASSPATH_CHANGED, INPATH_CHANGED, NONSTANDARDOPTIONS_CHANGED, OUTJAR_CHANGED, PROJECTSOURCERESOURCES_CHANGED, OUTPUTDESTINATIONS_CHANGED, INJARS_CHANGED] 11:21:38 Resetting list of modified source files. Was null 11:21:38 Preparing for build: not going to be incremental because no successful previous full build 11:21:40 Timer event: 1252ms: Time to first compiled message 11:21:40 Timer event: 1276ms: Time to first woven message 11:21:45 AspectJ reports build successful, build was: FULL 11:21:45 AJDE Callback: finish. Was full build: true 11:21:45 Timer event: 6456ms: Total time spent in AJDE 11:21:45 Timer event: 157ms: Refresh after build 11:21:45 Types affected during build = 308 11:21:45 Crosscutting model sanity checked with no problems 11:21:45 Timer event: 0ms: Post compile 11:21:45 Timer event: 7248ms: Total time spent in AJBuilder.build 11:21:45 Timer event: 2ms: Delete markers: SOME_webapp Finished deleting markers for SOME_webapp 11:21:45 Timer event: 179ms: Create markers: SOME_webapp Finished creating markers for SOME_webapp --------------------------------</description>
    <commit commitTime="2009-03-04 17:12:43" id="2309f7b"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java</file>
    </fixedFiles>
  </bug>
  <bug id="269578" reportTime="2009-03-20 17:01:00">
    <summary>Resource deletion in source folder on full build when source and output folders are the same.</summary>
    <description>On the clean before a full aspectj build resources are removed from the output folder. This is true even when the output and the source folder are the same. In this case, the resources are deleted from the source folder! When the source and output folders are the same, resources should never be deleted.</description>
    <commit commitTime="2009-03-21 01:38:50" id="5c49c0b"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</file>
    </fixedFiles>
  </bug>
  <bug id="269840" reportTime="2009-03-24 12:07:00">
    <summary>[model] package search fails in binary aspect in same package as a source type</summary>
    <description>If type a.b.c.C is advised by an aspect a.b.c.X from the aspectpath the model search logic breaks for finding 'X' because it hits the package node for a.b.c and stops looking</description>
    <commit commitTime="2009-03-24 16:43:38" id="7a7d6f0"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java</file>
    </fixedFiles>
  </bug>
  <bug id="269867" reportTime="2009-03-24 14:16:00">
    <summary>Non synchronized access to WeakHashMap causes infinite loop</summary>
    <description>The non synchronized access from AjTypeSystem.getAjType clazz to a static instance of WeakHashMap may cause an infinite loop at start up in a multi threaded system. The thread dump shows that 32 of 33 threads of the application stuck in WeakHashMap.get Object line 355: "BundleStarterThreadQcCtrl24" prio=3 tid=0x00957c00 nid=0x39 runnable [0xd42fb000..0xd42ffa70] java.lang.Thread.State: RUNNABLE at java.util.WeakHashMap.get WeakHashMap.java:355 at org.aspectj.lang.reflect.AjTypeSystem.getAjType AjTypeSystem.java:37 at org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate.initialize Java15ReflectionBasedReferenceTypeDelegate.java:66 at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.create15Delegate ReflectionBasedReferenceTypeDelegateFactory.java:56 at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createDelegate ReflectionBasedReferenceTypeDelegateFactory.java:42 at org.aspectj.weaver.reflect.ReflectionWorld.resolveDelegate ReflectionWorld.java:111 at org.aspectj.weaver.World.resolveToReferenceType World.java:388 at org.aspectj.weaver.World.resolve World.java:279 at org.aspectj.weaver.World.resolve World.java:199 at org.aspectj.weaver.World.resolve World.java:348 at org.aspectj.weaver.reflect.ReflectionWorld.resolve ReflectionWorld.java:103 at org.aspectj.weaver.reflect.ReflectionWorld.resolve ReflectionWorld.java:93 at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.toResolvedTypeArray ReflectionBasedReferenceTypeDelegateFactory.java:214 at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createResolvedMethod ReflectionBasedReferenceTypeDelegateFactory.java:107 at org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory.createResolvedMember ReflectionBasedReferenceTypeDelegateFactory.java:98 at org.aspectj.weaver.reflect.ReflectionShadow.makeExecutionShadow ReflectionShadow.java:53 at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesExecution PointcutExpressionImpl.java:100 at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.matchesMethodExecution PointcutExpressionImpl.java:92 at org.springframework.aop.aspectj.AspectJExpressionPointcut.getShadowMatch AspectJExpressionPointcut.java:370</description>
    <commit commitTime="2009-03-24 22:04:41" id="752f895"/>
    <fixedFiles>
      <file>aspectj5rt/java5-src/org/aspectj/lang/reflect/AjTypeSystem.java</file>
    </fixedFiles>
  </bug>
  <bug id="269912" reportTime="2009-03-24 19:25:00">
    <summary>wasted time building message context when it is only used for command line builds</summary>
    <description>The context for a message is created even when AspectJ is used inside AJDT - but the context only ever gets used when printing messages to System.out. Under AJDT we ought to be able to 'switch it off'</description>
    <commit commitTime="2009-03-25 16:19:48" id="c732808"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/EclipseAdapterUtils.java</file>
    </fixedFiles>
  </bug>
  <bug id="269902" reportTime="2009-03-24 18:39:00">
    <summary>NPE in AsmRelationshipProvider.addRelationship</summary>
    <description>When doing a clean build of my project, seeing dozens, upwards of 100 of NPEs similar to the following: java.lang.NullPointerException at org.aspectj.weaver.model.AsmRelationshipProvider.addRelationship AsmRelationshipProvider.java:168 at org.aspectj.weaver.bcel.BcelTypeMunger.munge BcelTypeMunger.java:124 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:441 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:103 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1732 at org.aspectj.weaver.b ... FWIW, this is seen for Spring-managed auto-injection of beans with the @Configurable annotation. Official AJDT version is: 1.6.4.20090304172355 Version: 3.4.2 Build id: M20090211-17</description>
    <commit commitTime="2009-03-26 02:25:32" id="d5e900d"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/model/AsmRelationshipProvider.java</file>
    </fixedFiles>
  </bug>
  <bug id="270033" reportTime="2009-03-25 17:20:00">
    <summary>[incremental] Incremental compilation with aspects on an incoming classpath/aspectpath</summary>
    <description>This is something it might now be time to address. I encountered it in bug 267794 and it was rather annoying. With all the improvements to incremental it is annoying to just throw our hands in the air and do a full build if we hit an aspect on the defined classpath/aspectpath for a project. I'm not looking into inpath here, if that benefits from some of these changes - that's great - but it is not something I'm trying to fix here.</description>
    <commit commitTime="2009-03-26 03:15:47" id="b23cc1a"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</file>
    </fixedFiles>
  </bug>
  <bug id="269522" reportTime="2009-03-20 10:24:00">
    <summary>[handles] Cross reference view and markers mix up joinpoints assigned to advice</summary>
    <description>Build ID: M20090211-1700 Steps To Reproduce: I have two pieces of after advice in my aspect. In the cross reference view I see all of the joinpoints for both after advice selecting one of the after advice statements. When I select the other after advice statement I see no joinpoints. When I select the marker for either piece of after advice, I see all the joinpoints for both pieces of advice. 1. open and perform a clean compile on the attached project 2. open the xref view 3. select line 22 an note that you see 5 joinpoints should only be 3 4. select line 68 and note that you see zero joinpoints should be 2 here 5. right click the marker at line 68 and choose "advises" - note you see all 5 joinpoints 6. right click the marker at line 22 and choose "advises" - note you see all 5 joinpoints More information:</description>
    <commit commitTime="2009-03-26 18:52:57" id="6dbb5f3"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/internal/JDTLikeHandleProvider.java</file>
    </fixedFiles>
  </bug>
  <bug id="272591" reportTime="2009-04-16 18:32:00">
    <summary>[WARNING] couldn't find aspectjrt.jar on classpath</summary>
    <description>I am using the aspectj runtime jar that is in the spring source bundle repository. The have renamed their jar to match their naming conventions and it is causing the warning to occur. Their bundle is named com.springsource.org.aspectj.runtime-1.6.3.RELEASE.jar. It would be nice if this warning was not printed out in this case.</description>
    <commit commitTime="2009-04-30 20:44:56" id="1b663a9"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="274559" reportTime="2009-04-30 14:06:00">
    <summary>Compile exception when not using debug info</summary>
    <description>The following project throws a compiler exception when the project property "Add variable attributes to generated class files" is turned off.</description>
    <commit commitTime="2009-04-30 21:09:26" id="f9578da"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java</file>
    </fixedFiles>
  </bug>
  <bug id="274986" reportTime="2009-05-05 09:50:00">
    <summary>DocumentParser incorrectly caches DTD InputStream</summary>
    <description>Build ID: 1.6.3 Steps To Reproduce: Attempt to parse two aop.xml files using two DocumentParsers that are loaded by the same class loader. If the DTD is loaded from a JAR file you'll get an NPE at java.util.zip.Inflater.inflateBytes Native Method . More information: DocumentParser caches the DTD InputStream in a static final field. Many InputStreams are unusable after being closed so the same instance should not be used here. For InflaterInputStreams there seems to be a bug in the JRE that prevents the stream from reporting itself as closed when you use it again.</description>
    <commit commitTime="2009-05-05 23:45:14" id="66235e8"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="279120" reportTime="2009-06-04 11:10:00">
    <summary>NPE determining annotation target kind during weaving</summary>
    <description>reported on the list: Hi, I am using aspectj LTW aspectjweaver-1.6.1 for weaving an aspect available in another jar within my web application code. While building the jar which contains the aspect, using maven, I have JUnits which run without any problems using LTW. My aspect code looks as below @Around "execution @com.arisglobal.aglite.annotations.OperationTrail public * * .. &amp;amp;&amp;amp; this executor " public Object auditOperation ProceedingJoinPoint thisJoinPoint, Object executor { … … aspect code … } However when I deploy the application in tomcat with javaagent:aspectjweaver-1.6.1.jar option , I get a NPE which I have pasted below. Jun 4, 2009 12:06:18 PM org.aspectj.weaver.tools.Jdk14Trace error SEVERE: com/arisglobal/aglite/services/actiontrail/ActionTrailAspect java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelObjectType.getAnnotationTargetKinds BcelO bjectType.java:612 at org.aspectj.weaver.ReferenceType.getAnnotationTargetKinds ReferenceTy pe.java:265 at org.aspectj.weaver.patterns.SignaturePattern.checkForIncorrectTargetK ind SignaturePattern.java:112 at org.aspectj.weaver.patterns.SignaturePattern.checkForIncorrectTargetK ind SignaturePattern.java:94 at org.aspectj.weaver.patterns.SignaturePattern.resolveBindings Signatur ePattern.java:87 at org.aspectj.weaver.patterns.KindedPointcut.resolveBindings KindedPoin tcut.java:262 at org.aspectj.weaver.patterns.AndPointcut.resolveBindings AndPointcut.j ava:75 at org.aspectj.weaver.patterns.Pointcut.resolve Pointcut.java:196 at org.aspectj.weaver.bcel.AtAjAttributes.handleAroundAnnotation AtAjAtt ributes.java:1308 at org.aspectj.weaver.bcel.AtAjAttributes.readAj5MethodAttributes AtAjAt tributes.java:403 at org.aspectj.weaver.bcel.BcelMethod.unpackAjAttributes BcelMethod.java :189 at org.aspectj.weaver.bcel.BcelMethod.&amp;lt;init&amp;gt; BcelMethod.java:96 at org.aspectj.weaver.bcel.BcelObjectType.getDeclaredMethods BcelObjectT ype.java:264 at org.aspectj.weaver.bcel.LazyClassGen.&amp;lt;init&amp;gt; LazyClassGen.java:303 at org.aspectj.weaver.bcel.BcelObjectType.getLazyClassGen BcelObjectType .java:524 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1728 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1 696 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:145 8 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1244 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor. java:423 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.jav a:286 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:95 at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform C lassPreProcessorAgentAdapter.java:52 at sun.instrument.TransformerManager.transform TransformerManager.java:1 22 at sun.instrument.InstrumentationImpl.transform InstrumentationImpl.java :155 at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:620 I also tried using aspectjweaver-1.6.4 version however got the same error.</description>
    <commit commitTime="2009-06-04 15:43:11" id="3417cbe"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
    </fixedFiles>
  </bug>
  <bug id="280783" reportTime="2009-06-18 10:48:00">
    <summary>JavaDocRunner fails on System.setSecurityManager in Netbeans</summary>
    <description>Attempting to use the ajdoc ant task in Netbeans 6.7. The JavaDocRunner attempts to set the SecurityManager and this is prevented by Netbeans. Below is the ant stacktrace printed to the Netbeans output window. I can run the ant task from the command line with no errors. Only in the context of Netbeans does it fail. I think the JavaDocRunner should run with whatever SecurityManager is in place and allow errors from executing javadoc to occur. Attached is a patch file removing the anonymous SecurityManager and calls to System.setSecurityManager . init: &amp;gt; Calling ajc... &amp;gt; Building signature files... &amp;gt; Calling javadoc... An internal error occured in ajdoc If this has not already been logged as a bug raised please raise a new AspectJ bug at https://bugs.eclipse.org/bugs including the text below. To make the bug a priority, please also include a test program that can reproduce this problem. java.lang.SecurityException java.lang.SecurityException at org.netbeans.TopSecurityManager.checkSetSecurityManager TopSecurityManager.java:431 at org.netbeans.TopSecurityManager.checkPermission TopSecurityManager.java:365 at java.lang.System.setSecurityManager0 System.java:273 at java.lang.System.setSecurityManager System.java:264 at org.aspectj.tools.ajdoc.JavadocRunner.callJavadoc JavadocRunner.java:43 at org.aspectj.tools.ajdoc.Main.callJavadoc Main.java:277 at org.aspectj.tools.ajdoc.Main.main Main.java:156 at org.aspectj.tools.ant.taskdefs.Ajdoc.compile Ajdoc.java:710 at org.aspectj.tools.ant.taskdefs.Ajdoc.execute Ajdoc.java:697 at org.apache.tools.ant.UnknownElement.execute UnknownElement.java:288 at sun.reflect.GeneratedMethodAccessor131.invoke Unknown Source at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.apache.tools.ant.dispatch.DispatchUtils.execute DispatchUtils.java:106 at org.apache.tools.ant.Task.perform Task.java:348 at org.apache.tools.ant.Target.execute Target.java:357 at org.apache.tools.ant.Target.performTasks Target.java:385 at org.apache.tools.ant.Project.executeSortedTargets Project.java:1337 at org.apache.tools.ant.Project.executeTarget Project.java:1306 at org.apache.tools.ant.helper.DefaultExecutor.executeTargets DefaultExecutor.java:41 at org.apache.tools.ant.Project.executeTargets Project.java:1189 at org.apache.tools.ant.module.bridge.impl.BridgeImpl.run BridgeImpl.java:278 at org.apache.tools.ant.module.run.TargetExecutor.run TargetExecutor.java:497 at org.netbeans.core.execution.RunClassThread.run RunClassThread.java:151 org.netbeans.core.execution.ExitSecurityException: Exit from within execution engine, normal at org.netbeans.core.execution.SecMan.checkExitImpl SecMan.java:85 at org.netbeans.core.execution.SecMan$PrivilegedCheck.run SecMan.java:160 at java.security.AccessController.doPrivileged Native Method at org.netbeans.core.execution.SecMan$PrivilegedCheck.check SecMan.java:175 at org.netbeans.core.execution.SecMan$PrivilegedCheck.checkExit SecMan.java:170 at org.netbeans.core.execution.SecMan.checkExit SecMan.java:69 at org.netbeans.TopSecurityManager.checkExit TopSecurityManager.java:149 at java.lang.Runtime.exit Runtime.java:88 at java.lang.System.exit System.java:906 at org.aspectj.tools.ajdoc.Main.exit Main.java:765 at org.aspectj.tools.ajdoc.Main.main Main.java:163 at org.aspectj.tools.ant.taskdefs.Ajdoc.compile Ajdoc.java:710 at org.aspectj.tools.ant.taskdefs.Ajdoc.execute Ajdoc.java:697 at org.apache.tools.ant.UnknownElement.execute UnknownElement.java:288 at sun.reflect.GeneratedMethodAccessor131.invoke Unknown Source at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.apache.tools.ant.dispatch.DispatchUtils.execute DispatchUtils.java:106 at org.apache.tools.ant.Task.perform Task.java:348 at org.apache.tools.ant.Target.execute Target.java:357 at org.apache.tools.ant.Target.performTasks Target.java:385 at org.apache.tools.ant.Project.executeSortedTargets Project.java:1337 at org.apache.tools.ant.Project.executeTarget Project.java:1306 at org.apache.tools.ant.helper.DefaultExecutor.executeTargets DefaultExecutor.java:41 at org.apache.tools.ant.Project.executeTargets Project.java:1189 at org.apache.tools.ant.module.bridge.impl.BridgeImpl.run BridgeImpl.java:278 at org.apache.tools.ant.module.run.TargetExecutor.run TargetExecutor.java:497 at org.netbeans.core.execution.RunClassThread.run RunClassThread.java:151 BUILD FAILED total time: 3 seconds</description>
    <commit commitTime="2009-06-18 18:37:30" id="59d5c3b"/>
    <fixedFiles>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/JavadocRunner.java</file>
    </fixedFiles>
  </bug>
  <bug id="285172" reportTime="2009-07-30 11:00:00">
    <summary>Sometimes when load-time weaving there will be two ReferenceType objects for the same type</summary>
    <description>Seen by Ramnivas. A pointcut uses an exact type name for an annotation execution * @Controller *..* .* .. Resolving this pointcut causes us to construct a ReferenceType for 'Controller'. Then we attempt to populate it by loading the class implementation. This recurses back into the weaver as Controller is loaded and an attempt is made to weave it. This takes a second route through the weaver to build a referencetype again and this second referencetype is cached in the world. When we unwind, we continue building the original referencetype and are left with one in the cache and the one resolved for the pointcut. Due to the use of == for comparison, we fail to match on join points later because they will use the ReferenceType from the cache.</description>
    <commit commitTime="2009-07-30 15:29:40" id="dd7d879"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/World.java</file>
    </fixedFiles>
  </bug>
  <bug id="287315" reportTime="2009-08-21 11:30:00">
    <summary>NPE using declare @type</summary>
    <description>reported by Ramnivas: java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelObjectType.hasAnnotation BcelObjectType.java:558 at org.aspectj.weaver.ReferenceType.hasAnnotation ReferenceType.java:161 at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches ExactAnnotationTypePattern.java:101 at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches ExactAnnotationTypePattern.java:94 at org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern.matchesExactly TypePattern.java:513 at org.aspectj.weaver.patterns.TypePattern.matchesStatically TypePattern.java:129 at org.aspectj.weaver.patterns.DeclareAnnotation.matches DeclareAnnotation.java:269 at org.aspectj.weaver.bcel.BcelWeaver.applyDeclareAtType BcelWeaver.java:1590</description>
    <commit commitTime="2009-08-24 18:07:09" id="b664969"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
    </fixedFiles>
  </bug>
  <bug id="288505" reportTime="2009-09-03 12:17:00">
    <summary>failure to close inputstream</summary>
    <description/>
    <commit commitTime="2009-09-03 16:21:37" id="3d3d03b"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/Lint.java</file>
    </fixedFiles>
  </bug>
  <bug id="288198" reportTime="2009-08-31 21:09:00">
    <summary>LangUtils JVM version detection cannot handle Java 7</summary>
    <description>User-Agent: Mozilla/5.0 Macintosh; U; Intel Mac OS X 10.5; en-GB; rv:1.9.1.2 Gecko/20090729 Firefox/3.5.2 Build Identifier: 1.6.4 The JVM detection in LangUtils is currently unable to handle Java7, whilst this is naturally an unreleased version of the JVM, the fix is trivial. Reproducible: Always Steps to Reproduce: Attempt to use the LangUtils java version support on java7</description>
    <commit commitTime="2009-09-04 16:36:07" id="b29f839"/>
    <fixedFiles>
      <file>util/src/org/aspectj/util/LangUtil.java</file>
    </fixedFiles>
  </bug>
  <bug id="289816" reportTime="2009-09-18 04:23:00">
    <summary>Potentially unclosed stream in org.aspectj.weaver.bcel.BcelWorld</summary>
    <description>Created attachment 147526 [details] Eclipse workspace patch that closes the stream correctly In method lookupJavaClass , one has to close a stream used by ClassParser. This should be done in a finally block, since parse may fail and throw an IOException. Right now, the stream is left open in that case. A path to correctly close the stream is attached.</description>
    <commit commitTime="2009-09-18 23:05:59" id="67ffda8"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
    </fixedFiles>
  </bug>
  <bug id="289818" reportTime="2009-09-18 04:31:00">
    <summary>Unclosed stream in org.aspectj.weaver.bcel.ExtensibleURLClassLoader</summary>
    <description>Created attachment 147527 [details] Eclipse workspace patch that closes the stream The method getBytes gets a fresh stream from ClassFile and should close it after using it. Right now, the stream is left open. A patch is attached that closes the stream.</description>
    <commit commitTime="2009-09-18 23:07:29" id="4d200d1"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/ExtensibleURLClassLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="279298" reportTime="2009-06-05 14:02:00">
    <summary>AspectJ LTW with Cobertura</summary>
    <description>We are using AspectJ LTW along with Cobertura for code coverage. Class files are weaved just fine if they are not instrumented with Cobertura, but when AspectJ attempts to weave the same aspects into Cobertura-instrumented copies of the same class files, weaving fails with the following error: &amp;gt;&amp;gt; error at com\mycompany\MyAspect.java::0 Cannot read debug info for @Aspect to handle formal binding in pointcuts please compile with 'javac -g' or '&amp;lt;javac debug='true'.../&amp;gt;' in Ant The attached project demonstrates the problem. It contains one simple aspect, a target class, and a unit test for the aspect. To see the problem, run the "unittest" target in the included Ant build file. This will run the single unit test twice. In the first pass, the test is run with javac-generated i.e. uninstrumented class files. The aspect is correctly woven and the test passes. In the second pass, the test is run with Cobertura-instrumented class files. There is an error during LTW, and the test fails.</description>
    <commit commitTime="2009-10-22 23:26:14" id="35a9649"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</file>
    </fixedFiles>
  </bug>
  <bug id="293351" reportTime="2009-10-26 14:19:00">
    <summary>RuntimeException weaving roo app with advice based on execution pointcut</summary>
    <description>java.lang.RuntimeException at org.aspectj.weaver.ResolvedType.getAnnotations ResolvedType.java:718 at org.aspectj.weaver.AbstractAnnotationAJ.retrieveAnnotationOnAnnotation AbstractAnnotationAJ.java:123 at org.aspectj.weaver.AbstractAnnotationAJ.ensureAtTargetInitialized AbstractAnnotationAJ.java:85 at org.aspectj.weaver.AbstractAnnotationAJ.specifiesTarget AbstractAnnotationAJ.java:115 at org.aspectj.weaver.bcel.BcelWeaver.verifyTa ... .eclipse.core.internal.jobs.Worker.run Worker.java:55 Compile error: RuntimeException thrown: ResolvedType.getAnnotations should never be called</description>
    <commit commitTime="2009-10-27 14:04:12" id="a23c7e4"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/MissingResolvedTypeWithKnownSignature.java</file>
    </fixedFiles>
  </bug>
  <bug id="293457" reportTime="2009-10-27 11:24:00">
    <summary>NPE on multiple declare @methods</summary>
    <description>raised on the list: &amp;gt; java.lang.NullPointerException &amp;gt; at org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.visit AsmHierarchyBuilder.java:548 &amp;gt; at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse MethodDeclaration.java:214 &amp;gt; at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse TypeDeclaration.java:1246 &amp;gt; at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse Compilatio ... oBuildJob.run AutoBuildJob.java:238 &amp;gt; at org.eclipse.core.internal.jobs.Worker.run Worker.java:55 &amp;gt; &amp;gt; Compile error: NullPointerException thrown: null &amp;gt; &amp;gt; &amp;gt; Here's the aspect I'm using: &amp;gt; &amp;gt; package com.citi.gdos.smart.applib.service.cache; &amp;gt; &amp;gt; import org.springmodules.cache.annotations.Cacheable; &amp;gt; &amp;gt; public aspect CachingIntroduction { &amp;gt; &amp;gt; declare @method: public * *..I*Dao+.set* .. : @Setter; &amp;gt; declare @method: !@Setter public * *..I*Dao+.* .. : &amp;gt; @Cacheable modelId="fooModel" ; &amp;gt; &amp;gt; }</description>
    <commit commitTime="2009-11-19 17:01:09" id="dc53b77"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc167/Ajc167Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="120375" reportTime="2005-12-12 10:43:00">
    <summary>Support Load-Time Weaving and HotSwap</summary>
    <description>LTW can be used in a development environment when the JVM is run under the debugger. If a class is modified it may be recompiled, submitted to the JVM being debugged and "HotSwapped" see bug 117854 . The AspectJ 5 javaagent used for LTW is made aware of this through the JVMTI http://java.sun.com/j2se/1.5.0/docs/api/java/lang/instrument/ClassFileTransformer.html but current implementation throws an exception. There may be a limited number of transformations we could safely perfrom especially if the aspects involved only implement dynamic cross-cutting.</description>
    <commit commitTime="2009-11-19 18:33:01" id="19355dd"/>
    <fixedFiles>
      <file>loadtime5/java5-src/org/aspectj/weaver/loadtime/ClassPreProcessorAgentAdapter.java</file>
    </fixedFiles>
  </bug>
  <bug id="297013" reportTime="2009-12-06 04:06:00">
    <summary>Unclosed stream in AjAttribute</summary>
    <description>Created attachment 153879 [details] Patch to close the stream at the end of the method. The getAllBytes method of org.aspectj.weaver.AjAttribute uses a DataOutputStream to write into a ByteArrayOutputStream. However, the stream is neither closed nor flushed at the end of the method, so that its not sure that all bytes are actually written it depends on the implemention of DataOutputStream . To fix it, one should add a call to close or flush . A patch is attached.</description>
    <commit commitTime="2009-12-16 18:10:04" id="28fb861"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/AjAttribute.java</file>
    </fixedFiles>
  </bug>
  <bug id="298786" reportTime="2010-01-04 13:27:00">
    <summary>suspected problem with handling of multiple aop.xml files</summary>
    <description/>
    <commit commitTime="2010-01-05 00:44:36" id="a968890"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="305788" reportTime="2010-03-13 20:52:00">
    <summary>Exception was thrown when I saved a file in Eclipse</summary>
    <description>Build Identifier: SpringSource STS 2.3.1 java.util.ConcurrentModificationException at java.util.HashMap$HashIterator.nextEntry HashMap.java:793 at java.util.HashMap$KeyIterator.next HashMap.java:828 at org.aspectj.asm.internal.AspectJElementHierarchy.updateHandleMap AspectJElementHierarchy.java:594 at org.aspectj.asm.AsmManager.removeStructureModelForFiles AsmManager.java:564 at org.aspectj.asm.AsmManager.processDelta AsmManager.java:639 at org.aspectj.ajdt.internal.core ... un AutoBuildJob.java:238 at org.eclipse.core.internal.jobs.Worker.run Worker.java:55 Compile error: ConcurrentModificationException thrown: null Reproducible: Always Steps to Reproduce: 1.Generate an abstract class using Spring roo 2. Edit that file within Eclipse/STS to add JPA annotations 3.Click on the save icon to save the file - Exceptions box pops up</description>
    <commit commitTime="2010-03-23 14:26:02" id="749078d"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java</file>
    </fixedFiles>
  </bug>
  <bug id="308093" reportTime="2010-04-05 14:16:00">
    <summary>incremental build problem when mixing up ITDs and declare parents</summary>
    <description>reported by Rod Johnson. He had a sophisticated aspect doing a mix of ITDs and declare parents. On doing an incremental build he was receiving errors that looked like the declare parents hadn't applied on the secondary build. What was actually happening is that when a class file was brought in as a BinaryTypeBinding, the existing World representation wasn't being cleaned up properly. Without the cleanup the declare parents thought it was still in effect, but it was not. With proper cleanup the declare parents applies on the secondary build and all is well. Change is in AjLookupEnviroment.weaveInterTypeDeclarations where the onType.clearInterTypeMungers must be paired with an onType.ensureConsistent call.</description>
    <commit commitTime="2010-04-05 18:25:10" id="4b43dc6"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
    </fixedFiles>
  </bug>
  <bug id="291206" reportTime="2009-10-02 11:01:11">
    <summary>Allow declare error &amp; declare warning to support type expressions</summary>
    <description/>
    <commit commitTime="2010-04-06 07:26:40" id="9241e2e"/>
    <fixedFiles>
      <file>tests/bugs169/pr291206/One.java</file>
      <file>tests/bugs169/pr291206/Three.java</file>
      <file>tests/bugs169/pr291206/Two.java</file>
    </fixedFiles>
  </bug>
  <bug id="308386" reportTime="2010-04-07 15:15:00">
    <summary>NPE when hasfield evaluating with annotations and there is an unresolved import</summary>
    <description>hasfield/hasmethod can cause early matching - before the weaving process kicks in properly. For a 'normal' compile error, like an unresolvable import, the error is put out before the weaving process kicks off. However hasfield/hasmethod happening early causes an NPE to occur before the error is put out. A guard for the NPE which occurs in EclipseResolvedMember.getAnnotationTypes addresses this problem and allows the real error to come out.</description>
    <commit commitTime="2010-04-07 19:24:04" id="94d0a4e"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseResolvedMember.java</file>
    </fixedFiles>
  </bug>
  <bug id="309402" reportTime="2010-04-15 19:09:00">
    <summary>Changes to Main.java</summary>
    <description>In order to get the AJDT ant integration working, we need a small change to Main.java. We need to be able to pass in a custom org.aspectj.bridge.ICommand object. Currently, the ICommand object is created via reflection. Here is my suggestion: 1. augment the ICommand local variable to being a field 2. add a setter for this field 3. change this: ICommand command = ReflectionFactory.makeCommand commandName, holder ; to this: if command != null command = ReflectionFactory.makeCommand commandName, holder ;</description>
    <commit commitTime="2010-04-16 15:18:11" id="b21eb05"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/tools/ajc/Main.java</file>
    </fixedFiles>
  </bug>
  <bug id="310704" reportTime="2010-04-27 15:59:00">
    <summary>Bug in ProgramElement.getCorrespondingType</summary>
    <description>Here is the code for the method: public String getCorrespondingType boolean getFullyQualifiedType { String returnType = String kvpairs.get "returnType" ; if returnType == null returnType = ""; if getFullyQualifiedType { return returnType; } int index = returnType.lastIndexOf "." ; if index != -1 { return returnType.substring index ; } return returnType; } the line: return returnType.substring index ; should be using 'index+1'</description>
    <commit commitTime="2010-04-28 01:05:35" id="a502da8"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/internal/ProgramElement.java</file>
    </fixedFiles>
  </bug>
  <bug id="310144" reportTime="2010-04-22 12:18:00">
    <summary>java.lang.RuntimeException at AsmManager.java:1143</summary>
    <description>Build Identifier: Eclipse AspectJ Development Tools Version: 2.0.3.e35x-20100419-1200 AspectJ version: 1.6.9.20100416110000 java.lang.RuntimeException at org.aspectj.asm.AsmManager.removeSingleNode AsmManager.java:1143 at org.aspectj.asm.AsmManager.removeRelationshipsTargettingThisType AsmManager.java:798 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1173 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:455 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter. ... for handle =xstm/stm&amp;lt;com.argilsoft.xstm.core{TKeyed.java[TKeyed[Visitor?field-set java.util.ArrayList com.argilsoft.xstm.core.Visitor._continueStack Reproducible: Sometimes Steps to Reproduce: Random exception popup in Eclipse</description>
    <commit commitTime="2010-04-29 19:54:09" id="728ecb8"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/AsmManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="311910" reportTime="2010-05-06 11:22:00">
    <summary>AspectJ internal Compiler Error</summary>
    <description>Stack Trace: java.lang.NullPointerException at org.aspectj.weaver.model.AsmRelationshipProvider.createSourceLocation AsmRelationshipProvider.java:303 at org.aspectj.weaver.model.AsmRelationshipProvider.addPointcuts AsmRelationshipProvider.java:580 at org.aspectj.weaver.model.AsmRelationshipProvider.createHierarchyForBinaryAspect AsmRelationshipProvider.java:562 at org.aspectj.weaver.model.AsmRelationshipProvider.addAdvisedRelationship AsmRelations ... ARETURN end public Object run Object[] end public class com.cerner.isis.biz.services.asclepius.patient.PatientManagerImplTest$AjcClosure3 Happening when weaving a jar with a aspect jar.</description>
    <commit commitTime="2010-05-06 16:34:47" id="3be69a2"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/model/AsmRelationshipProvider.java</file>
    </fixedFiles>
  </bug>
  <bug id="314365" reportTime="2010-05-25 17:32:00">
    <summary>pointcut rewriter can have issues for large hashcode values</summary>
    <description>AJDT uses a pointcut like this: persingleton org.eclipse.ajdt.internal.ui.ras.UIFFDC &amp;amp;&amp;amp; handler java.lang.Throwable+ &amp;amp;&amp;amp; args arg1 &amp;amp;&amp;amp; within org.eclipse.ajdt..* &amp;amp;&amp;amp; !within org.eclipse.ajdt.internal.ui.lazystart..* &amp;amp;&amp;amp; !within org.eclipse.ajdt.internal.ui.dialogs.OpenTypeSelectionDialog2 &amp;amp;&amp;amp; ! within org.eclipse.ajdt.internal.ui.editor.AspectJBreakpointRulerAction &amp;amp;&amp;amp; handler org.eclipse.jface.text.BadLocationException &amp;amp;&amp;amp; ! within org.eclipse.ajdt.core.ras.FFDC+ || handler org.eclipse.core.runtime.OperationCanceledException &amp;amp;&amp;amp; !this java.lang.Object After the pointcut rewriter has chewed on it, it is reduced to a normal form. This is meant to be a stable form such that further rewrites of it would not change it. This turned out not to be the case. The hashcodes for some of the components were quite large and manifested as negative integers. The arithmetic in the comparator for the elements would have a problem and give unhelpful responses. For example, if the elements were C,B,A it might rewrite them to A,B,C but on a subsequent rewrite it would realise that C was less than A, giving B,C,A. Whether it went wrong was dependent on the order in which the elements were collected by the rewriter. This is now fixed. It impacts incremental compilation sometimes as two pointcuts that should be identical look different because one has been through the rewritter more times than the other...</description>
    <commit commitTime="2010-05-25 23:03:13" id="1e28b92"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/PointcutEvaluationExpenseComparator.java</file>
      <file>org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/PointcutRewriterTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="314130" reportTime="2010-05-24 11:53:00">
    <summary>[plan] [ltw] [hcr] LTW, Reweaving and Hot Code Replace changes reflected every two saves of files</summary>
    <description>Build Identifier: AspectJ 1.6.9.M2 Eclipse 3.5.1 Build ID: 20090920-1017 A full description of the bug is in the AspectJ-Users mail list: http://dev.eclipse.org/mhonarc/lists/aspectj-users/msg12114.html While debugging if I change the content of a method ex. the text of a System.out and save the file, it wouldn't reflected. But if I save the save file again, this time the changes are reflected. And it repeats on cycles of two saves. The rare is that when I save and the changes are not reflected, in log appears the next two lines and when I save the file and changes are reflected this lines are not showed: [AppClassLoader@2bbd86] info processing reweavable type test.weaved.Test: test\weaved\Test.java [AppClassLoader@2bbd86] info successfully verified type test.aspects.TestAspect exists. Originates from test\aspects\TestAspect.java This lines comes from the method processReweavableStateIfPresent String, BcelObjectType on the class org.aspectj.weaver.bcel.BcelWeaver Setting -Xset:overWeaving=true was worst because every time that I save the file that is aspected I get this message from Eclipse in a popup: "Hot code replace failed - Scheme change not implemented" and the changes are never reflected, neither in the first save nor in the second save. My environment is: Windows XP SP3 32 bits Sun Java 1.6.0 Update 19 JDK Eclipse 3.5.1 Build ID: 20090920-1017 AspectJ 1.6.9 M2 the same occurs with 1.6.8 Project: A clean new basis java project that only has this test and AspectJ Weaver options: -Xreweavable -verbose -showWeaveInfo -debug and also -Xset:overWeaving=true in some tests Using: -javaagent:aspectjweaver-1.6.9.M2.jar I will attach the test project that I used to isolate and reproduce this bug. Reproducible: Always Steps to Reproduce: 1. Import the attached project into Eclipse 2. Run the project with the Main.launch that is in the project root. 3. Modify the method print in the class test.weaved.Test ex. uncomment a line 4. See the console log. The changes are not reflected in the behavior. 5. Modify again the method print in the class test.weaved.Test ex. uncomment another line 6. See the console log. Now the changes are reflected in the behavior. 7. The same occurs whatever you change obviously with the limits of the Hot Code Replace imposed by the JDK</description>
    <commit commitTime="2010-05-26 22:31:02" id="cf0ee0c"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="314766" reportTime="2010-05-27 15:47:00">
    <summary>NPE when using aop.xml for compile time config</summary>
    <description>Reported on the list: java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelWorld.isAspectIncluded BcelWorld.java:942 at org.aspectj.weaver.ShadowMunger.match ShadowMunger.java:80 at org.aspectj.weaver.Advice.match Advice.java:106 at org.aspectj.weaver.bcel.BcelAdvice.match BcelAdvice.java:149 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:3108 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2562</description>
    <commit commitTime="2010-05-27 20:11:51" id="0e5ecd3"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/Advice.java</file>
    </fixedFiles>
  </bug>
  <bug id="317139" reportTime="2010-06-17 01:50:00">
    <summary>NullPointerException during weaving</summary>
    <description>Created attachment 172090 [details] AspectJ compile log Using the Maven plugin to compile aspects into my code I get the following exception: … ---- Exception Information --- java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelObjectType.ensureGenericSignatureUnpacked BcelObjectType.java:823 at org.aspectj.weaver.bcel.BcelObjectType.getSuperclass BcelObjectType.java:228 at org.aspectj.weaver.ReferenceType.getSuperclass ReferenceType.java:905 at org.aspectj.weaver.bcel.AtAjAttributes.handleAspectAnnotation AtAjAttributes.java:490 at org.aspectj.weaver.bcel.AtAjAttributes.readAj5ClassAttributes AtAjAttributes.java:234 … I have attached the complete log as attachment.</description>
    <commit commitTime="2010-06-29 00:07:59" id="92a52a2"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
    </fixedFiles>
  </bug>
  <bug id="317743" reportTime="2010-06-23 15:28:00">
    <summary>import handling and type lookup issues</summary>
    <description>Raised by Peter Melnikov on the mailing list. Two problems: 1 the binding scope being used for annotation style aspects accumulates lots of duplicate import prefixes in the SimpleScope object. 2 SimpleScope.lookupType tries the prefixes even if the type is already fully qualified. The combination of these issues causes a terrible mess. Lots of class lookup failures. Since the type cannot be 'partially qualified' it is silly to use the prefixes if the type is fully qualified.</description>
    <commit commitTime="2010-06-29 00:12:05" id="767bb85"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/BindingScope.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/IScope.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/SimpleScope.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildTypePattern.java</file>
      <file>org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/PatternsTests.java</file>
      <file>org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/TypePatternTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="318397" reportTime="2010-06-29 20:15:00">
    <summary>Caching in EclipseSourceType is too aggressive</summary>
    <description>In fixing a recent Roo related issue where annotations are resolved too early, before declare parents are done a cache was introduced into EclipseSourceType see ensureAnnotationTypesResolved . The cache needs to be cleared if the set of annotation declarations changes - this can occur even after parsing because declare annotation can change them.</description>
    <commit commitTime="2010-06-30 00:20:30" id="fe049ea"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java</file>
    </fixedFiles>
  </bug>
  <bug id="321641" reportTime="2010-08-03 14:05:00">
    <summary>No way to exclude Proxool classes although excluded from AOP. Causing Veryfy error.</summary>
    <description>Build Identifier: 20100218-1602 For aspectJ 1.6.7 the setup works, however exactly the same setup but changing the aspectJ version to 1.6.8 or 1.6.9 derive to the same error: a piece of code excluded from the aop.xml is woven causing a Verify Error. We are using Proxool, proxy setup which in fact uses CGLIB to create a EnhancerProxy class. In order to avoid VerifyError exceptions the Proxool classes are excluded from aop.xml exactly in the same way the CGLIB workarround is commented in the aspectJ FAQ: &amp;lt;exclude within="*..*Proxool*"/&amp;gt; This is the error we got when we upgrade our 1.6.7 aspejctweaver.jar to 1.6.8. The same is got when using 1.6.9: jvm 3 | 2010/08/03 16:42:53 | java.lang.VerifyError: class: oracle/jdbc/internal/OracleConnection$$EnhancerByProxool$$7f6320a8, method: getTdoCState signature: Ljava/lang/String;Ljava/lang/String; J Inconsistent stack height 1 != 0 jvm 3 | 2010/08/03 16:42:53 | at java.lang.Class.getDeclaredMethods0 Native Method jvm 3 | 2010/08/03 16:42:53 | at java.lang.Class.privateGetDeclaredMethods Class.java:2427 jvm 3 | 2010/08/03 16:42:53 | at java.lang.Class.getDeclaredMethod Class.java:1935 jvm 3 | 2010/08/03 16:42:53 | at org.logicalcobwebs.cglib.proxy.Enhancer.getCallbacksSetter Enhancer.java:627 jvm 3 | 2010/08/03 16:42:53 | at org.logicalcobwebs.cglib.proxy.Enhancer.setCallbacksHelper Enhancer.java:615 jvm 3 | 2010/08/03 16:42:53 | at org.logicalcobwebs.cglib.proxy.Enhancer.setThreadCallbacks Enhancer.java:609 jvm 3 | 2010/08/03 16:42:53 | at org.logicalcobwebs.cglib.proxy.Enhancer.createUsingReflection Enhancer.java:631 jvm 3 | 2010/08/03 16:42:53 | at org.logicalcobwebs.cglib.proxy.Enhancer.firstInstance Enhancer.java:538 jvm 3 | 2010/08/03 16:42:53 | at org.logicalcobwebs.cglib.core.AbstractClassGenerator.create AbstractClassGenerator.java:225 jvm 3 | 2010/08/03 16:42:53 | at org.logicalcobwebs.cglib.proxy.Enhancer.createHelper Enhancer.java:377 jvm 3 | 2010/08/03 16:42:53 | at org.logicalcobwebs.cglib.proxy.Enhancer.create Enhancer.java:285 .... As far as the Verify Error is got while deploying one of the applications that run on the serve we are no able to use the new versions of aspectJ because the application is not properly started up. Thank you very much in advance, Best regards. Reproducible: Always Steps to Reproduce: 1.Exclude Proxool classes from aop.xml using aspectj 1.6.7. It works 2.Upgrade to 1.6.8: it does not work. 3.Upgrade to 1.6.9: it does not work.</description>
    <commit commitTime="2010-08-10 15:11:54" id="85fd25d"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
      <file>loadtime/testsrc/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptorTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="322832" reportTime="2010-08-16 15:33:00">
    <summary>early field resolution leading to problems for ITDs when declare parents in use</summary>
    <description>I have a type that is being used where a generic is being expected. That generic specifies an upper bound. The type only obeys the upper bound once a declare parents has applied to it. I have an intertype declaration a field . When the ITD is applied we do some work to see if it clashes with existing fields. This causes existing fields to be resolved. If this resolution triggers a bounds check for the declare parents affected type before the declare parents has applied, a problem will be raised. Basically if the target of the declare is processed before the intertype then we are ok, but that is luck based. We should do the declare parents first and declare annotation and then do intertype declarations since they may trigger this extra resolution .</description>
    <commit commitTime="2010-08-16 19:52:25" id="16adee6"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
    </fixedFiles>
  </bug>
  <bug id="322039" reportTime="2010-08-06 19:47:00">
    <summary>Fully qualified ITD has incorrect handle identifier</summary>
    <description>In the following aspect: public aspect Aspect { public void q2.ThisClass.something2 {} } In aspectJ, the ITD has the following handle identifier notice that the ITD name is not fully qualified : =AspectJ Project/src2&amp;lt;p*Aspect.aj'Aspect ThisClass.something2 However, it should be with fully qualified name : =AspectJ Project/src2&amp;lt;p*Aspect.aj'Aspect q2.ThisClass.something2 This means that fully qualified ITDs cannot be navigated to or searched. I'm a little surprised that this doesn't work because I thought I had tests for it...</description>
    <commit commitTime="2010-08-18 17:29:04" id="6b35ea4"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="323417" reportTime="2010-08-23 13:44:00">
    <summary>Sometimes StackOverflow is got while weaving</summary>
    <description>Build Identifier: 1.6.10 While weaving LifeRay 6.0.5 over tomcat 6.0.26 sometimes the next exceptions appear: java.lang.StackOverflowError at java.lang.String.indexOf String.java:1521 at org.aspectj.weaver.TypeFactory.createTypeFromSignature TypeFactory.java:199 at org.aspectj.weaver.UnresolvedType.forSignature UnresolvedType.java:375 at org.aspectj.weaver.UnresolvedType.getRawType UnresolvedType.java:533 at org.aspectj.weaver.ResolvedType.getRawType ResolvedType.java:2400 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:430 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:399 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:430 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:399 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:430 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:399 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:430 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:399 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:430 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:399 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:430 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:399 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:430 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:399 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:430 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:399 ... Reproducible: Sometimes</description>
    <commit commitTime="2010-08-25 01:46:42" id="f631ad6"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/World.java</file>
    </fixedFiles>
  </bug>
  <bug id="323634" reportTime="2010-08-25 12:40:00">
    <summary>NPE parameterizing perclause</summary>
    <description>java.lang.NullPointerException at org.aspectj.weaver.ReferenceType.getPerClause ReferenceType.java:823 at org.aspectj.weaver.patterns.PerFromSuper.lookupConcretePerClause PerFromSuper.java:82 at org.aspectj.weaver.patterns.PerFromSuper.concretize PerFromSuper.java:61 at org.aspectj.weaver.CrosscuttingMembers.setPerClause CrosscuttingMembers.java:512 at org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers ResolvedType.java:748 ... oBuildJob.run AutoBuildJob.java:242 at org.eclipse.core.internal.jobs.Worker.run Worker.java:54</description>
    <commit commitTime="2010-08-25 16:41:33" id="ce16a06"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java</file>
    </fixedFiles>
  </bug>
  <bug id="320468" reportTime="2010-07-21 04:22:00">
    <summary>ModifiersPattern.getModifierFlag is not thread safe</summary>
    <description>Build Identifier: org.aspectj.weaver_1.6.0.20080423100000.jar ModifiersPattern.getModifierFlag is a non-synchronized static method using the static Map modifierFlags. This can lead to a ConcurrentModificationException when this code is executed in a multi-threaded environment. A stack trace showing the erroneous behavior is appended at the end of this bug report. In our case multithreading is introduced by using Spring DM. This leads to many application contexts being initialized in parallel. Each of them can contain pointcut expression, which are processed in independent threads. Spring AOP enters the "AspectJ world" calling PointcutParser.parsePointcutExpression . Since there is no guarantee that a ConcurrentModificationException is thrown it is also possible that concurrent read/write accesses to the modifierFlags map are not recognized and incorrect values are used. org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactoryProxy': Post-processing of the FactoryBean's object failed; nested exception is java.util.ConcurrentModificationException: concurrent access to HashMap attempted by Thread[SpringOsgiExtenderThread-43,5,spring-osgi-extender[6dee6dee]-threads] at org.springframework.beans.factory.support.FactoryBeanRegistrySupport$1.run FactoryBeanRegistrySupport.java:142 at java.security.AccessController.doPrivileged AccessController.java:219 at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean FactoryBeanRegistrySupport.java:116 at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean FactoryBeanRegistrySupport.java:91 at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance AbstractBeanFactory.java:1288 at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean AbstractBeanFactory.java:217 at org.springframework.beans.factory.support.AbstractBeanFactory.getBean AbstractBeanFactory.java:185 at org.springframework.beans.factory.support.AbstractBeanFactory.getBean AbstractBeanFactory.java:164 at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons DefaultListableBeanFactory.java:425 at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization AbstractApplicationContext.java:728 at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.access$1600 AbstractDelegatedExecutionApplicationContext.java:69 at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run AbstractDelegatedExecutionApplicationContext.java:355 at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL PrivilegedUtils.java:85 at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh AbstractDelegatedExecutionApplicationContext.java:320 at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run DependencyWaiterApplicationContextExecutor.java:136 at java.lang.Thread.run Thread.java:811 Caused by: java.util.ConcurrentModificationException: concurrent access to HashMap attempted by Thread[SpringOsgiExtenderThread-43,5,spring-osgi-extender[6dee6dee]-threads] at java.util.HashMap.onEntry HashMap.java:214 at java.util.HashMap.transfer HashMap.java:686 at java.util.HashMap.resize HashMap.java:676 at java.util.HashMap.addEntry HashMap.java:1049 at java.util.HashMap.put HashMap.java:561 at org.aspectj.weaver.patterns.ModifiersPattern.getModifierFlag ModifiersPattern.java:87 at org.aspectj.weaver.patterns.PatternParser.parseModifiersPattern PatternParser.java:1169 at org.aspectj.weaver.patterns.PatternParser.parseMethodOrConstructorSignaturePattern PatternParser.java:1248 at org.aspectj.weaver.patterns.PatternParser.parseKindedPointcut PatternParser.java:603 at org.aspectj.weaver.patterns.PatternParser.parseSinglePointcut PatternParser.java:317 at org.aspectj.weaver.patterns.PatternParser.parseAtomicPointcut PatternParser.java:295 at org.aspectj.weaver.patterns.PatternParser.parsePointcut PatternParser.java:256 at org.aspectj.weaver.tools.PointcutParser.resolvePointcutExpression PointcutParser.java:328 at org.aspectj.weaver.tools.PointcutParser.parsePointcutExpression PointcutParser.java:309 at org.springframework.aop.aspectj.AspectJExpressionPointcut.buildPointcutExpression AspectJExpressionPointcut.java:206 at org.springframework.aop.aspectj.AspectJExpressionPointcut.checkReadyToMatch AspectJExpressionPointcut.java:193 at org.springframework.aop.aspectj.AspectJExpressionPointcut.getClassFilter AspectJExpressionPointcut.java:174 at org.springframework.aop.support.AopUtils.canApply AopUtils.java:195 at org.springframework.aop.support.AopUtils.canApply AopUtils.java:250 at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply AopUtils.java:284 at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply AbstractAdvisorAutoProxyCreator.java:113 at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors AbstractAdvisorAutoProxyCreator.java:85 at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean AbstractAdvisorAutoProxyCreator.java:66 at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary AbstractAutoProxyCreator.java:362 at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization AbstractAutoProxyCreator.java:325 at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization AbstractAutowireCapableBeanFactory.java:361 at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.postProcessObjectFromFactoryBean AbstractAutowireCapableBeanFactory.java:1429 at org.springframework.beans.factory.support.FactoryBeanRegistrySupport$1.run FactoryBeanRegistrySupport.java:139 ... 15 more Reproducible: Sometimes</description>
    <commit commitTime="2010-08-26 15:20:03" id="e0e1330"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/ModifiersPattern.java</file>
    </fixedFiles>
  </bug>
  <bug id="324135" reportTime="2010-08-31 16:50:00">
    <summary>ArrayIndexOutOfBoundsException at AjState.java:1767</summary>
    <description>Build Identifier: 20100617-1415 Using AspectJ version: 1.6.10.20100817163700 I hit the blow exception after saving a edited java file. java.lang.ArrayIndexOutOfBoundsException at org.aspectj.ajdt.internal.core.builder.AjState.hasStructuralChanges AjState.java:1767 at org.aspectj.ajdt.internal.core.builder.AjState.recordClassFile AjState.java:1510 at org.aspectj.ajdt.internal.core.builder.AjState.noteResult AjState.java:1322 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$3.acceptResult AjBuildManager.java:1049 at org.aspectj.ajdt.internal.compiler.AjPipeli ... b.run AutoBuildJob.java:242 at org.eclipse.core.internal.jobs.Worker.run Worker.java:54 Compile error: ArrayIndexOutOfBoundsException thrown: 14 Reproducible: Didn't try</description>
    <commit commitTime="2010-09-01 00:29:30" id="88fab6a"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</file>
    </fixedFiles>
  </bug>
  <bug id="318899" reportTime="2010-07-05 10:24:00">
    <summary>NPE with @args matching Argument by Type</summary>
    <description>Build Identifier: This bug is related to Bug 257833 . I'm wondering why nobody has faced and reported that bug before?!?! This is the top of the stacktrace i get: java.lang.NullPointerException at org.aspectj.weaver.reflect.ShadowMatchImpl$RuntimeTestEvaluator.visit ShadowMatchImpl.java:140 at org.aspectj.weaver.ast.Instanceof.accept Instanceof.java:29 at org.aspectj.weaver.reflect.ShadowMatchImpl$RuntimeTestEvaluator.matches ShadowMatchImpl.java:121 at org.aspectj.weaver.reflect.ShadowMatchImpl.matchesJoinPoint ShadowMatchImpl.java:78 This bug occurs in aspectJ 1.6.1 and 1.6.8 so i think all versions in between are affected as well. I'm using aspectJ together with Spring 2.5.6 but i think that does not matter. Expected behavior: When using @Before "args myId,.. " to match all methods that have an argument of type MyInterface as first argument see steps to reproduce , the methods declared argument types should be used to determine if the method matches when null is passed as first argument. Actual Behavior: NullPointerException is thrown from org.aspectj.weaver.reflect.ShadowMatchImpl$RuntimeTestEvaluator.visit ShadowMatchImpl.java:140 . Note: Everything works fine if null is not used as first argument. That means if your first argument is never null you'll get no exception and everything works as expected. But if there is one method you don't want to match/intercept that gets null as it's first argument the runtime exception occurs. Reproducible: Always Steps to Reproduce: 1. define an interface MyInterface 2. define a pointcut / empty advice using "@args myId ", e.g. @Before "args myId,.. " public void startsMyIdArgument final JoinPoint jp, final MyInterface myId { }; 3. call a method of an intercepted class with the first argument being null and you'll get a NullPointerException</description>
    <commit commitTime="2010-09-01 04:19:01" id="2a8d684"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/reflect/ShadowMatchImpl.java</file>
      <file>org.aspectj.matcher/testsrc/org/aspectj/weaver/patterns/ThisOrTargetTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="324190" reportTime="2010-09-01 09:15:00">
    <summary>NullPointerException in AjBuildManager.findOutputDirsForAspects when compiling AspectJ project generated with Maven</summary>
    <description>Build Identifier: 20100617-1415 When I compile my AspectJ project, I get an AspectJ Internal Compiler Error. The stack trace is : java.lang.NullPointerException at org.aspectj.ajdt.internal.core.builder.AjBuildManager.findOutputDirsForAspects AjBuildManager.java:725 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.writeOutxmlFile AjBuildManager.java:652 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:367 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:181 at org.aspectj.a ... on$1.run GlobalBuildAction.java:179 at org.eclipse.core.internal.jobs.Worker.run Worker.java:54 I digged a bit and looked into the classes. It would seem that AjState.getAspectNamesToFileNameMap can return null in AjBuildManager.findOutputDirsForAspects. It is taken in account when AjBuildConfig.getCompilationResultDestinationManager returns null or a list with one element, but not when it returns a list with several elements. Reproducible: Always Steps to Reproduce: Always happen in my configuration, but I didn't try to make it happen again in another workspace. Here are the steps I followed. 1. Generate a AspectJ project with Maven using the pom.xml I'll join 2. Create an aspect with a few pointcuts and a few advices 3. Compile not with maven, the Eclipse compilation</description>
    <commit commitTime="2010-09-01 15:00:33" id="03c43f5"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="324804" reportTime="2010-09-08 18:30:00">
    <summary>NullPointerException at AspectJElementHierarchy.java:677</summary>
    <description>Build Identifier: 20100617-1415 After removing a "throws" clause from the constructor of a class and then saving I got the following error: java.lang.NullPointerException at org.aspectj.asm.internal.AspectJElementHierarchy.getCanonicalFilePath AspectJElementHierarchy.java:677 at org.aspectj.asm.internal.AspectJElementHierarchy.updateHandleMap AspectJElementHierarchy.java:641 at org.aspectj.asm.AsmManager.removeStructureModelForFiles AsmManager.java:572 at org.aspectj.asm.AsmManager.processDelta AsmManager.java:604 at org.aspectj.ajdt.internal.core.builder.AjBuildManager ... oBuildJob.run AutoBuildJob.java:242 at org.eclipse.core.internal.jobs.Worker.run Worker.java:54 Compile error: NullPointerException thrown: null Reproducible: Didn't try</description>
    <commit commitTime="2010-09-09 16:24:43" id="6249672"/>
    <fixedFiles>
      <file>asm/src/org/aspectj/asm/internal/AspectJElementHierarchy.java</file>
    </fixedFiles>
  </bug>
  <bug id="282379" reportTime="2009-07-03 10:12:00">
    <summary>[plan] spaces in file names causes AspectJ weaver to fail</summary>
    <description>The WeavingAdaptor requires the aspect path to be composed by URLs. The URL of a file is encoded, for example if it contains spaces they will be represented with %20. It then converts these file:// urls to simple string paths, and then tries to access files pointed by those paths. This is done inside the FileUtil.makeClasspath URL[] . This method uses URL.getPath to obtain the path. But this method does not decode the string, it returns it as it is in the URL. When later this string is used to create a new File instance, that file contains an invalid path, and the weaver fails as follows : Caused by: org.aspectj.bridge.AbortException: bad aspect library: '/home/sym/path%20with%20space/aspect-library.jar' at org.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHolder.handleMessage WeavingAdaptor.java:624 at org.aspectj.bridge.MessageUtil.error MessageUtil.java:80 at org.aspectj.weaver.tools.WeavingAdaptor.error WeavingAdaptor.java:504 at org.aspectj.weaver.tools.WeavingAdaptor.addAspectLibrary WeavingAdaptor.java:472 at org.aspectj.weaver.tools.WeavingAdaptor.registerAspectLibraries WeavingAdaptor.java:447 at org.aspectj.weaver.tools.WeavingAdaptor.init WeavingAdaptor.java:177 at org.aspectj.weaver.tools.WeavingAdaptor.&amp;lt;init&amp;gt; WeavingAdaptor.java:112 This issue is quite important, because on older windows "Documents and Settings" is an unfortunately common path, for example Maven stores there its repository. Multiple solutions are possible for this simple bug, in order of impact : - Decode the string obtained by URL.getPath using URLEncoder.decode - Use Files instead of Strings and let Java handle the URL, using the File URI constructor - Don't assume that aspect libraries are files, and hence that urls are file url, and use URLConnection to fetch aspect library contents.</description>
    <commit commitTime="2011-02-05 21:29:00" id="5648105"/>
    <fixedFiles>
      <file>util/src/org/aspectj/util/FileUtil.java</file>
    </fixedFiles>
  </bug>
  <bug id="336997" reportTime="2011-02-11 14:01:00">
    <summary>IllegalStateException for generic ITD usage</summary>
    <description>java.lang.IllegalStateException: Can't answer binding questions prior to resolving at org.aspectj.weaver.TypeVariable.canBeBoundTo TypeVariable.java:175 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:496 at org.aspectj.weaver.ReferenceType.isAssignableFrom ReferenceType.java:399 at org.aspectj.weaver.ResolvedType.checkLegalOverride ResolvedType.java:1999 at org.aspectj.weaver.ResolvedType.clashesWithExistingMember ResolvedType.java:1843 at org.aspectj.weaver.ResolvedType.addInterTypeMunger ResolvedType.java:1699 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:795 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:652 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.createBinaryTypeFrom AjLookupEnvironment.java:1398 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom LookupEnvironment.java:599 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.accept Compiler.java:276 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType LookupEnvironment.java:113 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve UnresolvedReferenceBinding.java:49 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType BinaryTypeBinding.java:99 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.getType LookupEnvironment.java:971 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.lookupBinding EclipseFactory.java:749 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeTypeBinding1 EclipseFactory.java:743 at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeTypeBinding EclipseFactory.java:605 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addParent AjLookupEnvironment.java:1314 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareParents AjLookupEnvironment.java:902 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:730 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveIntertypes AjLookupEnvironment.java:418 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:255 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile Compiler.java:616 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:357 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:371 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1021 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:268 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:181 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:371 at org.aspectj.tools.ajc.Main.runMain Main.java:248 at org.codehaus.mojo.aspectj.AbstractAjcCompiler.execute AbstractAjcCompiler.java:360 at org.apache.maven.plugin.DefaultPluginManager.executeMojo DefaultPluginManager.java:490 at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals DefaultLifecycleExecutor.java:694 at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle DefaultLifecycleExecutor.java:556 at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal DefaultLifecycleExecutor.java:535 at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures DefaultLifecycleExecutor.java:387 at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments DefaultLifecycleExecutor.java:348 at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute DefaultLifecycleExecutor.java:180 at org.apache.maven.DefaultMaven.doExecute DefaultMaven.java:328 at org.apache.maven.DefaultMaven.execute DefaultMaven.java:138 at org.apache.maven.cli.MavenCli.main MavenCli.java:362 at org.apache.maven.cli.compat.CompatibleMain.main CompatibleMain.java:60 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:25 at java.lang.reflect.Method.invoke Method.java:597 at org.codehaus.classworlds.Launcher.launchEnhanced Launcher.java:315 at org.codehaus.classworlds.Launcher.launch Launcher.java:255 at org.codehaus.classworlds.Launcher.mainWithExitCode Launcher.java:430 at org.codehaus.classworlds.Launcher.main Launcher.java:375</description>
    <commit commitTime="2011-02-11 19:03:13" id="80785bf"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/TypeVariable.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/TypeVariableReferenceType.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/World.java</file>
    </fixedFiles>
  </bug>
  <bug id="339300" reportTime="2011-03-08 18:49:00">
    <summary>problem weaving anonymous inner member owned classes in scala library</summary>
    <description>Reported by Ramnivas. Due to the use of numerous $ chars in scala classnames, some of the AspectJ handling of inner classes breaks down. It should be possible to correctly use the available class attributes rather than mess around with attributes. A while back one use did contribute a change to enable scala weaving which tried to use the InnerClasses attribute before falling back on string chopping. However we have now hit another case. In the scenario we are dealing with the class scala.Predef$$anon$3 in the scala library a 2.9.0-SNAPSHOT version . What we normally do here is in that type we discover the InnerClass attribute and refer to the outerclass index it holds. Unfortunately, due to it being an anonymous inner inside a method, the index is 0. So we fail to process the attribute and with string chopping come up with a stupid guessed name for the outer. The solution is to use the EnclosingMethod attribute in these situations. The EnclosingMethod attribute is an optional attribute. A class must have an EnclosingMethod attribute if and only if it is a local class or an anonymous class. A class may have no more than one EnclosingMethod attribute. The EnclosingMethod attribute includes a pointer to the containing outerclass that had the method in which encloses this inner type .</description>
    <commit commitTime="2011-03-09 01:14:39" id="945402f"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
    </fixedFiles>
  </bug>
  <bug id="340323" reportTime="2011-03-17 10:34:00">
    <summary>NPE when weaving java.lang.Object at org.aspectj.weaver.bcel.BcelTypeMunger.createAnyBridgeMethodsForCovariance BcelTypeMunger.java:1251</summary>
    <description>Created attachment 191423 [details] AJ core dump I'm trying to add a method to Object using a inter-type declaration. When calling ajc, I encounter a NPE. From a cursory glance, it would appear that the code is looking for the parents classes of Object, which presumably is null. I've attached the dump and a simple example that causes it.</description>
    <commit commitTime="2011-03-28 19:37:01" id="a8e6797"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="341446" reportTime="2011-03-31 02:20:00">
    <summary>java.lang.UnsupportedClassVersionError when running Java 1.5</summary>
    <description>We are using Spring 3.0 and they have a dependency to aspectj. Thus we have the runtime Jars on the classpath. Problem is the aspectjweaver.jar contains 1.6 byte code. When starting our application on JBoss 5.1 with JDK 1.5 we get an exception in the logs: Unexpected error during load of:testdata.SomeAnnotation java.lang.UnsupportedClassVersionError: Bad version number in .class file at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:620 at org.jboss.classloader.spi.base.BaseClassLoader.access$200 BaseClassLoader.java:63 at org.jboss.classloader.spi.base.BaseClassLoader$2.run BaseClassLoader.java:572 at org.jboss.classloader.spi.base.BaseClassLoader$2.run BaseClassLoader.java:532 at java.security.AccessController.doPrivileged Native Method As we are not using aspects from aspectj we don't have a problem ... but others might have. There is a issue for Spring as well: https://issuetracker.springsource.com/browse/EBR-622 Also had a look at the current release 1.6.11 and the same situation there. So as other people have no chance of working around this other than building the jar themself I set this to major.</description>
    <commit commitTime="2011-04-01 03:46:11" id="293a075"/>
    <fixedFiles>
      <file>org.aspectj.matcher/testsrc/org/aspectj/matcher/tools/CommonAdvancedPointcutExpressionTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="339974" reportTime="2011-03-15 00:21:00">
    <summary>NPE when accessing static class inside of an ITIT</summary>
    <description>This code: public class City { private String name; private Country country; } And separate file: public aspect TrafficCalculator { public static class City.TrafficCalculator { Function&amp;lt;City, Time&amp;gt; EXTREME = createExtremeTraffic ; Function&amp;lt;City, Time&amp;gt; BASIC = createBasicTraffic ; } private static Function&amp;lt;City, Time&amp;gt; createExtremeTraffic { return null; } private static Function&amp;lt;City, Time&amp;gt; createBasicTraffic { return null; } public static class Time { } } Try full build and the following exception: java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.ast.IntertypeMemberClassDeclaration.resolveOnType IntertypeMemberClassDeclaration.java:238 at org.aspectj.ajdt.internal.compiler.ast.IntertypeMemberClassDeclaration.build IntertypeMemberClassDeclaration.java:246 at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.processIntertypeMemberTypes AspectDeclaration.java:1039 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.processInterTypeMemberTypes AjLookupEnvironment.java:523 at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:197 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile Compiler.java:616 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:357 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:371 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1021 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:305 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:185 at org.aspectj.ajde.core.internal.AjdeCoreBuildManager.performBuild AjdeCoreBuildManager.java:127 at org.aspectj.ajde.core.AjCompiler.build AjCompiler.java:91 at org.eclipse.ajdt.core.builder.AJBuilder.build AJBuilder.java:257 at org.eclipse.core.internal.events.BuildManager$2.run BuildManager.java:629 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:42 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:172 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:203 at org.eclipse.core.internal.events.BuildManager$1.run BuildManager.java:255 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:42 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:258 at org.eclipse.core.internal.events.BuildManager.basicBuildLoop BuildManager.java:311 at org.eclipse.core.internal.events.BuildManager.build BuildManager.java:343 at org.eclipse.core.internal.events.AutoBuildJob.doBuild AutoBuildJob.java:144 at org.eclipse.core.internal.events.AutoBuildJob.run AutoBuildJob.java:242 at org.eclipse.core.internal.jobs.Worker.run Worker.java:54</description>
    <commit commitTime="2011-04-21 15:25:09" id="249f832"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc1612/Ajc1612Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="327134" reportTime="2010-10-06 12:12:00">
    <summary>Cant suppress raw types warning in a pointcut</summary>
    <description>Build Identifier: I20100608-0911 Generic type used in a pointcut and bound to target or this must omit actual type name and thus causes 'raw type must be parametrized' compiler warning. @SuppressAJWarning or @SuppressWarning annotations does not turn it off Reproducible: Always Steps to Reproduce: Code snippets: pointcut IVOListUpdate IVOList list : &amp;amp;&amp;amp; target list &amp;amp;&amp;amp; call void updateList * ; public interface IVOList&amp;lt;T extends IValueObject&amp;gt; extends List&amp;lt;T&amp;gt;, Externalizable, Serializable { void updateList List&amp;lt;T&amp;gt; newList ; } public interface IValueObject extends Comparable&amp;lt;IValueObject&amp;gt;, Serializable { }</description>
    <commit commitTime="2011-04-28 15:36:50" id="199299c"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc1612/Ajc1612Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="348488" reportTime="2011-06-06 21:12:00">
    <summary>"register definition failed" with NullPointerException</summary>
    <description>Build Identifier: 20110218-0911 Here's another rare &amp;amp; hard to reproduce exception I encountered upon starting an RCP application with load-time weaving enabled see bug 338033 for another exception found in the the same environment : Jun 6, 2011 3:19:50 PM org.aspectj.weaver.tools.Jdk14Trace error SEVERE: register definition failed java.lang.NullPointerException at org.aspectj.weaver.bcel.AtAjAttributes.getMethodArgumentNames AtAjAttributes.java:1760 at org.aspectj.weaver.bcel.AtAjAttributes.access$000 AtAjAttributes.java:92 at org.aspectj.weaver.bcel.AtAjAttributes$AjAttributeMethodStruct.getArgumentNames AtAjAttributes.java:153 at org.aspectj.weaver.bcel.AtAjAttributes.extractBindings AtAjAttributes.java:1576 at org.aspectj.weaver.bcel.AtAjAttributes.handleAroundAnnotation AtAjAttributes.java:1348 at org.aspectj.weaver.bcel.AtAjAttributes.readAj5MethodAttributes AtAjAttributes.java:448 at org.aspectj.weaver.bcel.BcelMethod.unpackAjAttributes BcelMethod.java:203 at org.aspectj.weaver.bcel.BcelMethod.&amp;lt;init&amp;gt; BcelMethod.java:92 at org.aspectj.weaver.bcel.BcelObjectType.getDeclaredMethods BcelObjectType.java:290 at org.aspectj.weaver.ReferenceType.getDeclaredMethods ReferenceType.java:770 at org.aspectj.weaver.ResolvedType.getDeclaredAdvice ResolvedType.java:947 at org.aspectj.weaver.ResolvedType.getDeclaredShadowMungers ResolvedType.java:987 at org.aspectj.weaver.ResolvedType.collectShadowMungers ResolvedType.java:822 at org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers ResolvedType.java:749 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect CrosscuttingMembersSet.java:85 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect CrosscuttingMembersSet.java:69 at org.aspectj.weaver.bcel.BcelWeaver.addLibraryAspect BcelWeaver.java:202 at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.registerAspects ClassLoaderWeavingAdaptor.java:466 at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.registerDefinitions ClassLoaderWeavingAdaptor.java:290 at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.initialize ClassLoaderWeavingAdaptor.java:176 at org.eclipse.equinox.weaving.aspectj.loadtime.OSGiWeavingAdaptor.initialize Unknown Source at org.eclipse.equinox.weaving.aspectj.AspectJWeavingService.ensureAdaptorInit Unknown Source at org.eclipse.equinox.weaving.aspectj.AspectJWeavingService.preProcess Unknown Source at org.eclipse.equinox.weaving.adaptors.WeavingAdaptor.weaveClass Unknown Source at org.eclipse.equinox.weaving.hooks.WeavingHook.processClass Unknown Source at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.defineClass ClasspathManager.java:575 at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findClassImpl ClasspathManager.java:550 at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClassImpl ClasspathManager.java:481 at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass_LockClassLoader ClasspathManager.java:469 at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass ClasspathManager.java:449 at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLocalClass DefaultClassLoader.java:216 at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass BundleLoader.java:393 at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal BundleLoader.java:469 at org.eclipse.osgi.internal.loader.BundleLoader.findClass BundleLoader.java:422 at org.eclipse.osgi.internal.loader.BundleLoader.findClass BundleLoader.java:410 at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass DefaultClassLoader.java:107 at java.lang.ClassLoader.loadClass ClassLoader.java:247 at org.eclipse.osgi.internal.loader.BundleLoader.loadClass BundleLoader.java:338 at org.eclipse.osgi.framework.internal.core.BundleHost.loadClass BundleHost.java:232 at org.eclipse.osgi.framework.internal.core.AbstractBundle.loadBundleActivator AbstractBundle.java:149 at org.eclipse.osgi.framework.internal.core.BundleContextImpl.start BundleContextImpl.java:751 at org.eclipse.osgi.framework.internal.core.BundleHost.startWorker BundleHost.java:370 at org.eclipse.osgi.framework.internal.core.AbstractBundle.resume AbstractBundle.java:374 at org.eclipse.osgi.framework.internal.core.Framework.resumeBundle Framework.java:1067 at org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles StartLevelManager.java:561 at org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles StartLevelManager.java:546 at org.eclipse.osgi.framework.internal.core.StartLevelManager.incFWSL StartLevelManager.java:459 at org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel StartLevelManager.java:243 at org.eclipse.osgi.framework.internal.core.StartLevelManager.dispatchEvent StartLevelManager.java:440 at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent EventManager.java:227 at org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.run EventManager.java:337 [foo] warning register definition failed -- NullPointerException null null java.lang.NullPointerException at org.aspectj.weaver.bcel.AtAjAttributes.getMethodArgumentNames AtAjAttributes.java:1760 at org.aspectj.weaver.bcel.AtAjAttributes.access$000 AtAjAttributes.java:92 at org.aspectj.weaver.bcel.AtAjAttributes$AjAttributeMethodStruct.getArgumentNames AtAjAttributes.java:153 at org.aspectj.weaver.bcel.AtAjAttributes.extractBindings AtAjAttributes.java:1576 at org.aspectj.weaver.bcel.AtAjAttributes.handleAroundAnnotation AtAjAttributes.java:1348 at org.aspectj.weaver.bcel.AtAjAttributes.readAj5MethodAttributes AtAjAttributes.java:448 at org.aspectj.weaver.bcel.BcelMethod.unpackAjAttributes BcelMethod.java:203 at org.aspectj.weaver.bcel.BcelMethod.&amp;lt;init&amp;gt; BcelMethod.java:92 at org.aspectj.weaver.bcel.BcelObjectType.getDeclaredMethods BcelObjectType.java:290 at org.aspectj.weaver.ReferenceType.getDeclaredMethods ReferenceType.java:770 at org.aspectj.weaver.ResolvedType.getDeclaredAdvice ResolvedType.java:947 at org.aspectj.weaver.ResolvedType.getDeclaredShadowMungers ResolvedType.java:987 at org.aspectj.weaver.ResolvedType.collectShadowMungers ResolvedType.java:822 at org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers ResolvedType.java:749 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect CrosscuttingMembersSet.java:85 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect CrosscuttingMembersSet.java:69 at org.aspectj.weaver.bcel.BcelWeaver.addLibraryAspect BcelWeaver.java:202 at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.registerAspects ClassLoaderWeavingAdaptor.java:466 at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.registerDefinitions ClassLoaderWeavingAdaptor.java:290 at org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.initialize ClassLoaderWeavingAdaptor.java:176 at org.eclipse.equinox.weaving.aspectj.loadtime.OSGiWeavingAdaptor.initialize Unknown Source at org.eclipse.equinox.weaving.aspectj.AspectJWeavingService.ensureAdaptorInit Unknown Source at org.eclipse.equinox.weaving.aspectj.AspectJWeavingService.preProcess Unknown Source at org.eclipse.equinox.weaving.adaptors.WeavingAdaptor.weaveClass Unknown Source at org.eclipse.equinox.weaving.hooks.WeavingHook.processClass Unknown Source at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.defineClass ClasspathManager.java:575 at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findClassImpl ClasspathManager.java:550 at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClassImpl ClasspathManager.java:481 at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass_LockClassLoader ClasspathManager.java:469 at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass ClasspathManager.java:449 at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLocalClass DefaultClassLoader.java:216 at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass BundleLoader.java:393 at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal BundleLoader.java:469 at org.eclipse.osgi.internal.loader.BundleLoader.findClass BundleLoader.java:422 at org.eclipse.osgi.internal.loader.BundleLoader.findClass BundleLoader.java:410 at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass DefaultClassLoader.java:107 at java.lang.ClassLoader.loadClass ClassLoader.java:247 at org.eclipse.osgi.internal.loader.BundleLoader.loadClass BundleLoader.java:338 at org.eclipse.osgi.framework.internal.core.BundleHost.loadClass BundleHost.java:232 at org.eclipse.osgi.framework.internal.core.AbstractBundle.loadBundleActivator AbstractBundle.java:149 at org.eclipse.osgi.framework.internal.core.BundleContextImpl.start BundleContextImpl.java:751 at org.eclipse.osgi.framework.internal.core.BundleHost.startWorker BundleHost.java:370 at org.eclipse.osgi.framework.internal.core.AbstractBundle.resume AbstractBundle.java:374 at org.eclipse.osgi.framework.internal.core.Framework.resumeBundle Framework.java:1067 at org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles StartLevelManager.java:561 at org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles StartLevelManager.java:546 at org.eclipse.osgi.framework.internal.core.StartLevelManager.incFWSL StartLevelManager.java:459 at org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel StartLevelManager.java:243 at org.eclipse.osgi.framework.internal.core.StartLevelManager.dispatchEvent StartLevelManager.java:440 at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent EventManager.java:227 at org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.run EventManager.java:337 Reproducible: Couldn't Reproduce</description>
    <commit commitTime="2011-06-07 16:46:19" id="95e70d2"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</file>
    </fixedFiles>
  </bug>
  <bug id="348979" reportTime="2011-06-09 18:59:37">
    <summary>world type map fixed/expendable problems</summary>
    <description>Discovered whilst working with Steve Ash on a build of a few projects that was consuming more than 2Gigs of heap. To recover memory Steve activated type demotion. This didn't appear to help much. This was due to Steve's projects using aspectpath. The aspectpath scanning to discover aspects was inadvertently making any types discovered on the aspectpath permanent types (not expendable) and they'd never be demoted/evicted. The types were all being made permanent in case they were an aspect but never being demoted if it turns out they were not. In a Roo petclinic I added spel as a dependency (on the aspectpath) and parsed a simple expression (just to further exaggerate the problem). This was leaving 213 types in the fixed area of the typemap. By correctly scanning aspectpath and demoting non-aspects this was reduced to 90.</description>
    <commit commitTime="2011-06-11 05:06:40" id="2edb246"/>
    <fixedFiles>
      <file>tests/multiIncremental/PR278496_10/base/com/Asp.java</file>
      <file>tests/multiIncremental/PR278496_10/base/com/Foo.java</file>
      <file>tests/multiIncremental/PR278496_11/base/com/Foo.java</file>
      <file>tests/multiIncremental/PR278496_11_a/base/com/Asp.java</file>
      <file>tests/multiIncremental/PR278496_11_a/base/com/Dibble.java</file>
    </fixedFiles>
  </bug>
  <bug id="349636" reportTime="2011-06-16 20:13:00">
    <summary>AspectJ reports "abort trouble" while instrumenting a class on startup</summary>
    <description>Build Identifier: 20110218-0911 java.lang.NullPointerException at org.aspectj.weaver.bcel.Utility.appendConversion Utility.java:272 at org.aspectj.weaver.bcel.BcelVar.appendConvertableArrayLoad BcelVar.java:81 at org.aspectj.weaver.bcel.BcelVar.createConvertableArrayLoad BcelVar.java:101 at org.aspectj.weaver.bcel.BcelShadow.makeClosureClassAndReturnConstructor BcelShadow.java:3066 at org.aspectj.weaver.bcel.BcelShadow.weaveAroundClosure BcelShadow.java:2830 at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:342 at org.aspectj.weaver.Shadow.implementMungers Shadow.java:630 at org.aspectj.weaver.Shadow.implement Shadow.java:544 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:3147 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:490 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:100 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1687 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1631 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1394 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1180 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:467 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:318 at org.eclipse.equinox.weaving.aspectj.loadtime.OSGiWeavingAdaptor.weaveClass Unknown Source at org.eclipse.equinox.weaving.aspectj.AspectJWeavingService.preProcess Unknown Source at org.eclipse.equinox.weaving.adaptors.WeavingAdaptor.weaveClass Unknown Source at org.eclipse.equinox.weaving.hooks.WeavingHook.processClass Unknown Source at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.defineClass ClasspathManager.java:575 at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findClassImpl ClasspathManager.java:550 at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClassImpl ClasspathManager.java:481 at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass_LockClassLoader ClasspathManager.java:469 at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass ClasspathManager.java:449 at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLocalClass DefaultClassLoader.java:216 at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass BundleLoader.java:393 at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal BundleLoader.java:469 at org.eclipse.osgi.internal.loader.BundleLoader.findClass BundleLoader.java:422 at org.eclipse.osgi.internal.loader.BundleLoader.findClass BundleLoader.java:410 at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass DefaultClassLoader.java:107 at java.lang.ClassLoader.loadClass ClassLoader.java:247 at org.eclipse.osgi.internal.loader.BundleLoader.loadClass BundleLoader.java:338 at org.eclipse.osgi.framework.internal.core.BundleHost.loadClass BundleHost.java:232 at org.eclipse.osgi.framework.internal.core.AbstractBundle.loadClass AbstractBundle.java:1197 at org.springframework.osgi.util.BundleDelegatingClassLoader.findClass BundleDelegatingClassLoader.java:99 at org.springframework.osgi.util.BundleDelegatingClassLoader.loadClass BundleDelegatingClassLoader.java:157 at java.lang.ClassLoader.loadClass ClassLoader.java:247 at org.springframework.util.ClassUtils.forName ClassUtils.java:257 at org.springframework.beans.factory.support.AbstractBeanDefinition.resolveBeanClass AbstractBeanDefinition.java:408 at org.springframework.beans.factory.support.AbstractBeanFactory.doResolveBeanClass AbstractBeanFactory.java:1271 at org.springframework.beans.factory.support.AbstractBeanFactory.resolveBeanClass AbstractBeanFactory.java:1242 at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.predictBeanType AbstractAutowireCapableBeanFactory.java:576 at org.springframework.beans.factory.support.AbstractBeanFactory.isFactoryBean AbstractBeanFactory.java:1319 at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType DefaultListableBeanFactory.java:315 at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.invokeBeanFactoryPostProcessors AbstractDelegatedExecutionApplicationContext.java:391 at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.invokeBeanFactoryPostProcessors AbstractDelegatedExecutionApplicationContext.java:364 at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$3.run AbstractDelegatedExecutionApplicationContext.java:256 at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL PrivilegedUtils.java:87 at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.startRefresh AbstractDelegatedExecutionApplicationContext.java:222 at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.stageOne DependencyWaiterApplicationContextExecutor.java:225 at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.refresh DependencyWaiterApplicationContextExecutor.java:178 at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.refresh AbstractDelegatedExecutionApplicationContext.java:159 at org.springframework.osgi.extender.internal.activator.LifecycleManager$1.run LifecycleManager.java:223 at java.lang.Thread.run Thread.java:662 Reproducible: Sometimes</description>
    <commit commitTime="2011-06-17 22:39:42" id="f7b1193"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/Utility.java</file>
    </fixedFiles>
  </bug>
  <bug id="349764" reportTime="2011-06-19 05:42:00">
    <summary>Repeated output of ASPECTJ: aspectj.overweaving=true: overweaving switched ON</summary>
    <description>Build Identifier: 1.6.11 The message is repeated every time a new class loader is being use to load weaving configuration using -Dorg.aspectj.tracing.factory=default . Since this value is a system ! property there is no need to display its value more than once or even check it more than once - it could be lazily initialized and cached... Reproducible: Always Steps to Reproduce: 1. use -Dorg.aspectj.tracing.factory=default -Daspectj.overweaving=true properties 2. place some JAR that contains aop.xml with some aspects and weaving options where it can be loaded/visible from several class loaders 3. runt the application and check the STDOUT output</description>
    <commit commitTime="2011-06-20 17:10:01" id="bb2aea4"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/World.java</file>
    </fixedFiles>
  </bug>
  <bug id="350855" reportTime="2011-06-30 11:32:00">
    <summary>overweaving misbehaving when subclassing WeavingURLClassLoader</summary>
    <description>Raised by the Spring Insight team, they observed that in a system where they are using a special classloader subclassing weaving url classloader they see it fail to weave an aspect if overweaving is on.</description>
    <commit commitTime="2011-06-30 15:34:56" id="2302e94"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="352389" reportTime="2011-07-18 16:08:00">
    <summary>overweaving can attribute duplicate attributes, one of which will not deserialize correctly</summary>
    <description>When overweaving it is possible that a class will get a second WeaverState attribute. This second one will not be valid it hasn't been correctly configured . This isn't normally a problem because the next thing that happens is that the class is defined to the VM. But if *another* weave step occurs, the malformed attribute will cause that weave to fail with this kind of message: bad WeaverState.Kind: -115 The solution is to avoid adding the duplicate when overweaving.</description>
    <commit commitTime="2011-07-18 20:44:33" id="8553b30"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="353100" reportTime="2011-07-26 08:47:00">
    <summary>Need to demote "warning ignoring duplicate definition" from warning to debug</summary>
    <description>Build Identifier: 1.6.11 This kind of “problem” can occur for complex class loader hierarchies, and since it is not really a problem, we should make it debug level message so as not to write log messages un-necessarily. Reproducible: Always Steps to Reproduce: 1. Create an application that has some weaved class loaders hierarchy - recommend some URLClassLoader derived ones 2. Add the same ! JAR with only an aop.xml file to more than one loader along the hierarchy 3. Make the loader the default context thread loader and start running some code.</description>
    <commit commitTime="2011-07-26 15:52:40" id="c6fb752"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="353349" reportTime="2011-07-28 13:52:00">
    <summary>NPE in deleteNewAndDup</summary>
    <description>java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelShadow.deleteNewAndDup BcelShadow.java:179 at org.aspectj.weaver.bcel.BcelShadow.prepareForMungers BcelShadow.java:303 at org.aspectj.weaver.Shadow.implement Shadow.java:543 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:3147 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:490 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:100 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1687 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1631 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1394 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1180 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:467 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:318 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:96</description>
    <commit commitTime="2011-07-28 20:48:42" id="e8ef5bf"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="340806" reportTime="2011-03-23 16:35:00">
    <summary>Race condition in JavaLangTypeToResolvedTypeConverter potentially exposed through Spring AOP</summary>
    <description>Build Identifier: 1.6.11 Spinoff of https://jira.springsource.org/browse/SPR-8070 and Bug 337855 There is a race condition in JavaLangTypeToResolvedTypeConverter's use of the 'typeVariablesInProgress' Map. This can lead to fromType returning NULL which eventually leads to the NPE in World . } else if aType instanceof java.lang.reflect.TypeVariable { if typeVariablesInProgress.get .get aType != null { &amp;gt;&amp;gt;&amp;gt; // aType can get removed from the Map after this null check! return typeVariablesInProgress.get .get aType ; } The error results in the following stack trace: java.lang.NullPointerException: null at org.aspectj.weaver.World.resolve World.java:278 ~[aspectjweaver.jar:1.6.11] at org.aspectj.weaver.World.resolve World.java:218 ~[aspectjweaver.jar:1.6.11] at org.aspectj.weaver.World.resolve World.java:253 ~[aspectjweaver.jar:1.6.11] at org.aspectj.weaver.TypeFactory.createParameterizedType TypeFactory.java:42 ~[aspectjweaver.jar:1.6.11] at org.aspectj.weaver.reflect.JavaLangTypeToResolvedTypeConverter.fromType JavaLangTypeToResolvedTypeConverter.java:88 ~[aspectjweaver.jar:1.6.11] I have also attached a BTrace script that shows further analysis of the problem: onFromType_Line91: RETURNING TYPE FROM MAP typeVariablesInProgress: {T=T} onFromType_FieldGet: typeVariablesInProgress: {T=T} onFromType_Return: fromType T --&amp;gt; null We have tested a patch that wraps the 'typeVariablesInProgress' Map in a ThreadLocal. In limited testing, this appears to have fixed the problem. I have attached the patch. Reproducible: Sometimes Steps to Reproduce: Perform type resolution on classes with parameterized/generic signatures concurrently with multiple threads. Note: I have been unable to reproduce this issue outside of our server. We see the issue with Spring and during Server initialization under heavy load.</description>
    <commit commitTime="2011-08-03 20:22:40" id="167b801"/>
    <fixedFiles>
      <file>weaver5/java5-src/org/aspectj/weaver/reflect/JavaLangTypeToResolvedTypeConverter.java</file>
    </fixedFiles>
  </bug>
  <bug id="354022" reportTime="2011-08-05 12:17:00">
    <summary>constructor inlining can fail for some groovy built code</summary>
    <description>The file grails.util.BuildSettings contains bytecode where the constructors are recursive. You can't compile this in Java A { this ; } but groovy generates some code where it switches on a value in the ctor and if it is a certain value, the recursive ctor call is made. I imagine this 'never happens' in practice but because it is in the bytecode it trips up the AspectJ code which inlines this calls before weaving - since it gets into an infinite loop. For now, just keep track of ctors making the recursive call and so don't get trapped in the infinite loop.</description>
    <commit commitTime="2011-08-05 16:17:39" id="6ae463a"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="353457" reportTime="2011-07-30 17:23:00">
    <summary>NPE when saving an aspect - Aspectj Internal Compiler Error</summary>
    <description>Created attachment 200625 [details] Two projects java.lang.NullPointerException at org.aspectj.weaver.ShadowMunger.getBinaryFile ShadowMunger.java:201 at org.aspectj.weaver.ShadowMunger.getBinarySourceLocation ShadowMunger.java:188 at org.aspectj.weaver.model.AsmRelationshipProvider.createAdviceChild AsmRelationshipProvider.java:699 at org.aspectj.weaver.model.AsmRelationshipProvider.addChildNodes AsmRelationshipProvider.java:657 at org.aspectj.weaver.model.AsmRelationshipProvider.crea ... bleAspect$edu_uat_cs2011_observerpattern_Observable$observers java.util.List end public class edu.uat.csc263.su10045.observermodel.DepartmentManager I have attached a zip file containing the two projects that in combination caused this problem. To recreate, load the projects, go into DepartmentManagerObservableAspect, modify the pointcut and save the file.</description>
    <commit commitTime="2011-08-15 20:28:37" id="0f506ab"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ShadowMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="354947" reportTime="2011-08-17 09:28:00">
    <summary>Nullpointer-Exception while parsing definition file aop.xml in DocumentParser</summary>
    <description>Build Identifier: 20100617-1415 With an activated NullpointerException-Breakpoint i recently stumpled upon a thrown NPE in the DocumentParser.parse -method Line 106 : public static Definition parse final URL url throws Exception { InputStream in = null; try { if CACHE &amp;amp;&amp;amp; parsedFiles.containsKey url.toString { return parsedFiles.get url.toString ; } Definition def=null; if LIGHTPARSER { def = SimpleAOPParser.parse url ; }else{ def = saxParsing url ; } if CACHE &amp;amp;&amp;amp; def.getAspectClassNames .size &amp;gt; 0 { parsedFiles.put url.toString , def ; } return def; } finally { try { in.close ; } catch Throwable t { } } } ... The parsing of the configuration file works fine, merely the InputStream seems not to be used anymore. Reproducible: Always</description>
    <commit commitTime="2011-08-17 15:54:09" id="e71e287"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/loadtime/definition/DocumentParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="359332" reportTime="2011-09-29 00:22:00">
    <summary>NPE in AjBuildManager.java:528 after non-Java/AJ file was renamed</summary>
    <description>Build Identifier: Upon using Eclipse's "Rename Resource" dialog to rename my project's "src/main/resources/META-INF/spring/email.properties" file to "scheduler.properties" in the same directory, Eclipse displayed the "AspectJ Internal Compiler Error" dialog with this stack trace: java.io.FileNotFoundException at java.io.FileInputStream.open Native Method at java.io.FileInputStream.&amp;lt;init&amp;gt; FileInputStream.java:120 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesFromFile AjBuildManager.java:528 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesToDestination AjBuildManager.java:466 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:363 ... e error: FileNotFoundException thrown: /Users/aswan/projects/foo/src/main/resources/META-INF/spring/email.properties No such file or directory Reproducible: Couldn't Reproduce Steps to Reproduce: N/A</description>
    <commit commitTime="2011-09-29 16:34:42" id="14a6eac"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="362956" reportTime="2011-11-04 20:33:00">
    <summary>neo4j NPE</summary>
    <description>java.lang.NullPointerException at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches ExactAnnotationTypePattern.java:128 at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches ExactAnnotationTypePattern.java:96 at org.aspectj.weaver.patterns.AndAnnotationTypePattern.matches AndAnnotationTypePattern.java:42 at org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern.matchesExactly AnyWithAnnotationTypePattern.java:55 at org.aspectj.weaver.patterns.TypePattern.matchesStatically TypePattern.java:132 at org.aspectj.weaver.patterns.TypePattern.matches TypePattern.java:146 at org.aspectj.weaver.patterns.SignaturePattern.couldEverMatch SignaturePattern.java:999 at org.aspectj.weaver.patterns.DeclareAnnotation.couldEverMatch DeclareAnnotation.java:483 at org.aspectj.weaver.bcel.BcelClassWeaver.getMatchingSubset BcelClassWeaver.java:1065 at org.aspectj.weaver.bcel.BcelClassWeaver.weaveDeclareAtField BcelClassWeaver.java:1301 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:445 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:100 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1687 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1631 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1394 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1180 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:514 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving AjPipeliningCompilerAdapter.java:447 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:432 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:98 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:652 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:392 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1021 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:268 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:181 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:371</description>
    <commit commitTime="2011-11-07 16:17:10" id="942da06"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java</file>
    </fixedFiles>
  </bug>
  <bug id="371684" reportTime="2012-02-15 17:16:00">
    <summary>type construction for signature makes mistakes with wildcards</summary>
    <description>If you have a type with multiple type params, like this: Foo&amp;lt;?,T&amp;gt; the signature is: LFoo&amp;lt;*TT;&amp;gt;; and the handling of * is not working in TypeFactory. If that signature is passed in it will actually build: Foo&amp;lt;?&amp;gt; having lost the second type parameter, this breaks code later that has expectations on the number of params. e.g. ArrayIndexOutOfBoundsException when building parameterization map</description>
    <commit commitTime="2012-02-15 14:25:02" id="89756cd"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/TypeFactory.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="371998" reportTime="2012-02-19 15:42:00">
    <summary>org.aspectj.weaver.BCException compiling @DeclareParents with value using "||"</summary>
    <description>Build Identifier: 20110916-0149 Using: import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.DeclareParents; @Aspect public class AspectTest { private interface X {} private static class XImpl {} @DeclareParents value="java.lang.Runnable || java.util.concurrent.Callable", defaultImpl=XImpl.class private X xImpl; } Throws: org.aspectj.weaver.BCException at org.aspectj.weaver.patterns.ExactTypePattern.resolveBindings ExactTypePattern.java:312 at org.aspectj.weaver.patterns.OrTypePattern.resolveBindings OrTypePattern.java:121 at org.aspectj.weaver.bcel.AtAjAttributes.handleDeclareParentsAnnotation AtAjAttributes.java:746 at org.aspectj.weaver.bcel.AtAjAttributes.readAj5ClassAttributes AtAjAttributes.java:384 at org.aspectj.weaver.bcel.BcelObjectType.ens ... \Program Files\Java\jre6\lib\ext\sunjce_provider.jar;C:\Users\xxx\software\eclipse-j2ee\\plugins/org.eclipse.equinox.launcher_1.2.0.v20110502.jar; Current workaround is to use multiple DeclareParents annotations on different variables. Reproducible: Always Steps to Reproduce: 1. Create new class given the code in the details. 2. Save and compile in Eclipse.</description>
    <commit commitTime="2012-03-02 08:17:44" id="f37c56e"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</file>
    </fixedFiles>
  </bug>
  <bug id="373195" reportTime="2012-03-04 01:25:51">
    <summary>Memory leak in CompilationAndWeavingContext leading to PermGen OOME</summary>
    <description>Build Identifier: 1.6.11 The static contextMap in CompilationAndWeavingContext keeps strong references to Thread instances (which in turn strongly reference their contextClassLoader which prevents all kinds of stuff from unloading). In my particular use case I am running unit tests, each in their own WeavingURLClassLoader, but these ClassLoaders are never released, and running several unit tests at once leads to PermGen OutOfMemoryError. Using -XX:+HeapDumpOnOutOfMemory and analyzing the resulting heap dump in Eclipse Memory Analyzer points to CompilationAndWeavingContext.contextMap. I am able to work around this issue by executing the following at the end of each unit test to clear out this contextMap: CompilationAndWeavingContext.setMultiThreaded(false); CompilationAndWeavingContext.reset(); CompilationAndWeavingContext.setMultiThreaded(true); I am also able to resolve this issue (more satisfactorily) by patching CompilationAndWeavingContext and changing contextMap into a ThreadLocal. Reproducible: Always</description>
    <commit commitTime="2012-03-07 00:06:40" id="6defb4e"/>
    <fixedFiles>
      <file>bridge/src/org/aspectj/bridge/context/CompilationAndWeavingContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="374745" reportTime="2012-03-20 07:19:00">
    <summary>Performance regression in 1.6.12</summary>
    <description>Build Identifier: 1.6.12 The application I'm working on takes 152 seconds to start under the 1.6.11 LTW agent, but takes 37 *minutes* to start under the 1.6.12 LTW agent. Profiling it under the 1.6.12 LTW agent shows the extra time is spent in ReferenceType.addDependentType being called from TypeFactory.createParameterizedType . Under a debugger, I can see that the ReferenceType.derivativeTypes HashSet is getting very very big because ResolvedType.equals falls back to ==, so there are lots of 'duplicates' in the HashSet , which is causing each successive add to get slower and slower. It looks like derivativeTypes was changed from ArrayList to HashSet in 1.6.12 as part of the changeset for bug 344005 , which seems to be what caused the performance regression. Changing derivativeTypes back to ArrayList solves the issue and brings startup times back in line with 1.6.11. I'm not sure if this is the best fix though, I started thinking about storing parameterized types in World.typeMap to remove duplicate instances globally and/or changing ResolvedType.equals to remove duplicate instances inside of derivativeTypes, but quickly got in over my head. Reproducible: Always</description>
    <commit commitTime="2012-03-23 16:44:03" id="549d227"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/TypeFactory.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/TypeVariableReferenceType.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/UnresolvedType.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/UnresolvedTypeVariableReferenceType.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/World.java</file>
    </fixedFiles>
  </bug>
  <bug id="374964" reportTime="2012-03-21 14:02:00">
    <summary>Performance - improve pointcut expensiveness calculation</summary>
    <description>Build Identifier: 1.6.12 I'm able to reduce the AspectJ LTW startup overhead on the app I'm working on, from 95 seconds down to 47 seconds, just by switching the "expensiveness" of THIS_OR_TARGET and CALL in PointcutEvaluationExpenseComparator. It seems to make sense to me that THIS_OR_TARGET is more expensive since it requires type matching under profiler ExactTypePattern.matchesInstanceof is what shows up as very expensive , whereas CALL can evaluate very quickly in most cases since it just fails to match on method name. I'm not sure if this is specific to my particular usage, but cutting 50% of the LTW startup is a very nice improvement. If you think this change doesn't make sense for everyone, I can work on a patch that makes this configurable somehow. Thanks. Reproducible: Always</description>
    <commit commitTime="2012-03-23 18:17:09" id="f85631f"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/PointcutEvaluationExpenseComparator.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="376139" reportTime="2012-04-05 00:00:00">
    <summary>AspectJ throws Nullpointer after its IDE plugin update</summary>
    <description>Build Identifier: Version: Indigo Service Release 2 Build id: 20120216-1857 java.lang.NullPointerException at org.aspectj.org.eclipse.jdt.internal.compiler.ast.SwitchStatement.analyseCode SwitchStatement.java:118 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode MethodDeclaration.java:104 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode TypeDeclaration.java:730 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseC ... oBuildJob.run AutoBuildJob.java:241 at org.eclipse.core.internal.jobs.Worker.run Worker.java:54 Compile error: NullPointerException thrown: null Reproducible: Always Steps to Reproduce: 1. After updating the eclipse plugin</description>
    <commit commitTime="2012-04-05 15:17:56" id="62fca9a"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="376351" reportTime="2012-04-09 15:13:00">
    <summary>attribute problems with Java 7 compilation</summary>
    <description>From the mailing list, this goes wrong: ***R.java*** public class R{ public static void main String[] args {System.out.println new R .getClass .getName ;} } ***R1.java*** public class R1 extends R {} ***RAj.aj*** public aspect RAj { private ThreadLocal&amp;lt;Object&amp;gt; inAspect = new ThreadLocal&amp;lt;Object&amp;gt; ; pointcut createR : execution R.new ; Object around : createR { System.out.println "aspect:" + inAspect.get + ":" + this ; if inAspect.get != null { return proceed ; } else { inAspect.set this ; return new R1 ; } } } compile command: /cygdrive/c/Program\ Files/Java/aspectj-1.6.12/bin/ajc.bat -source 1.7 -outxml -outjar araj.jar -classpath "aspectjrt.jar;." RAj.aj run: /cygdrive/c/Program\ Files/Java/aspectj-1.6.12/bin/aj5.bat -classpath ".;./araj.jar" R errors: Apr 06, 2012 1:37:40 PM org.aspectj.weaver.tools.Jdk14Trace error SEVERE: register definition failed java.lang.RuntimeException: Problem processing attributes in RAj at org.aspectj.weaver.bcel.BcelObjectType.ensureAspectJAttributesUnpacked BcelObjectType.java:385</description>
    <commit commitTime="2012-04-09 14:15:55" id="be063b8"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/asm/StackMapAdder.java</file>
    </fixedFiles>
  </bug>
  <bug id="376990" reportTime="2012-04-17 11:35:00">
    <summary>iajc does not support source compliance level 1.7</summary>
    <description>Build Identifier: Version: 3.7.2 Build id: M20120208-0800 I am using AspectJ 1.7.0.M1. I changed the examples build.xml to use a source compliance level of 1.7 and verbose=true as follows: &amp;lt;iajc destdir="${classes.dir}" verbose="true" source="1.7" argfiles="${list}" When I run this using 'ant bean' I get the following line: [iajc] ignored: -source 1.7 at E:\aspectj1.7\doc\examples\build.xml:136: I have tried running the compiler 'ajc' directly specifying -source 1.7 and that works. I am trying to use this on a large development project that uses AspectJ and has been migrated over to Java 7. The project uses ant to do builds so it is critical that iajc support 1.7. The project can't be built if any Java 7 features are used in the source files which defeats the whole purpose of moving to Java 7. Reproducible: Always Steps to Reproduce: 1.Change the examples build.xml to use a source compliance level of 1.7 and verbose=true as follows: &amp;lt;iajc destdir="${classes.dir}" verbose="true" source="1.7" argfiles="${list}" 2.Run using 'ant bean' I get the following line: [iajc] ignored: -source 1.7 at E:\aspectj1.7\doc\examples\build.xml:136:</description>
    <commit commitTime="2012-04-17 09:39:41" id="89c178f"/>
    <fixedFiles>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="382723" reportTime="2012-06-15 06:31:00">
    <summary>An package-level abstract generic privileged aspect, which extends an abstract generic aspect, gives a IlligalStateException on a method call in around advice</summary>
    <description>Build Identifier: AJDT Version: 2.1.3.e37x-20110628-1900 / AspectJ version: 1.6.12.20110613132200 / eclipse.buildId=M20120208-0800 around advice targetting a generic constructor call in a package visability generic privileged abstract apsect, which extends a abstract generic aspect gives a compiler error when in this around advice a method call is made to a method defined in the aspect, superaspect or abstract defined methods. This only affects around advice and only when the aspect is package-visible and privileged. Workaround: either make the aspect public or remove privileged. Compiler output: Compile error: IllegalStateException thrown: Use generic type, not parameterized type StackTrace: java.lang.IllegalStateException: Use generic type, not parameterized type at org.aspectj.weaver.ResolvedTypeMunger.&amp;lt;init&amp;gt; ResolvedTypeMunger.java:72 at org.aspectj.weaver.PrivilegedAccessMunger.&amp;lt;init&amp;gt; PrivilegedAccessMunger.java:31 at org.aspectj.weaver.CrosscuttingMembers.addPrivilegedAccesses CrosscuttingMembers.java:232 at org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers ResolvedType.java:756 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect CrosscuttingMembersSet.java:89 at org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect CrosscuttingMembersSet.java:69 at org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave BcelWeaver.java:512 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.ensureWeaverInitialized AjPipeliningCompilerAdapter.java:529 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:509 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving AjPipeliningCompilerAdapter.java:447 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:432 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:98 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:652 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:392 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1021 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:305 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:185 at org.aspectj.ajde.core.internal.AjdeCoreBuildManager.performBuild AjdeCoreBuildManager.java:127 at org.aspectj.ajde.core.AjCompiler.build AjCompiler.java:91 at org.eclipse.ajdt.core.builder.AJBuilder.build AJBuilder.java:257 at org.eclipse.core.internal.events.BuildManager$2.run BuildManager.java:728 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:42 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:199 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:239 at org.eclipse.core.internal.events.BuildManager$1.run BuildManager.java:292 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:42 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:295 at org.eclipse.core.internal.events.BuildManager.basicBuildLoop BuildManager.java:351 at org.eclipse.core.internal.events.BuildManager.build BuildManager.java:374 at org.eclipse.core.internal.events.AutoBuildJob.doBuild AutoBuildJob.java:143 at org.eclipse.core.internal.events.AutoBuildJob.run AutoBuildJob.java:241 at org.eclipse.core.internal.jobs.Worker.run Worker.java:54 Session data: eclipse.buildId=M20120208-0800 java.version=1.6.0_22 java.vendor=Sun Microsystems Inc. BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=nl_NL Command-line arguments: -data C:\workspace\ -os win32 -ws win32 -arch x86_64 Reproducible: Always Steps to Reproduce: 1. In a empty AspectJ project create the file Foo.java: import java.util.LinkedList; public class Foo { public LinkedList bar { new LinkedList ; return null; } } 2. Create the file FooAspect.aj containing: import java.util.AbstractList; import java.util.List; abstract aspect FooAspectParent&amp;lt;T extends List&amp;gt; { protected int getNumber int k { return -1*k; } } abstract privileged aspect FooAspect&amp;lt;T extends AbstractList&amp;gt; extends FooAspectParent&amp;lt;T&amp;gt; { pointcut pc : call T.new ; T around :pc { //getNumber 1 ; //&amp;lt;-- method call to superAspect fails //method ; // &amp;lt;-- method call to abstract local defined method fails //localMethod ; //&amp;lt;-- method call to local private method fails Math.random ; //&amp;lt;-- works hashCode ; //&amp;lt;-- works return null; } private void localMethod {} protected abstract T method ; } 3. Uncomment one or more of the three commentted functions calls in the around advice and the compiler will reproduce the error. note: this example with List which is a generic object is just for illustration of hierachy, this problem occured on production code when doing the same with non-generic, but hierachal objects. This way was the easiest to issolate and reproduce the bug the fastest.</description>
    <commit commitTime="2012-06-15 11:29:35" id="ba9d43c"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AccessForInlineVisitor.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="382189" reportTime="2012-06-10 10:48:00">
    <summary>NPE in BcelTypeMunger.createBridgeMethod</summary>
    <description>Build Identifier: Since I updated to version AspectJ Development Tools 2.2.0.e37x-20120529-0900 I get during compile: java.lang.NullPointerException at org.aspectj.weaver.bcel.BcelTypeMunger.createBridgeMethod BcelTypeMunger.java:1325 at org.aspectj.weaver.bcel.BcelTypeMunger.createAnyBridgeMethodsForCovariance BcelTypeMunger.java:1272 at org.aspectj.weaver.bcel.BcelTypeMunger.mungeNewMethod BcelTypeMunger.java:971 at org.aspectj.weaver.bcel.BcelTypeMunger.munge BcelTypeMunger.java:108 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeave ... Before, I had AspectJ Development Tools 2.2.0.e37x-20120507-1400 and the same project compiled without that exception. Reproducible: Always</description>
    <commit commitTime="2012-06-15 17:42:25" id="a748303"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc170/Ajc170Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="384189" reportTime="2012-07-03 14:06:00">
    <summary>make ajcore file creation optional</summary>
    <description>Although cores are useful, there may be situations where you are working around whatever they are reporting and are perhaps unable to pick up a later version of AJ that includes the fix. In these situations it might be helpful to make the creation of cores optional, through a sys prop.</description>
    <commit commitTime="2012-07-03 13:46:29" id="5d0e186"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/Dump.java</file>
    </fixedFiles>
  </bug>
  <bug id="384398" reportTime="2012-07-05 13:42:00">
    <summary>Type Mismatch error when using inner classes contained in generic types within ITDs</summary>
    <description>Please see attached example project. I get the following strange compiler error: Type mismatch: cannot convert from A&amp;lt;T&amp;gt;.InnerA&amp;lt;&amp;gt; to A.InnerA BAspect.aj /AspectJInnerclassInGenericTypeBug/src/de/example line 12</description>
    <commit commitTime="2012-07-10 10:18:35" id="bf949d3"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseFactory.java</file>
      <file>tests/src/org/aspectj/systemtest/AllTests17.java</file>
    </fixedFiles>
  </bug>
  <bug id="386049" reportTime="2012-07-26 10:15:00">
    <summary>Error "must implement abstract inter-type declaration" even though build is fine</summary>
    <description>Build Identifier: Version: 4.2.0 Build id: I20120608-1400 I have an AspectJ project with Java classes like this schematically, not the full code : public abstract class BasicFilter { protected abstract String getLogMessage ; } public class PreJTidyFilter extends BasicFilter { @Override protected String getLogMessage { return "Fixing HTML so as to enable JTidy to parse it"; } } public class JTidyFilter extends BasicFilter { @Override protected String getLogMessage { return "Converting to clean, pretty-printed XHTML"; } } public class XOMUnclutterFilter extends BasicFilter { @Override protected String getLogMessage { return "Removing clutter header, footer, navigation, ads and fixing structure"; } } ################################### I also have this aspect: privileged aspect LoggingAspect { pointcut runFilter : execution * BasicFilter.run ; void around BasicFilter filter : runFilter &amp;amp;&amp;amp; this filter { String message = filter.getLogMessage ; SimpleLogger.verbose message, IndentMode.INDENT_AFTER ; proceed filter ; SimpleLogger.dedent ; } } ################################### The aspects compile and run fine, but the Eclipse error view always shows two errors: must implement abstract inter-type declaration: java.lang.String de.scrum_master.galileo.filter.BasicFilter.getLogMessage XOMUnclutterFilter.java must implement abstract inter-type declaration: java.lang.String de.scrum_master.galileo.filter.BasicFilter.getLogMessage JTidyFilter.java The errors even re-occur after cleaning and rebuilding the project. But as I said, the code runs just fine. Please note: The funny thing is that in those two classes I just need to add and remove whitespace, then save the file, and the error goes away file by file. As soon as I rebuild though, the errors are there again. Please also note: The errors always are shown for subclasses XOMUnclutterFilter and JTidyFilter, but strangely *not* for subclass PreJTidyFilter, even though it is affected by the same pointcut and advice as the others and also subclassing the same base class. Reproducible: Always Steps to Reproduce: I do not know if there is a way for you to reproduce this behaviour with the little code snippets I provided above, but here it happens all the time. If you would like to clone my project, it is located at https://github.com/kriegaex/Galileo-Openbook-Cleaner . My Eclipse was configured via Yoxos, but AJDT Version: 2.2.0.e42x-RELEASE-20120703-2200 AspectJ version: 1.7.0.20120703164200 was installed by me manually because right after the Juno release AJDT were not available via Yoxos yet I do not know if they are now .</description>
    <commit commitTime="2012-08-22 12:43:56" id="7c6e936"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc171/Ajc171Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="387718" reportTime="2012-08-21 13:30:00">
    <summary>RuntimeException when trying to compile broken code</summary>
    <description>java.lang.RuntimeException at org.aspectj.weaver.NameMangler.makeVisibilityName NameMangler.java:297 at org.aspectj.weaver.NameMangler.interMethod NameMangler.java:242 at org.aspectj.weaver.AjcMemberMaker.interMethod AjcMemberMaker.java:538 at org.aspectj.ajdt.internal.compiler.problem.AjProblemReporter.methodMustOverride AjProblemReporter.java:385 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements M ... dJob.java:241 at org.eclipse.core.internal.jobs.Worker.run Worker.java:54 Compile error: RuntimeException thrown: protected inter-types not allowed</description>
    <commit commitTime="2012-08-22 13:13:54" id="cbb6f5a"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
    </fixedFiles>
  </bug>
  <bug id="387444" reportTime="2012-08-16 20:46:00">
    <summary>Softening exception in try-with-resources</summary>
    <description>From this post on the Eclipse AJDT forum: http://www.eclipse.org/forums/index.php/t/369503/ When softening exceptions, AspectJ doesn't seem to soften the exception thrown by the automatic close invocation when using the try-with-resources syntax introduced in Java 7 often an IOException . eg: --- In Java code: try BufferedReader reader = new BufferedReader new FileReader "test.txt" { System.out.println reader.readLine ; } In AspectJ code: declare soft: IOException: within * --- The above will result in a compilation error, "Unhandled exception type IOException thrown by automatic close invocation". A workaround is to add a catch for the IOException, or to add a throws clause to the method, which kind of makes the exception softening somewhat redundant. If you're using AJDT, doing these workarounds then adds AJDT add markers to the try-with-resources block, one of which looks like it's for the automatic close - maybe the 'unhandled exception' error is preventing AspectJ from properly softening the exception?</description>
    <commit commitTime="2012-08-23 12:19:58" id="76d695f"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc171/Ajc171Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="384401" reportTime="2012-07-05 14:04:00">
    <summary>NPE when no pointcut in afterthrowing annotation style advice</summary>
    <description>From the mailing list: import org.aspectj.lang.JoinPoint; import org.aspectj.lang.annotation.AfterThrowing; import org.aspectj.lang.annotation.Aspect; @Aspect public class X { // @AfterThrowing pointcut="execution * * .. ",throwing = "e" @AfterThrowing throwing = "e" public void bizLoggerWithException JoinPoint thisJoinPoint,Throwable e { // .....// do some stuff } } class BizLoggable {}</description>
    <commit commitTime="2012-08-23 13:05:24" id="55ebaa1"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/ValidateAtAspectJAnnotationsVisitor.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc171/Ajc171Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="388971" reportTime="2012-09-06 12:34:00">
    <summary>Double Synthetic attributes on some around advice members</summary>
    <description>Some of the support members in aspects were getting Synthetic attributes added twice once when compiled, once when used as an aspect library . Some JVMs appear to flag this as a verify error. The fix is simply to check before adding to make sure the attribute isn't added twice.</description>
    <commit commitTime="2012-09-06 09:37:31" id="c2ff74f"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="389750" reportTime="2012-09-17 14:25:00">
    <summary>Inconsistent classfile encountered: The undefined type parameter xxx is referenced from within yyy</summary>
    <description>With the declare parents pattern below, I'm getting this **runtime** error compiler completes ok : Inconsistent classfile encountered: The undefined type parameter ID is referenced from within PersistableAspect If I remove the generics part of the interface declaration, the error goes away. Here's the pattern: interface: ========== package example.trait; // imports... public interface Persistable&amp;lt;ID extends Serializable&amp;gt; { Object getOid ; ID getId ; String getIdString ; long getVersion ; } annotation: =========== package example.anno; // imports... @Target TYPE @Retention RUNTIME @Trait public @interface Persistable { String in default "MONGO"; StoreType inAsEnum default StoreType.MONGO; String id default "STRING"; IdType idAsEnum default IdType.STRING; } aspect: ======= package example.aspect; // imports... public privileged aspect PersistableAspect { public interface I&amp;lt;ID extends Serializable&amp;gt; extends example.trait.Persistable&amp;lt;ID&amp;gt; { } public interface L extends I&amp;lt;Long&amp;gt; { } public interface S extends I&amp;lt;String&amp;gt; { } declare parents : @Persistable id="LONG" * implements L; declare parents : @Persistable id="STRING" * implements S; // remaining code is ITDs introducing vars &amp;amp; methods... }</description>
    <commit commitTime="2012-09-19 10:19:17" id="b9c7a19"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/AstUtil.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/InterTypeMethodDeclaration.java</file>
      <file>tests/src/org/aspectj/systemtest/AllTests17.java</file>
    </fixedFiles>
  </bug>
  <bug id="389752" reportTime="2012-09-17 14:47:00">
    <summary>declare parents &amp; @type not matching on annotation properties of enum types</summary>
    <description>NOTE: real project private git repo demonstrating bug has been shared with Andy Clement privately. I'm reporting bug as Andy requested with as much info as I feel I can. I have a case where 'declare parents' and 'declare @type' instructions are not being applied because their type patterns, which use annotations whose properties are of enumerated types, are not matching. Below find the relevant artifacts and their shapes. The lines in the aspect PersistableJpaAspect that are not matching as they should are the 'declare parents' and 'declare @type'. If I change the annotation properties to be of type String and change the type patterns to use string literals see "matches" comments in annotation: StoreType.JPA =&amp;gt; "JPA" and IdType.LONG =&amp;gt; "LONG" , the matching works properly. enums: ====== public enum StoreType { MONGO, JDO, JPA; } ===== public enum IdType { LONG, STRING; } annotation: =========== public @interface Persistable { StoreType in default StoreType.MONGO; // doesn't match // matches: String in default "MONGO"; IdType id default IdType.STRING; // doesn't match // matches: String id default "STRING"; } aspect: ======= public abstract privileged aspect PersistableAspect { public interface I extends ....trait.interfaces.persistence.Persistable { long version ; void version long version ; } public interface L extends I { Long idLong ; void idLong Long id ; } public interface S extends I { String idString ; void idString String id ; } declare @type : I+ : @Configurable; // ... } ===== public privileged aspect PersistableJpaAspect extends PersistableAspect { public interface JL extends L { } public interface JS extends S { } declare parents : @Persistable id = IdType.LONG, in = StoreType.JPA * implements JL; declare parents : @Persistable id = IdType.STRING, in = StoreType.JPA * implements JS; declare @type : @Persistable in="JPA" JL+ : @Entity; declare @type : @Persistable in="JPA" JS+ : @Entity; // ... }</description>
    <commit commitTime="2012-09-19 16:35:53" id="0d69bd3"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/EnumAnnotationValue.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/StandardAnnotation.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="389456" reportTime="2012-09-12 19:05:00">
    <summary>NPE in EclipseTypeMunger.mungeNewMethod</summary>
    <description>Likely related to: 302460 NullPointerException in BcelTypeMunger.mungeNewMethod Seems to have been fixed there, but seems to still be present in the EclipseTypeMunger. kerouac:base giuliano$ gradle compileTestJava The reportsDir property has been deprecated and will be removed in the next version of Gradle. Please use the reporting.baseDir property instead. :processResources UP-TO-DATE :compileTestJava [ant:iajc] /Users/giuliano/baynote/src-dev/ramsay/base/src/test/java/com/baynote/base/BaynoteObjectsTests.java [error] Internal compiler error [ant:iajc] java.lang.NullPointerException [ant:iajc] at org.aspectj.ajdt.internal.compiler.lookup.EclipseTypeMunger.mungeNewMethod EclipseTypeMunger.java:143 [ant:iajc] at org.aspectj.ajdt.internal.compiler.lookup.EclipseTypeMunger.munge EclipseTypeMunger.java:120 [ant:iajc] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:813 [ant:iajc] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:652 [ant:iajc] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.createBinaryTypeFrom AjLookupEnvironment.java:1398 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom LookupEnvironment.java:599 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.accept Compiler.java:276 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType LookupEnvironment.java:113 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve UnresolvedReferenceBinding.java:49 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType BinaryTypeBinding.java:99 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getTypeOrPackage PackageBinding.java:167 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.getTypeOrPackage Scope.java:2507 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.getType Scope.java:2228 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.SingleTypeReference.getTypeBinding SingleTypeReference.java:44 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType TypeReference.java:142 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.resolve LocalDeclaration.java:148 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements AbstractMethodDeclaration.java:433 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements MethodDeclaration.java:196 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve AbstractMethodDeclaration.java:404 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1121 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1200 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve CompilationUnitDeclaration.java:366 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:636 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:392 [ant:iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1021 [ant:iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:268 [ant:iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:181 [ant:iajc] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 [ant:iajc] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 [ant:iajc] at org.aspectj.tools.ajc.Main.run Main.java:371 [ant:iajc] at org.aspectj.tools.ajc.Main.runMain Main.java:248 [ant:iajc] at org.aspectj.tools.ajc.Main.main Main.java:84 [ant:iajc] [ant:iajc] no source information available [ant:iajc] ABORT [ant:iajc] [ant:iajc] Exception thrown from AspectJ 1.6.11 [ant:iajc] [ant:iajc] This might be logged as a bug already -- find current bugs at [ant:iajc] http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&amp;amp;component=Compiler [ant:iajc] [ant:iajc] Bugs for exceptions thrown have titles File:line from the top stack, [ant:iajc] e.g., "SomeFile.java:243" [ant:iajc] [ant:iajc] If you don't find the exception below in a bug, please add a new bug [ant:iajc] at http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ [ant:iajc] To make the bug a priority, please include a test program [ant:iajc] that can reproduce this exception. [ant:iajc] [ant:iajc] when batch building BuildConfig[null] #Files=5 AopXmls=#0 [ant:iajc] null [ant:iajc] java.lang.NullPointerException [ant:iajc] at org.aspectj.ajdt.internal.compiler.lookup.EclipseTypeMunger.mungeNewMethod EclipseTypeMunger.java:143 [ant:iajc] at org.aspectj.ajdt.internal.compiler.lookup.EclipseTypeMunger.munge EclipseTypeMunger.java:120 [ant:iajc] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:813 [ant:iajc] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:652 [ant:iajc] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.createBinaryTypeFrom AjLookupEnvironment.java:1398 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom LookupEnvironment.java:599 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.accept Compiler.java:276 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType LookupEnvironment.java:113 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve UnresolvedReferenceBinding.java:49 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType BinaryTypeBinding.java:99 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getTypeOrPackage PackageBinding.java:167 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.getTypeOrPackage Scope.java:2507 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.getType Scope.java:2228 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.SingleTypeReference.getTypeBinding SingleTypeReference.java:44 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType TypeReference.java:142 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.resolve LocalDeclaration.java:148 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements AbstractMethodDeclaration.java:433 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements MethodDeclaration.java:196 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve AbstractMethodDeclaration.java:404 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1121 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve TypeDeclaration.java:1200 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve CompilationUnitDeclaration.java:366 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:636 [ant:iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:392 [ant:iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1021 [ant:iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:268 [ant:iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:181 [ant:iajc] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 [ant:iajc] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 [ant:iajc] at org.aspectj.tools.ajc.Main.run Main.java:371 [ant:iajc] at org.aspectj.tools.ajc.Main.runMain Main.java:248 [ant:iajc] at org.aspectj.tools.ajc.Main.main Main.java:84 [ant:iajc] [ant:iajc] Sep 12, 2012 4:03:20 PM org.aspectj.weaver.tools.Jdk14Trace info [ant:iajc] INFO: Dumping to /Users/giuliano/baynote/src-dev/ramsay/base/./ajcore.20120912.160320.442.txt [ant:iajc] [ant:iajc] 1 fail|abort, 1 error FAILURE: Build failed with an exception. * Where: Script '/Users/giuliano/baynote/src-dev/ramsay/base/aspectJ.gradle' line: 46 * What went wrong: Execution failed for task ':compileTestJava'. &amp;gt; compile errors: 255 * Try: Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. BUILD FAILED Total time: 27.316 secs</description>
    <commit commitTime="2012-09-20 13:38:35" id="b8ebdc3"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="389967" reportTime="2012-09-20 02:38:00">
    <summary>Weaved aspects mechanism does not take into account modified classes</summary>
    <description>The current caching mechanism assumes that if the same class is encountered then its cached weaved version can be used. However, the mechanism uses only the fully qualified class name to identify the class and does not take into account the fact that the class bytes may have changed e.g., the user re-compiled and re-deployed some changes to the same class .</description>
    <commit commitTime="2012-10-01 13:22:37" id="9a3cc2b"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/WeavingURLClassLoader.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/tools/GeneratedClassHandler.java</file>
      <file>util/src/org/aspectj/util/LangUtil.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/WeavingAdaptor.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/cache/CacheBacking.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/cache/CacheStatistics.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/cache/CachedClassEntry.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/cache/CachedClassReference.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/cache/DefaultCacheFactory.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/cache/DefaultCacheKeyResolver.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/cache/DefaultFileCacheBacking.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/cache/GeneratedCachedClassHandler.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/cache/WeavedClassCache.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/tools/cache/DefaultFileCacheBackingTest.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/tools/cache/WeavedClassCacheTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="391123" reportTime="2012-10-04 10:14:00">
    <summary>Added support for more cache backing s</summary>
    <description>Created attachment 221903 [details] Asynchronous file cache backing s patch Added support for asynchronouse cache backings - one uses a "flat" model similar to the default cache backing only does the updates in the background. The other uses a ZIP file to hold the cached bytes. Attached is a patch file for the fix/feature</description>
    <commit commitTime="2012-10-29 12:46:03" id="df1823b"/>
    <fixedFiles>
      <file>build/src/org/aspectj/internal/tools/ant/taskdefs/Checklics.java</file>
      <file>util/src/org/aspectj/util/LangUtil.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/cache/AbstractIndexedFileCacheBacking.java</file>
      <file>weaver/src/org/aspectj/weaver/tools/cache/DefaultFileCacheBacking.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/tools/cache/CacheTests.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/tools/cache/DefaultCacheKeyResolverTest.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/tools/cache/DefaultFileCacheBackingTest.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/tools/cache/SimpleClassCacheTest.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/tools/cache/WeavedClassCacheTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="394234" reportTime="2012-11-13 18:48:00">
    <summary>Invalid StackMapTable generated in Java 7</summary>
    <description>When compiling for Java 7, AspectJ can compute an invalid StackMapTable. The verifier will throw a ClassNotFoundException when the generated class is loaded. Example: class Parent&amp;lt;T&amp;gt; {} class ChildA&amp;lt;T&amp;gt; extends Parent&amp;lt;T&amp;gt; {} class ChildB&amp;lt;T&amp;gt; extends Parent&amp;lt;T&amp;gt; {} public Object methodWithBadStackMapTable boolean value { return value ? new ChildA&amp;lt;String&amp;gt; : new ChildB&amp;lt;String&amp;gt; ; } javap shows the computed StackMapTable to be: StackMapTable: number_of_entries = 2 frame_type = 15 /* same */ frame_type = 71 /* same_locals_1_stack_item */ stack = [ class "Parent&amp;lt;T&amp;gt;" ] when it should be: StackMapTable: number_of_entries = 2 frame_type = 15 /* same */ frame_type = 71 /* same_locals_1_stack_item */ stack = [ class Parent ]</description>
    <commit commitTime="2012-11-14 15:41:57" id="fc55431"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/asm/StackMapAdder.java</file>
    </fixedFiles>
  </bug>
  <bug id="395221" reportTime="2012-11-27 17:34:00">
    <summary>weird error about unbound formals when mixing generics with annotation style</summary>
    <description>From the mailing list: I have following problem with following Aspect: @Aspect public class CounterAspect extends AbstractMoskitoAspect { @Around value = "execution * * .. &amp;amp;&amp;amp; @annotation method " public Object countMethod ProceedingJoinPoint pjp, Count method throws Throwable { return count pjp, method.producerId , method.subsystem , method.category ; } @Around value = "execution * * .. &amp;amp;&amp;amp; @annotation method " public Object countByParameter ProceedingJoinPoint pjp, CountByParameter method throws Throwable { return countByParameter pjp, method.producerId , method.subsystem , method.category ; } @Around value = "execution * *.* .. &amp;amp;&amp;amp; @within clazz " public Object countClass ProceedingJoinPoint pjp, Count clazz throws Throwable { return count pjp, clazz.producerId , clazz.subsystem , clazz.category ; } private Object countByParameter ProceedingJoinPoint pjp, String aProducerId, String aSubsystem, String aCategory throws Throwable { .... It works. However, since I have two similar aspects that differ only in using some internal classes, I made my super class using generics: public class AbstractMoskitoAspect&amp;lt;S extends IStats&amp;gt; { @Aspect public class CounterAspect extends AbstractMoskitoAspect&amp;lt;CounterStats&amp;gt; { this breaks the build instantly with the very unhelpful error message: [ERROR] Failed to execute goal org.codehaus.mojo:aspectj-maven-plugin:1.4:compile default on project moskito-aop: Compiler errors: [ERROR] error at @Around value = "execution * * .. &amp;amp;&amp;amp; @annotation method " [ERROR] ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [ERROR] /Users/another/projects/moskito/moskito-aop/java/net/anotheria/moskito/aop/aspect/CounterAspect.java:24:0::0 the parameter pjp is not bound in [all branches of] pointcut [ERROR] error at @Around value = "execution * * .. &amp;amp;&amp;amp; @annotation method " [ERROR] ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [ERROR] /Users/another/projects/moskito/moskito-aop/java/net/anotheria/moskito/aop/aspect/CounterAspect.java:29:0::0 the parameter pjp is not bound in [all branches of] pointcut [ERROR] error at @Around value = "execution * *.* .. &amp;amp;&amp;amp; @within clazz " [ERROR] ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [ERROR] /Users/another/projects/moskito/moskito-aop/java/net/anotheria/moskito/aop/aspect/CounterAspect.java:34:0::0 the parameter pjp is not bound in [all branches of] pointcut what am i doing wrong here?</description>
    <commit commitTime="2012-11-27 14:52:33" id="3e5af0f"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/AndPointcut.java</file>
    </fixedFiles>
  </bug>
  <bug id="398588" reportTime="2013-01-20 01:42:00">
    <summary>Using aspect 'requires' clause causes all aspects with 'requires' clauses not be loaded regardless</summary>
    <description>The usage of the 'requires' clause causes all aspects that have have 'requires' clauses not to be loaded regardless of whether the specified required class exists or not. Here is the scenario and why it happens: Let's assume we have a bunch of aspects A1, A2, A3, etc. - all with 'requires' clauses and all referencing classes that can be satisfied. ClassLoaderWeavingAdaptor#registerAspects goes over the aspects in a Definition one by one. It reaches aspect A1 and detects that it has a 'requires' clause, and so it invokes BcelWorld#addAspectRequires. This causes the aspect A1 and its required class to be registered in an internal 'aspectRequiredTypes' map. Then the code calls BcelWeaver#addLibraryAspect with A1 as the argument, which in turn calls addOrReplaceAspect which invokes 'hasUnsatisfiedDependency'. The 'hasUnsatisfiedDependency' has been written to run only ONCE - i.e., it checks if it has already run, and if so then it does nothing. Otherwise, it removes from the 'aspectRequiredTypes' map all the types that can be resolved, thus leaving only those that cannot be resolved. In other words, it assumes that after having run once !!! any remaining type must be unsatified. Thus, when it is invoked with A1, being the 1st time, it resolves the required type by A1 and leaves the 'aspectRequiredTypes' map empty - but also marks that no further running is required. When the ClassLoaderWeavingAdaptor#registerAspects loop reaches A2, it call BcelWorld#addAspectRequires since A2 also declares a 'requires' clause. This causes A2 and its referenced class to be mapped in the 'aspectRequiredTypes' map. However, when BcelWeaver#addLibraryAspect is called with A2 and the code reaches 'hasUnsatisfiedDependency' - the code assumes that it has already run which it has - with A1 , so it does not check if indeed A2's referenced class can be satisfied which we assume it can . In other words, all subsequent aspects A2, A3, etc. are declared as having unsatisified dependencies - which they don't. The quick bugfix seems rather simple: every time BcelWorld#addAspectRequires method is called, it should mark 'aspectRequiredTypesProcessed' as FALSE, in order to force a re-evaluation in case 'hasUnsatisfiedDependency' is called.</description>
    <commit commitTime="2013-01-21 10:46:15" id="96ebaae"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
    </fixedFiles>
  </bug>
  <bug id="399408" reportTime="2013-01-29 12:01:00">
    <summary>NPE in ExactAnnotationTypePattern.matches</summary>
    <description>[ERROR] java.lang.NullPointerException [ERROR] at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches ExactAnnotationTypePattern.java:137 [ERROR] at org.aspectj.weaver.patterns.ExactAnnotationTypePattern.matches ExactAnnotationTypePattern.java:96 [ERROR] at org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern.matchesExactly AnyWithAnnotationTypePattern.java:55 [ERROR] at org.aspectj.weaver.patterns.TypePattern.matchesStatically TypePattern.java:132 [ERROR] at org.aspectj.weaver.patterns.DeclareParents.match DeclareParents.java:63 [ERROR] at org.aspectj.weaver.patterns.DeclareParents.findMatchingNewParents DeclareParents.java:358 [ERROR] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareParents AjLookupEnvironment.java:885 [ERROR] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations AjLookupEnvironment.java:766 [ERROR] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveIntertypes AjLookupEnvironment.java:424 [ERROR] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveIntertypes AjLookupEnvironment.java:410 [ERROR] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:261</description>
    <commit commitTime="2013-01-29 09:20:10" id="d524403"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java</file>
    </fixedFiles>
  </bug>
  <bug id="399590" reportTime="2013-01-31 04:17:00">
    <summary>Bad generics signature generated</summary>
    <description>Please see http://jira.springsource.org/browse/SPR-5949 . The bug ID https://bugs.eclipse.org/bugs/show_bug.cgi?id=284297 was raised for this issue and fixed in version 1.6.6. We were using AspectJ version 1.7.1 and got hit by this bug today. During investigation we have found that the problem does not occur with AspectJ versions 1.6.6 - 1.6.8 but it resurfaces with version 1.6.9 and can be reproduced all the way up to the current version 1.7.1.</description>
    <commit commitTime="2013-02-04 13:33:26" id="4af4b1e"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/BoundedReferenceType.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="394535" reportTime="2012-11-18 10:54:00">
    <summary>Java throws OutOfMemory in call to Class.getGenericSuperclass on woven class</summary>
    <description>Ran AspectJ compiler on this class: public class Bug { @org.springframework.beans.factory.annotation.Configurable public static class ClassA&amp;lt;T extends Interface1 &amp;amp; Interface2&amp;gt; { } public static class ClassB extends ClassA&amp;lt;ClassB&amp;gt; implements Interface1, Interface2 { } public interface Interface1 { } public interface Interface2 { } public static void main String[] args throws Exception { System.out.println ClassB.class.getGenericSuperclass ; } } Then tried to execute the class' main method using Java 1.6.0-37 and got OOM: Exception in thread "main" java.lang.OutOfMemoryError: Java heap space at java.util.Arrays.copyOf Arrays.java:2760 at java.util.Arrays.copyOf Arrays.java:2734 at java.util.ArrayList.ensureCapacity ArrayList.java:167 at java.util.ArrayList.add ArrayList.java:351 at sun.reflect.generics.parser.SignatureParser.parseFormalTypeParameters SignatureParser.java:190 at sun.reflect.generics.parser.SignatureParser.parseZeroOrMoreFormalTypeParameters SignatureParser.java:177 at sun.reflect.generics.parser.SignatureParser.parseClassSignature SignatureParser.java:171 at sun.reflect.generics.parser.SignatureParser.parseClassSig SignatureParser.java:126 at sun.reflect.generics.repository.ClassRepository.parse ClassRepository.java:34 at sun.reflect.generics.repository.ClassRepository.parse ClassRepository.java:23 at sun.reflect.generics.repository.AbstractRepository.&amp;lt;init&amp;gt; AbstractRepository.java:56 at sun.reflect.generics.repository.GenericDeclRepository.&amp;lt;init&amp;gt; GenericDeclRepository.java:30 at sun.reflect.generics.repository.ClassRepository.&amp;lt;init&amp;gt; ClassRepository.java:30 at sun.reflect.generics.repository.ClassRepository.make ClassRepository.java:47 at java.lang.Class.getGenericInfo Class.java:2254 at java.lang.Class.getTypeParameters Class.java:621 at sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.validateConstructorArguments ParameterizedTypeImpl.java:39 at sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.&amp;lt;init&amp;gt; ParameterizedTypeImpl.java:35 at sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.make ParameterizedTypeImpl.java:77 at sun.reflect.generics.factory.CoreReflectionFactory.makeParameterizedType CoreReflectionFactory.java:86 at sun.reflect.generics.visitor.Reifier.visitClassTypeSignature Reifier.java:122 at sun.reflect.generics.tree.ClassTypeSignature.accept ClassTypeSignature.java:31 at sun.reflect.generics.repository.ClassRepository.getSuperclass ClassRepository.java:66 at java.lang.Class.getGenericSuperclass Class.java:677 at Bug.main Bug.java:18 Using JDK 1.7 we get a java.lang.reflect.GenericSignatureFormatError instead. Users mailing list discussion thread: http://dev.eclipse.org/mhonarc/lists/aspectj-users/msg13789.html This bug may be related to Bug #360253 . Reproducible test case will be attached.</description>
    <commit commitTime="2013-02-05 10:45:03" id="46f9079"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/TypeVariable.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="391384" reportTime="2012-10-09 00:09:00">
    <summary>WildAnnotationTypePattern.java:231</summary>
    <description>OK, I get that this is not supported and what I *want* here is matching on the existence of the supplied header *among* the headers in the String[] . A feature request might be in order, but a syntax for specifying how you want to match the array would be needed.... The bug that I'm reporting is that trying to *save* this program gets an error that pops up a dialog. This should just become another error marker. It might the compiler that has to change what it throws, but in the end it's the Eclipse IDE that ends up breaking from a user standpoint. RequestMapping.headers is of type String[] . public aspect Fail { pointcut testable : execution public * @RequestMapping headers="x-test=test" com.example..* .. ; } java.lang.RuntimeException at org.aspectj.weaver.patterns.WildAnnotationTypePattern.resolveAnnotationValues WildAnnotationTypePattern.java:231 at org.aspectj.weaver.patterns.WildAnnotationTypePattern.resolveBindings WildAnnotationTypePattern.java:325 at org.aspectj.weaver.patterns.WildTypePattern.resolveBindings WildTypePattern.java:657 at org.aspectj.weaver.patterns.SignaturePattern.resolveBindings SignaturePattern.java:81 at org.a ... n Worker.java:53 Compile error: RuntimeException thrown: Compiler limitation: annotation value support not implemented for type java.lang.String[]</description>
    <commit commitTime="2013-02-05 11:14:40" id="edb41e3"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/WeaverMessages.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc172/Ajc172Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="318878" reportTime="2010-07-05 07:23:00">
    <summary>Pertarget aspect instantiation is not thread-safe</summary>
    <description>The way in which pertarget aspects compiled with ajc check if a given target already has an aspect is not thread safe. When two different threads trigger an advice on a target object for the first time at the same time, sometimes the aspect for that target gets created twice. The following code demonstrates the problem: The following pertarget aspect will add itself to a synchronized set in another class in it's constructor. aspect Pertarget pertarget execution void foo { public Pertarget { Main.aspects.add this ; // Add this instance to the set in Main } before : execution void foo {} // Empty advice to trigger creation } This class creates 10000 target objects and has two separate threads call a method that causes the aspect to be instantiated on each object. The aspects add themselves to the "aspects" set and this set's size is printed when all threads have finished. import java.util.Collections; import java.util.IdentityHashMap; import java.util.Set; public class Main { public static Set aspects = Collections.synchronizedSet Collections.newSetFromMap new IdentityHashMap ; public static void main String[] args throws InterruptedException { for int i = 0; i &amp;lt; 10000; ++i { final Main m = new Main ; // Create a new target for the aspect Runnable r = new Runnable { public void run { m.foo ; } // This will trigger the advice }; Thread t1 = new Thread r ; Thread t2 = new Thread r ; t1.start ; t2.start ; t1.join ; t2.join ; } System.out.println aspects.size ; // Should be 10000 } private void foo {} } When compiled with ajc and run, the main method prints values over 10000 something like 10030-10060 typically , which means that some target objects get multiple aspect instances. In my own application I sometimes also saw some threads accessing partially built aspect instances. This was quite rare however and I wasn't able to make a test case for it. The ajc version the current stable used was: AspectJ Compiler 1.6.8 1.6.8 - Built: Friday Jan 8, 2010 at 21:53:37 GMT - Eclipse Compiler 0.785_R33x, 3.3 The sun vm version was: Java TM SE Runtime Environment build 1.6.0_20-b02 Java HotSpot TM 64-Bit Server VM build 16.3-b01, mixed mode I investigated the source of this problem: the ajc compiler generates the following decompiled method into the aspect class: public static void ajc$perObjectBind Object obj { if obj instanceof ajcMightHaveAspect &amp;amp;&amp;amp; ajcMightHaveAspect obj .perObjectGet == null ajcMightHaveAspect obj .perObjectSet new Pertarget ; } , which obviously is not thread safe.</description>
    <commit commitTime="2013-02-25 15:18:12" id="be5a530"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/AjcMemberMaker.java</file>
    </fixedFiles>
  </bug>
  <bug id="404594" reportTime="2013-03-28 16:53:00">
    <summary>Assertion failed at ResolvedType.java:614</summary>
    <description>Created attachment 229171 [details] Sample Maven project Stacktrace: java.lang.AssertionError at org.aspectj.weaver.ResolvedType.lookupResolvedMember ResolvedType.java:614 at org.aspectj.weaver.JoinPointSignatureIterator.findSignaturesFromSupertypes JoinPointSignatureIterator.java:192 at org.aspectj.weaver.JoinPointSignatureIterator.hasNext JoinPointSignatureIterator.java:68 at org.aspectj.weaver.patterns.SignaturePattern.matches SignaturePattern.java:317 at org.aspectj.weaver.patterns.KindedPointcut.matchInternal KindedPointcut.java:202 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:137 at org.aspectj.weaver.patterns.AndPointcut.matchInternal AndPointcut.java:51 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:137 at org.aspectj.weaver.patterns.OrPointcut.matchInternal OrPointcut.java:50 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:137 at org.aspectj.weaver.patterns.OrPointcut.matchInternal OrPointcut.java:50 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:137 at org.aspectj.weaver.patterns.OrPointcut.matchInternal OrPointcut.java:50 at org.aspectj.weaver.patterns.Pointcut.match Pointcut.java:137 at org.aspectj.weaver.ShadowMunger.match ShadowMunger.java:113 at org.aspectj.weaver.Advice.match Advice.java:109 at org.aspectj.weaver.bcel.BcelAdvice.match BcelAdvice.java:149 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:3167 at org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction BcelClassWeaver.java:3115 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2773 at org.aspectj.weaver.bcel.BcelClassWeaver.match BcelClassWeaver.java:2553 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:480 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:99 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1691 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1635 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1400 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1186 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:514 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving AjPipeliningCompilerAdapter.java:447 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:432 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:98 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:805 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:468 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1028 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:272 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:185 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:371 at org.aspectj.tools.ajc.Main.runMain Main.java:248 ... Sample Maven project attached. It fails on test-compile phase, and assertions should be enabled: "MAVEN_OPTS=-ea mvn test-compile".</description>
    <commit commitTime="2013-04-01 15:29:13" id="4e34477"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ResolvedType.java</file>
    </fixedFiles>
  </bug>
  <bug id="404600" reportTime="2013-03-29 00:48:00">
    <summary>Unhandled RuntimeException</summary>
    <description>I'm getting an unhandled RuntimeException from STS 3.2.0.RELEASE: java.lang.RuntimeException at org.aspectj.asm.AsmManager.sameType AsmManager.java:897 at org.aspectj.asm.AsmManager.removeRelationshipsTargettingThisType AsmManager.java:711 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1033 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:514 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeavin ... ndation-domain/src\/main\/java&amp;lt;com.scispike.foundation.domain.trait.persistence*PersistableAspect.aj%com.scispike.foundation.domain.trait.persistence Andy Clement, this can be reproduced in our private foundation repo's dev branch at commit d879446f2bfd83b51bf711d2931f4b28ce8c1901. After clicking ok on the exception dialog, there is an error marker on the package statement with text: Internal compiler error: java.lang.RuntimeException: Exception whilst walking up from target com.scispike.foundation.domain.trait.persistence kind= package declaration hid= =foundation-domain/src\/main\/java&amp;lt;com.scispike.foundation.domain.trait.persistence*PersistableAspect.aj%com.scispike.foundation.domain.trait.persistence at org.aspectj.asm.AsmManager.sameType AsmManager.java:897 If I do a Project\Clean..., the exception is not reproduced and everything compiles ok. Next edit repros the exception.</description>
    <commit commitTime="2013-04-02 12:26:57" id="ff0859d"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWeaver.java</file>
    </fixedFiles>
  </bug>
  <bug id="408721" reportTime="2013-05-22 12:10:00">
    <summary>java.util.ConcurrentModificationException when multiple threads enter the weaver</summary>
    <description>I am using AspectJ 1.7.1. Occasionally I see the following exception, which I believe is related to multiple threads initializing some internal state. java.util.ConcurrentModificationException: null at java.util.ArrayList$Itr.checkForComodification Unknown Source ~[na:1.7.0_11] at java.util.ArrayList$Itr.next Unknown Source ~[na:1.7.0_11] at org.aspectj.weaver.ReferenceType.findDerivativeType ReferenceType.java:1122 ~[aspectjweaver.jar:1.7.1] at org.aspectj.weaver.TypeFactory.createParameterizedType TypeFactory.java:44 ~[aspectjweaver.jar:1.7.1] at org.aspectj.weaver.ResolvedType.parameterize ResolvedType.java:2479 ~[aspectjweaver.jar:1.7.1] at org.aspectj.weaver.ReferenceType.getDeclaredInterfaces ReferenceType.java:673 ~[aspectjweaver.jar:1.7.1] at org.aspectj.weaver.ResolvedType.getDirectSupertypes ResolvedType.java:82 ~[aspectjweaver.jar:1.7.1] at org.aspectj.weaver.patterns.TypePattern.matchesSubtypes TypePattern.java:178 ~[aspectjweaver.jar:1.7.1] at org.aspectj.weaver.patterns.ExactTypePattern.matchesSubtypes ExactTypePattern.java:74 ~[aspectjweaver.jar:1.7.1] at org.aspectj.weaver.patterns.TypePattern.matchesStatically TypePattern.java:130 ~[aspectjweaver.jar:1.7.1] at org.aspectj.weaver.patterns.KindedPointcut.fastMatch KindedPointcut.java:130 ~[aspectjweaver.jar:1.7.1] at org.aspectj.weaver.internal.tools.PointcutExpressionImpl.couldMatchJoinPointsInType PointcutExpressionImpl.java:84 ~[aspectjweaver.jar:1.7.1] at org.springframework.aop.aspectj.AspectJExpressionPointcut.matches AspectJExpressionPointcut.java:250 ~[spring-aop.jar:3.2.1.RELEASE] at org.springframework.aop.support.AopUtils.canApply AopUtils.java:208 ~[spring-aop.jar:3.2.1.RELEASE] at org.springframework.aop.support.AopUtils.canApply AopUtils.java:262 ~[spring-aop.jar:3.2.1.RELEASE] at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply AopUtils.java:294 ~[spring-aop.jar:3.2.1.RELEASE] at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply AbstractAdvisorAutoProxyCreator.java:118 ~[spring-aop.jar:3.2.1.RELEASE]</description>
    <commit commitTime="2013-06-26 15:08:06" id="3f6e166"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java</file>
    </fixedFiles>
  </bug>
  <bug id="407017" reportTime="2013-05-01 15:10:00">
    <summary>Stack trace being printed, but want to mute it</summary>
    <description>In org.aspectj.ajdt.internal.core.builder.AjState.getDelegate ReferenceType , there is a call to printStackTrace . On the AJDT build server, this exception is being printed and causing some noise. Can you replace that call with a call to the IMessageHandler for the build?</description>
    <commit commitTime="2013-06-28 16:30:34" id="e6cb508"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</file>
    </fixedFiles>
  </bug>
  <bug id="413378" reportTime="2013-07-20 02:22:00">
    <summary>A constructor added by ITD cannot invoke the method of its super class</summary>
    <description>AspectJ Development Tools 2.2.0.e37x-RELEASE-20120704-0900 It seems *super.someMethod * can not be correctly resolved in the constructor added by ITD It can be compiled with no problem, but* at runtime, exception is raised.* The class which I'll add a new constructor to: public class Child extends Parent{ public String mParent = "John"; public Child String parent { this.mParent = parent; } public String getParent { return this.mParent; } } As we can see, *Child * extends *Parent* class Parent has a method getAge public class Parent { private String mName = "John"; private int mAge = 50; public int getAge { return mAge; } } If I add a new constructor for the *Child * in my aspect. public aspect MyTest { public Child.new String parent, int age { this parent ; System.out.println "Get Age:" + super.getAge ; System.out.println "Child Name:" + this.mParent ; } } The above aspect code will trigger an exception. Exception in thread "main" java.lang.NoSuchMethodError: com.test.Child.ajc$superDispatch$com_test_Child$getAge I at MyTest.ajc$postInterConstructor$MyTest$com_test_Child MyTest.aj:13 at com.test.Child.&amp;lt;init&amp;gt; Child.java:1 at MainProgram.main MainProgram.java:14 Is this a limitation of AspectJ? Is this the only way to resolve this issue? I also attach the src &amp;amp; compiled binary files</description>
    <commit commitTime="2013-07-22 14:47:02" id="302c14e"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/AllTests17.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="368046" reportTime="2012-01-06 12:05:00">
    <summary>configure a set of classloader for which weavers should not be created in an LTW scenario</summary>
    <description>Prototyped and tested for JspClassLoaders see the thread 'aspectj and jsp load' on the mailing list . That was done through a system property but it would be easier via aop.xml. However, this would be the first time we have an aop.xml setting that affects global operation of loadtime weaving. When any classloader actually got far enough to load the aop.xmls it would discover this setting and from that point on it would be set. In our JspClassLoader case this would mean that either some non-JspClassLoader is run early enough to discover this setting and turn it off for all JspClassLoaders or the first JspClassLoader will discover the setting and turn it off for all other JspClassLoaders. I think we can live with that mode of operation.</description>
    <commit commitTime="2013-07-29 22:24:55" id="0c0adc5"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Aj.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ClassLoaderWeavingAdaptor.java</file>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Options.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc174/Ajc174Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="418129" reportTime="2013-09-26 14:31:00">
    <summary>Can't introduce annotation onto introduced method from trait-patterned aspect</summary>
    <description>Created attachment 235865 [details] eclipse AspectJ testcase An aspect is introducing a field and a method. Introducing an annotation onto the introduced field works fine; introducing an annotation onto the introduced **method** fails with the message "The method '...' does not exist" where '...' is the method pattern . Aspect follows trait pattern: public interface Behavior { String hello ; } ===== @Target ElementType.TYPE @Retention RetentionPolicy.RUNTIME public @interface Behaved {} ===== public aspect Trait { public interface I extends Behavior {} declare parents: @Behaved * implements I; private String I.name = getClass .getName ; public String I.hello { return "hello" + name; } } ===== @Behaved public class Target { public static aspect A { declare @field: * Target.name: @Tagged; // WORKY declare @method: * Target.hello .. : @Tagged; // NO WORKY } } ===== @Target { ElementType.TYPE, ElementType.METHOD, ElementType.FIELD, ElementType.CONSTRUCTOR } @Retention RetentionPolicy.RUNTIME public @interface Tagged {} Test eclipse AspectJ project attached.</description>
    <commit commitTime="2013-10-01 10:00:14" id="2393bef"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc174/Ajc174Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="415266" reportTime="2013-08-16 17:51:00">
    <summary>LTW not working when JMX is enabled</summary>
    <description>When I enable JMX remote management on a JVM along with AspectJ load-time weaving LTW , our Aspect doesn't appear to get woven in. This are the JVM arguments: -Dvisualvm.display.name=JdbcTimingAspectTest -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.port=1024 -javaagent:/jars/aspectjweaver.jar -Dorg.aspectj.weaver.loadtime.configuration=com/trgr/cobalt/infrastructure/instrumentation/aspects/timing/jdbc/jdbcmonitor.xml Note that if I don't enable JMX remote management by remove the -Dcom.sun.management.jmxremote.* JVM arguments , the Aspect works fine.</description>
    <commit commitTime="2013-10-01 10:08:31" id="9e992d6"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/Aj.java</file>
    </fixedFiles>
  </bug>
  <bug id="419279" reportTime="2013-10-11 15:20:00">
    <summary>ajc option to change -Xlint level per-message without Xlintfile</summary>
    <description>The -Xlintfile option is not a great fit for controlling message across multiple build projects, specifically in my case from the pluginManagement section of a maven parent pom. The problem is that you need a local file to configure the per-message output levels ignore/warning/error when you really want to specify it in the build script or in a shared file. As an alternative to -Xlintfile, it would be handy to be able to change an Xlint warning level per message using command line options. For example: ajc -Xlint:adviceDidNotMatch=ignore would override the XlintDefault.properties file for the adviceDidNotMatch message. With Regards Rob</description>
    <commit commitTime="2013-10-23 12:44:23" id="b2cd5fa"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildConfig.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjBuildManager.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/Lint.java</file>
      <file>testing/newsrc/org/aspectj/testing/CompileSpec.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc174/Ajc174Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="420210" reportTime="2013-10-23 16:00:00">
    <summary>Support additional message insert keys in declare error/warning</summary>
    <description>It would be good to be able to insert the enclosing class name or enclosing member for a joinpoint.</description>
    <commit commitTime="2013-10-23 13:16:20" id="9319e34"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/Checker.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc174/Ajc174Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="423257" reportTime="2013-12-04 19:43:00">
    <summary>LTW - java.lang.VerifyError: Bad return type with generics and local variables</summary>
    <description>This code: package com.foo.bar; public class Test { abstract class X&amp;lt;T&amp;gt; {} class X1 extends X&amp;lt;Integer&amp;gt; {} class X2 extends X&amp;lt;String&amp;gt; {} public Test foo { return this; } public &amp;lt;T&amp;gt; X&amp;lt;T&amp;gt; createMessage int n { X x; if n == 0 { x = new X1 ; } else { x = new X2 ; } return x; } } produces: java.lang.VerifyError: Bad return type in method com.foo.bar.Test.createMessage I Lcom/foo/bar/Test$X; at offset 26 at com.betfair.marketupdates.Main.start Main.java:18 at org.vertx.java.platform.Verticle.start Verticle.java:82 at org.vertx.java.platform.impl.DefaultPlatformManager$19.run DefaultPlatformManager.java:1551 at org.vertx.java.core.impl.DefaultContext$3.run DefaultContext.java:176 at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks SingleThreadEventExecutor.java:354 at io.netty.channel.nio.NioEventLoop.run NioEventLoop.java:353 at io.netty.util.concurrent.SingleThreadEventExecutor$2.run SingleThreadEventExecutor.java:101 at java.lang.Thread.run Thread.java:722 even when the createMessage is not being weaved: package com.foo.bar; @Aspect public class AspectX { @Before "execution * com.foo.bar.Test.foo " public void advice { System.out.println "Hello" ; } } The problem lies in the first local variable type as can be seen by analyzing the bytecode notice the last line : Before: public &amp;lt;T extends java/lang/Object&amp;gt; com.foo.bar.Test$X&amp;lt;T&amp;gt; createMessage int ; flags: ACC_PUBLIC Code: stack=3, locals=3, args_size=2 0: iload_1 1: ifne 16 4: new #2 // class com/foo/bar/Test$X1 7: dup 8: aload_0 9: invokespecial #3 // Method com/foo/bar/Test$X1."&amp;lt;init&amp;gt;": Lcom/foo/bar/Test; V 12: astore_2 13: goto 25 16: new #4 // class com/foo/bar/Test$X2 19: dup 20: aload_0 21: invokespecial #5 // Method com/foo/bar/Test$X2."&amp;lt;init&amp;gt;": Lcom/foo/bar/Test; V 24: astore_2 25: aload_2 26: areturn LineNumberTable: line 17: 0 line 18: 4 line 20: 16 line 22: 25 LocalVariableTable: Start Length Slot Name Signature 13 3 2 x Lcom/foo/bar/Test$X; 0 27 0 this Lcom/foo/bar/Test; 0 27 1 n I 25 2 2 x Lcom/foo/bar/Test$X; StackMapTable: number_of_entries = 2 frame_type = 16 /* same */ frame_type = 252 /* append */ offset_delta = 8 locals = [ class com/foo/bar/Test$X ] After: public &amp;lt;T extends java/lang/Object&amp;gt; com.foo.bar.Test$X&amp;lt;T&amp;gt; createMessage int ; flags: ACC_PUBLIC Code: stack=3, locals=3, args_size=2 0: iload_1 1: ifne 16 4: new #2 // class com/foo/bar/Test$X1 7: dup 8: aload_0 9: invokespecial #3 // Method com/foo/bar/Test$X1."&amp;lt;init&amp;gt;": Lcom/foo/bar/Test; V 12: astore_2 13: goto 25 16: new #4 // class com/foo/bar/Test$X2 19: dup 20: aload_0 21: invokespecial #5 // Method com/foo/bar/Test$X2."&amp;lt;init&amp;gt;": Lcom/foo/bar/Test; V 24: astore_2 25: aload_2 26: areturn LocalVariableTable: Start Length Slot Name Signature 13 3 2 x Lcom/foo/bar/Test$X; 0 27 0 this Lcom/foo/bar/Test; 0 27 1 n I 25 2 2 x Lcom/foo/bar/Test$X; LineNumberTable: line 17: 0 line 18: 4 line 20: 16 line 22: 25 StackMapTable: number_of_entries = 2 frame_type = 16 /* same */ frame_type = 252 /* append */ offset_delta = 8 locals = [ class java/lang/Object ] Note: This is probably the same bug as https://bugs.eclipse.org/bugs/show_bug.cgi?id=417041 Note2: I'm running jdk1.7.0_17</description>
    <commit commitTime="2013-12-06 10:33:48" id="dd88d21"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AjState.java</file>
      <file>tests/src/org/aspectj/systemtest/AllTests17.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/asm/StackMapAdder.java</file>
    </fixedFiles>
  </bug>
  <bug id="431541" reportTime="2014-03-28 18:09:00">
    <summary>[plan] NullAnnotationMatching.java:142 when compiling AspectJ 1.8.0 RC2</summary>
    <description>Upgraded Eclipse eclipse.buildId=4.3.2.M20140221-1700 to: - AspectJ Development Tools 2.2.4.e43x-20140320-1000 - AspectJ Compiler 1.8.0.20140320104000 and started getting compile error messages with the following stacktrace: java.lang.NullPointerException at org.aspectj.org.eclipse.jdt.internal.compiler.ast.NullAnnotationMatching.analyse NullAnnotationMatching.java:142 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.NullAnnotationMatching.analyse NullAnnotationMatching.java:112 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Statement.internalCheckAgainstNullTypeAnnotation Statement.java:190 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Statement.checkAgainstNullTypeAnnotation Statement.java:186 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.ReturnStatement.checkAgainstNullAnnotation ReturnStatement.java:186 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.ReturnStatement.analyseCode ReturnStatement.java:85 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Block.analyseCode Block.java:48 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TryStatement.analyseCode TryStatement.java:165 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode MethodDeclaration.java:124 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode TypeDeclaration.java:766 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode TypeDeclaration.java:262 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.analyseCode CompilationUnitDeclaration.java:118 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:793 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:471 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1031 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:272 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:185 at org.aspectj.ajde.core.internal.AjdeCoreBuildManager.performBuild AjdeCoreBuildManager.java:105 at org.aspectj.ajde.core.AjCompiler.buildFresh AjCompiler.java:100 at org.eclipse.ajdt.core.builder.AJBuilder.build AJBuilder.java:255 at org.eclipse.core.internal.events.BuildManager$2.run BuildManager.java:733 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:42 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:206 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:246 at org.eclipse.core.internal.events.BuildManager$1.run BuildManager.java:299 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:42 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:302 at org.eclipse.core.internal.events.BuildManager.basicBuildLoop BuildManager.java:358 at org.eclipse.core.internal.events.BuildManager.build BuildManager.java:381 at org.eclipse.core.internal.events.AutoBuildJob.doBuild AutoBuildJob.java:143 at org.eclipse.core.internal.events.AutoBuildJob.run AutoBuildJob.java:241 at org.eclipse.core.internal.jobs.Worker.run Worker.java:53 This is reproducible when I run Project-&amp;gt;Clean on my AspectJ project. The -source and -target I also have the following Java 8 patch plugin installed: - Eclipse JDT Java Development Tools Patch with Java 8 support for Kepler SR2 1.0.0.v20140317-1956 The following settings are in org.eclipse.jdt.core.prefs the my AspectJ project: org.eclipse.jdt.core.compiler.compliance=1.8 org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve org.eclipse.jdt.core.compiler.debug.sourceFile=generate org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.8 org.eclipse.jdt.core.compiler.problem.enumIdentifier=error org.eclipse.jdt.core.compiler.debug.lineNumber=generate eclipse.preferences.version=1 org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled org.eclipse.jdt.core.compiler.source=1.8</description>
    <commit commitTime="2014-04-04 12:01:18" id="4ffb0fd"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/Proceed.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc180/Ajc180Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="431976" reportTime="2014-04-04 03:40:00">
    <summary>thisJoinPoint may not have been initialized</summary>
    <description>Created attachment 241601 [details] aspectj plugin to reproduce the bug In case an aspect is defined as privileged and the variable thisJoindPoint is used in an advice you get the compile error: The local variable thisJoinPoint may not have been initialized</description>
    <commit commitTime="2014-04-04 12:33:45" id="331399f"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc180/Ajc180Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="432714" reportTime="2014-04-14 04:29:00">
    <summary>Java 1.8.0: VerifyError with Java8 but not with Java6</summary>
    <description>In our Nuclos ERP system git sources at https://bitbucket.org/nuclos/nuclos , I encounter the following with Java 1.8.0: &amp;gt; cd nuclos-server &amp;gt; mvn -Djava.version=1.8 clean install [ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.17:test default-test on project nuclos-server: Execution default-test of goal org.apache.maven.plugins:maven-surefire-plugin:2.17:test failed: There was an error in the forked process [ERROR] java.lang.VerifyError: Bad type on operand stack [ERROR] Exception Details: [ERROR] Location: [ERROR] org/nuclos/server/history/ejb3/HistoryFacadeBean.getHistoryData_aroundBody6 Lorg/nuclos/server/history/ejb3/HistoryFacadeBean;Lorg/nuclos/common/UID;Ljava/lang/Object; Ljava/util/Collection; @40: invokestatic [ERROR] Reason: [ERROR] Type 'java/lang/Object' current frame, stack[0] is not assignable to 'org/nuclos/common/FieldMeta' [ERROR] Current Frame: [ERROR] bci: @40 [ERROR] flags: { } [ERROR] locals: { 'org/nuclos/server/history/ejb3/HistoryFacadeBean', 'org/nuclos/common/UID', 'java/lang/Object', 'org/nuclos/common/collect/collectable/searchcondition/CollectableComparison' } [ERROR] stack: { 'java/lang/Object', 'org/nuclos/common/collect/collectable/searchcondition/ComparisonOperator', 'java/lang/Object' } [ERROR] Bytecode: [ERROR] 0000000: b200 43b4 01b5 b201 b92b b801 bf4e 2cc1 [ERROR] 0000010: 0061 9900 0cb2 0043 b400 63a7 0009 b200 [ERROR] 0000020: 43b4 0049 b201 b92c b801 bf3a 052a b700 [ERROR] 0000030: cdb2 0043 05bd 01c5 5903 2d53 5904 1905 [ERROR] 0000040: 53b8 01c7 04b9 01cb 0400 3a07 2cc1 0061 [ERROR] 0000050: 9900 0cb2 0043 b401 cfa7 0009 b200 43b4 [ERROR] 0000060: 01d3 b201 b92c b801 bf3a 092a b700 cdb2 [ERROR] 0000070: 0043 1909 04b9 01cb 0400 b901 d701 003a [ERROR] 0000080: 0ba7 003d 190b b901 5901 00c0 0105 3a0d [ERROR] 0000090: 190d b200 43b4 01da b601 de3a 0f2a b400 [ERROR] 00000a0: 7d19 0fb6 01e1 b600 a73a 1119 112b b600 [ERROR] 00000b0: 9b99 000d 1907 190d b901 e402 0057 190b [ERROR] 00000c0: b901 8201 009a ffbf b201 e53a 0d2a b701 [ERROR] 00000d0: eb2b 2c03 b800 cf12 d4b6 00d6 b901 ed05 [ERROR] 00000e0: 003a 0da7 0030 3a0b b200 1c13 01f1 190b [ERROR] 00000f0: b601 f3a7 0020 3a0b b200 1c13 01f1 190b [ERROR] 0000100: b601 f3a7 0010 3a0b b200 1c13 01f1 190b [ERROR] 0000110: b601 f319 0db9 0151 0100 b901 5501 003a [ERROR] 0000120: 0fa7 005c 190f b901 5901 00c0 01f7 3a0b [ERROR] 0000130: 2ab7 00cd 190b b601 f919 0bb6 01fa 2cb9 [ERROR] 0000140: 01fd 0400 b902 0101 003a 13a7 0028 1913 [ERROR] 0000150: b901 5901 00c0 0105 3a11 1907 2a19 11b6 [ERROR] 0000160: 0204 b601 2d19 11b6 0208 b602 09b9 020b [ERROR] 0000170: 0200 5719 13b9 0182 0100 9aff d419 0fb9 [ERROR] 0000180: 0182 0100 9aff a0bb 014a 59b7 014c 3a0b [ERROR] 0000190: bb01 4a59 1907 b702 0fb6 0212 3a11 a700 [ERROR] 00001a0: 6219 11b9 0159 0100 c001 053a 0f19 0fb2 [ERROR] 00001b0: 0043 b402 13b6 0217 1301 01b6 021a c001 [ERROR] 00001c0: 013a 1319 0b19 13b9 015e 0200 9a00 3419 [ERROR] 00001d0: 0b19 13b9 0172 0200 57b2 0043 b402 13b2 [ERROR] 00001e0: 01b9 1913 b801 bf3a 1519 072a b700 cdb2 [ERROR] 00001f0: 0043 1915 04b9 01cb 0400 b902 0b02 0057 [ERROR] 0000200: 1911 b901 8201 009a ff9a 1907 bb02 1d59 [ERROR] 0000210: 2ab7 021f b802 22b0 4ebb 00de 592d b700 [ERROR] 0000220: e0bf [ERROR] Exception Handler Table: [ERROR] bci [205, 227] =&amp;gt; handler: 230 [ERROR] bci [205, 227] =&amp;gt; handler: 246 [ERROR] bci [205, 227] =&amp;gt; handler: 262 [ERROR] bci [0, 535] =&amp;gt; handler: 536 [ERROR] Stackmap Table: [ERROR] append_frame @30,Object[#579] [ERROR] same_locals_1_stack_item_frame @36,Object[#80] [ERROR] full_frame @92,{Object[#1],Object[#97],Object[#80],Object[#579],Top,Object[#579],Top,Object[#472]},{} [ERROR] same_locals_1_stack_item_frame @98,Object[#80] [ERROR] full_frame @132,{Object[#1],Object[#97],Object[#80],Object[#579],Top,Object[#579],Top,Object[#472],Top,Object[#579],Top,Object[#346]},{} [ERROR] same_frame @190 [ERROR] full_frame @230,{Object[#1],Object[#97],Object[#80],Object[#579],Top,Object[#579],Top,Object[#472],Top,Object[#579],Top,Object[#346],Top,Object[#136]},{Object[#222]} [ERROR] same_locals_1_stack_item_frame @246,Object[#552] [ERROR] same_locals_1_stack_item_frame @262,Object[#554] [ERROR] full_frame @275,{Object[#1],Object[#97],Object[#80],Object[#579],Top,Object[#579],Top,Object[#472],Top,Object[#579],Top,Object[#80],Top,Object[#136]},{} [ERROR] append_frame @292,Top,Object[#346] [ERROR] full_frame @334,{Object[#1],Object[#97],Object[#80],Object[#579],Top,Object[#579],Top,Object[#472],Top,Object[#579],Top,Object[#503],Top,Object[#136],Top,Object[#346],Top,Top,Top,Object[#346]},{} [ERROR] same_frame @371 [ERROR] full_frame @381,{Object[#1],Object[#97],Object[#80],Object[#579],Top,Object[#579],Top,Object[#472],Top,Object[#579],Top,Object[#80],Top,Object[#136],Top,Object[#346]},{} [ERROR] full_frame @417,{Object[#1],Object[#97],Object[#80],Object[#579],Top,Object[#579],Top,Object[#472],Top,Object[#579],Top,Object[#330],Top,Object[#136],Top,Object[#80],Top,Object[#346]},{} [ERROR] same_frame_extended @512 [ERROR] full_frame @536,{Object[#1],Object[#97],Object[#80]},{Object[#554]} [ERROR] [ERROR] at java.lang.Class.getDeclaredMethods0 Native Method [ERROR] at java.lang.Class.privateGetDeclaredMethods Class.java:2688 [ERROR] at java.lang.Class.privateGetPublicMethods Class.java:2814 [ERROR] at java.lang.Class.getMethods Class.java:1602 [ERROR] at org.testng.internal.TestNGClassFinder.&amp;lt;init&amp;gt; TestNGClassFinder.java:59 [ERROR] at org.testng.TestRunner.initMethods TestRunner.java:409 [ERROR] at org.testng.TestRunner.init TestRunner.java:235 [ERROR] at org.testng.TestRunner.init TestRunner.java:205 [ERROR] at org.testng.TestRunner.&amp;lt;init&amp;gt; TestRunner.java:153 [ERROR] at org.testng.SuiteRunner$DefaultTestRunnerFactory.newTestRunner SuiteRunner.java:536 [ERROR] at org.testng.SuiteRunner.init SuiteRunner.java:159 [ERROR] at org.testng.SuiteRunner.&amp;lt;init&amp;gt; SuiteRunner.java:113 [ERROR] at org.testng.TestNG.createSuiteRunner TestNG.java:1299 [ERROR] at org.testng.TestNG.createSuiteRunners TestNG.java:1286 [ERROR] at org.testng.TestNG.runSuitesLocally TestNG.java:1140 [ERROR] at org.testng.TestNG.run TestNG.java:1057 [ERROR] at org.apache.maven.surefire.testng.TestNGExecutor.run TestNGExecutor.java:293 [ERROR] at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute TestNGXmlTestSuite.java:84 [ERROR] at org.apache.maven.surefire.testng.TestNGProvider.invoke TestNGProvider.java:91 [ERROR] at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader ForkedBooter.java:200 [ERROR] at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess ForkedBooter.java:153 [ERROR] at org.apache.maven.surefire.booter.ForkedBooter.main ForkedBooter.java:103 [ERROR] -&amp;gt; [Help 1] This was tested against our sources, commit 3ede638f268a481123144e607b95c51b6cc13828 on branch master. Technical it is still the same bug as bug 421307 . However, there is no way to circumvent it, as -XX:-UseSplitVerifier has been removed from the VM.</description>
    <commit commitTime="2014-04-14 15:01:56" id="5aaca75"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc180/Ajc180Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/asm/StackMapAdder.java</file>
    </fixedFiles>
  </bug>
  <bug id="432178" reportTime="2014-04-07 13:30:00">
    <summary>Concrete class percflow NoSuchMethodError: ajc$perCflowPush V</summary>
    <description>Please consider following reproducible example. This test has been made under the current aspectj development version aspectj-DEVELOPMENT-20130612103400.jar and java 1.6 &amp;amp; 1.7. src/A.java: public class A { public static void main String [] args { B test = new B ; test.met ; } } src/B.java: public class B { public void met { System.out.println "foo" ; } } aspects/PerCFlowBug.java public abstract aspect PerCFlowBug percflow pointexp { String name = "bar"; abstract pointcut pointexp ; after : pointexp { System.out.println name ; } } META-INF/aop.xml: &amp;lt;aspectj&amp;gt; &amp;lt;aspects&amp;gt; &amp;lt;concrete-aspect name="PerCFlowBugImpl" extends="PerCFlowBug"&amp;gt; &amp;lt;pointcut name="pointexp" expression=" call void *.met .. "/&amp;gt; &amp;lt;/concrete-aspect&amp;gt; &amp;lt;/aspects&amp;gt; &amp;lt;weaver options="-verbose -debug -showWeaveInfo" /&amp;gt; &amp;lt;/aspectj&amp;gt; aj5 -cp aspects/:src/:. A [AppClassLoader@1feed786] info AspectJ Weaver Version 1.7.5-DEVELOPMENT built on Friday Dec 6, 2013 at 18:25:29 GMT [AppClassLoader@1feed786] info register classloader sun.misc.Launcher$AppClassLoader@1feed786 [AppClassLoader@1feed786] info using configuration /user/2/.base/guirohug/home/shared/acs/bug_poc/META-INF/aop.xml [AppClassLoader@1feed786] info define aspect PerCFlowBugImpl [AppClassLoader@1feed786] debug weaving 'PerCFlowBugImpl' [AppClassLoader@1feed786] debug generating class 'PerCFlowBugImpl' [AppClassLoader@1feed786] debug weaving 'A' [AppClassLoader@1feed786] weaveinfo Join point 'method-call void B.met ' in Type 'A' A.java:6 advised by after advice from 'PerCFlowBugImpl' PerCFlowBug.java:9 [with runtime test] [AppClassLoader@1feed786] debug weaving 'B' [AppClassLoader@1feed786] weaveinfo Join point 'method-call void java.io.PrintStream.println java.lang.String ' in Type 'B' B.java:7 advised by after advice from 'PerCFlowBugImpl' PerCFlowBug.java:9 [with runtime test] Exception in thread "main" java.lang.NoSuchMethodError: PerCFlowBugImpl.ajc$perCflowPush V at A.main A.java:6 It seems that using LoadTime weaving, implementing abstract class having a percflow behavior always throw a java.lang.NoSuchMethodError PerCFlowBugImpl.java: public aspect PerCFlowBugImpl extends PerCFlowBug { pointcut pointexp : call void *.met .. ; } Using compile-time weaving PerCFlowBugImpl.java above , it works well. Thanks.</description>
    <commit commitTime="2014-04-15 16:51:02" id="c641ffd"/>
    <fixedFiles>
      <file>loadtime/src/org/aspectj/weaver/loadtime/ConcreteAspectCodeGen.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc180/Ajc180Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="435446" reportTime="2014-05-21 16:26:00">
    <summary>ClassFormatError when targetting nested forEach lambda expressions</summary>
    <description>Created attachment 243368 [details] Sample source code I tried to help somebody on http://stackoverflow.com/questions/23787068/aspect-breaking-bytecode-on-specific-class . I was able to reduce his sample code to something simple. Obviously there are problems with Java 8 when using nested 'forEach' loops with lambda expressions. Here is my sample application: package de.scrum_master.app; import java.util.HashMap; import java.util.Map; public class Application { public static void main String[] args { Map&amp;lt;String, Map&amp;lt;Integer, String&amp;gt;&amp;gt; languages = new HashMap&amp;lt;&amp;gt; ; Map&amp;lt;Integer, String&amp;gt; englishNumbers = new HashMap&amp;lt;&amp;gt; ; englishNumbers.put 11, "eleven" ; englishNumbers.put 12, "twelve" ; englishNumbers.put 13, "thirteen" ; languages.put "EN", englishNumbers ; Map&amp;lt;Integer, String&amp;gt; germanNumbers = new HashMap&amp;lt;&amp;gt; ; germanNumbers.put 11, "elf" ; germanNumbers.put 12, "zwölf" ; germanNumbers.put 13, "dreizehn" ; languages.put "DE", germanNumbers ; languages.entrySet .stream .forEach language -&amp;gt; { String languageCode = language.getKey ; Map&amp;lt;Integer, String&amp;gt; numbers = language.getValue ; System.out.println "Language code = " + languageCode ; // numbers.entrySet .stream .forEach number -&amp;gt; { // int numericValue = number.getKey ; // String textualValue = number.getValue ; // System.out.println " " + numericValue + " -&amp;gt; " + textualValue ; // } ; } ; } } And here is a simple aspect: package de.scrum_master.aspect; import de.scrum_master.app.Application; public aspect MyAspect { before : execution * Application.* .. { System.out.println thisJoinPointStaticPart ; } } This works as expected, the output is: execution void de.scrum_master.app.Application.main String[] execution void de.scrum_master.app.Application.lambda$0 Map.Entry Language code = DE execution void de.scrum_master.app.Application.lambda$0 Map.Entry Language code = EN But now uncomment the inner 'forEach' loop, i.e. this part: numbers.entrySet .stream .forEach number -&amp;gt; { int numericValue = number.getKey ; String textualValue = number.getValue ; System.out.println " " + numericValue + " -&amp;gt; " + textualValue ; } ; This yields the following exception when starting the driver application: Exception in thread "main" java.lang.ClassFormatError: Invalid length 65517 in LocalVariableTable in class file de/scrum_master/app/Application at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClass ClassLoader.java:760 at java.security.SecureClassLoader.defineClass SecureClassLoader.java:142 at java.net.URLClassLoader.defineClass URLClassLoader.java:455 at java.net.URLClassLoader.access$100 URLClassLoader.java:73 at java.net.URLClassLoader$1.run URLClassLoader.java:367 at java.net.URLClassLoader$1.run URLClassLoader.java:361 at java.security.AccessController.doPrivileged Native Method at java.net.URLClassLoader.findClass URLClassLoader.java:360 at java.lang.ClassLoader.loadClass ClassLoader.java:424 at sun.misc.Launcher$AppClassLoader.loadClass Launcher.java:308 at java.lang.ClassLoader.loadClass ClassLoader.java:357 at sun.launcher.LauncherHelper.checkAndLoadMain LauncherHelper.java:495 A dirty workaround is to exclude the lambda methods in the pointcut like this: before : execution * Application.* .. &amp;amp;&amp;amp; !execution * *.lambda$* .. { System.out.println thisJoinPointStaticPart ; } Now it works again and the output is: execution void de.scrum_master.app.Application.main String[] Language code = DE 11 -&amp;gt; elf 12 -&amp;gt; zwölf 13 -&amp;gt; dreizehn Language code = EN 11 -&amp;gt; eleven 12 -&amp;gt; twelve 13 -&amp;gt; thirteen</description>
    <commit commitTime="2014-05-23 13:25:57" id="6e5c19b"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/ConstantsInitializer.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc181/Ajc181Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="436531" reportTime="2014-06-03 23:38:00">
    <summary>NPE MethodParameters.dump</summary>
    <description>java.lang.NullPointerException at org.aspectj.apache.bcel.classfile.MethodParameters.dump MethodParameters.java:65 at org.aspectj.apache.bcel.classfile.AttributeUtils.writeAttributes AttributeUtils.java:34 at org.aspectj.apache.bcel.classfile.FieldOrMethod.dump FieldOrMethod.java:119 at org.aspectj.apache.bcel.classfile.JavaClass.dump JavaClass.java:274 at org.aspectj.apache.bcel.classfile.JavaClass.getBytes JavaClass.java:227 at org.aspectj.weaver.bcel.LazyClassGen.getJavaClassBytesIncludingReweavable LazyClassGen.java:697 at org.aspectj.weaver.bcel.BcelWeaver.getClassFilesFor BcelWeaver.java:1440 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1402 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1184 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:527 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:363 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:121 at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform ClassPreProcessorAgentAdapter.java:54 at sun.instrument.TransformerManager.transform TransformerManager.java:188 at sun.instrument.InstrumentationImpl.transform InstrumentationImpl.java:428 at java.lang.ClassLoader.defineClass1 Native Method</description>
    <commit commitTime="2014-06-17 15:05:43" id="c4f9f95"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/MethodParameters.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc181/Ajc181Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="433351" reportTime="2014-04-23 22:43:00">
    <summary>Declare parents fails on interfaces on the inpath depending on directory structure</summary>
    <description>A declare parents ITD that extends one interface with another interface is not applied if: - the new parent interface is supplied on the inpath - the jar or classes folder specified on the inpath has the package root at the root of the jar or classes folder See the attached test case. To run the test case: - edit the three build*.sh scripts and set AJHOME and PROJHOME appropriately - make sure you have the right java on the path, or edit the build scripts to invoke the right java - run test.sh - inspect the results* files Then: proj1/jar/proj1.jar is a jar with a non-package internal structure. proj1/jar/proj1v2.jar is a jar with an internal structure that follows the package structure. With AspectJ 1.7, supplying proj1.jar on the inpath results in sucessful weaving of the interface ITD specified in proj2/src/test/extender/Extender.aj, but supplying proj1v2.jar results in no weaving. With either jar the class ITD is successful. AspectJ 1.6.10 works for both class and interface ITDs with either input jar. For example, in result_1.7_fromjar we see: Extending interface set for type 'test.InterfaceProj1' InterfaceProj1.java to include 'test.extender.InterfaceProj2' Extender.aj for the first compilation run lines 1-31 , but this message is missing for the second compilation run lines 32-end</description>
    <commit commitTime="2014-06-19 09:24:38" id="3c2b8b7"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/ReferenceType.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc181/Ajc181Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="440983" reportTime="2014-08-01 09:20:00">
    <summary>Attribute RuntimeInvisibleTypeAnnotations is not supported</summary>
    <description>BCEL version used by org.aspectj.weaver 1.8.1 I cannot select it in Version list, available here: http://www.eclipse.org/downloads/download.php?file=/tools/aspectj/aspectj-1.8.1.jar During parsing of classes compiled using JDT compiler, following exception is thrown: java.lang.IllegalStateException: null at org.aspectj.apache.bcel.classfile.Attribute.readAttribute Attribute.java:168 ~[na:na] at org.aspectj.apache.bcel.classfile.AttributeUtils.readAttributes AttributeUtils.java:19 ~[na:na] at org.aspectj.apache.bcel.classfile.FieldOrMethod.&amp;lt;init&amp;gt; FieldOrMethod.java:97 ~[na:na] at org.aspectj.apache.bcel.classfile.Method.&amp;lt;init&amp;gt; Method.java:97 ~[na:na] at org.aspectj.apache.bcel.classfile.ClassParser.readMethods ClassParser.java:240 ~[na:na] at org.aspectj.apache.bcel.classfile.ClassParser.parse ClassParser.java:144 ~[na:na] at org.aspectj.apache.bcel.util.ClassLoaderRepository.loadClass ClassLoaderRepository.java:323 ~[na:na] at org.aspectj.weaver.bcel.BcelWorld.lookupJavaClass BcelWorld.java:418 ~[na:na] at org.aspectj.weaver.bcel.BcelWorld.resolveDelegate BcelWorld.java:392 ~[na:na] at org.aspectj.weaver.ltw.LTWWorld.resolveDelegate LTWWorld.java:107 ~[na:na] at org.aspectj.weaver.World.resolveToReferenceType World.java:477 ~[na:na] at org.aspectj.weaver.World.resolve World.java:318 ~[na:na] at org.aspectj.weaver.World.resolve World.java:228 ~[na:na] at org.aspectj.weaver.UnresolvedType.resolve UnresolvedType.java:615 ~[na:na] at org.aspectj.weaver.bcel.BcelGenericSignatureToTypeXConverter.classTypeSignature2TypeX BcelGenericSignatureToTypeXConverter.java:72 ~[na:na] at org.aspectj.weaver.bcel.BcelGenericSignatureToTypeXConverter.classTypeSignature2TypeX BcelGenericSignatureToTypeXConverter.java:41 ~[na:na] at org.aspectj.weaver.bcel.BcelObjectType.ensureGenericSignatureUnpacked BcelObjectType.java:787 ~[na:na] at org.aspectj.weaver.bcel.BcelObjectType.getDeclaredInterfaces BcelObjectType.java:257 ~[na:na] at org.aspectj.weaver.ReferenceType.getDeclaredInterfaces ReferenceType.java:703 ~[na:na] at org.aspectj.weaver.ResolvedType.getDirectSupertypes ResolvedType.java:82 ~[na:na] at org.aspectj.weaver.ResolvedType.collectInterTypeMungers ResolvedType.java:1393 ~[na:na] at org.aspectj.weaver.ResolvedType.collectInterTypeMungers ResolvedType.java:1398 ~[na:na] at org.aspectj.weaver.ResolvedType.getInterTypeMungersIncludingSupers ResolvedType.java:1374 ~[na:na] at org.aspectj.weaver.ResolvedType.checkInterTypeMungers ResolvedType.java:1445 ~[na:na] at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1669 ~[na:na] at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1633 ~[na:na] at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1398 ~[na:na] at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1184 ~[na:na] at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:527 ~[na:na] at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:363 ~[na:na] What I investigated, the used version of BCEL doesn't support value 21 in switch within: org.aspectj.apache.bcel.classfile.Attribute.readAttribute method.</description>
    <commit commitTime="2014-08-06 08:20:07" id="b09622f"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/Attribute.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/annotation/RuntimeInvisTypeAnnos.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/annotation/RuntimeVisTypeAnnos.java</file>
      <file>tests/src/org/aspectj/systemtest/AllTests18.java</file>
    </fixedFiles>
  </bug>
  <bug id="442425" reportTime="2014-08-23 06:13:00">
    <summary>ajc exits with dump file + IllegalStateException upon @DeclareParents for generic interface</summary>
    <description>Created attachment 246276 [details] Maven project incl. source code I was trying to help someone on StackOverflow who wants to declare a *generic* interface as a parent for classes with a certain annotation, also providing a default implementation. This is the working solution I found for him: --------------------------------------------------------- package de.scrum_master.app; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Retention RetentionPolicy.RUNTIME @Target ElementType.TYPE public @interface EntityController {} --------------------------------------------------------- package de.scrum_master.app; public interface IEntityController&amp;lt;T&amp;gt; { void setEntity T entity ; T getEntity ; static aspect EntityControllerAspect { private T IEntityController.entity; public void IEntityController.setEntity T entity { this.entity = entity; } public T IEntityController.getEntity { return entity; } declare parents : @EntityController * implements IEntityController; } } --------------------------------------------------------- package de.scrum_master.app; import java.lang.reflect.Method; @EntityController public class MyAnnotatedController&amp;lt;T&amp;gt; { public void doSomething { System.out.println "Doing something" ; } public static void main String[] args { // Use class type directly so as to call its method MyAnnotatedController&amp;lt;String&amp;gt; annotatedTextController = new MyAnnotatedController&amp;lt;&amp;gt; ; annotatedTextController.doSomething ; // Print all declared methods should also show interface methods introduced via ITD for Method method : annotatedTextController.getClass .getDeclaredMethods { if !method.getName .startsWith "ajc$" System.out.println method ; } // Prove that class type is compatible with interface type IEntityController&amp;lt;String&amp;gt; entityTextController = annotatedTextController; entityTextController.setEntity "foo" ; // Would not work here because generic interface type is type-safe: // entityNumberController.setEntity 123 ; System.out.println "Entity value = " + entityTextController.getEntity ; // Create another object and directly assign it to interface type IEntityController&amp;lt;Integer&amp;gt; entityNumberController = new MyAnnotatedController&amp;lt;&amp;gt; ; entityNumberController.setEntity 123 ; // Would not work here because generic interface type is type-safe: // entityNumberController.setEntity "foo" ; System.out.println "Entity value = " + entityNumberController.getEntity ; } } --------------------------------------------------------- Console output when running the MyAnnotatedController.main: Doing something public static void de.scrum_master.app.MyAnnotatedController.main java.lang.String[] public java.lang.Object de.scrum_master.app.MyAnnotatedController.getEntity public void de.scrum_master.app.MyAnnotatedController.doSomething public void de.scrum_master.app.MyAnnotatedController.setEntity java.lang.Object Entity value = foo Entity value = 123 --------------------------------------------------------- So far, so good. Now, comment out or remove the embedded static aspect from the interface and add an @AspectJ style aspect plus a stand-alone interface default implementation instead: package de.scrum_master.app; public interface IEntityController&amp;lt;T&amp;gt; { void setEntity T entity ; T getEntity ; } --------------------------------------------------------- package de.scrum_master.app; public class EntityMongoController&amp;lt;T&amp;gt; implements IEntityController&amp;lt;T&amp;gt; { private T entity; public void setEntity T entity { this.entity = entity; } public T getEntity { return entity; } } --------------------------------------------------------- package de.scrum_master.app; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.DeclareParents; @Aspect public class EntityControllerAspect { @DeclareParents value = "@EntityController *", defaultImpl = EntityMongoController.class private IEntityController iEntityController; } --------------------------------------------------------- If you compile this, ajc will throw an exception and exit: ---- AspectJ Properties --- AspectJ Compiler 1.8.2 built on Thursday Aug 14, 2014 at 21:45:02 GMT ---- Dump Properties --- Dump file: ajcore.20140823.112821.661.txt Dump reason: java.lang.IllegalStateException Dump on exception: true Dump at exit condition: abort ---- Exception Information --- java.lang.IllegalStateException: Use generic type, not raw type at org.aspectj.weaver.ResolvedTypeMunger.&amp;lt;init&amp;gt; ResolvedTypeMunger.java:69 at org.aspectj.weaver.MethodDelegateTypeMunger.&amp;lt;init&amp;gt; MethodDelegateTypeMunger.java:61 at org.aspectj.weaver.bcel.AtAjAttributes.handleDeclareParentsAnnotation AtAjAttributes.java:852 at org.aspectj.weaver.bcel.AtAjAttributes.readAj5ClassAttributes AtAjAttributes.java:383 at org.aspectj.weaver.bcel.BcelObjectType.ensureAspectJAttributesUnpacked BcelObjectType.java:395 at org.aspectj.weaver.bcel.BcelObjectType.&amp;lt;init&amp;gt; BcelObjectType.java:162 at org.aspectj.weaver.bcel.BcelWorld.buildBcelDelegate BcelWorld.java:410 at org.aspectj.weaver.bcel.BcelWorld.addSourceObjectType BcelWorld.java:494 at org.aspectj.weaver.bcel.BcelWorld.addSourceObjectType BcelWorld.java:456 at org.aspectj.weaver.bcel.BcelWeaver.addClassFile BcelWeaver.java:453 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:506 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving AjPipeliningCompilerAdapter.java:447 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:432 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:103 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:822 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:480 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:420 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1036 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:272 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:185 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:371 at org.aspectj.tools.ajc.Main.runMain Main.java:248 ... --------------------------------------------------------- Am I making a mistake or is there a bug in the compiler? I am attaching an ajcore.txt as well as a Maven project with both the failing and the working case. Run "mvn compile" to reproduce the problem. Alternatively, just comment out the @DeclareParents statement in the stand-alone aspect and comment in the embedded aspect in IEntityController to get it working with native AspectJ style.</description>
    <commit commitTime="2014-08-27 13:25:21" id="d929114"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/AtAjAttributes.java</file>
    </fixedFiles>
  </bug>
  <bug id="444398" reportTime="2014-09-17 13:43:00">
    <summary>Abstract aspect hierarchy and annotation style leads to NPE</summary>
    <description>import org.aspectj.lang.annotation.*; @Aspect public abstract class Bottom extends Middle { } import org.aspectj.lang.annotation.*; @Aspect public abstract class Middle extends Top { } public abstract class Top { } gives: java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.getPerClauseForTypeDeclaration EclipseSourceType.java:1034</description>
    <commit commitTime="2014-09-17 10:53:29" id="d0b8c7a"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java</file>
      <file>tests/src/org/aspectj/systemtest/AllTests18.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc183/Ajc183Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="445395" reportTime="2014-09-29 14:54:00">
    <summary>ClassCastException: ConstantUtf8 cannot be cast to ConstantInvokeDynamic</summary>
    <description>Created attachment 247455 [details] A Maven project showing the ClassCastException when running tests. Hi, When compiling a simple project [1] using aspectj-maven-plugin, I get the error below. It only happens when the pointcut gets applied. If I make the pointcut intercept nothing [2], it compiles successfully. [ERROR] Failed to execute goal org.codehaus.mojo:aspectj-maven-plugin:1.7:compile default on project lambda-control-flow-poc: AJC compiler errors: [ERROR] error at no source information available [ERROR] /home/chous/github/LambdaControlFlowPoC/src/main/java/org/acmsl/pocs/lambdafor/ControlFlowDriver.java:0::0 Internal compiler error: java.lang.ClassCastException: org.aspectj.apache.bcel.classfile.ConstantUtf8 cannot be cast to org.aspectj.apache.bcel.classfile.ConstantInvokeDynamic at org.aspectj.apache.bcel.generic.InvokeDynamic.getSignature InvokeDynamic.java:108 [ERROR] abort ABORT -- ClassCastException org.aspectj.apache.bcel.classfile.ConstantUtf8 cannot be cast to org.aspectj.apache.bcel.classfile.ConstantInvokeDynamic [ERROR] org.aspectj.apache.bcel.classfile.ConstantUtf8 cannot be cast to org.aspectj.apache.bcel.classfile.ConstantInvokeDynamic [ERROR] java.lang.ClassCastException: org.aspectj.apache.bcel.classfile.ConstantUtf8 cannot be cast to org.aspectj.apache.bcel.classfile.ConstantInvokeDynamic [ERROR] at org.aspectj.apache.bcel.generic.InvokeDynamic.getSignature InvokeDynamic.java:108 [ERROR] at org.aspectj.apache.bcel.generic.InvokeDynamic.getReturnType InvokeDynamic.java:99 [ERROR] at org.aspectj.apache.bcel.generic.InvokeInstruction.produceStack InvokeInstruction.java:107 [ERROR] at org.aspectj.apache.bcel.generic.MethodGen.getMaxStack MethodGen.java:988 [ERROR] at org.aspectj.apache.bcel.generic.MethodGen.setMaxStack MethodGen.java:876 [ERROR] at org.aspectj.weaver.bcel.LazyMethodGen.pack LazyMethodGen.java:1019 The context is: - Project uses lambda expressions. - Java 1.8.11 on gentoo linux 64b. - aspectjrt, aspectjtools 1.8.2 - aspectj-maven-plugin 1.7 [1] https://github.com/rydnr/LambdaControlFlowPoC [2] https://github.com/rydnr/LambdaControlFlowPoC/blob/master/src/main/aspect/org/acmsl/pocs/lambdafor/ForReplacer.aj I'm attaching the Maven project with a hopefully resolvable pom should it helps to figure out the issue. Just run mvn test. I've downloaded aspectj 1.8.2 sources, and when debugging, the invalid cast is produced by extracting "org/acmsl/pocs/lambdafor/ControlFlowCommand" String from the constant pool at index 62. I've no idea what could be causing this. I've tried adding some defensive programming hacks but it causes one NPE in the caller for each guarding condition. I think InvokeDynamic class is not prepared yet to handle ConstantUtf8 instances, but I'm far from solving this by myself. Thank you very much in advance. Jose.</description>
    <commit commitTime="2014-09-30 10:50:54" id="e26c781"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/ConstantsInitializer.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/ExceptionConstants.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/BootstrapMethods.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/ConstantInvokeDynamic.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/ConstantPool.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/InstructionList.java</file>
    </fixedFiles>
  </bug>
  <bug id="443477" reportTime="2014-09-08 02:54:00">
    <summary>AspectJ Compiler produces ByteCode which is considered invalid by JDK 1.7.0_67 "java.lang.VerifyError: Bad &lt;init&gt; method call from after the start of a try block"</summary>
    <description>Created attachment 246808 [details] Sample eclipse project to reproduce the problem, needs AspectJ 1.7.4 and Junit I encountered a strange problem with one of my existing aspects after updating to the latest Java 7 version jdk 1.7.0_67 . With this JDK, I receive a "java.lang.VerifyError: Bad &amp;lt;init&amp;gt; method call from after the start of a try block" when one of my instrumented classes is used. The verification Error is produced by the following change in the JDK http://hg.openjdk.java.net/jdk7u/jdk7u/hotspot/rev/458f18560343 . I created a small sample project which reproduces the problem and attached it to this issue. My production scenario is: Modify the result of a call to a particular object if the call originates from an untrusted package. Therefor, I created the following Aspect: public aspect Experiment { pointcut insideTrustedPackage : within com.icw.ehf.aspectj.lab.service..* ; Object around com.icw.ehf.aspectj.lab.pojo.SomePojo input : !cflow insideTrustedPackage &amp;amp;&amp;amp; this input { System.out.println "from untrusted package " + thisJoinPoint.toString ; return proceed input ; } } If I use JDK version 1.7.0_55, everything works as expected. However, when using JDK 1.7.0_67, running the unit test in my example project results in the following VerifyError java.lang.VerifyError: Bad &amp;lt;init&amp;gt; method call from after the start of a try block Exception Details: Location: com/icw/ehf/aspectj/lab/service/SomeService.&amp;lt;init&amp;gt; V @30: invokespecial Reason: Error exists in the bytecode Bytecode: 0000000: 2ab2 002b b600 3000 a700 0e3a 0ab2 002b 0000010: b600 3319 0abf 00b2 002b b600 3300 b700 0000020: 09b2 002b b600 30b2 002b b600 30b2 002b 0000030: b600 30b2 000b a700 0c4d b200 2bb6 0033 0000040: 2cbf 00b2 002b b600 3300 1211 b200 2bb6 0000050: 0030 b600 13a7 000e 3a04 b200 2bb6 0033 0000060: 1904 bf00 b200 2bb6 0033 00a7 000e 3a06 0000070: b200 2bb6 0033 1906 bfb2 002b b600 33a7 0000080: 000e 3a08 b200 2bb6 0033 1908 bfb2 002b 0000090: b600 33b1 Exception Handler Table: bci [82, 85] =&amp;gt; handler: 88 bci [51, 54] =&amp;gt; handler: 57 bci [45, 110] =&amp;gt; handler: 110 bci [39, 130] =&amp;gt; handler: 130 bci [7, 8] =&amp;gt; handler: 11 Stackmap Table: same_locals_1_stack_item_frame @11,Object[#57] same_locals_1_stack_item_frame @22,UninitializedThis full_frame @57,{Object[#1]},{Object[#57]} same_locals_1_stack_item_frame @66,Object[#20] same_locals_1_stack_item_frame @88,Object[#57] same_frame @99 same_locals_1_stack_item_frame @110,Object[#57] same_frame @121 same_locals_1_stack_item_frame @130,Object[#57] same_frame @141 at com.icw.ehf.aspectj.lab.ExperimentAspectTest.test ExperimentAspectTest.java:13 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:57 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:43 at java.lang.reflect.Method.invoke Method.java:606 at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall FrameworkMethod.java:47 at org.junit.internal.runners.model.ReflectiveCallable.run ReflectiveCallable.java:12 at org.junit.runners.model.FrameworkMethod.invokeExplosively FrameworkMethod.java:44 at org.junit.internal.runners.statements.InvokeMethod.evaluate InvokeMethod.java:17 at org.junit.runners.ParentRunner.runLeaf ParentRunner.java:271 at org.junit.runners.BlockJUnit4ClassRunner.runChild BlockJUnit4ClassRunner.java:70 at org.junit.runners.BlockJUnit4ClassRunner.runChild BlockJUnit4ClassRunner.java:50 at org.junit.runners.ParentRunner$3.run ParentRunner.java:238 at org.junit.runners.ParentRunner$1.schedule ParentRunner.java:63 at org.junit.runners.ParentRunner.runChildren ParentRunner.java:236 at org.junit.runners.ParentRunner.access$000 ParentRunner.java:53 at org.junit.runners.ParentRunner$2.evaluate ParentRunner.java:229 at org.junit.runners.ParentRunner.run ParentRunner.java:309 at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run JUnit4TestReference.java:50 at org.eclipse.jdt.internal.junit.runner.TestExecution.run TestExecution.java:38 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests RemoteTestRunner.java:467 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests RemoteTestRunner.java:683 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run RemoteTestRunner.java:390 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main RemoteTestRunner.java:197 I disassembled the bytecode of the SomeService.class which I added to the very end of this description. In this mnemonic representation of the bytecocde, I can see, that the actual .&amp;lt;init&amp;gt; Method call is not the first Java statement in the constructor, which the comment in the JDK checkin indicates is no longer considered valid. Unfortunately, I haven't found any useful information regarding this problem in the archives. Disassembled ByteCode: $ javap -c -s bin/com/icw/ehf/aspectj/lab/service/SomeService.class Compiled from "SomeService.java" public class com.icw.ehf.aspectj.lab.service.SomeService { public com.icw.ehf.aspectj.lab.service.SomeService ; Signature: V Code: 0: aload_0 1: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 4: invokevirtual #48 // Method org/aspectj/runtime/internal/CFlowCounter.inc: V 7: nop 8: goto 22 11: astore 10 13: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 16: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 19: aload 10 21: athrow 22: nop 23: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 26: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 29: nop 30: invokespecial #9 // Method java/lang/Object."&amp;lt;init&amp;gt;": V 33: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 36: invokevirtual #48 // Method org/aspectj/runtime/internal/CFlowCounter.inc: V 39: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 42: invokevirtual #48 // Method org/aspectj/runtime/internal/CFlowCounter.inc: V 45: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 48: invokevirtual #48 // Method org/aspectj/runtime/internal/CFlowCounter.inc: V 51: getstatic #11 // Field java/lang/System.out:Ljava/io/PrintStream; 54: goto 66 57: astore_2 58: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 61: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 64: aload_2 65: athrow 66: nop 67: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 70: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 73: nop 74: ldc #17 // String Constructor SomeService 76: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 79: invokevirtual #48 // Method org/aspectj/runtime/internal/CFlowCounter.inc: V 82: invokevirtual #19 // Method java/io/PrintStream.println: Ljava/lang/String; V 85: goto 99 88: astore 4 90: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 93: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 96: aload 4 98: athrow 99: nop 100: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 103: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 106: nop 107: goto 121 110: astore 6 112: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 115: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 118: aload 6 120: athrow 121: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 124: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 127: goto 141 130: astore 8 132: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 135: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 138: aload 8 140: athrow 141: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 144: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 147: return Exception table: from to target type 82 85 88 Class java/lang/Throwable 51 54 57 Class java/lang/Throwable 45 110 110 Class java/lang/Throwable 39 130 130 Class java/lang/Throwable 7 8 11 Class java/lang/Throwable public com.icw.ehf.aspectj.lab.pojo.SomePojo retreiveSomePojo ; Signature: Lcom/icw/ehf/aspectj/lab/pojo/SomePojo; Code: 0: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 3: invokevirtual #48 // Method org/aspectj/runtime/internal/CFlowCounter.inc: V 6: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 9: invokevirtual #48 // Method org/aspectj/runtime/internal/CFlowCounter.inc: V 12: getstatic #11 // Field java/lang/System.out:Ljava/io/PrintStream; 15: goto 27 18: astore_2 19: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 22: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 25: aload_2 26: athrow 27: nop 28: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 31: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 34: nop 35: ldc #31 // String SomeService#retreiveSomePojo 37: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 40: invokevirtual #48 // Method org/aspectj/runtime/internal/CFlowCounter.inc: V 43: invokevirtual #19 // Method java/io/PrintStream.println: Ljava/lang/String; V 46: goto 60 49: astore 4 51: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 54: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 57: aload 4 59: athrow 60: nop 61: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 64: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 67: nop 68: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 71: invokevirtual #48 // Method org/aspectj/runtime/internal/CFlowCounter.inc: V 74: new #33 // class com/icw/ehf/aspectj/lab/pojo/SomePojo 77: dup 78: invokespecial #35 // Method com/icw/ehf/aspectj/lab/pojo/SomePojo."&amp;lt;init&amp;gt;": V 81: goto 95 84: astore 6 86: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 89: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 92: aload 6 94: athrow 95: nop 96: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 99: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 102: nop 103: astore 9 105: goto 119 108: astore 8 110: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 113: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 116: aload 8 118: athrow 119: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 122: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 125: aload 9 127: areturn Exception table: from to target type 74 81 84 Class java/lang/Throwable 43 46 49 Class java/lang/Throwable 12 15 18 Class java/lang/Throwable 6 108 108 Class java/lang/Throwable static {}; Signature: V Code: 0: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 3: invokevirtual #48 // Method org/aspectj/runtime/internal/CFlowCounter.inc: V 6: goto 31 9: astore_1 10: aload_1 11: instanceof #53 // class java/lang/ExceptionInInitializerError 14: ifeq 22 17: aload_1 18: checkcast #53 // class java/lang/ExceptionInInitializerError 21: athrow 22: nop 23: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 26: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 29: aload_1 30: athrow 31: getstatic #43 // Field Experiment.ajc$cflowCounter$0:Lorg/aspectj/runtime/internal/CFlowCounter; 34: invokevirtual #51 // Method org/aspectj/runtime/internal/CFlowCounter.dec: V 37: return Exception table: from to target type 6 9 9 Class java/lang/Throwable }</description>
    <commit commitTime="2014-10-07 15:07:00" id="34cff60"/>
    <fixedFiles>
      <file>tests/bugs183/443477/Coo.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc183/Ajc183Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
  <bug id="445968" reportTime="2014-10-05 08:51:00">
    <summary>AbstractIndexedFileCacheBacking#createIndexEntry creates wrong index entry for ignored entries</summary>
    <description>The code states: if !classEntry.isIgnored { indexEntry.crcClass = crc originalBytes ; indexEntry.crcWeaved = crc classEntry.getBytes ; } In other words, if the entry is ignored then the 'crcClass' value is ZERO. However, in AsynchronousFileCacheBacking#get CachedClassReference ref, byte[] originalBytes method, the following code is run: if crc originalBytes != indexEntry.crcClass { remove key ; return null; } if indexEntry.ignored { return new CachedClassEntry ref, WeavedClassCache.ZERO_BYTES, CachedClassEntry.EntryType.IGNORED ; } But for ignored entries, the crc originalBytes is ALWAYS not equal to the 'crcClass' value which is ZERO . This means that the whole issue of caching simply does not work for the ignored entries. The fix is simple: in bstractIndexedFileCacheBacking#createIndexEntry the code should ALWAYS calculate the 'crcClass' value on the original bytes, and add the 'crcWeaved' one only for non-ignored ones.</description>
    <commit commitTime="2014-10-07 16:53:15" id="170b1ce"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/tools/cache/AbstractIndexedFileCacheBacking.java</file>
    </fixedFiles>
  </bug>
  <bug id="443355" reportTime="2014-09-04 18:37:00">
    <summary>methods using Type.super.XX failing to compile</summary>
    <description>interface Foo { static Foo getMeAFoo { return new FooImpl ; } // void printMessage ; default void printMessage { System.out.println "Message from Foo!" ; } } //interface Bar { // default void printMessage { // System.out.println "Message from Bar!" ; // } //} class FooImpl implements Foo { @Override public void printMessage { Bar.super.printMessage ; } } public class Demo { public static void main String[] args { Foo f = Foo.getMeAFoo ; f.printMessage ; } } aspect X { before : execution * Foo.* .. { System.out.println thisJoinPoint ; } }</description>
    <commit commitTime="2014-10-08 13:23:50" id="dddd123"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc183/Ajc183Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="449401" reportTime="2014-10-30 17:19:00">
    <summary>thisAspectInstance compile problem with -1.8</summary>
    <description>Similar to other 'well known' local variables like thisJoinPoint, the eclipse 1.8 compiler is complaining that thisAspectInstance is not initialized when it is a variable that we AspectJ look after. The fix is the same as for thisJoinPoint et al - just special case this well known variable. This did not surface in earlier testing because all the thisAspectInstance tests in the 1.6.12 testsuite compile with -1.5 - it is only when compiling with -1.8 that the extra checking is done. I'm copying the 1.6.12 tests into the 1.8.4 suite and having them specify -1.8.</description>
    <commit commitTime="2014-10-30 14:33:12" id="e91fcab"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/problem/AjProblemReporter.java</file>
      <file>tests/src/org/aspectj/systemtest/AllTests18.java</file>
    </fixedFiles>
  </bug>
  <bug id="449739" reportTime="2014-11-03 07:09:00">
    <summary>Improve is pointcut to support class modifiers like 'final'</summary>
    <description>The original intent of https://bugs.eclipse.org/bugs/show_bug.cgi?id=44365 was to support matching class modifiers like final, protected etc. This was not achived by the is pointcut. One prominent use case for my suggestion would be Spring AOP users wishing to exclude final types from weaving because Spring uses dynamic CGLIB proxies which cannot extend final types. It would be nice if I could write something like: execution public * * .. &amp;amp;&amp;amp; !within is EnumType &amp;amp;&amp;amp; !within is FinalType Would it be hard to add support for class modifiers that way? I think it would come in handy sometimes. I am not going as far as wanting support for my favourite variant of direct modifier support is AspectJ pointcut syntax, e.g.: execution public * !final * .* .. or !within final * That would be even better, but I am trying not to be too greedy. ;-</description>
    <commit commitTime="2014-11-05 08:27:45" id="11fba64"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/PatternParser.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/TypeCategoryTypePattern.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc184/Ajc184Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="456457" reportTime="2014-12-31 17:40:00">
    <summary>Data set parameter default value missing after saving invalid query</summary>
    <description>Step to reproduce: 1. Create a dataset, set a parameter and give it a default value 2. Preview the dataset 3. modify the query to create an error 4. save the data set 5. reopen the data set to correct the error, save the data set Upon saving the data set, a notice about input parameter has empty value will show and ask if the user wants to leave it empty. The previously set default value has missing upon this point.</description>
    <commit commitTime="2015-01-07 16:22:57" id="7569aad"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/MemberImpl.java</file>
      <file>testing/newsrc/org/aspectj/testing/XMLBasedAjcTestCase.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc185/Ajc185Tests.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="456003" reportTime="2014-12-22 16:19:00">
    <summary>BUG - Use of Wrong Operator in String Comparison - WildAnnotationTypePattern.java</summary>
    <description>We are currently using aspectjweaver-1.6.9.jar and during veracode analysis, this scanner found this bug in WildAnnotationTypePattern.java line 110,119,137,146,155 y 164 : Type: Use of Wrong Operator in String Comparison Description: Using '==' to compare two strings for equality or '!=' for inequality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic. Recommendations Use the equals method to compare strings, not the '==' or '!=' operator.</description>
    <commit commitTime="2015-01-07 16:35:49" id="b45ec32"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/WildAnnotationTypePattern.java</file>
    </fixedFiles>
  </bug>
  <bug id="456374" reportTime="2014-12-30 15:10:00">
    <summary>BUG - Use of Wrong Operator in String Comparison - LazyClassGen.java</summary>
    <description>We are currently using aspectjweaver-1.6.9.jar and during veracode analysis, this scanner found this bug in LazyClassGen.java Line 767 in the version 1.6.8, 1.6.9 and 1.8.4 Line 793 : Type: Use of Wrong Operator in String Comparison Description: Using '==' to compare two strings for equality or '!=' for inequality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic. Recommendations Use the equals method to compare strings, not the '==' or '!=' operator. is this a false positive? Thanks.</description>
    <commit commitTime="2015-01-07 16:49:21" id="fa89388"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="450634" reportTime="2014-11-08 07:01:00">
    <summary>Improve ajc.bat to pass &gt;9 arguments</summary>
    <description>This bugs seems to be related to https://bugs.eclipse.org/bugs/show_bug.cgi?id=341788 and re-occurs on my Win 8.1 machine. The fix is the same as mentioned in the other ticket: In the last batch file line which contains ... org.aspectj.tools.ajc.Main %1 %2 %3 %4 %5 %6 %7 %8 %9 just replace "%1 %2 %3 %4 %5 %6 %7 %8 %9" by "%*".</description>
    <commit commitTime="2015-01-08 08:28:35" id="8db5893"/>
    <fixedFiles>
      <file>build/src/$installer$/org/aspectj/Main.java</file>
    </fixedFiles>
  </bug>
  <bug id="462821" reportTime="2015-03-23 05:40:00">
    <summary>Bytecode dump weaving annotation based aspect on Java 8 using asjectjtools &gt;1.8.2</summary>
    <description>Created attachment 251819 [details] Maven project that reproduces the issue Apologies for the non-descriptive title but I really have no idea how to better classify this. When trying to upgrade an existing project from java 7 to java 8, aspectj weaving started to fail for one of the project's modules: [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 2.362 s [INFO] Finished at: 2015-03-23T10:19:18+01:00 [INFO] Final Memory: 21M/164M [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.codehaus.mojo:aspectj-maven-plugin:1.7:compile default on project testapp: AJC compiler errors: [ERROR] abort trouble in: [ERROR] public class no.kantega.FooService extends java.lang.Object: [ERROR] public void &amp;lt;init&amp;gt; : [ERROR] ALOAD_0 // Lno/kantega/FooService; this line 3 [ERROR] INVOKESPECIAL java.lang.Object.&amp;lt;init&amp;gt; V [ERROR] constructor-execution void no.kantega.FooService.&amp;lt;init&amp;gt; [ERROR] | RETURN [ERROR] constructor-execution void no.kantega.FooService.&amp;lt;init&amp;gt; [ERROR] end public void &amp;lt;init&amp;gt; [ERROR] [ERROR] public String doSomething org.aspectj.weaver.MethodDeclarationLineNumber: 6:92 [ERROR] : [ERROR] GETSTATIC no.kantega.FooService.ajc$tjp_0 Lorg/aspectj/lang/JoinPoint$StaticPart; [ERROR] ALOAD_0 [ERROR] ALOAD_0 [ERROR] INVOKESTATIC org.aspectj.runtime.reflect.Factory.makeJP Lorg/aspectj/lang/JoinPoint$StaticPart;Ljava/lang/Object;Ljava/lang/Object; Lorg/aspectj/lang/JoinPoint; [ERROR] ASTORE_1 [ERROR] method-execution java.lang.String no.kantega.FooService.doSomething [ERROR] | LDC "foo" line 7 [ERROR] | ARETURN [ERROR] method-execution java.lang.String no.kantega.FooService.doSomething [ERROR] end public String doSomething [ERROR] [ERROR] end public class no.kantega.FooService [ERROR] -- BCException Class no.kantega.FooServiceLoggerAspect does not have a method handleInfoJoinPointsToLog with signature Lorg/aspectj/lang/ProceedingJoinPoint; Ljava/lang/Object; [ERROR] when implementing on shadow method-execution java.lang.String no.kantega.FooService.doSomething [ERROR] when weaving type no.kantega.FooService [ERROR] when weaving classes [ERROR] when weaving [ERROR] when batch building BuildConfig[null] #Files=3 AopXmls=#0 [ERROR] [ERROR] Class no.kantega.FooServiceLoggerAspect does not have a method handleInfoJoinPointsToLog with signature Lorg/aspectj/lang/ProceedingJoinPoint; Ljava/lang/Object; [ERROR] when implementing on shadow method-execution java.lang.String no.kantega.FooService.doSomething [ERROR] when weaving type no.kantega.FooService [ERROR] when weaving classes [ERROR] when weaving [ERROR] when batch building BuildConfig[null] #Files=3 AopXmls=#0 [ERROR] [ERROR] org.aspectj.weaver.BCException: Class no.kantega.FooServiceLoggerAspect does not have a method handleInfoJoinPointsToLog with signature Lorg/aspectj/lang/ProceedingJoinPoint; Ljava/lang/Object; [ERROR] when implementing on shadow method-execution java.lang.String no.kantega.FooService.doSomething [ERROR] when weaving type no.kantega.FooService [ERROR] when weaving classes [ERROR] when weaving [ERROR] when batch building BuildConfig[null] #Files=3 AopXmls=#0 [ERROR] [ERROR] at org.aspectj.weaver.bcel.LazyClassGen.getLazyMethodGen LazyClassGen.java:1548 [ERROR] at org.aspectj.weaver.bcel.LazyClassGen.getLazyMethodGen LazyClassGen.java:1533 [ERROR] at org.aspectj.weaver.bcel.BcelAdvice.canInline BcelAdvice.java:244 [ERROR] at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:363 [ERROR] at org.aspectj.weaver.Shadow.implementMungers Shadow.java:632 [ERROR] at org.aspectj.weaver.Shadow.implement Shadow.java:547 [ERROR] at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:3335 [ERROR] at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:496 [ERROR] at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:100 [ERROR] at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1689 [ERROR] at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1633 [ERROR] at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1398 [ERROR] at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1184 [ERROR] at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:514 [ERROR] at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving AjPipeliningCompilerAdapter.java:447 [ERROR] at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:432 [ERROR] at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:103 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:822 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:480 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:420 [ERROR] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1036 [ERROR] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:272 [ERROR] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:185 [ERROR] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 [ERROR] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 [ERROR] at org.aspectj.tools.ajc.Main.run Main.java:371 [ERROR] at org.aspectj.tools.ajc.Main.runMain Main.java:248 [ERROR] at org.codehaus.mojo.aspectj.AbstractAjcCompiler.execute AbstractAjcCompiler.java:524 [ERROR] at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo DefaultBuildPluginManager.java:132 [ERROR] at org.apache.maven.lifecycle.internal.MojoExecutor.execute MojoExecutor.java:208 [ERROR] at org.apache.maven.lifecycle.internal.MojoExecutor.execute MojoExecutor.java:153 [ERROR] at org.apache.maven.lifecycle.internal.MojoExecutor.execute MojoExecutor.java:145 [ERROR] at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject LifecycleModuleBuilder.java:116 [ERROR] at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject LifecycleModuleBuilder.java:80 [ERROR] at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build SingleThreadedBuilder.java:51 [ERROR] at org.apache.maven.lifecycle.internal.LifecycleStarter.execute LifecycleStarter.java:120 [ERROR] at org.apache.maven.DefaultMaven.doExecute DefaultMaven.java:355 [ERROR] at org.apache.maven.DefaultMaven.execute DefaultMaven.java:155 [ERROR] at org.apache.maven.cli.MavenCli.execute MavenCli.java:584 [ERROR] at org.apache.maven.cli.MavenCli.doMain MavenCli.java:216 [ERROR] at org.apache.maven.cli.MavenCli.main MavenCli.java:160 [ERROR] at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method [ERROR] at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java:62 [ERROR] at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java:43 [ERROR] at java.lang.reflect.Method.invoke Method.java:483 [ERROR] at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced Launcher.java:289 [ERROR] at org.codehaus.plexus.classworlds.launcher.Launcher.launch Launcher.java:229 [ERROR] at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode Launcher.java:415 [ERROR] at org.codehaus.plexus.classworlds.launcher.Launcher.main Launcher.java:356 [ERROR] -&amp;gt; [Help 1] [ERROR] Relevant versions are maven 3.2.5, maven-compiler-plugin 3.1, aspectj-maven-plugin 1.7, aspectjrt/tools 1.8.5. I've attached a small stand-alone maven project that reproduces the issue on my machine. As for workarounds, the build works fine if I back down to aspectjrools/aspectjrt 1.8.2. 1.8.3 through 1.8.5 all fail the same way. Additionally, setting compliance levels to 1.7 works, even on 1.8.5, though that workaround would lock us out of using Java 8 constructs for now. I'm not sure why this particular module fails while the others worked fine through the upgrade, but I'm guessing it has to do with this particular module being the only one to use annotation based aspects.</description>
    <commit commitTime="2015-03-23 12:54:54" id="a1cfe94"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/AllTests18.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</file>
    </fixedFiles>
  </bug>
  <bug id="462146" reportTime="2015-03-14 13:41:00">
    <summary>[iajc] Compiler argument parameters and iajc</summary>
    <description>I want to have both: 1. the Java 8 feature of parameter names per reflection. Therefore the compiler argument -parameters must be given. 2. Run the build including AspectJ compilation via ANT. When i build my project in Eclipse, it seems to work, to set that compiler option and use the AspectJ builder. But in ANT, i can't see how to do it. The iajc task does not accept the &amp;lt;compilerarg value="-parameters" /&amp;gt; element. And I cannot find hints in the documentation. thx Frank</description>
    <commit commitTime="2015-03-26 17:19:37" id="0c9521a"/>
    <fixedFiles>
      <file>taskdefs/src/org/aspectj/tools/ant/taskdefs/AjcTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="406167" reportTime="2013-04-21 04:05:00">
    <summary>Weaving failure with complex generic type</summary>
    <description>Created attachment 229935 [details] The classes I fail to weave and my weaving code Using aspectjtools 1.7.2 I get the following exception: INFO: abort ABORT -- IllegalStateException Expecting .,&amp;lt;, or ;, but found / while unpacking Lcom/a/a/b/t&amp;lt;TK;TV;&amp;gt;.com/a/a/b/af.com/a/a/b/ag;Ljava/util/ListIterator&amp;lt;TV;&amp;gt;; Expecting .,&amp;lt;, or ;, but found / while unpacking Lcom/a/a/b/t&amp;lt;TK;TV;&amp;gt;.com/a/a/b/af.com/a/a/b/ag;Ljava/util/ListIterator&amp;lt;TV;&amp;gt;; java.lang.IllegalStateException: Expecting .,&amp;lt;, or ;, but found / while unpacking Lcom/a/a/b/t&amp;lt;TK;TV;&amp;gt;.com/a/a/b/af.com/a/a/b/ag;Ljava/util/ListIterator&amp;lt;TV;&amp;gt;; Attached are the classes I try to weave, and my code that does the actual weaving reproducible also by command line .</description>
    <commit commitTime="2015-04-01 08:02:01" id="c6753a8"/>
    <fixedFiles>
      <file>util/src/org/aspectj/util/GenericSignatureParser.java</file>
      <file>util/testsrc/org/aspectj/util/GenericSignatureParserTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="467415" reportTime="2015-05-15 11:18:00">
    <summary>Weaver created bridge methods missing ACC_SYNTHETIC</summary>
    <description>Related to the issue about methods incorrectly having ACC_INTERFACE on them, bridge methods created by the weaver seem to be missing ACC_SYNTHETIC.</description>
    <commit commitTime="2015-05-15 08:20:50" id="066dc11"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/Constants.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelClassWeaver.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="473555" reportTime="2015-07-24 20:41:00">
    <summary>File descriptors leak in ExtensibleURLClassLoader</summary>
    <description>Undeploying a Webapp leaves open file descriptors if ExtensibleClassLoader has been used to load any "plugins". We see this in Hudson when deployed to a Tomcat server: at java.util.zip.ZipFile.&amp;lt;init&amp;gt; ZipFile.java:146 at java.util.zip.ZipFile.&amp;lt;init&amp;gt; ZipFile.java:159 at org.aspectj.weaver.bcel.ClassPathManager$ZipFileEntry.ensureOpen ClassPathManager.java:294 at org.aspectj.weaver.bcel.ClassPathManager$ZipFileEntry.find ClassPathManager.java:264 at org.aspectj.weaver.bcel.ClassPathManager.find ClassPathManager.java:101 at org.aspectj.weaver.bcel.ExtensibleURLClassLoader.getBytes ExtensibleURLClassLoader.java:77 at org.aspectj.weaver.loadtime.WeavingURLClassLoader.getBytes WeavingURLClassLoader.java:180 at org.aspectj.weaver.bcel.ExtensibleURLClassLoader.findClass ExtensibleURLClassLoader.java:50 at java.lang.ClassLoader.loadClass ClassLoader.java:425 at java.lang.ClassLoader.loadClass ClassLoader.java:358 at hudson.util.XStream2$AssociatedConverterImpl.findConverter XStream2.java:185 at hudson.util.XStream2$AssociatedConverterImpl.canConvert XStream2.java:225 ZipFile accumulates in a cache in ClassPathManager which is never completely cleared.</description>
    <commit commitTime="2015-08-05 12:33:31" id="9f19c3d"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/ExtensibleURLClassLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="474165" reportTime="2015-08-03 13:50:00">
    <summary>Annotation on introduced interface through declareparents causes AspectJ compiler error</summary>
    <description>I'm using @DeclareParents to introduce an interface to certain entites. The problem is that when I add the following annotation @JsonView View.Minimal.class to the introduced interface, I get the following AspectJ compiler error: org.aspectj.ajdt.internal.compiler.lookup.EclipseAnnotationConvertor$MissingImplementationException: Please raise an AspectJ bug. AspectJ does not know how to convert this annotation value [View.Minimal.class] at org.aspectj.ajdt.internal.compiler.lookup.EclipseAnnotationConvertor.generateElementValueForNonConstantExpression EclipseAnnotationConvertor.java:221 at org.aspectj.ajdt.internal.compiler.lookup.EclipseAnnotationConvertor.generateElementValue EclipseAnnotationConvertor.java:129 at org.aspectj.ajdt.internal.compiler.lookup.EclipseAnnotationConvertor.generateAnnotation EclipseAnnotationConvertor.java:100 at org.aspectj.ajdt.internal.compiler.lookup.EclipseAnnotationConvertor.convertEclipseAnnotation EclipseAnnotationConvertor.java:58 at org.aspectj.ajdt.internal.compiler.lookup.EclipseResolvedMember.getAnnotations EclipseResolvedMember.java:102 at org.aspectj.weaver.bcel.BcelTypeMunger.mungeMethodDelegate BcelTypeMunger.java:1413 at org.aspectj.weaver.bcel.BcelTypeMunger.munge BcelTypeMunger.java:112</description>
    <commit commitTime="2015-08-06 13:53:56" id="7a61a0d"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseAnnotationConvertor.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc187/Ajc187Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="470658" reportTime="2015-06-21 12:14:00">
    <summary>Corrupted Local Variable Table</summary>
    <description>Created attachment 254594 [details] Zip containing all files to reproduce the issue Hi :- I have found an issue during weaving, which can be reproduced by the attached files. The weaved class after running ajc has some corrupted Local Variable Tables, where some slots are missing. When opening the weaved class - com/crashlytics/android/v.class - and looking at it using Sublime for example, I could see the following: LocalVariableTable: Start Length Slot Name Signature 0 154 0 arg0 Lcom/crashlytics/android/internal/aq; 0 154 1 arg1 I 0 154 2 arg2 J 0 154 4 arg3 Ljava/lang/String; As seen above, Slot 3 is missing... This issue causes some problems with Android's build framework. To reproduce the problem please do the following: - Unzip the attached - Define a ASPECTJ_HOME env variable, or simply edit the run.cmd file - Execute run.cmd The result would be ajc weaving the class v.class, using FilesApsect.aj found under the src dir. And the weaved jar will contain a v.class with the problem. Thanks! Ariel</description>
    <commit commitTime="2015-08-10 11:35:19" id="5219b4a"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/World.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="475728" reportTime="2015-08-24 11:09:00">
    <summary>LTW breaks Eclipse classloading for non javac-named inner classes</summary>
    <description>Hi, in the past days I experienced a bug in the org.aspectj.weaver plug-in using equinox load-time weaving. The problematic source code is contained in org.aspectj.weaver.bcel.BcelObjectType at lines 903-905 of the method getOuterClass . The method should resolve the declaring class for a current inner class. The problematic code tries to resolve the declaring class using String operations. It assumes the compiled class to follow the javac naming conventions. If this isn't the case like it can happen e.g. for obfuscated classes , a StringIndexOutOfBoundException is raised since the javac-specific $ in the inner-classe's name wasn't found . This Exception is propagated and never catched which results in the class to be never loaded neither woven nor unwoven . A NoClassDefFoundError is the result and the class loading process is broken in this moment. To fix this, properly the outerclass check should not rely on the javac assumption. A hotfix could be to catch the Exception to avoid a broken class loading process... Best regards, Lukas PS: A similar problem is maybe described in Bug 432874</description>
    <commit commitTime="2015-09-02 09:05:35" id="415ef62"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
    </fixedFiles>
  </bug>
  <bug id="432874" reportTime="2014-04-15 23:50:00">
    <summary>StringIndexOutOfBoundsException after adding project to inpath</summary>
    <description>when I add my project to Preference-&amp;gt;AspectJ Build-&amp;gt;Inpath, it report an exception error. ADJT version:2.2.3 Eclipse version:4.3.1 aspectJ-1.8.0.M1.jar aspectjweaver-1.8.0.M1.jar I have added both jar file above to referenced libraries and Android private Libraries Error log see below. java.lang.StringIndexOutOfBoundsException at java.lang.String.substring String.java:1911 at org.aspectj.weaver.bcel.BcelObjectType.getOuterClass BcelObjectType.java:899 at org.aspectj.weaver.AbstractReferenceTypeDelegate.getFormalTypeParametersFromOuterClass AbstractReferenceTypeDelegate.java:108 at org.aspectj.weaver.bcel.BcelObjectType.ensureGenericSignatureUnpacked BcelObjectType.java:767 at org.aspectj.weaver.bcel.BcelObjectType.getS ... 43 at org.eclipse.core.internal.jobs.Worker.run Worker.java:53 Compile error: StringIndexOutOfBoundsException thrown: String index out of range: -1</description>
    <commit commitTime="2015-09-02 09:05:35" id="415ef62"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
    </fixedFiles>
  </bug>
  <bug id="475152" reportTime="2015-08-17 09:20:00">
    <summary>infinite loop during build time weaving when more than 2 aspects in hierarchy at org.aspectj.weaver.bcel.BcelAdvice.canInline</summary>
    <description>Created attachment 255894 [details] proposed patch When weaving aspect, which has two base aspects, code from a1cfe944a602101d144c8efd7df217ab20e4b9ee goes into an infinite loop. There isn't assignment of boType inside while loop, so if lazyMethodGen doesn't find matching method in direct base class, it stays forewer in while loop, stack trace from build thread: "main" #1 prio=5 os_prio=0 tid=0x00007fd6c4008800 nid=0x9e8 runnable [0x00007fd6ca11d000] java.lang.Thread.State: RUNNABLE at org.aspectj.weaver.bcel.BcelAdvice.canInline BcelAdvice.java:257 at org.aspectj.weaver.bcel.BcelAdvice.implementOn BcelAdvice.java:378 at org.aspectj.weaver.Shadow.implementMungers Shadow.java:632 at org.aspectj.weaver.Shadow.implement Shadow.java:547 at org.aspectj.weaver.bcel.BcelClassWeaver.implement BcelClassWeaver.java:3335 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:496 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:100 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1689 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1633 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1398 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1184 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:514 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving AjPipeliningCompilerAdapter.java:447 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:432 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:103 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:822 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:480 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:420 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1036 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:272 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:185 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:371 at org.aspectj.tools.ajc.Main.runMain Main.java:248 at org.codehaus.mojo.aspectj.AbstractAjcCompiler.execute AbstractAjcCompiler.java:524 I'm attaching simple maven test case and patch working for me.</description>
    <commit commitTime="2015-09-02 09:49:22" id="a9ea701"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc187/Ajc187Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</file>
    </fixedFiles>
  </bug>
  <bug id="476245" reportTime="2015-08-31 11:58:00">
    <summary>Issue Resolving Type with Java 8 Lambda Functions</summary>
    <description>Created attachment 256265 [details] Source code demonstrating bug I get a compiler error from ajc 1.8.6 when I try to compile a Java class making use of lambda functions: ajc: Type mismatch: cannot convert from Object to boolean The code that triggers this error is below. Note that this compiles with the Oracle JDK 1.8.0_60 compiler. import java.util.Optional; public class Testing { public static void main String[] args { Optional&amp;lt;Integer&amp;gt; value1 = Optional.of 15 ; Optional&amp;lt;Integer&amp;gt; value2 = Optional.of 30 ; boolean passed = value1.flatMap v1 -&amp;gt; value2.map v2 -&amp;gt; v2 / v1 == 2 .orElse false ; System.out.println passed ; } }</description>
    <commit commitTime="2015-09-04 13:33:52" id="0095636"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc187/Ajc187Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="464604" reportTime="2015-04-14 09:37:00">
    <summary>ajdoc fails when run with JDK 7</summary>
    <description>Created attachment 252382 [details] the Maven output I'm executing ajdoc via Maven and set source, target to 1.7 and complianceLevel to 1.8. When running the report generation with JDK 1.7.0_72 or 1.7.0_76, I run into the attached issue. 1.8.0_40 does not lead to the problem. So, it looks to me as if the JDK 1.7 and 1.8 doclets are not properly identified.</description>
    <commit commitTime="2015-09-04 14:40:23" id="09b5726"/>
    <fixedFiles>
      <file>ajdoc/src/org/aspectj/tools/ajdoc/HtmlDecorator.java</file>
    </fixedFiles>
  </bug>
  <bug id="458871" reportTime="2015-01-31 07:20:00">
    <summary>Make weaving agent attachable during runtime via VirtualMachine.loadAgent</summary>
    <description>Created attachment 250406 [details] Patch for AspectJ weaver to enable dynamic weaver attachment Currently the weaving agent in aspectjweaver.jar does not contain an 'agentmain' method and a corresponding manifest entry. I added those to the code and patched my JAR with the updated Agent.class and MANIFEST.MF. Now dynamically attaching the agent to the current classloader works. I am attaching - a patch against current Git master, - an Eclipse sample project showing the effect. You need to adjust the path of tools.jar needed for compilation . A patched version of aspectjweaver.jar and a sample aspect.jar with a 'before : execution * * .. ' pointcut so we have something to weave are contained in the 'lib' subdirectory. If you just run the 'Application' class as a Java, it will determine that the aspect weaver has not been loaded and attach it dynamically. Subsequently defined/loaded classes will then be subject to weaving as can be seen in the console output: Hello world! java.lang.UnsupportedOperationException: AspectJ weaving agent was neither started via '-javaagent' preMain nor attached via 'VirtualMachine.loadAgent' agentMain [AppClassLoader@2d63c5bb] info AspectJ Weaver Version 1.8.4 built on Thursday Nov 6, 2014 at 20:19:21 GMT [AppClassLoader@2d63c5bb] info register classloader sun.misc.Launcher$AppClassLoader@2d63c5bb [AppClassLoader@2d63c5bb] info using configuration file:/C:/Users/Alexander/Documents/java-src/SO_AJ_LTW_CheckIfWeaverIsLoaded/lib/aspect.jar!/META-INF/aop.xml [AppClassLoader@2d63c5bb] info register aspect com.aspect.generic.GenericAspect [AppClassLoader@2d63c5bb] weaveinfo Join point 'method-execution void de.scrum_master.app.Dummy.doSomething ' in Type 'de.scrum_master.app.Dummy' Dummy.java:4 advised by before advice from 'com.aspect.generic.GenericAspect' GenericAspect.aj [AppClassLoader@2d63c5bb] weaveinfo Join point 'method-execution int de.scrum_master.app.Dummy.square int ' in Type 'de.scrum_master.app.Dummy' Dummy.java:9 advised by before advice from 'com.aspect.generic.GenericAspect' GenericAspect.aj execution void de.scrum_master.app.Dummy.doSomething Do something execution int de.scrum_master.app.Dummy.square int Square of 7 = 49 [AppClassLoader@2d63c5bb] weaveinfo Join point 'method-execution void de.scrum_master.app.Application$1.run ' in Type 'de.scrum_master.app.Application$1' Application.java:50 advised by before advice from 'com.aspect.generic.GenericAspect' GenericAspect.aj execution void de.scrum_master.app.Application.1.run Anonymous runnable Hello world!</description>
    <commit commitTime="2015-09-08 13:33:06" id="83acbda"/>
    <fixedFiles>
      <file>loadtime5/java5-src/org/aspectj/weaver/loadtime/Agent.java</file>
    </fixedFiles>
  </bug>
  <bug id="478003" reportTime="2015-09-21 17:52:00">
    <summary>NullPointerException with generic inter type method declaration</summary>
    <description>Created attachment 256733 [details] dump Below snippet produce NullPointerException. If I replace line public OrientDBValue OrientKey&amp;lt;T&amp;gt;.getOrientDBValue with public OrientDBValue OrientKey.getOrientDBValue it compiles ok import com.flickbay.orientdb.OrientKey; public aspect OrientDBKeyIO { public interface IO&amp;lt;T&amp;gt; { OrientDBValue&amp;lt;T&amp;gt; getOrientDBValue ; } declare parents : OrientKey implements IO; public SimpleOrientDBValue OrientKey&amp;lt;T&amp;gt;.value = null; public OrientDBValue OrientKey&amp;lt;T&amp;gt;.getOrientDBValue { return this.value; } }</description>
    <commit commitTime="2015-11-18 14:43:41" id="12d0a82"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="461323" reportTime="2015-03-03 11:05:00">
    <summary>ClassFormatError "invalid modifier 0x8" when trying to make a default method @Loggable</summary>
    <description>Created attachment 251258 [details] JUnit test case I am using JDK 1.8, jcabi-aspects 0.21.1 and AspectJ 1.8.5 in Eclipse Luna SR2. I build either in Eclipse or with the jcabi-maven-plugin 0.12. I have annotated a default method in an interface as @Loggable. After weaving, trying to load that class leads to an error: java.lang.BootstrapMethodError: java.lang.ClassFormatError: Method apply_aroundBody0 in class java8/aspectsjtest/TheInterface has illegal modifiers: 0x8 That's the "static" modifier. I have attached an example. Please compile and try to run java8.aspectsjtest.TheInterfaceTest as a JUnit 4 test. The intent is to log all function invocations through TheInterface, so I override java.util.functions.Function#apply/1 which is called in existing code to delegate to a new abstract method, and annotate the apply-method.</description>
    <commit commitTime="2015-11-19 08:54:14" id="af8a5a2"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/ajc188/Ajc188Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/Utility.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/bcel/MoveInstructionsWeaveTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="482990" reportTime="2015-11-25 05:22:00">
    <summary>Load time weaving silently generates invalid classes without StackMapTables if aj.org.objectweb.asm package is not found</summary>
    <description>After upgrading from AspectJ 1.7.2 Spring EBR osgi bundle to 1.8.7 Apache ServiceMix osgi bundle in our OSGI environment, we started seeing VerifyErrors like these for load-time woven classes: HttpServiceContext{httpContext=our.paclage.BundleHttpContext@5552fc77}: java.lang.VerifyError: Expecting a stackmap frame at branch target 63|Exception Details:| Location:| our/package/OurResource.&amp;lt;init&amp;gt; V @23: ifnull| Reason:| Expected stackmap frame at this location.| Bytecode:| 0x0000000: 2ab7 0001 b200 c62a 2ab8 009c 4db2 0096| 0x0000010: 2a2a b800 9c4c 2ac6 0028 2ab6 00ac 12ae| 0x0000020: b600 bc99 001c 2ab6 00ac 12ae b600 b4c0| 0x0000030: 00ae b800 b899 000a b800 a22a b600 a800| 0x0000040: 2ac6 0021 2ab6 00ac 12ae b600 bc99 0015| 0x0000050: 2ab6 00ac 12ae b600 b4c0 00ae b800 b89a| 0x0000060: 0021 2ac6 001d 2ab6 00ac 12ae b600 bc99| 0x0000070: 0011 2bb8 00c3 9900 0ab8 00a2 2ab6 00bf| 0x0000080: 00a7 0003 2ab6 00ac 12ae b600 b4c0 00ae| 0x0000090: b800 b89a 0011 2cb8 00c3 9900 0ab8 00a2| 0x00000a0: 2ab6 00bf b1 | java.lang.VerifyError: Expecting a stackmap frame at branch target 63|Exception Details:| Location:| our/package/OurResource.&amp;lt;init&amp;gt; V @23: ifnull| Reason:| Expected stackmap frame at this location.| Bytecode:| 0x0000000: 2ab7 0001 b200 c62a 2ab8 009c 4db2 0096| 0x0000010: 2a2a b800 9c4c 2ac6 0028 2ab6 00ac 12ae| 0x0000020: b600 bc99 001c 2ab6 00ac 12ae b600 b4c0| 0x0000030: 00ae b800 b899 000a b800 a22a b600 a800| 0x0000040: 2ac6 0021 2ab6 00ac 12ae b600 bc99 0015| 0x0000050: 2ab6 00ac 12ae b600 b4c0 00ae b800 b89a| 0x0000060: 0021 2ac6 001d 2ab6 00ac 12ae b600 bc99| 0x0000070: 0011 2bb8 00c3 9900 0ab8 00a2 2ab6 00bf| 0x0000080: 00a7 0003 2ab6 00ac 12ae b600 b4c0 00ae| 0x0000090: b800 b89a 0011 2cb8 00c3 9900 0ab8 00a2| 0x00000a0: 2ab6 00bf b1 | at java.lang.Class.getDeclaredConstructors0 Native Method ... Investigation of the woven bytecode in _ajdump revealed that the woven classes were indeed missing their StackMapTables. After much searching, we found out that the root cause was the fact that the ServiceMix bundle did not include the renamed ASM library aj.org.objectweb.asm.* packages . We logged a bug for this here: https://issues.apache.org/jira/browse/SM-2744 It took us a long time to find this, because instead of throwing an Exception ClassNotFoundException or similar , AspectJ simply decides to not generate StackMapTables, thus generating bytecode that is completely invalid for Java 1.7 or higher. The relevant code snippets: org.aspectj.weaver.bcel.LazyClassGen: if myGen.getMajor == Constants.MAJOR_1_6 &amp;amp;&amp;amp; world.shouldGenerateStackMaps || myGen.getMajor &amp;gt; Constants.MAJOR_1_6 &amp;amp;&amp;amp; AsmDetector.isAsmAround { wovenClassFileData = StackMapAdder.addStackMaps world, wovenClassFileData ; } org.aspectj.weaver.bcel.asm.AsmDetector: public class AsmDetector { public static boolean isAsmAround; static { try { Class&amp;lt;?&amp;gt; reader = Class.forName "aj.org.objectweb.asm.ClassReader" ; Class&amp;lt;?&amp;gt; visitor = Class.forName "aj.org.objectweb.asm.ClassVisitor" ; Method m = reader.getMethod "accept", new Class[] { visitor, Integer.TYPE } ; isAsmAround = m != null; } catch Exception e { isAsmAround = false; } // System.out.println isAsmAround?"ASM detected":"No ASM found" ; } } As far as I can see, The LazyClassGen class should throw an Exception if myGen.getMajor &amp;gt; Constants.MAJOR_1_6 &amp;amp;&amp;amp; !AsmDetector.isAsmAround Also, I think AsmDetector could be more lenient and also accept a regular non-included ASM. If I've seen correctly, the aj-prefixed inlined version is simply a renamed copy of ASM 5.0.4, so using the regular ASM should work. I'm also not sure why this ASM needs to be renamed and embedded in the first place, but there is probably a reason that I'm not aware of.</description>
    <commit commitTime="2015-11-25 12:19:12" id="fd1888b"/>
    <fixedFiles>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyClassGen.java</file>
    </fixedFiles>
  </bug>
  <bug id="482945" reportTime="2015-11-24 15:07:00">
    <summary>NullPointerException and core dump on specific obfuscated inner class</summary>
    <description>I'm getting a NullPointerException on a specific class during loadtime weaving, which then results in an ajcore dump file. See below for part of the dump. I traced it back to an earlier bug and fix 432874. In this fix, getOuterClass has been fixed to return null in case the outer class of an obfuscated inner class no $ in name anymore cannot be determined. It seems that now the next step faills where the code tries to access the outerClass object anyway. Workaround is to exclude the class from the weaver. I can provide the specific classes upon request. SEVERE: com/tibco/xml/parsers/xmlfactories/b java.lang.NullPointerException at org.aspectj.weaver.AbstractReferenceTypeDelegate.getFormalTypeParametersFromOuterClass AbstractReferenceTypeDelegate.java:111 at org.aspectj.weaver.bcel.BcelObjectType.ensureGenericSignatureUnpacked BcelObjectType.java:772 at org.aspectj.weaver.bcel.BcelObjectType.getSuperclass BcelObjectType.java:231 at org.aspectj.weaver.ReferenceType.getSuperclass ReferenceType.java:987 at org.aspectj.weaver.bcel.BcelWeaver.weaveParentsFor BcelWeaver.java:1300 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1119 at org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes WeavingAdaptor.java:527 at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass WeavingAdaptor.java:363 at org.aspectj.weaver.loadtime.Aj.preProcess Aj.java:121 at org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform ClassPreProcessorAgentAdapter.java:54 at sun.instrument.TransformerManager.transform Unknown Source at sun.instrument.InstrumentationImpl.transform Unknown Source at java.lang.ClassLoader.defineClass1 Native Method at java.lang.ClassLoader.defineClass Unknown Source at java.security.SecureClassLoader.defineClass Unknown Source at java.net.URLClassLoader.defineClass Unknown Source at java.net.URLClassLoader.access$100 Unknown Source at java.net.URLClassLoader$1.run Unknown Source at java.net.URLClassLoader$1.run Unknown Source at java.security.AccessController.doPrivileged Native Method at java.net.URLClassLoader.findClass Unknown Source at java.lang.ClassLoader.loadClass Unknown Source at sun.misc.Launcher$AppClassLoader.loadClass Unknown Source at java.lang.ClassLoader.loadClass Unknown Source at com.tibco.xml.parsers.xmlfactories.XMLParsersFactory.a XMLParsersFactory.java:150 at com.tibco.xml.parsers.xmlfactories.XMLParsersFactory.a XMLParsersFactory.java:134</description>
    <commit commitTime="2015-12-07 16:09:21" id="9b220fe"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/AbstractReferenceTypeDelegate.java</file>
    </fixedFiles>
  </bug>
  <bug id="484941" reportTime="2015-12-28 04:55:00">
    <summary>NPE AnnotationDiscoveryVisitor</summary>
    <description>Created attachment 258921 [details] Gradle project which produces the bug Getting a NPE in AnnotationDiscoveryVisitor when compiling a Test class: java.lang.NullPointerException at org.aspectj.org.eclipse.jdt.internal.compiler.apt.dispatch.AnnotationDiscoveryVisitor.resolveAnnotations AnnotationDiscoveryVisitor.java:238 at org.aspectj.org.eclipse.jdt.internal.compiler.apt.dispatch.AnnotationDiscoveryVisitor.visit AnnotationDiscoveryVisitor.java:217 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse TypeDeclaration.java:1348 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse CompilationUnitDeclaration.java:748 at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse CompilationUnitDeclaration.java:709 at org.aspectj.org.eclipse.jdt.internal.compiler.apt.dispatch.RoundEnvImpl.&amp;lt;init&amp;gt; RoundEnvImpl.java:60 at org.aspectj.org.eclipse.jdt.internal.compiler.apt.dispatch.BaseAnnotationProcessorManager.processAnnotations BaseAnnotationProcessorManager.java:148 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.processAnnotations Compiler.java:924 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:434 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1036 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:272 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:185 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:114 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:371 at org.aspectj.tools.ajc.Main.runMain Main.java:248 at org.aspectj.tools.ajc.Main.main Main.java:84</description>
    <commit commitTime="2016-01-05 13:06:22" id="d902947"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/AjPipeliningCompilerAdapter.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc188/Ajc188Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="485055" reportTime="2015-12-31 09:45:00">
    <summary>None</summary>
    <description>Created attachment 258948 [details] error dialog "Interneal Compiler Error:.." public aspect AspectWithStringConstant { /* * Just compile this aspect in eclipse luna in an AspectJ project... * then an error dialog box see ErrorDialog.pdf atached * "Interneal Compiler Error:.." with the following details will arise: * java.lang.ClassCastException at org.aspectj.apache.bcel.generic.FieldGen.setValue FieldGen.java:142 at org.aspectj.apache.bcel.generic.FieldGen.&amp;lt;init&amp;gt; FieldGen.java:115 at org.aspectj.weaver.bcel.BcelField.getField BcelField.java:233 at org.aspectj.weaver.bcel.LazyClassGen.writeBack LazyClassGen.java:522 at org.aspectj.weaver.bcel.LazyClassGen.getJavaClassBytesIncludingReweavable LazyClassGen.java:697 at org.aspectj.weaver.bcel.Bc ... error: ClassCastException thrown: org.aspectj.apache.bcel.classfile.ConstantString cannot be cast to org.aspectj.apache.bcel.classfile.ConstantObject * * In the "RESOLVED" "FIXED" Bug 327141 the exception was related to an * "static final int" field. * For this case and for "long" and "double" final fields the Bug was * fixed by Andrew Clement. * * In our case here, for final fields of type String, the * "java.lang.ClassCastException" still occurs. * * My guess is, that there is a general issue with types which allow only to * create immutable objects like the types int, long, double etc. * and of course String. * * I couldn't find the piece of code which was fixed by Andrew, so I couldn't * check whether it is possible or not, but maybe it is reasonable to * re-engineer that fix in a bit more abstract fashion in order to make it * work for all fields of "immutable-forcing"-types. * * Remark: I run also few other tests with fields of non * "immutable-forcing"-type. * There came no "java.lang.ClassCastException...". * So I assume the Bugis only left in the case the field * type is final String. * */ declare @field : String AspectWithStringConstant.SOME_NAME : @Loggable; public final String SOME_NAME = ""; @interface Loggable { } public static void main String[] args { System.out.println "success" ; } }</description>
    <commit commitTime="2016-01-05 15:44:25" id="4829952"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/FieldGen.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc188/Ajc188Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="485448" reportTime="2016-01-08 13:32:00">
    <summary>Building Roo projects NPE in AnnotationDiscoveryVisitor</summary>
    <description>Just building pet clinic: [ERROR] java.lang.NullPointerException [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.apt.dispatch.AnnotationDiscoveryVisitor.resolveAnnotations AnnotationDiscoveryVisitor.java:239 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.apt.dispatch.AnnotationDiscoveryVisitor.visit AnnotationDiscoveryVisitor.java:217 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse TypeDeclaration.java:1348 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse CompilationUnitDeclaration.java:748 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse CompilationUnitDeclaration.java:709 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.apt.dispatch.RoundEnvImpl.&amp;lt;init&amp;gt; RoundEnvImpl.java:60 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.apt.dispatch.BaseAnnotationProcessorManager.processAnnotations BaseAnnotationProcessorManager.java:148 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.processAnnotations Compiler.java:924 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:434</description>
    <commit commitTime="2016-01-08 11:49:22" id="e3d5df7"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/AjLookupEnvironment.java</file>
    </fixedFiles>
  </bug>
  <bug id="486203" reportTime="2016-01-20 16:34:00">
    <summary>Mylyn Docs committer tools are not correctly formatted</summary>
    <description>Created attachment 259286 [details] Screenshot of Mylyn Docs committer tools with bad formatting I think the screenshot says it all.</description>
    <commit commitTime="2016-01-18 16:08:03" id="448dc83"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/AllTests18.java</file>
    </fixedFiles>
  </bug>
  <bug id="486612" reportTime="2016-01-26 19:18:00">
    <summary>Can lose a super type bound when weaving a type using generics in its declaration</summary>
    <description>Raised on the AspectJ mailing list, I've recreated it. Weaving here: class B&amp;lt;T extends SomeClass &amp;amp; SomeInterface&amp;gt; extends C&amp;lt;T&amp;gt; implements Serializable { weaving into this with a declare parents to add another interface causes SomeClass to disappear. This may not be exactly what the user was doing but it does indicate there is a way in which we write out type signatures and damage them. Maybe he has different cause but it leads to the same problem.</description>
    <commit commitTime="2016-01-27 11:49:38" id="4bee355"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/TypeVariable.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc189/Ajc189Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="485583" reportTime="2016-01-11 16:41:00">
    <summary>NullPointerException in org.aspectj.ajdt.internal.compiler.ast.PointcutDeclaration</summary>
    <description>Created attachment 259112 [details] Tar file with maven project to reproduce error During maven build with aspectj-maven-plugin I got the following NullPointerException: [ERROR] Failed to execute goal org.codehaus.mojo:aspectj-maven-plugin:1.8:compile compile on project patterntesting-check-rt: AJC compiler errors: [ERROR] abort ABORT -- NullPointerException null [ERROR] null [ERROR] java.lang.NullPointerException [ERROR] at org.aspectj.ajdt.internal.compiler.ast.PointcutDeclaration.isAtAspectJ PointcutDeclaration.java:122 [ERROR] at org.aspectj.ajdt.internal.compiler.ast.PointcutDeclaration.postParse PointcutDeclaration.java:94 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ClassScope.postParse ClassScope.java:215 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ClassScope.buildFieldsAndMethods ClassScope.java:191 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.buildFieldsAndMethods CompilationUnitScope.java:84 [ERROR] at org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings AjLookupEnvironment.java:141 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile Compiler.java:852 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile Compiler.java:385 [ERROR] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:428 [ERROR] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1036 [ERROR] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:272 [ERROR] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:185 [ERROR] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:114 [ERROR] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 [ERROR] at org.aspectj.tools.ajc.Main.run Main.java:371 [ERROR] at org.aspectj.tools.ajc.Main.runMain Main.java:248 [ERROR] at org.codehaus.mojo.aspectj.AbstractAjcCompiler.execute AbstractAjcCompiler.java:537 From the listed stacktrace it seems to be a bug of the AspectJ compiler or AJDT. The problem only occurs on Linux tested with Ubuntu 14.04 and Debian with Java 8 or Java 7, and with Maven 3.3 and Maven 3.0. The bug does not appear on MacOS. Steps to reproduce the error: 1. Extract the attached 'testcase.tgz' on a Linux machine 2. go to the directory testcase/patterntesting-check-rt 3. start 'mvn clean compile'</description>
    <commit commitTime="2016-02-10 15:46:53" id="b54540d"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/ast/PointcutDeclaration.java</file>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/EclipseSourceType.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc189/Ajc189Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="487694" reportTime="2016-02-11 16:48:00">
    <summary>Race condition in annotation unpacking can surface through Spring AOP</summary>
    <description>See the Spring bug https://jira.spring.io/browse/SPR-13380 . I don't have a spring test case but I determined that the inflate mechanism in RuntimeAnnos and in RuntimeParamAnnos can get into trouble if two threads are in it at the same time for the same JavaClass. The Java15AnnotationFinder says: JavaClass jc = bcelRepository.loadClass forClass ; org.aspectj.apache.bcel.classfile.annotation.AnnotationGen[] anns = jc.getAnnotations ; bcelRepository.clear ; if anns == null return ResolvedType.NONE; ResolvedType[] ret = new ResolvedType[anns.length]; for int i = 0; i &amp;lt; ret.length; i++ { ret[i] = inWorld.resolve UnresolvedType.forSignature anns[i].getTypeSignature ; } return ret; If two threads go through here asking about the same class they will potentially get the same JavaClass back from the repository if the first thread hasn't called 'clear' before the second thread asks the repository for the class . Annotations are unpacked on demand and if two threads ask for them at the same time they will both be unpacking simultaneously and the unpack code is not thread safe.</description>
    <commit commitTime="2016-02-11 13:59:51" id="a17b28a"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/annotation/RuntimeAnnos.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/annotation/RuntimeParamAnnos.java</file>
      <file>weaver5/java5-src/org/aspectj/weaver/reflect/Java15AnnotationFinder.java</file>
    </fixedFiles>
  </bug>
  <bug id="487927" reportTime="2016-02-17 06:11:00">
    <summary>ClassFormatException if LocalVariableTable data cannot be fully read</summary>
    <description>Created attachment 259786 [details] Stracktrace of the ClassFormatException We stumbled upon the issue that sometimes a fully valid Java class could not be loaded / parsed by the aspectjweaver runtime. After heavy debugging we found out that the issue is a wrong call to "DataInputStream.read buffer " where actually the library expects all data to be read into the buffer; "DataInputStream.readFully buffer " must be used instead. The edge case was that the LocalVariableTable of the class lay exactly over the "buffer border" of the wrapping BufferedInputStream. The read would not read all data, but returned less what was left in the byte buffer and told the underlying BufferedInputStream to load more data from the stream. As this data actually belonged to the not-fully-read LocalVariableTable any further byte-based evaluation of the class would lead to a ClassFormatException The issue is present at least in aspectjweaver 1.8.6, 1.8.8 and the current git version.</description>
    <commit commitTime="2016-02-18 12:23:24" id="3274cbb"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/BootstrapMethods.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/LineNumberTable.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/LocalVariableTable.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/MethodParameters.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/annotation/RuntimeAnnos.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/annotation/RuntimeParamAnnos.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/classfile/annotation/RuntimeTypeAnnos.java</file>
    </fixedFiles>
  </bug>
  <bug id="488216" reportTime="2016-02-22 06:53:00">
    <summary>Load-time weaver looses class changes of preceding -javaagent</summary>
    <description>Created attachment 259860 [details] Maven project that reproduces the bug I have the requirement to run JaCoCo's java-agent [1] before the one from AspectJ. This is due to the fact that JaCoCo refuses to generate reports for classes where there is a difference between the class bytes[] it instrumented and the ones the report-generator reads from disk. But when I run the agents in this order, first JaCoCo, then AspectJ, it seems as if the AspectJ weaver completely removes JaCoCo's code changes. The attached maven project reproduces this: 1. mvn -Pjacoco-agent,jacoco-report clean package 2. Decompiling _ajdump/_before/example/*.class shows that JaCoCo instrumented the classes 3. Decompiling _ajdump/example/*.class shows that those changes are gone after AspectJ touched the classes JaCoCo also supports offline-instrumentation. When using that AspectJ keeps JaCoCo's changes: 1. mvn -Pjacoco-instrument,jacoco-report clean package 2. Decompiling _ajdump/example/*.class shows both the changes made by JaCoCo and AspectJ are now present So this problem seems to be restricted to java-agents running before AspectJ. Using offline-instrumentation is a workaround for now but the actual project where I'm having this problem has a much more involved build-setup and doing instrumentation offline really complicates matters because it requires additional steps to remove it before the jars are published. I used fernflower [2] to decompile and inspect the classes. [1] http://eclemma.org/jacoco/trunk/doc/agent.html , http://eclemma.org/jacoco/ [2] https://github.com/fesh0r/fernflower</description>
    <commit commitTime="2016-03-08 08:52:39" id="9216ef5"/>
    <fixedFiles>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/tools/AbstractTrace.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/tools/DefaultTrace.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/tools/Trace.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelObjectType.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelWorld.java</file>
    </fixedFiles>
  </bug>
  <bug id="490315" reportTime="2016-03-23 12:04:00">
    <summary>InvokeDynamic.java:126 there is no classname for invokedynamic</summary>
    <description>The following exception occurs twice and shows modal error popups twice each time I try to save any file containing advices in my project. This is obviously very annoying. I'm not sure what data is relevant to this, Eclipse is Version: Mars.1 Release 4.5.1 Build id: 20150924-1200 AJDT support was installed from: http://download.eclipse.org/tools/ajdt/45/dev/update/ couldn't find non-dev release for Mars . m2e AJDT adapter project is Maven-based was installed via Preferences -&amp;gt; Maven -&amp;gt; Discovery and is: Maven Integration for AJDT Optional 0.14.0.201506231302 org.maven.ide.eclipse.ajdt.feature.feature.group Sonatype, Inc. Project didn't seem to convert to AspectJ by itself, so I did right-click -&amp;gt; Configure -&amp;gt; Convert to AspectJ project. It seems to work it does show pointcuts &amp;amp; stuff . The following data will be sent: ------ STATUS ------ pluginId org.eclipse.ajdt.ui pluginVersion 2.2.4.201603152120 code 0 severity 4 message trouble in: [redacted] fingerprint b4b6d52c Exception:java.lang.IllegalStateException: there is no classname for invokedynamic at org.aspectj.apache.bcel.generic.InvokeDynamic.getClassName InvokeDynamic.java:126 at org.aspectj.weaver.bcel.BcelAccessForInlineMunger.openAroundAdvice BcelAccessForInlineMunger.java:141 at org.aspectj.weaver.bcel.BcelAccessForInlineMunger.munge BcelAccessForInlineMunger.java:80 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:440 at org.aspectj.weaver.bcel.BcelClassWeaver.weave BcelClassWeaver.java:100 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1697 at org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump BcelWeaver.java:1641 at org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify BcelWeaver.java:1406 at org.aspectj.weaver.bcel.BcelWeaver.weave BcelWeaver.java:1159 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries AjPipeliningCompilerAdapter.java:514 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving AjPipeliningCompilerAdapter.java:447 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:432 at org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184 CompilerAdapter.aj:103 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:902 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.processCompiledUnits Compiler.java:545 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:458 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1036 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:272 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:185 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:320 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild AjBuildManager.java:189 at org.aspectj.ajde.core.internal.AjdeCoreBuildManager.performBuild AjdeCoreBuildManager.java:127 at org.aspectj.ajde.core.AjCompiler.build AjCompiler.java:91 at org.eclipse.ajdt.core.builder.AJBuilder.build AJBuilder.java:257 at org.eclipse.core.internal.events.BuildManager$2.run BuildManager.java:734 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:42 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:205 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:245 at org.eclipse.core.internal.events.BuildManager$1.run BuildManager.java:300 at org.eclipse.core.runtime.SafeRunner.run SafeRunner.java:42 at org.eclipse.core.internal.events.BuildManager.basicBuild BuildManager.java:303 at org.eclipse.core.internal.events.BuildManager.basicBuildLoop BuildManager.java:359 at org.eclipse.core.internal.events.BuildManager.build BuildManager.java:382 at org.eclipse.core.internal.events.AutoBuildJob.doBuild AutoBuildJob.java:144 at org.eclipse.core.internal.events.AutoBuildJob.run AutoBuildJob.java:235 at org.eclipse.core.internal.jobs.Worker.run Worker.java:55 ------ REPORT ------ eclipseBuildId 4.5.1.M20150904-0015 eclipseProduct org.eclipse.epp.package.jee.product javaRuntimeVersion 1.8.0_20-b26 osgiWs win32 osgiOs Windows7 osgiOsVersion 6.1.0 osgiArch x86_64 logMessage false ignoreSimilar false ------- BUNDLES ------- name org.aspectj.ajde version 1.8.9.201603152120 name org.aspectj.weaver version 1.8.9.201603152120 name org.eclipse.ajdt.core version 2.2.4.201603152120 name org.eclipse.core.jobs version 3.7.0.v20150330-2103 name org.eclipse.core.runtime version 3.11.1.v20150903-1804</description>
    <commit commitTime="2016-03-29 10:01:01" id="9eae797"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/core/builder/AsmHierarchyBuilder.java</file>
      <file>tests/src/org/aspectj/systemtest/AllTests18.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAccessForInlineMunger.java</file>
    </fixedFiles>
  </bug>
  <bug id="493554" reportTime="2016-05-12 11:47:00">
    <summary>Missing InnerClasses attribute for nested interfaces created by AspectJ</summary>
    <description>Created attachment 261695 [details] Demo project According to JVMS 4.7.6 [1]: 1 A nested class or nested interface must have an `InnerClasses` attribute with information about its containing class or interface. 2 A class or interface with nested classes and/or nested interfaces must also have an `InnerClasses` attribute with information about its nested classes and/or nested interfaces. AspectJ correctly creates `InnerClasses` attributes for item 1 but not for item 2. This hinders interoperability with other compilers/libraries that rely on such information. For more details please see the description, attachments, and comments on KT-12179 [2]. The demo project attachment from KT-12179 is attached here as well for your convenience. [1] http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.7.6 [2] https://youtrack.jetbrains.com/issue/KT-12179</description>
    <commit commitTime="2016-05-12 15:27:22" id="d8ccdb7"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/HelperInterfaceBinding.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc1810/Ajc1810Tests.java</file>
    </fixedFiles>
  </bug>
  <bug id="500796" reportTime="2016-09-03 07:01:00">
    <summary>Aspectj inproperly instuments classes that contains methods with fake variables</summary>
    <description>Created attachment 263947 [details] sample project Kotlin compiler generates additional fake local variables in local variable table that are not used in method code, after instumentation of such method i get ClassFormatError on runtime "java.lang.ClassFormatError: Invalid index 6 in LocalVariableTable in class file test/TestTarget" . Originally this problem linked to BCEL https://issues.apache.org/jira/browse/BCEL-280 issue, BCEL keeps local variable table as is but decreases 'maxLocal' value that is cause a problem. Aspectj could simply make a workaround for this problem in LazyMethodGen.pack with substitution of gen.setMaxLocals ; to gen.setMaxLocals ; gen.setMaxLocals Math.max gen.getMaxLocals , index of entry in local variable table with max index + it's size ; Sample code: package test import ru.yandex.qatools.allure.annotations.Step class TestTarget { @Step fun test2 { } fun test { val list = arrayListOf 1, 2, 3 list.forEach { println it } } companion object { @JvmStatic fun main args: Array&amp;lt;String&amp;gt; { TestTarget .test } } }</description>
    <commit commitTime="2016-11-07 16:18:54" id="611e04a"/>
    <fixedFiles>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/MethodGen.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/AnnotationBinding.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/GenericITDsDesign.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc160/SanityTests.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc1610/NewFeatures.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc163/Ajc163Tests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelAdvice.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelTypeMunger.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/LazyMethodGen.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/UnwovenClassFile.java</file>
      <file>weaver/testsrc/org/aspectj/weaver/bcel/WorldTestCase.java</file>
    </fixedFiles>
  </bug>
  <bug id="404345" reportTime="2013-03-26 05:59:00">
    <summary>AjState.java:1518</summary>
    <description>I was working on a Spring Roo project using Springsource Tool Suite STS 3.2.0 with AspectJ 2.2.2, when the following exception occured: org.aspectj.weaver.BCException at org.aspectj.ajdt.internal.core.builder.AjState.recordClassFile AjState.java:1518 at org.aspectj.ajdt.internal.core.builder.AjState.noteResult AjState.java:1324 at org.aspectj.ajdt.internal.core.builder.AjBuildManager$3.acceptResult AjBuildManager.java:1058 at org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing AjPipeliningCompilerAdapter.java:426 at org.aspectj.ajdt.intern ... r;C:\Program Files\Java\jdk1.7.0_15\jre\lib\ext\zipfs.jar;C:\eclipse\\plugins/org.eclipse.equinox.launcher_1.3.0.v20120522-1813.jar; It seems to occur in some cases when the class file is changed, but there are missing imports for Annotations e.g. when some code is copied into the class . When saving the file, the Java compiler complains about unknown types, and the AspectJ builder crashes with the exception shown above. When all the imports are added and the class is saved again, it compiles successfully, and AspectJ works again.</description>
    <commit commitTime="2016-11-10 12:13:43" id="f33db67"/>
    <fixedFiles>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/AjdeInteractionTestbed.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjTestCompilerConfiguration.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjTestMessageHandler.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
    </fixedFiles>
  </bug>
  <bug id="502119" reportTime="2016-09-26 02:03:00">
    <summary>InterTypeFieldBinding.java:122 - NullPointerException</summary>
    <description>---- Exception Information --- java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.lookup.InterTypeFieldBinding.canBeSeenBy InterTypeFieldBinding.java:122 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.findSingleStaticImport CompilationUnitScope.java:561 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.findSingleImport CompilationUnitScope.java:540 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.faultInImports CompilationUnitScope.java:418 at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.faultInTypes CompilationUnitScope.java:466 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process Compiler.java:869 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.processCompiledUnits Compiler.java:545 at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile Compiler.java:458 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation AjBuildManager.java:1036 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.performBuild AjBuildManager.java:272 at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild AjBuildManager.java:185 at org.aspectj.ajdt.ajc.AjdtCommand.doCommand AjdtCommand.java:112 at org.aspectj.ajdt.ajc.AjdtCommand.runCommand AjdtCommand.java:60 at org.aspectj.tools.ajc.Main.run Main.java:371 at org.aspectj.tools.ajc.Main.runMain Main.java:248 at org.aspectj.tools.ajc.Main.main Main.java:84 I am trying to compile the following: https://github.com/juherr/testng/commit/bb279d1c9816d54767c94acfa6b0272dda49553e</description>
    <commit commitTime="2016-11-10 14:07:57" id="e8be95b"/>
    <fixedFiles>
      <file>org.aspectj.ajdt.core/src/org/aspectj/ajdt/internal/compiler/lookup/InterTypeFieldBinding.java</file>
    </fixedFiles>
  </bug>
  <bug id="500035" reportTime="2016-08-21 04:10:00">
    <summary>ProceedingJoinPoint changes order of input parameters</summary>
    <description>The following example demonstrates the problem: @Around value = "args regex, replacement &amp;amp;&amp;amp; target targetObject " + "&amp;amp;&amp;amp; call public String String.replaceFirst String, String ", argNames = "proceedingJoinPoint,targetObject,regex,replacement,thisJoinPoint" public String replaceFirstAspect ProceedingJoinPoint proceedingJoinPoint, String targetObject, String regex, String replacement, JoinPoint thisJoinPoint throws Throwable { String returnObject = String proceedingJoinPoint.proceed new Object[]{ targetObject, regex, replacement} ; return returnObject; } Same aspect written using AJ file instead of Java works as expected. Using Java and annotations however executes proceed on a wrong object.</description>
    <commit commitTime="2016-11-18 09:00:28" id="b6f2b63"/>
    <fixedFiles>
      <file>ajde/src/org/aspectj/ajde/Ajde.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/generic/MethodGen.java</file>
      <file>bcel-builder/src/org/aspectj/apache/bcel/util/NonCachingClassLoaderRepository.java</file>
      <file>bcel-builder/testsrc/org/aspectj/apache/bcel/classfile/tests/ParameterAnnotationsTest.java</file>
      <file>bridge/src/org/aspectj/bridge/Version.java</file>
      <file>bridge/src/org/aspectj/bridge/context/PinpointingMessageHandler.java</file>
      <file>build/testsrc/org/aspectj/build/BuildModuleTests.java</file>
      <file>build/testsrc/org/aspectj/internal/build/BuildModuleTest.java</file>
      <file>build/testsrc/org/aspectj/internal/build/ModulesTest.java</file>
      <file>org.aspectj.matcher/src/org/aspectj/weaver/patterns/DeclareParents.java</file>
      <file>runtime/src/org/aspectj/runtime/reflect/JoinPointImpl.java</file>
      <file>testing/src/org/aspectj/internal/tools/ant/taskdefs/Ajctest.java</file>
      <file>testing/src/org/aspectj/internal/tools/ant/taskdefs/MainWrapper.java</file>
      <file>testing/src/org/aspectj/testing/harness/bridge/AbstractRunSpec.java</file>
      <file>testing/src/org/aspectj/testing/harness/bridge/AjcMessageHandler.java</file>
      <file>testing/src/org/aspectj/testing/harness/bridge/DirChanges.java</file>
      <file>testing/src/org/aspectj/testing/harness/bridge/FlatSuiteReader.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc150/GenericsTests.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc151/Ajc151Tests.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc151/NewarrayJoinpointTests.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc152/SynchronizationTransformTests.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc180/AllTestsAspectJ180.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc1810/Ajc1810Tests.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc182/AllTestsAspectJ182.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc185/Ajc185Tests.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc187/Ajc187Tests.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc187/AllTestsAspectJ187.java</file>
      <file>tests/src/org/aspectj/systemtest/ajc188/AllTestsAspectJ188.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/AjdeInteractionTestbed.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/IncrementalOutputLocationManagerTests.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MoreOutputLocationManagerTests.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjTestOutputLocationManager.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/MultiProjectIncrementalTests.java</file>
      <file>tests/src/org/aspectj/systemtest/incremental/tools/OutputLocationManagerTests.java</file>
      <file>weaver/src/org/aspectj/weaver/bcel/BcelShadow.java</file>
    </fixedFiles>
  </bug>
</BugReportRepository>
