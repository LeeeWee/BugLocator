<?xml version="1.0" encoding="UTF-8"?><BugReportRepository product="Tomcat">
  <bug id="39699" reportTime="2006-06-01 16:28:04">
    <summary>simple deploy failed in cluster (distributable flag)</summary>
    <description>Hi, i encounter a strange problem with my tomcat cluster and webapps deployment. server.xml -------------------------------- &lt;Server port="8005" shutdown="SHUTDOWN"&gt; &lt;Listener className="org.apache.catalina.core.AprLifecycleListener" /&gt; &lt;Listener className="org.apache.catalina.mbeans.ServerLifecycleListener" /&gt; &lt;Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" /&gt; &lt;Listener className="org.apache.catalina.storeconfig.StoreConfigLifecycleListener"/&gt; &lt;!-- Global JNDI resources --&gt; &lt;GlobalNamingResources&gt; &lt;Environment name="simpleValue" type="java.lang.Integer" value="30"/&gt; &lt;Resource name="UserDatabase" auth="Container" type="org.apache.catalina.UserDatabase" description="User database that can be updated and saved" factory="org.apache.catalina.users.MemoryUserDatabaseFactory" pathname="conf/tomcat-users.xml" /&gt; &lt;/GlobalNamingResources&gt; &lt;!-- Define the Tomcat Stand-Alone Service --&gt; &lt;Service name="Catalina"&gt; &lt;!-- Define a non-SSL HTTP/1.1 Connector on port 8080 --&gt; &lt;Connector address="polen-integ" port="8080" maxHttpHeaderSize="8192" maxThreads="300" minSpareThreads="25" maxSpareThreads="100" enableLookups="false" acceptCount="100" connectionTimeout="20000" disableUploadTimeout="true" /&gt; &lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt; &lt;Connector port="8009" address="polen-integ.sofinco.fr" minProcessors="20" maxProcessors="0" maxThreads="350" minSpareThreads="50" maxSpareThreads="100" enableLookups="false" redirectPort="8080" protocol="AJP/1.3" disableUploadTimeout="true" /&gt; &lt;Engine name="Catalina" defaultHost="localhost" jvmRoute="uxdev103" &gt; &lt;Realm className="org.apache.catalina.realm.UserDatabaseRealm" resourceName="UserDatabase"/&gt; &lt;Host name="localhost" appBase="webapps" unpackWARs="true" autoDeploy="true" xmlValidation="false" xmlNamespaceAware="false" &gt; &lt;!-- Cluster Definition --&gt; &lt;Cluster className="org.apache.catalina.cluster.tcp.SimpleTcpCluster" doClusterLog="true" clusterLogName="clusterlog" expireSessionsOnShutdown="false" useDirtyFlag="true" notifyListenersOnReplication="true"&gt; &lt;Membership className="org.apache.catalina.cluster.mcast.McastService" mcastAddr="228.0.0.4" mcastBindAddress="127.0.0.1" mcastClusterDomain="polen-integ" mcastPort="45564" mcastFrequency="1000" mcastDropTime="30000"/&gt; &lt;Receiver className="org.apache.catalina.cluster.tcp.ReplicationListener" tcpListenAddress="polen-integ" tcpSelectorTimeout="100" tcpThreadCount="6"/&gt; &lt;Sender className="org.apache.catalina.cluster.tcp.ReplicationTransmitter" replicationMode="fastasyncqueue" doTransmitterProcessingStats="true" doProcessingStats="false" doWaitAckStats="false" waitForAck="false" keepAliveMaxRequestCount="-1"/&gt; &lt;Valve className="org.apache.catalina.cluster.tcp.ReplicationValve" filter=".*\.gif;.*\.js;.*\.css;.*\.png;.*\.jpeg;.*\.jpg;.*\.htm;.*\.html;.*\.txt;" /&gt; &lt;Valve className="org.apache.catalina.cluster.session.JvmRouteBinderValve" enabled="true" /&gt; &lt;ClusterListener className="org.apache.catalina.cluster.session.ClusterSessionListener" /&gt; &lt;ClusterListener className="org.apache.catalina.cluster.session.JvmRouteSessionIDBinderListener" /&gt; &lt;Deployer className="org.apache.catalina.cluster.deploy.FarmWarDeployer" tempDir="/home/tomcat/polen-integ/tmp/war-temp/" deployDir="${catalina.base}/webapps" watchDir="/home/tomcat/polen-integ/tmp/war-listen/" watchEnabled="true"/&gt; &lt;/Cluster&gt; &lt;/Host&gt; &lt;/Engine&gt; &lt;/Service&gt; &lt;/Server&gt; ------------------------ when i am trying to deploy a 'dsitributable' (and only when this flag is enabled) i get the following errors : --------------------------- INFO ContainerBackgroundProcessor[StandardEngine[Catalina]] org.apache.catalina.startup.HostConfig - Deploying web application archive po len.war INFO ContainerBackgroundProcessor[StandardEngine[Catalina]] org.apache.catalina.loader.WebappClassLoader - Illegal access: this web appli cation instance has been stopped already. Could not load java.io.PrintStream. The eventual following stack trace is caused by an error t hrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access, and has no functional impact. java.lang.IllegalStateException at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1238) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1198) at java.lang.ClassLoader.loadClassInternal(Unknown Source) at org.apache.log4j.helpers.LogLog.error(LogLog.java:142) at org.apache.log4j.helpers.PatternParser$DatePatternConverter.convert(PatternParser.java:447) at org.apache.log4j.helpers.PatternConverter.format(PatternConverter.java:64) at org.apache.log4j.PatternLayout.format(PatternLayout.java:503) at org.apache.log4j.WriterAppender.subAppend(WriterAppender.java:301) at org.apache.log4j.RollingFileAppender.subAppend(RollingFileAppender.java:234) at org.apache.log4j.WriterAppender.append(WriterAppender.java:159) at org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:230) at org.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:65) at org.apache.log4j.Category.callAppenders(Category.java:203) at org.apache.log4j.Category.forcedLog(Category.java:388) at org.apache.log4j.Category.log(Category.java:853) at org.apache.commons.logging.impl.Log4JLogger.info(Log4JLogger.java:133) at org.apache.catalina.cluster.session.DeltaManager.start(DeltaManager.java:976) at org.apache.catalina.core.ContainerBase.setManager(ContainerBase.java:431) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4125) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:739) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:524) at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:809) at org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:698) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:472) at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1190) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:292) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1305) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1569) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1578) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1558) at java.lang.Thread.run(Unknown Source) INFO ContainerBackgroundProcessor[StandardEngine[Catalina]] org.apache.catalina.loader.WebappClassLoader - Illegal access: this web applic ation instance has been stopped already. Could not load java.io.PrintStream. The eventual following stack trace is caused by an error th rown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access, and has no functional impact. Java.lang.IllegalStateException at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1238) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1198) at java.lang.ClassLoader.loadClassInternal(Unknown Source) at org.apache.log4j.helpers.LogLog.error(LogLog.java:142) at org.apache.log4j.helpers.PatternParser$DatePatternConverter.convert(PatternParser.java:447) at org.apache.log4j.helpers.PatternConverter.format(PatternConverter.java:64) at org.apache.log4j.PatternLayout.format(PatternLayout.java:503) at org.apache.log4j.WriterAppender.subAppend(WriterAppender.java:301) at org.apache.log4j.RollingFileAppender.subAppend(RollingFileAppender.java:234) at org.apache.log4j.WriterAppender.append(WriterAppender.java:159) at org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:230) at org.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:65) at org.apache.log4j.Category.callAppenders(Category.java:203) at org.apache.log4j.Category.forcedLog(Category.java:388) at org.apache.log4j.Category.log(Category.java:853) at org.apache.commons.logging.impl.Log4JLogger.info(Log4JLogger.java:133) at org.apache.catalina.cluster.session.DeltaManager.start(DeltaManager.java:976) at org.apache.catalina.core.ContainerBase.setManager(ContainerBase.java:431) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4125) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:759) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:739) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:524) at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:809) at org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:698) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:472) at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1190) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:292) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1305) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1569) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1578) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1558) at java.lang.Thread.run(Unknown Source) INFO ContainerBackgroundProcessor[StandardEngine[Catalina]] org.apache.catalina.loader.WebappClassLoader - Illegal access: this web applic ation instance has been stopped already. Could not load org.apache.log4j.spi.VectorWriter. The eventual following stack trace is caused by an error thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access, and has no functi onal impact. java.lang.IllegalStateException at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1238) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1198) at java.lang.ClassLoader.loadClassInternal(Unknown Source) at org.apache.log4j.spi.LoggingEvent.&lt;init&gt;(LoggingEvent.java:154) at org.apache.log4j.Category.forcedLog(Category.java:388) at org.apache.log4j.Category.log(Category.java:853) at org.apache.commons.logging.impl.Log4JLogger.error(Log4JLogger.java:193) at org.apache.catalina.cluster.session.DeltaManager.start(DeltaManager.java:990) at org.apache.catalina.core.ContainerBase.setManager(ContainerBase.java:431) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4125) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:759) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:739) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:524) at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:809) at org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:698) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:472) at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1190) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:292) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1305) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1569) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1578) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1558) at java.lang.Thread.run(Unknown Source) INFO ContainerBackgroundProcessor[StandardEngine[Catalina]] org.apache.catalina.loader.WebappClassLoader - Illegal access: this web applic ation instance has been stopped already. Could not load org.apache.log4j.spi.VectorWriter. The eventual following stack trace is caused by an error thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access, and has no functi onal impact. java.lang.IllegalStateException at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1238) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1198) at java.lang.ClassLoader.loadClassInternal(Unknown Source) at org.apache.log4j.spi.LoggingEvent.&lt;init&gt;(LoggingEvent.java:154) at org.apache.log4j.Category.forcedLog(Category.java:388) at org.apache.log4j.Category.log(Category.java:853) at org.apache.commons.logging.impl.Log4JLogger.error(Log4JLogger.java:193) at org.apache.catalina.cluster.session.DeltaManager.start(DeltaManager.java:990) at org.apache.catalina.core.ContainerBase.setManager(ContainerBase.java:431) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4125) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:759) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:739) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:524) at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:809) at org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:698) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:472) at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1190) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:292) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1305) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1569) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1578) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1558) at java.lang.Thread.run(Unknown Source) ERROR ContainerBackgroundProcessor[StandardEngine[Catalina]] org.apache.commons.modeler.Registry - Null component Catalina:type=JspMonitor ,name=jsp,WebModule=//localhost/polen,J2EEApplication=none,J2EEServer=none ERROR ContainerBackgroundProcessor[StandardEngine[Catalina]] org.apache.catalina.startup.HostConfig - Error deploying web application arc hive polen.war java.lang.NoClassDefFoundError: org/apache/log4j/spi/VectorWriter at org.apache.log4j.spi.LoggingEvent.&lt;init&gt;(LoggingEvent.java:154) at org.apache.log4j.Category.forcedLog(Category.java:388) at org.apache.log4j.Category.log(Category.java:853) at org.apache.commons.logging.impl.Log4JLogger.error(Log4JLogger.java:193) at org.apache.catalina.cluster.session.DeltaManager.start(DeltaManager.java:990) at org.apache.catalina.core.ContainerBase.setManager(ContainerBase.java:431) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4125) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:759) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:739) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:524) at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:809) at org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:698) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:472) at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1190) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:292) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1305) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1569) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1578) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1558) at java.lang.Thread.run(Unknown Source) ERROR ContainerBackgroundProcessor[StandardEngine[Catalina]] org.apache.catalina.startup.HostConfig - Error deploying web application arch ive polen.war java.lang.NoClassDefFoundError: org/apache/log4j/spi/VectorWriter at org.apache.log4j.spi.LoggingEvent.&lt;init&gt;(LoggingEvent.java:154) at org.apache.log4j.Category.forcedLog(Category.java:388) at org.apache.log4j.Category.log(Category.java:853) at org.apache.commons.logging.impl.Log4JLogger.error(Log4JLogger.java:193) at org.apache.catalina.cluster.session.DeltaManager.start(DeltaManager.java:990) at org.apache.catalina.core.ContainerBase.setManager(ContainerBase.java:431) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4125) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:759) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:739) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:524) at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:809) at org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:698) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:472) at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1190) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:292) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1305) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1569) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1578) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1558) at java.lang.Thread.run(Unknown Source) --------------- i have tried to deployed via web manager application or simple copy of my war in webapps directory... No luck, if i put '&lt;distributable/&gt; flag in application web.xml config file, i encounter this error ; i need to restart manually tomcat instance... After this restart the application is correctly deployed without any error... Of course if i disable cluster in server.xml, no problem...</description>
    <commit commitTime="2006-06-08 23:20:00" id="7b870a4"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="39769" reportTime="2006-06-09 20:09:27">
    <summary>Wrong class loader when the myServlet.destroy() called if myServlet is in the T5 shared directory</summary>
    <description>Hi all, My web app needs to have Thread.currentThread().getContextClassLoader() always right. When the application is unload it seem not be the case. My classes are under the T5's shared directory (so all my servlet.getClass().getClassLoader() == the shared classloader i.e.: StandardCalssLoader. My understanding is that when executing the code in my web app Thread.currentThread().getContextClassLoader() should always give the WebappLoader used in the StandardContext. The problem occurs in StandardWrapper.unload() before calling the servlet.destroy() method .... ClassLoader oldCtxClassLoader = Thread.currentThread().getContextClassLoader(); ClassLoader classLoader = instance.getClass().getClassLoader(); PrintStream out = System.out; if (swallowOutput) { SystemLogHandler.startCapture(); } // Call the servlet destroy() method try { instanceSupport.fireInstanceEvent (InstanceEvent.BEFORE_DESTROY_EVENT, instance); Thread.currentThread().setContextClassLoader(classLoader); if( System.getSecurityManager() != null) { SecurityUtil.doAsPrivilege("destroy", instance); SecurityUtil.remove(instance); } else { instance.destroy(); } .... In the code, the INSTANCE variable is my servlet and it have been loaded by the SHARED classloader. So the classloader set in the thread is not the right one. It Should be the classloader related to StandardContext.getLoader() This problem occurs when I try to close my T5 dos windows and I suppose will occurs when I will uninstall any webApp from my T5. I notice the problem in T5 5.5.16 but I verified and it's the same code in 5.5.17. So probably the problem is still there Best Regards /David Gagnon</description>
    <commit commitTime="2006-06-12 05:06:40" id="276e5ac"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardWrapper.java</file>
    </fixedFiles>
  </bug>
  <bug id="40012" reportTime="2006-07-11 13:00:29">
    <summary>Legacy EL Support not resolving variables correctly</summary>
    <description>Given the following page: &lt;% pageContext.setAttribute("t", "foo"); %&gt; ${t} &lt;% out.print( pageContext.getExpressionEvaluator().evaluate( "${t}", String.class, pageContext.getVariableResolver(), null)); %&gt; You will notice that the ${t} prints out fine when in the JSP but does not resolve using the scriplet and prints nothing. For a sanity check, I tested this and it worked in glassfish to ensure I wasn't doing anything odd. I'm trying to find root cause; but haven't found it yet, so I'm logging it in case anyone else has the itch to scratch.</description>
    <commit commitTime="2006-07-12 01:46:40" id="01a9b59"/>
    <fixedFiles>
      <file>java/org/apache/jasper/el/VariableResolverImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="34801" reportTime="2005-05-08 06:47:30">
    <summary>PATCH: CGIServlet does not terminate child after a timeout</summary>
    <description/>
    <commit commitTime="2006-07-22 09:00:00" id="c30afec"/>
    <fixedFiles>
      <file>java/org/apache/catalina/servlets/CGIServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="39689" reportTime="2006-05-31 07:46:22">
    <summary>Tomcat Server Side Includes (SSI) do not work with single quotes</summary>
    <description/>
    <commit commitTime="2006-07-23 04:26:40" id="8ed77be"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ssi/SSIProcessor.java</file>
    </fixedFiles>
  </bug>
  <bug id="39592" reportTime="2006-05-16 17:40:47">
    <summary>SSI does not correctly process HEAD request</summary>
    <description>Hello, I think there is a small bug in Tomcat 5.0 and 5.5 (at least I could see it already with many versions of Tomcat). I use SSI org.apache.catalina.ssi.SSIServlet and &lt;param-name&gt;isVirtualWebappRelative&lt;/param-name&gt; &lt;param-value&gt;1&lt;/param-value&gt; All my pages (*.html) are processed by the SSI &lt;url-pattern&gt;*.html&lt;/url-pattern&gt; If there is a normal GET request, SSI compiles a page and everything is just OK. However, for the HEAD request to the same page (there is no need to compile the page) the SSI still tries to do it and generates a number of exceptions (see enclosed). This error is not critical but overloads my catalina.out file. I do not think that it is difficult to fix it. I already reported this error to tomcat-dev, but decided to create a formal "bug" report at ASF Bugzilla to see if it was already fixed or not. This is not a big error, but it is annoying. Thanks! With the best regards, Igor Tetko ***** Apr 28, 2006 11:26:45 AM org.apache.catalina.core.ApplicationContext log SEVERE: #include--Couldn't include file: styles.html java.io.IOException: Couldn't find file: /incl/styles.html at org.apache.catalina.ssi.SSIServletExternalResolver.getFileText(SSIServletExternalResolver.java: 537) at org.apache.catalina.ssi.SSIMediator.getFileText(SSIMediator.java:155) at org.apache.catalina.ssi.SSIInclude.process(SSIInclude.java:44) at org.apache.catalina.ssi.SSIProcessor.process(SSIProcessor.java:146) at org.apache.catalina.ssi.SSIServlet.processSSI(SSIServlet.java:221) at org.apache.catalina.ssi.SSIServlet.requestHandler(SSIServlet.java:187) at org.apache.catalina.ssi.SSIServlet.doGet(SSIServlet.java:123) at javax.servlet.http.HttpServlet.doHead(HttpServlet.java:270) at javax.servlet.http.HttpServlet.service(HttpServlet.java:706) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:672) at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:574) at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:499) at org.apache.catalina.ssi.SSIServletExternalResolver.getFileText(SSIServletExternalResolver.java: 519) at org.apache.catalina.ssi.SSIMediator.getFileText(SSIMediator.java:155) at org.apache.catalina.ssi.SSIInclude.process(SSIInclude.java:44) at org.apache.catalina.ssi.SSIProcessor.process(SSIProcessor.java:146) at org.apache.catalina.ssi.SSIServlet.processSSI(SSIServlet.java:221) at org.apache.catalina.ssi.SSIServlet.requestHandler(SSIServlet.java:187) at org.apache.catalina.ssi.SSIServlet.doGet(SSIServlet.java:123) at javax.servlet.http.HttpServlet.doHead(HttpServlet.java:270) at javax.servlet.http.HttpServlet.service(HttpServlet.java:706) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105) at org.apache.catalina.valves.FastCommonAccessLogValve.invoke (FastCommonAccessLogValve.java:495) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869) at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection (Http11BaseProtocol.java:664) at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527) at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt (LeaderFollowerWorkerThread.java:80) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684) at java.lang.Thread.run(Thread.java:613)</description>
    <commit commitTime="2006-07-27 08:26:40" id="0f9844c"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ssi/SSIServletExternalResolver.java</file>
    </fixedFiles>
  </bug>
  <bug id="38676" reportTime="2006-02-16 11:48:57">
    <summary>permanently reloading tagfile classes without changes to the tagfile</summary>
    <description>Scenario: - jsp with a tag in it (tagfile, no taglib) - activate "reloading" in web.xml - clean work directory - start tomcat - load jsp Tomcat generates/compiles/load the jsp and the tagfile classes. After "checkInterval" seconds the background compile thread "JspRuntimeContext[\*]" loads the tagfile classes (and only them) again and again. This produces a lot of work for the garbage collector. (permanently class unloading of tagfile classes) A Breakpoint in the method loadTagFile() in JspServletWrapper.java will show this. Perhaps the reload flag must be set to false after loading the TagFile? JspServletWrapper.java: ... if(reload) { tagHandlerClass = ctxt.load(); reload = false; //perhaps, this solves the problem but i am not shure } ... After restarting the server the problem is not present because no JspServletWrapper is instantiated for the tagfile an therefore the backround compile task does not check the tagfile.</description>
    <commit commitTime="2006-08-18 22:06:40" id="edc20fa"/>
    <fixedFiles>
      <file>java/org/apache/el/lang/ELSupport.java</file>
      <file>java/org/apache/jasper/servlet/JspServletWrapper.java</file>
    </fixedFiles>
  </bug>
  <bug id="38713" reportTime="2006-02-20 08:08:04">
    <summary>java.io.IOException: tmpFile.renameTo(classFile) failed when compiling new JSP (upon redeploy)</summary>
    <description>[http-8080-Processor24 ERROR 26902165 DispatcherServlet.serviceWrapper()] - Could not complete request org.apache.jasper.JasperException: Unable to compile class for JSP at org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:565) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:293) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:291) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:241) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:672) at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:463) at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:398) at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:301) at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:97) at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:250) at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:928) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:705) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:625) at org.springframework.web.servlet.FrameworkServlet.serviceWrapper(FrameworkServlet.java:386) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:346) at javax.servlet.http.HttpServlet.service(HttpServlet.java:689) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:856) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:744) at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527) at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684) at java.lang.Thread.run(Thread.java:595) [http-8080-Processor24 ERROR 26902165 [wirelessapp].invoke()] - Servlet.service() for servlet wirelessapp threw exception java.io.IOException: tmpFile.renameTo(classFile) failed at org.apache.jasper.compiler.SmapUtil$SDEInstaller.install(SmapUtil.java:245) at org.apache.jasper.compiler.SmapUtil.installSmap(SmapUtil.java:164) at org.apache.jasper.compiler.AntCompiler.generateClass(AntCompiler.java:267) at org.apache.jasper.compiler.Compiler.compile(Compiler.java:288) at org.apache.jasper.compiler.Compiler.compile(Compiler.java:267) at org.apache.jasper.compiler.Compiler.compile(Compiler.java:255) at org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:556) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:293) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:291) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:241) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:672) at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:463) at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:398) at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:301) at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:97) at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:250) at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:928) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:705) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:625) at org.springframework.web.servlet.FrameworkServlet.serviceWrapper(FrameworkServlet.java:386) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:346) at javax.servlet.http.HttpServlet.service(HttpServlet.java:689) at javax.servlet.http.HttpServlet.service(HttpServlet.java:802) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:856) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:744) at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527) at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684) at java.lang.Thread.run(Thread.java:595)</description>
    <commit commitTime="2006-09-02 17:40:00" id="c7f0f60"/>
    <fixedFiles>
      <file>java/org/apache/jasper/JspCompilationContext.java</file>
      <file>java/org/apache/jasper/compiler/Compiler.java</file>
      <file>java/org/apache/jasper/servlet/JspServletWrapper.java</file>
    </fixedFiles>
  </bug>
  <bug id="31804" reportTime="2004-10-20 16:26:40">
    <summary>setParent() is not called on nested tags in a tag file (.tagx)</summary>
    <description/>
    <commit commitTime="2006-09-10 06:13:20" id="2d6d717"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Generator.java</file>
    </fixedFiles>
  </bug>
  <bug id="33356" reportTime="2005-02-02 14:55:18">
    <summary>Incorrect parsing of tag attributes</summary>
    <description>I get a org.apache.jasper.JasperException: with the error: "The function string must be used with a prefix when a default namespace is not specified" when trying to compile the following within a JSP page: &lt;foo:set var="bar" value="this $ is a { silly string ("/&gt; "foo" is our own tablib, it seems that Jasper seems to think that the string provided to the value attribute contains some JSP/EL which it does not. If I change the page to be: &lt;c:set var="bar" value="this $ is a { silly string ("/&gt; Then I do not get this error. However I need to use my own taglib. In the foo.tld file, the "value" attribute of "set" has rtexprvalue=true. If I set this to false then the problem goes away. However I noticed that c.tld in standard.jar also has rtexprvalue=true for the "value" attribute of "set". Why the difference in behaviour ? We also wish to have rtexprvalue=true.</description>
    <commit commitTime="2006-09-10 11:46:40" id="b55e9c2"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/ELParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="34509" reportTime="2005-04-19 00:45:34">
    <summary>tag names that are xml:Name but not java identifier are not accepted</summary>
    <description>According to the JSP 2.0 specification, custom tag prefix and name should be of the type XML:Name. However, for Tomcat 5.5.8, if the name is not a legal java identifier, then a compilation error occurs. For instance, Tomcat won't accept Da~te`T#ag as a legal name for the Tag.</description>
    <commit commitTime="2006-09-16 09:26:40" id="823101d"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Generator.java</file>
    </fixedFiles>
  </bug>
  <bug id="40518" reportTime="2006-09-15 09:13:40">
    <summary>The message key "requestListenerValve.requestInit" has not be referred to correctly.</summary>
    <description>The bug is: An illegal message is output to the log when the listener application that implements ServletRequestListener interface throws RuntimeException from the requestInitialized method or the requestDestroyed method. message: "Cannot find message associated with key requestListenerValve.requestInit" cause: The key exists in the properties file "org.apache.catalina.valves.LocalStrings.properties", but the logic refers other properties file "org.apache.catalina.core.LocalStrings.properties"</description>
    <commit commitTime="2006-09-21 11:40:00" id="fda223a"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardContextValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="34399" reportTime="2005-04-11 16:32:42">
    <summary>Undeploying fails when context defined in server.xml &amp; server fails to stop</summary>
    <description>Steps to reproduce: 1. autodeploy a web application by defining its context in server.xml 2. start the Tomcat server 3. use the Tomcat Manager to undeploy the application You will get the "OK - Undeployed application at context path /WebApplication" message, but the application will NOT be undeployed, it will be only stopped. If you try to stop the server after that, it will fail! I have used the shared installation (CATALINA_BASE dir), but I guess this won't work for standalone Tomcat isntallation either.</description>
    <commit commitTime="2006-09-21 11:40:00" id="9dd8a23"/>
    <fixedFiles>
      <file>java/org/apache/catalina/manager/HTMLManagerServlet.java</file>
      <file>java/org/apache/catalina/manager/ManagerServlet.java</file>
      <file>java/org/apache/catalina/startup/HostConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="40625" reportTime="2006-09-28 05:16:58">
    <summary>CGIServlet eats root cause</summary>
    <description>The code below doesn't make sense: &lt;snip&gt; catch (IOException e){ log ("Caught exception " + e); throw new IOException (e.toString()); } &lt;/snip&gt; It should be "throw e;". IMHO, It seems no need to log this exception here, so the cache block can be removed.</description>
    <commit commitTime="2006-09-30 06:46:40" id="bbb8fe1"/>
    <fixedFiles>
      <file>java/org/apache/catalina/servlets/CGIServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="39724" reportTime="2006-06-05 14:01:56">
    <summary>Bug on StandardPipeline.removeValve(Valve valve) for T5.5.16+</summary>
    <description>I run into this problem with T5 when tring to add/remove/add a valve to the standard engine. -For what I understand an empty pipeline has: basic = StandardEngineValve (For example); first = null; -If you add a valve you will get basic = StandardEngineValve first = myValve (with myValve.next = StandardEngineValve) -If you remove the valve you will get basic =StandardEngineValve first = StandardEngineValve Note that StandardEngineValve is in first too here. -If I try to add a new valve given the actual code in addValve the valve will not be added because (see the **) current = basic and current.getNext() = null; addValve(Valve valve) { // Add this Valve to the set associated with this Pipeline if (first == null) { first = valve; valve.setNext(basic); } else { Valve current = first; while (current != null) { ** if (current.getNext() == basic) { current.setNext(valve); valve.setNext(basic); break; } current = current.getNext(); } } }</description>
    <commit commitTime="2006-10-03 09:46:40" id="b18c29e"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardPipeline.java</file>
    </fixedFiles>
  </bug>
  <bug id="40723" reportTime="2006-10-11 02:50:26">
    <summary>Wrong and misleading documentation in JDBCAccessLogValve</summary>
    <description>In the class JDBCAccessLogValve is an example for an table to hold access log values. In this table is a column ts which is defined as not null. This will only work on MySQL, because this value is never written by the Valve and other databases will complain about a column which is not filled with a value.</description>
    <commit commitTime="2006-10-18 10:53:20" id="9cb5aff"/>
    <fixedFiles>
      <file>java/org/apache/catalina/valves/JDBCAccessLogValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="40771" reportTime="2006-10-16 16:08:36">
    <summary>Can't read POST data from within a filter or valve</summary>
    <description>I was attempting to create a Filter or Valve that could be placed in front of an Axis web service that would handle security according to the WS-Security specification. That turned out to be a rabbit trail, but I did find and fix a bug that I discovered along the way. I ran into problems reading POST data (the web service request) from the org.apache.catalina.connector.Request object exposed in the Filter/Valve interfaces. This is a chunk of code in a prototype Valve that didn't work: private ByteChunk getPOSTBody(Request request) throws IOException { ByteChunk retval = new ByteChunk(request.getContentLength()); ByteChunk body = new ByteChunk(request.getContentLength()); int bytesRead; do { bytesRead = request.getCoyoteRequest().doRead(body); retval.append(body); } while (bytesRead &gt;= 0) ; //puts the data back into the pipe. request.getCoyoteRequest().action (ActionCode.ACTION_REQ_SET_BODY_REPLAY, retval); return retval; } This code works as designed, however the problem occurs later on when Axis attempted to parse the web service request. I don't remember the exact Axis error, but I was able to track the problem down to a bug in the org.apache.coyote.http11.filters.SavedRequestInputFilter class. The doRead method was not properly implemented to return a -1 when appropriate. Here is my modified version of the doRead method: public int doRead(ByteChunk chunk, org.apache.coyote.Request request) throws IOException { int writeLength = 0; if (chunk.getLimit() &gt; 0 &amp;&amp; chunk.getLimit() &lt; input.getLength()) { writeLength = chunk.getLimit(); } else { writeLength = input.getLength(); } if(input.getOffset()&gt;= input.getEnd()) return -1; input.substract(chunk.getBuffer(), 0, writeLength); chunk.setOffset(0); chunk.setEnd(writeLength); return writeLength; } This bug won't show up unless someone tries to use a filter/valve to do something with web services. That's not too likely because that's what we have SOAPHandlers for.</description>
    <commit commitTime="2006-10-18 10:53:20" id="17eecdb"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/filters/SavedRequestInputFilter.java</file>
    </fixedFiles>
  </bug>
  <bug id="34956" reportTime="2005-05-18 14:47:47">
    <summary>Tomcat should enforce the requirements from servlet 2.4 specification SRV.8.2</summary>
    <description>Tomcat should enforce the requirements from servlet 2.4 specification SRV.8.2 SRV.8.2 Using a Request Dispatcher "To use a request dispatcher, a servlet calls either the include method or forward method of the RequestDispatcher interface. The parameters to these methods can be either the request and response arguments that were passed in via the service method of the Servlet interface, or instances of subclasses of the request and response wrapper classes that have been introduced for version 2.3 of the specification. In the latter case, the wrapper instances must wrap the request or response objects that the container passed into the service method. The Container Provider must ensure that the dispatch of the request to a target servlet occurs in the same thread of the same VM as the original request" Justification: ============== The absense of this enforcement leads to software beeing developed not following the specification. The software cannot be deployed later on a container which conforms to the above paragraph and hence must be changed before deployment. This somehow contradicts the idea of having a standards based infrastructure.</description>
    <commit commitTime="2006-11-05 06:40:00" id="22d1ad7"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ApplicationDispatcher.java</file>
      <file>java/org/apache/catalina/core/ApplicationFilterChain.java</file>
    </fixedFiles>
  </bug>
  <bug id="37458" reportTime="2005-11-10 21:34:17">
    <summary>Datarace on org.apache.catalina.loader.WebappClassLoader</summary>
    <description>In findClassInternal, it is possible that entry.manifest is set to null by another thread right before calling definePackage(packageName, entry.manifest, entry.codeBase).</description>
    <commit commitTime="2006-11-05 06:40:00" id="79631bb"/>
    <fixedFiles>
      <file>java/org/apache/catalina/loader/WebappClassLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="40817" reportTime="2006-10-25 20:02:52">
    <summary>servlet-cgi throws index out of bounds exception on certain cgi</summary>
    <description>First, servlets-cgi.jar needs to exist and the servlet must be mapped: for example: &lt;servlet-mapping&gt; &lt;servlet-name&gt;cgi&lt;/servlet-name&gt; &lt;url-pattern&gt;*.pl&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; Test perl cgi script: #!/usr/bin/perl print "Content-type: text/plain", "\n\n"; print "Hello world, from Perl\n"; One perl script is placed in www-root ("/test.pl") and the other in any subfolder ("/test/test.pl" or "/cgi-bin/test.pl", etc.) The cgi script in the subfolder will run fine. The cgi script in the www-root will generate an exception: java.lang.StringIndexOutOfBoundsException: String index out of range: -1 java.lang.String.substring(String.java:1768) java.lang.String.substring(String.java:1735) org.apache.catalina.servlets.CGIServlet$CGIEnvironment.findCGI(CGIServlet.java:948) org.apache.catalina.servlets.CGIServlet$CGIEnvironment.setCGIEnvironment(CGIServlet.java:1015) org.apache.catalina.servlets.CGIServlet$CGIEnvironment.&lt;init&gt;(CGIServlet.java:766) org.apache.catalina.servlets.CGIServlet.doGet(CGIServlet.java:584) javax.servlet.http.HttpServlet.service(HttpServlet.java:689) javax.servlet.http.HttpServlet.service(HttpServlet.java:802) The problem is this line (line 948 in CGIServlet.java): cginame = currentLocation.getParent().substring(webAppRootDir.length())+ File.separator + name; The problem is that webAppRootDir is 1 char longer than currentLocation.getParent() because webAppRootDir ends with a File.separator (in this case, a "/"). And removing the extra File.separator from webAppRootDir will result in a different String related exception elsewhere. And here's a fix that works: cginame = (currentLocation.getParent() + File.separator).substring(webAppRootDir.length()) + name; (If necessary, the fix can be made more adaptive by checking to see if it really does have a File.separator at the end and if not...add it...otherwise, let it be, etc.) (on a side note, I have one more bug to fix; the ENV_VAR "SCRIPT_FILENAME" isn't defined as it should be [required for PHP4/5] but I'll submit a different bug/fix for that.)</description>
    <commit commitTime="2006-11-05 06:40:00" id="6d274b4"/>
    <fixedFiles>
      <file>java/org/apache/catalina/servlets/CGIServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="40913" reportTime="2006-11-06 16:24:05">
    <summary>JasperException raised against valid attribute</summary>
    <description>In org.apache.jasper.compiler.Validator.checkXmlAttributes(), the validation for deferred values and methods is raising an exception when an rtexprvalue attribute is legitimate. ------Stacktrace------ org.apache.jasper.JasperException: org.apache.jasper.JasperException: /index.jsp(83,0) According to TLD or attribute directive in tag file, attribute items does not accept any expressions org.apache.jasper.servlet.JspServletWrapper.handleJspException (JspServletWrapper.java:565) org.apache.jasper.servlet.JspServletWrapper.service (JspServletWrapper.java:354) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:320) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:266) javax.servlet.http.HttpServlet.service(HttpServlet.java:803) ------relevant code in checkXmlAttributes()------ if (!deferred &amp;&amp; (tldAttrs[j].isDeferredMethod() || tldAttrs [j].isDeferredValue())) { // Only deferred expressions are allowed for this attribute err.jspError(n, "jsp.error.attribute.custom.non_rt_with_expr", tldAttrs[j].getName()); } ------testcase------ &lt;c:forEach var="k" items="${colors}"&gt; &lt;li&gt;&lt;font color="${k}"&gt;This line is ${k}&lt;/font&gt;. &lt;/c:forEach&gt; The TLD for JSTL 1.2 says items can be an rtexprvalue and also a deferred- value. So the above usage is correct. Attaching a testcase WAR. ------summary------ I don't think this code is really necessary; at least, it needs to be relaxed to allow tai.canBeRequestTime() values.</description>
    <commit commitTime="2006-11-07 19:46:40" id="f7ca96d"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Validator.java</file>
    </fixedFiles>
  </bug>
  <bug id="37509" reportTime="2005-11-15 18:22:38">
    <summary>ClassLoaderLogManager remove '\n' at the end of logging.properties values</summary>
    <description>The method ClassLoaderLogManager.replace(String) that is in charge of replacing system properties at the begining of the property also modify the end of the property due to a call to trim. This implies that Logger/Handler/Formatter that relies on properties endding with some spases (including '\n') will have a different behaviour with JDK LogManger and tomcat ClassLoaderLogManager a modified verstion of this method could be: protected String replace(String str) { // start modification // String result = str.trim(); // commented out int len = str.length(); int st = 0; while ((st &lt; len) &amp;&amp; (str.charAt(st) &lt;= ' ')) { st++; } String result = (st &gt; 0) ? str.substring(st) : str; // end modification if (result.startsWith("${")) { int pos = result.indexOf('}'); if (pos != -1) { String propName = result.substring(2, pos); String replacement = System.getProperty(propName); if (replacement != null) { result = replacement + result.substring(pos + 1); } } } return result; }</description>
    <commit commitTime="2006-11-20 07:46:40" id="a6d6962"/>
    <fixedFiles>
      <file>java/org/apache/juli/ClassLoaderLogManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="40844" reportTime="2006-10-30 06:25:52">
    <summary>JDBCRealm.getPassword throws NullPointerException</summary>
    <description>JDBCRealm.getPassword throws NullPointerException I'm using tomcat 5.5.20 with postgresql-8.1-407.jdbc3.jar and postgresql-8.1.4 on Ubuntu Dapper. Authenticating two users simultaneously with HTTP DIGEST causes sometimes the following errors and a 401 Unauthorized reply: 30.10.2006 14:24:54 org.apache.catalina.realm.JDBCRealm getPassword SEVERE: Exception performing authentication org.postgresql.util.PSQLException: ERROR: invalid message format at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:1525) at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1309) at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:188) at org.postgresql.jdbc2.AbstractJdbc2Statement.execute(AbstractJdbc2Statement.java:452) at org.postgresql.jdbc2.AbstractJdbc2Statement.executeWithFlags(AbstractJdbc2Statement.java:354) at org.postgresql.jdbc2.AbstractJdbc2Statement.executeQuery(AbstractJdbc2Statement.java:258) at org.apache.catalina.realm.JDBCRealm.getPassword(JDBCRealm.java:546) at org.apache.catalina.realm.RealmBase.getDigest(RealmBase.java:1156) at org.apache.catalina.realm.RealmBase.authenticate(RealmBase.java:365) at org.apache.catalina.authenticator.DigestAuthenticator.findPrincipal(DigestAuthenticator.java:282) at org.apache.catalina.authenticator.DigestAuthenticator.authenticate(DigestAuthenticator.java:175) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869) at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:664) at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527) at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684) at java.lang.Thread.run(Thread.java:595) 30.10.2006 14:24:54 org.apache.catalina.connector.CoyoteAdapter service SEVERE: An exception or error occurred in the container during the request processing java.lang.NullPointerException at org.apache.catalina.realm.JDBCRealm.getPassword(JDBCRealm.java:568) at org.apache.catalina.realm.JDBCRealm.getPrincipal(JDBCRealm.java:594) at org.apache.catalina.realm.RealmBase.authenticate(RealmBase.java:398) at org.apache.catalina.authenticator.DigestAuthenticator.findPrincipal(DigestAuthenticator.java:282) at org.apache.catalina.authenticator.DigestAuthenticator.authenticate(DigestAuthenticator.java:175) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869) at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:664) at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527) at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684) at java.lang.Thread.run(Thread.java:595)</description>
    <commit commitTime="2006-11-20 07:46:40" id="be9d523"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/JDBCRealm.java</file>
    </fixedFiles>
  </bug>
  <bug id="40860" reportTime="2006-11-01 04:29:15">
    <summary>Tomcat loses request parameters</summary>
    <description/>
    <commit commitTime="2006-11-20 07:46:40" id="e713e77"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/Request.java</file>
      <file>java/org/apache/tomcat/util/http/Parameters.java</file>
    </fixedFiles>
  </bug>
  <bug id="40901" reportTime="2006-11-05 20:38:27">
    <summary>listings page does not escape XML characters</summary>
    <description>On Solaris you can have a file or directory name called "&lt;b&gt;xxx" or "&lt;i&gt;yyy". Using Tomcat's listings feature, you get a directory listing with the file name in bold or italics. I am not familiar with Javascript or cross-site scripting security problems, but I believe Tomcat escapes XML characters like "&gt;" and "&lt;" to prevent client browsers to interpret HTML codes that are not intended to be interpreted as such for the default error page. I think the same should be done for listings, or a warning should be added to the documentation not to use it if you have no control over the file/directory names you list.</description>
    <commit commitTime="2006-11-20 07:46:40" id="cb2c655"/>
    <fixedFiles>
      <file>java/org/apache/catalina/servlets/DefaultServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="41008" reportTime="2006-11-21 09:20:32">
    <summary>POST request ignores command line parameters</summary>
    <description>example: &lt;form method="POST" action="test.exe?test1"&gt;&lt;input type="hidden" value="test2"&gt;&lt;input type="submit"&gt;&lt;/form&gt; this code does invoke the test.exe without passing the test1 command line parameter the example works in apache httpd and ms iis fix: CGIServlet.java if (!"GET".equals(req.getMethod()) &amp;&amp; !"POST".equals(req.getMethod()) &amp;&amp; !"HEAD".equals(req.getMethod())) return;</description>
    <commit commitTime="2006-11-25 07:13:20" id="b70962f"/>
    <fixedFiles>
      <file>java/org/apache/catalina/servlets/CGIServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="41057" reportTime="2006-11-28 10:07:27">
    <summary>Tomcat leaks memory on every request</summary>
    <description/>
    <commit commitTime="2006-11-29 08:26:40" id="de5c3b7"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/buf/StringCache.java</file>
    </fixedFiles>
  </bug>
  <bug id="41089" reportTime="2006-11-30 10:12:31">
    <summary>JspFactoryImpl has SPEC_VERSION = "2.0"</summary>
    <description>org.apache.jasper.runtime.JspFactoryImpl has private static final String SPEC_VERSION = "2.0"; Should be: private static final String SPEC_VERSION = "2.1";</description>
    <commit commitTime="2006-12-01 21:33:20" id="514256e"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/ImplicitTagLibraryInfo.java</file>
      <file>java/org/apache/jasper/compiler/PageDataImpl.java</file>
      <file>java/org/apache/jasper/compiler/Validator.java</file>
    </fixedFiles>
  </bug>
  <bug id="40585" reportTime="2006-09-22 18:06:20">
    <summary>org.apache.juli.FileHandler does not allow programmatic creation using parametrized constructor</summary>
    <description>If org.apache.juli.FileHandler is created programmatically with parametrized constructor public FileHandler(String directory, String prefix, String suffix) , FileHandler ignores custom constructor parameters, creates log handler with default configuration and writes log file to "${catalina_home}/bin/logs" with the name "juli.YYYY-MM-DD.log" (YYYY, MM and DD are substituted with actual year, month and date) It looks like the problem is in the fact parametrized constructor calls default constructor. Default constructor in turn performs handler configuration from LogManager properties and creates a log file based on this default configuration. This makes custom constructor parameters effectively ignored.</description>
    <commit commitTime="2006-12-08 09:06:40" id="c6b3f71"/>
    <fixedFiles>
      <file>java/org/apache/juli/FileHandler.java</file>
    </fixedFiles>
  </bug>
  <bug id="41074" reportTime="2006-11-29 05:35:54">
    <summary>Output of tag "jsp:plugin" is not conform to XHTML.</summary>
    <description>The jsp comiler outputs all tag required for an object in upper case letters. To be conform with XHTML lower case is required, but all tags are hard coded in the generator.</description>
    <commit commitTime="2006-12-08 11:53:20" id="5f9c18d"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Generator.java</file>
    </fixedFiles>
  </bug>
  <bug id="41217" reportTime="2006-12-20 05:13:27">
    <summary>SingleSignOn Cookie does not honor https access: Login Information Disclosure</summary>
    <description>When using the SingleSignOn Valve (org.apache.catalina.authenticator.SingleSignOn) via https the Cookie JSESSIONIDSSO is transmitted without the "secure" attribute, resulting in it being transmitted to any content that is - by purpose or error - requested via http from the same server. As the content of the SSO-Cookie is confidential (it will lead to automatically logged in sessions in other contexts - https or non-https) this should never happen. Sorry to have no patch. I've not installed the complete source distribution in my development environment, but it seems the points to change are org.apache.catalina.authenticator.AuthenticatorBase.register(...), the code of interest being (from 5.5.30 source distribution) Cookie cookie = new Cookie(Constants.SINGLE_SIGN_ON_COOKIE, ssoId); cookie.setMaxAge(-1); cookie.setPath("/"); hres.addCookie(cookie); As hres is an org.apache.catalina.HttpRequest, and I've looked through the code to find org.apache.catalina.Request.setSecure() but no ...isSecure() (though this is mentioned in the Javadoc for ...setSecure()) I suppose there needs to be another change to provide isSecure on Request or HttpRequest, but this is difficult to tell only from the editor. If isSecure() was there, there'd be a cookie.setSecure(hres.isSecure()) missing in the statements above...</description>
    <commit commitTime="2007-01-28 04:33:20" id="11b9c92"/>
    <fixedFiles>
      <file>java/org/apache/catalina/authenticator/AuthenticatorBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="41327" reportTime="2007-01-09 00:32:55">
    <summary>Jasper does'nt display the full path of the file in a 404 Not found error page</summary>
    <description/>
    <commit commitTime="2007-01-28 04:33:20" id="3a6225a"/>
    <fixedFiles>
      <file>java/org/apache/jasper/servlet/JspServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="40524" reportTime="2006-09-16 01:49:08">
    <summary>request.getAuthType() returns different string from HttpServletRequest.CLIENT_CERT_AUTH</summary>
    <description>using inspect: request.getAuthType() (java.lang.String) CLIENT-CERT HttpServletRequest.CLIENT_CERT_AUTH (java.lang.String) CLIENT_CERT api says they should be the same object (== should work)</description>
    <commit commitTime="2007-01-28 04:33:20" id="dc33554"/>
    <fixedFiles>
      <file>java/org/apache/catalina/authenticator/Constants.java</file>
      <file>java/org/apache/catalina/authenticator/SSLAuthenticator.java</file>
      <file>java/org/apache/catalina/authenticator/SingleSignOn.java</file>
      <file>java/org/apache/catalina/authenticator/SingleSignOnEntry.java</file>
    </fixedFiles>
  </bug>
  <bug id="41265" reportTime="2006-12-30 02:34:23">
    <summary>JspServlet's checkInterval parameter cannot be set to 0 implicitly</summary>
    <description>conf\web.xml's JspServlet init parameters include 'checkInterval', whose value is explained as follows: If development is false and checkInterval is greater than zero, background compilations are enabled. If I add the following parameters one would think the background compilations would be disabled (the value is not greater than zero). &lt;init-param&gt; &lt;param-name&gt;checkInterval&lt;/param-name&gt; &lt;param-value&gt;0&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;development&lt;/param-name&gt; &lt;param-value&gt;false&lt;/param-value&gt; &lt;/init-param&gt; However, the value is changed to 300 and the following warning is outputted: Dec 30, 2006 7:13:57 PM org.apache.jasper.EmbeddedServletOptions &lt;init&gt; WARNING: Warning: Invalid value for the initParam checkInterval. Will use the default value of "300" seconds According to the comment in web.xml "0" was a valid value. Either the comment or the validity check is wrong. Or my understanding of them.</description>
    <commit commitTime="2007-01-28 07:20:00" id="39fe247"/>
    <fixedFiles>
      <file>java/org/apache/jasper/EmbeddedServletOptions.java</file>
    </fixedFiles>
  </bug>
  <bug id="39572" reportTime="2006-05-12 22:28:57">
    <summary>fixes to use CompressionFilter in WebSphere app server</summary>
    <description>There are a couple of small bugs in the compression filter classes that are triggered by using the filter in WebSphere 5.1 or 6. Here are patches. - CompressionResponseStream should not compress the output stream if the response has been committed (because then it cannot write the Content-Encoding: gzip header, and the browser displays the compressed output as-is) - CompressionServletResponseWrapper causes a NullPointerException if you flush before writing anything</description>
    <commit commitTime="2007-01-28 07:20:00" id="f06d41f"/>
    <fixedFiles>
      <file>webapps/examples/WEB-INF/classes/compressionFilters/CompressionFilterTestServlet.java</file>
      <file>webapps/examples/WEB-INF/classes/compressionFilters/CompressionResponseStream.java</file>
      <file>webapps/examples/WEB-INF/classes/compressionFilters/CompressionServletResponseWrapper.java</file>
    </fixedFiles>
  </bug>
  <bug id="41466" reportTime="2007-01-25 09:12:11">
    <summary>NIO Connector: IllegalArgumentException: You can only write using the application write buffer provided by the handler</summary>
    <description>Trying to use NIO connector instead of APR connector using Tomcat6 HEAD, I get an IllegalArgumentException while in a call to sendAck. Looking at InternalNioOutputBuffer.sendAck(), it uses ByteBuffer.wrap() to create a new ByteBuffer and uses this ByteBuffer in a call to writeToSocket. There is a check in SecureNioChannel.write() that the ByteBuffer is the one stored in the Commenting the line 372 in SecureNioChannel.java fixes the problem. //if ( src != bufHandler.getWriteBuffer() ) throw new IllegalArgumentException("You can only write using the application write buffer provided by the handler."); But I guess that the check is here for a valid reason, and a better fix would very likely consist in fixing the sendAck or in adding an "or" condition to the test for the case of sendAck(). GRAVE: Cannot find message associated with key standardWrapper.acknowledgeException java.lang.IllegalArgumentException: You can only write using the application write buffer provided by the handler. at org.apache.tomcat.util.net.SecureNioChannel.write(SecureNioChannel.java:372) at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:111) at org.apache.coyote.http11.InternalNioOutputBuffer.writeToSocket(InternalNioOutputBuffer.java:434) at org.apache.coyote.http11.InternalNioOutputBuffer.sendAck(InternalNioOutputBuffer.java:418) at org.apache.coyote.http11.Http11NioProcessor.action(Http11NioProcessor.java:1028) at org.apache.coyote.Response.action(Response.java:183) at org.apache.coyote.Response.acknowledge(Response.java:310) at org.apache.catalina.connector.Response.sendAcknowledgement(Response.java:1154) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:169) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:212) at org.apache.coyote.http11.Http11NioProcessor.process(Http11NioProcessor.java:888) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:624) at org.apache.tomcat.util.net.NioEndpoint$Worker.run(NioEndpoint.java:1467) at java.lang.Thread.run(Thread.java:595)</description>
    <commit commitTime="2007-01-29 05:33:20" id="fce171f"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/net/NioSelectorPool.java</file>
    </fixedFiles>
  </bug>
  <bug id="41558" reportTime="2007-02-07 06:03:18">
    <summary>Unnecessary synchronization caused by JspFactory.getDefaultFactory while servicing JSPs</summary>
    <description>Tomcat version: 6.0.x trunk Every generated JSP has try { _jspxFactory = JspFactory.getDefaultFactory(); response.setContentType("text/html"); in its _jspService method. The use of JspFactory.getDefaultFactory during request processing should be avoided as it is a *static synchronized* method. I have a diff that addresses this and will attach it to this bug.</description>
    <commit commitTime="2007-02-08 07:13:20" id="1a8c492"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Generator.java</file>
      <file>java/org/apache/jasper/compiler/JspRuntimeContext.java</file>
      <file>java/org/apache/jasper/runtime/HttpJspBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="41578" reportTime="2007-02-09 00:00:43">
    <summary>Avoid SimplePool.get/put synchronization in JspFactoryImpl</summary>
    <description>Only 1 instance of the JspFactory object (JspFactoryImpl) is created. Consequently there is a single SimplePool of PageContext objects for all JSP requests and so every JSP request must synchronize on the lock inside SimplePool when getting and releasing a PageContext instance. Moreover, the pool has a fixed capacity and after that, the code in JspFactoryImpl will first acquire the lock to see if there are any free objects in the pool, failing which a new PageContext object is created. Instead of a single process-wide pool, a per thread pool of PageContext objects can be used by JspFactoryImpl.</description>
    <commit commitTime="2007-02-10 09:13:20" id="4612c8a"/>
    <fixedFiles>
      <file>java/org/apache/jasper/runtime/JspFactoryImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="41608" reportTime="2007-02-13 21:45:29">
    <summary>The log level is different at same messages.</summary>
    <description>I suggest a little message improvement. The log level is different at same messages. The message "Servlet.service() for servlet {0} threw exception" is output in eight places, but the message level is not same. --org.apache.catalina.core.ApplicationDispatcher#invoke ... wrapper.getLogger().error(sm.getString("applicationDispatcher.serviceException", wrapper.getName()), e); ... wrapper.getLogger().error(sm.getString("applicationDispatcher.serviceException", wrapper.getName()), e); ... wrapper.getLogger().error(sm.getString("applicationDispatcher.serviceException", wrapper.getName()), rootCause); ... wrapper.getLogger().error(sm.getString("applicationDispatcher.serviceException", wrapper.getName()), e); --org.apache.catalina.core.StandardWrapperValve#invoke container.getLogger().warn(sm.getString("standardWrapper.serviceException", wrapper.getName()), e); ... container.getLogger().warn(sm.getString("standardWrapper.serviceException", wrapper.getName()), e); ... container.getLogger().error(sm.getString("standardWrapper.serviceException", wrapper.getName()), rootCause); ... container.getLogger().error(sm.getString("standardWrapper.serviceException", wrapper.getName()), e); Are there any reasons for using getLogger().warn()? I think it would be better that all of them use getLogger().error(...).</description>
    <commit commitTime="2007-02-16 12:26:40" id="8ba8334"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardWrapperValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="41739" reportTime="2007-03-01 06:09:41">
    <summary>The servlet with the value 0 in &lt;load-on-startup&gt; tag must be loaded at first.</summary>
    <description>Servlet 2.4 specification says: --- If the value is a positive integer or 0, the container must load and initialize the servlet as the application is deployed. The container must guarantee that servlets marked with lower integers are loaded before servlets marked with higher integers. --- I think the servlet with value 0 in &lt;load-on-startup&gt; tag must be loaded at the first. However, Tomcat loads the servlet at the last.</description>
    <commit commitTime="2007-03-02 09:46:40" id="01d38a5"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="41666" reportTime="2007-02-21 01:44:28">
    <summary>If-Unmodified-Since failure</summary>
    <description>The If-Unmodified-Since header doesn't work enoughly. failed case: The If-Unmodified-Since header value: 1000000(milliseconds) The lastModified value of target resource: 1001000(milliseconds) In this case, the response's status code should be SC_PRECONDITION_FAILED, but the result is not so. caused by: In DefaultServlet#checkIfUnmodifiedSince: if ( lastModified &gt; (headerValue + 1000)) { I think it should be: if ( lastModified &gt;= (headerValue + 1000)) {</description>
    <commit commitTime="2007-03-04 00:40:00" id="9ac3428"/>
    <fixedFiles>
      <file>java/org/apache/catalina/servlets/DefaultServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="41752" reportTime="2007-03-02 16:28:19">
    <summary>Wrong message on exception in MemoryRealm</summary>
    <description>When Digester read tomcat-user.xml file and exception is throw, then is created new LifecycleException. As first parameter of this Exception is message string. This string is hardcoded to "memoryRealm.readXml", so I thing that log message will be wrong too! I think that there must be used StringManager. actual implementation: Digester digester = getDigester(); try { synchronized (digester) { digester.push(this); digester.parse(file); } } catch (Exception e) { throw new LifecycleException("memoryRealm.readXml", e); } finally { digester.reset(); } fixed: Digester digester = getDigester(); try { synchronized (digester) { digester.push(this); digester.parse(file); } } catch (Exception e) { throw new LifecycleException(sm.getString("memoryRealm.readXml"), e); } finally { digester.reset(); }</description>
    <commit commitTime="2007-03-04 00:40:00" id="e33b67a"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/MemoryRealm.java</file>
    </fixedFiles>
  </bug>
  <bug id="41790" reportTime="2007-03-07 19:02:57">
    <summary>JDTCompiler::getContents does not close the reader</summary>
    <description>In the class org.apache.jasper.compiler.JDTCompiler: ------------------------------------------------------------------------- public char[] getContents() { char[] result = null; try { InputStreamReader isReader = new InputStreamReader(new FileInputStream(sourceFile), ctxt.getOptions().getJavaEncoding()); Reader reader = new BufferedReader(isReader); if (reader != null) { char[] chars = new char[8192]; StringBuffer buf = new StringBuffer(); int count; while ((count = reader.read(chars, 0, chars.length)) &gt; 0) { buf.append(chars, 0, count); } result = new char[buf.length()]; buf.getChars(0, result.length, result, 0); } } catch (IOException e) { log.error("Compilation error", e); } return result; } ------------------------------------------------------------------------- the variable "reader" is not closed after use it. if I update jsp files frequently, it will exhaust the system file handler. "too many files" errors will come. I test it on Redhat linux, the same problem will occured in tomcat 5 and tomcat 6.</description>
    <commit commitTime="2007-03-09 00:06:40" id="455b6f8"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/JDTCompiler.java</file>
    </fixedFiles>
  </bug>
  <bug id="41675" reportTime="2007-02-22 00:36:16">
    <summary>Add a debug statement when some necessary header information is missing</summary>
    <description>Reference: org.apache.coyote.http11.Http11Processor.java It would be helpful for developers to get informed when some required header information is missing. eg when headers.getValue("host"); returns null and http11 is true. Couldn't you add a log.debug statement that informs the user about missing header-fields? (For example in Http11Processor.java:1391)</description>
    <commit commitTime="2007-03-26 06:00:00" id="7fd4fa8"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/Http11Processor.java</file>
    </fixedFiles>
  </bug>
  <bug id="40150" reportTime="2006-08-01 08:52:32">
    <summary>Incorrect User/Role classnames are silently ignored.</summary>
    <description>org.apache.catalina.realm.JAASRealm does not verify any of the class names that are set through setRoleClassNames() and setUserClassNames(). If an incorrect class name (e.g. a typo) is configured in context.xml, this is unnoticed by JAASRealm. The result is that during authentication, when the subject's principals are checked against the configured class names, the principals are not recognised, and therefore not added to the subject. The fact an incorrect configured class name is currently not detected and logged makes it very hard to find the source of the problem. It can be easily fixed by checking the class names in the two methods mentioned above. The class must exist, and it must implement java.security.Principal, which is currently not enforced/checked by the code.</description>
    <commit commitTime="2007-03-26 06:00:00" id="400d684"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/JAASRealm.java</file>
    </fixedFiles>
  </bug>
  <bug id="41166" reportTime="2006-12-13 00:18:02">
    <summary>Unable to start ReplicatedContext</summary>
    <description>I try to test the Cluster function. I got a problem: something like following apears in the $CATALINA_HOME/logs/catalina.out SEVERE: Unable to start ReplicatedContext java.lang.ClassCastException: org.apache.naming.resources.ProxyDirContext cannot be cast to java.io.Serializable at org.apache.catalina.tribes.tipis.AbstractReplicatedMap$MapEntry.setValue (AbstractReplicatedMap.java:1060) I didn't change any file in $CATALINA_HOME except server.xml, the any thing I changed in server.xml is uncomment the line: &lt;Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"/&gt;. and I add a context configuration file test.xml to $CATALINA_HOME/conf/Catalina/localhost with the flolling content [Aray@BONC-01 conf]$ cat Catalina/localhost/test.xml &lt;Context className="org.apache.catalina.ha.context.ReplicatedContext" path="/test" docBase="/var/www/ClusterTest" debug="0" privileged="true" reloadable="true" &gt; the web.xml file in /var/www/ClusterTest has no &lt;distributable/&gt; element I am worrying about I can't explain the problem clearly with my poor English. So I paste the stepes I do as following: [Aray@BONC-01 apache-tomcat-6.0.2]$ which java /usr/java/jdk1.6.0/bin/java [Aray@BONC-01 apache-tomcat-6.0.2]$ java -version java version "1.6.0-rc" Java(TM) SE Runtime Environment (build 1.6.0-rc-b104) Java HotSpot(TM) Client VM (build 1.6.0-rc-b104, mixed mode, sharing) [Aray@BONC-01 apache-tomcat-6.0.2]$ echo $JAVA_HOME /usr/java/jdk1.6.0 [Aray@BONC-01 apache-tomcat-6.0.2]$ echo $CLASSPATH [Aray@BONC-01 apache-tomcat-6.0.2]$ uname -a Linux BONC-01 2.6.9-34.EL #1 Wed Mar 8 00:07:35 CST 2006 i686 i686 i386 GNU/Linux [root@BONC-01 local]# cat /etc/redhat-release CentOS release 4.3 (Final) [Aray@BONC-01 apache-tomcat-6.0.2]$ cd conf [Aray@BONC-01 conf]$ cat server.xml &lt;!-- Note: A "Server" is not itself a "Container", so you may not define subcomponents such as "Valves" at this level. Documentation at /docs/config/server.html --&gt; &lt;Server port="8005" shutdown="SHUTDOWN"&gt; &lt;!--APR library loader. Documentation at /docs/apr.html --&gt; &lt;Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" /&gt; &lt;!--Initialize Jasper prior to webapps are loaded. Documentation at /docs/jasper-howto.html --&gt; &lt;Listener className="org.apache.catalina.core.JasperListener" /&gt; &lt;!-- JMX Support for the Tomcat server. Documentation at /docs/non- existent.html --&gt; &lt;Listener className="org.apache.catalina.mbeans.ServerLifecycleListener" /&gt; &lt;Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" /&gt; &lt;!-- Global JNDI resources Documentation at /docs/jndi-resources-howto.html --&gt; &lt;GlobalNamingResources&gt; &lt;!-- Editable user database that can also be used by UserDatabaseRealm to authenticate users --&gt; &lt;Resource name="UserDatabase" auth="Container" type="org.apache.catalina.UserDatabase" description="User database that can be updated and saved" factory="org.apache.catalina.users.MemoryUserDatabaseFactory" pathname="conf/tomcat-users.xml" /&gt; &lt;/GlobalNamingResources&gt; &lt;!-- A "Service" is a collection of one or more "Connectors" that share a single "Container" Note: A "Service" is not itself a "Container", so you may not define subcomponents such as "Valves" at this level. Documentation at /docs/config/service.html --&gt; &lt;Service name="Catalina"&gt; &lt;!-- A "Connector" represents an endpoint by which requests are received and responses are returned. Documentation at : Java HTTP Connector: /docs/config/http.html (blocking &amp; non-blocking) Java AJP Connector: /docs/config/ajp.html APR (HTTP/AJP) Connector: /docs/apr.html Define a non-SSL HTTP/1.1 Connector on port 8080 --&gt; &lt;Connector port="8080" protocol="HTTP/1.1" maxThreads="150" connectionTimeout="20000" redirectPort="8443" /&gt; &lt;!-- Define a SSL HTTP/1.1 Connector on port 8443 This connector uses the JSSE configuration, when using APR, the connector should be using the OpenSSL style configuration described in the APR documentation --&gt; &lt;!-- &lt;Connector port="8443" protocol="HTTP/1.1" maxThreads="150" scheme="https" secure="true" clientAuth="false" sslProtocol="TLS" /&gt; --&gt; &lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt; &lt;Connector port="8009" protocol="AJP/1.3" redirectPort="8443" /&gt; &lt;!-- An Engine represents the entry point (within Catalina) that processes every request. The Engine implementation for Tomcat stand alone analyzes the HTTP headers included with the request, and passes them on to the appropriate Host (virtual host). Documentation at /docs/config/engine.html --&gt; &lt;!-- You should set jvmRoute to support load-balancing via AJP ie : &lt;Engine name="Standalone" defaultHost="localhost" jvmRoute="jvm1"&gt; --&gt; &lt;Engine name="Catalina" defaultHost="localhost"&gt; &lt;!--For clustering, please take a look at documentation at: /docs/cluster-howto.html (simple how to) /docs/config/cluster.html (reference documentation) --&gt; &lt;Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"/&gt; &lt;!-- The request dumper valve dumps useful debugging information about the request and response data received and sent by Tomcat. Documentation at: /docs/config/valve.html --&gt; &lt;!-- &lt;Valve className="org.apache.catalina.valves.RequestDumperValve"/&gt; --&gt; &lt;!-- This Realm uses the UserDatabase configured in the global JNDI resources under the key "UserDatabase". Any edits that are performed against this UserDatabase are immediately available for use by the Realm. --&gt; &lt;Realm className="org.apache.catalina.realm.UserDatabaseRealm" resourceName="UserDatabase"/&gt; &lt;!-- Define the default virtual host Note: XML Schema validation will not work with Xerces 2.2. --&gt; &lt;Host name="localhost" appBase="webapps" unpackWARs="true" autoDeploy="true" xmlValidation="false" xmlNamespaceAware="false"&gt; &lt;!-- SingleSignOn valve, share authentication between web applications Documentation at: /docs/config/valve.html --&gt; &lt;!-- &lt;Valve className="org.apache.catalina.authenticator.SingleSignOn" /&gt; --&gt; &lt;!-- Access log processes all example. Documentation at: /docs/config/valve.html --&gt; &lt;!-- &lt;Valve className="org.apache.catalina.valves.FastCommonAccessLogValve" directory="logs" prefix="localhost_access_log." suffix=".txt" pattern="common" resolveHosts="false"/&gt; --&gt; &lt;/Host&gt; &lt;/Engine&gt; &lt;/Service&gt; &lt;/Server&gt; [Aray@BONC-01 conf]$ mkdir Catalina [Aray@BONC-01 conf]$ ln -s /usr/local/tomcatConf/localhost/ Catalina/localhost [Aray@BONC-01 conf]$ cat Catalina/localhost/test.xml &lt;Context className="org.apache.catalina.ha.context.ReplicatedContext" path="/test" docBase="/var/www/ClusterTest" debug="0" privileged="true" reloadable="true" &gt; &lt;/Context&gt; [Aray@BONC-01 conf]$ cd .. [Aray@BONC-01 apache-tomcat-6.0.2]$ ls bin conf lib LICENSE logs NOTICE RELEASE-NOTES RUNNING.txt temp webapps work [Aray@BONC-01 apache-tomcat-6.0.2]$ rm logs/* [Aray@BONC-01 apache-tomcat-6.0.2]$ bin/catalina.sh version Using CATALINA_BASE: /home/Aray/download/apache-tomcat-6.0.2 Using CATALINA_HOME: /home/Aray/download/apache-tomcat-6.0.2 Using CATALINA_TMPDIR: /home/Aray/download/apache-tomcat-6.0.2/temp Using JRE_HOME: /usr/java/jdk1.6.0 Server version: Apache Tomcat/6.0.2 Server built: Nov 16 2006 12:31:06 Server number: 6.0.2.0 OS Name: Linux OS Version: 2.6.9-34.EL Architecture: i386 JVM Version: 1.6.0-rc-b104 JVM Vendor: Sun Microsystems Inc. [Aray@BONC-01 apache-tomcat-6.0.2]$ bin/startup.sh Using CATALINA_BASE: /home/Aray/download/apache-tomcat-6.0.2 Using CATALINA_HOME: /home/Aray/download/apache-tomcat-6.0.2 Using CATALINA_TMPDIR: /home/Aray/download/apache-tomcat-6.0.2/temp Using JRE_HOME: /usr/java/jdk1.6.0 [Aray@BONC-01 apache-tomcat-6.0.2]$ cat logs/catalina.out INFO: Initializing Coyote HTTP/1.1 on http-8080 Dec 13, 2006 4:07:39 PM org.apache.catalina.startup.Catalina load INFO: Initialization processed in 2532 ms Dec 13, 2006 4:07:40 PM org.apache.catalina.core.StandardService start INFO: Starting service Catalina Dec 13, 2006 4:07:40 PM org.apache.catalina.core.StandardEngine start INFO: Starting Servlet Engine: Apache Tomcat/6.0.2 Dec 13, 2006 4:07:40 PM org.apache.catalina.ha.tcp.SimpleTcpCluster start INFO: Cluster is about to start Dec 13, 2006 4:07:40 PM org.apache.catalina.tribes.transport.ReceiverBase bind INFO: Receiver Server Socket bound to:/127.0.0.1:4000 Dec 13, 2006 4:07:40 PM org.apache.catalina.tribes.membership.McastServiceImpl setupSocket INFO: Setting cluster mcast soTimeout to 500 Dec 13, 2006 4:07:40 PM org.apache.catalina.tribes.membership.McastServiceImpl waitForMembers INFO: Sleeping for 1000 milliseconds to establish cluster membership, start level:4 Dec 13, 2006 4:07:41 PM org.apache.catalina.tribes.membership.McastServiceImpl waitForMembers INFO: Done sleeping, membership established, start level:4 Dec 13, 2006 4:07:41 PM org.apache.catalina.tribes.membership.McastServiceImpl waitForMembers INFO: Sleeping for 1000 milliseconds to establish cluster membership, start level:8 Dec 13, 2006 4:07:42 PM org.apache.catalina.tribes.membership.McastServiceImpl waitForMembers INFO: Done sleeping, membership established, start level:8 Dec 13, 2006 4:07:42 PM org.apache.catalina.core.StandardHost start INFO: XML validation disabled Dec 13, 2006 4:07:42 PM org.apache.catalina.tribes.tipis.AbstractReplicatedMap init INFO: Initializing AbstractReplicatedMap with context name:/test Dec 13, 2006 4:07:43 PM org.apache.catalina.ha.context.ReplicatedContext start SEVERE: Unable to start ReplicatedContext java.lang.ClassCastException: org.apache.naming.resources.ProxyDirContext cannot be cast to java.io.Serializable at org.apache.catalina.tribes.tipis.AbstractReplicatedMap$MapEntry.setValue (AbstractReplicatedMap.java:1060) at org.apache.catalina.tribes.tipis.AbstractReplicatedMap$MapEntry.&lt;init&gt; (AbstractReplicatedMap.java:1005) at org.apache.catalina.tribes.tipis.AbstractReplicatedMap.put (AbstractReplicatedMap.java:859) at org.apache.catalina.core.ApplicationContext.setAttribute (ApplicationContext.java:756) at org.apache.catalina.core.ApplicationContextFacade.setAttribute (ApplicationContextFacade.java:334) at org.apache.catalina.core.StandardContext.start (StandardContext.java:4296) at org.apache.catalina.ha.context.ReplicatedContext.start (ReplicatedContext.java:55) at org.apache.catalina.core.ContainerBase.addChildInternal (ContainerBase.java:760) at org.apache.catalina.core.ContainerBase.addChild (ContainerBase.java:740) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:525) at org.apache.catalina.startup.HostConfig.deployDescriptor (HostConfig.java:626) at org.apache.catalina.startup.HostConfig.deployDescriptors (HostConfig.java:553) at org.apache.catalina.startup.HostConfig.deployApps (HostConfig.java:488) at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1138) at org.apache.catalina.startup.HostConfig.lifecycleEvent (HostConfig.java:311) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent (LifecycleSupport.java:120) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1022) at org.apache.catalina.core.StandardHost.start(StandardHost.java:719) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1014) at org.apache.catalina.core.StandardEngine.start (StandardEngine.java:443) at org.apache.catalina.core.StandardService.start (StandardService.java:451) at org.apache.catalina.core.StandardServer.start (StandardServer.java:710) at org.apache.catalina.startup.Catalina.start(Catalina.java:552) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:413) Dec 13, 2006 4:07:43 PM org.apache.catalina.core.ContainerBase addChildInternal SEVERE: ContainerBase.addChild: start: LifecycleException: Failed to start ReplicatedContext: java.lang.ClassCastException: org.apache.naming.resources.ProxyDirContext cannot be cast to java.io.Serializable at org.apache.catalina.ha.context.ReplicatedContext.start (ReplicatedContext.java:58)</description>
    <commit commitTime="2007-03-27 12:33:20" id="4f96d21"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ApplicationContext.java</file>
      <file>java/org/apache/catalina/ha/context/ReplicatedContext.java</file>
      <file>java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java</file>
    </fixedFiles>
  </bug>
  <bug id="41682" reportTime="2007-02-22 13:05:50">
    <summary>ClassCastException with BackupManager + debug logging</summary>
    <description>(Still happening in 6.0.9, though that isn't an option in Bugzilla) If I use the BackupManager for session replication AND turn on debug logging, I get this exception when I try to invalidate the session: java.lang.ClassCastException: org.apache.catalina.ha.session.BackupManager cannot be cast to org.apache.catalina.ha.session.DeltaManager at org.apache.catalina.ha.session.DeltaSession.expire(DeltaSession.java:361) at org.apache.catalina.ha.session.DeltaSession.expire(DeltaSession.java:352) at org.apache.catalina.session.StandardSession.expire(StandardSession.java:660) at org.apache.catalina.session.StandardSession.invalidate(StandardSession.java:1112) at org.apache.catalina.session.StandardSessionFacade.invalidate(StandardSessionFacade.java:150) The bug is easy to find in the source. If debug logging is enabled, it tries to cast manager to DeltaManager without an instanceof, even though it is doing an instanceof immediately after: public void expire(boolean notify, boolean notifyCluster) { String expiredId = getIdInternal(); super.expire(notify); if (notifyCluster) { if (log.isDebugEnabled()) log.debug(sm.getString("deltaSession.notifying", ((DeltaManager)manager).getName(), new Boolean(isPrimarySession()), expiredId)); if ( manager instanceof DeltaManager ) { ( (DeltaManager) manager).sessionExpired(expiredId); } } }</description>
    <commit commitTime="2007-03-27 15:20:00" id="12d912d"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/session/DeltaSession.java</file>
    </fixedFiles>
  </bug>
  <bug id="41703" reportTime="2007-02-26 02:18:39">
    <summary>Variable assigned with it's own value.</summary>
    <description/>
    <commit commitTime="2007-03-27 15:20:00" id="2049b78"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/authenticator/SingleSignOnMessage.java</file>
    </fixedFiles>
  </bug>
  <bug id="41289" reportTime="2007-01-04 07:42:41">
    <summary>Error when deploying XML Configuration file URL</summary>
    <description>I tried to deploy a webapp using a context.xml file under manager webapp and received this error: java.io.FileNotFoundException: /opt/apache-tomcat-6.0.2/conf/Catalina/localhost/mywebapp3.xml (No such file or directory) at java.io.FileOutputStream.open(Native Method) at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:179) at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:131) at org.apache.catalina.manager.ManagerServlet.copyInternal(ManagerServlet.java:1570) at org.apache.catalina.manager.ManagerServlet.copy(ManagerServlet.java:1530) at org.apache.catalina.manager.ManagerServlet.deploy(ManagerServlet.java:803) at org.apache.catalina.manager.HTMLManagerServlet.deployInternal(HTMLManagerServlet.java:249) at org.apache.catalina.manager.HTMLManagerServlet.doGet(HTMLManagerServlet.java:96) at javax.servlet.http.HttpServlet.service(HttpServlet.java:690) at javax.servlet.http.HttpServlet.service(HttpServlet.java:803) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:228) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:525) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:212) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:818) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:624) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:445) at java.lang.Thread.run(Thread.java:613) I did checked and noticed apache-tomcat-6.0.2/conf/Catalina directory no longer exists in version 6. Did something changed?</description>
    <commit commitTime="2007-04-05 21:33:20" id="d721522"/>
    <fixedFiles>
      <file>java/org/apache/catalina/manager/ManagerServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="42072" reportTime="2007-04-08 18:07:02">
    <summary>The call of the jspDestroy method violates it about the Java Servlet Specification 2.4, SRV.2.3.2.1.</summary>
    <description>When a JSP is accessed for a second time, the jspDestroy method is called even if a ServletException is thrown from the init method of the class that extends HttpJspPage. This violates the Java Servlet Specification 2.4, SRV.2.3.2.1.</description>
    <commit commitTime="2007-04-10 07:06:40" id="3d27771"/>
    <fixedFiles>
      <file>java/org/apache/jasper/servlet/JspServletWrapper.java</file>
    </fixedFiles>
  </bug>
  <bug id="42085" reportTime="2007-04-10 23:13:02">
    <summary>java.util.Logging duplicated since 5.5.23. 5.5.20 is OK</summary>
    <description>We use the followwing logging.properties in our WebApplication: ----------%&lt;--------------------%&lt;---------------- handlers = 1tivoli.java.util.logging.FileHandler, 2product.java.util.logging.FileHandler # Handlers for the root logger .handlers = 1tivoli.java.util.logging.FileHandler, 2product.java.util.logging.FileHandler 1tivoli.java.util.logging.FileHandler.level = INFO 1tivoli.java.util.logging.FileHandler.pattern = /var/log/product/tivoli%g.log # limit Output to 1MB 1tivoli.java.util.logging.FileHandler.limit=1048576 # Limit rotation to 10 Logs ... 1tivoli.java.util.logging.FileHandler.count=10 1tivoli.java.util.logging.FileHandler.append=true 1tivoli.java.util.logging.FileHandler.formatter=de.customer.product.tivoli.TivoliFormatter 2product.java.util.logging.FileHandler.level = FINEST 2product.java.util.logging.FileHandler.pattern = /var/log/product/product%g.log # limit Output to 1MB 2product.java.util.logging.FileHandler.limit=1048576 # Limit rotation to 5 Logs ... 2product.java.util.logging.FileHandler.count=5 2product.java.util.logging.FileHandler.append=true 2product.java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter ----------%&lt;--------------------%&lt;---------------- When using apache-tomcat-5.5.23 every Line in the Logfiles is duplicated. Debugging I found that the TivoliFormatter is actually created twice. And the root-logger has actually 4 Handlers and not two as intended. This does not allow us an upgrade beyond 5.5.20. Found on Linux64Bit and Windows-XP, both with JDK 1.5_R11</description>
    <commit commitTime="2007-04-12 23:00:00" id="fa2b746"/>
    <fixedFiles>
      <file>java/org/apache/juli/ClassLoaderLogManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="42039" reportTime="2007-04-03 16:54:58">
    <summary>Tomcat doesn't output the stack trace of UnavailableException.</summary>
    <description>When UnavailableException is thrown from the Servlet:init, Tomcat doesn't output the stack trace of UnavailableException. The cause of problem is lost. Tomcat should output the stack trace at the "invoke" method of StandardWrapperValue.</description>
    <commit commitTime="2007-04-16 02:00:00" id="c3d2ce4"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardWrapperValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="42071" reportTime="2007-04-08 17:49:37">
    <summary>If a JSP throws an UnavailableException twice, an IllegalStateException occurs.</summary>
    <description>If a JSP throws an UnavailableException twice, an IllegalStateException occurs. first access: JSP throws UnavailableException. second access: If the JSP throws an UnavailableException again then an IllegalStateException occurs and Tomcat returns status code:500 to the client. The problem is not that the IllegalStateException occurs. The problem is that the JSP can be called even though it cannot be used.</description>
    <commit commitTime="2007-04-19 10:33:20" id="508f513"/>
    <fixedFiles>
      <file>java/org/apache/jasper/servlet/JspServletWrapper.java</file>
    </fixedFiles>
  </bug>
  <bug id="42308" reportTime="2007-05-01 01:57:57">
    <summary>with APR bytessent bytesreceived performance data is not collected</summary>
    <description>with APR bytes received and bytes sent are always 0.</description>
    <commit commitTime="2007-05-01 19:46:40" id="4a04722"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/Http11AprProcessor.java</file>
      <file>java/org/apache/coyote/http11/Http11AprProtocol.java</file>
      <file>java/org/apache/coyote/http11/Http11NioProcessor.java</file>
      <file>java/org/apache/coyote/http11/InternalNioInputBuffer.java</file>
    </fixedFiles>
  </bug>
  <bug id="42361" reportTime="2007-05-08 16:06:35">
    <summary>POST content type incorrect for multipart forms after login</summary>
    <description>When using a form with a custom encoding (e.g. "multipart/form-data"), the content type is not restored after a redirect to a login page (auth-method = FORM). To reproduce: - A page that POSTs using multipart/form-data encoding (or anything other than application/x-www-form-urlencoded) to a result page that is protected by a login page (auth-method=FORM) is invoked. - Even though the multipart POST data exists (verified by reading input stream of request from result page) the content type of the request is always "application/x-www-form-urlencoded". - This only happens when redirected to the login page first. It does not happen if already logged in.</description>
    <commit commitTime="2007-05-09 08:20:00" id="637acc5"/>
    <fixedFiles>
      <file>java/org/apache/catalina/authenticator/FormAuthenticator.java</file>
      <file>java/org/apache/catalina/authenticator/SavedRequest.java</file>
    </fixedFiles>
  </bug>
  <bug id="42444" reportTime="2007-05-17 08:15:53">
    <summary>Potential NullPointerException in org.apache.catalina.valves.AccessLogValve</summary>
    <description/>
    <commit commitTime="2007-05-20 02:40:00" id="776736f"/>
    <fixedFiles>
      <file>java/org/apache/catalina/valves/AccessLogValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="42459" reportTime="2007-05-19 13:32:58">
    <summary>Tomcat Web Application Manager table error</summary>
    <description>html table -&gt; tr wrong formating when stop (not last) in Tomcat Web Application Manager.</description>
    <commit commitTime="2007-05-21 00:53:20" id="33c9949"/>
    <fixedFiles>
      <file>java/org/apache/catalina/manager/HTMLManagerServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="39875" reportTime="2006-06-23 11:15:08">
    <summary>RealmBase#init() needs cleanup</summary>
    <description/>
    <commit commitTime="2007-05-23 11:13:20" id="0ea4c7c"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/RealmBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="42438" reportTime="2007-05-16 17:43:51">
    <summary>Duplicate JSP temp variable declaration when jsp:attribute used in conjunction with custom tags</summary>
    <description/>
    <commit commitTime="2007-05-23 11:13:20" id="5e188bc"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Node.java</file>
    </fixedFiles>
  </bug>
  <bug id="42559" reportTime="2007-05-31 09:09:05">
    <summary>ErrorReportValve does not provide an error report</summary>
    <description>rev 535915 changed the behavior of ErrorReportValve in tomcat6 to not produce an error report when response.sendError() is called. For example, using this code in a servlet's service() does not produce an error report: response.sendError(HttpServletResponse.SC_GONE, "error occurred"); The underlying cause is that the valve's check for response.isCommitted() was replaced with response.isAppCommitted(). The latter returns true, which causes the Valve's invoke() method to immediately return instead of producing the report.</description>
    <commit commitTime="2007-06-01 06:20:00" id="71eccb3"/>
    <fixedFiles>
      <file>java/org/apache/catalina/valves/ErrorReportValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="42497" reportTime="2007-05-23 09:00:19">
    <summary>304 response should consistently include ETag header</summary>
    <description/>
    <commit commitTime="2007-06-02 07:20:00" id="0114b2d"/>
    <fixedFiles>
      <file>java/org/apache/catalina/servlets/DefaultServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="42643" reportTime="2007-06-12 07:34:16">
    <summary>Duplicate JSP function mapper variables</summary>
    <description>When we deploy ~20 or so web apps at a time, we invariably end up with an app or two on each server that has compilation errors due to code generated like this: static private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_0; static private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_1; static private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_2; static private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_3; static private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_4; static private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_5; static private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_6; static private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_7; static private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_0; static private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_1; static private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_2; static private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_3; static private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_4; static private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_5; static private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_6; static private org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_7; This looks like it might be as simple as unsynchronized access to the static 'currFunc' in ELFunctionMapper, but I'm far from an expert on this code and unfortunately lack the time to become one. :) This only appears to happen when we mass-deploy apps, and we can resolve it by deleting the generated .java file and manually restarting the affected app.</description>
    <commit commitTime="2007-06-17 00:06:40" id="5b65cf4"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/ELFunctionMapper.java</file>
    </fixedFiles>
  </bug>
  <bug id="42314" reportTime="2007-05-02 01:13:16">
    <summary>Jasper output no details with compilation error in specific case.</summary>
    <description>Jasper output no details when Jasper cannot find mappings between generated servlet code (with mistakes) and former JSP. One example JSP is the following. (The imported class in the JSP is not found.) --- &lt;%@ page import = "not.exist.class" %&gt; ---</description>
    <commit commitTime="2007-06-24 21:00:00" id="6c6ad83"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/JavacErrorDetail.java</file>
    </fixedFiles>
  </bug>
  <bug id="42753" reportTime="2007-06-27 05:21:53">
    <summary>Race condition when using available() or reading in CometProcessor.event()</summary>
    <description>Tomcat version: 6.0.13 (no 6.0.13 available in the version field) When trying to process data in CometProcessor.event() either during the BEGIN event or during the READ event, it is impossible to guarantee that all data has been read before returning (since new data may arrive between the last statement before the return, and the return statement itself). However, the CoyoteProcessor does this check: } else if (!error &amp;&amp; read &amp;&amp; request.getAvailable()) { // If this was a read and not all bytes have been read, or if no data // was read from the connector, then it is an error error = true; log.error(sm.getString("coyoteAdapter.read")); } causing a severe error and the Comet request to break when this race condition manifests itself. I am using the following code according to the aio.html description to read data in my comet event handler: while (request.getInputStream().available() &gt; 0) { // read some data } // ***** NO MORE DATA AVAILABLE return; And I am experiencing the error as described in certain conditions (rapid arrival of fragmented data): SEVERE: The servlet did not read all available bytes during the processing of the read event</description>
    <commit commitTime="2007-06-29 20:26:40" id="a6ea14d"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ApplicationFilterFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="39212" reportTime="2006-04-05 10:20:19">
    <summary>a bug in example code DummyCart.java</summary>
    <description/>
    <commit commitTime="2007-07-31 02:26:40" id="8aa247e"/>
    <fixedFiles>
      <file>webapps/examples/WEB-INF/classes/sessions/DummyCart.java</file>
    </fixedFiles>
  </bug>
  <bug id="42944" reportTime="2007-07-20 09:32:19">
    <summary>plus sign in url-pattern in servlet-mapping does not work</summary>
    <description>Hi all, I had servlet-mappings that contain plus signs (they were created by JspC), e.g.: &lt;servlet-mapping&gt; &lt;servlet-name&gt;org.apache.jsp.suchergebnis_005fbu_002bbb_jsp&lt;/servlet-name&gt; &lt;url-pattern&gt;/suchergebnis_bu+bb.jsp&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; This mapping does not work (the referred class is present)! When I change the original file names of the JSPs such that the plus signs are replaced by a minus signs the following mapping results: &lt;servlet-mapping&gt; &lt;servlet-name&gt;org.apache.jsp.suchergebnis_005fbu_002dbb_jsp&lt;/servlet-name&gt; &lt;url-pattern&gt;/suchergebnis_bu-bb.jsp&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; Now the mapping works. Therefore I assume that there is a bug in handling servlet mappings with plus signs in their url pattern.</description>
    <commit commitTime="2007-08-04 23:06:40" id="44e36ea"/>
    <fixedFiles>
      <file>java/org/apache/catalina/util/RequestUtil.java</file>
    </fixedFiles>
  </bug>
  <bug id="43216" reportTime="2007-08-26 09:28:12">
    <summary>ACTIVITY_CHECK does not work correctly when Tomcat is restarted</summary>
    <description/>
    <commit commitTime="2007-08-28 22:06:40" id="9c37a01"/>
    <fixedFiles>
      <file>java/org/apache/catalina/session/StandardManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="30949" reportTime="2004-08-30 23:54:36">
    <summary>After Failed Include, Request and Response not Unwrapped</summary>
    <description>In org.apache.catalina.core.ApplicationDispatcher.doInclude(ServletRequest request, ServletResponse response), after invoke() is called to perform the include, the request and response objects are normally unwrapped. However, if a ServletException or IOException is thrown, the unwrapping does not take place. This leads to problems in environments in which cross context includes are being performed. For example, 1. Web App A performs an include to a Servlet in Web App B 2. The Servlet in Web App B throws a ServletException 3. Web App A catches the ServletException and attempts to forward to an error jsp. Step 3 above will fail due to the fact that the request has not been unwrapped. The active request will contain the ServletContext of web app B and the jsp file will not be found.</description>
    <commit commitTime="2007-09-05 10:40:00" id="4dd22a5"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ApplicationDispatcher.java</file>
    </fixedFiles>
  </bug>
  <bug id="43356" reportTime="2007-09-11 11:42:39">
    <summary>keystoreFile parameter, when specified as relative, is not treated relative to $CATALINA_BASE or catalina.base property for NioEndPoint</summary>
    <description/>
    <commit commitTime="2007-09-15 06:46:40" id="28da141"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/Http11NioProtocol.java</file>
      <file>java/org/apache/tomcat/util/net/NioEndpoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="43435" reportTime="2007-09-20 04:51:07">
    <summary>AbstractReplicatedMap.memberDisappeared is executed more than the necessity.</summary>
    <description/>
    <commit commitTime="2007-09-22 02:40:00" id="5aed2f5"/>
    <fixedFiles>
      <file>java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java</file>
    </fixedFiles>
  </bug>
  <bug id="43453" reportTime="2007-09-23 13:50:20">
    <summary>ClassCastException at org.apache.catalina.core.StandardContext.findStatusPage(int)</summary>
    <description>StandardContext.java reads public String findStatusPage(int status) { return ((String) statusPages.get(new Integer(status))); } This is wrong and it should be public String findStatusPage(int status) { return ((ErrorPage) statusPages.get(new Integer(status))).getLocation(); } Regards, lg</description>
    <commit commitTime="2007-09-24 07:26:40" id="73b5e41"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="43479" reportTime="2007-09-25 19:49:30">
    <summary>APR sendfile thread leaks memory</summary>
    <description>The APR sendfile thread leaks memory by adding SendfileData objects to its HashMap and failing to remove them.</description>
    <commit commitTime="2007-10-11 07:46:40" id="16464d6"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/net/AprEndpoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="43893" reportTime="2007-11-18 00:04:05">
    <summary>WebdavServlet returns incorrect values for the "href" property when it is mapped with / url prefix, instead of /*</summary>
    <description/>
    <commit commitTime="2007-11-24 01:46:40" id="3c61f9b"/>
    <fixedFiles>
      <file>java/org/apache/catalina/servlets/WebdavServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="43887" reportTime="2007-11-16 15:31:21">
    <summary>StandardWrapper.registerJMX() doesn't log exceptions correctly</summary>
    <description>I was getting some rather unhelpful error messages when trying to deploy a web.xml that included illegal servlet names. I tracked them down to this part of /org/apache/catalina/core/StandardWrapper.java: } catch( Exception ex ) { log.info("Error registering servlet with jmx " + this); } This should probably be changed to: log.info("Error registering servlet with jmx " + ex); Same thing for the catch block ten lines below this one. I first noticed this in 5.5.23, but this code is still present in 6.0 trunk.</description>
    <commit commitTime="2007-11-24 04:33:20" id="9314e5b"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardWrapper.java</file>
    </fixedFiles>
  </bug>
  <bug id="43706" reportTime="2007-10-26 07:03:28">
    <summary>Fix a litmus warning for WebdavServlet</summary>
    <description/>
    <commit commitTime="2007-11-28 05:46:40" id="324387d"/>
    <fixedFiles>
      <file>java/org/apache/catalina/servlets/WebdavServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="43757" reportTime="2007-10-31 11:55:53">
    <summary>Improper parsing of response.sendRedirect() in JSP source</summary>
    <description>Tomcat is throwing a java.lang.illegalStateException due to an attempted response.sendRedirect() after the time for such matters has come and gone... But, this appears to be a symptom of bad .jsp parsing at runtime. ========================== org.apache.jasper.JasperException: Exception in JSP: /buslog.jsp:42 39: // if (session.getAttribute("isAuth") == null) { 40: // session.setAttribute("messageToUser","Authentication failed."); 41: // you.shouldNotParseThis(); 42: // response.sendRedirect("./index.jsp"); 43: // } 44: 45: // if (session.getAttribute("isAuth") != null) { ============================== These lines are commented out in the source, and should not conceivably cause a runtime error. Changing "response.sendRedirect(...)" to "response.sendAbendOMG(...)" suppresses the error. I am willing to provide the complete source if necessary. Build and execution environments are NetBeans 5.5.1 with bundled Tomcat 5.5.17.</description>
    <commit commitTime="2007-11-30 07:46:40" id="eb87635"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/ErrorDispatcher.java</file>
    </fixedFiles>
  </bug>
  <bug id="43622" reportTime="2007-10-15 03:51:24">
    <summary>compression / minCompressionSize attribute not properly implemented</summary>
    <description>2 of the compression related attributes for the http connector are: compression = on | off | force | &lt;integer val&gt; The documentation states that integer val will be implemented as: compression="on" and minCompressionSize = &lt;integer val&gt; minCompressionSize = &lt;integer val&gt; (The documentation for 5.5.12 doesnt mention this at all, but read this in the server.xml) The problem is that the documenation gives the impression that only setting compression="some integer val" is sufficient, however the way the code is written, the value of "minCompressionSize" always overrides the value specified in the "compression" field. Even if minCompressionSize isnt set, it will still get the default value of 2048 and override whatever value was there in the "compression" field. I looked at the implementation of the http11 connector and found the following code that might be the culprit: In org.apache.coyote.http11.Http11BaseProtocol.Http11ConnectionHandler.init processor.setCompression( proto.compression ); processor.setCompressionMinSize( proto.compressionMinSize); since the "setCompressionMinSize" is called after compressionMinSize, its value will override the value read from compression atttribute. I have looked at the code for Tomcat 6.0 also, and the problems appears to still be present.</description>
    <commit commitTime="2007-12-01 03:13:20" id="d1d0619"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/Http11AprProtocol.java</file>
      <file>java/org/apache/coyote/http11/Http11NioProtocol.java</file>
      <file>java/org/apache/coyote/http11/Http11Protocol.java</file>
    </fixedFiles>
  </bug>
  <bug id="43611" reportTime="2007-10-12 05:15:52">
    <summary>autodeployment with unpackWARs="true" does not work, when a context for that war file exists in server.xml</summary>
    <description>if a context for the war file exists in server.xml, the manager uploads the new .war file, but does not expand it, if the necessary directory does not exist, and if the directory exists, it is not overwritten, so you see the old application. see server.xml &lt;Host name="xxx" appBase="webapps" unpackWARs="true"&gt; &lt;Context path="/yyy"&gt; ... if I don't have a context for yyy in server.xml, autodeploy works as expected. Even if you say, remove context from the manager application, it is always there in the application view, you can't remove it. And finally, it never cleans up the work directory for the application yyy, which I guess, is just a subsequent error of the above behaviour.</description>
    <commit commitTime="2007-12-02 01:26:40" id="ffbbe88"/>
    <fixedFiles>
      <file>java/org/apache/catalina/manager/HTMLManagerServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="43236" reportTime="2007-08-29 03:56:43">
    <summary>Response.setCharacterEncoding() fails after Response.getWriter() and Response.reset()</summary>
    <description>The class org.apache.catalina.connector.Response resets the internal hold coyoteResponse and outputBuffer during reset(): public void reset() { if (included) return; // Ignore any call from an included servlet coyoteResponse.reset(); outputBuffer.reset(); } but if anyone has already set the characterEncoding (e.g. to UTF-8) and already got the writer, than all following invocations of request.setCharacterEncoding() will do nothing, because the internal save flag for usingWriter is not reseted. This is very annoying, because the coyoteResponse.reset(), resets the characterEncoding to iso8859-1. So I have no change to change/reset the charaterEncoding to UTF-8. I'll think if you reset the response, you should also reset the usingWriter flag or add another special flag, that works with this circumstances.</description>
    <commit commitTime="2007-12-19 07:20:00" id="71bd193"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/Response.java</file>
    </fixedFiles>
  </bug>
  <bug id="43241" reportTime="2007-08-29 12:54:18">
    <summary>ServletContext.getResourceAsStream() does not follow API specs for Path</summary>
    <description/>
    <commit commitTime="2007-12-19 07:20:00" id="8f91433"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ApplicationContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="44084" reportTime="2007-12-15 14:27:25">
    <summary>JAASRealm useContextClassLoader has problems</summary>
    <description>The useContextClassLoader config option doesn't work right. - it is ignored when setting userClassNames and roleClassNames - it's respected when the LoginContext is created, but that is insufficient, because all the needed classes are not necessarily loaded until loginContext.login() is called Patch to follow. With it I'm able to keep everything related to the JAASRealm in my webapp.</description>
    <commit commitTime="2007-12-24 06:46:40" id="46721e4"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/JAASRealm.java</file>
    </fixedFiles>
  </bug>
  <bug id="44088" reportTime="2007-12-17 15:14:23">
    <summary>Cannot expire session via html manager webapp</summary>
    <description>The html manager webapp done not work correctly when clicking the expire sessions button. The idle param is missing from the form. The following html shows this bug... &lt;form method="POST" action="/manager/html/expire?path=/"&gt; &lt;small&gt; &amp;nbsp;&lt;input type="submit" value="Expire sessions"&gt;&amp;nbsp;with idle &amp;ge;&amp;nbsp;&lt;input type="text" name="expire" size="5" value="30"&gt;&amp;nbsp;minutes&amp;nbsp; &lt;/small&gt; &lt;/form&gt; The name of the text input should be idle.</description>
    <commit commitTime="2007-12-24 06:46:40" id="df2b1e6"/>
    <fixedFiles>
      <file>java/org/apache/catalina/manager/HTMLManagerServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="43944" reportTime="2007-11-22 19:23:45">
    <summary>org.apache.el.lang.ELArithmetic.coerce throws MissingResourceException for key el.convert</summary>
    <description>The class org.apache.el.lang.ELArithmetic has the following code snippet: throw new IllegalArgumentException(MessageFactory.get("el.convert", obj, objType)); But the key "el.convert" doesn't exist in "org.apache.el.Messages". As a result, I'm receiving the exception: java.util.MissingResourceException: Can't find resource for bundle java.util.PropertyResourceBundle, key el.convert at java.util.ResourceBundle.getObject(ResourceBundle.java:325) at java.util.ResourceBundle.getString(ResourceBundle.java:285) at org.apache.el.util.MessageFactory.getArray(MessageFactory.java:67) at org.apache.el.util.MessageFactory.get(MessageFactory.java:47) at org.apache.el.lang.ELArithmetic.coerce(ELArithmetic.java:367) at org.apache.el.lang.ELArithmetic.add(ELArithmetic.java:238) at org.apache.el.parser.AstPlus.getValue(AstPlus.java:24) at org.apache.el.ValueExpressionImpl.getValue (ValueExpressionImpl.java:186)</description>
    <commit commitTime="2007-12-24 23:26:40" id="c228054"/>
    <fixedFiles>
      <file>java/org/apache/el/lang/ELArithmetic.java</file>
    </fixedFiles>
  </bug>
  <bug id="43909" reportTime="2007-11-19 23:06:25">
    <summary>EL EvaluationContext wrapper hides locale</summary>
    <description>org.apache.el.lang.EvaluationContext doesn't pass locale to the wrapped ELContext as does org.apache.jasper.el.ELContextWrapper. This prohibits using of the locale for it's original purpose.</description>
    <commit commitTime="2007-12-25 02:13:20" id="fdb170e"/>
    <fixedFiles>
      <file>java/org/apache/el/lang/EvaluationContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="43914" reportTime="2007-11-20 05:53:53">
    <summary>HTTP spec violation when generating HTTP redirects for folders without trailing slash</summary>
    <description/>
    <commit commitTime="2007-12-27 04:13:20" id="e452200"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/CoyoteAdapter.java</file>
    </fixedFiles>
  </bug>
  <bug id="43285" reportTime="2007-09-02 13:14:26">
    <summary>Missing EL Coercion causes argument type mismatch</summary>
    <description>I'll attach a sample web application reproducing the error. Note that this error only occurs when using Tomcat 6.0.x (i.e. it works with Jetty as it uses Sun's EL RI). Moreover it doesn't matter which JSF implementation you're using to reproduce the error (I just wanted to mention that as it's definitely no bug in MyFaces even though the following stack trace shows a FacesException). The exception stack trace: javax.faces.FacesException: Exception while calling broadcast on component : {Component-Path : [Class: javax.faces.component.UIViewRoot,ViewId: /home.jsp][ Class: javax.faces.component.html.HtmlForm,Id: j_id_jsp_923754602_1][Class: javax.faces.component.html.HtmlCommandButton,Id: j_id_jsp_923754602_3]} at javax.faces.component.UIComponentBase.broadcast(UIComponentBase.java:494) at javax.faces.component.UICommand.broadcast(UICommand.java:105) at javax.faces.component.UIViewRoot._broadcastForPhase(UIViewRoot.java:292) at javax.faces.component.UIViewRoot.process(UIViewRoot.java:209) at javax.faces.component.UIViewRoot.processApplication(UIViewRoot.java:117) at org.apache.myfaces.lifecycle.InvokeApplicationExecutor.execute(InvokeApplicationExecutor.java:32) at org.apache.myfaces.lifecycle.LifecycleImpl.executePhase(LifecycleImpl.java:95) at org.apache.myfaces.lifecycle.LifecycleImpl.execute(LifecycleImpl.java:70) at javax.faces.webapp.FacesServlet.service(FacesServlet.java:144) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:263) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:584) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447) at java.lang.Thread.run(Thread.java:619) Caused by: org.apache.jasper.el.JspELException: /home.jsp(12,3) '#{numberBean.number}' java.lang.IllegalArgumentException: argument type mismatch at org.apache.jasper.el.JspValueExpression.setValue(JspValueExpression.java:94) at org.apache.myfaces.event.SetPropertyActionListener.processAction(SetPropertyActionListener.java:72) at javax.faces.event.ActionEvent.processListener(ActionEvent.java:48) at javax.faces.component.UIComponentBase.broadcast(UIComponentBase.java:489) ... 20 more Caused by: java.lang.IllegalArgumentException: argument type mismatch at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at javax.el.BeanELResolver.setValue(BeanELResolver.java:108) at javax.el.CompositeELResolver.setValue(CompositeELResolver.java:68) at org.apache.myfaces.el.unified.resolver.FacesCompositeELResolver.access$501(FacesCompositeELResolver.java:46) at org.apache.myfaces.el.unified.resolver.FacesCompositeELResolver$6.invoke(FacesCompositeELResolver.java:132) at org.apache.myfaces.el.unified.resolver.FacesCompositeELResolver.invoke(FacesCompositeELResolver.java:148) at org.apache.myfaces.el.unified.resolver.FacesCompositeELResolver.setValue(FacesCompositeELResolver.java:128) at org.apache.el.parser.AstValue.setValue(AstValue.java:114) at org.apache.el.ValueExpressionImpl.setValue(ValueExpressionImpl.java:249) at org.apache.jasper.el.JspValueExpression.setValue(JspValueExpression.java:85) ... 23 more</description>
    <commit commitTime="2007-12-27 09:46:40" id="c5bcc98"/>
    <fixedFiles>
      <file>java/org/apache/el/parser/AstValue.java</file>
    </fixedFiles>
  </bug>
  <bug id="43868" reportTime="2007-11-15 01:26:51">
    <summary>MBeanServer invoke issue</summary>
    <description>Impossible to invoke "removeRole" or other MBean methods and "setAttribute" by MBeanServer cause of the same bug in ManagedBean.java at both lines 545 (getSetter method) and 604 (getInvoke method): object = this; Must be replace by: object = bean; Fortunately getGetter method is correct.</description>
    <commit commitTime="2007-12-30 07:13:20" id="ccadbbc"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/modeler/ManagedBean.java</file>
    </fixedFiles>
  </bug>
  <bug id="43758" reportTime="2007-10-31 11:58:06">
    <summary>java.lang.NullPointerException from org.apache.jasper.compiler.ServletWriter.printMultiLn() on validation of JSPX with empty &lt;jsp:scriptlet&gt; element</summary>
    <description/>
    <commit commitTime="2008-01-02 04:40:00" id="61ce1a3"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Node.java</file>
    </fixedFiles>
  </bug>
  <bug id="43743" reportTime="2007-10-30 21:25:38">
    <summary>Cannot jspc precompile jsps with nested .tag files</summary>
    <description>myjsp.jsp: HELLO &lt;tag1/&gt; tag1.tag: &lt;tag2&gt; tag2.tag: WORLD Crashes (null pointer) while trying to load tag2.class, called by TagFileProcessor.loadTagFile. Very Initial analysis:- TagFileProcessor.loadTagFile creates wrapper, but ctxt.getTagFileJarUrl (tagFilePath) returns null for nested .tag. Thus in JspCompilationContext.Compile JspCCtx.isPackagedFile == false, so outDated test is wrong So tag2.tag not compiled, thus class cannot be loaded. But problem also appears if tags not packaged in a .jar, so there is more going on. Work around is to create dummy.jsp that calls the .tags in leaf first order so .class files are created.</description>
    <commit commitTime="2008-01-08 07:53:20" id="98b8ba2"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Parser.java</file>
    </fixedFiles>
  </bug>
  <bug id="11117" reportTime="2002-07-24 07:44:57">
    <summary>Coyote connector does not correctly deal with large PUT when using chunked transfer encoding</summary>
    <description>I've built a small test servlet (included below) that shows this behaviour. If I upload data to tomcat (configured to use the HTTP/1.1 Coyote connector) using a chunked transfer-encoding on a PUT, then the result (i.e. what I read using the servlet's request.getInputStream() is corrupted. This _only_ happens on large PUTs (it happens every time I tried it (about 10) on a large PUT - I was testing with something around 700 kB, and another thing of about 1 MB, but does NOT always corrupt it in the same way. I did not see any corruption on small files (~50 kB and smaller), though I didn't test this extensively. The total length of the data read is exactly correct (712080 bytes in my first test). At the first point of corruption in the file, a chunk header appears in the output ("\r\n1000\r\n") followed by correct data from about 700 bytes later on, then a second copy (in the correct place, I think) of the corrupt data (i.e. correct data, followed by the chunk header, followed by some data repeated, the second instance of which is in the correct place - so the first instance is being produced _instead_ of the correct data for that point in the input). Test servlet follows: import java.io.*; import javax.servlet.*; import javax.servlet.http.*; public class Test extends HttpServlet { public void doPut(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException { FileOutputStream fos = new FileOutputStream("/tmp/servlet-out"); InputStream is = req.getInputStream(); byte buf[] = new byte[2000]; int ret; while((ret = is.read(buf)) &gt; 0) { fos.write(buf, 0, ret); } fos.close(); is.close(); PrintWriter pw = res.getWriter(); pw.println("Done"); pw.flush(); pw.close(); } }</description>
    <commit commitTime="2008-01-09 06:06:40" id="1cc6641"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/filters/ChunkedInputFilter.java</file>
    </fixedFiles>
  </bug>
  <bug id="43468" reportTime="2007-09-24 18:46:12">
    <summary>HTMLManagerServlet NullPointerException listing context</summary>
    <description>Obtained the following NullPointerException, stack trace below java.lang.NullPointerException org.apache.catalina.manager.HTMLManagerServlet.list(HTMLManagerServlet.java:437) org.apache.catalina.manager.HTMLManagerServlet.doGet(HTMLManagerServlet.java:136) Code is: args[11] = new Integer(context.getManager().getMaxInactiveInterval()/60); Seemingly the getManager() is returning null.</description>
    <commit commitTime="2008-01-17 08:33:20" id="e14afee"/>
    <fixedFiles>
      <file>java/org/apache/catalina/manager/HTMLManagerServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="44223" reportTime="2008-01-14 04:24:16">
    <summary>Tomcat ignores the "javax.net.ssl.trustStoreType" system property</summary>
    <description>Set up a SSL Connector with a keystore in JKS format: &lt;Connector ... SSLEnabled="true" keystoreFile="tomcat.keystore" keystoreType="JKS"&gt; Let's say you need a custom truststore (e.g. for authenticating self-signed client certificates), and that this truststore is also needed by some of your webapps, not only Tomcat. The natural thing to do then is to configure this truststore globally for the whole JVM, not in server.xml. Let's also assume this truststore is in a different format (e.g. PKCS#12). So before starting Tomcat, you do this: export JAVA_OPTS="-Djavax.net.ssl.trustStore=trusted.keystore - Djavax.net.ssl.trustStoreType=PKCS12" Well, it doesn't work. If you look at tomcat/logs/catalina.out, you will see a keystore-related exception. Upon further debugging, you will discover the problem is that Tomcat is trying to open the truststore as if it were in JKS format, even though it is clearly specified as type PKCS12 in JAVA_OPTS above.</description>
    <commit commitTime="2008-01-19 05:00:00" id="f9e41b8"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="44268" reportTime="2008-01-18 08:42:18">
    <summary>Multiple registrations of same ServletContextListener class not possible</summary>
    <description>When I register the same class implementing ServletContextListener twice or more its' contextInitialized methods only gets called once. The servlet specifications (2.4 and 2.5) say the conforming container has to call the listeners in the same order they are registered in the deployment descriptor. The case that one listener class is registered twice is not mentioned explicitly in the specification, though. Example: &lt;listener&gt; &lt;listener-class&gt;test.ServletContextListener1&lt;/listener-class&gt; &lt;/listener&gt; &lt;listener&gt; &lt;listener-class&gt;test.ServletContextListener2&lt;/listener-class&gt; &lt;/listener&gt; &lt;listener&gt; &lt;listener-class&gt;test.ServletContextListener1&lt;/listener-class&gt; &lt;/listener&gt; test.ServletContextListener1 and test.ServletContextListener2 get called, but test.ServletContextListener1 does not get called again. Apache Tomcat 5.5.25 has the same bug.</description>
    <commit commitTime="2008-01-22 05:13:20" id="cdff09f"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="44282" reportTime="2008-01-22 23:50:47">
    <summary>WebappClassLoader.findClass calls getClassLoader without privileges</summary>
    <description>When logging is in TRACE mode or lower, org.apache.catalina.loader.WebappClassLoader.findClass(String) calls getClassLoader() without a privileged block. With security enabled, this will cause a SecurityException if the RuntimePermission to getClassLoader is not granted.</description>
    <commit commitTime="2008-01-31 08:40:00" id="948598d"/>
    <fixedFiles>
      <file>java/org/apache/catalina/loader/WebappClassLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="43701" reportTime="2007-10-26 03:01:21">
    <summary>Error while starting tomcat</summary>
    <description>this is my NIO Connector configuration in server.xml &lt;Connector acceptCount="100" enableLookups="false" port="80" protocol="org.apache.coyote.http11.Http11NioProtocol" acceptorThreadCount="2" socket.bufferPool="-1" connectionTimeout="60000" maxKeepAliveRequests="-1" maxThreads="200" minSpareThreads="25" redirectPort="8443" /&gt; when I am starting my tomcat it is giving following error in the console several time SEVERE: java.lang.NullPointerException at org.apache.tomcat.util.net.NioEndpoint.setSocketOptions(NioEndpoint.java:985) at org.apache.tomcat.util.net.NioEndpoint$Acceptor.run(NioEndpoint.java:1169) at java.lang.Thread.run(Thread.java:595)</description>
    <commit commitTime="2008-02-04 04:20:00" id="bf6ce6f"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/net/NioEndpoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="44337" reportTime="2008-02-01 01:54:32">
    <summary>Dir listing crashes if no readme-file present</summary>
    <description>DefaultServlet docu 6.0 says about attibute readmeFile: If a directory listing is presented, a readme file *may* also be presented with the listing. This file is inserted ..... This was true for 5.5.x. 6.0.14 crashes if the file is absent in the listed directory. javax.servlet.ServletException: Error opening readme resource at org.apache.catalina.servlets.DefaultServlet.getReadme(DefaultServlet.java:1418) This new behaviour blocks the listing of big directory trees managed by others, where the work-around is nor feasible. Work around 1: readme file in *every* subdir, empty (length=0) if none wanted (and subsequent changes in the used XSL-Transformers) Work around 2: Change "may" to "must" in docu. Repair: fix DefaultServlet From web.xml: &lt;servlet&gt; &lt;servlet-name&gt;default&lt;/servlet-name&gt; &lt;servlet-class&gt;org.apache.catalina.servlets.DefaultServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;listings&lt;/param-name&gt; &lt;param-value&gt;true&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;globalXsltFile&lt;/param-name&gt; &lt;param-value&gt;D:\www\serv-intra\meva-dir-li.xsl&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;readmeFile&lt;/param-name&gt; &lt;param-value&gt;readme.htm&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt;</description>
    <commit commitTime="2008-02-04 09:53:20" id="8a3b14b"/>
    <fixedFiles>
      <file>java/org/apache/catalina/servlets/DefaultServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="44558" reportTime="2008-03-07 07:41:10">
    <summary>cite attempted address when throwing "Cannot assign requested address"</summary>
    <description>SEVERE: Error starting endpoint java.net.BindException: Cannot assign requested address:2217 at org.apache.tomcat.util.net.JIoEndpoint.init(JIoEndpoint.java:501) at org.apache.tomcat.util.net.JIoEndpoint.start(JIoEndpoint.java:515) at org.apache.coyote.http11.Http11Protocol.start(Http11Protocol.java:203) at org.apache.catalina.connector.Connector.start(Connector.java:1131) at org.apache.catalina.core.StandardService.start(StandardService.java:531) at org.apache.catalina.core.StandardServer.start(StandardServer.java:710) at org.apache.catalina.startup.Catalina.start(Catalina.java:578) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) saying which address a bind was attempted for would accelerate the error resolution quite a bit!</description>
    <commit commitTime="2008-03-10 00:26:40" id="7bd915c"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/net/JIoEndpoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="44562" reportTime="2008-03-07 13:19:40">
    <summary>HEAD requests cannot go through request dispatch include.</summary>
    <description/>
    <commit commitTime="2008-03-10 00:26:40" id="288b2ae"/>
    <fixedFiles>
      <file>java/javax/servlet/http/HttpServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="44646" reportTime="2008-03-20 09:33:14">
    <summary>IllegalStateException when using CometConnectionManagerValve</summary>
    <description>We're writing an application that processes requests using both a normal servlet and a CometProcessor. The normal servlet handles user authentication and logout (among other things). Once the user has been authenticated, the client makes a Comet request, which is open until the server has something to push to the client. When the user decides to log out, we need to stop processing Comet events for that client. I enabled the CometConnectionManagerValve in context.xml, hoping I would get an END event when the session goes away. Instead, I get an IllegalStateException: Mar 10, 2008 2:05:41 PM org.apache.catalina.connector.CoyoteAdapter event SEVERE: An exception or error occurred in the container during the request processing java.lang.IllegalStateException: Cannot create a session after the response has been committed at org.apache.catalina.connector.Request.doGetSession(Request.java:2301) at org.apache.catalina.connector.Request.getSession(Request.java:2075) at org.apache.catalina.valves.CometConnectionManagerValve.event(CometConnectionManagerValve.java:311) at org.apache.catalina.core.StandardHostValve.event(StandardHostValve.java:179) at org.apache.catalina.valves.ValveBase.event(ValveBase.java:200) at org.apache.catalina.core.StandardEngineValve.event(StandardEngineValve.java:128) at org.apache.catalina.connector.CoyoteAdapter.event(CoyoteAdapter.java:198) at org.apache.coyote.http11.Http11NioProcessor.event(Http11NioProcessor.java:749) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.event(Http11NioProtocol.java:653) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:2080) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) at java.lang.Thread.run(Thread.java:619) Presumably my servlet handles the "logout" request, and after sending a response to the client, calls invalidate() on the HttpSession. Subsequently, CometConnectionManagerValue.event() calls request.getSession(true), resulting in the IllegalStateException.</description>
    <commit commitTime="2008-03-24 06:06:40" id="fdac1d6"/>
    <fixedFiles>
      <file>java/org/apache/catalina/valves/CometConnectionManagerValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="44673" reportTime="2008-03-25 15:32:18">
    <summary>ServletInputStream still readable even when closed</summary>
    <description/>
    <commit commitTime="2008-03-26 08:06:40" id="ca41a27"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/InputBuffer.java</file>
    </fixedFiles>
  </bug>
  <bug id="44529" reportTime="2008-03-04 08:04:54">
    <summary>RealmBase authorization via hasResourcePermission not fully servlet spec compliant</summary>
    <description>The authorization implementation in RealmBase, in the hasResourcePermission method is not fully servlet specification compliant. The spec (both 2.4 and 2.5) states: "... A security constraint that does not contain an authorization constraint shall combine with authorization constraints that name or imply roles to allow unauthenticated access. The special case of an authorization constraint that names no roles shall combine with any other constraints to override their affects and cause access to be precluded. ..." In Tomcat this works fine as long as there aren't weird (but legal!) combinations or security-constraints on the same URLs. Example: &lt;security-constraint&gt; &lt;web-resource-collection&gt; &lt;url-pattern&gt;/someUrl/*&lt;/url-pattern&gt; &lt;http-method&gt;POST&lt;/http-method&gt; &lt;/web-resource-collection&gt; &lt;!-- no auth-constraint, to allow everyone --&gt; &lt;/security-constraint&gt; &lt;security-constraint&gt; &lt;web-resource-collection&gt; &lt;url-pattern&gt;/someUrl/*&lt;/url-pattern&gt; &lt;http-method&gt;POST&lt;/http-method&gt; &lt;/web-resource-collection&gt; &lt;!-- no roles, to allow noone --&gt; &lt;auth-constraint /&gt; &lt;/security-constraint&gt; (if we ignore that this kind of configuration is pretty pointless,) the spec dictates that a POST to /someUrl/index.html should be denied access. Tomcat grants it. (both 5.5.23 and 6.0.14 do) Example 2: &lt;security-constraint&gt; &lt;web-resource-collection&gt; &lt;url-pattern&gt;/someUrl/*&lt;/url-pattern&gt; &lt;http-method&gt;POST&lt;/http-method&gt; &lt;/web-resource-collection&gt; &lt;!-- no roles, to allow noone --&gt; &lt;auth-constraint /&gt; &lt;/security-constraint&gt; &lt;security-constraint&gt; &lt;web-resource-collection&gt; &lt;url-pattern&gt;/someUrl/*&lt;/url-pattern&gt; &lt;http-method&gt;POST&lt;/http-method&gt; &lt;/web-resource-collection&gt; &lt;auth-constraint&gt; &lt;role-name&gt;*&lt;/role-name&gt; &lt;/auth-constraint&gt; &lt;/security-constraint&gt; Now it gets interesting. In "strict" mode, access to /someUrl/index.html is denied (regardless of the web.xml-configured security roles and the roles the user has). In "auth-only" mode, access is always granted, and in "strict auth-only" mode access is granted if there are no web.xml-configured security roles. Now these modes are a Tomcat addition to the spec, but I feel access should have been denied in all modes, both to stay in line with the spec and to keep the behaviour predictable.</description>
    <commit commitTime="2008-03-29 22:13:20" id="7be2374"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/RealmBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="44595" reportTime="2008-03-13 01:34:50">
    <summary>Add possibility to request the QueueSize of an executor via JMX</summary>
    <description/>
    <commit commitTime="2008-04-07 17:20:00" id="c3c525b"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardThreadExecutor.java</file>
    </fixedFiles>
  </bug>
  <bug id="44428" reportTime="2008-02-15 02:36:16">
    <summary>FunctionMapperImpl.Function throws a NPE in certain circumstances</summary>
    <description>In FunctionMapperImpl.Function it is possible for writeExternal to fail if the class has just been de-serialised and is then serialised again. If you look at writeExternal: public void writeExternal(ObjectOutput out) throws IOException { out.writeUTF((this.prefix != null) ? this.prefix : ""); out.writeUTF(this.localName); out.writeUTF(this.m.getDeclaringClass().getName()); out.writeUTF(this.m.getName()); out.writeObject(ReflectionUtil.toTypeNameArray( this.m.getParameterTypes())); } you can see that it externalises the function to be invoked by using the reference to the Method itself. If you look at readExternal however: public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException { this.prefix = in.readUTF(); if ("".equals(this.prefix)) this.prefix = null; this.localName = in.readUTF(); this.owner = in.readUTF(); this.name = in.readUTF(); this.types = (String[]) in.readObject(); } You can see that it doesn't restore the Method after deserialisation. The method is restored if it is accessed, however if it's not and then serialisation is performed writeExternal will throw a NPE (as m is still null). The fix is to either get the method to be reconstructed as soon as deserialisation completes - or perhaps to be a bit more efficient, in writeExternal change it such that if m is null it externalises using the components of the method: public void writeExternal(ObjectOutput out) throws IOException { out.writeUTF((this.prefix != null) ? this.prefix : ""); out.writeUTF(this.localName); if (m == null) { out.writeUTF(this.owner); out.writeUTF(this.name); out.writeObject(this.types); } else if (this.m != null) { out.writeUTF(this.m.getDeclaringClass().getName()); out.writeUTF(this.m.getName()); out.writeObject(ReflectionUtil.toTypeNameArray( this.m.getParameterTypes())); } }</description>
    <commit commitTime="2008-04-10 06:26:40" id="0035fd4"/>
    <fixedFiles>
      <file>java/org/apache/el/lang/FunctionMapperImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="44408" reportTime="2008-02-13 03:36:02">
    <summary>EL-expression evaluation slow due to synchronization caused by JspFactory.getDefaultFactory</summary>
    <description/>
    <commit commitTime="2008-04-11 01:53:20" id="1f41c3d"/>
    <fixedFiles>
      <file>java/org/apache/jasper/runtime/PageContextImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="44392" reportTime="2008-02-11 05:37:37">
    <summary>HTML entities not resolved in SSI filter</summary>
    <description>HTML entities which are contained in an SSI set directive aren't resolved by the SSI filter (in contrary to what is done by mod_include of Apaches HTTP). mod_include resolves all HTML entities in most of the attribute values of ssi directives. It also resolves \" to " and \$ to $. The ssi filter of tomcat resolves all escaped character which are escaped with a backslash, but no HTML entities at all. Apart from that, giving encoding "entity" should be different from giving encoding="none" to the SSI echo directive. One should replace all invalid HTML characters by valid HTML entities and the other one should do nothing. The encoding is especially important if you wan't to store a HTML-Comment within a SSI variable. If I want to store a variable test with the value "&lt;!-- testvalue "x" --&gt;" &lt;!--#set var="test" value="&lt;!-- testvalue "x" --&gt;"--&gt; for mod_include you must write: &lt;!--#set var="test" value="&lt;!&amp;#45;&amp;#45; testvalue \"x\" &amp;#45;&amp;#45;&gt;" --&gt; for Tomcats SSI you must write: &lt;!--#set var="test" value="&lt;!\-\- testvalue \"x\" \-\-&gt;" --&gt; And there should be a difference whether I output this variable with &lt;!--#echo var="test" encoding="none" --&gt; which should lead to &lt;!-- testvalue "x" --&gt;, or &lt;!--#echo var="test" encoding="entity" --&gt; which should lead to &amp;lt;!-- testvalue &amp;quot;x&amp;quot; --&amp;gt;</description>
    <commit commitTime="2008-04-12 02:53:20" id="75fbd91"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ssi/SSIEcho.java</file>
      <file>java/org/apache/catalina/ssi/SSIMediator.java</file>
    </fixedFiles>
  </bug>
  <bug id="44389" reportTime="2008-02-11 02:03:09">
    <summary>Cleanup of org.apache.naming.resources.CacheEntry resources (memory leak)</summary>
    <description>Hi, I am memory profiling a webapp for my company because we suspect it has memory leaks when redeploying. This webapp has to be redeployed several times a week for security reasons (most of the time it is undeployed) and the memory leaks forced us to shutdown tomcat once a week to avoid OOM exception. I'm using jvm1.5 and tomcat 6.0.13 (also tried with 6.0.14 and today with 6.0.16), and Yourkit as the profiling tool. I have made the test in both linux and windows. I have created a JMeter test to deploy the app using the manager, make some request to the app and then undeploy it using again the manager app in a loop. After some redeployments, I got my OutOfMemoryException. Then I checked with my profiling tool and found that my own classes were correctly destroyed, and the classes retaining more memory were these ones (listed as a heirarchy): org.apache.catalina.core.ApplicationContext$DispatchData org.apache.catalina.core.ApplicationContext mapper of org.apache.catalina.core.StandardContext context of org.apache.tomcat.util.http.mapper.Mapper resources of org.apache.tomcat.util.http.mapper.Mapper$Context cache of org.apache.naming.resources.ProxyDirContext cache of org.apache.naming.resources.ResourceCache org.apache.naming.resources.CacheEntry[] The number of objects of each class were exactly the number of times I had redeployed the webapp. I have checked the contents of CacheEntry inside CacheEntry[] and it has an attribute "name" and the contents are the jsps and tld files of my app. There are as many CacheEntry with the same jsp attribute as times the webapp has been reloaded, so I guess there is no cleaning of CacheEntry resources at context shutdown. To reproduce this, a simple webapp with 2 jsp and a taglibrary can be used. Deploy and undeploy it many times so you can see how the count of these objects grows in memory.</description>
    <commit commitTime="2008-04-12 05:40:00" id="6723b35"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ApplicationContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="44391" reportTime="2008-02-11 04:37:40">
    <summary>SSI handling of escaped characters broken</summary>
    <description>In org.apache.catalina.ssi.SSIProcessor the method parseParamNames is broken. If I have a SSI directive like &lt;!--#set var="test" value="blubb\"\"" --&gt; the method detects three parameters instead of two. This is because there are two consecutive escaped characters. Although the first one \" is detected correctly the next one isn't because the flag escaped is still set to true, although this character isn't escaped anymore. You have to replace boolean escaped = false; for (; bIdx &lt; cmd.length() &amp;&amp; quotes != 2; bIdx++) { char c = cmd.charAt(bIdx); // Need to skip escaped characters if (c == '\\' &amp;&amp; !escaped) { escaped = true; bIdx++; continue; } escaped = false; if (c == '"') quotes++; } by for (; bIdx &lt; cmd.length() &amp;&amp; quotes != 2; bIdx++) { char c = cmd.charAt(bIdx); // Need to skip escaped characters if (c == '\\') { bIdx++; continue; } if (c == '"') quotes++; } Just removing the flag escaped is sufficient, because you don't have to remember whether the last character was escaped and that should have no influence to consecutive characters. The bug still exists in the HEAD revision of the repository.</description>
    <commit commitTime="2008-04-12 05:40:00" id="df75937"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ssi/SSIProcessor.java</file>
    </fixedFiles>
  </bug>
  <bug id="29936" reportTime="2004-07-06 15:18:51">
    <summary>XML parser loading problems by container</summary>
    <description>I'm trying to use JSTL 1.1 with this version of tomcat and have both saxon and crimson in my web-app. If we have crimson and saxon in our webapp lib then tomcat tries to use crimson as the xml parser when reading the web.xml and compiling the jsp and we get the prefix error: org.apache.jasper.JasperException: &lt;h3&gt;Validation error messages from TagLibraryValidator for c&lt;/h3&gt;&lt;p&gt;null: java.lang.IllegalStateException: can't declare any more prefixes in this context&lt;/p&gt;&lt;h3&gt;Validation error messages from TagLibraryValidator for fmt&lt;/h3&gt;&lt;p&gt;null: java.lang.IllegalStateException: can't declare any more prefixes in this context&lt;/p&gt; If we remove crimson, tomcat uses saxon (aelfred parser) and this fails on reading the web.xml (javax.xml.parsers.ParserConfigurationException: AElfred parser is namespace-aware) If we remove saxon and crimson then we are okay (defaults to xerces in the tomcat endorsed directory?) It seems to me that tomcat is using the parser in my web-app to read the web.xml rather than using xerces from the endorsed directory. The same web-app runs without problems in version 5.0.16. Tomcat seems to be using the service provider mechanism in 5.0.25 as I have property files in C:\Java\jakarta-tomcat-5.0.25 \work\Catalina\localhost\diabetes\loader\META-INF\services (can't find any documents on this). If I'm using more than one parser won't this cause problems as tomcat is setting only one parser and xslt processor here? Any comments are gratefully received. Thanks, Peter Neville</description>
    <commit commitTime="2008-04-21 03:33:20" id="06c23d8"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="31257" reportTime="2004-09-16 05:10:06">
    <summary>java.endorsed.dirs is not used when JSP compilation is forked</summary>
    <description>When the JSP compiler forks a javac process, it should check to see what the currently endorsed directories are (check the system property "java.endorsed.dirs" - otherwise, classes end up missing and JSP pages do not properly compile. We experienced a problem when we explicitly set the java.endorsed.dirs property on the command line, and the JSP compiler did not use it when javac was forked. I have patched org.apache.jasper.compiler.Compiler to support this: *** src.original\jakarta-tomcat-jasper\jasper2 \src\share\org\apache\jasper\compiler\Compiler.java Tue Jun 15 17:30:35 2004 --- src\org\apache\jasper\compiler\Compiler.java Thu Sep 16 00:05:14 2004 *************** *** 349,358 **** --- 349,369 ---- extdirs.setPath(exts); javac.setExtdirs(extdirs); info.append(" extension dir=" + exts + "\n"); } + // Add endorsed directories + String endorsed = System.getProperty("java.endorsed.dirs"); + if(endorsed != null) { + Javac.ImplementationSpecificArgument endorsedArg = javac.createCompilerArg(); + endorsedArg.setLine("-J-Djava.endorsed.dirs="+endorsed); + info.append(" endorsed dir=" + endorsed + "\n"); + } + else { + info.append(" no endorsed dirs specified\n"); + } + // Configure the compiler object javac.setEncoding(javaEncoding); javac.setClasspath(path); javac.setDebug(ctxt.getOptions().getClassDebugInfo()); true, i should probably check ctxt.getOptions().getFork() in the if() as well, but since i always fork it doesn't matter to me.</description>
    <commit commitTime="2008-04-21 06:20:00" id="0ea3e15"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/AntCompiler.java</file>
    </fixedFiles>
  </bug>
  <bug id="43425" reportTime="2007-09-18 21:33:56">
    <summary>Non-compliant annotations</summary>
    <description/>
    <commit commitTime="2008-04-26 05:46:40" id="48131cd"/>
    <fixedFiles>
      <file>java/javax/annotation/security/DenyAll.java</file>
      <file>java/javax/ejb/EJB.java</file>
      <file>java/javax/persistence/PersistenceContext.java</file>
      <file>java/javax/persistence/PersistenceProperty.java</file>
    </fixedFiles>
  </bug>
  <bug id="43366" reportTime="2007-09-12 08:15:55">
    <summary>Session Statistics command in manager fails with "Unknown command /sessions"</summary>
    <description/>
    <commit commitTime="2008-04-28 02:13:20" id="f4a7632"/>
    <fixedFiles>
      <file>java/org/apache/catalina/manager/ManagerServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="44877" reportTime="2008-04-25 13:43:26">
    <summary>ClassCastException due to bad TagHandlerPool name generation of two different tags</summary>
    <description/>
    <commit commitTime="2008-04-28 02:13:20" id="dfa25f4"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Generator.java</file>
    </fixedFiles>
  </bug>
  <bug id="43142" reportTime="2007-08-16 06:24:52">
    <summary>webapp expanded in a FOLDER named webapps/xxx.war is loaded TWICE</summary>
    <description>reproduce: copy the expanded of file xxx.war file in a FOLDER tomcat/webapps/xxx.war bug: tomcat will load the app TWICE</description>
    <commit commitTime="2008-05-01 16:20:00" id="6a8b1bb"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/HostConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="43150" reportTime="2007-08-16 14:35:07">
    <summary>Tomcat and path with pound sign (#) -&gt; ClassNotFoundException</summary>
    <description>Tomcat will not start if it's located and launched from a path with a # (pound) character somewhere. You'll find all informations in the given mail-thread on tomcat-user, including some developer specific informations. One part of the problem is the usage of File.toURL in URLClassloader... I'd really appreciate it if this problem could be fixed/worked around (see mail-thread for hints). btw. the same applies to version 5.5 and probably earlier versions too. thanks!</description>
    <commit commitTime="2008-05-02 06:13:20" id="fa91954"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ClassLoaderFactory.java</file>
      <file>java/org/apache/jasper/JspCompilationContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="43191" reportTime="2007-08-22 15:02:44">
    <summary>compressableMimeType attribute ignored</summary>
    <description>I have set compression="on" and compressableMimeType="text/html" in server.xml. It appears that the value of compressableMimeType is being ignored. My XML responses are all coming back gzipped. If I switch to compression="off" the responses are not gzipped, but as soon as I turn it on, regardless of the value of compressableMimeType, the XML responses are coming back gzipped. A full Connector tag follows. Note that this is just an example -- I have tried many values for compressableMimeType (that do NOT include text/xml) and the responses are still compressed. &lt;Connector port="7630" address="${jboss.bind.address}" maxThreads="20" minSpareThreads="4" maxSpareThreads="10" strategy="ms" maxHttpHeaderSize="8192" emptySessionPath="true" enableLookups="false" redirectPort="7643" acceptCount="16" connectionTimeout="20000" disableUploadTimeout="true" compression="off" compressableMimeType="text/html,text/javascript,application/x-javascript,application/javascript" /&gt;</description>
    <commit commitTime="2008-05-03 18:20:00" id="e2524a8"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/Http11AprProcessor.java</file>
      <file>java/org/apache/coyote/http11/Http11NioProcessor.java</file>
      <file>java/org/apache/coyote/http11/Http11Processor.java</file>
    </fixedFiles>
  </bug>
  <bug id="42943" reportTime="2007-07-20 03:46:22">
    <summary>jsp:text gets confused with other *:text elements in a JSP tag file</summary>
    <description/>
    <commit commitTime="2008-05-09 04:53:20" id="17b4436"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/JspDocumentParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="42934" reportTime="2007-07-18 14:40:10">
    <summary>sessionDidActivate() called before contextInitialized()</summary>
    <description>I'm using Seam and a Seam app depends upon the Seam application being initialized before you can do much of anything in Seam. That said Seam puts some hooks into the sessionDidActivate() and sessionDidPassivate() events. Because of that when I start up my app I'm getting a Seam IllegalStateException because the contextInitialized() event is fired after sessionDidActivate() so Seam is not yet initialized it's Session hooks are being fired. What makes me think this is a bug is that sessionWillPassivate() is being correctly called before contextDestroyed() so it would seem that sessionDidActivate() being called before contextInitialized() would be inconsistent behavior. So to sum up I think tomcat should fire context and session events in the following order: contextInitialized sessionDidActivate sessionWillPassivate contextDestroyed As a side note Tomcat 5 follows what I think is the completely wrong but consistent order by firing events in this order: sessionDidActivate contextInitialized contextDestroyed sessionWillPassivate</description>
    <commit commitTime="2008-05-10 03:06:40" id="a9cb6a6"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="44986" reportTime="2008-05-13 04:42:11">
    <summary>JSP compilation exception with pageEncoding="utf-8" and file with byte order marks</summary>
    <description>JSP-File has byte order marks. If the attribute is set to "UTF-8" (upper case) or the file has no byte order marks, the compilation workes fine. {code} 12:32:16,946 ERROR [[jsp]] Servlet.service() for servlet jsp threw exception org.apache.jasper.JasperException: /dialog.jsp(2,0) Page-encoding specified in XML prolog (UTF-8) is different from that specified in page directive (utf-8) at org.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:40) at org.apache.jasper.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.java:407) at org.apache.jasper.compiler.ErrorDispatcher.jspError(ErrorDispatcher.java:236) at org.apache.jasper.compiler.Validator$DirectiveVisitor.comparePageEncodings(Validator.java:362) at org.apache.jasper.compiler.Validator$DirectiveVisitor.visit(Validator.java:197) at org.apache.jasper.compiler.Node$PageDirective.accept(Node.java:590) at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2338) at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2388) at org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2394) at org.apache.jasper.compiler.Node$Root.accept(Node.java:489) at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2338) at org.apache.jasper.compiler.Validator.validate(Validator.java:1700) at org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:178) at org.apache.jasper.compiler.Compiler.compile(Compiler.java:306) at org.apache.jasper.compiler.Compiler.compile(Compiler.java:286) at org.apache.jasper.compiler.Compiler.compile(Compiler.java:273) at org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:566) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:316) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:336) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:265) at javax.servlet.http.HttpServlet.service(HttpServlet.java:803) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:654) at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:445) at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:379) at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:292) at de.cit.jsp.control.DispatchServlet.forward(DispatchServlet.java:286) at de.cit.jsp.control.DispatchServlet.doGet(DispatchServlet.java:272) at javax.servlet.http.HttpServlet.service(HttpServlet.java:690) at javax.servlet.http.HttpServlet.service(HttpServlet.java:803) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at de.cit.util.javax.servlet.ValidationFilter.doFilter(ValidationFilter.java:108) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at de.cit.util.javax.servlet.jsp.XHtmlContentTypeFilter.doFilter(XHtmlContentTypeFilter.java:36) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.jboss.web.tomcat.filters.ReplyHeaderFilter.doFilter(ReplyHeaderFilter.java:96) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:230) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175) at org.jboss.web.tomcat.security.SecurityAssociationValve.invoke(SecurityAssociationValve.java:179) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:432) at org.jboss.web.tomcat.security.JaccContextValve.invoke(JaccContextValve.java:84) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.jboss.web.tomcat.service.jca.CachedConnectionValve.invoke(CachedConnectionValve.java:157) at org.apache.catalina.authenticator.SingleSignOn.invoke(SingleSignOn.java:420) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:262) at org.apache.coyote.ajp.AjpProcessor.process(AjpProcessor.java:437) at org.apache.coyote.ajp.AjpProtocol$AjpConnectionHandler.process(AjpProtocol.java:366) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:446) at java.lang.Thread.run(Thread.java:619) {code} Case insensitive camparison in org.apache.jasper.compiler.Validator.comparePageEncodings(...) seems to fix the problem: {code} /* * Compares page encodings specified in various places, and throws * exception in case of page encoding mismatch. * * @param pageDirEnc The value of the pageEncoding attribute of the page * directive @param pageDir The page directive node * * @throws JasperException in case of page encoding mismatch */ private String comparePageEncodings(String pageDirEnc, Node.PageDirective pageDir) throws JasperException { Node.Root root = pageDir.getRoot(); String configEnc = root.getJspConfigPageEncoding(); /* * Compare the 'pageEncoding' attribute of the page directive with * the encoding specified in the JSP config element whose URL * pattern matches this page. Treat "UTF-16", "UTF-16BE", and * "UTF-16LE" as identical. */ if (configEnc != null) { if (!pageDirEnc.equalsIgnoreCase(configEnc) &amp;&amp; (!pageDirEnc.toUpperCase().startsWith("UTF-16") || !configEnc .toUpperCase().startsWith("UTF-16"))) { err.jspError(pageDir, "jsp.error.config_pagedir_encoding_mismatch", configEnc, pageDirEnc); } else { return configEnc; } } /* * Compare the 'pageEncoding' attribute of the page directive with * the encoding specified in the XML prolog (only for XML syntax, * and only if JSP document contains XML prolog with encoding * declaration). Treat "UTF-16", "UTF-16BE", and "UTF-16LE" as * identical. */ if ((root.isXmlSyntax() &amp;&amp; root.isEncodingSpecifiedInProlog()) || root.isBomPresent()) { String pageEnc = root.getPageEncoding(); if (!pageDirEnc.equalsIgnoreCase(pageEnc) &amp;&amp; (!pageDirEnc.toUpperCase().startsWith("UTF-16") || !pageEnc .toUpperCase().startsWith("UTF-16"))) { err.jspError(pageDir, "jsp.error.prolog_pagedir_encoding_mismatch", pageEnc, pageDirEnc); } else { return pageEnc; } } return pageDirEnc; } {code}</description>
    <commit commitTime="2008-05-14 04:20:00" id="3c84dcf"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Validator.java</file>
    </fixedFiles>
  </bug>
  <bug id="42750" reportTime="2007-06-26 16:57:13">
    <summary>Http Post requests not handled correctly if there is more than one space between the "POST" and the URL</summary>
    <description/>
    <commit commitTime="2008-05-20 04:46:40" id="f93376d"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/InternalAprInputBuffer.java</file>
      <file>java/org/apache/coyote/http11/InternalInputBuffer.java</file>
      <file>java/org/apache/coyote/http11/InternalNioInputBuffer.java</file>
    </fixedFiles>
  </bug>
  <bug id="45279" reportTime="2008-06-25 12:21:15">
    <summary>McastServiceImpl leaks sockets.</summary>
    <description>McastServiceImpl does not close its socket in stop() as it claims. It merely calls leaveGroup(), which is sufficient to stop receiving messages, but does not close the socket. This causes a file descriptor leak each time the service is stopped. add; socket.close(); after leaveGroup();</description>
    <commit commitTime="2008-06-26 05:40:00" id="a2a7714"/>
    <fixedFiles>
      <file>java/org/apache/catalina/tribes/membership/McastServiceImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="36155" reportTime="2005-08-12 05:08:52">
    <summary>tomcat chooses wrong host if using mod_jk</summary>
    <description/>
    <commit commitTime="2008-06-28 10:26:40" id="f23907d"/>
    <fixedFiles>
      <file>java/org/apache/coyote/ajp/AjpMessage.java</file>
    </fixedFiles>
  </bug>
  <bug id="45317" reportTime="2008-07-01 07:50:35">
    <summary>DeltaManager always reports default timeout value for receiving session state on startup</summary>
    <description>Hi there, If I override the state transfer timeout: &lt;Manager className="org.apache.catalina.ha.session.DeltaManager" stateTransferTimeout="10" expireSessionsOnShutdown="false" notifyListenersOnReplication="true"/&gt; DeltaManager continues to log the default timeout value (ie: "This operation will timeout if no session state has been received within 60 seconds."): 2008-07-01 14:31:30,419 WARN [org.apache.catalina.ha.session.DeltaManager] - Manager [localhost#/manager], requesting session state from org.apache.catalina.tribes.membership.MemberImpl[tcp://{10, -64, 104, -55}:15000,{10, -64, 104, -55},15000, alive=18586,id={-62 91 -70 -63 -111 50 70 -33 -104 41 -48 -32 91 34 -83 -55 }, payload={}, command={}, domain={}, ]. This operation will timeout if no session state has been received within 60 seconds. 2008-07-01 14:31:35,310 WARN [org.apache.catalina.ha.ClusterListener] - Context manager doesn't exist:localhost#/host-manager But it actually uses the correct timeout value (ie: "timing out after 10,100 ms"): 2008-07-01 14:31:40,518 ERROR [org.apache.catalina.ha.session.DeltaManager] - Manager [localhost#/manager]: No session state send at 01/07/08 14:31 received, timing out after 10,100 ms. This is only an incorrect message, but it is quite annoying especially coupled with the fact that the above configuration is only documented for tomcat 5 (where syntax is subtly different).</description>
    <commit commitTime="2008-07-03 04:20:00" id="36bb5d9"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/session/DeltaManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="42678" reportTime="2007-06-15 15:07:50">
    <summary>docBase ignored even if its not a subdir of appBase</summary>
    <description>I use latest 6.0 SVN snapshot. I store deployable WARs in "webapps-dist" (aside "webapps"). This is my setup: bash-3.2$ ls $CATALINA_BASE conf logs temp tomcat-dist webapps webapps-dist work bash-3.2$ ls webapps-dist sample.war bash-3.2$ cat conf/Catalina/localhost/sample.xml &lt;Context docBase="${catalina.base}/webapps-dist/sample.war"/&gt; this ends up in: WARNUNG: A docBase /home/juergen/java/tomcat/webapps-dist/sample.war inside the host appBase has been specified, and will be ignored</description>
    <commit commitTime="2008-07-11 01:13:20" id="252fca1"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/HostConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="42722" reportTime="2007-06-22 05:21:27">
    <summary>Potential NullPointerException in org.apache.catalina.servlets.CGIServlet</summary>
    <description/>
    <commit commitTime="2008-07-11 04:00:00" id="d41f610"/>
    <fixedFiles>
      <file>java/org/apache/catalina/servlets/CGIServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="42727" reportTime="2007-06-23 06:29:58">
    <summary>CoyoteReader readLine returns null for some post request bodies that are a multiple of MAX_LINE_LENGTH in size</summary>
    <description/>
    <commit commitTime="2008-07-18 05:26:40" id="92f847d"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/CoyoteReader.java</file>
    </fixedFiles>
  </bug>
  <bug id="45453" reportTime="2008-07-22 02:25:02">
    <summary>JDBCRealm.getRoles bad synchronization causes hangs w/ DIGEST authentication</summary>
    <description>JDBCRealm.getRoles bad synchronization causes hangs w/ DIGEST authentication JDBCRealm caches PreparedStatement preparedRoles. That, and missing synchronization in JDBCRealm and/or DigestAuthenticator allow two threads to call getRoles simultaneously so that T1 will do stmt.executeQuery() while T2 does stmt.setString(1, userName) plus another .executeQuery() on the same PreparedStatement object. In the worst case, the JDBC driver gets confused by this, and blocks forever waiting for server response, causing all other threads that try to access DB hang. (This was observed with PostgreSQL 8.3-603-jdbc4 JDBC driver) org.postgresql.jdbc2.AbstractJdbc2Statement.execute(AbstractJdbc2Statement.java:451) org.postgresql.jdbc2.AbstractJdbc2Statement.executeWithFlags(AbstractJdbc2Statement.java:350) org.postgresql.jdbc2.AbstractJdbc2Statement.executeQuery(AbstractJdbc2Statement.java:254) org.apache.catalina.realm.JDBCRealm.getRoles(JDBCRealm.java:631) org.apache.catalina.realm.JDBCRealm.getPrincipal(JDBCRealm.java:596) org.apache.catalina.realm.RealmBase.authenticate(RealmBase.java:399) org.apache.catalina.authenticator.DigestAuthenticator.findPrincipal(DigestAuthenticator.java:283) org.apache.catalina.authenticator.DigestAuthenticator.authenticate(DigestAuthenticator.java:176)</description>
    <commit commitTime="2008-07-29 22:00:00" id="9d3cad7"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/JDBCRealm.java</file>
    </fixedFiles>
  </bug>
  <bug id="45459" reportTime="2008-07-22 08:44:55">
    <summary>Startup Listener error message unhelpful</summary>
    <description/>
    <commit commitTime="2008-07-29 22:00:00" id="4cab5f3"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="45576" reportTime="2008-08-06 02:12:34">
    <summary>JAASRealm not working with DigestAuthenticator</summary>
    <description/>
    <commit commitTime="2008-08-09 19:06:40" id="c984c6a"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/JAASCallbackHandler.java</file>
      <file>java/org/apache/catalina/realm/JAASMemoryLoginModule.java</file>
      <file>java/org/apache/catalina/realm/JAASRealm.java</file>
    </fixedFiles>
  </bug>
  <bug id="41407" reportTime="2007-01-18 18:33:49">
    <summary>CLIENT-CERT Authentication with JAASRealm not working</summary>
    <description>I tried to config my webapp to authenticate user by CLIENT-CERT auth method. I verified my JAAS LoginModule by using "BASIC" to auth method and successfully authenticated user login. After studying Tomcat 5.5.20 source, I found that the problem is caused by the RealmBase.java and JAASRealm.java. if CLIENT-CERT auth method is used, SSLAuthenticator will call the : JAASRealm.authenticate(X509Certificate certs[]) As JAASRealm didn't override authenticate(X509Certificate certs[]), RealmBase's authenticate will be used and it will only validate the certs and then call getPrincipal(X509Certificate) and then getPrincipal(String) is being called to get the Principal. However, in JAASRealm, this function always return null. That means Tomcat can't use JAASRealm with CLIENT-CERT auth method. Thanks Butler</description>
    <commit commitTime="2008-08-09 21:53:20" id="6d78232"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/JAASCallbackHandler.java</file>
      <file>java/org/apache/catalina/realm/JAASMemoryLoginModule.java</file>
      <file>java/org/apache/catalina/realm/JAASRealm.java</file>
    </fixedFiles>
  </bug>
  <bug id="45608" reportTime="2008-08-10 21:27:37">
    <summary>Race conditions on field countAllocated of class org.apache.catalina.core.StandardWrapper</summary>
    <description>We found field countAllocated are accessed by allocate() and deallocate() without any protections by locks. Here is a trace log, Thread http-8081-1 id: 23 : READ [org.apache.catalina.core.StandardWrapper : allocate : 820] [org.apache.catalina.core.StandardWrapperValve : invoke : 129] [org.apache.catalina.core.StandardContextValve : invoke : 175] [org.apache.catalina.core.StandardHostValve : invoke : 128] [org.apache.catalina.valves.ErrorReportValve : invoke : 104] [org.apache.catalina.core.StandardEngineValve : invoke : 109] [org.apache.catalina.connector.CoyoteAdapter : service : 261] [org.apache.coyote.http11.Http11Processor : process : 844] [org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler : process : 581] [org.apache.tomcat.util.net.JIoEndpoint$Worker : run : 447] [java.lang.Thread : run : 735] Thread http-8081-4 id: 26 : WRITE [org.apache.catalina.core.StandardWrapper : deallocate : 871] [org.apache.catalina.core.StandardWrapperValve : invoke : 298] [org.apache.catalina.core.StandardContextValve : invoke : 175] [org.apache.catalina.core.StandardHostValve : invoke : 128] [org.apache.catalina.valves.ErrorReportValve : invoke : 104] [org.apache.catalina.core.StandardEngineValve : invoke : 109] [org.apache.catalina.connector.CoyoteAdapter : service : 261] [org.apache.coyote.http11.Http11Processor : process : 844] [org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler : process : 581] [org.apache.tomcat.util.net.JIoEndpoint$Worker : run : 447] [java.lang.Thread : run : 735] Thread http-8081-4 and http-8081-1 will access countAllocated in parallel. Since increment and decrement is *NOT* atomic, we think it is a potential race condition.</description>
    <commit commitTime="2008-08-12 22:06:40" id="816ecb8"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardWrapper.java</file>
    </fixedFiles>
  </bug>
  <bug id="45655" reportTime="2008-08-19 14:13:35">
    <summary>check permisson</summary>
    <description/>
    <commit commitTime="2008-08-21 08:53:20" id="b266836"/>
    <fixedFiles>
      <file>java/org/apache/juli/ClassLoaderLogManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="43327" reportTime="2007-09-07 07:22:31">
    <summary>Socket bind fails on tomcat startup when using apr</summary>
    <description>I'm running debian sid, kernel 2.6.22 and use tomcat 6.0.14 together with apr 1.2.11. no special tomcat configuration (out of the box). On start up of tomcat I get the following error log: Debugging apr revealed a problem with IPV6: apr_socket_create() assigns a AF_INET6 socket, apr_socket_bind tries to bind a AF_INET address which fails. INFO: Loaded Apache Tomcat Native library 1.1.10. Sep 7, 2007 6:05:16 PM org.apache.catalina.core.AprLifecycleListener init INFO: APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true]. Sep 7, 2007 6:05:16 PM org.apache.coyote.http11.Http11AprProtocol init SEVERE: Error initializing endpoint java.lang.Exception: Socket bind failed: [22] Invalid argument at org.apache.tomcat.util.net.AprEndpoint.init(AprEndpoint.java:612) at org.apache.coyote.http11.Http11AprProtocol.init(Http11AprProtocol.java:121) at org.apache.catalina.connector.Connector.initialize(Connector.java:1059) regards erik</description>
    <commit commitTime="2008-08-21 22:46:40" id="fea7658"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/net/AprEndpoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="45074" reportTime="2008-05-23 15:44:19">
    <summary>Add configuration parameters for finer tuning of Http11AprProtocol thread usage</summary>
    <description/>
    <commit commitTime="2008-08-27 14:53:20" id="6a1f316"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/Http11AprProtocol.java</file>
    </fixedFiles>
  </bug>
  <bug id="44809" reportTime="2008-04-11 10:18:59">
    <summary>Improve AprLifecycleListener Error Messages</summary>
    <description/>
    <commit commitTime="2008-08-27 14:53:20" id="46055c5"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/AprLifecycleListener.java</file>
    </fixedFiles>
  </bug>
  <bug id="45691" reportTime="2008-08-26 07:23:33">
    <summary>Jasper creates duplicate variable names</summary>
    <description>Sometimes a JSP's Java code, which have been generated by Jasper, has duplicate variable names. Therefore the JSP cannot be compiled and tomcat delivers an HTTP status code 500. You get an error message like this org.apache.jasper.JasperException: Unable to compile class for JSP: An error occurred at line: 10 in the jsp file: /test1.jsp Duplicate local variable _jspx_temp0 7: &lt;c:set var="a"&gt; 8: &lt;jsp:attribute name="value"&gt;&lt;%= new java.util.Date().toString() %&gt;&lt;/jsp:attribute&gt; 9: &lt;/c:set&gt; 10: &lt;c:set var="b"&gt; 11: &lt;jsp:attribute name="value"&gt;&lt;%= new java.util.Date().toString() %&gt;&lt;/jsp:attribute&gt; 12: &lt;/c:set&gt; 13: &lt;h1&gt;Test 1&lt;/h1&gt; The reason of this error is the generation of variable names like _jspx_temp0, which are created for &lt;jsp:attribute&gt; tags. At the beginning of parsing a JSP file a counter is reset to 0. Every time an &lt;jsp:attribute&gt; tag occurs, the counter is used to build a variable name _jspx_temp&lt;counter&gt;. Thereafter the counter will be incremented. Unfortunately the counter is a static member of the JspUtil class. Suppose there's a thread 1, which created _jspx_temp4. The counter is 5. Now a second thread (thread 2) starts and resets the counter. Afterwards thread 2 creates _jspx_temp0 to _jspx_temp3. The counter is 4 by now. Then thread 2 stops and thread 1 continues. The next variable's name in thread 1 will be _jspx_temp4, which already exists. Therefore the generated java class cannot be compiled.</description>
    <commit commitTime="2008-08-31 21:40:00" id="337d6a6"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Compiler.java</file>
      <file>java/org/apache/jasper/compiler/JspUtil.java</file>
      <file>java/org/apache/jasper/compiler/Node.java</file>
      <file>java/org/apache/jasper/compiler/TagPluginManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="45648" reportTime="2008-08-18 19:54:44">
    <summary>Function 'f:length' not found</summary>
    <description/>
    <commit commitTime="2008-09-01 03:13:20" id="6d40691"/>
    <fixedFiles>
      <file>java/org/apache/el/parser/ELParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="45666" reportTime="2008-08-21 06:47:17">
    <summary>JspContextWrapper contains infinite loop in include(String relativeUrlPath, boolean flush)</summary>
    <description>public void include(String relativeUrlPath, boolean flush) throws ServletException, IOException { include(relativeUrlPath, false); // XXX } just calls itself it seems. Perhaps this should be (just a guess): public void include(String relativeUrlPath, boolean flush) throws ServletException, IOException { invokingJspCtxt.include(relativeUrlPath, false); // XXX } This came up for me when I had a .tag file that had an include in it. I was using Tomcat 5.5 but looking at the source of JspContextWrapper.java it looks like this issue is in 5.5 as well as 6 (and the svn trunk).</description>
    <commit commitTime="2008-09-01 06:00:00" id="ccc1014"/>
    <fixedFiles>
      <file>java/org/apache/jasper/runtime/JspContextWrapper.java</file>
    </fixedFiles>
  </bug>
  <bug id="45628" reportTime="2008-08-13 12:47:56">
    <summary>ExtensionValidator doesn't handle wrapped lines in MANIFEST.MF</summary>
    <description/>
    <commit commitTime="2008-09-02 23:40:00" id="3773ec4"/>
    <fixedFiles>
      <file>java/org/apache/catalina/util/ManifestResource.java</file>
    </fixedFiles>
  </bug>
  <bug id="45618" reportTime="2008-08-11 22:45:15">
    <summary>Selector is not closed.</summary>
    <description/>
    <commit commitTime="2008-09-03 05:13:20" id="d69b378"/>
    <fixedFiles>
      <file>java/org/apache/catalina/tribes/transport/nio/ParallelNioSender.java</file>
    </fixedFiles>
  </bug>
  <bug id="45441" reportTime="2008-07-20 10:54:40">
    <summary>Matching of relevant servlet filters fails when request is forwarded...</summary>
    <description>I ran into a situation where Tomcat will not execute appropriate filters on a request that has been forwarded. I'm using the handy URLRewriteFilter implementation (from tuckey.org). When I forwarded a request internally, filters that had a matching url-pattern (in the web.xml file) and with a dispatcher setting of both REQUEST and FORWARD were not invoked. On tracing the code (hours later), I found that the problem lies inside the ApplicationDispatcher code. It set the DISPATCHER_REQUEST_PATH_ATTR state attribue to be the servletPath. That meant that only matches using the servlet path would match, but longer (more exact) urls would fail to match. For example, using the following filter mapping: &lt;filter-mapping&gt; &lt;filter-name&gt;my-filter&lt;/filter-name&gt; &lt;url-pattern&gt;/app/level/mycode.do&lt;/url-pattern&gt; &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt; &lt;dispatcher&gt;FORWARD&lt;/dispatcher&gt; &lt;/filter-mapping&gt; would not match a request that was forwarded to /app/level/mycode.do, which it should! Changing the url pattern to be "/app/*" would match, but "/app/level/*" would not, since the servletPath was /app in this example. The fix for this is quite simple. In the ApplicationDispatcher.java code, in the method processRequest() (which is only called for forwards), change the following statement: state.outerRequest.setAttribute (ApplicationFilterFactory.DISPATCHER_REQUEST_PATH_ATTR, servletPath); to use requestURI instead as follows: state.outerRequest.setAttribute (ApplicationFilterFactory.DISPATCHER_REQUEST_PATH_ATTR, requestURI ); This resolves the problem and let all the examples above correctly match and run the filter on a forward. I believe includes will also be broken in the same manner. Similar changes to the doInclude() method in ApplicationDispatcher.java will likely resolve that issue as well, though I have not tested this personally. Be nice to see this resolved in 6.0.17+. Thanks! ....Andrzej</description>
    <commit commitTime="2008-09-17 19:13:20" id="2c0fffe"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ApplicationDispatcher.java</file>
    </fixedFiles>
  </bug>
  <bug id="45823" reportTime="2008-09-17 02:20:05">
    <summary>AccessLogValve doesn't correctly handles combined log format (with patch)</summary>
    <description/>
    <commit commitTime="2008-09-17 19:13:20" id="678b516"/>
    <fixedFiles>
      <file>java/org/apache/catalina/valves/AccessLogValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="45419" reportTime="2008-07-17 07:38:07">
    <summary>Return Accept-Ranges from DefaultServlet</summary>
    <description>Currently the DefaultServlet accepts the "Ranges" request header, but doesn't indicate this in its response by returning "Accept-Ranges: bytes". Although this is not required in HTTP/1.1, setting the header is required in order for the Adobe Acrobat plugin to correctly handle Linearized PDF's (which can speed download by allowing random access to a PDF file). Although it's not strictly necessary according to the specification I can't think of any reason why this header is not safe to set in a response from DefaultServlet, which is always dealing with static files, and not doing so has a negative impact on serving large PDF files - so I'm filing it as a bug rather than an RFE.</description>
    <commit commitTime="2008-09-18 03:33:20" id="633545f"/>
    <fixedFiles>
      <file>java/org/apache/catalina/servlets/DefaultServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="45851" reportTime="2008-09-19 22:17:57">
    <summary>FarmWarDeployer fails to properly unpack copied war on target node</summary>
    <description/>
    <commit commitTime="2008-09-27 01:26:40" id="c340c69"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/deploy/FarmWarDeployer.java</file>
      <file>java/org/apache/catalina/ha/deploy/FileMessageFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="45951" reportTime="2008-10-05 15:15:52">
    <summary>Provide support for renaming JSESSIONID</summary>
    <description/>
    <commit commitTime="2008-10-07 03:06:40" id="e85ed8c"/>
    <fixedFiles>
      <file>java/org/apache/catalina/Globals.java</file>
      <file>java/org/apache/catalina/authenticator/Constants.java</file>
      <file>java/org/apache/jasper/Constants.java</file>
    </fixedFiles>
  </bug>
  <bug id="45977" reportTime="2008-10-09 08:28:02">
    <summary>Duplicate comment in code - CoyoteAdapter.java</summary>
    <description>The XXX comments below seem to say the same thing. Not sure what the XXX represents. /** * Parse additional request parameters. */ protected boolean postParseRequest(org.apache.coyote.Request req, Request request, org.apache.coyote.Response res, Response response) throws Exception { // XXX the processor needs to set a correct scheme and port prior to this point, // in ajp13 protocols dont make sense to get the port from the connector.. // XXX the processor may have set a correct scheme and port prior to this point, // in ajp13 protocols dont make sense to get the port from the connector... // otherwise, use connector configuration if (! req.scheme().isNull()) { // use processor specified scheme to determine secure state request.setSecure(req.scheme().equals("https"));</description>
    <commit commitTime="2008-10-10 06:06:40" id="e277f6c"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/CoyoteAdapter.java</file>
    </fixedFiles>
  </bug>
  <bug id="46085" reportTime="2008-10-24 12:53:09">
    <summary>Session are incorrectly expired due to thread unsafe code</summary>
    <description/>
    <commit commitTime="2008-10-28 01:53:20" id="6344b96"/>
    <fixedFiles>
      <file>java/org/apache/catalina/session/StandardSession.java</file>
    </fixedFiles>
  </bug>
  <bug id="46096" reportTime="2008-10-27 05:44:55">
    <summary>DefaultAnnotationProcessor.processAnnotations should use doPrivileged to call getDeclaredFields</summary>
    <description>If tomcat is running with a SecurityManager, and a JSP uses PageContext.forward, DefaultAnnotationProcessor code can be called with untristed code on the call stack. The processAnnotations method contains the line: Field[] fields = instance.getClass().getDeclaredFields(); getDeclaredFields() is subject to security checks so this throws a java.security.AccessControlException. DefaultAnnotationProcessor is part of the code in the catlina lib directory, which is granted AllPermissions in the standard policy file. However, because there is untrusted JSP code on the stack, these permissions are not used. The call to getDeclaredFields() should be wrapped in an AccessController.doPrivileged call to avoid the exception.</description>
    <commit commitTime="2008-10-28 01:53:20" id="428c03b"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/DefaultInstanceManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="46075" reportTime="2008-10-23 03:35:53">
    <summary>FileUpload memory usage</summary>
    <description>The DefaultFileItem class in pacakge org.apache.tomcat.util.http.fileupload creates a ByteArrayOutputStream of the full threshold size for every control on the submitted form. I have a form with 63 controls (checkboxes, text boxes and one File input), and I set the threshold to 20 Meg to allow upload of large image files into memory. I get an OutOfMemory exception since it tries to allocate 63 lots of 20M, although only 1 control requires the requested size. I think it would be much more sensible to create the ByteArrayOutputStream with an initial size of only a few kilobytes size it automatically increases its size as data is written to it.</description>
    <commit commitTime="2008-10-28 07:26:40" id="85e71cf"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/http/fileupload/DeferredFileOutputStream.java</file>
    </fixedFiles>
  </bug>
  <bug id="46105" reportTime="2008-10-27 23:37:52">
    <summary>URIEncoding doesn't affect after form-authentication redirect</summary>
    <description>How to reproduce bug. Configure tomcat connector with URIEncoding=UTF-8 attribute. Make a simple page that write out any request parameter. Configure this page as protected with form-based authentication. Try to access page, e.g. /site/page.jsp?q=%xx%yy%zz%tt where q=%xx%yy%zz is value in UTF-8 charset. When page is being accessed for the first time, then after authentication, parameter "q" is incorrectly interpreted (it seems as it was in ISO8859-1 or anything else, but not UTF-8). But subsequent access to the _same_ URI, i.e. /site/page.jsp?q=%xx%yy%zz%tt gives perfect result. I also tried useBobyEncodingForURI=true and request.setCharacterEncoding("UTF-8") - nothing is changed.</description>
    <commit commitTime="2008-10-31 07:40:00" id="d9def07"/>
    <fixedFiles>
      <file>java/org/apache/catalina/authenticator/FormAuthenticator.java</file>
    </fixedFiles>
  </bug>
  <bug id="46051" reportTime="2008-10-21 10:54:42">
    <summary>Servlet response writer does not respect line.separator system property</summary>
    <description/>
    <commit commitTime="2008-11-02 09:40:00" id="f4bef20"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/CoyoteWriter.java</file>
    </fixedFiles>
  </bug>
  <bug id="42409" reportTime="2007-05-14 09:03:17">
    <summary>Extra response headers not sent when using custom error page</summary>
    <description>If I create a servlet that does the following: response.setHeader("X-BUG", "Value"); response.sendError(HttpServletResponse.SC_BAD_REQUEST); If I use the tomcat default error page for 400 responses, the response will contain the header "X-BUG" with value "Value". However, if I create a custom error page, the response headers do NOT contain the "X-BUG" header in the response. Here is my web.xml, for example: &lt;error-page&gt; &lt;error-code&gt;400&lt;/error-code&gt; &lt;location&gt;/400.jsp&lt;/location&gt; &lt;/error-page&gt; 400.jsp contains plain html: &lt;html&gt; &lt;body&gt; &lt;h3&gt;Custom 400 error page&lt;/h3&gt; &lt;/body&gt; &lt;/html&gt;</description>
    <commit commitTime="2008-11-03 21:46:40" id="e0489c8"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardHostValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="46047" reportTime="2008-10-21 02:20:44">
    <summary>Issue when using include directive inside tag files that are inside jar files</summary>
    <description/>
    <commit commitTime="2008-11-04 06:06:40" id="38ef38d"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/ParserController.java</file>
    </fixedFiles>
  </bug>
  <bug id="46011" reportTime="2008-10-15 02:56:56">
    <summary>Cannot access to Principal via Subject.getSubject(AccessController.getContext())</summary>
    <description>Cannot access to Principal via Subject.getSubject(AccessController.getContext()). Problem is that in method internalDoFilter of ApplicationFilterChain in call of filter chain the code determinate the Principal but don't use it: if( Globals.IS_SECURITY_ENABLED ) { final ServletRequest req = request; final ServletResponse res = response; Principal principal = ((HttpServletRequest) req).getUserPrincipal(); Object[] args = new Object[]{req, res, this}; SecurityUtil.doAsPrivilege ("doFilter", filter, classType, args); args = null; } else { In this manner a SecurityUtil.doAsPrivilege will be called with Principal == null and method execute create a Subject with no Principals. Then call a Subject.doAsPrivileged(subject, pea, null); and this do not propagate Principals. I obtain a Subject without Principals calling Subject.getSubject(AccessController.getContext()). In attachment we send our solution</description>
    <commit commitTime="2008-11-05 23:46:40" id="e148369"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ApplicationFilterChain.java</file>
      <file>java/org/apache/catalina/security/SecurityUtil.java</file>
    </fixedFiles>
  </bug>
  <bug id="42673" reportTime="2007-06-15 05:08:34">
    <summary>SSI virtual include broken for context path with slashes</summary>
    <description>If the context path of an application contains slashes (e.g. "a/b") the method getPathWithoutContext of class org.apache.catalina.ssi.SSIServletExternalResolver simply cuts from the second slash, so for url "/a/b/do?.." it tries to include "b/do?.." instead of "do?..". The patch is to include the context path and strip the path off: Line 419 String noContext = getPathWithoutContext(normContext.getContextPath(), normalized); Line 356ff protected String getPathWithoutContext(final String contextPath, final String servletPath) { if (servletPath.startsWith(contextPath)) { return servletPath.substring(contextPath.length()); } return servletPath; }</description>
    <commit commitTime="2008-11-09 08:20:00" id="4d5cca1"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ssi/SSIServletExternalResolver.java</file>
    </fixedFiles>
  </bug>
  <bug id="42077" reportTime="2007-04-10 03:03:51">
    <summary>the iterator from javax.el.CompositeELResolver#getFeatureDescriptor() must not return null values</summary>
    <description/>
    <commit commitTime="2008-11-24 06:40:00" id="8d5db6f"/>
    <fixedFiles>
      <file>java/javax/el/CompositeELResolver.java</file>
    </fixedFiles>
  </bug>
  <bug id="42693" reportTime="2007-06-18 10:10:02">
    <summary>JSP-Generation error with recursive tagfile structure</summary>
    <description>addendum: it's Version 6.13 (not available in combobox above) scenario: ========= a menu is decribed by a tree structure; rendering the menu is done by a tagfile 'render_menuitem', which renders the current item either as a leaf item (clicking on it causes an action) or as a node item (clicking on it opens another next-level submenu); rendering the submenu is done by calling the tagfile again from within its body; this worked fine with tomcat 5.0.x and 5.5.x to make it clear see the following pseudo code (the original code is to voluminous): tagfile 'render_menuitem.tagx': &lt;jsp:root ...&gt; &lt;jsp:directive.attribute name="menu_item"/&gt; &lt;c:choose&gt; &lt;c:when test="${menu_item.isNode} &lt;div&gt;node: ${menu_item.label}&lt;/div&gt; &lt;c:forEach var="sub_item" items="menu_item.children"&gt; &lt;!-- THIS IS GOING TO CAUSE THE PROBLEM WITH TOMCAT6: --&gt; &lt;tags:render_menuitem menu_item="${sub_item}"/&gt; &lt;/c:forEach&gt; &lt;c:when&gt; &lt;c:otherwise&gt; &lt;div&gt;leaf: ${menu_item.label}&lt;/div&gt; &lt;/c:otherwise&gt; &lt;/c:choose&gt; &lt;/jsp:root&gt; faulty behaviour: ================ with tomcat 6.0.13, the generated Java-Source for the tagfile reveals, that the body of the doTag() method is empty and therefore emits no html; the compilation itself was silently done, no error or warning was shown in the logfiles.</description>
    <commit commitTime="2008-11-24 06:40:00" id="b5a5094"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Compiler.java</file>
    </fixedFiles>
  </bug>
  <bug id="46408" reportTime="2008-12-16 15:22:51">
    <summary>Invalid cast in SecurityUtil</summary>
    <description>In case of PrivilegedActionException thrown in: private static void execute(final Method method, final Object targetObject, final Object[] targetArguments, Principal principal) method, there is a false assumption in catch block, that PrivilegedActionException.getException() will return InvocationTargetException. It could be also IllegalAccessException and possibly other types of exceptions as well. Here is the stack trace provoked on catalina shutdown when enabled security manager: java.lang.ClassCastException: java.lang.IllegalAccessException cannot be cast to java.lang.reflect.InvocationTargetException at org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:278) at org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:218) at org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:178) at org.apache.catalina.core.ApplicationFilterConfig.release(ApplicationFilterConfig.java:326) at org.apache.catalina.core.StandardContext.filterStop(StandardContext.java:3744) at org.apache.catalina.core.StandardContext.stop(StandardContext.java:4513) at org.apache.catalina.core.ContainerBase.removeChild(ContainerBase.java:924) at org.apache.catalina.startup.HostConfig.undeployApps(HostConfig.java:1191) at org.apache.catalina.startup.HostConfig.stop(HostConfig.java:1162) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:313) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117) at org.apache.catalina.core.ContainerBase.stop(ContainerBase.java:1086) at org.apache.catalina.core.ContainerBase.stop(ContainerBase.java:1098) at org.apache.catalina.core.StandardEngine.stop(StandardEngine.java:448) at org.apache.catalina.core.StandardService.stop(StandardService.java:584) at org.apache.catalina.core.StandardServer.stop(StandardServer.java:744) at org.apache.catalina.startup.Catalina.stop(Catalina.java:628) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.catalina.startup.Bootstrap.stop(Bootstrap.java:300) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.commons.daemon.support.DaemonLoader.stop(DaemonLoader.java:200)</description>
    <commit commitTime="2008-12-19 23:20:00" id="a1e4c86"/>
    <fixedFiles>
      <file>java/org/apache/catalina/security/SecurityUtil.java</file>
    </fixedFiles>
  </bug>
  <bug id="46403" reportTime="2008-12-15 13:46:47">
    <summary>Persistent cookies written by 6.0.18 do not work in Internet Explorer or Safari</summary>
    <description/>
    <commit commitTime="2008-12-23 21:46:40" id="99c5ca6"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/http/ServerCookie.java</file>
    </fixedFiles>
  </bug>
  <bug id="46397" reportTime="2008-12-15 00:43:53">
    <summary>Potential memory leak with TagHandlers and JspIdConsumer</summary>
    <description/>
    <commit commitTime="2008-12-24 03:20:00" id="5277185"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Generator.java</file>
    </fixedFiles>
  </bug>
  <bug id="46357" reportTime="2008-12-06 05:48:33">
    <summary>FarmWarDeployer has nonsense condition</summary>
    <description>FarmWarDeployer has the following code at line 152: if(econtainer == null &amp;&amp; econtainer instanceof Engine) { There's clearly something wrong with that condition.</description>
    <commit commitTime="2008-12-27 06:20:00" id="7e6a2ec"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/deploy/FarmWarDeployer.java</file>
    </fixedFiles>
  </bug>
  <bug id="46381" reportTime="2008-12-11 07:13:00">
    <summary>Coerce EL expression to java.lang.Object breaks expression concatenation</summary>
    <description/>
    <commit commitTime="2008-12-27 06:20:00" id="24bcb47"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Generator.java</file>
    </fixedFiles>
  </bug>
  <bug id="46261" reportTime="2008-11-21 08:34:21">
    <summary>Context with %2F in name causes tomcat crash on shutdown</summary>
    <description>Context with %2F in name causes tomcat crash on shutdown Several years ago I worked on integrating tomcat 5.5 into our web application management infrastructure. During the process I fixed several tomcat 5.5 bugs, but apparently never sent the fixes upstream. Oops. Our application needs to be deployed to create a URL that looks like this: /product/customername/servlet I worked with several people on IRC to get tomcat5.5 to do this. We had previously been using the path= parameter in the context xml file element with tomcat 4.1. Unfortunately, it appears this feature was removed from tomcat5.5, and tomcat5.5 does not recurse into subdirectories when reading .xml context files. The recommendation on IRC (after several suggestions which would not work for our environment) was to put %2F in the context xml file's name. Such as this product%2Fcustomername.xml This does work, however when you try to shutdown tomcat 6.0.18, you will get this crash: Nov 9, 2008 10:56:17 PM org.apache.coyote.http11.Http11Protocol pause INFO: Pausing Coyote HTTP/1.1 on http-8180 Nov 9, 2008 10:56:18 PM org.apache.catalina.core.StandardService stop INFO: Stopping service Catalina Nov 9, 2008 10:56:18 PM org.apache.catalina.startup.HostConfig undeployApps WARNING: Error while removing context [/product%2Fcustomername] java.lang.NullPointerException at org.apache.catalina.core.ContainerBase.removeChild(ContainerBase.java:915) at org.apache.catalina.startup.HostConfig.undeployApps(HostConfig.java:1191) at org.apache.catalina.startup.HostConfig.stop(HostConfig.java:1162) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:313) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:117) at org.apache.catalina.core.ContainerBase.stop(ContainerBase.java:1086) at org.apache.catalina.core.ContainerBase.stop(ContainerBase.java:1098) at org.apache.catalina.core.StandardEngine.stop(StandardEngine.java:448) at org.apache.catalina.core.StandardService.stop(StandardService.java:584) at org.apache.catalina.core.StandardServer.stop(StandardServer.java:744) at org.apache.catalina.startup.Catalina.stop(Catalina.java:628) at org.apache.catalina.startup.Catalina$CatalinaShutdownHook.run(Catalina.java:671) Nov 9, 2008 10:56:18 PM org.apache.coyote.http11.Http11Protocol destroy INFO: Stopping Coyote HTTP/1.1 on http-8180</description>
    <commit commitTime="2008-12-27 09:06:40" id="85fc30c"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
      <file>java/org/apache/catalina/manager/HTMLManagerServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="46298" reportTime="2008-11-25 23:25:56">
    <summary>JDBCRealm.open() throws NullPointerException if the specified driver doesn't handle the specified JDBC URL</summary>
    <description/>
    <commit commitTime="2008-12-29 08:20:00" id="e31998a"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/JDBCRealm.java</file>
    </fixedFiles>
  </bug>
  <bug id="46462" reportTime="2009-01-01 20:29:15">
    <summary>JSPWiki JSP compilation prevented by org.apache.jasper.Constants.JSP_PACKAGE_NAME</summary>
    <description/>
    <commit commitTime="2009-01-02 17:53:20" id="1ca03ff"/>
    <fixedFiles>
      <file>java/org/apache/jasper/servlet/JasperLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="46471" reportTime="2009-01-04 16:12:40">
    <summary>Compiled tag files from different tag libraries share the same package</summary>
    <description/>
    <commit commitTime="2009-01-06 02:26:40" id="3aaac85"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/ImplicitTagLibraryInfo.java</file>
      <file>java/org/apache/jasper/compiler/JspUtil.java</file>
      <file>java/org/apache/jasper/compiler/ParserController.java</file>
      <file>java/org/apache/jasper/compiler/TagFileProcessor.java</file>
      <file>java/org/apache/jasper/compiler/TagLibraryInfoImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="46564" reportTime="2009-01-20 00:34:11">
    <summary>.tagx files don't compile if the document and page encoding casing differs</summary>
    <description/>
    <commit commitTime="2009-01-30 12:33:20" id="7d7f757"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Validator.java</file>
    </fixedFiles>
  </bug>
  <bug id="46606" reportTime="2009-01-26 07:18:21">
    <summary>WebdavServlet</summary>
    <description/>
    <commit commitTime="2009-02-04 14:46:40" id="f0bd732"/>
    <fixedFiles>
      <file>java/org/apache/catalina/servlets/WebdavServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="38197" reportTime="2006-01-09 15:53:09">
    <summary>taglib pool bug when tag is used with jsp:attribute</summary>
    <description/>
    <commit commitTime="2009-02-04 17:33:20" id="2824a70"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Generator.java</file>
    </fixedFiles>
  </bug>
  <bug id="38553" reportTime="2006-02-07 16:54:17">
    <summary>Wrong HTTP code for failed CLIENT-CERT authentication</summary>
    <description>server.xml: =========== I set clientAuth to "want" tomcat-user.xml: ================ I create a role and an user with the ssl certificate metadata web.xml: ======== For a private URL on my webseite, I create a security constraint like this one: &lt;security-constraint&gt; &lt;web-resource-collection&gt; &lt;web-resource-name&gt;App&lt;/web-resource-name&gt; &lt;url-pattern&gt;/protected.jsp&lt;/url-pattern&gt; &lt;/web-resource-collection&gt; &lt;auth-constraint&gt; &lt;role-name&gt;tomcat&lt;/role-name&gt; &lt;/auth-constraint&gt; &lt;user-data-constraint&gt; &lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt; &lt;/user-data-constraint&gt; &lt;/security-constraint&gt; &lt;login-config&gt; &lt;auth-method&gt;CLIENT-CERT&lt;/auth-method&gt; &lt;/login-config&gt; &lt;security-role&gt; &lt;role-name&gt;tomcat&lt;/role-name&gt; &lt;/security-role&gt; My results: (I try to access the restricted JSP-Page) =========== 1) When there is the RIGHT client certificate in the browser keystore: it works :-) 2) When there is the WRONG client certificate I get: HTTP Status 401 - Cannot authenticate with the provided credentials (this is ok, too) 3) When there is NO client certificate I get: HTTP Status 400 - No client certificate chain in this request 400 usually stands for a bad request or bad syntax. The Bug: ======== In case 3 I expect to get HTTP Status 401.</description>
    <commit commitTime="2009-02-04 17:33:20" id="156f1ca"/>
    <fixedFiles>
      <file>java/org/apache/catalina/authenticator/SSLAuthenticator.java</file>
    </fixedFiles>
  </bug>
  <bug id="39396" reportTime="2006-04-24 15:15:57">
    <summary>OPTIONS request on directory with no default file reports an incorrect list of allowed HTTP verbs</summary>
    <description>When an "options" http request is made to Tomcat to a directory that has no default file (like index.jsp) in it, Tomcat reports a full list of allowed verbs, when in fact, most of them are NOT allowed. For example, a request to a generic img directory: OPTIONS /img/ HTTP/1.0 Cookie: JSESSIONID=C46C2E18BE95AD91828C9370CBDF0AF2 Content-Length: 0 Accept: */* Accept-Language: en-us Connection: Keep-Alive User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1 4322; InfoPath.1) Returns: HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Allow: GET, HEAD, POST, PUT, DELETE, TRACE, OPTIONS Content-Length: 0 Date: Mon, 24 Apr 2006 15:11:16 GMT Connection: close Which shows several destructive options available (PUT, DELETE). But a request to DELETE or PUT (correctly) returns a 403 FORBIDDEN result: DELETE /img/ HTTP/1.0 Cookie: JSESSIONID=C46C2E18BE95AD91828C9370CBDF0AF2 Content-Length: 0 Accept: */* Accept-Language: en-us Connection: Keep-Alive User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1 4322; InfoPath.1) Returns: HTTP/1.1 403 Forbidden Server: Apache-Coyote/1.1 Content-Type: text/html;charset=utf-8 Content-Length: 964 Date: Mon, 24 Apr 2006 15:12:31 GMT Connection: close Because the initial OPTIONS request returns a list containing dangerous verbs, the directory will be flagged as a serious security vulnerability by most scanners (a false positive). The issue DOES NOT occur when the directory HAS a default file in it: OPTIONS /user_management/ HTTP/1.0 Cookie: JSESSIONID=C46C2E18BE95AD91828C9370CBDF0AF2 Content-Length: 0 Accept: */* Accept-Language: en-us Connection: Keep-Alive User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1 4322; InfoPath.1) Returns: HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Set-Cookie: JSESSIONID=BC992F0C86E2BCBD0A2E5F1B3A12C50C; Path=/ Content-Type: text/html;charset=ISO-8859-1 Date: Mon, 24 Apr 2006 15:14:27 GMT Connection: close</description>
    <commit commitTime="2009-02-10 04:06:40" id="9752018"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/RequestFacade.java</file>
      <file>java/org/apache/catalina/servlets/DefaultServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="38570" reportTime="2006-02-08 15:46:45">
    <summary>if docBase path contains "webapps", a backslash is inserted</summary>
    <description/>
    <commit commitTime="2009-02-10 04:06:40" id="8d2b8ff"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="46666" reportTime="2009-02-04 08:28:34">
    <summary>Why is disableUploadTimeout and KeepAliveTimeout correlated in Http11 Connector?</summary>
    <description>In Http11Processor.java while (started &amp;&amp; !error &amp;&amp; keepAlive) { // Parsing the request header try { if (!disableUploadTimeout &amp;&amp; keptAlive) { if (keepAliveTimeout &gt; 0) { socket.setSoTimeout(keepAliveTimeout); } else if (soTimeout &gt; 0) { socket.setSoTimeout(soTimeout); } } inputBuffer.parseRequestLine(); request.setStartTime(System.currentTimeMillis()); keptAlive = true; if (!disableUploadTimeout) { socket.setSoTimeout(timeout); } disableUploadTimeout - This flag allows the servlet container to use a different, longer connection timeout while a servlet is being executed, which in the end allows either the servlet a longer amount of time to complete its execution, or a longer timeout during data upload. If not specified, this attribute is set to "true". The code above is waiting on a new Http Request and precedes the servlet processing logic. It seems odd to me that I must set disableTimeout to false to get my keepAliveTimeout set. To set keepalivetimout, I must implicitely enable upload timeout whether I need it or not. It seems to me that the disableTimeout is unneccessary in the following line if (!disableUploadTimeout &amp;&amp; keptAlive) { Do you agree with this? Thanks for the insight</description>
    <commit commitTime="2009-02-13 23:46:40" id="ac6369a"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/Http11Processor.java</file>
    </fixedFiles>
  </bug>
  <bug id="46875" reportTime="2009-03-19 02:15:04">
    <summary>CometConnectionManagerValve: concurrent access on session object when calling HttpSession.invalidate()</summary>
    <description>When calling invalidate() on an valid HttpSession object CometConnectionManagerValve methods sessionDestroy(HttpSessionEvent se) and event(Request request, Response response, CometEvent event) are called concurrently. So either a CometEvent with EventType.END and EventSubType.SESSION_END is never signaled via sessionDestroyed(...) or the HttpSession object has become invalid and the attribute holding comet requests can not be set or removed via event(...). I have configured CometConnectionManagerValve as a Valve element in context.xml and also as a Listener element in my applications web.xml. see this stacktrace 'sessionDestroy() was a bit faster': An exception or error occurred in the container during the request processing java.lang.IllegalStateException: removeAttribute: Session already invalidated at org.apache.catalina.session.StandardSession.removeAttribute(StandardSession.java:1206) at org.apache.catalina.session.StandardSession.removeAttribute(StandardSession.java:1181) at org.apache.catalina.session.StandardSessionFacade.removeAttribute(StandardSessionFacade.java:140) at org.apache.catalina.valves.CometConnectionManagerValve.event(CometConnectionManagerValve.java:335) at org.apache.catalina.core.StandardHostValve.event(StandardHostValve.java:179) at org.apache.catalina.valves.ValveBase.event(ValveBase.java:200) at org.apache.catalina.core.StandardEngineValve.event(StandardEngineValve.java:128) at org.apache.catalina.connector.CoyoteAdapter.event(CoyoteAdapter.java:198) at org.apache.coyote.http11.Http11NioProcessor.event(Http11NioProcessor.java:750) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.event(Http11NioProtocol.java:653) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:2081) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) at java.lang.Thread.run(Thread.java:637)</description>
    <commit commitTime="2009-03-26 03:40:00" id="08f7a5f"/>
    <fixedFiles>
      <file>java/org/apache/catalina/valves/CometConnectionManagerValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="46822" reportTime="2009-03-08 22:56:01">
    <summary>Avoid redundant instantiations in StandardContext</summary>
    <description/>
    <commit commitTime="2009-03-26 20:20:00" id="b10d9da"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="41606" reportTime="2007-02-13 20:46:54">
    <summary>The jspInit method is called twice.</summary>
    <description>The problem is: The jspInit method is called twice. The definition is: -The JSP background compilations are enable. (In default web.xml, define checkInterval and define development false.) -Define the JSP with &lt;servlet&gt; and &lt;load-on-startup&gt; tag in web.xml. The proposing: org/apache/jasper/compiler/Compiler.java ---- public void compile(boolean compileClass, boolean jspcMode) throws FileNotFoundException, JasperException, Exception { .... if( compileClass ) { File targetFile = new File(ctxt.getClassFileName()); if (targetFile.exists()) { long targetLastModified = targetFile.lastModified(); if (jsw != null) { jsw.setServletClassLastModifiedTime(targetLastModified); } } } }// last of the method. ---- Regards, Yuichiro</description>
    <commit commitTime="2009-03-27 18:33:20" id="f36a2c4"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Compiler.java</file>
    </fixedFiles>
  </bug>
  <bug id="46933" reportTime="2009-03-27 15:34:14">
    <summary>Using Java 1.5 in StringManager</summary>
    <description/>
    <commit commitTime="2009-04-08 19:26:40" id="23c47da"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/res/StringManager.java</file>
      <file>test/org/apache/tomcat/util/res/TestStringManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="46958" reportTime="2009-04-02 16:55:36">
    <summary>manager XML interface hard-coded path in XSL transformation</summary>
    <description/>
    <commit commitTime="2009-04-08 19:26:40" id="a9a58fb"/>
    <fixedFiles>
      <file>java/org/apache/catalina/manager/Constants.java</file>
    </fixedFiles>
  </bug>
  <bug id="46982" reportTime="2009-04-07 07:32:55">
    <summary>AccessLogValve reports correct time but incorrect offset following Spring DST transition.</summary>
    <description>This is a problem with AccessLogValve for tc5.5 as well as tc6.0 on all platforms. With the system clock on my linux machine (Ubuntu in my case) to just before the US time change on March 8, I started Tomcat 5.5 and see the following messages in my Tomcat access log after accessing Tomcat JSP example pages at the time of DST transition: -: - [08/Mar/2009:01:56:20 -0700] GET /jsp-examples/jsp2/simpletag/book.jsp HTTP/1.1 200 1738 1 - {http-8080-Processor24} -: - [08/Mar/2009:03:01:22 -0700] GET /jsp-examples/jsp2/tagfiles/hello.jsp HTTP/1.1 200 2213 68 - {http-8080-Processor25} Note the offset of "-0700" both before and after DST transition. Following a Tomcat restart the offset is correct: -: - [08/Mar/2009:03:19:42 -0600] GET /jsp-examples/jsp2/jspx/basic.jspx HTTP/1.1 200 1919 780 - {http-8080-Processor25} -: - [08/Mar/2009:03:19:59 -0600] GET /jsp-examples/jsp2/jspx/svgexample.html HTTP/1.1 200 2239 4 - {http-8080-Processor25} -: - [08/Mar/2009:03:19:59 -0600] GET /jsp-examples/jsp2/jspx/textRotate.jpg HTTP/1.1 200 26729 3 - {http-8080-Processor25} BTW, I ran the tzupdater before my tests: linwin01-512&gt; java -jar tzupdater.jar -V tzupdater version 1.3.12-b01 JRE time zone data version: tzdata2009a Embedded time zone data version: tzdata2009a The problem is in the org.apache.catalina.valves.AccessLogValve which contains the following in its start method: // Initialize the timeZone, Date formatters, and currentDate timezone = TimeZone.getDefault(); timeZoneNoDST = calculateTimeZoneOffset(timezone.getRawOffset()); Calendar calendar = Calendar.getInstance(timezone); int offset = calendar.get(Calendar.DST_OFFSET); timeZoneDST = calculateTimeZoneOffset(timezone.getRawOffset()+offset); Based on what Ive seen, int offset = calendar.get(Calendar.DST_OFFSET); returns 0 when the current time is not in Daylight savings time and (for my timezone) 3600000 (60 * 60 * 1000) when the current time is in Daylight Savings. It looks like the code assumes this is always the offset for Daylight Savings for the current timezone. I have no idea if there are some locations/timezones where Daylight Savings Time does not have a 1 hour offset. Because of this, if in a non-DST time period, timeZoneDST and timeZoneNoDST are set to the same value. If in a DST time period, I believe they are set correctly so that the transition in Autumn works correctly. I think the only problem is when moving ahead in Springtime (unless the software has been running for 6 months or so which caused the offset to be set correctly).</description>
    <commit commitTime="2009-04-08 19:26:40" id="360f8eb"/>
    <fixedFiles>
      <file>java/org/apache/catalina/valves/AccessLogValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="46967" reportTime="2009-04-03 18:57:28">
    <summary>ManagerBase.setRandomFile error handling fix</summary>
    <description>On some platforms (z/OS for sure), the device file /dev/urandom can pass the "f.exists()" test, but throws an IOException of some kind when trying to open it. The current code in ManagerBase.setRandomFile() doesn't handle this, which results in EVERY call to getRandom() to try again and log the error "Failed to close randomIS". The following changes to the method will add proper error handling to correct this (my changes marked "// kjw") public void setRandomFile( String s ) { // as a hack, you can use a static file - and genarate the same // session ids ( good for strange debugging ) if (Globals.IS_SECURITY_ENABLED){ randomIS = (DataInputStream)AccessController.doPrivileged(new PrivilegedSetRandomFile()); } else { try{ devRandomSource=s; File f=new File( devRandomSource ); if( ! f.exists() ) return; randomIS= new DataInputStream( new FileInputStream(f)); randomIS.readLong(); if( log.isDebugEnabled() ) log.debug( "Opening " + devRandomSource ); } catch( IOException ex ) { log.debug("Error reading " + devRandomSource, ex); //kjw if (randomIS != null) { // kjw: if opened try { randomIS.close(); } catch (Exception e) { log.warn("Failed to close randomIS."); } } // kjw devRandomSource = null; // kjw: don't try again automatically randomIS=null; } } }</description>
    <commit commitTime="2009-04-08 22:13:20" id="243aa86"/>
    <fixedFiles>
      <file>java/org/apache/catalina/session/ManagerBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="46988" reportTime="2009-04-07 17:18:48">
    <summary>JMXAccessorTask String constants should be final</summary>
    <description/>
    <commit commitTime="2009-04-08 22:13:20" id="81ebe8f"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ant/jmx/JMXAccessorTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="46990" reportTime="2009-04-07 18:52:10">
    <summary>Synchronize target can be changed midway</summary>
    <description/>
    <commit commitTime="2009-04-09 01:00:00" id="f1fd999"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
      <file>java/org/apache/catalina/core/StandardHost.java</file>
      <file>java/org/apache/catalina/tribes/membership/Membership.java</file>
      <file>java/org/apache/catalina/util/InstanceSupport.java</file>
      <file>java/org/apache/catalina/util/LifecycleSupport.java</file>
    </fixedFiles>
  </bug>
  <bug id="46997" reportTime="2009-04-08 11:30:59">
    <summary>small fix to TaskQueue</summary>
    <description/>
    <commit commitTime="2009-04-09 17:40:00" id="4e1c4b2"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/threads/TaskQueue.java</file>
    </fixedFiles>
  </bug>
  <bug id="46998" reportTime="2009-04-08 11:35:20">
    <summary>small fix to TaskThreadFactory</summary>
    <description/>
    <commit commitTime="2009-04-09 17:40:00" id="0c48c98"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/threads/TaskThreadFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="46562" reportTime="2009-01-19 08:17:14">
    <summary>Reader not closed</summary>
    <description>SHTML files are locked when using windows. Closing the reader solves the problem.</description>
    <commit commitTime="2009-04-09 20:26:40" id="6ecc35d"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ssi/SSIServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="46909" reportTime="2009-03-25 03:07:44">
    <summary>&lt;jsp:plugin&gt; error</summary>
    <description>&lt;jsp:plugin type="applet"&gt; generates type="application/x-java-applet;" instead of type = "application/x-java-applet". Firefox with Java-plugin cannot display Java applets because ";" is added.</description>
    <commit commitTime="2009-04-09 20:26:40" id="80b90ee"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Generator.java</file>
    </fixedFiles>
  </bug>
  <bug id="46961" reportTime="2009-04-03 07:15:39">
    <summary>org.apache.catalina.loader.WebappClassLoader throws exception related to Java 6 Bug 6434149</summary>
    <description/>
    <commit commitTime="2009-04-09 20:26:40" id="f109fb9"/>
    <fixedFiles>
      <file>java/org/apache/catalina/loader/WebappClassLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="46354" reportTime="2008-12-05 09:01:51">
    <summary>LIMIT_BUFFER setting causes arraycopy errors</summary>
    <description/>
    <commit commitTime="2009-04-09 23:13:20" id="78a994a"/>
    <fixedFiles>
      <file>java/org/apache/jasper/runtime/BodyContentImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="42579" reportTime="2007-06-04 14:13:14">
    <summary>[Patch] JNDIRealm fails to parse absolute names</summary>
    <description>Active Directory can respond to a query with SearchResult's that are not relative. We discovered this happening with a directory hosted across many servers when the userBase was not sufficient to identify a single server. In getUserBySearch, JNDIRealm assumes that the SearchResult is relative and goes about creating a DN for the user by appending together the various bits of names it gets back. This is definitely wrong for absolute names which are URL's of the form: ldap://server/encoded_user_dn I discovered this issue in Tomcat 5.5 and a cursory look at the SVN repo for Tomcat 6.0 reveals that this bug is also present there. I have a patch for this issue which I will attach.</description>
    <commit commitTime="2009-04-09 23:13:20" id="90e8d0d"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/JNDIRealm.java</file>
    </fixedFiles>
  </bug>
  <bug id="46984" reportTime="2009-04-07 07:44:46">
    <summary>Server incorrectly reports a 501 error on bad method name. Should report 400 error.</summary>
    <description/>
    <commit commitTime="2009-04-09 23:13:20" id="42a093b"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/Http11AprProcessor.java</file>
      <file>java/org/apache/coyote/http11/Http11NioProcessor.java</file>
      <file>java/org/apache/coyote/http11/Http11Processor.java</file>
      <file>java/org/apache/coyote/http11/InternalAprInputBuffer.java</file>
      <file>java/org/apache/coyote/http11/InternalInputBuffer.java</file>
      <file>java/org/apache/coyote/http11/InternalNioInputBuffer.java</file>
    </fixedFiles>
  </bug>
  <bug id="47013" reportTime="2009-04-10 09:26:22">
    <summary>JSP not compiled at startup when used as a servlet</summary>
    <description/>
    <commit commitTime="2009-04-15 07:00:00" id="c8cbc28"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/Constants.java</file>
      <file>java/org/apache/catalina/core/StandardWrapper.java</file>
    </fixedFiles>
  </bug>
  <bug id="37929" reportTime="2005-12-16 01:58:15">
    <summary>invalidated session causes pageContext methods to fail</summary>
    <description>javax.servlet.http.HttpSession methods such as getAttribute(), getValue(), getAttributeNames(), getValueNames(), etc, throw an IllegalStateException if called on a session that has been invalidated. So, with the following code in a JSP page: &lt;% session.invalidate(); Object obj = pageContext.findAttribute("foo"); %&gt; An IllegalStateException is thrown because pageContext.findAttribute() eventually calls session.getAttribute() on a session that has been invalidated. The session that has been invalidated should simply be ignored when a method needs to process the various scopes (page, request, session, application). This impacts the following methods in PageContextImpl: public int getAttributesScope(final String name) which calls -&gt; private int doGetAttributeScope(String name); public Object findAttribute(final String name) which calls -&gt; private Object doFindAttribute(String name); public void removeAttribute(final String name) which calls -&gt; private void doRemoveAttribute(String name); The fix is to catch IllegalStateException and ignore it when processing the attribute in session scope. The code then simply follows through to process application scope. No need to worry about setAttribute() because it is always invoked on a specific scope, and the spec already states that java.lang.IllegalStateException must be thrown when called on an invalidated session. pageContext.setAttribute("foo", "value of foo", PageContext.SESSION_SCOPE); java.lang.IllegalStateException - if the scope is PageContext.SESSION_SCOPE but the page that was requested does not participate in a session or the session has been invalidated. --------------------------------------------------------------------------- At the same time, a fix should be done to method "doRemoveAttribute(String name)" where a try/catch block for Exception appears unnecessary. private void doRemoveAttribute(String name){ try { removeAttribute(name, PAGE_SCOPE); removeAttribute(name, REQUEST_SCOPE); if( session != null ) { try { removeAttribute(name, SESSION_SCOPE); } catch (IllegalStateException ex) { // Session has been invalidated. // Ignore and fall through to application scope. } } removeAttribute(name, APPLICATION_SCOPE); } catch (Exception ex) { // we remove as much as we can, and // simply ignore possible exceptions } } Here is a full analysis: Starting with 'removeAttribute(final String name)' - we check for null and throw NPE if necessary - we call doRemoveAttribute(name) doRemoveAttribute(name) - we call removeAttribute(name, scope) for each scope removeAttribute(final String name, final int scope) - this calls doRemoveAttribute(name, scope) doRemoveAttribute(name, scope) - page scope: attributes.remove -&gt; won't throw an Exception - request scope: request.removeAttribute -&gt; no documented Exception thrown - session scope: throws IllegalStateException if session is null - app scope: context.removeAttribute -&gt; no documented Exception thrown A null value for name is already checked in removeAttribute(final String name) and we throw NPE. So this situation (removing an attr from page or request scope throwing an NPE) won't happen. In doRemoveAttribute(name), we already check on session != null before calling removeAttribute(name, SESSION_SCOPE). So there normally is no IllegalStateException thrown (except for the invalidated case). When removing an attribute from application (i.e., ServletContext) scope, any registered listeners will be notified, but the code that does that (see appserv-webtier/src/java/org/apache/catalina/core/ApplicationContext. removeAttribute()) already catches any Throwable that a listener may throw. The try/catch block is therefore unnecessary. Moreover, if any of the removal actions from the different scopes could have thrown an exception, each of them would have needed to be wrapped inside their own try/catch, so as to ensure that an exception in one scope does not cause any of the subsequent removals to be bypassed. doRemoveAttribute(String name) has therefore been modified as follows: private void doRemoveAttribute(String name){ removeAttribute(name, PAGE_SCOPE); removeAttribute(name, REQUEST_SCOPE); if( session != null ) { try { removeAttribute(name, SESSION_SCOPE); } catch (IllegalStateException ex) { // Session has been invalidated. // Ignore and fall through to application scope. } } removeAttribute(name, APPLICATION_SCOPE); } -------------------------- Changes done on glassfish. ymmv on jasper for the diffs. --- PageContextImpl.java 9 Dec 2005 18:54:30 -0000 1.7 +++ PageContextImpl.java 16 Dec 2005 00:11:21 -0000 1.8 @@ -452,8 +452,13 @@ return REQUEST_SCOPE; if (session != null) { + try { if (session.getAttribute(name) != null) return SESSION_SCOPE; + } catch (IllegalStateException ex) { + // Session has been invalidated. + // Ignore and fall through to application scope. + } } if (context.getAttribute(name) != null) @@ -495,9 +500,14 @@ return o; if (session != null) { + try { o = session.getAttribute(name); - if (o != null) - return o; + } catch (IllegalStateException ex) { + // Session has been invalidated. + // Ignore and fall through to application scope. + } + + if (o != null) return o; } return context.getAttribute(name); @@ -559,19 +569,18 @@ } } - private void doRemoveAttribute(String name){ - try { removeAttribute(name, PAGE_SCOPE); removeAttribute(name, REQUEST_SCOPE); if( session != null ) { + try { removeAttribute(name, SESSION_SCOPE); + } catch (IllegalStateException ex) { + // Session has been invalidated. + // Ignore and fall through to application scope. } - removeAttribute(name, APPLICATION_SCOPE); - } catch (Exception ex) { - // we remove as much as we can, and - // simply ignore possible exceptions } + removeAttribute(name, APPLICATION_SCOPE); } public JspWriter getOut() {</description>
    <commit commitTime="2009-04-17 00:40:00" id="04cacaf"/>
    <fixedFiles>
      <file>java/org/apache/jasper/runtime/PageContextImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="46925" reportTime="2009-03-27 03:58:28">
    <summary>Nested groups in JNDI realm with non-recursive implementation</summary>
    <description/>
    <commit commitTime="2009-04-28 03:20:00" id="d04dd88"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/JNDIRealm.java</file>
    </fixedFiles>
  </bug>
  <bug id="47050" reportTime="2009-04-19 01:59:15">
    <summary>StandardHostValve.status unnecessarily HTML-escapes the error message</summary>
    <description/>
    <commit commitTime="2009-05-01 23:00:00" id="1ad0501"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardHostValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="47111" reportTime="2009-04-28 08:54:49">
    <summary>do caching the resources like the docu say it (StringManager)</summary>
    <description/>
    <commit commitTime="2009-05-03 08:20:00" id="96167ed"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/res/StringManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="47234" reportTime="2009-05-21 07:32:52">
    <summary>serviceStartTime is different in MemberImpl from McastServiceImpl</summary>
    <description>Hi, I'm using the tribes cluster module in my own application (which has nothing to do with tomcat) and I'm using the member alive time value to sort all the cluster members. This bug produces the following: I have 2 nodes that were started almost at the same time and both nodes claim that the other node was started before them NODE1: Remote members: (-52.63.57.110:4001 ready=true suspect=false failing=false aliveTime=1526) Local member: (-52.63.57.109:4000 ready=true suspect=false failing=false aliveTime=1236) NODE2: Remote members: (-52.63.57.109:4000 ready=true suspect=false failing=false aliveTime=2021) Local member: (-52.63.57.110:4001 ready=true suspect=false failing=false aliveTime=1069) My code do the following: Member[] members = groupChannel.getMembers(); printRemote(members); Member localMember = groupChannel.getLocalMember(true); printLocal(localMember); In that code (due to timing issues) it should possible the other way around (that every node claim to be started before the other) but not that case. The issue occurs because when the McastService is started, it assigns a start time to the local member. public class McastService .... { public void start(int level) { .... localMember.setServiceStartTime(System.currentTimeMillis()); .... impl = new McastServiceImpl(localMember, ....); impl.start(level); } } But, then it creates and starts a McastServiceImpl which also stores a new serviceStartTime :-( public class McastServiceImpl { protected long serviceStartTime; public void start(int level) { .... serviceStartTime = System.currentTimeMillis(); .... } } So, we have 2 different start times. Unfortunately both times are used: To get the local member, the impl.getServiceStartTime() is used: public class McastService .... { public Member getLocalMember(boolean alive) { if ( alive &amp;&amp; localMember != null &amp;&amp; impl != null) localMember.setMemberAliveTime(System.currentTimeMillis()-impl.getServiceStartTime()); return localMember; } } But, when the member is transmited throw the network, the MemberImpl.getServiceStartTime() is used. public class MemberImpl .... { public byte[] getData(boolean getalive, boolean reset) { if ( reset ) dataPkg = null; //look in cache first if ( dataPkg!=null ) { if ( getalive ) { //you'd be surprised, but System.currentTimeMillis //shows up on the profiler long alive=System.currentTimeMillis()-getServiceStartTime(); XByteBuffer.toBytes( (long) alive, dataPkg, TRIBES_MBR_BEGIN.length+4); } return dataPkg; } ...... } That produces that weird behaviour. IMHO, the fix should be setting the same "serviceStartTime" to both components. This issue is affecting seriously my code. I would appreciate if you could fix it asap. I've verified that the same code is present in trunk repository. Regards, Ariel</description>
    <commit commitTime="2009-05-22 02:20:00" id="9fa7640"/>
    <fixedFiles>
      <file>java/org/apache/catalina/tribes/membership/McastServiceImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="47216" reportTime="2009-05-18 18:13:50">
    <summary>Possible NPE in Http11Processor.action()</summary>
    <description>The code at around line 1075: } else if (actionCode == ActionCode.ACTION_REQ_LOCAL_ADDR_ATTRIBUTE) { if (localAddr == null) localAddr = socket.getLocalAddress().getHostAddress(); fails to check if "socket != null". Since this is checked everywhere else in the method this is probably a bug. The method Http11Processor.parseHost() also references "socket" without checking for null. Within the class, it is only called by process(Socket), which guarantees that it won't be null. However once process() returns normally, socket will be set to null. The parseHost() method is public, so it may be called when socket == null. Perhaps the parseHost() method should be private?</description>
    <commit commitTime="2009-05-25 19:13:20" id="36feee0"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/Http11Processor.java</file>
    </fixedFiles>
  </bug>
  <bug id="47158" reportTime="2009-05-05 15:12:45">
    <summary>I think AccessLogValve has race condition problem</summary>
    <description/>
    <commit commitTime="2009-06-04 23:40:00" id="f00029e"/>
    <fixedFiles>
      <file>java/org/apache/catalina/valves/AccessLogValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="47299" reportTime="2009-06-02 07:19:36">
    <summary>Cannot override StandardContext in embedding case because of StandardSession.fireContainerEvent</summary>
    <description>StandardSession.fireContainerEvent checks for the String class name! Why not just use an instanceof check here?</description>
    <commit commitTime="2009-06-06 06:13:20" id="468f370"/>
    <fixedFiles>
      <file>java/org/apache/catalina/session/StandardSession.java</file>
    </fixedFiles>
  </bug>
  <bug id="47343" reportTime="2009-06-10 03:54:19">
    <summary>Fails re-deploying, when we update context.xml.</summary>
    <description/>
    <commit commitTime="2009-06-11 22:20:00" id="cc1f0dd"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/HostConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="47369" reportTime="2009-06-15 03:34:59">
    <summary>DeltaRequest is never reset. (use BackupManager)</summary>
    <description/>
    <commit commitTime="2009-06-16 02:20:00" id="b3e2be4"/>
    <fixedFiles>
      <file>java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java</file>
    </fixedFiles>
  </bug>
  <bug id="47308" reportTime="2009-06-03 03:39:06">
    <summary>Cannot join in the cluster membership.</summary>
    <description/>
    <commit commitTime="2009-06-18 23:46:40" id="51fd68b"/>
    <fixedFiles>
      <file>java/org/apache/catalina/tribes/membership/McastService.java</file>
      <file>java/org/apache/catalina/tribes/membership/McastServiceImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="47389" reportTime="2009-06-18 03:39:55">
    <summary>DeltaManager doesn't do the session replication. (notifySessionListenersOnReplication=false)</summary>
    <description/>
    <commit commitTime="2009-06-18 23:46:40" id="c768090"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/session/DeltaManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="38352" reportTime="2006-01-22 20:27:46">
    <summary>Additional Entries for Default catalina.policy file.</summary>
    <description>This patch adds additional entries to the catalina.policy file. Specifically: The catalina.base/shared directory is added and given equal permissions to catalina.home/common java.io.tmpdir is now readable. javax.servlet.context.tempdir is now readable. I think to be compliant with the spec, this must be allowed. Directory specified by java.io.tmpdir (which is what tomcat points javax.servlet.context.tempdir to) is now read, write, delete. Again, I think the spec requires this.</description>
    <commit commitTime="2009-06-19 22:00:00" id="76a4eb3"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/JspRuntimeContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="37984" reportTime="2005-12-21 05:51:20">
    <summary>JNDIRealm.java not able to handle MD5 password</summary>
    <description>I'm using JNDIRealm to authenticate to OpenLDAP 2.2.28. Within OpenLDAP I've configured the userPassword attribute for each user to contain the MD5 digest, and each is prefixed with the string "{MD5}". I am not an LDAP expert by any means but I believe this prefix is a standard convention. Anyway assuming this is a convention then JNDIRealm needs to strip off the "{MD5}" portion much like it does with "{SHA1}". See attached patch which accomplishes this and I verified it works in my environment.</description>
    <commit commitTime="2009-07-02 07:13:20" id="c6818a0"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/JNDIRealm.java</file>
    </fixedFiles>
  </bug>
  <bug id="37933" reportTime="2005-12-16 07:00:20">
    <summary>Bugs in Tomcat</summary>
    <description/>
    <commit commitTime="2009-07-05 18:33:20" id="202a33e"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Generator.java</file>
      <file>java/org/apache/jasper/compiler/PageInfo.java</file>
    </fixedFiles>
  </bug>
  <bug id="47478" reportTime="2009-07-06 03:05:17">
    <summary>DeltaSession ignores notifyListenersOnReplication when BackupManager is used.</summary>
    <description/>
    <commit commitTime="2009-07-07 01:06:40" id="c1099f7"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/session/DeltaSession.java</file>
    </fixedFiles>
  </bug>
  <bug id="39231" reportTime="2006-04-06 21:19:49">
    <summary>The JAAS contract for LoginModule is broken</summary>
    <description>The issue is that the custom JAAS's LoginModule.logout() method is never called. I guess this has been never implemented correctly (at least since Tomcat 5.5.9). The thing is that according to the JAAS spec, the LoginContext.logout() is supposed to invoke the logout method for each LoginModule configured for this LoginContext. So, somebody should be sure to call LoginContext.logout() method. The caller for this method could be either a server or a client. So, either Tomcat should provide some means to access the LoginContext to the clients, or Tomcat should take the responsibility to call this method by itself. I guess the solution could be for Tomcat to associate the instance of LoginContext with the user's session, and then Tomcat could invoke LoginContext.logout() when the session is being invalidated (both when the session times out or invalidated explicitely). I hope that I am correctly interpreting the JAAS spec.</description>
    <commit commitTime="2009-07-07 23:20:00" id="80f8ec6"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/GenericPrincipal.java</file>
      <file>java/org/apache/catalina/realm/JAASRealm.java</file>
      <file>java/org/apache/catalina/session/StandardSession.java</file>
    </fixedFiles>
  </bug>
  <bug id="47524" reportTime="2009-07-14 06:20:02">
    <summary>McastServiceImpl executor is not dispatching events.</summary>
    <description/>
    <commit commitTime="2009-07-14 22:00:00" id="aa8a2d3"/>
    <fixedFiles>
      <file>java/org/apache/catalina/tribes/membership/McastServiceImpl.java</file>
      <file>java/org/apache/catalina/tribes/transport/ReceiverBase.java</file>
      <file>java/org/apache/catalina/tribes/util/ExecutorFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="40380" reportTime="2006-08-31 18:57:30">
    <summary>Potential syncro problem in StandardSession.expire(boolean)</summary>
    <description>public void expire(boolean notify) { // Mark this session as "being expired" if needed if (expiring) return; // No man's land here synchronized (this) { if (manager == null) return; expiring = true;</description>
    <commit commitTime="2009-07-15 00:46:40" id="6f3e56e"/>
    <fixedFiles>
      <file>java/org/apache/catalina/session/StandardSession.java</file>
    </fixedFiles>
  </bug>
  <bug id="47515" reportTime="2009-07-12 23:08:36">
    <summary>Tomcat can't replicate session when it is started.</summary>
    <description/>
    <commit commitTime="2009-07-16 21:13:20" id="83e98da"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/session/DeltaManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="40551" reportTime="2006-09-20 01:33:41">
    <summary>Sticky sessions using PersistentManager enter indeterminate state on node failover</summary>
    <description>If a cluster of nodes is being load balanced with sticky sessions, and a particular node becomes unavailable, any sessions bound to that node must be redistributed. Particularly in the case of mod_jk these sessions will not be bound to whichever node the failover occurred on because the jessionid will still contain the JVM route of the original failed node, thus placing the session in an indeterminate state and losing sticky properties. I am attaching a patch that will trigger a session to rebind itself to a new node if the jvmroutes don't match and replace the jessionid in the browser's cookie.</description>
    <commit commitTime="2009-07-17 02:46:40" id="f0d447d"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/session/JvmRouteBinderValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="41059" reportTime="2006-11-28 11:53:02">
    <summary>WebAppClassLoader clearReferences code break running threads</summary>
    <description>When the WebAppClassLoader stops it manually sets all static and final variables to null in the clearReferences method. This results in NPEs for any thread that was not stopped and not expecting its final or static variables to be null. This is particularly a problem with hot deploys since the unload fails and terminating the deploy.</description>
    <commit commitTime="2009-07-18 01:00:00" id="a9f0239"/>
    <fixedFiles>
      <file>java/org/apache/catalina/loader/WebappClassLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="47518" reportTime="2009-07-13 06:40:01">
    <summary>Valve Interface Javadocs for invoke method references non-existent method</summary>
    <description>It appears that the Valve interface javadoc hasn't been updated since around TC 5.5. Here is a snip of what it currently available from TC's website (6.0.20 I would guess): " # If the corresponding Response was not generated (and control was not returned, call the next Valve in the pipeline (if there is one) by executing context.invokeNext(). . . . # Modify the HTTP headers included with the Response after the invokeNext() method has returned. # Perform any actions on the output stream associated with the specified Response after the invokeNext() method has returned. " The invokeNext method has not existed in the Valve interface in many versions. I believe the replacement is: this.getNext().invoke(request, response) I'm happy to provide a doc patch if getNext().invoke(request, response) is the expected replacement for invokeNext(request, response). Note that the docs for 5.5 also have the same problem. Please let me know if I should log that separately.</description>
    <commit commitTime="2009-07-21 15:06:40" id="9dc93f5"/>
    <fixedFiles>
      <file>java/org/apache/catalina/Valve.java</file>
    </fixedFiles>
  </bug>
  <bug id="46907" reportTime="2009-03-24 15:20:17">
    <summary>Jasper with log4j in web-app classpath and debug level enabled prevents reading HTTP POST stream from JSP</summary>
    <description>This is on Tomcat 5.5.x (don't remember the last rev. number, not my current machine). When log4j is in the classpath of the web-app and is configured to log at debug level, Jasper dumps the whole HTTP POST request body as debug traces. This consumes the HttpServletRequest input stream which then arrives unusable for the user at the beginning of the JSP code (using HttpServletRequest.getInputStream(), the stream is already at its end). A workaround is to disable debug traces for Japser class in log4j.properties, but Jasper should not consume the HttpServletRequest input stream whatever mode it runs into.</description>
    <commit commitTime="2009-07-24 01:26:40" id="50d0e6e"/>
    <fixedFiles>
      <file>java/org/apache/jasper/servlet/JspServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="41824" reportTime="2007-03-12 10:40:25">
    <summary>Unable to use nested type in TLD</summary>
    <description/>
    <commit commitTime="2009-07-25 02:26:40" id="768af9f"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/JspUtil.java</file>
    </fixedFiles>
  </bug>
  <bug id="47568" reportTime="2009-07-23 12:56:58">
    <summary>TestTomcat fails to delete work directory</summary>
    <description>TestTomcat.setUp() creates a work directory, but does not delete it in tearDown()</description>
    <commit commitTime="2009-07-30 15:46:40" id="cfb18a0"/>
    <fixedFiles>
      <file>test/org/apache/catalina/startup/TestTomcat.java</file>
    </fixedFiles>
  </bug>
  <bug id="47569" reportTime="2009-07-23 13:08:38">
    <summary>Test cases do not clear up afterwards</summary>
    <description>Some of the test cases (e.g. TestTomcat) start a Tomcat server, This creates the directory tree tomcat.8080/work... which is not deleted when the test finishes.</description>
    <commit commitTime="2009-07-31 02:53:20" id="a9e00d5"/>
    <fixedFiles>
      <file>test/org/apache/catalina/connector/TestRequest.java</file>
      <file>test/org/apache/catalina/startup/TestTomcat.java</file>
    </fixedFiles>
  </bug>
  <bug id="47705" reportTime="2009-08-19 00:12:52">
    <summary>ArithmeticException: / by zero when expiring sessions via manager</summary>
    <description>Received ArithmeticException: / by zero when expiring sessions via Tomcat manager webapp. This exception was thrown only if session-timeout is set as -1 on webapp web.xml. Moreover, the exception was also thrown regardless of the idle parameter value (/expire?path=/xxx&amp;idle=mm) as long as session-timeout = -1. Result: Exception stacktrace: ERROR: 19/08/2009 00:18:22 [http-80-exec-33] (org.apache.catalina.core.ApplicationContext:669) HTMLManager: ManagerServlet.sessions[/contextpath] java.lang.ArithmeticException: / by zero at org.apache.catalina.manager.ManagerServlet.sessions(ManagerServlet.java:1133) at org.apache.catalina.manager.HTMLManagerServlet.sessions(HTMLManagerServlet.java:573) at org.apache.catalina.manager.HTMLManagerServlet.expireSessions(HTMLManagerServlet.java:660) at org.apache.catalina.manager.HTMLManagerServlet.doGet(HTMLManagerServlet.java:118) at org.apache.catalina.manager.HTMLManagerServlet.doPost(HTMLManagerServlet.java:157) at javax.servlet.http.HttpServlet.service(HttpServlet.java:637) at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:525) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286) at org.apache.coyote.http11.Http11NioProcessor.process(Http11NioProcessor.java:880) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:719) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:2081) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)</description>
    <commit commitTime="2009-08-31 22:46:40" id="6ab874a"/>
    <fixedFiles>
      <file>java/org/apache/catalina/manager/ManagerServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="47826" reportTime="2009-09-11 17:39:34">
    <summary>a logging statement error in org.apache.catalina.startup.Bootstrap.java</summary>
    <description>// Local repository boolean replace = false; String before = repository; while ((i=repository.indexOf(CATALINA_HOME_TOKEN))&gt;=0) { replace=true; if (i&gt;0) { repository = repository.substring(0,i) + getCatalinaHome() + repository.substring(i+CATALINA_HOME_TOKEN.length()); } else { repository = getCatalinaHome() + repository.substring(CATALINA_HOME_TOKEN.length()); } } while ((i=repository.indexOf(CATALINA_BASE_TOKEN))&gt;=0) { replace=true; if (i&gt;0) { repository = repository.substring(0,i) + getCatalinaBase() + repository.substring(i+CATALINA_BASE_TOKEN.length()); } else { repository = getCatalinaBase() + repository.substring(CATALINA_BASE_TOKEN.length()); } } if (replace &amp;&amp; log.isDebugEnabled()) log.debug("Expanded " + before + " to " + replace); The last line should be: "log.debug("Expanded " + before + " to " + repository);"</description>
    <commit commitTime="2009-09-12 23:40:00" id="720de5e"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/Bootstrap.java</file>
    </fixedFiles>
  </bug>
  <bug id="47820" reportTime="2009-09-11 02:09:00">
    <summary>Static utility methods in Tomcat should be instance methods</summary>
    <description>Why are the static addServlet() methods in Tomcat static? I can see they don't use any state from the instance, but isn't it cleaner to use an instance method, so that the API is uniform (everything I want to do to a tomcat instance goes through the instance)? It would be more consistent to follow the pattern of addServlet(String,String,String), and search for the context by name instead of requiring the instance to be passed in to a static method.</description>
    <commit commitTime="2009-09-15 18:20:00" id="6cce550"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/Tomcat.java</file>
    </fixedFiles>
  </bug>
  <bug id="47828" reportTime="2009-09-12 00:37:54">
    <summary>Change Tomcat.setSilent() to setSilent(boolean)</summary>
    <description>Change Tomcat.setSilent() to setSilent(boolean). It's nicer for clients to have a JavaBean type setter, and it doesn't seem to make sense that you can set something but not unset it.</description>
    <commit commitTime="2009-09-15 18:20:00" id="59e88f1"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/Tomcat.java</file>
    </fixedFiles>
  </bug>
  <bug id="46950" reportTime="2009-04-01 06:33:02">
    <summary>SSL renegotiation does not occur when resource with CLIENT-CERT auth is requested</summary>
    <description>When a part of a webapp requires an SSL connection with a client certificate there should be an SSL renegotiation to request a client certificate from the browser. This is the configuration I added to an webapp that already uses an SSL connector: &lt;login-config id="LoginConfig_1"&gt; &lt;auth-method&gt;CLIENT-CERT&lt;/auth-method&gt; &lt;realm-name&gt;WPS&lt;/realm-name&gt; &lt;/login-config&gt; &lt;security-constraint id="SecurityConstraint_1"&gt; &lt;web-resource-collection id="WebResourceCollection_1"&gt; &lt;web-resource-name/&gt; &lt;url-pattern&gt;/LoginWithCert.do&lt;/url-pattern&gt; &lt;http-method&gt;DELETE&lt;/http-method&gt; &lt;http-method&gt;GET&lt;/http-method&gt; &lt;http-method&gt;POST&lt;/http-method&gt; &lt;http-method&gt;PUT&lt;/http-method&gt; &lt;http-method&gt;HEAD&lt;/http-method&gt; &lt;/web-resource-collection&gt; &lt;user-data-constraint id="UserDataConstraint_4"&gt; &lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt; &lt;/user-data-constraint&gt; &lt;/security-constraint&gt; Requests to /LoginWithCert.do require an SSL connection, if there isn't one, but no client certificate is requested.</description>
    <commit commitTime="2009-09-16 02:40:00" id="e9248d7"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/AprLifecycleListener.java</file>
      <file>java/org/apache/coyote/http11/Http11AprProcessor.java</file>
      <file>java/org/apache/tomcat/jni/SSLSocket.java</file>
    </fixedFiles>
  </bug>
  <bug id="47161" reportTime="2009-05-06 07:20:31">
    <summary>Manager ignores executors on status pages</summary>
    <description>When displaying the thread pools, the StatusManagerServlet ignores executors and uses the 'standard' ThreadPool information for each connector. This causes incorrect information to be displayed when a connector is configured to use an executor. On a related topic, it appears that the connector&lt;-&gt;executor link is not exposed via JMX (which it will need to be to fix this).</description>
    <commit commitTime="2009-09-16 05:26:40" id="aaf7b5d"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/net/AbstractEndpoint.java</file>
      <file>java/org/apache/tomcat/util/threads/ResizableExecutor.java</file>
    </fixedFiles>
  </bug>
  <bug id="47866" reportTime="2009-09-18 00:23:03">
    <summary>NullPointerException in embedded tomcat</summary>
    <description>It seems that the WebappClassLoader was stopped? {noformat} Caused by: java.lang.NullPointerException at org.apache.catalina.loader.WebappClassLoader.findResources(WebappClassLoader.java:994) at java.lang.ClassLoader.getResources(ClassLoader.java:1016) {noformat} All I did was launch a server add a context and then ask it to load a resource from its classpath. It's a bit more complicated than that, so I'll try and narrow it down if needed.</description>
    <commit commitTime="2009-09-21 18:46:40" id="189181a"/>
    <fixedFiles>
      <file>test/org/apache/catalina/startup/TestTomcat.java</file>
    </fixedFiles>
  </bug>
  <bug id="47499" reportTime="2009-07-08 22:05:03">
    <summary>provide better insight on BindException: Cannot assign requested address</summary>
    <description>1) cite the address you attempt to listen (not just the port) 2) proper exception chaining the following info is currently lost: &lt;&lt;java.net.BindException: Cannot assign requested address at java.net.PlainSocketImpl.socketBind(Native Method) at java.net.PlainSocketImpl.bind(PlainSocketImpl.java:359) at java.net.ServerSocket.bind(ServerSocket.java:319) at java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:185) at javax.net.ssl.SSLServerSocket.&lt;init&gt;(SSLServerSocket.java:106) at com.privasphere.net.ssl.SSLServerSocketImpl.&lt;init&gt;(SSLServerSocketImpl.java:106) at com.privasphere.net.ssl.SSLServerSocketFactoryImpl.createServerSocket(SSLServerSocketFactoryImpl.java:71) at org.apache.tomcat.util.net.jsse.JSSESocketFactory.createSocket(JSSESocketFactory.java:100) at org.apache.tomcat.util.net.PoolTcpEndpoint.initEndpoint(PoolTcpEndpoint.java:295) at org.apache.coyote.http11.Http11BaseProtocol.init(Http11BaseProtocol.java:139) at org.apache.catalina.connector.Connector.initialize(Connector.java:1017) at org.apache.catalina.core.StandardService.initialize(StandardService.java:578)&gt;&gt;</description>
    <commit commitTime="2009-09-23 04:06:40" id="73bb9e4"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/net/JIoEndpoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="47320" reportTime="2009-06-05 08:37:24">
    <summary>Decoding jsessionid bug on z/os</summary>
    <description>If you receive a rewritten URL on z/os with uss (unix on a mainframe), Tomcat does not properly decode the jsessionid portion of the URL. The problem is in org.apache.catalina.connector.CoyoteAdapter in the parseSessionId method. The two instantiations of a String object do not specify the encdoding to use. e.g. String sid = new String(uriBC.getBuffer(), start + sessionIdStart, semicolon2 - sessionIdStart); ...as well as the second String instantiation in this method. Consequently z/os uses its default encoding which (I think) is EBCDIC. If I recompile with a hardcoded "UTF-8" for the encoding then the jsessionid decodes properly. Not that I am suggesting this literally for the official fix. e.g. String sid = new String(uriBC.getBuffer(), start + sessionIdStart, semicolon2 - sessionIdStart, "UTF-8");</description>
    <commit commitTime="2009-09-28 00:46:40" id="0f99904"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/CoyoteAdapter.java</file>
    </fixedFiles>
  </bug>
  <bug id="40001" reportTime="2006-07-10 14:32:20">
    <summary>HTML pages should not use GET to restart web-apps.</summary>
    <description/>
    <commit commitTime="2009-10-11 05:26:40" id="99f01fd"/>
    <fixedFiles>
      <file>java/org/apache/catalina/manager/Constants.java</file>
      <file>java/org/apache/catalina/manager/HTMLManagerServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="48009" reportTime="2009-10-16 01:52:21">
    <summary>Editing context.xml may cause unwanted undeploy of a webapp</summary>
    <description>Tomcat polls context.xml files for changes. If a previously-existing context.xml is missing at the instant Tomcat polls, then the application is undeployed. Some text editors (notably vi and its derivatives) create backup files by: 1) Renaming the original file, then 2) creating a new file and writing the edited contents to that file. Therefore there is a race condition. There is a small but non-zero probability that a user editing and saving context.xml using such an editor will see their webapp undeployed. Messages on tomcat-users indicate that such a situation has occurred on a production server at least once. It's undoubtedly rare. Suggested fixes: - Examine the directory for the presence of backup files for context.xml, and do not undeploy if one is found even if context.xml is missing. This is horribly ugly and makes the semantics of "a backup file" very peculiar, but is actually the only way to *prevent* the race - anything else only makes it less likely, as on a heavily loaded system (or one where context.xml is being edited via a network file share) the interval between the old context.xml being renamed and the new one being created may be arbitrarily long. - Only undeploy if the file is missing for a period of time. The discussion is then around that period. On tomcat-users, Mark Thomas suggested polling again after 500ms; I suggested remembering the state between polls and only undeploying if the file was missing for two successive polls. This is a cleaner fix to explain, but is not a complete solution as it does not remove the possibility of such a race. --- As an aside, there may well be a similar issue where Tomcat polls for context.xml as it is being written, finds it has changed, and reads a part-written version. In mitigation, the files involved are typically small and may well be written in one or very few operations; however, Tomcat should probably not assume that any file change is atomic.</description>
    <commit commitTime="2009-10-22 05:20:00" id="d55f1d9"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/HostConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="48019" reportTime="2009-10-17 07:18:47">
    <summary>StackOverflowError on "include"</summary>
    <description>JSP file name: /common/headers.jsp It's cotent: &lt;% // example: &lt;%@ include file="/common/headers.jsp" % &gt; %&gt; &lt;meta http-equiv="Content-Type" content="text/html;charset=utf-8" /&gt; &lt;meta http-equiv="Cache-Control" content="no-store" /&gt; &lt;meta http-equiv="Pragma" content="no-cache" /&gt; &lt;meta http-equiv="Expires" content="0" /&gt; &lt;link href="../css/css.css" rel="stylesheet" type="text/css"&gt; Console output: java.lang.StackOverflowError at java.text.DateFormat.format(DateFormat.java:275) at java.text.Format.format(Format.java:140) at java.text.MessageFormat.subformat(MessageFormat.java:1288) at java.text.MessageFormat.format(MessageFormat.java:795) at java.util.logging.SimpleFormatter.format(SimpleFormatter.java:50) at java.util.logging.StreamHandler.publish(StreamHandler.java:179) at java.util.logging.ConsoleHandler.publish(ConsoleHandler.java:88) at java.util.logging.Logger.log(Logger.java:458) at java.util.logging.Logger.doLog(Logger.java:480) at java.util.logging.Logger.logp(Logger.java:680) at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:167) at org.apache.juli.logging.DirectJDKLog.error(DirectJDKLog.java:135) at org.apache.jasper.compiler.JspReader.pushFile(JspReader.java:606) at org.apache.jasper.compiler.JspReader.&lt;init&gt;(JspReader.java:141) at org.apache.jasper.compiler.JspReader.&lt;init&gt;(JspReader.java:119) at org.apache.jasper.compiler.ParserController.determineSyntaxAndEncoding(ParserController.java:399) at org.apache.jasper.compiler.ParserController.doParse(ParserController.java:207) at org.apache.jasper.compiler.ParserController.parse(ParserController.java:137) at org.apache.jasper.compiler.Parser.processIncludeDirective(Parser.java:339) at org.apache.jasper.compiler.Parser.parseIncludeDirective(Parser.java:376) at org.apache.jasper.compiler.Parser.parseDirective(Parser.java:484) at org.apache.jasper.compiler.Parser.parseTagFileDirectives(Parser.java:1784) at org.apache.jasper.compiler.Parser.parse(Parser.java:127) This not exist in "6.0.18".</description>
    <commit commitTime="2009-10-22 05:20:00" id="deac657"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Parser.java</file>
    </fixedFiles>
  </bug>
  <bug id="47364" reportTime="2009-06-12 13:44:21">
    <summary>HttpServletRequest.getAttributeNames() does not return the names of all attributes</summary>
    <description>In an email exchange that involved Ranier (see attachment), he suggested I log this in Bugzilla, so I am. I was using Tomcat 6.0.20 on Windows XP SP3 with the latest Java 6 JVM. In the doGet method of a servlet, I was trying to see all request attributes to see if the "sendfile supported" attribute was set (specifically the request attribute org.apache.tomcat.sendfile.support). On my first pass at this I just used HttpServletRequest.getAttributeNames() to dump all the names of the attributes expecting to see this one listed, but I got no attributes listed at all. Then I actually got the attribute via getAttribute("org.apache.tomcat.sendfile.support") which worked. So getAttributeNames is not returning the names of all attributes. So either: 1. getAttributeNames needs to be fixed to return the names of all attributes (i.e., a code change); or 2. The Tomcat doc needs to be updated in some way as to say thatgetAttributeNames only returns certain attributes and blah blah (i.e., a doc change). Again my original email and Ranier's reply is attached. Thanks!</description>
    <commit commitTime="2009-11-02 02:26:40" id="7fc56b4"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/Request.java</file>
    </fixedFiles>
  </bug>
  <bug id="47331" reportTime="2009-06-08 02:22:52">
    <summary>No translation error messag when using #{...} in template text</summary>
    <description/>
    <commit commitTime="2009-11-02 08:00:00" id="f3b04b4"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Validator.java</file>
    </fixedFiles>
  </bug>
  <bug id="47451" reportTime="2009-06-29 14:53:48">
    <summary>NPE if response contains null content-encoding header</summary>
    <description/>
    <commit commitTime="2009-11-02 08:00:00" id="14084ac"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/Response.java</file>
    </fixedFiles>
  </bug>
  <bug id="47881" reportTime="2009-09-20 19:14:04">
    <summary>org.apache.catalina.startup.Bootstrap's main method handles 'startd' or 'stopd' wrongly</summary>
    <description>String command = "start"; if (args.length &gt; 0) { command = args[args.length - 1]; } if (command.equals("startd")) { args[0] = "start"; daemon.load(args); daemon.start(); } else if (command.equals("stopd")) { args[0] = "stop"; daemon.stop(); } ... ... should be: String command = "start"; if (args.length &gt; 0) { command = args[args.length - 1]; } if (command.equals("startd")) { args[args.length - 1] = "start"; daemon.load(args); daemon.start(); } else if (command.equals("stopd")) { args[args.length - 1] = "stop"; daemon.stop(); } ... ... Please refer to the following usage method of org.apache.catalina.startup.Catalina: protected void usage() { System.out.println ("usage: java org.apache.catalina.startup.Catalina" + " [ -config {pathname} ]" + " [ -nonaming ] { start | stop }"); }</description>
    <commit commitTime="2009-11-02 19:06:40" id="3ef0f21"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/Bootstrap.java</file>
    </fixedFiles>
  </bug>
  <bug id="48102" reportTime="2009-11-02 03:11:25">
    <summary>'Bootstrap' is misspelled as 'Boostrap' in the javadoc of the class of 'org.apache.catalina.startup.Bootstrap'</summary>
    <description>Below is the javadoc of the class of 'org.apache.catalina.startup.Bootstrap': /** * Boostrap loader for Catalina. This application constructs a class loader * for use in loading the Catalina internal classes (by accumulating all of the * JAR files found in the "server" directory under "catalina.home"), and * starts the regular execution of the container. The purpose of this * roundabout approach is to keep the Catalina internal classes (and any * other classes they depend on, such as an XML parser) out of the system * class path and therefore not visible to application level classes. * * @author Craig R. McClanahan * @author Remy Maucherat * @version $Revision: 831860 $ $Date: 2009-11-02 19:00:01 +0800 (Mon, 02 Nov 2009) $ */ the first word ommits a 't' letter. It sould be 'Bootstrap', not 'Boostrap'.</description>
    <commit commitTime="2009-11-03 09:00:00" id="c060034"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/Bootstrap.java</file>
    </fixedFiles>
  </bug>
  <bug id="48104" reportTime="2009-11-02 03:20:57">
    <summary>the javadoc of class 'org.apache.catalina.startup.Catalina' is not complete, as in the usage() method</summary>
    <description>Below is the javadoc of class 'org.apache.catalina.startup.Catalina': /** * Startup/Shutdown shell program for Catalina. The following command line * options are recognized: * &lt;ul&gt; * &lt;li&gt;&lt;b&gt;-config {pathname}&lt;/b&gt; - Set the pathname of the configuration file * to be processed. If a relative path is specified, it will be * interpreted as relative to the directory pathname specified by the * "catalina.base" system property. [conf/server.xml] * &lt;li&gt;&lt;b&gt;-help&lt;/b&gt; - Display usage information. * &lt;li&gt;&lt;b&gt;-stop&lt;/b&gt; - Stop the currently running instance of Catalina. * &lt;/u&gt; * * Should do the same thing as Embedded, but using a server.xml file. * * @author Craig R. McClanahan * @author Remy Maucherat * @version $Revision: 752323 $ $Date: 2009-03-11 08:46:54 +0800 (Wed, 11 Mar 2009) $ */ However, it doesn't allude the '-nonmaing' option, and 'start' option. Below is the usage() method of the same class: /** * Print usage information for this application. */ protected void usage() { System.out.println ("usage: java org.apache.catalina.startup.Catalina" + " [ -config {pathname} ]" + " [ -nonaming ] { start | stop }"); } It is not complete either. It lacks the '-help' option.</description>
    <commit commitTime="2009-11-03 09:00:00" id="481cfe9"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/Catalina.java</file>
    </fixedFiles>
  </bug>
  <bug id="46947" reportTime="2009-03-31 13:00:32">
    <summary>Code cleanup patch that removes some obsolete null checks</summary>
    <description/>
    <commit commitTime="2009-11-04 10:00:00" id="6908b18"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ant/jmx/JMXAccessorTask.java</file>
      <file>java/org/apache/catalina/tribes/transport/bio/BioReceiver.java</file>
      <file>java/org/apache/catalina/valves/JDBCAccessLogValve.java</file>
      <file>java/org/apache/tomcat/util/net/NioBlockingSelector.java</file>
    </fixedFiles>
  </bug>
  <bug id="48119" reportTime="2009-11-04 01:42:30">
    <summary>5 misspellings in the javadoc of class "org.apache.catalina.startup.HostConfig'</summary>
    <description>No.1 Line 146: /** * Attribute value used to turn on/off XML namespace awarenes. */ protected boolean xmlNamespaceAware = false; 'awareness' was misspelled as 'awarenes' No.2 Line 268: /** * Get the server.xml &amp;lt;host&amp;gt; attribute's xmlNamespaceAware. * @return true if namespace awarenes is enabled. * */ public boolean getXmlNamespaceAware(){ return xmlNamespaceAware; } 'awareness' was misspelled as 'awarenes' No.3 Line 366: /** * Has the specified application been deployed? Note applications defined * in server.xml will not have been deployed. * @return &lt;code&gt;true&lt;/code&gt; if the application has been deployed and * &lt;code&gt;false&lt;/code&gt; if the applciation has not been deployed or does not * exist */ public boolean isDeployed(String name) { 'application' was misspelled as 'applciation' No.4 Line 1328: /** * Add a new Context to be managed by us. * Entry point for the admin webapp, and other JMX Context controlers. */ public void manageApp(Context context) { 'controllers' was misspelled as 'controlers' Line 1382: /** * Remove a webapp from our control. * Entry point for the admin webapp, and other JMX Context controlers. */ public void unmanageApp(String contextPath) { 'controllers' was misspelled as 'controlers'</description>
    <commit commitTime="2009-11-04 21:06:40" id="07e5982"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/HostConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="48117" reportTime="2009-11-04 01:26:19">
    <summary>two misspellings in the javadoc of class "org.apache.catalina.startup.ContextConfig"</summary>
    <description>in protected synchronized void stop(): (Line: 1059) // Removing sercurity role 'security' is misspelled to 'sercurity' in protected InputSource getWebXmlSource(String filename, String path): (Line: 1354) /** * * @param filename Name of the file (possibly with one or more leading path * segemnts) to read * @param path Location that filename is relative to * @return */ 'segments' is misspelled to 'segemnts'.</description>
    <commit commitTime="2009-11-05 08:13:20" id="b6df018"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="48120" reportTime="2009-11-04 01:45:46">
    <summary>one misspelling in the javadoc of class "org.apache.catalina.startup.SetNextNamingRule"</summary>
    <description>Line 50: /** * Construct a "set next" rule with the specified method name. * * @param methodName Method name of the parent method to call * @param paramType Java class of the parent method's argument * (if you wish to use a primitive type, specify the corresonding * Java wrapper class instead, such as &lt;code&gt;java.lang.Boolean&lt;/code&gt; * for a &lt;code&gt;boolean&lt;/code&gt; parameter) */ public SetNextNamingRule(String methodName, String paramType) { 'corresponding' was misspelled as 'corresonding'</description>
    <commit commitTime="2009-11-05 08:13:20" id="7508847"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/SetNextNamingRule.java</file>
    </fixedFiles>
  </bug>
  <bug id="48133" reportTime="2009-11-04 19:05:17">
    <summary>misspellings in the javadoc and comment of the various classes in the package of "org.apache.core"</summary>
    <description/>
    <commit commitTime="2009-11-06 03:40:00" id="9204e4d"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ApplicationDispatcher.java</file>
      <file>java/org/apache/catalina/core/ApplicationFilterFactory.java</file>
      <file>java/org/apache/catalina/core/ApplicationHttpRequest.java</file>
      <file>java/org/apache/catalina/core/ContainerBase.java</file>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
      <file>java/org/apache/catalina/core/StandardEngine.java</file>
      <file>java/org/apache/catalina/core/StandardHost.java</file>
      <file>java/org/apache/catalina/core/StandardPipeline.java</file>
      <file>java/org/apache/catalina/core/StandardService.java</file>
      <file>java/org/apache/catalina/core/StandardWrapperFacade.java</file>
      <file>java/org/apache/catalina/core/StandardWrapperValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="48135" reportTime="2009-11-05 03:34:18">
    <summary>ServiceRefFactory: impossible null check of serviceInterfaceClass</summary>
    <description>The ServiceRefFactory class performs an impossible null check of serviceInterfaceClass at line 238: 237: Class[] serviceInterfaces = serviceInterfaceClass.getInterfaces(); 238: if (serviceInterfaceClass != null) { If it were null, line 237 would generate an NPE.</description>
    <commit commitTime="2009-11-06 03:40:00" id="97ccffd"/>
    <fixedFiles>
      <file>java/org/apache/naming/factory/webservices/ServiceProxy.java</file>
      <file>java/org/apache/naming/factory/webservices/ServiceRefFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="48139" reportTime="2009-11-05 08:10:54">
    <summary>Tomcat Javadoc and unthrown exception fixes</summary>
    <description/>
    <commit commitTime="2009-11-06 03:40:00" id="ab3620c"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/Tomcat.java</file>
    </fixedFiles>
  </bug>
  <bug id="48149" reportTime="2009-11-06 01:14:34">
    <summary>some misspellings I found in the "org.apache.coyote" package and "org.apache.el" package</summary>
    <description/>
    <commit commitTime="2009-11-18 07:20:00" id="39a78f4"/>
    <fixedFiles>
      <file>java/org/apache/coyote/ActionCode.java</file>
      <file>java/org/apache/coyote/ProtocolHandler.java</file>
      <file>java/org/apache/coyote/Request.java</file>
      <file>java/org/apache/coyote/RequestGroupInfo.java</file>
      <file>java/org/apache/coyote/RequestInfo.java</file>
      <file>java/org/apache/coyote/Response.java</file>
      <file>java/org/apache/coyote/ajp/AjpAprProcessor.java</file>
      <file>java/org/apache/coyote/ajp/AjpAprProtocol.java</file>
      <file>java/org/apache/coyote/ajp/AjpProcessor.java</file>
      <file>java/org/apache/coyote/ajp/AjpProtocol.java</file>
      <file>java/org/apache/coyote/http11/AbstractHttp11Processor.java</file>
      <file>java/org/apache/coyote/http11/AbstractInputBuffer.java</file>
      <file>java/org/apache/coyote/http11/AbstractOutputBuffer.java</file>
      <file>java/org/apache/coyote/http11/Http11AprProcessor.java</file>
      <file>java/org/apache/coyote/http11/Http11NioProcessor.java</file>
      <file>java/org/apache/coyote/http11/Http11Processor.java</file>
      <file>java/org/apache/coyote/http11/InternalAprInputBuffer.java</file>
      <file>java/org/apache/coyote/http11/InternalAprOutputBuffer.java</file>
      <file>java/org/apache/coyote/http11/InternalInputBuffer.java</file>
      <file>java/org/apache/coyote/http11/InternalNioInputBuffer.java</file>
      <file>java/org/apache/coyote/http11/InternalNioOutputBuffer.java</file>
      <file>java/org/apache/coyote/http11/InternalOutputBuffer.java</file>
      <file>java/org/apache/coyote/http11/filters/VoidInputFilter.java</file>
      <file>java/org/apache/el/parser/AstValue.java</file>
      <file>java/org/apache/el/parser/ParseException.java</file>
    </fixedFiles>
  </bug>
  <bug id="48150" reportTime="2009-11-06 01:46:29">
    <summary>some misspellings I found in the "javax.servlet" package</summary>
    <description/>
    <commit commitTime="2009-11-18 07:20:00" id="7849435"/>
    <fixedFiles>
      <file>java/javax/servlet/GenericServlet.java</file>
      <file>java/javax/servlet/http/HttpServlet.java</file>
      <file>java/javax/servlet/jsp/JspWriter.java</file>
      <file>java/javax/servlet/jsp/PageContext.java</file>
      <file>java/javax/servlet/jsp/SkipPageException.java</file>
      <file>java/javax/servlet/jsp/tagext/JspFragment.java</file>
      <file>java/javax/servlet/jsp/tagext/PageData.java</file>
      <file>java/javax/servlet/jsp/tagext/SimpleTagSupport.java</file>
      <file>java/javax/servlet/jsp/tagext/TagLibraryInfo.java</file>
      <file>java/javax/servlet/jsp/tagext/TagLibraryValidator.java</file>
      <file>java/javax/servlet/jsp/tagext/TagSupport.java</file>
    </fixedFiles>
  </bug>
  <bug id="48173" reportTime="2009-11-11 06:59:39">
    <summary>org.apache.catalina.tribes.io.ChannelData.EMPTY_DATA_ARRAY should be final</summary>
    <description>org.apache.catalina.tribes.io.ChannelData.EMPTY_DATA_ARRAY should be final</description>
    <commit commitTime="2009-11-18 07:20:00" id="e5ae1bc"/>
    <fixedFiles>
      <file>java/org/apache/catalina/tribes/io/ChannelData.java</file>
    </fixedFiles>
  </bug>
  <bug id="48174" reportTime="2009-11-11 07:14:34">
    <summary>org.apache.tomcat.jni.Address.APR_ANYADDR should be final</summary>
    <description>org.apache.tomcat.jni.Address.APR_ANYADDR should be final</description>
    <commit commitTime="2009-11-18 07:20:00" id="57571a7"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/jni/Address.java</file>
    </fixedFiles>
  </bug>
  <bug id="48217" reportTime="2009-11-17 16:30:07">
    <summary>Loggers should be final</summary>
    <description/>
    <commit commitTime="2009-11-18 21:13:20" id="0d7263a"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/AbstractHttp11Protocol.java</file>
      <file>java/org/apache/coyote/http11/Http11NioProtocol.java</file>
      <file>java/org/apache/coyote/http11/Http11Protocol.java</file>
    </fixedFiles>
  </bug>
  <bug id="48172" reportTime="2009-11-11 03:23:50">
    <summary>JspRuntimeContext synch. problems.</summary>
    <description>JspRuntimeContext.jspReloadCount is synchronised when updated, but not when read by getJspReloadCount(). If the instance is accessed from multiple threads, then the returned value may not be the current value, it could be arbitrarily stale. If this is acceptable, then the Javadoc should say so; otherwise the getter needs to be synch. (or the field needs to be volatile) Or just use AtomicInteger. == Various other fields are neither final nor synchronized, e.g. classpath codeSource etc. As far as I can tell, these could easily be made final as they are only written by the constructor.</description>
    <commit commitTime="2009-11-19 08:20:00" id="242b6a3"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/JspRuntimeContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="48197" reportTime="2009-11-14 06:29:45">
    <summary>XByteBuffer: privatize public fields; fix Javadoc</summary>
    <description/>
    <commit commitTime="2009-11-19 08:20:00" id="a1cb0c3"/>
    <fixedFiles>
      <file>java/org/apache/catalina/tribes/io/XByteBuffer.java</file>
    </fixedFiles>
  </bug>
  <bug id="48234" reportTime="2009-11-18 17:41:42">
    <summary>org.apache.catalina.core.ContainerBase.getLogger() not thread-safe?</summary>
    <description>org.apache.catalina.core.ContainerBase.getLogger() is not synchronised, yet all the other methods which access org.apache.catalina.core.ContainerBase.logger are synch. This seems wrong. org.apache.catalina.core.ContainerBase.logger should probably be private to prevent unsynch. access by subclasses. Similar considerations apply to logName and logName() The Javadoc for getLogger() states that it can return null - that does not appear to be possible. [Not sure if the method ever returns the parent logger either.]</description>
    <commit commitTime="2009-11-19 11:06:40" id="c53173b"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ContainerBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="48252" reportTime="2009-11-20 08:25:45">
    <summary>StackOverflowError in NioEndpoint.setProperty when setting jkHome</summary>
    <description>- Noticed only when running in debugger with breakpoint set for StackOverflowError. - The error is translated by Java's reflection mechanism to an InvocationTargetException, which is caught and silently ignored by IntrospectionUtils. - Connector.initialize() sets jkHome property on Http11NioProtocol. - Http11NioProtocol sets jkHome property on NioEndpoint. - NioEndpoint recursively invokes its own setProperty method via IntrospectionUtils.setProperty, causing the stack overflow. - Using embedded Tomcat. - Using Nio connector. Does not happen for standard connector. - Happens in 6.0.18 and 6.0.20; haven't tested with earlier versions.</description>
    <commit commitTime="2009-11-21 02:00:00" id="c0cb61b"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/IntrospectionUtils.java</file>
      <file>java/org/apache/tomcat/util/net/AbstractEndpoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="47718" reportTime="2009-08-20 14:48:26">
    <summary>ManagerBase leaks fd to /dev/urandom when context stopped</summary>
    <description>On operating systems where /dev/urandom exists, org.apache.catalina.session.ManagerBase will use it as a source of data for getRandomBytes(). If you stop a context or undeploy a host, the number of file descriptors that have /dev/urandom open tomcat remains constant. For example, if you use the manager application to stop or undeploy a context, the number of file descriptors to /dev/urandom is the same as before the stop. File descriptor use is determined by using lsof or examining the /proc/&lt;pid&gt;/fd directory on Linux. The same issue is seen if you undeploy a virtual host. If you undeploy/deploy a context, or remove/add a virtual host, the # of file descriptors to /dev/urandom will increase each time. This is because ManagerBase does not close the DataInputStream it holds to /dev/urandom. The patch shown below resolves this issue. Stopping a context, or undeploying a virtual host will close the session manager's reference to /dev/urandom. --- apache-tomcat-5.5.28-src/container/catalina/src/share/org/apache/catalina/session/ManagerBase.java 2009-07-24 13:35:00.000000000 -0600 +++ apache-tomcat-5.5.28-gls/container/catalina/src/share/org/apache/catalina/session/ManagerBase.java 2009-08-20 13:38:03.000000000 -0600 @@ -688,10 +688,17 @@ } public void destroy() { if( oname != null ) Registry.getRegistry(null, null).unregisterComponent(oname); + if (randomIS!=null) { + try { + randomIS.close(); + } catch (IOException ioe) { + } + randomIS=null; + } initialized=false; oname = null; // Don't clear log since it is required in case attributes are changed // (eg via JMX) whilst the manager is stopped. }</description>
    <commit commitTime="2009-11-23 04:00:00" id="ae5c640"/>
    <fixedFiles>
      <file>java/org/apache/catalina/session/ManagerBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="47997" reportTime="2009-10-14 17:45:53">
    <summary>NamingContextListener fails to add itself as a PropertyChangeListener to all namingResources</summary>
    <description/>
    <commit commitTime="2009-11-23 04:00:00" id="58162ed"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/NamingContextListener.java</file>
    </fixedFiles>
  </bug>
  <bug id="47799" reportTime="2009-09-08 02:39:42">
    <summary>Domain does not work in Membership and DomainFilterInterceptor.</summary>
    <description/>
    <commit commitTime="2009-11-23 06:46:40" id="94c643b"/>
    <fixedFiles>
      <file>java/org/apache/catalina/tribes/group/interceptors/DomainFilterInterceptor.java</file>
      <file>java/org/apache/catalina/tribes/membership/McastService.java</file>
    </fixedFiles>
  </bug>
  <bug id="48049" reportTime="2009-10-25 07:24:55">
    <summary>org.apache.naming.NamingContext's destroySubcontext() method doesn't invoke itself recursively, but invoke unbind() method</summary>
    <description>Below is the original implementation of destroySubcontext(Name name) method: public void destroySubcontext(Name name) throws NamingException { checkWritable(); while ((!name.isEmpty()) &amp;&amp; (name.get(0).length() == 0)) name = name.getSuffix(1); if (name.isEmpty()) throw new NamingException (sm.getString("namingContext.invalidName")); NamingEntry entry = (NamingEntry) bindings.get(name.get(0)); if (entry == null) { throw new NameNotFoundException (sm.getString("namingContext.nameNotBound", name.get(0))); } if (name.size() &gt; 1) { if (entry.type == NamingEntry.CONTEXT) { ((Context) entry.value).unbind(name.getSuffix(1)); } else { throw new NamingException (sm.getString("namingContext.contextExpected")); } } else { if (entry.type == NamingEntry.CONTEXT) { ((Context) entry.value).close(); bindings.remove(name.get(0)); } else { throw new NotContextException (sm.getString("namingContext.contextExpected")); } } } However, the method invokes 'unbind' method rather than invokes itself recursively. if (name.size() &gt; 1) { if (entry.type == NamingEntry.CONTEXT) { ((Context) entry.value).unbind(name.getSuffix(1)); } else { throw new NamingException (sm.getString("namingContext.contextExpected")); } should be: if (name.size() &gt; 1) { if (entry.type == NamingEntry.CONTEXT) { ((Context) entry.value).destroySubcontext(name.getSuffix(1)); } else { throw new NamingException (sm.getString("namingContext.contextExpected")); }</description>
    <commit commitTime="2009-11-23 06:46:40" id="af8a612"/>
    <fixedFiles>
      <file>java/org/apache/naming/NamingContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="48239" reportTime="2009-11-19 07:48:12">
    <summary>HexUtils exposes public array</summary>
    <description/>
    <commit commitTime="2009-11-23 09:33:20" id="55e5052"/>
    <fixedFiles>
      <file>java/org/apache/coyote/ajp/AjpAprProcessor.java</file>
      <file>java/org/apache/coyote/ajp/AjpProcessor.java</file>
      <file>java/org/apache/coyote/http11/Http11AprProcessor.java</file>
      <file>java/org/apache/coyote/http11/Http11NioProcessor.java</file>
      <file>java/org/apache/coyote/http11/Http11Processor.java</file>
      <file>java/org/apache/coyote/http11/filters/ChunkedInputFilter.java</file>
      <file>java/org/apache/coyote/http11/filters/ChunkedOutputFilter.java</file>
      <file>java/org/apache/tomcat/util/buf/HexUtils.java</file>
      <file>java/org/apache/tomcat/util/buf/MessageBytes.java</file>
    </fixedFiles>
  </bug>
  <bug id="48248" reportTime="2009-11-20 04:56:14">
    <summary>tribes.group.interceptors.MessageDispatchInterceptor.run should be volatile</summary>
    <description>org.apache.catalina.tribes.group.interceptors.MessageDispatchInterceptor.run should be volatile, as it is used to communicate between running threads.</description>
    <commit commitTime="2009-11-23 09:33:20" id="a524187"/>
    <fixedFiles>
      <file>java/org/apache/catalina/tribes/group/GroupChannel.java</file>
      <file>java/org/apache/catalina/tribes/group/interceptors/MessageDispatchInterceptor.java</file>
      <file>java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java</file>
      <file>java/org/apache/catalina/tribes/membership/McastServiceImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="48249" reportTime="2009-11-20 05:06:47">
    <summary>org.apache.tomcat.util.net.NioBlockingSelector.BlockPoller.run &lt;= volatile</summary>
    <description>org.apache.tomcat.util.net.NioBlockingSelector.BlockPoller.run should be volatile, as it is used to communicate between running threads.</description>
    <commit commitTime="2009-11-23 09:33:20" id="c7d7ba2"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/net/NioBlockingSelector.java</file>
    </fixedFiles>
  </bug>
  <bug id="48267" reportTime="2009-11-23 13:22:35">
    <summary>Patch to fix generics in javax packages</summary>
    <description/>
    <commit commitTime="2009-11-28 00:40:00" id="632e68c"/>
    <fixedFiles>
      <file>java/javax/annotation/Resource.java</file>
      <file>java/javax/ejb/EJB.java</file>
      <file>java/javax/el/BeanELResolver.java</file>
      <file>java/javax/el/ELContext.java</file>
      <file>java/javax/el/ListELResolver.java</file>
      <file>java/javax/el/MapELResolver.java</file>
      <file>java/javax/el/ResourceBundleELResolver.java</file>
      <file>java/javax/xml/ws/WebServiceRef.java</file>
    </fixedFiles>
  </bug>
  <bug id="48282" reportTime="2009-11-25 07:42:40">
    <summary>Possible NPE in org.apache.tomcat.util.modeler.Registry</summary>
    <description/>
    <commit commitTime="2009-11-28 00:40:00" id="56897be"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/modeler/Registry.java</file>
    </fixedFiles>
  </bug>
  <bug id="48287" reportTime="2009-11-25 15:36:20">
    <summary>ApplicationContextFacade - generics fixes</summary>
    <description/>
    <commit commitTime="2009-11-28 03:26:40" id="ce8d1c5"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ApplicationContextFacade.java</file>
    </fixedFiles>
  </bug>
  <bug id="48288" reportTime="2009-11-25 15:43:06">
    <summary>Patch to fix generics in javax.el package helpers</summary>
    <description/>
    <commit commitTime="2009-11-28 03:26:40" id="2ac1900"/>
    <fixedFiles>
      <file>java/org/apache/el/lang/EvaluationContext.java</file>
      <file>java/org/apache/jasper/el/ELContextWrapper.java</file>
    </fixedFiles>
  </bug>
  <bug id="48289" reportTime="2009-11-25 16:35:49">
    <summary>ElSupport - Javadoc and generics fixes</summary>
    <description/>
    <commit commitTime="2009-11-28 03:26:40" id="b8599a3"/>
    <fixedFiles>
      <file>java/org/apache/el/lang/ELSupport.java</file>
      <file>test/org/apache/el/TestELEvaluation.java</file>
    </fixedFiles>
  </bug>
  <bug id="47342" reportTime="2009-06-10 02:48:24">
    <summary>ReplicatedContext#start throws NullPointerException.</summary>
    <description/>
    <commit commitTime="2009-11-28 06:13:20" id="9afe6ce"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/context/ReplicatedContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="47502" reportTime="2009-07-09 05:57:29">
    <summary>clustering fails on serializing javax.security.auth.subject</summary>
    <description>Clustering fails on serializing javax.security.auth.subject. See stack below. I looked a little into the Tomcat code. In ./java/org/apache/catalina/connector/Request.java on line 1752 Tomcat puts the 'javax.security.auth.subject' on the session if you use a securitymanager. This is the MemoryUser in my case I think. I must use the securitymanager because I use RMI. Is there a solution possible by making the MemoryUser serializable or by not putting it in the session as an attribute. Mark Thomas &lt;markt_at_apache_dot_org&gt; suggested a note on the session at the Tomcat user-mailinglist. I've never seen notes on sessions. The MemoryUser comes from the security-constraint in my web.xml. Jul 8, 2009 5:53:52 PM org.apache.catalina.ha.session.DeltaSession writeObject SEVERE: Cannot serialize session attribute javax.security.auth.subject for session 9C533E0EB4A79ED5B206B8F5A5DB09AD java.io.NotSerializableException: org.apache.catalina.users.MemoryUser at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1156) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:326) at java.util.LinkedList.writeObject(LinkedList.java:943) at sun.reflect.GeneratedMethodAccessor216.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:945) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1461) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.access$300(ObjectOutputStream.java:143) at java.io.ObjectOutputStream$PutFieldImpl.writeFields(ObjectOutputStream.java:1668) at java.io.ObjectOutputStream.writeFields(ObjectOutputStream.java:454) at javax.security.auth.Subject$SecureSet.writeObject(Subject.java:1281) at sun.reflect.GeneratedMethodAccessor215.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:945) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1461) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.defaultWriteObject(ObjectOutputStream.java:416) at java.util.Collections$SynchronizedCollection.writeObject(Collections.java:1602) at sun.reflect.GeneratedMethodAccessor214.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:945) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1461) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.defaultWriteObject(ObjectOutputStream.java:416) at javax.security.auth.Subject.writeObject(Subject.java:919) at sun.reflect.GeneratedMethodAccessor213.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:945) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1461) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1392) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1150) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:326) at org.apache.catalina.ha.session.DeltaSession.writeObject(DeltaSession.java:714) at org.apache.catalina.ha.session.DeltaSession.writeObjectData(DeltaSession.java:475) at org.apache.catalina.ha.session.DeltaSession.writeObjectData(DeltaSession.java:472) at org.apache.catalina.ha.session.DeltaManager.serializeSessions(DeltaManager.java:733) at org.apache.catalina.ha.session.DeltaManager.sendSessions(DeltaManager.java:1513) at org.apache.catalina.ha.session.DeltaManager.handleGET_ALL_SESSIONS(DeltaManager.java:1479) at org.apache.catalina.ha.session.DeltaManager.messageReceived(DeltaManager.java:1310) at org.apache.catalina.ha.session.DeltaManager.messageDataReceived(DeltaManager.java:1093) at org.apache.catalina.ha.session.ClusterSessionListener.messageReceived(ClusterSessionListener.java:87) at org.apache.catalina.ha.tcp.SimpleTcpCluster.messageReceived(SimpleTcpCluster.java:901) at org.apache.catalina.ha.tcp.SimpleTcpCluster.messageReceived(SimpleTcpCluster.java:882) at org.apache.catalina.tribes.group.GroupChannel.messageReceived(GroupChannel.java:269) at org.apache.catalina.tribes.group.ChannelInterceptorBase.messageReceived(ChannelInterceptorBase.java:79) at org.apache.catalina.tribes.group.ChannelInterceptorBase.messageReceived(ChannelInterceptorBase.java:79) at org.apache.catalina.tribes.group.interceptors.TcpFailureDetector.messageReceived(TcpFailureDetector.java:110) at org.apache.catalina.tribes.group.ChannelInterceptorBase.messageReceived(ChannelInterceptorBase.java:79) at org.apache.catalina.tribes.group.ChannelCoordinator.messageReceived(ChannelCoordinator.java:241) at org.apache.catalina.tribes.transport.ReceiverBase.messageDataReceived(ReceiverBase.java:225) at org.apache.catalina.tribes.transport.nio.NioReplicationTask.drainChannel(NioReplicationTask.java:188) at org.apache.catalina.tribes.transport.nio.NioReplicationTask.run(NioReplicationTask.java:91) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)</description>
    <commit commitTime="2009-12-02 07:26:40" id="806200c"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/session/DeltaSession.java</file>
    </fixedFiles>
  </bug>
  <bug id="48324" reportTime="2009-12-01 16:02:13">
    <summary>Javadoc fixes for connector.Request.java</summary>
    <description/>
    <commit commitTime="2009-12-10 23:46:40" id="549a5d5"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/Request.java</file>
    </fixedFiles>
  </bug>
  <bug id="48370" reportTime="2009-12-10 17:24:23">
    <summary>PublishRequest.java can not be compiled</summary>
    <description>There is a log used in org.apache.tomcat.bayeux.request.PublishRequest,but it was not be defined,so the class can not be complied successfully,there should be something like this? private static final Log log = LogFactory.getLog(PublishRequest.class);</description>
    <commit commitTime="2009-12-11 19:13:20" id="9be399f"/>
    <fixedFiles>
      <file>modules/bayeux/java/org/apache/tomcat/bayeux/request/PublishRequest.java</file>
    </fixedFiles>
  </bug>
  <bug id="48373" reportTime="2009-12-11 00:22:52">
    <summary>Can not get clients from TomcatBayeux</summary>
    <description>When call the getClients method,there will be a Exception: java.lang.ArrayStoreException: java.util.HashMap$Entry maybe this method should be: public List&lt;Client&gt; getClients() { return java.util.Arrays.asList(clients.values().toArray(new Client[0])); } instead of this: public List&lt;Client&gt; getClients() { return java.util.Arrays.asList(clients.entrySet().toArray(new Client[0])); }</description>
    <commit commitTime="2009-12-11 19:13:20" id="b09d817"/>
    <fixedFiles>
      <file>modules/bayeux/java/org/apache/tomcat/bayeux/TomcatBayeux.java</file>
    </fixedFiles>
  </bug>
  <bug id="47537" reportTime="2009-07-15 10:06:41">
    <summary>Empty response when forward to login page fails</summary>
    <description>When tomcat receives a POST request on a session that has timedout, it will forward to the form based login page (form-login-page). If this forward fails for some reason (an error in the login page for instance), tomcat will return an empty HTTP response, without any error code. The tomcat log says "Unexpected error forwarding to login page" and contains the detailed stacktrace, but i would expect the error to show up in the browser as well (at least a 500 status)</description>
    <commit commitTime="2009-12-11 22:00:00" id="88b5d4b"/>
    <fixedFiles>
      <file>java/org/apache/catalina/authenticator/FormAuthenticator.java</file>
    </fixedFiles>
  </bug>
  <bug id="47744" reportTime="2009-08-26 11:01:57">
    <summary>Memory leak when using SSL + Java security manager</summary>
    <description/>
    <commit commitTime="2009-12-14 22:13:20" id="51d5511"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/net/jsse/JSSESupport.java</file>
    </fixedFiles>
  </bug>
  <bug id="48387" reportTime="2009-12-14 10:28:40">
    <summary>Make RemoteIpFilter parameters consistent with RemoteIpValve</summary>
    <description/>
    <commit commitTime="2009-12-15 06:33:20" id="803d64d"/>
    <fixedFiles>
      <file>java/org/apache/catalina/filters/RemoteIpFilter.java</file>
    </fixedFiles>
  </bug>
  <bug id="47930" reportTime="2009-10-01 22:42:57">
    <summary>PersistentManager (using filestore) can return different session objects linked to the same session ID, when Tomcat is restarted</summary>
    <description/>
    <commit commitTime="2009-12-19 02:13:20" id="d9f2c99"/>
    <fixedFiles>
      <file>java/org/apache/catalina/session/PersistentManagerBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="48345" reportTime="2009-12-07 02:09:14">
    <summary>Session does time-out shorter than setting in web.xml when PersistentManager is used.</summary>
    <description>I am encountering the problem that Session does time-out shorter than setting in web.xml. This is a simple scenario where the problem occurs. I am using PersistentManager by the following configuration. &lt;Context&gt; &lt;Manager className="org.apache.catalina.session.PersistentManager" maxIdleSwap="120"&gt; &lt;Store className="org.apache.catalina.session.FileStore"/&gt; &lt;/Manager&gt; &lt;/Context&gt; I am setting the session-timeout at five minutes. &lt;session-config&gt; &lt;session-timeout&gt;5&lt;/session-timeout&gt; &lt;/session-config&gt; [scenario] 1. Create Session. 2. 120 seconds pass. Session does swapOut. 3. In addition, 120 seconds pass. Get Session. Session does swapIn and access time of session in the memory is updated. 4. In addition, 90 seconds pass. Get Session. Because the access time of the session has been updated in (3), The session should be able to be acquired. However, the session can not be acquired. This cause is StoreBase#processExpires invoked between (3) and (4). StoreBase#processExpire deletes the session saved in Store. StoreBase#processExpires is as follows. =====StoreBase#processExpires===== public void processExpires() { ... for (int i = 0; i &lt; keys.length; i++) { try { StandardSession session = (StandardSession) load(keys[i]); if (session == null) { continue; } if (session.isValid()) { continue; } ... if ( ( (PersistentManagerBase) manager).isLoaded( keys[i] )) { // recycle old backup session session.recycle(); } else { // expire swapped out session session.expire(); } remove(session.getIdInternal()); } catch (Exception e) { ... } } } ====== The session saved in Store is loaded, and StandardSession#isValid() is executed. StandardSession#expire(true) is invoked for the session that passes session time-out in "StandardSession#isValid()". StandardSession#expire(true) invokes Manager#remove(Session). As a result, the session is deleted from the session map. In a word, session in memory is deleted by invalidating old session in Store. As a result, session does time-out shorter than setting in web.xml I made a patch against trunk. Best regards.</description>
    <commit commitTime="2009-12-30 18:46:40" id="d939925"/>
    <fixedFiles>
      <file>java/org/apache/catalina/session/StoreBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="48454" reportTime="2009-12-29 02:46:52">
    <summary>"Bad file descriptor"-IOException in CGIServlet for some programs</summary>
    <description/>
    <commit commitTime="2009-12-30 18:46:40" id="ae6c3c4"/>
    <fixedFiles>
      <file>java/org/apache/catalina/servlets/CGIServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="43819" reportTime="2007-11-08 14:48:53">
    <summary>Support latest JSR245 proposal to make EL "self-contained"</summary>
    <description/>
    <commit commitTime="2009-12-31 05:53:20" id="9a2ae02"/>
    <fixedFiles>
      <file>java/javax/el/ExpressionFactory.java</file>
      <file>java/org/apache/jasper/compiler/JspUtil.java</file>
      <file>java/org/apache/jasper/compiler/PageInfo.java</file>
      <file>java/org/apache/jasper/compiler/Validator.java</file>
      <file>java/org/apache/jasper/runtime/JspApplicationContextImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="48006" reportTime="2009-10-15 11:34:52">
    <summary>Implement the header X-Powered-By suggested by the servlet specification</summary>
    <description/>
    <commit commitTime="2009-12-31 19:46:40" id="3d309a5"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/CoyoteAdapter.java</file>
    </fixedFiles>
  </bug>
  <bug id="48424" reportTime="2009-12-20 23:29:35">
    <summary>Keep same logic for creating the objectnames for connector mbeans</summary>
    <description>Currently, for connector MBeans, they are registered and unregistered by Connector classes themselves. But in the ServerLifecycle and MBeanUtils, there are also codes for unregistering the connector MBeans. Suppose it is used for double check ? The question is that the codes for creating connector object name are not same, in the MBeanUtils, it always assume that address property is of String type, sometimes that a ClassCastException would be thrown.</description>
    <commit commitTime="2010-01-06 03:33:20" id="da5f249"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/Connector.java</file>
      <file>java/org/apache/catalina/mbeans/MBeanUtils.java</file>
    </fixedFiles>
  </bug>
  <bug id="48112" reportTime="2009-11-03 07:09:58">
    <summary>Closing curly brace in literal string incorrectly treated as expression terminator.</summary>
    <description>On tomcat 6.0.20 something like the following line in a JSP causes a exception: &lt;c:out value="${fn:trim('{world}')}"/&gt; After removing the closing curly brace from the literal ('{world}' -&gt; '{world') the JSP works. This behaviour seems specific to 6.0.20, as on 6.0.18 and 6.0.16 the line above works fine. Example of exception: ===================== org.apache.jasper.JasperException: An exception occurred processing JSP page /test.jsp at line 11 8: &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt; 9: &lt;/head&gt; 10: &lt;body&gt; 11: &lt;c:out value="${fn:trim('{world}')}"/&gt; 12: &lt;/body&gt; 13: &lt;/html&gt; Stacktrace: org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:505) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:416) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:342) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:267) javax.servlet.http.HttpServlet.service(HttpServlet.java:717) root cause javax.el.ELException: Error Parsing: ${fn:trim('{world} org.apache.el.lang.ExpressionBuilder.createNodeInternal(ExpressionBuilder.java:125) org.apache.el.lang.ExpressionBuilder.build(ExpressionBuilder.java:150) org.apache.el.lang.ExpressionBuilder.createValueExpression(ExpressionBuilder.java:194) org.apache.el.ExpressionFactoryImpl.createValueExpression(ExpressionFactoryImpl.java:68) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(PageContextImpl.java:934) org.apache.jsp.test_jsp._jspx_meth_c_005fout_005f0(test_jsp.java:98) org.apache.jsp.test_jsp._jspService(test_jsp.java:72) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:717) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:374) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:342) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:267) javax.servlet.http.HttpServlet.service(HttpServlet.java:717) root cause org.apache.el.parser.ParseException: Encountered " &lt;ILLEGAL_CHARACTER&gt; "\' "" at line 1, column 11. Was expecting one of: &lt;INTEGER_LITERAL&gt; ... &lt;FLOATING_POINT_LITERAL&gt; ... &lt;STRING_LITERAL&gt; ... "true" ... "false" ... "null" ... "(" ... ")" ... "!" ... "not" ... "empty" ... "-" ... &lt;IDENTIFIER&gt; ... org.apache.el.parser.ELParser.generateParseException(ELParser.java:2142) org.apache.el.parser.ELParser.jj_consume_token(ELParser.java:2024) org.apache.el.parser.ELParser.Function(ELParser.java:1207) org.apache.el.parser.ELParser.NonLiteral(ELParser.java:1114) org.apache.el.parser.ELParser.ValuePrefix(ELParser.java:1016) org.apache.el.parser.ELParser.Value(ELParser.java:965) org.apache.el.parser.ELParser.Unary(ELParser.java:947) org.apache.el.parser.ELParser.Multiplication(ELParser.java:711) org.apache.el.parser.ELParser.Math(ELParser.java:631) org.apache.el.parser.ELParser.Compare(ELParser.java:443) org.apache.el.parser.ELParser.Equality(ELParser.java:337) org.apache.el.parser.ELParser.And(ELParser.java:281) org.apache.el.parser.ELParser.Or(ELParser.java:225) org.apache.el.parser.ELParser.Choice(ELParser.java:182) org.apache.el.parser.ELParser.Expression(ELParser.java:174) org.apache.el.parser.ELParser.DynamicExpression(ELParser.java:146) org.apache.el.parser.ELParser.CompositeExpression(ELParser.java:43) org.apache.el.lang.ExpressionBuilder.createNodeInternal(ExpressionBuilder.java:93) org.apache.el.lang.ExpressionBuilder.build(ExpressionBuilder.java:150) org.apache.el.lang.ExpressionBuilder.createValueExpression(ExpressionBuilder.java:194) org.apache.el.ExpressionFactoryImpl.createValueExpression(ExpressionFactoryImpl.java:68) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(PageContextImpl.java:934) org.apache.jsp.test_jsp._jspx_meth_c_005fout_005f0(test_jsp.java:98) org.apache.jsp.test_jsp._jspService(test_jsp.java:72) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:717) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:374) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:342) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:267) javax.servlet.http.HttpServlet.service(HttpServlet.java:717)</description>
    <commit commitTime="2010-01-07 01:46:40" id="11810fb"/>
    <fixedFiles>
      <file>test/org/apache/el/TestELEvaluation.java</file>
    </fixedFiles>
  </bug>
  <bug id="48523" reportTime="2010-01-11 12:45:44">
    <summary>Duplicate property keys in various files</summary>
    <description>There are some properties files with non-unique property keys; normally these should be unique. File: java\org\apache\catalina\realm\LocalStrings.properties Duplicate key: 'jaasRealm.userPrincipalSuccess' jaasRealm.userPrincipalSuccess=Principal "{0}" is a valid user class. We will use this as the user Principal. jaasRealm.userPrincipalSuccess=Subject for username "{0}" returned user Principal "{1}" Duplicate key: 'jaasRealm.userPrincipalFailure' jaasRealm.userPrincipalFailure=No valid user Principal found jaasRealm.userPrincipalFailure=Subject for username "{0}" did not return a valid user Principal File: java\org\apache\catalina\realm\LocalStrings_es.properties Duplicate key: 'jaasRealm.userPrincipalSuccess' jaasRealm.userPrincipalSuccess = El Principal "{0}" es una clase v\u00E1lida de usuario. La vamos a usar como usuario Principal. jaasRealm.userPrincipalSuccess = El asunto para el nombre de usuario "{0}" devolvi\u00F3 usuario Principal "{1}" Duplicate key: 'jaasRealm.userPrincipalFailure' jaasRealm.userPrincipalFailure = No se ha hallado usuario Principal jaasRealm.userPrincipalFailure = El asunto para el nombre de usuario "{0}" no devolvi\u00F3 un usuario Principal v\u00E1lido File: java\org\apache\catalina\startup\LocalStrings.properties Duplicate key: 'contextConfig.jndiUrl' contextConfig.jndiUrl=The connection created for URL [{0}] was not a DirContextURLConnection contextConfig.jndiUrl=Unable to process JNDI URL [{0}] for annotations Duplicate key: 'webXml.mergeConflictFilter' webXml.mergeConflictFilter=The Servlet [{0}] was defined inconsistently in multiple fragments including fragment with name [{1}] located at [{2}] webXml.mergeConflictFilter=The Filter [{0}] was defined inconsistently in multiple fragments including fragment with name [{1}] located at [{2}] File: java\org\apache\jasper\resources\LocalStrings.properties Duplicate key: 'jsp.error.page.invalid.buffer' jsp.error.page.invalid.buffer=Page directive: invalid value for buffer jsp.error.page.invalid.buffer=Page directive: invalid buffer size Duplicate key: 'jsp.error.xml.invalidHighSurrogate' jsp.error.xml.invalidHighSurrogate = High surrogate bits in UTF-8 sequence must not exceed 0x10 but found 0x{0}. jsp.error.xml.invalidHighSurrogate = High surrogate bits in UTF-8 sequence must not exceed 0x10 but found 0x{0}. File: java\org\apache\jasper\resources\LocalStrings_es.properties Duplicate key: 'jsp.error.page.invalid.buffer' jsp.error.page.invalid.buffer = Directiva Page\: valor incorrecto para b\u00FAfer jsp.error.page.invalid.buffer = Directiva Page\: valor incorrecto para buffer Duplicate key: 'jsp.error.xml.invalidHighSurrogate' jsp.error.xml.invalidHighSurrogate = Los bits de surrogaci\u00F3n alta en secuencai UTF-8 no deben de exceder 0x10 pero se hall\u00F3 0x{0}. jsp.error.xml.invalidHighSurrogate = Surrogaci\u00F3n Alta de bits en secuencia UTF-8 no debe de exceder 0x10, pero se hall\u00F3 0x{0}. File: java\org\apache\jasper\resources\LocalStrings_ja.properties Duplicate key: 'jsp.error.page.invalid.buffer' jsp.error.page.invalid.buffer=page\u6307\u793a\u5b50: buffer\u5c5e\u6027\u306e\u5024\u304c\u7121\u52b9\u3067\u3059 jsp.error.page.invalid.buffer=page\u6307\u793a\u5b50: \u7121\u52b9\u306a\u30d0\u30c3\u30d5\u30a1\u30b5\u30a4\u30ba\u3067\u3059 Duplicate key: 'jsp.error.xml.invalidHighSurrogate' jsp.error.xml.invalidHighSurrogate = UTF-8\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u30cf\u30a4\u30b5\u30ed\u30b2\u30fc\u30c8\u30d3\u30c3\u30c8\u306f0x10\u3092\u8d8a\u3048\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u304c\u30010x{0}\u304c\u898b\u3064\u304b\u308a\u307e\u3057\u305f jsp.error.xml.invalidHighSurrogate = UTF-8\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u30cf\u30a4\u30b5\u30ed\u30b2\u30fc\u30c8\u30d3\u30c3\u30c8\u306f0x10\u3092\u8d8a\u3048\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u304c\u30010x{0}\u304c\u898b\u3064\u304b\u308a\u307e\u3057\u305f File: java\org\apache\tomcat\util\net\res\LocalStrings.properties Duplicate key: 'endpoint.poll.fail' endpoint.poll.fail=Socket [{0}] poll event: [{1}] {2} endpoint.poll.fail=Critical poller failure (restarting poller): [{0}] {1} File: java\org\apache\tomcat\util\net\res\LocalStrings_es.properties Duplicate key: 'endpoint.poll.fail' endpoint.poll.fail = Conector [{0}] evento de encuesta\: [{1}] {2} endpoint.poll.fail = Fallo cr\u00EDtico de encuestador (reiniciando encuestador)\: [{0}] {1} File: java\org\apache\tomcat\util\net\res\LocalStrings.properties Duplicate key: 'endpoint.poll.fail' endpoint.poll.fail=Socket [{0}] poll event: [{1}] {2} endpoint.poll.fail=Critical poller failure (restarting poller): [{0}] {1} File: java\org\apache\tomcat\util\net\res\LocalStrings_es.properties Duplicate key: 'endpoint.poll.fail' endpoint.poll.fail = Conector [{0}] evento de encuesta\: [{1}] {2} endpoint.poll.fail = Fallo cr\u00EDtico de encuestador (reiniciando encuestador)\: [{0}] {1}</description>
    <commit commitTime="2010-01-12 17:53:20" id="f2eea0c"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="48421" reportTime="2009-12-20 14:45:51">
    <summary>JULI webapp logging files will not closed when webapp is stopped,reloaded or undeployed</summary>
    <description>In Tomcat 6 the JULI logging files which are (can be) declared in webapp/WEB-INF/classes/logging.properties will not closed, when the webapp is reloaded, stopped or even undeployed. The files will at last be closed, when tomcat is shut down or restarted. This is also true for the normally used Handler org.apache.juli.FileHandler, which opens a new File every day and closes the old. On windows this has following effects: A) If the webapp is undeployed the files which are open at this moment are locked and cannot be deleted until tomcat is (someday) stopped or restarted. B) If the webapp is reloaded the file is opened a second time. So the file has two open handles. The next day the FileHandler closes one handle but the file is kept locked through the other handle and cannot be deleted. Every time a webapp is reloaded the associated logfile is opened again (but not closed). This has the consequence that after reloading webapps a few times tomcat must be restarted from time to time. When tomcat is shutdown the unnecessary (and other) open files are closed and will get the shutdown time as modification time. That means any old log files will receive a current modification time, which is irritating. Steps to verify on windows: (for example: undeploy) 1. create in the examples webapp: of tomcat 6.0.20: examples/WEB-INF/classes/logging.properties: handlers = org.apache.juli.FileHandler org.apache.juli.FileHandler.level = FINE org.apache.juli.FileHandler.directory = ${catalina.base}/logs org.apache.juli.FileHandler.prefix = servlet-examples. 2. start tomcat 3. undeploy examples using manager Actual Results: file ${catalina.base}/logs/servlet-examples.&lt;date&gt;.log cannot be deleted (nor at the next day) Expected: file ${catalina.base}/logs/servlet-examples.&lt;date&gt;.log can be deleted very cumbersome Workaround (working for reload): The getHead method of a custom Formatter is extended to track the handlers along with the classloader and webapp. If for a webapp a different (i.e. new) classloader is detected the close method of the handlers assigned to the old classloader is called. So the assigned file is proper closed (and the Formatter.getTail result is appended) I have set severity at minor because tomcat can be used (without webapp logging). But it is a bug because with this logging the same logfile can be useless multiple open (as described above), which should be considered as buggy.</description>
    <commit commitTime="2010-01-13 02:13:20" id="eeb017a"/>
    <fixedFiles>
      <file>java/org/apache/juli/ClassLoaderLogManager.java</file>
      <file>java/org/apache/juli/logging/LogFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="48004" reportTime="2009-10-15 11:16:16">
    <summary>setHeader() does not replace the previous value for a "Server"</summary>
    <description/>
    <commit commitTime="2010-01-13 05:00:00" id="13daf69"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/Http11AprProcessor.java</file>
      <file>java/org/apache/coyote/http11/Http11NioProcessor.java</file>
      <file>java/org/apache/coyote/http11/Http11Processor.java</file>
    </fixedFiles>
  </bug>
  <bug id="48516" reportTime="2010-01-11 05:42:00">
    <summary>NullPointerException in JNDIRealm</summary>
    <description/>
    <commit commitTime="2010-01-13 07:46:40" id="62d29b6"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/JNDIRealm.java</file>
    </fixedFiles>
  </bug>
  <bug id="48645" reportTime="2010-01-31 04:36:17">
    <summary>RequestUtil.URLDecode(byte[] bytes, String enc)</summary>
    <description>the enc is not used in the implementation public static String URLDecode(byte[] bytes, String enc) { return URLDecode(bytes, null, false); }</description>
    <commit commitTime="2010-01-31 20:13:20" id="d0f9da2"/>
    <fixedFiles>
      <file>java/org/apache/catalina/util/RequestUtil.java</file>
    </fixedFiles>
  </bug>
  <bug id="48647" reportTime="2010-01-31 16:28:21">
    <summary>RemoteIpFilter : request.secure and request.scheme are not forced to "false" and "http" if X-Forwarded-Proto=http</summary>
    <description/>
    <commit commitTime="2010-02-02 22:13:20" id="7aa1206"/>
    <fixedFiles>
      <file>java/org/apache/catalina/filters/RemoteIpFilter.java</file>
    </fixedFiles>
  </bug>
  <bug id="48653" reportTime="2010-02-01 09:26:02">
    <summary>RemoteIpValve : request.secure and request.scheme are not forced to "false" and "http" if X-Forwarded-Proto=http</summary>
    <description/>
    <commit commitTime="2010-02-02 22:13:20" id="1789bd8"/>
    <fixedFiles>
      <file>java/org/apache/catalina/valves/RemoteIpValve.java</file>
      <file>test/org/apache/catalina/valves/TestRemoteIpValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="48678" reportTime="2010-02-04 00:09:04">
    <summary>org.apache.catalina.startup.Catalina incorrectly duplicates super class member</summary>
    <description/>
    <commit commitTime="2010-02-07 05:00:00" id="067e0ba"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/Catalina.java</file>
    </fixedFiles>
  </bug>
  <bug id="48643" reportTime="2010-01-30 16:53:02">
    <summary>catalina.session.FileStore.save() and load() - close() bugs</summary>
    <description>The code for the save() method reads: try { fos = new FileOutputStream(file.getAbsolutePath()); oos = new ObjectOutputStream(new BufferedOutputStream(fos)); } catch (IOException e) { if (oos != null) { &lt;== oos can only be null here try { oos.close(); } catch (IOException f) { // Ignore } } throw e; } Presumably the catch statement should try to close fos instead? Similarly for the load() method; at line 280/281 there is the code: } catch (IOException e) { if (ois != null) { However, ois is the last object created by the try clause, so must be null. Probably the code should check and close bis and/or fis. At the end of the load() method, the code says: // Close the input stream if (ois != null) { However, ois cannot be null at that point. Note: these bugs were detected by the Eclipse compiler.</description>
    <commit commitTime="2010-02-08 06:00:00" id="6f48cde"/>
    <fixedFiles>
      <file>java/org/apache/catalina/session/FileStore.java</file>
      <file>java/org/apache/catalina/session/StandardManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="48665" reportTime="2010-02-03 03:38:00">
    <summary>RemoteIpValve examples refer to "connector" package</summary>
    <description/>
    <commit commitTime="2010-02-08 08:46:40" id="9905155"/>
    <fixedFiles>
      <file>java/org/apache/catalina/valves/RemoteIpValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="48109" reportTime="2009-11-02 19:49:49">
    <summary>Improve binaryStream processing in WebappClassLoader#findResourceInternal</summary>
    <description/>
    <commit commitTime="2010-02-09 07:00:00" id="dda2cbc"/>
    <fixedFiles>
      <file>java/org/apache/catalina/loader/WebappClassLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="48170" reportTime="2009-11-10 18:04:01">
    <summary>Unnecessary synchronization by JspFactory.getDefaultFactory contributes to stability problems</summary>
    <description>I have a soak test at constant load that is initially stable. Within the hour, an ever increasing number of blocked threads develops. The vast majority of threads are in JSP rendering, blocked on JspFactory.getDefaultFactory(). The server eventually crashes. We are running Java 6. Upon code inspection, there appears to be no real reason for synchronizing the getDefaultFactory() and setDefaultFactory() as the setter is called only once upon startup when the sub-class loads. Patching the jar, I tried three other experiments: 1) Removing the synchronized keyword entirely. 2) Locking on an inner static class instead of the JspFactory.class. 3) Using volatile for the static member variable. Both experiments #1 and #3 showed vastly better stability. I was able to double the throughput of the server without seeing increasing number of blocked threads. Experiment #2 yielded the same behavior as the original code. Thus, no other code is synchronizing on JspFactory.class. Rather, there seem to be some sort of contention in the java.lang.Class monitor. Using volatile would preserve the multi-threading semantics while avoiding contributing to the instability issue.</description>
    <commit commitTime="2010-02-09 07:00:00" id="c09753b"/>
    <fixedFiles>
      <file>java/javax/servlet/jsp/JspFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="48726" reportTime="2010-02-10 22:46:18">
    <summary>DeployTask throws OutOfMemoryErrors when deploying large WAR files</summary>
    <description/>
    <commit commitTime="2010-02-11 09:00:00" id="53e0674"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ant/AbstractCatalinaTask.java</file>
      <file>java/org/apache/catalina/ant/DeployTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="48318" reportTime="2009-12-01 07:07:07">
    <summary>WebDAV servlet returns 500 if files not readable</summary>
    <description>If a directory contains a file that is not readable by the Tomcat process (eg file permissions, dangling symlink) then Tomcat throws a NullPointerException and returns a 500 Internal Server Error to the client. Throwing NPE in these circumstances is certainly wrong. Returning 500 with no further information is unhelpful behavior and should be fixed. Generally, interfaces of this type at least list inaccessible files (Windows Explorer, UNIX ls(1), BSD FTP client, ...) and only return an error when one attempts to access such a file. markt suggests an alternative of simply ignoring inaccessible files but notes that "could cause issues if a user tries to upload a file of that name" and suggests better error reporting. Stack: SEVERE: Servlet.service() for servlet webdav threw exception java.lang.NullPointerException at org.apache.catalina.servlets.WebdavServlet.parseProperties(Unknown Source) at org.apache.catalina.servlets.WebdavServlet.doPropfind(Unknown Source) at org.apache.catalina.servlets.WebdavServlet.service(Unknown Source) at javax.servlet.http.HttpServlet.service(Unknown Source) ... Method parseProperties() is in java/org/apache/catalina/servlets/WebdavServlet.java.org and the NPE happens when cacheEntry.attributes is null (case FIND_BY_PROPERTY in my testing and possibly in other cases too). Following the breadcrumbs via: cacheEntry = resources.lookupCache(path); leads eventually to java/org/apache/naming/resources/FileDirContext.java: public Attributes getAttributes(String name, String[] attrIds) throws NamingException { // Building attribute list File file = file(name); if (file == null) throw new NamingException (sm.getString("resources.notFound", name)); ... protected File file(String name) { File file = new File(base, name); if (file.exists() &amp;&amp; file.canRead()) { ... // do useful stuff } else { return null; // ouch }</description>
    <commit commitTime="2010-02-13 05:26:40" id="da42e44"/>
    <fixedFiles>
      <file>java/org/apache/catalina/servlets/WebdavServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="48371" reportTime="2009-12-10 18:16:34">
    <summary>addWebXmlMappings does not place servlet tags correctly</summary>
    <description>If there is a commented-out &lt;security-constraint&gt; or commented-out &lt;servlet&gt; tag and addWebXmlMappings="true", the JSP's servlet and servlet-mapping tags are placed incorrectly and Tomcat will not start due to "--" being inside a comment. Basically, it seems the web.xml is not parsed correctly when using addWebXmlMappings and you cannot have above tags commented out, or new servlet tags will be placed incorrectly and comment tags not respected.</description>
    <commit commitTime="2010-02-14 03:40:00" id="563e315"/>
    <fixedFiles>
      <file>java/org/apache/jasper/JspC.java</file>
    </fixedFiles>
  </bug>
  <bug id="48384" reportTime="2009-12-13 16:24:30">
    <summary>globalXsltFile parameter for the DefaultServlet</summary>
    <description>When overriding the DefaultServlet for a given application, the globalXsltFile path need to be relative to Tomcat root. for example: &lt;init-param&gt; &lt;param-name&gt;globalXsltFile&lt;/param-name&gt; &lt;param-value&gt;webapps/quercus/WEB-INF/listing.xsl&lt;/param-value&gt; &lt;/init-param&gt; it would be nice if the path could be relative to the application context.</description>
    <commit commitTime="2010-02-14 03:40:00" id="0e595cf"/>
    <fixedFiles>
      <file>java/org/apache/catalina/servlets/DefaultServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="48498" reportTime="2010-01-06 19:40:54">
    <summary>6.0.22RC: ArrayIndexOutOfBoundsException from Jasper when compilation error inside a CDATA block</summary>
    <description/>
    <commit commitTime="2010-02-16 08:26:40" id="789ac1e"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/JavacErrorDetail.java</file>
    </fixedFiles>
  </bug>
  <bug id="48580" reportTime="2010-01-20 11:54:45">
    <summary>6.0.24: AccessControlException in ProtectedFunctionMapper on first access to certain JSP</summary>
    <description/>
    <commit commitTime="2010-02-16 16:46:40" id="9e55819"/>
    <fixedFiles>
      <file>java/org/apache/jasper/security/SecurityClassLoad.java</file>
    </fixedFiles>
  </bug>
  <bug id="48582" reportTime="2010-01-20 13:25:03">
    <summary>JspServletWrapper.getServletContext() throws NullPointerException</summary>
    <description/>
    <commit commitTime="2010-02-16 19:33:20" id="7301a10"/>
    <fixedFiles>
      <file>java/org/apache/jasper/servlet/JspServletWrapper.java</file>
    </fixedFiles>
  </bug>
  <bug id="48661" reportTime="2010-02-02 15:07:25">
    <summary>inconsistent error page behavior</summary>
    <description>There seems to be a bug or at least an inconsistency in how tomcat handles the error page. In Tomcat 6.0.20, if I define my error page like this in web.xml: &lt;error-page&gt; &lt;exception-type&gt;java.lang.Exception&lt;/exception-type&gt; &lt;location&gt;/unexpectedErrors.jsp&lt;/location&gt; &lt;/error-page&gt; Then, if the response has already been committed, Tomcat does this on the system console: Feb 1, 2010 5:59:04 PM org.apache.catalina.core.StandardWrapperValve invoke SEVERE: Servlet.service() for servlet jsp threw exception java.lang.NullPointerException at org.apache.jsp.cpe_jsp._jspService(cpe_jsp.java:693) at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:374) at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:342) at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:267) at javax.servlet.http.HttpServlet.service(HttpServlet.java:717) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.eaglecreektech.expedience.provisioning.web.servletFilters.AuthFilter.doFilter(AuthFilter.java:133) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.eaglecreektech.expedience.provisioning.web.servletFilters.RequestVolumeFilter.doFilter(RequestVolumeFilter.java:141) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.eaglecreektech.expedience.provisioning.web.servletFilters.StartupCheckFilter.doFilter(StartupCheckFilter.java:65) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454) at java.lang.Thread.run(Thread.java:619) Feb 1, 2010 5:59:04 PM org.apache.catalina.core.StandardHostValve custom SEVERE: Exception Processing ErrorPage[exceptionType=java.lang.Exception, location=/unexpectedErrors.jsp] java.lang.IllegalStateException: Cannot reset buffer after response has been committed at org.apache.catalina.connector.Response.resetBuffer(Response.java:691) at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:409) at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:271) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454) at java.lang.Thread.run(Thread.java:619) And it doesn't put any error text into the broken page - the page just shows how ever far it got before it encountered the error. This behavior doesn't seem correct - it seems like it should at least behave the same way as it does when the error page is defined in a jsp page: &lt;%@ page errorPage="unexpectedErrors.jsp" %&gt; If the response has already been committed, then it just appends the error page onto the end of the response (not ideal, but nothing else can be done, as far as I know) If the response has not been committed, it clears the buffer and writes the error page (which looks nice and pretty , like it should) I'd suggest that the error handling code for the error page as defined in web.xml should check if the response has been committed, and not try to clear the buffer if it is already committed - just append to the end, the same way that the jsp error handler does.</description>
    <commit commitTime="2010-03-09 01:40:00" id="1ec5ca7"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardHostValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="48729" reportTime="2010-02-11 17:27:55">
    <summary>JNDIRealm.java not parsing roles correctly</summary>
    <description/>
    <commit commitTime="2010-03-09 21:06:40" id="4cf35b8"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/JNDIRealm.java</file>
    </fixedFiles>
  </bug>
  <bug id="48737" reportTime="2010-02-13 18:19:03">
    <summary>JspCompilationContext assumes that tagfile with a path starting with META-INF are in jars without checking</summary>
    <description/>
    <commit commitTime="2010-03-09 21:06:40" id="6ac5036"/>
    <fixedFiles>
      <file>java/org/apache/jasper/JspCompilationContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="44265" reportTime="2008-01-18 02:51:47">
    <summary>Improve JspWriterImpl performance with "inline" sub method</summary>
    <description>As you know, the JspWriterImpl.write method was always invoked in JSP file frequently. But I found its performance is poor because too many sub method were invoked as well. After copying two sub method's code to write method, the performance was improved observably.</description>
    <commit commitTime="2010-03-12 01:53:20" id="9113574"/>
    <fixedFiles>
      <file>java/org/apache/jasper/runtime/JspWriterImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="48934" reportTime="2010-03-18 11:09:23">
    <summary>Cluster's regression. When replication fails once, replication can be never done again.</summary>
    <description/>
    <commit commitTime="2010-03-18 21:46:40" id="fc66705"/>
    <fixedFiles>
      <file>java/org/apache/catalina/tribes/transport/ReplicationTransmitter.java</file>
      <file>java/org/apache/catalina/tribes/transport/nio/PooledParallelSender.java</file>
    </fixedFiles>
  </bug>
  <bug id="48662" reportTime="2010-02-02 22:44:07">
    <summary>context.xml expansion on deployment improvements</summary>
    <description>Two parts: 1. Log a warning/info message if Tomcat ignores a bundled context.xml in favour of one in CATALINA_BASE/&lt;engine name&gt;/&lt;host name&gt; 2. Make the extraction/copying of context.xml configurable, probably via a new attribute extractXml on the host</description>
    <commit commitTime="2010-03-28 20:40:00" id="83226d9"/>
    <fixedFiles>
      <file>java/org/apache/catalina/Context.java</file>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
      <file>java/org/apache/catalina/core/StandardHost.java</file>
      <file>java/org/apache/catalina/mbeans/MBeanFactory.java</file>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
      <file>java/org/apache/catalina/startup/HostConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="48717" reportTime="2010-02-09 17:43:14">
    <summary>Session listeners not called on cluster node start</summary>
    <description/>
    <commit commitTime="2010-03-29 02:13:20" id="39d3082"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/session/DeltaManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="48895" reportTime="2010-03-11 22:20:01">
    <summary>WebAppClassLoader.clearThreadLocalMap() concurrency issues</summary>
    <description>I think that the memory leak protection of WebAppClassLoader.clearReferencesThreadLocals() which detects and clears ThreadLocals that would prevent GC the WebAppClassLoader instance has issues regarding concurrency : - It enumerates Threads and looks into internal structures of the Thread class, but there are no "memory barrier" that would ensure a consistent state of the ThreadLocalMap being examined. So, it is theoretically possible that a ThreadLocal in Thread A was properly cleaned up by the application, but the current thread B (that is undeploying the application) does not see the up to date state because there's no synchronization between those threads. - Much more severe : after detecting such a leak, it invokes java.lang.ThreadLocal.ThreadLocalMap.remove(ThreadLocal) on Thread A's ThreadLocalMap instance but the invocation is done by Thread B (the thread that undeploys the app). The remove() method is not thread safe at all, and nor is the expungeStaleEntries() method which may also be invoked in clearThreadLocalMap(). So, if a webapp is being undeployed while other applications continue to receive a heavy load of requests, this could corrupt the internal structures of the ThreadLocalMap instance ! I propose to keep the detection of leaks as it is, but to make the actual clearing optional (and disabled by default) to avoid encountering big problems in production. Idea to improve the clearing in a safe way : if the thread that is "provoking" the leak is one of tomcat's worker threads, we could mark it as "dirty", and then have a background task that would end such threads (renew those threads in the pool).</description>
    <commit commitTime="2010-03-29 21:40:00" id="ae6fcf5"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
      <file>java/org/apache/catalina/loader/WebappClassLoader.java</file>
      <file>java/org/apache/catalina/loader/WebappLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="48983" reportTime="2010-03-24 23:15:14">
    <summary>Enhance RemoteIpValve and RemoteIpFilter logging</summary>
    <description/>
    <commit commitTime="2010-04-04 19:20:00" id="9a42719"/>
    <fixedFiles>
      <file>java/org/apache/catalina/filters/RemoteIpFilter.java</file>
      <file>java/org/apache/catalina/valves/RemoteIpValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="49014" reportTime="2010-03-29 00:17:51">
    <summary>Add RemoteIpFilter test case</summary>
    <description/>
    <commit commitTime="2010-04-04 19:20:00" id="d9330a9"/>
    <fixedFiles>
      <file>test/org/apache/catalina/filters/TestRemoteIpFilter.java</file>
    </fixedFiles>
  </bug>
  <bug id="48648" reportTime="2010-01-31 17:58:11">
    <summary>Blank page (dropped connection) when running TC7 with TCnative (APR)</summary>
    <description/>
    <commit commitTime="2010-04-05 00:53:20" id="216352a"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/net/AprEndpoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="49018" reportTime="2010-03-29 15:18:35">
    <summary>Timeout argument misprocessed when expiring sessions from Tomcat Manager</summary>
    <description>Steps to reproduce: 1. Login to the Tomcat Manager Application 2. Select a web application that has several sessions that are inactive for more than 2 minutes 3. In the text field next to the "Expire sessions" button print "2" 4. Press "Expire sessions" 5. Sample observed result: OK - Session information for application at context path /myapp Default maximum session inactive interval 30 minutes &lt;1 minutes:16 sessions 1 - &lt;2 minutes:2 sessions 2 - &lt;3 minutes:5 sessions 3 - &lt;4 minutes:1 sessions 4 - &lt;5 minutes:2 sessions 5 - &lt;6 minutes:1 sessions 6 - &lt;7 minutes:2 sessions 9 - &lt;10 minutes:1 sessions 8 minutes:expired 0 sessions Actually some sessions were expired (even if the above message prints "0"). Expected result: All sessions with idle time &gt; 2 minutes had to be expired. The bug is in the following lines of ManagerServlet#sessions(PrintWriter, String, int): Lines 1176-1179 if (idle &gt;= 0 &amp;&amp; time &gt;= idle*60) { sessions[i].expire(); idle++; } The patch would be to replace "idle++" with "expired++", because "idle" is the time (in minutes) as submitted from the web form and "expired" is the counter.</description>
    <commit commitTime="2010-04-07 11:13:20" id="155e3f8"/>
    <fixedFiles>
      <file>java/org/apache/catalina/manager/ManagerServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="49075" reportTime="2010-04-08 18:15:55">
    <summary>protected Class User doesn't check argument roles for null</summary>
    <description/>
    <commit commitTime="2010-04-09 18:46:40" id="e59ba8f"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/JNDIRealm.java</file>
    </fixedFiles>
  </bug>
  <bug id="49086" reportTime="2010-04-11 16:43:49">
    <summary>Addition of Javadoc for Servlet 3.0 annotations</summary>
    <description/>
    <commit commitTime="2010-04-12 19:00:00" id="6fc4360"/>
    <fixedFiles>
      <file>java/javax/servlet/annotation/HandlesTypes.java</file>
      <file>java/javax/servlet/annotation/HttpConstraint.java</file>
      <file>java/javax/servlet/annotation/HttpMethodConstraint.java</file>
      <file>java/javax/servlet/annotation/MultipartConfig.java</file>
      <file>java/javax/servlet/annotation/ServletSecurity.java</file>
      <file>java/javax/servlet/annotation/WebFilter.java</file>
      <file>java/javax/servlet/annotation/WebInitParam.java</file>
      <file>java/javax/servlet/annotation/WebListener.java</file>
      <file>java/javax/servlet/annotation/WebServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="49091" reportTime="2010-04-11 22:31:35">
    <summary>Util.specialCharactersRepresentation should be private</summary>
    <description>jasper.tagplugins.jstl.Util.specialCharactersRepresentation is a mutable public static array; it is not used outside the class as far as I can tell and so should be made private</description>
    <commit commitTime="2010-04-12 19:00:00" id="1ecfaa9"/>
    <fixedFiles>
      <file>java/org/apache/jasper/tagplugins/jstl/Util.java</file>
    </fixedFiles>
  </bug>
  <bug id="49116" reportTime="2010-04-14 04:43:30">
    <summary>Memory leak by HttpSession.</summary>
    <description>When session is stored in StandardManager#doUnload method, an invalid session is stored. For instance, If HttpSession#invalidate is executed while executing StandardManager#doUnload, session of "isValid=false" is stored. The session of isValid=false is restored in StandardManager#doLoad, and it registers in session map (sessions). However, no one can invalidate this session. If isValid is false, StandardSession#invalidate() and StandardSession#isValid() can not expire session. They are throws IllegalStateException or return immediately. Consequently, the session of isValid=false is never deleted from the session map(sessions). I made a patch. If session is already invalid, expire session to prevent memory leak. Best Regards. Keiichi.</description>
    <commit commitTime="2010-04-14 15:26:40" id="bddfc0a"/>
    <fixedFiles>
      <file>java/org/apache/catalina/session/StandardManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="49089" reportTime="2010-04-11 22:24:38">
    <summary>ChannelData.USE_SECURE_RANDOM_FOR_UUID public static mutable field</summary>
    <description>catalina.tribes.io.ChannelData.USE_SECURE_RANDOM_FOR_UUID is a mutable public static field. It's only used by an instance method, so there's no need for it to be static. Probably no need for it to be public either; it could be a private field with a setter - or better a final field set by the constructor.</description>
    <commit commitTime="2010-04-14 18:13:20" id="cb0b029"/>
    <fixedFiles>
      <file>java/org/apache/catalina/tribes/io/ChannelData.java</file>
    </fixedFiles>
  </bug>
  <bug id="49045" reportTime="2010-04-04 05:40:57">
    <summary>JMX Enhancement- Provision of MBeanFactory createStandardService</summary>
    <description>Currently MBeanFactory doesn't have a method for creating a new StandardService MBean. This would become an issue for future enhancements of JMX support in Tomcat. As per discussions with Mark, this enhancement is suggested as a starting point for possible future enhancements in JMX support.</description>
    <commit commitTime="2010-04-14 21:00:00" id="32046eb"/>
    <fixedFiles>
      <file>java/org/apache/catalina/mbeans/MBeanFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="49103" reportTime="2010-04-12 18:57:56">
    <summary>Missing annotations</summary>
    <description/>
    <commit commitTime="2010-04-15 05:20:00" id="1018cd7"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/Http11NioProtocol.java</file>
      <file>java/org/apache/coyote/http11/Http11Protocol.java</file>
      <file>java/org/apache/tomcat/util/net/AprEndpoint.java</file>
      <file>java/org/apache/tomcat/util/net/NioEndpoint.java</file>
      <file>java/org/apache/tomcat/util/net/jsse/JSSEImplementation.java</file>
    </fixedFiles>
  </bug>
  <bug id="49104" reportTime="2010-04-12 18:59:00">
    <summary>Fix up some raw types</summary>
    <description/>
    <commit commitTime="2010-04-15 05:20:00" id="5be4f29"/>
    <fixedFiles>
      <file>java/org/apache/coyote/ajp/AjpProtocol.java</file>
      <file>java/org/apache/coyote/http11/Http11Protocol.java</file>
      <file>java/org/apache/tomcat/util/net/JIoEndpoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="49106" reportTime="2010-04-12 19:01:41">
    <summary>Unused imports</summary>
    <description/>
    <commit commitTime="2010-04-15 05:20:00" id="f8d3565"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/JNDIRealm.java</file>
    </fixedFiles>
  </bug>
  <bug id="49109" reportTime="2010-04-12 19:36:53">
    <summary>RealmBase.authenticate uses toString on byte array</summary>
    <description>catalina.realm.RealmBase.authenticate(String username, byte[] credentials) has the following code: return (authenticate(username, credentials.toString())); This looks wrong, as credentials is a byte array. It should probably be: return (authenticate(username, new String(credentials[,charset])));</description>
    <commit commitTime="2010-04-15 05:20:00" id="bcf0a01"/>
    <fixedFiles>
      <file>java/org/apache/catalina/Realm.java</file>
      <file>java/org/apache/catalina/realm/CombinedRealm.java</file>
      <file>java/org/apache/catalina/realm/LockOutRealm.java</file>
      <file>java/org/apache/catalina/realm/RealmBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="49110" reportTime="2010-04-12 19:50:48">
    <summary>runtime.JspFactoryImpl$PageContextPool needs to be static</summary>
    <description>Findbugs says: Bug: org.apache.jasper.runtime.JspFactoryImpl$PageContextPool needs to be _static_ to avoid a deadly embrace with org.apache.jasper.runtime.JspFactoryImpl.localPool Pattern id: SIC_THREADLOCAL_DEADLY_EMBRACE, type: SIC, category: CORRECTNESS This class is an inner class, but should probably be a static inner class. As it is, there is a serious danger of a deadly embrace between the inner class and the thread local in the outer class. Because the inner class isn't static, it retains a reference to the outer class. If the thread local contains a reference to an instance of the inner class, the inner and outer instance will both be reachable and not eligible for garbage collection.</description>
    <commit commitTime="2010-04-15 08:06:40" id="b027259"/>
    <fixedFiles>
      <file>java/org/apache/jasper/runtime/JspFactoryImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="49118" reportTime="2010-04-14 05:40:15">
    <summary>Inefficient use of String concatenation in loop</summary>
    <description/>
    <commit commitTime="2010-04-15 08:06:40" id="95a2eb8"/>
    <fixedFiles>
      <file>java/javax/servlet/http/HttpServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="49129" reportTime="2010-04-14 19:09:31">
    <summary>DigestAuthenticator.md5Helper - possible incorrect lazy initialisation</summary>
    <description>Findbugs says: "This method contains an unsynchronized lazy initialization of a non-volatile static field. Because the compiler or processor may reorder instructions, threads are not guaranteed to see a completely initialized object, if the method can be called by multiple threads. You can make the field volatile to correct the problem."</description>
    <commit commitTime="2010-04-15 08:06:40" id="867605f"/>
    <fixedFiles>
      <file>java/org/apache/catalina/authenticator/DigestAuthenticator.java</file>
    </fixedFiles>
  </bug>
  <bug id="49150" reportTime="2010-04-19 03:37:08">
    <summary>All primary sessions are deleted at BackupManager#stopInternal.</summary>
    <description>BackupManager#stopInternal is as follows. ===== protected synchronized void stopInternal() throws LifecycleException { super.stopInternal(); LazyReplicatedMap map = (LazyReplicatedMap)sessions; if ( map!=null ) { map.breakdown(); } cluster.removeManager(this); } ===== In Tomcat 7.0.0 RC1, super#stopInternal() is called first. In StandardManager#stopInternal() of the super class, The session is stored, and expire all active sessions. Storing session is unnecessary in BackupManager. and When the session expired, the session is deleted from all cluster nodes. As a Result, All primary sessions (of own node has) are deleted from all cluster nodes. For instance, Node1 : sessionA(primary), sessionB(proxy), sessionC(backup) Node2 : sessionA(backup), sessionB(primary), sessionC(proxy) Node3 : sessionA(proxy), sessionB(backup), sessionC(primary) If Node1 is stopped, it becomes the following. Node1 : stopped Node2 : sessionB(primary), sessionC(backup) Node3 : sessionB(backup), sessionC(primary) sessionA is expired. It should be the following. Node1 : stopped Node2 : sessionA(primary), sessionB(primary), sessionC(backup) Node3 : sessionA(backup), sessionB(backup), sessionC(primary) There is no problem in Tomcat6.0.x, because it executes super.stop() after LazyReplicatedMap#breakdown() . I made a patch against trunk. Best Regards.</description>
    <commit commitTime="2010-04-19 17:40:00" id="09f4e25"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/session/BackupManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="49151" reportTime="2010-04-19 05:02:32">
    <summary>ClassCastException in BackupManager#stopInternal.</summary>
    <description>In BackupManager#startInternal, When constructor of LazyReplicatedMap throws exception, sessions is not LazyReplicatedMap. Actually, AbstractReplicatedMap#init has the possibility of throwing RuntimeException. In BackupManager#stopInternal ClassCastException is thrown because AbstractReplicatedMap#breakdown is executed regardless of the type of sessions. should be changed as follows to avoid ClassCastException. === skip. if (sessions instanceof LazyReplicatedMap) { LazyReplicatedMap map = (LazyReplicatedMap)sessions; if ( map!=null ) { map.breakdown(); } } skip. === This problem exists in Tomcat7.0 and 6.0. Best Regards.</description>
    <commit commitTime="2010-04-19 17:40:00" id="fcb9861"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/session/BackupManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="49141" reportTime="2010-04-16 21:21:03">
    <summary>Impossible cast in naming.factory.SendMailFactory.getObjectInstance</summary>
    <description>naming.factory.SendMailFactory.getObjectInstance contains an impossible cast from javax.mail.internet.MimeMessage to javax.mail.internet.MimePart [Findbugs]</description>
    <commit commitTime="2010-04-21 03:00:00" id="7205c74"/>
    <fixedFiles>
      <file>java/javax/mail/internet/MimeMessage.java</file>
    </fixedFiles>
  </bug>
  <bug id="43642" reportTime="2007-10-17 08:00:46">
    <summary>Add prestartminSpareThreads attribute for Executor</summary>
    <description>The attached patch adds the boolean attribute prestartminSpareThreads to the Executor element. This allows the admin to prestart minspareThreads for this Executor during the start of Tomcat. The default value is false which is the old behaviour. A documentation patch for executor.xml can be created if there is interest in committing this patch.</description>
    <commit commitTime="2010-04-21 19:40:00" id="e7fb8fa"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardThreadExecutor.java</file>
    </fixedFiles>
  </bug>
  <bug id="49170" reportTime="2010-04-22 06:54:01">
    <summary>Transmission of duplicated session in DeltaManager#handleGET_ALL_SESSIONS.</summary>
    <description/>
    <commit commitTime="2010-04-22 17:53:20" id="f61100d"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/session/DeltaManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="49171" reportTime="2010-04-22 07:10:06">
    <summary>Avoid raw type warning in TagSupport</summary>
    <description/>
    <commit commitTime="2010-04-23 21:40:00" id="8bd4d7a"/>
    <fixedFiles>
      <file>java/javax/servlet/jsp/tagext/TagSupport.java</file>
    </fixedFiles>
  </bug>
  <bug id="49144" reportTime="2010-04-16 21:47:20">
    <summary>Incorrect lazy initialization and update of static fields?</summary>
    <description>Incorrect lazy initialization and update of static fields: org.apache.catalina.startup.Bootstrap.daemon org.apache.catalina.startup.ContextConfig.contextDigester Findbugs says: This method contains an unsynchronized lazy initialization of a static field. After the field is set, the object stored into that location is further updated or accessed. The setting of the field is visible to other threads as soon as it is set. If the futher accesses in the method that set the field serve to initialize the object, then you have a very serious multithreading bug, unless something else prevents any other thread from accessing the stored object until it is fully initialized. Even if you feel confident that the method is never called by multiple threads, it might be better to not set the static field until the value you are setting it to is fully populated/initialized.</description>
    <commit commitTime="2010-04-23 21:40:00" id="fd7ed83"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/Bootstrap.java</file>
    </fixedFiles>
  </bug>
  <bug id="49140" reportTime="2010-04-16 21:14:48">
    <summary>Inefficient use of keySet() iterator in StandardContext.java</summary>
    <description/>
    <commit commitTime="2010-04-24 00:26:40" id="b30fc95"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/Request.java</file>
      <file>java/org/apache/catalina/core/ApplicationHttpRequest.java</file>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
      <file>java/org/apache/catalina/ha/authenticator/ClusterSingleSignOnListener.java</file>
      <file>java/org/apache/catalina/ha/session/ClusterSessionListener.java</file>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="49184" reportTime="2010-04-25 08:54:34">
    <summary>Index out of bounds exception thrown when dynamically adding Filter</summary>
    <description>When dynamically adding a filter to a context an exception is thrown. java.lang.ArrayIndexOutOfBoundsException at java.lang.System.arraycopy(Native Method) at org.apache.catalina.core.StandardContext.addFilterMapBefore(StandardContext.java:2629) at org.apache.catalina.core.ApplicationFilterRegistration.addMappingForServletNames(ApplicationFilterRegistration.java:75)</description>
    <commit commitTime="2010-04-26 16:20:00" id="3f4a241"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="49207" reportTime="2010-04-28 05:40:52">
    <summary>Filter name not set when dynamically added</summary>
    <description>When dynamically adding a Filter the name is not set when calling the method "addMappingForUrlPatterns" in ApplicationFilterRegistration.java. java.lang.IllegalArgumentException: Filter mapping specifies an unknown filter name null at org.apache.catalina.core.StandardContext.validateFilterMap(StandardContext.java:2650) at org.apache.catalina.core.StandardContext.addFilterMapBefore(StandardContext.java:2622) at org.apache.catalina.core.ApplicationFilterRegistration.addMappingForUrlPatterns(ApplicationFilterRegistration.java:102) at org.pidster.tomcat.test7.dyn.TestDynamicsListener.contextInitialized(TestDynamicsListener.java:105)</description>
    <commit commitTime="2010-04-28 23:53:20" id="3396917"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ApplicationFilterRegistration.java</file>
    </fixedFiles>
  </bug>
  <bug id="49092" reportTime="2010-04-11 22:37:12">
    <summary>util.IntrospectionUtils.PATH_SEPARATOR should be final</summary>
    <description>The field org.apache.tomcat.util.IntrospectionUtils.PATH_SEPARATOR should be final.</description>
    <commit commitTime="2010-05-02 00:06:40" id="616bd68"/>
    <fixedFiles>
      <file>test/org/apache/catalina/tribes/demos/IntrospectionUtils.java</file>
    </fixedFiles>
  </bug>
  <bug id="49240" reportTime="2010-05-01 07:46:16">
    <summary>Error thrown during detection of ServletContainerInitializer's</summary>
    <description>ContextConfig.checkHandlesTypes() throws a NoClassDefFoundError, which isn't caught, when the class being analysed is initialised if the class, or a class that it references(?), is not present in the classpath. E.g. When a mysql connector/j jar (v5.x) is scanned, an attempt to load the following class occurs: com.mchange.v2.c3p0.QueryConnectionTester java.lang.NoClassDefFoundError: com/mchange/v2/c3p0/QueryConnectionTester at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClass(ClassLoader.java:698) at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124) at java.net.URLClassLoader.defineClass(URLClassLoader.java:260) at java.net.URLClassLoader.access$000(URLClassLoader.java:56) at java.net.URLClassLoader$1.run(URLClassLoader.java:195) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(URLClassLoader.java:188) at java.lang.ClassLoader.loadClass(ClassLoader.java:315) at java.lang.ClassLoader.loadClass(ClassLoader.java:250) at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:398) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:247) Also Class.forName is used here, referencing the WebappClassLoader, instead of calling WebappClassLoader.loadClass() directly.</description>
    <commit commitTime="2010-05-11 17:26:40" id="f24ed2d"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="49228" reportTime="2010-04-29 11:31:40">
    <summary>toLowerCase()/toUpperCase() may not work OK in all Locales</summary>
    <description/>
    <commit commitTime="2010-05-11 23:00:00" id="a954806"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Validator.java</file>
      <file>java/org/apache/jasper/tagplugins/jstl/Util.java</file>
    </fixedFiles>
  </bug>
  <bug id="49235" reportTime="2010-04-30 03:08:29">
    <summary>ServletContainerInitializer onStartup(Set&lt;Class&lt;?&gt;&gt; classSet is not expect class</summary>
    <description/>
    <commit commitTime="2010-05-11 23:00:00" id="4a581aa"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="49227" reportTime="2010-04-29 11:30:31">
    <summary>toLowerCase()/toUpperCase() may not work OK in all Locales</summary>
    <description/>
    <commit commitTime="2010-05-12 04:33:20" id="09abffb"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/Http11AprProcessor.java</file>
      <file>java/org/apache/coyote/http11/Http11NioProcessor.java</file>
      <file>java/org/apache/coyote/http11/Http11Processor.java</file>
    </fixedFiles>
  </bug>
  <bug id="49221" reportTime="2010-04-29 09:40:27">
    <summary>javax.servlet.http.Cookie.setDomain uses default charset</summary>
    <description>javax.servlet.http.Cookie.setDomain(String pattern) has the following code: domain = pattern.toLowerCase(); The result of this depends on the default Locale; it would be safer to use a fixed locale, e.g. Local.ENGLISH.</description>
    <commit commitTime="2010-05-12 18:26:40" id="05810ee"/>
    <fixedFiles>
      <file>java/javax/servlet/http/Cookie.java</file>
    </fixedFiles>
  </bug>
  <bug id="49290" reportTime="2010-05-14 10:26:11">
    <summary>Using a JarScanner with scanAllDirectories=true causes Tomcat 7 not to start</summary>
    <description/>
    <commit commitTime="2010-05-16 05:46:40" id="a7b96d0"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="49360" reportTime="2010-05-29 17:45:06">
    <summary>Context class reload fails for PersistentManager</summary>
    <description>On context class reload tomcat fails with LifecycleException: An invalid Lifecycle transition was attempted ([before_start]) for component [org.apache.catalina.session.PersistentManager[/xxx]] in state [DESTROYED]</description>
    <commit commitTime="2010-06-01 02:20:00" id="ac22dd8"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/session/BackupManager.java</file>
      <file>java/org/apache/catalina/ha/session/DeltaManager.java</file>
      <file>java/org/apache/catalina/session/PersistentManagerBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="48971" reportTime="2010-03-23 22:56:08">
    <summary>memory leak protection : stopping TimeThreads should be optional and disabled by default</summary>
    <description/>
    <commit commitTime="2010-06-02 00:33:20" id="ac8a5ba"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
      <file>java/org/apache/catalina/loader/WebappClassLoader.java</file>
      <file>java/org/apache/catalina/loader/WebappLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="49376" reportTime="2010-06-03 07:33:13">
    <summary>Minor corrections to info properties.</summary>
    <description>The static info properties appear to contain legacy packages.</description>
    <commit commitTime="2010-06-07 05:33:20" id="e119b5b"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/authenticator/ClusterSingleSignOn.java</file>
      <file>java/org/apache/catalina/ha/authenticator/ClusterSingleSignOnListener.java</file>
      <file>java/org/apache/catalina/ha/session/ClusterSessionListener.java</file>
    </fixedFiles>
  </bug>
  <bug id="49445" reportTime="2010-06-16 05:08:02">
    <summary>After session ID is changed on authentication, the session replication does not work.</summary>
    <description>After r889716, session ID is changed on authentication. (default of changeSessionIdOnAuthentication is true. ) But DeltaManager doesn't notify other cluster nodes. Therefore, non-primary node keeps having old session ID. And, can not replicate of change of session attribute notified by new session ID. The workaround is ... override changeSessionId method, and notify to change session ID. BackupManager is OK. This problem is DeltaManager only. Best regards.</description>
    <commit commitTime="2010-06-16 20:06:40" id="4f990f1"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/session/DeltaManager.java</file>
      <file>java/org/apache/catalina/ha/session/SessionMessage.java</file>
      <file>java/org/apache/catalina/ha/session/SessionMessageImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="49443" reportTime="2010-06-15 07:38:37">
    <summary>RemoteIpValve : remoteIpHeader vs remoteIPHeader</summary>
    <description/>
    <commit commitTime="2010-06-18 19:20:00" id="27091e7"/>
    <fixedFiles>
      <file>java/org/apache/catalina/filters/RemoteIpFilter.java</file>
      <file>java/org/apache/catalina/valves/RemoteIpValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="49476" reportTime="2010-06-20 11:47:00">
    <summary>Cannot expire selected session in Manager webapp</summary>
    <description/>
    <commit commitTime="2010-06-24 17:00:00" id="a0159a3"/>
    <fixedFiles>
      <file>java/org/apache/catalina/filters/CsrfPreventionFilter.java</file>
      <file>java/org/apache/catalina/manager/HTMLManagerServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="49522" reportTime="2010-06-29 10:41:51">
    <summary>Complete Server status (status/all) causes stack trace</summary>
    <description>type Exception report message description The server encountered an internal error () that prevented it from fulfilling this request. exception javax.servlet.ServletException: javax.management.AttributeNotFoundException: Cannot find attribute startTime for org.apache.catalina.deploy.NamingResources@d1c778 org.apache.catalina.manager.StatusManagerServlet.doGet(StatusManagerServlet.java:292) javax.servlet.http.HttpServlet.service(HttpServlet.java:621) javax.servlet.http.HttpServlet.service(HttpServlet.java:722) root cause javax.management.AttributeNotFoundException: Cannot find attribute startTime for org.apache.catalina.deploy.NamingResources@d1c778 org.apache.tomcat.util.modeler.ManagedBean.getGetter(ManagedBean.java:493) org.apache.tomcat.util.modeler.BaseModelMBean.getAttribute(BaseModelMBean.java:180) com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(DefaultMBeanServerInterceptor.java:666) com.sun.jmx.mbeanserver.JmxMBeanServer.getAttribute(JmxMBeanServer.java:638) org.apache.catalina.manager.StatusTransformer.writeContext(StatusTransformer.java:656) org.apache.catalina.manager.StatusTransformer.writeDetailedState(StatusTransformer.java:590) org.apache.catalina.manager.StatusManagerServlet.doGet(StatusManagerServlet.java:287) javax.servlet.http.HttpServlet.service(HttpServlet.java:621) javax.servlet.http.HttpServlet.service(HttpServlet.java:722)</description>
    <commit commitTime="2010-07-02 02:46:40" id="3c88f07"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="49525" reportTime="2010-06-29 22:22:03">
    <summary>IE8: Unabled to store data in HttpSession (root context)</summary>
    <description>Environment: Tomcat 7.0.0 Beta IE8 A simplest webapp only have a test.jsp below: &lt;%=request.getSession().getId()%&gt; this app installed as root context the test.jsp works fine in firefox but when using IE8 there is always a different session id where refresh the test page. BTW: the test.jsp works find in Tomcat 6.x</description>
    <commit commitTime="2010-07-02 02:46:40" id="0b8a9a8"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ApplicationSessionCookieConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="49530" reportTime="2010-06-30 10:08:43">
    <summary>Context is not correctly stopped at shutdown</summary>
    <description/>
    <commit commitTime="2010-07-03 01:00:00" id="3bd4bcb"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ContainerBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="49550" reportTime="2010-07-05 07:23:31">
    <summary>[PATCH] Response class fix isSpace (deprecated) =&gt; isWhiteSpace</summary>
    <description/>
    <commit commitTime="2010-07-06 04:00:00" id="7b9630b"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/Response.java</file>
    </fixedFiles>
  </bug>
  <bug id="49551" reportTime="2010-07-05 07:41:23">
    <summary>When setting absolute path to default context.xml, in ContextConfig.contextConfig() it cannot be found</summary>
    <description/>
    <commit commitTime="2010-07-06 04:00:00" id="dca6dd1"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="49503" reportTime="2010-06-25 11:22:41">
    <summary>Connectors do not bind to their ports in Catalina.load(), but only later in start()</summary>
    <description/>
    <commit commitTime="2010-07-08 22:40:00" id="a90b576"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/Connector.java</file>
    </fixedFiles>
  </bug>
  <bug id="49570" reportTime="2010-07-08 02:11:36">
    <summary>The CompressionFilter example should support HTTP proxies to cache gzipped content better by sending Vary: Accept-Encoding header</summary>
    <description/>
    <commit commitTime="2010-07-11 00:40:00" id="c191152"/>
    <fixedFiles>
      <file>webapps/examples/WEB-INF/classes/compressionFilters/CompressionResponseStream.java</file>
    </fixedFiles>
  </bug>
  <bug id="49442" reportTime="2010-06-15 05:41:37">
    <summary>Make StringManager fields final</summary>
    <description/>
    <commit commitTime="2010-07-11 06:13:20" id="4159093"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/res/StringManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="49478" reportTime="2010-06-21 05:43:57">
    <summary>Add encoding parameter to AddDefaultCharSetFilter</summary>
    <description>AddDefaultCharSetFilter adds a default charset to each request. It assumes ISO-8859-1 as the default charset. The attached patch makes it configurable by introducing an "encoding" parameter. This parameter can take one of two special values "default" or "system". Every other value will be interpreted as a name of an character set, e.g "utf-8". The meaning of the two special values are as follows: default: use ISO-8859-1. This value will also be used, if no parameter was specified, or if it is empty system: the jvm will be asked for the default charset. This charset will usually be set by system locale. Together with this functional change, there are two minor changes and one bigger changes hidden. First use of annotation "Override" at overriden methods. Second use of keyword "static" for the ResponseWrapper, since it has no reference to outer class. The third and somewhat bigger change is use of HttpServletResponse#setCharacterEncoding(encoding) instead of manipulating the content-type.</description>
    <commit commitTime="2010-07-11 06:13:20" id="d6766f1"/>
    <fixedFiles>
      <file>java/org/apache/catalina/filters/AddDefaultCharsetFilter.java</file>
      <file>test/org/apache/catalina/filters/TestAddCharSetFilter.java</file>
    </fixedFiles>
  </bug>
  <bug id="48960" reportTime="2010-03-22 16:37:48">
    <summary>SSI Servlet should support safe configuration</summary>
    <description>The current configuration of the SSI module is "All" or "None". The "ALL" option will expose all the legacy Apache SSI directive (echo, printenv, if, exec, ...). As documented, allowing SSI will allow execution of arbitrary programs using the "exec". As a result, there is no safe way to expose sites/projects containing SSI directive, without taking a security risk, or reviewing of every file. The "exec" directive, with the cmd option is a major risk. Even for Apache, you have the option to allowing the "safe" include (includeNoExec). The includeNoExec allow pages to be served, even when the content is not reviewed, or when users are allowed to upload content to the site. I have a big site which need to be converted into JSP. I would like to use the SSI servlet to allow for transition over time. The extra risk from ( from exec cmd) make it impossible to deploy the SSI. My request: Modify the configuration of SSI as follow: By default, it will only allow "safe" directive (no exec cmd=...). This will eliminate the risk from arbitrary execution of commands ("del *.*"). It will also remove many potentail load problems. The cmd= should only be allowed using a directive like "allowUnsafeExec", which will default to false. I think that the change will make it easier to use the SSI feature, without exposing the server to big risk. The risk associated with the "safer" version of SSI is similar to the risk from running JSP pages.</description>
    <commit commitTime="2010-07-14 06:26:40" id="a36b0c0"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ssi/SSIFilter.java</file>
      <file>java/org/apache/catalina/ssi/SSIProcessor.java</file>
      <file>java/org/apache/catalina/ssi/SSIServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="49128" reportTime="2010-04-14 19:06:21">
    <summary>loader.WebappClassLoader.start() ignores Exception</summary>
    <description>catalina.loader.WebappClassLoader.start() ignores Exception. However, it probably only needs to ignore SecurityException</description>
    <commit commitTime="2010-07-15 04:40:00" id="e8245ef"/>
    <fixedFiles>
      <file>java/org/apache/catalina/loader/WebappClassLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="48998" reportTime="2010-03-26 16:38:18">
    <summary>Proposal : port mod_expires in java as ExpiresFilter Servlet Filter</summary>
    <description/>
    <commit commitTime="2010-07-15 07:26:40" id="7963a16"/>
    <fixedFiles>
      <file>java/org/apache/catalina/filters/ExpiresFilter.java</file>
      <file>test/org/apache/catalina/filters/TestExpiresFilter.java</file>
    </fixedFiles>
  </bug>
  <bug id="49617" reportTime="2010-07-19 17:44:38">
    <summary>Fix ExpiresFilter docs (remove remaining ExpiresActive reference)</summary>
    <description>Remove the last references to the removed configuration parameter ExpiresActive.</description>
    <commit commitTime="2010-07-22 00:33:20" id="dfbd8aa"/>
    <fixedFiles>
      <file>java/org/apache/catalina/filters/ExpiresFilter.java</file>
      <file>test/org/apache/catalina/filters/TestExpiresFilter.java</file>
    </fixedFiles>
  </bug>
  <bug id="49567" reportTime="2010-07-07 09:22:22">
    <summary>when starting a new thread from a startAsync Runnable, an infinite amount of doPosts is generated</summary>
    <description/>
    <commit commitTime="2010-07-22 17:13:20" id="2357fb5"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/CoyoteAdapter.java</file>
      <file>java/org/apache/catalina/connector/Request.java</file>
      <file>java/org/apache/catalina/core/AsyncContextImpl.java</file>
      <file>java/org/apache/coyote/http11/Http11Processor.java</file>
      <file>test/org/apache/catalina/core/TestAsyncContextImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="49613" reportTime="2010-07-19 06:23:09">
    <summary>Request.getAttributeNames() slows down some applications</summary>
    <description/>
    <commit commitTime="2010-07-22 22:46:40" id="5f1ad13"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/Request.java</file>
    </fixedFiles>
  </bug>
  <bug id="49407" reportTime="2010-06-08 15:58:58">
    <summary>backup manager reports too few current sessions</summary>
    <description>With 100 sessions shared across 4 nodes (i.e. 25 active sessions per node), the delta manager reports 100 current sessions per node (25 active and the copies of the sessions from the other nodes). The back manager reports 25. For consistency it should report 50. The 25 active sessions plus the 25 (or so) that are backed up on that node.</description>
    <commit commitTime="2010-07-30 03:00:00" id="d21b105"/>
    <fixedFiles>
      <file>java/org/apache/catalina/session/ManagerBase.java</file>
      <file>java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java</file>
    </fixedFiles>
  </bug>
  <bug id="49655" reportTime="2010-07-27 10:32:48">
    <summary>ExpressionFactoryImpl.createMethodExpression() is not EL 2.2 Spec conform</summary>
    <description/>
    <commit commitTime="2010-08-02 06:00:00" id="96a99ce"/>
    <fixedFiles>
      <file>test/org/apache/el/TestMethodExpressionImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="49714" reportTime="2010-08-05 22:06:15">
    <summary>The annotation process of Jar should not impact distributable of web.xml.</summary>
    <description>Even if &lt; distributable/&gt; is set to web.xml(servlet3.0), distributable is changed from true to false by the annotation process of JAR. ContextConfig#processAnnotations is as follows. ===ContextConfig#processAnnotations protected void processAnnotations(Set&lt;WebXml&gt; fragments) { for(WebXml fragment : fragments) { if (!fragment.isMetadataComplete()) { WebXml annotations = new WebXml(); URL url = fragment.getURL(); processAnnotationsUrl(url, annotations); Set&lt;WebXml&gt; set = new HashSet&lt;WebXml&gt;(); set.add(annotations); // Merge annotations into fragment - fragment takes priority fragment.merge(set); } } } === distributable of "annotations" created by new WebXml() is false (default). If "annotations" is merged with "fragment", distributable of "fragment" becomes false. Because "fragment" is merged with web.xml of the web application, even if &lt; distributable/&gt; is set to web.xml, distributable is changed from true to false. The following are necessary. annotations.setDistributable(true); Best regards.</description>
    <commit commitTime="2010-08-06 10:00:00" id="f4a10ec"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="49757" reportTime="2010-08-16 13:13:12">
    <summary>correcting some generics related warnings</summary>
    <description>Patch attached. Thanks</description>
    <commit commitTime="2010-08-22 23:13:20" id="d446678"/>
    <fixedFiles>
      <file>java/org/apache/catalina/manager/JMXProxyServlet.java</file>
      <file>java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java</file>
    </fixedFiles>
  </bug>
  <bug id="49750" reportTime="2010-08-15 11:06:54">
    <summary>WebappClassLoader.validate(name) does not validate javax.servlet.</summary>
    <description>The method does not validate the class name as described in the method documentation. "Validate a classname. As per SRV.9.7.2, we must restrict loading of classes from J2SE (java.*) and classes of the servlet API (javax.servlet.*) "</description>
    <commit commitTime="2010-08-24 00:13:20" id="6fce7d7"/>
    <fixedFiles>
      <file>java/org/apache/catalina/loader/WebappClassLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="49670" reportTime="2010-07-29 10:43:35">
    <summary>org.apache.catalina.authenticator.SingleSignOn valve does not function</summary>
    <description>I have two web applications; neither declare a realm in the context.xml and both are configured for authentication in the web.xml using standard tomcat authentication methods. I have enabled the tomcat valve in the host and have added a realm to the host as well. &lt;Host name="localhost" appBase="webapps" unpackWARs="true" autoDeploy="true"&gt; &lt;Realm className="org.apache.catalina.realm.JAASRealm" appName="SSO" userClassNames="a.b.c" roleClassNames="a.b.c" useContextClassLoader="false"/&gt; &lt;!-- SingleSignOn valve, share authentication between web applications Documentation at: /docs/config/valve.html --&gt; &lt;Valve className="org.apache.catalina.authenticator.SingleSignOn"/&gt; &lt;!-- Access log processes all example. Documentation at: /docs/config/valve.html --&gt; &lt;!-- &lt;Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs" prefix="localhost_access_log." suffix=".txt" pattern="common" resolveHosts="false"/&gt; --&gt; I have added a jaas configuration for the SSO app in the jaas.conf file for the server. I am certain that the realm, jaas.conf are all configured properly as the web applications do require a user to authenticate before accessing the application, but if I have authenticated to one application I still am required to authenticate before accessing the other application. I have this exact same configuration working on a tomcat 6 environment, but an identical configuration will not operate on a tomcat 7 server.</description>
    <commit commitTime="2010-08-24 03:00:00" id="e2f0b9b"/>
    <fixedFiles>
      <file>java/org/apache/catalina/authenticator/AuthenticatorBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="49721" reportTime="2010-08-06 21:52:37">
    <summary>Fail to access the resources such as jsp files from a jar file which is supported by servlet 3.0</summary>
    <description>I put a jsp file in a jar file and test whether tomcat 7 supports it by viewing it from the browser and failed.</description>
    <commit commitTime="2010-08-24 03:00:00" id="187eed8"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="49726" reportTime="2010-08-09 02:07:45">
    <summary>JSP 2.2 new configuration element &lt;default-content-type&gt; under &lt;jsp-property-group&gt; works incorrectly on tomcat trunk</summary>
    <description/>
    <commit commitTime="2010-08-24 03:00:00" id="42c226f"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Compiler.java</file>
      <file>test/org/apache/jasper/compiler/TestCompiler.java</file>
    </fixedFiles>
  </bug>
  <bug id="49749" reportTime="2010-08-13 19:18:22">
    <summary>SSO cookie should be added as HttpOnly</summary>
    <description>SSO cookies should be made HttpOnly by default. In org.apache.catalina.authenticator.AuthenticatorBase#register(), 798- response.addCookie(cookie); 798+ response.addCookieInternal(cookie, true);</description>
    <commit commitTime="2010-08-25 20:40:00" id="e641f20"/>
    <fixedFiles>
      <file>java/org/apache/catalina/authenticator/AuthenticatorBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="49869" reportTime="2010-09-02 18:26:13">
    <summary>Javadoc for WebAppClassLoader constructor has copy/paste error</summary>
    <description>The constructor that takes a parent class loader has a copy of the doc string from the constructor that does not take a parent class loader.</description>
    <commit commitTime="2010-09-03 15:46:40" id="a6620cb"/>
    <fixedFiles>
      <file>java/org/apache/catalina/loader/WebappClassLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="49802" reportTime="2010-08-23 05:59:48">
    <summary>Shutdown of AJP Connector do not work</summary>
    <description/>
    <commit commitTime="2010-09-06 04:53:20" id="cd7263e"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/Connector.java</file>
      <file>java/org/apache/catalina/core/StandardService.java</file>
      <file>java/org/apache/coyote/ProtocolHandler.java</file>
      <file>java/org/apache/coyote/ajp/AjpAprProcessor.java</file>
      <file>java/org/apache/coyote/ajp/AjpAprProtocol.java</file>
      <file>java/org/apache/coyote/ajp/AjpProcessor.java</file>
      <file>java/org/apache/coyote/ajp/AjpProtocol.java</file>
      <file>java/org/apache/coyote/http11/AbstractHttp11Protocol.java</file>
      <file>java/org/apache/coyote/http11/Http11AprProcessor.java</file>
      <file>java/org/apache/coyote/http11/Http11NioProcessor.java</file>
      <file>java/org/apache/coyote/http11/Http11Processor.java</file>
      <file>java/org/apache/tomcat/util/net/AbstractEndpoint.java</file>
      <file>java/org/apache/tomcat/util/net/AprEndpoint.java</file>
      <file>java/org/apache/tomcat/util/net/JIoEndpoint.java</file>
      <file>java/org/apache/tomcat/util/net/NioEndpoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="49883" reportTime="2010-09-04 22:58:52">
    <summary>java.lang.UnsupportedOperationException: The getName() method should never be called</summary>
    <description/>
    <commit commitTime="2010-09-06 04:53:20" id="a9f0fd5"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/CombinedRealm.java</file>
    </fixedFiles>
  </bug>
  <bug id="49892" reportTime="2010-09-07 10:44:49">
    <summary>Wrong JNDI Name for Method Resource Injections</summary>
    <description>Method based JNDI env. injections not worked correctly. Patch is attached. See Java EE 6 specification section, EE. 5.2.5 Annotations and Injections. Patch is provided that solves problem.</description>
    <commit commitTime="2010-09-09 05:06:40" id="94147b2"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/DefaultInstanceManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="49234" reportTime="2010-04-30 00:17:34">
    <summary>JMX Descriptor Modifications</summary>
    <description/>
    <commit commitTime="2010-09-12 08:06:40" id="e0182ef"/>
    <fixedFiles>
      <file>java/org/apache/catalina/Server.java</file>
      <file>java/org/apache/catalina/Service.java</file>
      <file>java/org/apache/catalina/core/StandardEngine.java</file>
      <file>java/org/apache/catalina/core/StandardServer.java</file>
      <file>java/org/apache/catalina/core/StandardService.java</file>
      <file>java/org/apache/catalina/mbeans/ContainerMBean.java</file>
      <file>java/org/apache/catalina/mbeans/ContextMBean.java</file>
      <file>java/org/apache/catalina/mbeans/ServiceMBean.java</file>
      <file>java/org/apache/catalina/startup/Catalina.java</file>
    </fixedFiles>
  </bug>
  <bug id="49924" reportTime="2010-09-14 03:23:07">
    <summary>When non-primary node changes into a primary node, isPrimarySession is not changed to true.</summary>
    <description>If BackupManager is used, when a primary node is switched, DeltaSession#isPrimarySession is not changed to true. Non-primary node changes into a primary node when a primary node is stopped or we get a non-primary session. If a primary node is stopped, a primary node is switched. In AbstractReplicatedMap, when a primary node is switched, MapOwner(BackupManager)#objectMadePrimay is called. However, isPrimarySession does not change to true in this method. =====BackupManager#objectMadePrimay===== public void objectMadePrimay(Object key, Object value) { if (value!=null &amp;&amp; value instanceof DeltaSession) { DeltaSession session = (DeltaSession)value; synchronized (session) { session.access(); session.endAccess(); } } } ===== If we get a non-primary session, a primary node is switched. However, isPrimarySession does not change to true. It is only a change of primary node. I made a patch. It contains the following. isPrimarySession is set to true in BackupManager#objectMadePrimay. When get() is called in non-primary node, MapOwner#objectMadePrimay is called. Best regards.</description>
    <commit commitTime="2010-09-14 15:40:00" id="b255697"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/session/BackupManager.java</file>
      <file>java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java</file>
    </fixedFiles>
  </bug>
  <bug id="49909" reportTime="2010-09-10 06:20:26">
    <summary>jstl 1.2 not support</summary>
    <description/>
    <commit commitTime="2010-09-17 18:40:00" id="8dc0306"/>
    <fixedFiles>
      <file>java/org/apache/catalina/loader/WebappClassLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="49102" reportTime="2010-04-12 16:11:37">
    <summary>coyote.ajp.Constants - 3 "constant" arrays are mutable</summary>
    <description>The class coyote.ajp.Constants contains 3 public static non-empty String[] arrays: methodTransArray responseTransArray headerTransArray responseTransArray only appears to be locally, so could be made private. The others are used in index lookups, so get(index) methods could be used to protect them.</description>
    <commit commitTime="2010-09-23 19:06:40" id="fb5a3e7"/>
    <fixedFiles>
      <file>java/org/apache/coyote/ajp/AjpAprProcessor.java</file>
      <file>java/org/apache/coyote/ajp/AjpProcessor.java</file>
      <file>java/org/apache/coyote/ajp/Constants.java</file>
    </fixedFiles>
  </bug>
  <bug id="49209" reportTime="2010-04-28 07:30:12">
    <summary>AccessControlException when undeploying application</summary>
    <description>When running Tomcat with a SecurityManager, an AccessControlException is thrown during undeployment. Stack trace: Caused by: java.security.AccessControlException: access denied (java.lang.RuntimePermission getClassLoader) at java.security.AccessControlContext.checkPermission(AccessControlContext.java:323) at java.security.AccessController.checkPermission(AccessController.java:546) at java.lang.SecurityManager.checkPermission(SecurityManager.java:532) at java.lang.Class.getClassLoader(Class.java:594) at org.apache.catalina.loader.JdbcLeakPrevention.clearJdbcDriverRegistrations(JdbcLeakPrevention.java:49) I assume the default catalina.policy should be updated, to take this case into account.</description>
    <commit commitTime="2010-09-28 07:26:40" id="d0d4c75"/>
    <fixedFiles>
      <file>java/org/apache/catalina/loader/WebappClassLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="49625" reportTime="2010-07-21 03:11:07">
    <summary>Tomcat doesn't send Vary consistently when gzip enabled</summary>
    <description>HTTP requires that the Vary response header be sent consistently for all responses if they change based upon different aspects of the request. My pages has both compressed and uncompressed variants available, negotiated by the Accept-Encoding request header, but it sends different Vary headers for each; "accept-encoding" when the response is compressed, and "" when it is not. This can cause problems for downstream caches, because they cannot consistently determine what the cache key for a given URI is. My server.xml content: &lt;Service name="Catalina"&gt; &lt;Connector port="8080" proxyPort="80" maxHttpHeaderSize="8192" protocol="org.apache.coyote.http11.Http11Protocol" maxThreads="200" minSpareThreads="25" maxPostSize="8" maxSpareThreads="75" enableLookups="false" keepAliveTimeout="3000" maxKeepAliveRequests="100" redirectPort="8443" acceptCount="100" connectionTimeout="8000" disableUploadTimeout="true" compression="on" compressionMinSize="2048" compressableMimeType="text/html,text/xml,text/javascript,text/css" /&gt; &lt;Engine name="Catalina" defaultHost="localhost"&gt; &lt;Host name="localhost" appBase="webapps" unpackWARs="false" autoDeploy="false" debug="0" xmlValidation="false" xmlNamespaceAware="false"&gt; &lt;/Host&gt; &lt;/Engine&gt; &lt;/Service&gt;</description>
    <commit commitTime="2010-09-28 21:20:00" id="7435fa9"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/AbstractHttp11Processor.java</file>
    </fixedFiles>
  </bug>
  <bug id="49665" reportTime="2010-07-29 05:08:43">
    <summary>When file not found error occurs it does not tell you which file caused the error.</summary>
    <description/>
    <commit commitTime="2010-09-29 00:06:40" id="7b24ed5"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Generator.java</file>
      <file>java/org/apache/jasper/compiler/JspDocumentParser.java</file>
      <file>java/org/apache/jasper/compiler/Parser.java</file>
      <file>java/org/apache/jasper/compiler/TagLibraryInfoImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="49195" reportTime="2010-04-27 10:22:54">
    <summary>Using -1 as shutdown port with Windows service works, but prints error message</summary>
    <description>1. Install Tomcat as a service on Windows 2. Specify &lt;Server port="-1" in server.xml 3. Start the service, and then stop the service. 4. The following is printed in the catalina.2010-04-27.log: 27.04.2010 17:49:13 org.apache.catalina.startup.Catalina stopServer SEVERE: No shutdown port configured. Shut down server through OS signal. Server not shut down. It is just a message. Tomcat stops regardless of it: After printing the message Catalina#stopServer() performs System.exit(1) which results in Tomcat shutdown. I think that when service launcher stops Tomcat, Catalina#server is not null. That can be used to differentiate the two use cases. There could be improvements on how to stop Tomcat. E.g., to call Catalina.stop(). If that is the case, it would be better to use wait(10000) instead of sleep(10000) in StandardServer.await(), so that it could be woken by a notifyAll() call, or use interrupt() call to wake it up (if we know the thread). System.exit(0) would work regardless of all that. I suppose that jsvc may show the same behaviour, but I have not tried.</description>
    <commit commitTime="2010-09-29 05:40:00" id="7c6b1a5"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/Catalina.java</file>
    </fixedFiles>
  </bug>
  <bug id="50018" reportTime="2010-09-27 20:47:45">
    <summary>Javadoc corrections</summary>
    <description/>
    <commit commitTime="2010-09-29 16:46:40" id="2f8a27c"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/ParserController.java</file>
      <file>java/org/apache/jasper/compiler/TagFileProcessor.java</file>
    </fixedFiles>
  </bug>
  <bug id="50021" reportTime="2010-09-29 03:43:11">
    <summary>ExceptionUtils class missing from bootstrap.jar</summary>
    <description>o.a.c.startup.Bootstrap uses o.a.jasper.util.ExceptionUtils, but this class is not placed in bootstrap.jar, causing rather nasty failures if anything goes wrong during initial bootstrapping. This should be a fairly simple matter of updating build.xml to include it, but I wasn't sure whether including Jasper classes in the bootstrap was the done thing. There's an o.a.tomcat.util.ExceptionUtils that is identical, but that too looks like the wrong thing to grab.</description>
    <commit commitTime="2010-09-29 19:33:20" id="6c22816"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/Bootstrap.java</file>
    </fixedFiles>
  </bug>
  <bug id="49730" reportTime="2010-08-09 16:16:04">
    <summary>Race condition in StandardThreadExecutor : requests are sometimes enqueued instead of creating new threads</summary>
    <description>In tomcat 6, I often configure an Executor with minSpareThreads=0 to work around memory leak issues upon redeployment. Sometimes (especially in development), when I refresh a page of my webapp with Safari, Chrome or Firefox, some resources of the page take several seconds (&gt;10s) to be served though they are static resources and should come in less than 50ms. For instance, over 15 requests for a page (1 for html, the others for resources like js, css, images...), I sometimes have 1 or 2 that take &gt;10s. After analysis, I found that in org.apache.catalina.core.StandardThreadExecutor.TaskQueue.offer(Runnable) the statement if (parent.getActiveCount()&lt;(parent.getPoolSize())) is sometimes true unexpectedly. Here is the scenario : - ThreadPoolExecutor is empty - the user refreshes the page (or accesses it with an empty cache) in his web browser for a page that uses a more than 10-15 resources - the browser establishes one TCP connection and a new Thread is created - after the browser receives the response, it decides to load as many resources as possible in parallel. For this it establishes up to 6 TCP connections (in my tests) - The Acceptor thread calls StandardThreadExecutor.execute to process each incoming connection. - For each call, StandardThreadExecutor.TaskQueue.offer(Runnable) is being called - if you study the sources of Java 6 ThreadPoolExecutor, you can see that there's a small delay between the time a new Thread is created (thus increasing poolSize) and the time it starts working on its first task (increasing the activeCount) - Since in my case connections are established in a rapid burst, the calls to TaskQueue.offer() are sometimes faster than this small delay, so that we do have parent.getActiveCount()&lt;parent.getPoolSize() and thus the task is enqueued instead of forcing the creation of a thread to serve it. - Since Keep-Alive is enabled and tomcat 6 threads take care of only one TCP connection at a time, the requests in the queue must wait for the keep-alive timeout so that a Thread is returned to the pool to serve pending tasks. - With 25s keepAliveTimeOut, it means that some requests take more than 25s to be served eventhough the pool was never full and the server quite idle!!! Other facts about this issue : - Although my test case starts with an empty pool, it can occur even on a loaded server. The thing that triggers the issue is the burst of new TCP connections. - The problem is less severe with a lower keepAliveTimeout, or if keepalive is disabled. In any case, it also depends on the time taken to serve current requests. - The issue also affects tomcat 7 but is less severe because tc7 threads are returned to the pool after each http request, even if the TCP connection is kept alive. The impact would the same as with tc6 with keepAlive disabled.</description>
    <commit commitTime="2010-10-01 02:06:40" id="2bfc300"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/threads/TaskQueue.java</file>
      <file>java/org/apache/tomcat/util/threads/ThreadPoolExecutor.java</file>
    </fixedFiles>
  </bug>
  <bug id="49856" reportTime="2010-09-01 03:24:08">
    <summary>Connector/ThreadPool link to Executor not exposed via JMX</summary>
    <description>When viewing either Connector objects or ThreadPool objects via JMX the name of the executor is not shown. It would be helpful if this were exposed via JMX so the links between Connectors/ThreadPools and Executors could be determined.</description>
    <commit commitTime="2010-10-01 04:53:20" id="167829c"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/Connector.java</file>
    </fixedFiles>
  </bug>
  <bug id="49667" reportTime="2010-07-29 09:31:33">
    <summary>JdbcLeakPrevention class can register unregistered JCBC Driver</summary>
    <description/>
    <commit commitTime="2010-10-01 18:46:40" id="dc754cc"/>
    <fixedFiles>
      <file>java/org/apache/catalina/loader/JdbcLeakPrevention.java</file>
    </fixedFiles>
  </bug>
  <bug id="49861" reportTime="2010-09-02 04:42:55">
    <summary>Log format of RMI ports can be improved, remove ","</summary>
    <description/>
    <commit commitTime="2010-10-01 18:46:40" id="00cc8c6"/>
    <fixedFiles>
      <file>java/org/apache/catalina/mbeans/JmxRemoteLifecycleListener.java</file>
    </fixedFiles>
  </bug>
  <bug id="49890" reportTime="2010-09-07 09:17:54">
    <summary>Nio Selector issue on linux platform</summary>
    <description/>
    <commit commitTime="2010-10-01 21:33:20" id="f4de5ab"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/net/NioEndpoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="49905" reportTime="2010-09-09 07:22:00">
    <summary>In cluster, when using DeltaManager memory leak can occur</summary>
    <description/>
    <commit commitTime="2010-10-02 00:20:00" id="2c858be"/>
    <fixedFiles>
      <file>java/org/apache/catalina/tribes/group/interceptors/MessageDispatch15Interceptor.java</file>
      <file>java/org/apache/catalina/tribes/util/TcclThreadFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="49915" reportTime="2010-09-10 19:35:43">
    <summary>[Patch] o.a.c.c.StandardServer swallows error on storeConfig.</summary>
    <description>When o.a.c.c.StandardServer#storeConfig is called all exceptions were getting swallowed. This lead to the impresssion it was working correctly when saved either through the manager application /manager/save or through jconsole. I've removed the catch throwable block and thrown an exception upon not finding the registerd MBean.</description>
    <commit commitTime="2010-10-02 00:20:00" id="5eb3851"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardServer.java</file>
    </fixedFiles>
  </bug>
  <bug id="49985" reportTime="2010-09-23 08:55:42">
    <summary>Lazy initialization without any synchronization - data race in AstInteger, AstFloatingPoint, AstString</summary>
    <description/>
    <commit commitTime="2010-10-03 04:06:40" id="b893eee"/>
    <fixedFiles>
      <file>java/org/apache/el/parser/AstFloatingPoint.java</file>
      <file>java/org/apache/el/parser/AstInteger.java</file>
      <file>java/org/apache/el/parser/AstString.java</file>
    </fixedFiles>
  </bug>
  <bug id="49937" reportTime="2010-09-16 01:49:41">
    <summary>Problems with AsyncListener and resource injection</summary>
    <description/>
    <commit commitTime="2010-10-04 05:06:40" id="cf4e575"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/AsyncContextImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="49952" reportTime="2010-09-17 13:49:20">
    <summary>ServletContainerInitializer can't actually add listeners</summary>
    <description/>
    <commit commitTime="2010-10-07 05:20:00" id="937227a"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
      <file>test/org/apache/catalina/startup/TestListener.java</file>
    </fixedFiles>
  </bug>
  <bug id="49956" reportTime="2010-09-17 20:15:03">
    <summary>@Resource(name=) Normalization of JNDI Name</summary>
    <description/>
    <commit commitTime="2010-10-07 05:20:00" id="0e71157"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/DefaultInstanceManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="50054" reportTime="2010-10-07 04:22:51">
    <summary>When the AJP connector is used, minSpareThreads cannot be used.</summary>
    <description>I found following warnning messages. == Oct 7, 2010 2:25:27 PM org.apache.catalina.startup.SetAllPropertiesRule begin WARNING: [SetAllPropertiesRule]{Server/Service/Connector} Setting property 'minSpareThreads' to '31' did not find a matching property. == The AJP connector's configs are the following. &lt;Connector port="8009" protocol="AJP/1.3" redirectPort="8443" minSpareThreads="100"/&gt; When I used the Http connector, minSpareThreads was able to be used. org.apache.coyote.ajp.AjpProtocol doesn't set the minSpareThreads to org.apache.tomcat.util.net.JIoEndpoint. I made a patch. This patch was made based on AbstractHttp11Protocol. Best regards.</description>
    <commit commitTime="2010-10-07 16:26:40" id="654c964"/>
    <fixedFiles>
      <file>java/org/apache/coyote/ajp/AbstractAjpProtocol.java</file>
      <file>java/org/apache/coyote/ajp/AjpAprProtocol.java</file>
      <file>java/org/apache/coyote/ajp/AjpProtocol.java</file>
    </fixedFiles>
  </bug>
  <bug id="49972" reportTime="2010-09-22 04:44:02">
    <summary>Double-check idiom. Possible data-race.</summary>
    <description/>
    <commit commitTime="2010-10-07 22:00:00" id="0ae33cb"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/http/FastHttpDateFormat.java</file>
    </fixedFiles>
  </bug>
  <bug id="49986" reportTime="2010-09-23 09:31:03">
    <summary>Double-check locking. Possible data-race in JspServletWrapper</summary>
    <description/>
    <commit commitTime="2010-10-07 22:00:00" id="2570d6f"/>
    <fixedFiles>
      <file>java/org/apache/jasper/servlet/JspServletWrapper.java</file>
    </fixedFiles>
  </bug>
  <bug id="49987" reportTime="2010-09-23 10:16:06">
    <summary>Data race in ApplicationContext</summary>
    <description/>
    <commit commitTime="2010-10-08 06:20:00" id="2db864e"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ApplicationContext.java</file>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="50016" reportTime="2010-09-27 16:56:39">
    <summary>bad division of responsibility around isUserInRole and new Request login and logout methods</summary>
    <description/>
    <commit commitTime="2010-10-08 23:00:00" id="469a916"/>
    <fixedFiles>
      <file>java/org/apache/catalina/Authenticator.java</file>
      <file>java/org/apache/catalina/Realm.java</file>
      <file>java/org/apache/catalina/authenticator/AuthenticatorBase.java</file>
      <file>java/org/apache/catalina/authenticator/BasicAuthenticator.java</file>
      <file>java/org/apache/catalina/authenticator/DigestAuthenticator.java</file>
      <file>java/org/apache/catalina/authenticator/FormAuthenticator.java</file>
      <file>java/org/apache/catalina/authenticator/NonLoginAuthenticator.java</file>
      <file>java/org/apache/catalina/authenticator/SSLAuthenticator.java</file>
      <file>java/org/apache/catalina/connector/Request.java</file>
      <file>java/org/apache/catalina/realm/RealmBase.java</file>
      <file>java/org/apache/catalina/realm/UserDatabaseRealm.java</file>
    </fixedFiles>
  </bug>
  <bug id="50017" reportTime="2010-09-27 20:27:07">
    <summary>Make private immutable fields final</summary>
    <description/>
    <commit commitTime="2010-10-08 23:00:00" id="c4a3427"/>
    <fixedFiles>
      <file>java/javax/el/ValueReference.java</file>
      <file>java/javax/servlet/AsyncEvent.java</file>
      <file>java/javax/servlet/HttpConstraintElement.java</file>
      <file>java/javax/servlet/HttpMethodConstraintElement.java</file>
      <file>java/javax/servlet/MultipartConfigElement.java</file>
      <file>java/javax/servlet/ServletContextAttributeEvent.java</file>
      <file>java/javax/servlet/ServletRequestAttributeEvent.java</file>
      <file>java/javax/servlet/ServletRequestEvent.java</file>
      <file>java/javax/servlet/ServletSecurityElement.java</file>
      <file>java/javax/servlet/UnavailableException.java</file>
      <file>java/javax/servlet/http/HttpSessionBindingEvent.java</file>
      <file>java/javax/servlet/jsp/ErrorData.java</file>
      <file>java/javax/servlet/jsp/tagext/BodyContent.java</file>
      <file>java/javax/servlet/jsp/tagext/FunctionInfo.java</file>
      <file>java/javax/servlet/jsp/tagext/TagAttributeInfo.java</file>
      <file>java/javax/servlet/jsp/tagext/TagData.java</file>
      <file>java/javax/servlet/jsp/tagext/TagExtraInfo.java</file>
      <file>java/javax/servlet/jsp/tagext/TagFileInfo.java</file>
      <file>java/javax/servlet/jsp/tagext/TagVariableInfo.java</file>
      <file>java/javax/servlet/jsp/tagext/ValidationMessage.java</file>
      <file>java/javax/servlet/jsp/tagext/VariableInfo.java</file>
    </fixedFiles>
  </bug>
  <bug id="50027" reportTime="2010-09-29 13:02:53">
    <summary>NullPointerException if context.xml is present with &lt;Resource&gt;</summary>
    <description>If you deploy a WAR with contex.xml in META-INF and the context.xml has &lt;Resource&gt; tag, Tomcat don t boot and gives this error: java.lang.NullPointerException at org.apache.catalina.core.StandardContext.getObjectKeyPropertiesNameOnly(StandardContext.java:5570) at org.apache.catalina.core.StandardContext.setNamingResources(StandardContext.java:1757) at org.apache.catalina.core.StandardContext.getNamingResources(StandardContext.java:1735) at org.apache.catalina.startup.SetNextNamingRule.end(SetNextNamingRule.java:99) at org.apache.tomcat.util.digester.Digester.endElement(Digester.java:1058) at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.endElement(AbstractSAXParser.java:601) at com.sun.org.apache.xerces.internal.parsers.AbstractXMLDocumentParser.emptyElement(AbstractXMLDocumentParser.java:180) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1343) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2755) at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:648) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:511) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:808) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737) at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:119) at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1205) at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:522) at org.apache.tomcat.util.digester.Digester.parse(Digester.java:1544) at org.apache.catalina.startup.Catalina.load(Catalina.java:524) at org.apache.catalina.startup.Catalina.load(Catalina.java:560) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.catalina.startup.Bootstrap.load(Bootstrap.java:260) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:414) 29/09/2010 13:50:37 org.apache.catalina.startup.Catalina load AVISO: Catalina.start using conf/server.xml: java.lang.NullPointerException at org.apache.tomcat.util.digester.Digester.createSAXException(Digester.java:2688) at org.apache.tomcat.util.digester.Digester.createSAXException(Digester.java:2714) at org.apache.tomcat.util.digester.Digester.endElement(Digester.java:1061) at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.endElement(AbstractSAXParser.java:601) at com.sun.org.apache.xerces.internal.parsers.AbstractXMLDocumentParser.emptyElement(AbstractXMLDocumentParser.java:180) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1343) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2755) at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:648) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:511) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:808) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737) at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:119) at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1205) at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:522) at org.apache.tomcat.util.digester.Digester.parse(Digester.java:1544) at org.apache.catalina.startup.Catalina.load(Catalina.java:524) at org.apache.catalina.startup.Catalina.load(Catalina.java:560) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.catalina.startup.Bootstrap.load(Bootstrap.java:260) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:414) Caused by: java.lang.NullPointerException at org.apache.catalina.core.StandardContext.getObjectKeyPropertiesNameOnly(StandardContext.java:5570) at org.apache.catalina.core.StandardContext.setNamingResources(StandardContext.java:1757) at org.apache.catalina.core.StandardContext.getNamingResources(StandardContext.java:1735) at org.apache.catalina.startup.SetNextNamingRule.end(SetNextNamingRule.java:99) at org.apache.tomcat.util.digester.Digester.endElement(Digester.java:1058) ... 20 more 29/09/2010 13:50:37 org.apache.tomcat.util.digester.SetPropertiesRule begin AVISO: [SetPropertiesRule]{Server/Service/Engine/Host/Context} Setting property 'source' to 'org.eclipse.jst.jee.server:bestforkprime' did not find a matching property. 29/09/2010 13:50:37 org.apache.tomcat.util.digester.Digester endElement GRAVE: End event threw exception java.lang.NullPointerException at org.apache.catalina.core.StandardContext.getObjectKeyPropertiesNameOnly(StandardContext.java:5570) at org.apache.catalina.core.StandardContext.setNamingResources(StandardContext.java:1757) at org.apache.catalina.core.StandardContext.getNamingResources(StandardContext.java:1735) at org.apache.catalina.startup.SetNextNamingRule.end(SetNextNamingRule.java:99) at org.apache.tomcat.util.digester.Digester.endElement(Digester.java:1058) at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.endElement(AbstractSAXParser.java:601) at com.sun.org.apache.xerces.internal.parsers.AbstractXMLDocumentParser.emptyElement(AbstractXMLDocumentParser.java:180) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1343) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2755) at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:648) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:511) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:808) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737) at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:119) at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1205) at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:522) at org.apache.tomcat.util.digester.Digester.parse(Digester.java:1544) at org.apache.catalina.startup.Catalina.load(Catalina.java:524) at org.apache.catalina.startup.Catalina.start(Catalina.java:573) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:415) 29/09/2010 13:50:37 org.apache.catalina.startup.Catalina load AVISO: Catalina.start using conf/server.xml: java.lang.NullPointerException at org.apache.tomcat.util.digester.Digester.createSAXException(Digester.java:2688) at org.apache.tomcat.util.digester.Digester.createSAXException(Digester.java:2714) at org.apache.tomcat.util.digester.Digester.endElement(Digester.java:1061) at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.endElement(AbstractSAXParser.java:601) at com.sun.org.apache.xerces.internal.parsers.AbstractXMLDocumentParser.emptyElement(AbstractXMLDocumentParser.java:180) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1343) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2755) at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:648) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:511) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:808) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737) at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:119) at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1205) at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:522) at org.apache.tomcat.util.digester.Digester.parse(Digester.java:1544) at org.apache.catalina.startup.Catalina.load(Catalina.java:524) at org.apache.catalina.startup.Catalina.start(Catalina.java:573) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:288) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:415) Caused by: java.lang.NullPointerException at org.apache.catalina.core.StandardContext.getObjectKeyPropertiesNameOnly(StandardContext.java:5570) at org.apache.catalina.core.StandardContext.setNamingResources(StandardContext.java:1757) at org.apache.catalina.core.StandardContext.getNamingResources(StandardContext.java:1735) at org.apache.catalina.startup.SetNextNamingRule.end(SetNextNamingRule.java:99) at org.apache.tomcat.util.digester.Digester.endElement(Digester.java:1058) ... 20 more 29/09/2010 13:50:37 org.apache.catalina.startup.Catalina start GRAVE: Cannot start server. Server instance is not configured. Here is my contex.xml OBS: some values were replaced with XXXX &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;Context privileged="true" reloadable="true"&gt; &lt;WatchedResource&gt;WEB-INF/web.xml&lt;/WatchedResource&gt; &lt;WatchedResource&gt;META-INF/context.xml&lt;/WatchedResource&gt; &lt;Resource name="jdbc/bestfork" auth="Container" type="com.mchange.v2.c3p0.ComboPooledDataSource" factory="org.apache.naming.factory.BeanFactory" user="xxx" password="xxxx" driverClass="org.postgresql.Driver" jdbcUrl="jdbc:postgresql://localhost:5432/xxxxx" minPoolSize="5" maxPoolSize="30" acquireIncrement="5" idleConnectionTestPeriod="100" maxIdleTime="30"/&gt; &lt;Resource name="mail/Session" auth="Container" type="javax.mail.Session" mail.smtp.host="xxxx" mail.smtp.auth="true" username="xxx" password="xxx" mail.user="xxxx" mail.password="xxxx" mail.smtp.port="587" mail.transport.protocol="smtp" mail.debug="true" /&gt; &lt;Realm className="org.apache.catalina.realm.JDBCRealm" driverName="org.postgresql.Driver" connectionURL="jdbc:postgresql://localhost:5432/xxxx" connectionName="xxxx" connectionPassword="xxxx" userTable="usuario" userNameCol="usuario_cpf" userCredCol="usuario_senha" userRoleTable="usuario_papel" roleNameCol="papel_nome" digest="MD5" /&gt; &lt;/Context&gt;</description>
    <commit commitTime="2010-10-09 04:33:20" id="6ce21f4"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="50059" reportTime="2010-10-08 07:57:25">
    <summary>Resources are not served from /WEB-INF/lib/{*.jar}/META-INF/resources if metadata-complete="true" is set in web.xml</summary>
    <description/>
    <commit commitTime="2010-10-09 04:33:20" id="da36bd1"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="50063" reportTime="2010-10-08 22:59:40">
    <summary>Latest trunck can't configure context when metadata-complete is true and version is 3.0</summary>
    <description/>
    <commit commitTime="2010-10-10 16:40:00" id="4d7f111"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="50066" reportTime="2010-10-09 09:49:32">
    <summary>Cannot compile recursive tag with ant if it uses a class from the webapp</summary>
    <description/>
    <commit commitTime="2010-10-11 01:00:00" id="79cf689"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/TagFileProcessor.java</file>
    </fixedFiles>
  </bug>
  <bug id="50087" reportTime="2010-10-13 09:36:12">
    <summary>When metadata-complete="false" throw illegal JVM_CONSTANT_Class name</summary>
    <description>When metadata-complete="false" and add groovy-all-1.7.2.jar to app lib throw java.lang.reflect.InvocationTargetException at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:290) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:418) Caused by: java.lang.ClassFormatError: groovy/jmx/builder/package-info : illegal JVM_CONSTANT_Class name: groovy/jmx/builder/package-info at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClassCond(ClassLoader.java:632) at java.lang.ClassLoader.defineClass(ClassLoader.java:616) at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141) at org.apache.catalina.loader.WebappClassLoader.findClassInternal(WebappClassLoader.java:2804) at org.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java:1144) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1639) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1517) at org.apache.catalina.startup.ContextConfig.checkHandlesTypes(ContextConfig.java:1952) at org.apache.catalina.startup.ContextConfig.processAnnotationsStream(ContextConfig.java:1915) at org.apache.catalina.startup.ContextConfig.processAnnotationsJar(ContextConfig.java:1802) at org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(ContextConfig.java:1761) at org.apache.catalina.startup.ContextConfig.processAnnotations(ContextConfig.java:1747) at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1252) at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:881) at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:315) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4700) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:140) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1028) at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:773) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:140) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1028) at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:278) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:140) at org.apache.catalina.core.StandardService.startInternal(StandardService.java:429) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:140) at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:662) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:140) at org.apache.catalina.startup.Catalina.start(Catalina.java:592) ... 6 more</description>
    <commit commitTime="2010-10-14 23:26:40" id="9e7ce59"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="49426" reportTime="2010-06-11 03:26:07">
    <summary>Manager app wrongly localized</summary>
    <description/>
    <commit commitTime="2010-10-17 04:13:20" id="7357867"/>
    <fixedFiles>
      <file>java/org/apache/catalina/manager/HTMLManagerServlet.java</file>
      <file>java/org/apache/catalina/manager/ManagerServlet.java</file>
      <file>java/org/apache/tomcat/util/res/StringManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="50105" reportTime="2010-10-17 05:26:20">
    <summary>Violation of JSP-EL spec version 2.1 when coerce Enum to String</summary>
    <description/>
    <commit commitTime="2010-10-19 20:06:40" id="e6c1d55"/>
    <fixedFiles>
      <file>java/org/apache/el/parser/AstCompositeExpression.java</file>
      <file>test/org/apache/el/TestValueExpressionImpl.java</file>
      <file>test/org/apache/el/TesterEnum.java</file>
    </fixedFiles>
  </bug>
  <bug id="50107" reportTime="2010-10-18 03:05:40">
    <summary>StandardPipeline is destroyed two times.</summary>
    <description/>
    <commit commitTime="2010-10-19 20:06:40" id="44f568f"/>
    <fixedFiles>
      <file>java/org/apache/catalina/mbeans/MBeanFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="50138" reportTime="2010-10-21 09:22:56">
    <summary>Lack of synchronization in org.apache.catalina.security.SecurityUtil</summary>
    <description>Symptom: all processor threads spin madly in: ============== "tomcat-processor-20" daemon prio=10 tid=0x09210800 nid=0x51fb runnable [0x61b76000] java.lang.Thread.State: RUNNABLE at java.util.HashMap.getEntry(HashMap.java:347) at java.util.HashMap.containsKey(HashMap.java:335) at org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:227) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) at org.apache.catalina.core.ApplicationFilterChain.access$000(ApplicationFilterChain.java:56) at org.apache.catalina.core.ApplicationFilterChain$1.run(ApplicationFilterChain.java:189) at java.security.AccessController.doPrivileged(Native Method) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:185) ... ============== Cause: org.apache.catalina.security.SecurityUtil.objectCache is a HashMap, but access to it is not synchronized. The javadoc for HashMap says: ============= Note that this implementation is not synchronized. If multiple threads access a hash map concurrently, and at least one of the threads modifies the map structurally, it must be synchronized externally. ============= Proposed solution: change objectCache to ConcurrentHashMap;</description>
    <commit commitTime="2010-10-22 00:53:20" id="9d955f4"/>
    <fixedFiles>
      <file>java/org/apache/catalina/security/SecurityUtil.java</file>
    </fixedFiles>
  </bug>
  <bug id="50129" reportTime="2010-10-20 19:48:00">
    <summary>ContextConfig - unnecessary null checks</summary>
    <description/>
    <commit commitTime="2010-10-24 22:20:00" id="509ab5d"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="49180" reportTime="2010-04-24 13:34:58">
    <summary>Add option to disable log rotation in FileHandler.</summary>
    <description>Small enhancement to FileHandler.java which allow susers to disable log rotation by setting the .rotation attribute to "false".</description>
    <commit commitTime="2010-11-02 00:46:40" id="7184011"/>
    <fixedFiles>
      <file>java/org/apache/juli/FileHandler.java</file>
    </fixedFiles>
  </bug>
  <bug id="50127" reportTime="2010-10-20 19:31:02">
    <summary>Possible NPEs in SimpleTCPCluster</summary>
    <description/>
    <commit commitTime="2010-11-05 03:46:40" id="f77368f"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java</file>
    </fixedFiles>
  </bug>
  <bug id="50168" reportTime="2010-10-27 22:47:42">
    <summary>destory method is called twice while the child is destoryed directly</summary>
    <description>While calling the method destory() on the StandardContext directly, it seems that the method destoryInternal() is called twice in the LifecycleMBeanBase, the two stacktraces are below : a. LifecycleMBeanBase.unregister(ObjectName) line: 191 LifecycleMBeanBase.destroyInternal() line: 73 ContainerBase.destroyInternal() line: 1109 StandardContext.destroyInternal() line: 5114 LifecycleBase.destroy() line: 271 ContainerBase.removeChild(Container) line: 963 ContainerBase.destroyInternal() line: 1106 StandardContext.destroyInternal() line: 5114 LifecycleBase.destroy() line: 271 ... b. LifecycleMBeanBase.unregister(ObjectName) line: 191 LifecycleMBeanBase.destroyInternal() line: 73 ContainerBase.destroyInternal() line: 1109 StandardContext.destroyInternal() line: 5114 LifecycleBase.destroy() line: 271 ...</description>
    <commit commitTime="2010-11-05 06:33:20" id="6eae969"/>
    <fixedFiles>
      <file>java/org/apache/catalina/Lifecycle.java</file>
      <file>java/org/apache/catalina/LifecycleState.java</file>
      <file>java/org/apache/catalina/core/AprLifecycleListener.java</file>
      <file>java/org/apache/catalina/core/ContainerBase.java</file>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
      <file>java/org/apache/catalina/util/LifecycleBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="50184" reportTime="2010-10-29 17:12:34">
    <summary>RpcChannel sends the answer without requesting an ACK</summary>
    <description/>
    <commit commitTime="2010-11-10 00:26:40" id="afdc055"/>
    <fixedFiles>
      <file>java/org/apache/catalina/tribes/group/RpcChannel.java</file>
    </fixedFiles>
  </bug>
  <bug id="50232" reportTime="2010-11-08 05:09:39">
    <summary>org.apache.catalina.session.StoreBase has a hidden dependency on PersistentManager</summary>
    <description/>
    <commit commitTime="2010-11-10 00:26:40" id="b5c24f9"/>
    <fixedFiles>
      <file>java/org/apache/catalina/session/StoreBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="50222" reportTime="2010-11-05 11:00:08">
    <summary>JreMemoryLeakPreventionListener should speculatively cause memory leaks using the system ClassLoader</summary>
    <description>JreMemoryLeakPreventionListener intentionally invokes methods known to pin the context ClassLoader in memory in order to avoid having a WebappClassLoader unintentionally pin itself. This may cause undesirable behavior in embedded environments. Instead, JMLPL could use a security context to temporarily set the current context ClassLoader to be the system ClassLoader and solve the embedded situation without the client having to remember to take this care.</description>
    <commit commitTime="2010-11-10 19:53:20" id="4ca3db3"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/JreMemoryLeakPreventionListener.java</file>
    </fixedFiles>
  </bug>
  <bug id="50169" reportTime="2010-10-28 03:21:29">
    <summary>Trying to register wrapper and welcomeFile to Mapper before context is registered on Mapper.</summary>
    <description/>
    <commit commitTime="2010-11-11 20:53:20" id="476921f"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
      <file>java/org/apache/catalina/core/StandardWrapper.java</file>
    </fixedFiles>
  </bug>
  <bug id="50183" reportTime="2010-10-29 16:55:40">
    <summary>[Tribes] Bio Sender is not scheduling the task to the excecutors</summary>
    <description/>
    <commit commitTime="2010-11-11 20:53:20" id="84efb0a"/>
    <fixedFiles>
      <file>java/org/apache/catalina/tribes/transport/bio/BioReceiver.java</file>
      <file>java/org/apache/catalina/tribes/transport/bio/BioReplicationTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="50252" reportTime="2010-11-11 01:08:11">
    <summary>ClassCastException occurs if context.xml contains &lt;ResourceLink&gt;.</summary>
    <description/>
    <commit commitTime="2010-11-11 20:53:20" id="7e7283d"/>
    <fixedFiles>
      <file>java/org/apache/naming/NamingContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="50230" reportTime="2010-11-07 21:04:22">
    <summary>Recursive dependency between the tomcat-catalina-ha and tomcat-catalina</summary>
    <description/>
    <commit commitTime="2010-11-12 05:13:20" id="96020cb"/>
    <fixedFiles>
      <file>java/org/apache/catalina/DistributedManager.java</file>
      <file>java/org/apache/catalina/ha/session/BackupManager.java</file>
      <file>java/org/apache/catalina/manager/HTMLManagerServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="50192" reportTime="2010-11-01 15:17:42">
    <summary>performance issue after revision 746425</summary>
    <description/>
    <commit commitTime="2010-11-13 03:26:40" id="e075c4b"/>
    <fixedFiles>
      <file>java/org/apache/jasper/el/ELContextImpl.java</file>
      <file>java/org/apache/jasper/el/ELResolverImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="50293" reportTime="2010-11-18 16:58:18">
    <summary>javax.el.CompositeELResolver synchronization issue</summary>
    <description/>
    <commit commitTime="2010-11-20 02:06:40" id="7b89af8"/>
    <fixedFiles>
      <file>java/javax/el/CompositeELResolver.java</file>
    </fixedFiles>
  </bug>
  <bug id="50310" reportTime="2010-11-21 21:08:35">
    <summary>Manager detailed status page does not display servlets</summary>
    <description>To reproduce: 1. Login to the Manager webapp 2. Click "Server Status" and then "Complete Server Status" links. In TC6 the "Complete Server Status" page lists servlets for each deployed application. In the current TC7 it does not list them. Only summary information on each webapp is displayed. Looking at the StatusManagerServlet and StatusTransformer classes, the code to iterate over servlets is still there, but probably the JMX names have changed and are not working any more.</description>
    <commit commitTime="2010-11-22 20:46:40" id="ade20d2"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardWrapper.java</file>
    </fixedFiles>
  </bug>
  <bug id="50308" reportTime="2010-11-20 11:00:06">
    <summary>Call to AsyncContext.dispatch() in the onTimeout callback throws exception</summary>
    <description>When dispatch() method is called inside the onTimeout() function of the AsyncListener, the exception is thrown: SEVERE: An exception or error occurred in the container during the request processing java.lang.IllegalStateException: Calling [dispatchAsync()] is not valid for a request with Async state [TIMING_OUT] at org.apache.coyote.AsyncStateMachine.asyncDispatch(AsyncStateMachine.java:220) at org.apache.coyote.http11.Http11NioProcessor.actionInternal(Http11NioProcessor.java:672) at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:937) at org.apache.coyote.Request.action(Request.java:348) at org.apache.catalina.core.AsyncContextImpl.dispatch(AsyncContextImpl.java:173) at org.apache.catalina.core.AsyncContextImpl.dispatch(AsyncContextImpl.java:135) at org.apache.catalina.core.AsyncContextImpl.dispatch(AsyncContextImpl.java:130) at com.juriy.snowball.SnowServlet$1.onTimeout(SnowServlet.java:23) at org.apache.catalina.core.AsyncListenerWrapper.fireOnTimeout(AsyncListenerWrapper.java:45) at org.apache.catalina.core.AsyncContextImpl.timeout(AsyncContextImpl.java:109) at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:270) at org.apache.coyote.http11.Http11NioProcessor.asyncDispatch(Http11NioProcessor.java:232) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.event(Http11NioProtocol.java:305) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1526) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619) The sample code is below: protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { AsyncContext context = request.startAsync(); context.setTimeout(3000); context.addListener(new AsyncListener() { public void onComplete(AsyncEvent asyncEvent) throws IOException {} public void onTimeout(AsyncEvent asyncEvent) throws IOException { System.out.println("HITTING TIMEOUT"); asyncEvent.getAsyncContext().dispatch(); } public void onError(AsyncEvent asyncEvent) throws IOException {} public void onStartAsync(AsyncEvent asyncEvent) throws IOException {} }); } It looks like the Servlet 3.0 specification allows to do such call, here's the quotation that explicitly states the flow of the timeouted async contexts (page 18): "In the event that an asynchronous operation times out, the container must run through the following steps: Invoke the AsyncListener.onTimeout method on all the AsyncListener instances registered with the ServletRequest on which the asynchronous operation was initiated. If none of the listeners called AsyncContext.complete() or any of the AsyncContext.dispatch methods, perform an error dispatch with a status code equal to HttpServletResponse.SC_INTERNAL_SERVER_ERROR. If no matching error page was found, or the error page did not call AsyncContext.complete() or any of the AsyncContext.dispatch methods, the container MUST call AsyncContext.complete()" Second step assumes that the call to dispatch in onTimeout() is allowed.</description>
    <commit commitTime="2010-11-22 23:33:20" id="991702c"/>
    <fixedFiles>
      <file>java/org/apache/coyote/AsyncStateMachine.java</file>
      <file>test/org/apache/catalina/core/TestAsyncContextImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="50316" reportTime="2010-11-22 11:29:24">
    <summary>Minor glitch with display of negative TTL on sessionDetail.jsp</summary>
    <description/>
    <commit commitTime="2010-11-23 05:06:40" id="278a36a"/>
    <fixedFiles>
      <file>java/org/apache/catalina/manager/JspHelper.java</file>
      <file>java/org/apache/catalina/manager/StatusTransformer.java</file>
    </fixedFiles>
  </bug>
  <bug id="50207" reportTime="2010-11-03 14:52:32">
    <summary>CometProcessor async timeout events are not being fired</summary>
    <description>This is reproducible using the the default chat example (ie: ChatServlet, /examples/jsp/chat) and the following additional changes: 1) Enabled Http11Nio in conf/server.xml: &lt;Connector address="0.0.0.0" port="8080" protocol="org.apache.coyote.http11.Http11NioProtocol" connectionTimeout="20000" enableLookups="false" acceptCount="100" disableUploadTimeout="true" maxThreads="15" minSpareThreads="15" maxSpareThreads="15" RECYCLE_FACADES="true"/&gt; 2) Enabled the comet valve in conf/context.xml: &lt;Valve className="org.apache.catalina.valves.CometConnectionManagerValve" /&gt; The problem is CometEvent.EventType.ERROR (and subtype TIMEOUT) and CometEvent.EventType.END are never being fired. This can be confirmed in the logs; the messages for these events are never printed. This worked on Tomcat 6.0.29. As an aside, what is the most complete/robust way to do async IO in tomcat 7 today, Servlet 3.0 or CometProcessor?</description>
    <commit commitTime="2010-11-24 00:33:20" id="46e7d1e"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/Http11NioProtocol.java</file>
      <file>java/org/apache/tomcat/util/net/NioEndpoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="50108" reportTime="2010-10-18 03:22:19">
    <summary>Add missing setter/getter to AbstractXXXProtocol</summary>
    <description/>
    <commit commitTime="2010-11-25 04:20:00" id="5a84fdb"/>
    <fixedFiles>
      <file>java/org/apache/coyote/ajp/AbstractAjpProtocol.java</file>
      <file>java/org/apache/coyote/http11/AbstractHttp11Protocol.java</file>
    </fixedFiles>
  </bug>
  <bug id="48837" reportTime="2010-03-01 18:51:11">
    <summary>Memory leaks protection does not detect leaks triggered by JSP pages code</summary>
    <description/>
    <commit commitTime="2010-11-25 04:20:00" id="ddbbfc1"/>
    <fixedFiles>
      <file>java/org/apache/catalina/loader/WebappClassLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="48692" reportTime="2010-02-07 02:41:33">
    <summary>Provide option to parse application/x-www-form-urlencoded PUT requests</summary>
    <description>Provide an option to treat application/x-www-form-urlencoded encoded parameters in a PUT request in a similar manner to application/x-www-form-urlencoded parameters in a POST request</description>
    <commit commitTime="2010-12-03 23:26:40" id="e34b164"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/Connector.java</file>
      <file>java/org/apache/catalina/connector/Request.java</file>
      <file>test/org/apache/catalina/connector/TestRequest.java</file>
    </fixedFiles>
  </bug>
  <bug id="50408" reportTime="2010-12-03 12:37:00">
    <summary>Scoped EL variable in methodexpression is treated as Object</summary>
    <description>Consider following example: &lt;dl&gt; &lt;c:forEach items="${pageContext.response.headerNames}" var="name"&gt; &lt;c:forEach items="${pageContext.response.getHeaders(name)}" var="value"&gt; &lt;dt&gt;${name}&lt;/dt&gt;&lt;dd&gt;${value}&lt;/dd&gt; &lt;/c:forEach&gt; &lt;/c:forEach&gt; &lt;/dl&gt; The ${name} is a String. The ${name.class.name} also proves that. The getHeaders(name) call however results in: org.apache.jasper.el.JspELException: /test.jsp(23,12) '${pageContext.response.getHeaders(name)}' java.lang.NoSuchMethodException: org.apache.catalina.connector.ResponseFacade.getHeaders(java.lang.Object) Another example which also results in NoSuchMethodException which suggests that an Object is been passed as argument: &lt;c:set var="name" value="test" /&gt; ${pageContext.response.getHeader(name)} This works all fine on Glassfish v3.</description>
    <commit commitTime="2010-12-04 05:00:00" id="4ed7b7e"/>
    <fixedFiles>
      <file>java/javax/el/CompositeELResolver.java</file>
      <file>test/javax/el/TestCompositeELResolver.java</file>
    </fixedFiles>
  </bug>
  <bug id="50448" reportTime="2010-12-09 19:23:29">
    <summary>StandardSession.expire causes IllegalStateException: getCreationTime: Session already invalidated</summary>
    <description>Hi, when verifying the fix for #50360 I ran into an issue with expired sessions during processExpires: Dec 10, 2010 12:59:32 AM org.apache.catalina.core.ContainerBase backgroundProcess WARNING: Exception processing manager de.javakaffee.web.msm.MemcachedBackupSessionManager[/] background process java.lang.IllegalStateException: getCreationTime: Session already invalidated at org.apache.catalina.session.StandardSession.getCreationTime(StandardSession.java:1096) at org.apache.catalina.session.ManagerBase.remove(ManagerBase.java:802) at org.apache.catalina.session.StandardSession.expire(StandardSession.java:840) at org.apache.catalina.session.StandardSession.isValid(StandardSession.java:655) at org.apache.catalina.session.ManagerBase.processExpires(ManagerBase.java:609) at org.apache.catalina.session.ManagerBase.backgroundProcess(ManagerBase.java:594) at de.javakaffee.web.msm.MemcachedBackupSessionManager.backgroundProcess(MemcachedBackupSessionManager.java:1130) at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1214) AFAICS in MemcachedBackupSessionManager I could override remove(Session session, boolean update) with calling super.remove(session, false) for invalid sessions. Another option would be to change StandardSession.expire(StandardSession.java:840) so that it does not invoke manager.remove(this, true) but manager.remove(this, false). Or even better: change ManagerBase.remove(ManagerBase.java:802) to invoke some session.getCreationTimeInternal() which skips validation. What do you think? Cheers, Martin</description>
    <commit commitTime="2010-12-10 22:06:40" id="4117b78"/>
    <fixedFiles>
      <file>java/org/apache/catalina/Session.java</file>
      <file>java/org/apache/catalina/manager/DummyProxySession.java</file>
      <file>java/org/apache/catalina/session/ManagerBase.java</file>
      <file>java/org/apache/catalina/session/StandardSession.java</file>
    </fixedFiles>
  </bug>
  <bug id="49125" reportTime="2010-04-14 18:54:35">
    <summary>toString on byte[] array probably is not correct</summary>
    <description>Two examples of using toString() on a byte[] array, which is unlikely to produce the desired output: ha.deploy.FileMessageFactory.writeMessage() log message uses toString on msg.getData() which is a byte[] array coyote.ajp.AjpMessage.dump use toString on "msg" which is of type byte[]</description>
    <commit commitTime="2010-12-15 04:53:20" id="5614817"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/deploy/FileMessageFactory.java</file>
      <file>java/org/apache/coyote/ajp/AjpMessage.java</file>
      <file>java/org/apache/tomcat/util/buf/HexUtils.java</file>
    </fixedFiles>
  </bug>
  <bug id="10526" reportTime="2002-07-06 13:11:40">
    <summary>Authenticators do not always cache the Principal</summary>
    <description>Once a user is authenticated a Principal object is supposed to be cached for the duration of the user's session. This is especially important when using JDBCRealm or JNDIRealm to reduce the load on external authentication services. Most authenticators (BasicAuthenticator, SSLAuthenticator and DigestAuthenticator) call AuthenticatorBase.register()to cache the Principal. However register() does nothing if a session object does not already exist, so caching does not occur when the application does not create a session object itself. The problem can be seen by setting a security constraint on tomcat-docs and then browsing the Tomcat documentation - the external authentication service is hit on every request. The problem does not occur with form based login, because FormAuthenticator caches the Principal itself and creates a new session if necessary to do it. Probably the best fix would be to change AuthenticatorBase.register() to create a new session by calling getSession(request, true) instead of getSession (request, false). However, perhaps there is a reason why this is not being done - though if so I cannot see what it is. An alternative is to change the concrete authentication classes to make sure a session exists before calling register(), e.g. --- BasicAuthenticator.java 23 Mar 2002 17:52:16 -0000 1.12 +++ BasicAuthenticator.java 6 Jul 2002 12:46:30 -0000 @@ -160,6 +160,7 @@ String password = parsePassword(authorization); principal = context.getRealm().authenticate(username, password); if (principal != null) { + Session session = getSession(request, true); register(request, response, principal, Constants.BASIC_METHOD, username, password); return (true); Similar patches would be required for SSLAuthenticator and DigestAuthenticator of course.</description>
    <commit commitTime="2010-12-16 00:20:00" id="ca34a30"/>
    <fixedFiles>
      <file>java/org/apache/catalina/authenticator/AuthenticatorBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="10972" reportTime="2002-07-19 02:30:07">
    <summary>&lt;Realm&gt; without className in server.xml produces NullPointerException</summary>
    <description>If the className attribute is not included with the &lt;Realm&gt; tag in server.xml, the server dies with a cryptic NullPointerException. It would be nice if it produced a more meaningful error message (like "Missing className attribute for &lt;Realm&gt; tag").</description>
    <commit commitTime="2010-12-16 03:06:40" id="71ad1bd"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/Catalina.java</file>
      <file>java/org/apache/tomcat/util/digester/Digester.java</file>
      <file>java/org/apache/tomcat/util/digester/ObjectCreateRule.java</file>
    </fixedFiles>
  </bug>
  <bug id="13731" reportTime="2002-10-17 13:23:42">
    <summary>Final request, response, session and other variables.</summary>
    <description>Provide a capability to declare request, response, session and other variables in jspService function as final. As tunable feature, just like others, in tomcat`s web.xml file. Why need this feature? To use request, response, session variables in anonymous implementations of classes. For example - declaration of iterator through elements, which includes some other JSP file (statically). And usage of this iterator in other JSP file.</description>
    <commit commitTime="2010-12-17 06:53:20" id="73531cb"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Generator.java</file>
    </fixedFiles>
  </bug>
  <bug id="50503" reportTime="2010-12-21 01:42:21">
    <summary>Engine level Clustering does not work correctly if the web application has a version.</summary>
    <description>In Engine level clustering, the name of the cluster manager is "HostName#contextName". SimpleTcpCluster#getManagerName(String, Manager) is as follows. ==== public String getManagerName(String name, Manager manager) { String clusterName = name ; if ( clusterName == null ) clusterName = manager.getContainer().getName(); if(getContainer() instanceof Engine) { Container context = manager.getContainer() ; if(context != null &amp;&amp; context instanceof Context) { Container host = ((Context)context).getParent(); if(host != null &amp;&amp; host instanceof Host &amp;&amp; clusterName!=null &amp;&amp; !(clusterName.indexOf("#")&gt;=0)) clusterName = host.getName() +"#" + clusterName ; } } return clusterName; } ==== In this method, clusterName.indexOf("#") &gt;= 0 is checked. Because the context name becomes contextName##version if the web application has a version, the name of the cluster manager doesn't become a format of "HostName#contextName". As a result, Engine level Clustering doesn't work correctly. Best regards.</description>
    <commit commitTime="2010-12-21 13:40:00" id="701d5dc"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java</file>
    </fixedFiles>
  </bug>
  <bug id="50500" reportTime="2010-12-19 19:00:53">
    <summary>EL evaluation of floating-point String value vs BigInteger loses precision</summary>
    <description>According to the EL spec ch.1.7.1, the A+B,A-B,A*B expressions when A is a "String containing ., e, or E" and B is a BigInteger have to be evaluated as follows: "coerce both A and B to BigDecimal and apply operator" The actual implementation though, instead of coercing A as String -&gt; BigDecimal, does two coercions: String -&gt; Double -&gt; BigDecimal, which produces a different result. To reproduce, run the following JSP page: &lt;% pageContext.setAttribute("a", "1.1"); pageContext.setAttribute("b", new java.math.BigInteger("1000000000000000000000")); // "c" is used to explicitly coerce arguments to BigDecimal pageContext.setAttribute("c", new java.math.BigDecimal("0")); %&gt;${a + b}&lt;br&gt; ${(a+c) + (b+c)}&lt;br&gt; ${a - b}&lt;br&gt; ${(a+c) - (b+c)}&lt;br&gt; ${a * b}&lt;br&gt; ${(a+c) * (b+c)} Actual result: 1000000000000000000001.100000000000000088817841970012523233890533447265625 1000000000000000000001.1 -999999999999999999998.899999999999999911182158029987476766109466552734375 -999999999999999999998.9 1100000000000000088817.841970012523233890533447265625000000000000000000000 1100000000000000000000.0 Expected result: 1000000000000000000001.1 1000000000000000000001.1 -999999999999999999998.9 -999999999999999999998.9 1100000000000000000000.0 1100000000000000000000.0 I think it is a minor issue, though. This is reproducible in the current tc6.0.x as well. Maybe o.a.el.lang.ELArithmetic#add(Object, Object) should delegate to BIGDECIMAL instead of DOUBLE with these types of arguments.</description>
    <commit commitTime="2011-01-04 22:06:40" id="b19fb3b"/>
    <fixedFiles>
      <file>java/org/apache/el/lang/ELArithmetic.java</file>
      <file>test/org/apache/el/lang/TestELArithmetic.java</file>
    </fixedFiles>
  </bug>
  <bug id="50541" reportTime="2011-01-04 11:35:07">
    <summary>JNDIRealm: support configuring LDAP sizeLimit (countLimit in SearchControls)</summary>
    <description/>
    <commit commitTime="2011-01-05 00:53:20" id="76b6415"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/JNDIRealm.java</file>
    </fixedFiles>
  </bug>
  <bug id="50453" reportTime="2010-12-10 09:29:39">
    <summary>Multiple X-Forwarded-For headers not handled by RemoteIP valve</summary>
    <description/>
    <commit commitTime="2011-01-05 23:06:40" id="3541fc6"/>
    <fixedFiles>
      <file>java/org/apache/catalina/filters/RemoteIpFilter.java</file>
      <file>java/org/apache/catalina/valves/RemoteIpValve.java</file>
      <file>test/org/apache/catalina/filters/TestRemoteIpFilter.java</file>
      <file>test/org/apache/catalina/valves/TestRemoteIpValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="50467" reportTime="2010-12-13 14:02:35">
    <summary>Occasional NIO connector lockups on high load</summary>
    <description>We've been running Tomcat 6.0.29 on FC8 2.6.21 with tens of thousands of long polling threads which usually work fine. Every few days though we will experience a sudden lockup of the NIO connector and it has to be restarted. These have been seen to be accompanied by the following stack trace: Exception in thread "http-8082-ClientPoller-0" java.lang.NullPointerException at org.apache.tomcat.util.net.NioEndpoint$Poller.run(NioEndpoint.java:1620) at java.lang.Thread.run(Thread.java:662) Looking at the source it seems the issue is likely to be a race condition where access() is called on a null attachment, probably while it's in the process of being cancelled: while (iterator != null &amp;&amp; iterator.hasNext()) { SelectionKey sk = (SelectionKey) iterator.next(); KeyAttachment attachment = (KeyAttachment)sk.attachment(); /*NPE*/ attachment.access(); iterator.remove(); processKey(sk, attachment); }//while</description>
    <commit commitTime="2011-01-05 23:06:40" id="688e61e"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/net/NioEndpoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="50547" reportTime="2011-01-06 03:48:03">
    <summary>The CHANGE_SESSION_ID message that received during cluster session synchronization is dropped.</summary>
    <description>Neither CHANGE_SESSION_ID message nor SESSION_EXPIRED message set timestamp. If these messages are received during cluster sessions synchronization in DeltaManager startup, because the timestamp is not set, they are dropped. I made a patch that add timestamp for CHANGE_SESSION_ID and SESSION_EXPIRED message. Best Regards.</description>
    <commit commitTime="2011-01-06 18:33:20" id="a0ef3e6"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/session/DeltaManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="47319" reportTime="2009-06-05 05:11:52">
    <summary>With APR, getRemoteHost() returns NULL for unknown clients</summary>
    <description/>
    <commit commitTime="2011-01-07 00:06:40" id="ce64f9b"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/Http11AprProcessor.java</file>
    </fixedFiles>
  </bug>
  <bug id="49543" reportTime="2010-07-02 15:07:50">
    <summary>Request for a "shared" datasource configuration as in DBCP</summary>
    <description>The ability to configure the datasource at the server level and have it shared amongst all applications on that server with each application supplying their own credentials for the datasource. This type of configuration is supported by DBCP and is called a "shared" datasource configuration.</description>
    <commit commitTime="2011-01-07 02:53:20" id="3560f39"/>
    <fixedFiles>
      <file>java/org/apache/naming/factory/DataSourceLinkFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="50552" reportTime="2011-01-06 12:39:49">
    <summary>Ant Tasks give a null pointer exception when an error occurs, masking true error</summary>
    <description/>
    <commit commitTime="2011-01-07 19:33:20" id="a6b37af"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ant/BaseRedirectorHelperTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="50554" reportTime="2011-01-06 14:38:25">
    <summary>Bad use of getClass() could potentially lead to concurrency bugs in future</summary>
    <description/>
    <commit commitTime="2011-01-07 19:33:20" id="06b8609"/>
    <fixedFiles>
      <file>java/org/apache/naming/java/javaURLContextFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="21157" reportTime="2003-06-27 23:12:00">
    <summary>CookieExample is setting cookie after writing data</summary>
    <description>A servlet can not set the headers and cookies after writing data to the servlet's output stream. Once the servlet writes data, headers are committed. However CookieExample writes some data first before doing addCookie on the response. The reason why this code works at all even with the above bug is: The CookieExample is only writing a small amount of data before doing response.addCookie. That data is still held in buffer and not yet sent over the wire. Hence the headers are not yet committed. So it is pure luck that this example works. You can easily expose the bug by writing say 20K characters in this example before response.addCookie is called. You will see that the cookies that are adding to response are not actually sent back to client. Fix is simple. Move up the response.addCookie() before response.getWriter()</description>
    <commit commitTime="2011-01-09 07:40:00" id="4ce656a"/>
    <fixedFiles>
      <file>webapps/examples/WEB-INF/classes/CookieExample.java</file>
    </fixedFiles>
  </bug>
  <bug id="15688" reportTime="2002-12-27 22:30:47">
    <summary>full-qualified names instead of imports</summary>
    <description>Hi, Jasper generated *.java-files that are compiled. The template for those files is very "unaesthetic". I could demonstrate nice side-effects using a simple &lt;%@ page import="mypackage.Jspfactory" %&gt; You should use full qualified names instead of a bunch of import-staments. For example _jspxFactory = JspFactory.getDefaultFactory(); would become _jspxFactory = javax.servlet.jsp.JspFactory.getDefaultFactory(); and if you don't already do, you should use the this-reference where possible. I don't know what the spec says about that conflict, but it shouldn't be a bad idea to use full-qualified names instead of imports.</description>
    <commit commitTime="2011-01-12 19:00:00" id="e69347b"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Generator.java</file>
      <file>java/org/apache/jasper/compiler/JspUtil.java</file>
    </fixedFiles>
  </bug>
  <bug id="18797" reportTime="2003-04-08 06:33:14">
    <summary>MemoryUserRule doesn't validate user attributes</summary>
    <description>The implementation of org.apache.catalina.realm.MemoryRuleSet.begin dosen't validate the attribute values before adding a user to the MemoryRealm. If username or name are not present then a null username is used which can cause odd problems later on. Basically the method should check that parameters passed to MemoryRealm.addUser are not null before calling the method.</description>
    <commit commitTime="2011-01-14 01:33:20" id="51650a1"/>
    <fixedFiles>
      <file>java/org/apache/catalina/users/MemoryUserDatabase.java</file>
    </fixedFiles>
  </bug>
  <bug id="50591" reportTime="2011-01-15 12:33:11">
    <summary>NPE in ReplicationValve in 7.0.6</summary>
    <description/>
    <commit commitTime="2011-01-16 00:46:40" id="d8f8be1"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/tcp/ReplicationValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="50582" reportTime="2011-01-14 02:16:41">
    <summary>Small JSPs do not set Content-Length (and use chunked encoding) if AccessLogValve is configured</summary>
    <description/>
    <commit commitTime="2011-01-16 20:13:20" id="35a84d1"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/CoyoteAdapter.java</file>
      <file>java/org/apache/catalina/valves/AccessLogValve.java</file>
      <file>java/org/apache/catalina/valves/JDBCAccessLogValve.java</file>
      <file>java/org/apache/coyote/http11/AbstractOutputBuffer.java</file>
    </fixedFiles>
  </bug>
  <bug id="50600" reportTime="2011-01-17 06:20:11">
    <summary>ConcurrentModificationException removing WAR via FarmWarDeployer</summary>
    <description>The following exception was reported via $work WARNING: Exception processing cluster org.apache.catalina.ha.tcp.SimpleTcpCluster@68e4e358 background process java.util.ConcurrentModificationException at java.util.HashMap$HashIterator.nextEntry(HashMap.java:810) at java.util.HashMap$EntryIterator.next(HashMap.java:851) at java.util.HashMap$EntryIterator.next(HashMap.java:849) at org.apache.catalina.ha.deploy.WarWatcher.check(WarWatcher.java:87) at org.apache.catalina.ha.deploy.FarmWarDeployer.backgroundProcess(FarmWarDeployer.java:609) at org.apache.catalina.ha.tcp.SimpleTcpCluster.backgroundProcess(SimpleTcpCluster.java:596) at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1302) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1601) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1610) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1590) at java.lang.Thread.run(Thread.java:636) The root cause is removing the entry directly from the Map rather than from the iterator. I have a patch that I'll apply shortly.</description>
    <commit commitTime="2011-01-17 18:26:40" id="d269ce3"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/deploy/WarWatcher.java</file>
    </fixedFiles>
  </bug>
  <bug id="50597" reportTime="2011-01-16 12:25:24">
    <summary>Class.newInstance is used for Dynamic instance filters causing InstantiationException</summary>
    <description>Class.newInstance is called even when the following method ServletContext.addFilter method is called: javax.servlet.FilterRegistration.Dynamic addFilter(java.lang.String s, javax.servlet.Filter filter); This leads to an InstantiationException at runtime if there is no no-args constructor for the filter (pasted below). I'll supply a simple patch that fixes the issue for me. SEVERE: Exception starting filter testFilter java.lang.InstantiationException: test.TestFilter at java.lang.Class.newInstance0(Class.java:340) at java.lang.Class.newInstance(Class.java:308) at org.apache.catalina.core.DefaultInstanceManager.newInstance(DefaultIn stanceManager.java:119) at org.apache.catalina.core.ApplicationFilterConfig.getFilter(Applicatio nFilterConfig.java:252) at org.apache.catalina.core.ApplicationFilterConfig.setFilterDef(Applica tionFilterConfig.java:372) at org.apache.catalina.core.ApplicationFilterConfig.&lt;init&gt;(ApplicationFi lterConfig.java:98) at org.apache.catalina.core.StandardContext.filterStart(StandardContext. java:4382) at org.apache.catalina.core.StandardContext$2.call(StandardContext.java: 5040) at org.apache.catalina.core.StandardContext$2.call(StandardContext.java:5035) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:662)</description>
    <commit commitTime="2011-01-18 00:00:00" id="30468b7"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ApplicationFilterConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="50598" reportTime="2011-01-16 14:08:25">
    <summary>Sample build.xml uses wrong manager.url</summary>
    <description/>
    <commit commitTime="2011-01-18 00:00:00" id="de188ad"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ant/AbstractCatalinaTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="50606" reportTime="2011-01-18 02:26:41">
    <summary>Error running CGI executable in Tomcat 6.0.30</summary>
    <description/>
    <commit commitTime="2011-01-21 03:00:00" id="c0cd721"/>
    <fixedFiles>
      <file>java/org/apache/catalina/servlets/CGIServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="50620" reportTime="2011-01-19 15:54:38">
    <summary>Session related errors prevent clean recycle of Request and Response objects by CoyoteAdapter</summary>
    <description/>
    <commit commitTime="2011-01-21 03:00:00" id="fbd0110"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/Request.java</file>
    </fixedFiles>
  </bug>
  <bug id="50629" reportTime="2011-01-21 07:23:54">
    <summary>Make the bindThread/unbindThread method protected</summary>
    <description>In the latest Tomcat codes, I saw that a new thread is created for listener start, filter start and loadOnStartup. But the two methods bindThread and unbindThread is marked as private, how about making those methods protected ? So that other containers could use those two methods for their own initialization works. Thanks.</description>
    <commit commitTime="2011-01-21 22:26:40" id="3898ed0"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="50646" reportTime="2011-01-25 07:08:10">
    <summary>Tribes ByteMessage will get corrupted if message size exceeds the underlying buffer size</summary>
    <description>The Tribes ByteMessage class is used to transfer byte payloads in the context of the tribes communication framework. Due to how the message is deserialized, there will be data loss (and hence corruption) if the message size exceeds the underlying buffer size. The solution is to replace an ObjectInput#read(byte[]) call by ObjectInput#readFully(byte[]). Fix is attached.</description>
    <commit commitTime="2011-01-27 03:26:40" id="0119483"/>
    <fixedFiles>
      <file>java/org/apache/catalina/tribes/ByteMessage.java</file>
    </fixedFiles>
  </bug>
  <bug id="50642" reportTime="2011-01-24 10:45:14">
    <summary>keepAliveProtection doesn't work</summary>
    <description/>
    <commit commitTime="2011-01-28 21:06:40" id="5c13d8c"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/JreMemoryLeakPreventionListener.java</file>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
      <file>java/org/apache/catalina/loader/WebappClassLoader.java</file>
      <file>java/org/apache/catalina/loader/WebappLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="50679" reportTime="2011-01-28 03:22:33">
    <summary>FarmDeployer doesn't support parallel deployment</summary>
    <description>Version: Tomcat 7.0.6 Component: Catalina OS: Windows 7 64bit Overview: Parallel deployment works like a charm in a non-clustered environment. But when deploying a versioned app (APPNAME##VERSION.war) to a farm deployer directory, it seems that the filename encoding of the ## delimiter is not translated correctly to identify the war file on the file system: ## is translated to %23%23 Reproduce: 1. Create a version app file 2. Deploy file to watched farm deployer directory Expected result: - Versioned app is copyied to cluster members and deployed Actual result: - Versioned app is NOT copyied to cluster members. catalina.log displays the following error messages: [ContainerBackgroundProcessor[StandardEngine[Catalina]]] INFO org.apache.catalina.ha.deploy.FarmWarDeployer- Installing webapp[/Shop##201101261] from C:\Apache\Tomcat7\cluster\webapps\Shop##201101261.war [ContainerBackgroundProcessor[StandardEngine[Catalina]]] INFO org.apache.catalina.ha.deploy.FarmWarDeployer- Cluster wide remove of web app /Shop##201101261 [ContainerBackgroundProcessor[StandardEngine[Catalina]]] ERROR org.apache.catalina.ha.deploy.FarmWarDeployer- Unable to install WAR file java.io.FileNotFoundException: C:\Apache\Tomcat7\cluster\webapps\Shop%23%23201101261.war (Das System kann die angegebene Datei nicht finden) at java.io.FileInputStream.open(Native Method) at java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:106) at org.apache.catalina.ha.deploy.FileMessageFactory.&lt;init&gt;(FileMessageFactory.java:152) at org.apache.catalina.ha.deploy.FileMessageFactory.getInstance(FileMessageFactory.java:175) at org.apache.catalina.ha.deploy.FarmWarDeployer.install(FarmWarDeployer.java:372) at org.apache.catalina.ha.deploy.FarmWarDeployer.fileModified(FarmWarDeployer.java:468) at org.apache.catalina.ha.deploy.WarWatcher.check(WarWatcher.java:95) at org.apache.catalina.ha.deploy.FarmWarDeployer.backgroundProcess(FarmWarDeployer.java:591) at org.apache.catalina.ha.tcp.SimpleTcpCluster.backgroundProcess(SimpleTcpCluster.java:627) at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1200) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1393) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1403) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1382) at java.lang.Thread.run(Thread.java:662) [ContainerBackgroundProcessor[StandardEngine[Catalina]]] INFO org.apache.catalina.startup.HostConfig- Deploying web application archive Shop##201101261.war Relevant configuration in server.xml: ... &lt;Host name="sbwebapp1" appBase="${catalina.base}/cluster/webapps" unpackWARs="true" autoDeploy="true"&gt; &lt;Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster" channelSendOptions="8"&gt; &lt;Manager className="org.apache.catalina.ha.session.DeltaManager" expireSessionsOnShutdown="true" notifyListenersOnReplication="false" stateTransferTimeout="5"/&gt; &lt;Channel className="org.apache.catalina.tribes.group.GroupChannel"&gt; &lt;Membership className="org.apache.catalina.tribes.membership.McastService" address="228.0.0.4" port="45564" frequency="500" dropTime="3000"/&gt; &lt;Receiver className="org.apache.catalina.tribes.transport.nio.NioReceiver" address="192.168.222.220" port="4000" autoBind="100" selectorTimeout="5000" maxThreads="6"/&gt; &lt;Sender className="org.apache.catalina.tribes.transport.ReplicationTransmitter"&gt; &lt;Transport className="org.apache.catalina.tribes.transport.nio.PooledParallelSender"/&gt; &lt;/Sender&gt; &lt;Interceptor className="org.apache.catalina.tribes.group.interceptors.TcpFailureDetector"/&gt; &lt;Interceptor className="org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor"/&gt; &lt;Interceptor className="org.apache.catalina.tribes.group.interceptors.ThroughputInterceptor"/&gt; &lt;/Channel&gt; &lt;Valve className="org.apache.catalina.ha.tcp.ReplicationValve" filter=".*\.gif;.*\.js;.*\.jpg;.*\.png;.*\.htm;.*\.html;.*\.css;.*\.txt;.*\.swf;.*\.flv;"/&gt; &lt;Valve className="org.apache.catalina.ha.session.JvmRouteBinderValve"/&gt; &lt;ClusterListener className="org.apache.catalina.ha.session.JvmRouteSessionIDBinderListener"/&gt; &lt;ClusterListener className="org.apache.catalina.ha.session.ClusterSessionListener"/&gt; &lt;Deployer className="org.apache.catalina.ha.deploy.FarmWarDeployer" tempDir="${catalina.base}/cluster/temp/" deployDir="${catalina.base}/cluster/webapps/" watchDir="${catalina.base}/cluster/deploy/" watchEnabled="true"/&gt; &lt;/Cluster&gt; &lt;!-- Access log processes all example. Documentation at: /docs/config/valve.html Note: The pattern used is equivalent to using pattern="common" --&gt; &lt;Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs" prefix="ajp_access_" suffix=".log" pattern="%h %l %u %t &amp;quot;%r&amp;quot; %s %b" resolveHosts="false"/&gt; &lt;/Host&gt; ...</description>
    <commit commitTime="2011-01-29 05:26:40" id="2377f51"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/ClusterDeployer.java</file>
      <file>java/org/apache/catalina/ha/deploy/FarmWarDeployer.java</file>
      <file>java/org/apache/catalina/ha/deploy/FileMessage.java</file>
      <file>java/org/apache/catalina/ha/deploy/FileMessageFactory.java</file>
      <file>java/org/apache/catalina/ha/deploy/UndeployMessage.java</file>
    </fixedFiles>
  </bug>
  <bug id="50680" reportTime="2011-01-28 09:03:07">
    <summary>NPE in TagFileProcessor when tag file is in an expanded directory "jar"</summary>
    <description/>
    <commit commitTime="2011-01-29 05:26:40" id="af4549f"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/TagFileProcessor.java</file>
    </fixedFiles>
  </bug>
  <bug id="46819" reportTime="2009-03-07 23:30:10">
    <summary>Remove redundant object instantiations in JspRuntimeLibrary</summary>
    <description/>
    <commit commitTime="2011-01-29 08:13:20" id="20ace41"/>
    <fixedFiles>
      <file>java/org/apache/jasper/runtime/JspRuntimeLibrary.java</file>
    </fixedFiles>
  </bug>
  <bug id="50325" reportTime="2010-11-24 05:38:15">
    <summary>Update Tomcat to use JRE provided solutions for CVE-2009-3555 if available</summary>
    <description/>
    <commit commitTime="2011-02-01 08:26:40" id="b4e9488"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="50631" reportTime="2011-01-21 13:23:52">
    <summary>InternalNioInputBuffer should honor maxHttpHeadSize</summary>
    <description>InternalNioInputBuffer automatically expands its buffer while reading in request line, effectively ignoring the maxHttpHeaderSize setting.</description>
    <commit commitTime="2011-02-01 16:46:40" id="0084470"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/InternalNioInputBuffer.java</file>
    </fixedFiles>
  </bug>
  <bug id="50673" reportTime="2011-01-27 10:09:50">
    <summary>Error when stopping Tomcat using services.msc</summary>
    <description>When stopping Tomcat using services.msc, an error message is displayed: "Windows could not stop the Apache Tomcat 7 service on Local Computer. Error 109: The pipe has been ended." Despite this error, Tomcat appears to stop normally. No such problem was encountered in 6.0.29.</description>
    <commit commitTime="2011-02-02 09:26:40" id="6ac4a27"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardServer.java</file>
      <file>java/org/apache/catalina/startup/Catalina.java</file>
    </fixedFiles>
  </bug>
  <bug id="50709" reportTime="2011-02-02 13:11:45">
    <summary>Make class org.apache.catalina.core.ApplicationContextFacade non-final</summary>
    <description>Please make class org.apache.catalina.core.ApplicationContextFacade non-final so it can be subclassed. Need to extend ApplicationContextFacade so Mobicents Sip Servlet, working on top of Tomcat 7, to integrate with Weld. Thanks George</description>
    <commit commitTime="2011-02-04 19:46:40" id="9f41c91"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ApplicationContextFacade.java</file>
    </fixedFiles>
  </bug>
  <bug id="50751" reportTime="2011-02-10 12:11:43">
    <summary>JNDIRealm invokes getAttributes with no attribute ids. Prevents using DOMAIN\{0} to login.</summary>
    <description/>
    <commit commitTime="2011-02-12 00:00:00" id="0313ded"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/JNDIRealm.java</file>
    </fixedFiles>
  </bug>
  <bug id="50726" reportTime="2011-02-07 08:14:03">
    <summary>Jasper can generate uncompilable source code if genStringAsCharArray is turned on</summary>
    <description>Our jsp pages are compiled at build time. If I turn on genStringAsCharArray optimization switch, in some cases there will be longer lines in the generated java code than the javac compiler can process. It provides the following error message: [javac] Compiling 1609 source files to d:\...\jspc\classes [javac] d:\...\jspc\src\org\apache\jsp\WEB_002dINF\..._005fAPP\pages\termsconditions\TermsAndConditions_005fms_005fMY_jsp.java:96: constant string too long</description>
    <commit commitTime="2011-02-13 03:46:40" id="d0f3899"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Generator.java</file>
    </fixedFiles>
  </bug>
  <bug id="50771" reportTime="2011-02-14 03:30:02">
    <summary>HttpServletRequest#getAuthType() returns null though the request is authenticated.</summary>
    <description/>
    <commit commitTime="2011-02-14 15:53:20" id="877a3df"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/session/DeltaRequest.java</file>
      <file>java/org/apache/catalina/ha/session/DeltaSession.java</file>
    </fixedFiles>
  </bug>
  <bug id="50700" reportTime="2011-02-01 13:04:17">
    <summary>Context parameters are being overridden with parameters from the web application deployment descriptor</summary>
    <description>Context parameters are being overridden with parameters from the web application deployment descriptor even through "override" attribute is set to "false" For example: lines from context file &lt;Context path="/path" docBase="/path/to/docbase" cookies="true"&gt; &lt;Parameter name="parameter_name" value="test1" override="false"/&gt; .... &lt;/Context&gt; lines from web.xml &lt;context-param&gt; &lt;description&gt;default value for parameter_name&lt;/description&gt; &lt;param-name&gt;parameter_name&lt;/param-name&gt; &lt;param-value&gt;test2&lt;/param-value&gt; &lt;/context-param&gt; Now servletContext.getInitParameter("parameter_name") returns "test2"</description>
    <commit commitTime="2011-02-15 03:00:00" id="a073ac8"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="50793" reportTime="2011-02-15 22:47:30">
    <summary>Invalid DispatchType in ServletRequestListener on async dispatch</summary>
    <description>If a ServletRequestListener is defined, when is invoked after a call to AsyncContext#dispatch() the DispatcherType returned from the ServletRequest is REQUEST rather than ASYNC. When the actual servlet is invoked, the type is correctly set to ASYNC. If the listener is intended to be invoked for each dispatch, then the DispatcherType should match the value returned in the filter/servlet.</description>
    <commit commitTime="2011-02-17 02:13:20" id="72418ba"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/CoyoteAdapter.java</file>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
      <file>java/org/apache/catalina/core/StandardContextValve.java</file>
      <file>test/org/apache/catalina/core/TestAsyncContextImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="50789" reportTime="2011-02-15 12:09:28">
    <summary>custom error pages and CDI/weld problem</summary>
    <description/>
    <commit commitTime="2011-02-17 18:53:20" id="3810b04"/>
    <fixedFiles>
      <file>java/org/apache/catalina/Context.java</file>
      <file>java/org/apache/catalina/core/ApplicationDispatcher.java</file>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="50790" reportTime="2011-02-15 15:04:47">
    <summary>EL parser needs to be more dynamic</summary>
    <description>String.containes(CharSequence) is not being resolved correctly in the following situation: &lt;span class="#{(facesContext.externalContext.request.requestURI.contains(item.url)) ? 'activepage' : ''}"&gt;#{template[item.labelKey]}&lt;/span&gt; Exception: javax.el.ELException: /faces/template/mainLayout.xhtml: java.lang.NoSuchMethodException: java.lang.String.contains(java.lang.String) at com.sun.faces.facelets.compiler.AttributeInstruction.write(AttributeInstruction.java:87) at com.sun.faces.facelets.compiler.UIInstructions.encodeBegin(UIInstructions.java:75) at com.sun.faces.renderkit.html_basic.HtmlBasicRenderer.encodeRecursive(HtmlBasicRenderer.java:285) at com.sun.faces.renderkit.html_basic.OutputLinkRenderer.encodeChildren(OutputLinkRenderer.java:125) at javax.faces.component.UIComponentBase.encodeChildren(UIComponentBase.java:848) at javax.faces.component.UIComponent.encodeAll(UIComponent.java:1613) at com.sun.faces.facelets.component.RepeatRenderer.encodeChildren(RepeatRenderer.java:97) at com.sun.faces.facelets.component.UIRepeat.process(UIRepeat.java:496) at com.sun.faces.facelets.component.UIRepeat.encodeChildren(UIRepeat.java:926) at javax.faces.component.UIComponent.encodeAll(UIComponent.java:1613) at javax.faces.render.Renderer.encodeChildren(Renderer.java:168) at javax.faces.component.UIComponentBase.encodeChildren(UIComponentBase.java:848) at javax.faces.component.UIComponent.encodeAll(UIComponent.java:1613) at javax.faces.component.UIComponent.encodeAll(UIComponent.java:1616) at javax.faces.component.UIComponent.encodeAll(UIComponent.java:1616) at com.sun.faces.application.view.FaceletViewHandlingStrategy.renderView(FaceletViewHandlingStrategy.java:380) at com.sun.faces.application.view.MultiViewHandler.renderView(MultiViewHandler.java:126) at com.ocpsoft.pretty.faces.application.PrettyViewHandler.renderView(PrettyViewHandler.java:157) at com.sun.faces.lifecycle.RenderResponsePhase.execute(RenderResponsePhase.java:127) at com.sun.faces.lifecycle.Phase.doPhase(Phase.java:101) at com.sun.faces.lifecycle.LifecycleImpl.render(LifecycleImpl.java:139) at javax.faces.webapp.FacesServlet.service(FacesServlet.java:313) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:306) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at com.reardeninc.tigris.ui.facesutil.FacesFilter.doFilter(FacesFilter.java:86) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:244) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.primefaces.webapp.filter.FileUploadFilter.doFilter(FileUploadFilter.java:79) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:244) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at com.ocpsoft.pretty.PrettyFilter.doFilter(PrettyFilter.java:100) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:244) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:240) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:161) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:164) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100) at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:541) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:383) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:243) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:188) at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:288) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:680) Caused by: java.lang.NoSuchMethodException: java.lang.String.contains(java.lang.String) at java.lang.Class.getMethod(Class.java:1605) at javax.el.BeanELResolver.invoke(BeanELResolver.java:405) at javax.el.CompositeELResolver.invoke(CompositeELResolver.java:161) at org.apache.el.parser.AstValue.getValue(AstValue.java:159) at org.apache.el.parser.AstChoice.getValue(AstChoice.java:45) at org.apache.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:189) at com.sun.faces.facelets.el.ELText$ELTextVariable.toString(ELText.java:207) at com.sun.faces.facelets.compiler.AttributeInstruction.write(AttributeInstruction.java:82) ... 46 more</description>
    <commit commitTime="2011-02-17 18:53:20" id="cfab791"/>
    <fixedFiles>
      <file>java/javax/el/BeanELResolver.java</file>
      <file>java/org/apache/el/parser/AstValue.java</file>
      <file>test/org/apache/el/TestMethodExpressionImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="50780" reportTime="2011-02-15 04:51:49">
    <summary>AjpConnectionHandler keeps many connections causing memory leak</summary>
    <description>Hi, Sorry for my english. I use Tomcat 7.0.6 with APR 1.1.20. I noticed (from heap dump) many org.apache.tomcat.util.net.SocketWrapper objects, which are kept by "connections" atribute in org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler object. I don't understand, why there are so many objects representing old connections which are not active. In my example it was 300000 objects created, after 7 days of Tomcat work. Has someone forgotten to clean this HashMap from time to time? best regards Sergiusz Brzezinski</description>
    <commit commitTime="2011-02-18 00:26:40" id="b56bf50"/>
    <fixedFiles>
      <file>java/org/apache/coyote/ajp/AjpAprProtocol.java</file>
    </fixedFiles>
  </bug>
  <bug id="50189" reportTime="2010-10-31 23:27:02">
    <summary>AJP connector sends GET BODY CHUNK when reading after response closed</summary>
    <description>If a servlet (probably incorrectly) closes the writer/outputstream of a response, and then attempts to read from the request, the AJP connector sends GET BODY CHUNK to the mod_jk worker. This then starts a series of very confusing communication between the worker and tomcat. The worker doesn't read it until it makes its next request. After making its next request, it reads it, and then sends a response with 0 length. At the same time, Tomcat responds to the request made by the worker with another GET BODY CHUNK, which the worker also responds with a message of 0 length. Then the really weird thing happens, Tomcat replays the first request made by that worker. At this point, based on what I'm looking at with tcpdump, I get too confused to work out exactly what is happening.</description>
    <commit commitTime="2011-02-19 01:26:40" id="514e713"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/OutputBuffer.java</file>
    </fixedFiles>
  </bug>
  <bug id="19444" reportTime="2003-04-29 21:58:13">
    <summary>JNDI Authentication roles must be anonymous accessible</summary>
    <description>It appears that for the JNDIRealm to be able to locate roles, they must be anonymous accessible. I believe that for security purposes this should not be necessary if we are validating the user by binding to the directory. In that case the roles could be accessible to any bound user or that particular user. I discussed this very briefly on the Tomcat user list. It sounds like this had been discussed previously and for whatever reason, the idea rejected. Anyhow I submit that there is a bug, either in the code - which requires the roles to be anonymous, or in the documentation which does not make it clear that this is the case (at least in "Tomcat 4 Servlet/JSP Container - Realm Configuration HOW- TO). It seems reasonable to me that if we are binding to the directory to authenticate, we would have that user's access to roles. Perhaps the documentation should more explicetly state that this is not the case. In the hope that it would be accepted as an enhancement, I am going to attempt to attach a modified JNDIRealm that uses the authenticated connection to obtain the roles. Thank You, Art</description>
    <commit commitTime="2011-02-22 18:20:00" id="a085c4a"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/JNDIRealm.java</file>
    </fixedFiles>
  </bug>
  <bug id="21669" reportTime="2003-07-16 22:59:24">
    <summary>JNDIRealm roleBase pattern enahncement</summary>
    <description>Currently the roleBase attribute must be a fxed location in the directory. A simple change would allow the role base to be specified relative to the user DN. My enhancement suggestion would change the roleBase definition as follows: roleBase - the base entry for the role search. If not specified, the search base is the top level directory context. If specified it may optionally include pattern replacements "{0}".."{n}" corrosponding to the name parts of the user's distinguished name (as returned by javax.naming.Name.get()). For example, in the &lt;Realm&gt; defintion in server.xml you could specify the roleBase as: roleBase="ou=Groups,{1},{0}" The majority of the code to accomplish this would be in JNDIRealm.getRoles() and could look like this: String base = null; if ( roleBaseFormat != null ) { NameParser np = context.getNameParser(""); Name name = np.parse(dn); String nameParts[] = new String[name.size()]; for ( int idx = 0 ; idx &lt; name.size() ; idx++ ) nameParts[idx] = name.get(idx); base = roleBaseFormat.format(nameParts); } // Perform the configured search and process the results if (debug &gt;= 3) { log(" Searching role base '" + base + "' for attribute '" + roleName + "'"); log(" With filter expression '" + filter + "'"); } NamingEnumeration results = context.search(base, filter, controls); Thank You, Art</description>
    <commit commitTime="2011-02-22 21:06:40" id="f22600c"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/JNDIRealm.java</file>
    </fixedFiles>
  </bug>
  <bug id="50826" reportTime="2011-02-24 08:47:47">
    <summary>(Embedded) Tomcat.destroy() throws java.lang.IllegalArgumentException</summary>
    <description>Embedded Tomcat sometimes throws this exception when calling destroy() method: java.lang.IllegalArgumentException: null source at java.util.EventObject.&lt;init&gt;(EventObject.java:56) at javax.management.Notification.&lt;init&gt;(Notification.java:184) at org.apache.catalina.core.StandardContext.destroyInternal(StandardContext.java:5433) at org.apache.catalina.util.LifecycleBase.destroy(LifecycleBase.java:285) at org.apache.catalina.core.ContainerBase.removeChild(ContainerBase.java:969) at org.apache.catalina.core.ContainerBase.destroyInternal(ContainerBase.java:1108) at org.apache.catalina.util.LifecycleBase.destroy(LifecycleBase.java:285) at org.apache.catalina.core.ContainerBase.removeChild(ContainerBase.java:969) at org.apache.catalina.core.ContainerBase.destroyInternal(ContainerBase.java:1108) at org.apache.catalina.util.LifecycleBase.destroy(LifecycleBase.java:285) at org.apache.catalina.core.StandardService.destroyInternal(StandardService.java:593) at org.apache.catalina.util.LifecycleBase.destroy(LifecycleBase.java:285) at org.apache.catalina.core.StandardServer.destroyInternal(StandardServer.java:786) at org.apache.catalina.util.LifecycleBase.destroy(LifecycleBase.java:285) at org.apache.catalina.startup.Tomcat.destroy(Tomcat.java:323) at su.msk.jet.nioproxy.rule.config.EmbeddedWebserver.stop(EmbeddedWebserver.java:26) I think that StandardContext.destroyInternal() misses check that this.getObjectName()!=null</description>
    <commit commitTime="2011-02-25 01:53:20" id="9d542ed"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
      <file>test/org/apache/catalina/startup/TestTomcat.java</file>
    </fixedFiles>
  </bug>
  <bug id="49284" reportTime="2010-05-12 19:06:24">
    <summary>Implement SSL renegotiation for the NIO connector</summary>
    <description>Summary says it all. Entered as a reminder that it would be good to do this.</description>
    <commit commitTime="2011-02-26 02:53:20" id="dcda15d"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/Http11NioProcessor.java</file>
      <file>java/org/apache/tomcat/util/net/NioChannel.java</file>
      <file>java/org/apache/tomcat/util/net/SecureNioChannel.java</file>
    </fixedFiles>
  </bug>
  <bug id="50836" reportTime="2011-02-26 14:05:18">
    <summary>LifecycleState#isAvailable() to be more restrictive</summary>
    <description>I think some of the values returned by LifecycleState#isAvailable() are wrong. 1. I am certain that MUST_DESTROY should return false, because it is a state that is later than stopped. 2. I think that STOPPING_PREP should return false, because we can get there from the FAILED state. 3. I think that STARTING should return false, because it is too early to return true there. As a result, the following is the complete list of states are to return true in #isAvailable(): STARTED, MUST_STOP</description>
    <commit commitTime="2011-02-27 17:46:40" id="92ff888"/>
    <fixedFiles>
      <file>java/org/apache/catalina/Lifecycle.java</file>
      <file>java/org/apache/catalina/LifecycleListener.java</file>
      <file>java/org/apache/catalina/LifecycleState.java</file>
      <file>java/org/apache/catalina/util/LifecycleBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="31027" reportTime="2004-09-02 22:36:52">
    <summary>major error from minor whitespace error in properties file</summary>
    <description>A developer accidentally placed a tab character after the port number in the properties file for a tomcat instance. This prevented tomcat from listening on that port, but it was difficult to track down whether tomcat was running. Seems like the properties-file reader could easily trim excess whitespace before trying to use entries.</description>
    <commit commitTime="2011-02-27 20:33:20" id="4b4ef0c"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/CatalinaProperties.java</file>
    </fixedFiles>
  </bug>
  <bug id="28852" reportTime="2004-05-08 20:23:38">
    <summary>failonerror attribute on Ant tasks</summary>
    <description>failonerror boolean attribute on manager Ant tasks would be a nice have to allow for more flexible operation within Ant build files. I will attach a patch next week that also fixes unecessary CRs during response read/print and missing url encoding in some tasks.</description>
    <commit commitTime="2011-03-01 03:06:40" id="e1bf740"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ant/JMXGetTask.java</file>
      <file>java/org/apache/catalina/ant/JMXQueryTask.java</file>
      <file>java/org/apache/catalina/ant/JMXSetTask.java</file>
      <file>java/org/apache/catalina/ant/ResourcesTask.java</file>
      <file>java/org/apache/catalina/ant/UndeployTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="50855" reportTime="2011-03-02 11:19:27">
    <summary>NullPointerException thrown in AuthenticatorBase.register method for null principal</summary>
    <description/>
    <commit commitTime="2011-03-06 16:26:40" id="b24b0c0"/>
    <fixedFiles>
      <file>java/org/apache/catalina/authenticator/AuthenticatorBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="50895" reportTime="2011-03-08 15:27:00">
    <summary>JSP compiler initializes classes during compile which can result in failures</summary>
    <description/>
    <commit commitTime="2011-03-09 22:13:20" id="5d61212"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/ELFunctionMapper.java</file>
    </fixedFiles>
  </bug>
  <bug id="50903" reportTime="2011-03-09 14:34:53">
    <summary>Current keep-alive request processed after connector.stop()</summary>
    <description>When the connector is stopped, if a connection is in a keep-alive state the next request received by that connection will be processed and then the connection will be closed. When the request is received, it should be rejected. Outstanding questions: - What return code (if any) should be sent back to the client? - If the reading of a request starts before the connector is stopped, should that request be allowed to complete or should it be rejected?</description>
    <commit commitTime="2011-03-16 01:26:40" id="c8ea62e"/>
    <fixedFiles>
      <file>java/org/apache/coyote/ajp/AjpProcessor.java</file>
      <file>java/org/apache/coyote/http11/Http11AprProcessor.java</file>
      <file>java/org/apache/coyote/http11/Http11NioProcessor.java</file>
      <file>java/org/apache/coyote/http11/Http11Processor.java</file>
      <file>test/org/apache/catalina/connector/TestConnector.java</file>
      <file>test/org/apache/catalina/startup/TesterServlet.java</file>
      <file>test/org/apache/catalina/startup/TomcatBaseTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="50927" reportTime="2011-03-14 08:59:04">
    <summary>[patch] More specific error message for missing SSLCertificateFile</summary>
    <description/>
    <commit commitTime="2011-03-16 18:06:40" id="e34f848"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/net/AprEndpoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="50997" reportTime="2011-03-30 11:57:49">
    <summary>StandardJarScanner ignores web-fragment.xml files in unpacked jars if they are not ending with ".jar"</summary>
    <description/>
    <commit commitTime="2011-03-31 05:20:00" id="62ddb9e"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
      <file>java/org/apache/tomcat/util/scan/StandardJarScanner.java</file>
    </fixedFiles>
  </bug>
  <bug id="51038" reportTime="2011-04-07 11:18:30">
    <summary>No access logs for Servlet 3.0 async requests</summary>
    <description>Access logs written by org.apache.catalina.valves.AccessLogValve are not being written for servlet 3.0 async requests. To reproduce: - Handle a request asynchronously by marking the servlet with @WebServlet(asyncSupported=true) - Send some traffic and notice that nothing is being written to the access logs. AccessLogValve.log() is called by org.apache.catalina.Context.logAccess(). From the source for version 7.0.11, in org.apache.catalina.connector.CoyoteAdapter.java, line 416: AsyncContextImpl asyncConImpl = (AsyncContextImpl)request.getAsyncContext(); if (asyncConImpl != null) { async = true; } else if (!comet) { response.finishResponse(); if (postParseSuccess) { // Log only if processing was invoked. // If postParseRequest() failed, it has already logged it. ((Context) request.getMappingData().context).logAccess( request, response, System.currentTimeMillis() - req.getStartTime(), false); } req.action(ActionCode.POST_REQUEST , null); } In the async case logAccess() isn't called here. I've searched through the code and don't see logAccess() being called anywhere else, except in error cases. So, it looks like the async case is missing a call to logAccess() somewhere.</description>
    <commit commitTime="2011-04-17 05:40:00" id="dc3dff4"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/CoyoteAdapter.java</file>
      <file>test/org/apache/catalina/core/TestAsyncContextImpl.java</file>
      <file>test/org/apache/catalina/valves/TesterAccessLogValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="51042" reportTime="2011-04-08 05:54:06">
    <summary>HttpSessionListener.sessionCreated() is called a second time when user is authenticated with no matching sessionDestroyed() call.</summary>
    <description>When my web application has a HttpSessionListener configured in its web.xml, then that classes sessionCreated() is called when a user is assigned a new session. However, that method is *also* called when that user authenticates itself and the session is assigned a new ID (whether or not this is actually a "new session" can be disputed, but that's not the point of this bug). When the session is removed (due to a timeout, for example), then a single sessionDestroyed() call is executed. When the HttpSessionListener manages some kind of external resource, this behaviour leads to a resource leak, because sessionCreated() is called twice, while sessionRemoved() is only called once! I'm aware of the reason for changing the session ID and (somehow) understand why sessionCreated() is called again (after all there's a new session ID), but there must be *some* way for the SessionListener to be notified that the "old session" no longer exists. The same behaviour is seen in Tomcat 6.0 (and probably 5.5 as well, but I didn't test that).</description>
    <commit commitTime="2011-04-17 05:40:00" id="dc3758e"/>
    <fixedFiles>
      <file>java/org/apache/catalina/Session.java</file>
      <file>java/org/apache/catalina/ha/session/DeltaManager.java</file>
      <file>java/org/apache/catalina/ha/session/DeltaSession.java</file>
      <file>java/org/apache/catalina/ha/session/JvmRouteBinderValve.java</file>
      <file>java/org/apache/catalina/manager/DummyProxySession.java</file>
      <file>java/org/apache/catalina/session/ManagerBase.java</file>
      <file>java/org/apache/catalina/session/StandardSession.java</file>
    </fixedFiles>
  </bug>
  <bug id="50173" reportTime="2010-10-28 10:14:39">
    <summary>JDBCSampler discards ResultSet from a PreparedStatement.</summary>
    <description>Hi, I am using JMeter with a Test Plan that uses a JDBC Request with a PreparedStatement query type. When running this I am getting the following error in the jmeter.log file 2010/10/28 11:30:31 INFO - jmeter.threads.JMeterThread: Thread started: JDBC Users 1-1 2010/10/28 12:13:38 ERROR - jmeter.threads.JMeterThread: Error while processing sampler 'PREPARED SELECT Customer JDBC Request' : java.lang.NullPointerException at org.apache.jmeter.protocol.jdbc.sampler.JDBCSampler.getStringFromResultSet(JDBCSampler.java:415) at org.apache.jmeter.protocol.jdbc.sampler.JDBCSampler.resultSetsToString(JDBCSampler.java:268) at org.apache.jmeter.protocol.jdbc.sampler.JDBCSampler.sample(JDBCSampler.java:208) at org.apache.jmeter.threads.JMeterThread.process_sampler(JMeterThread.java:348) at org.apache.jmeter.threads.JMeterThread.run(JMeterThread.java:243) at java.lang.Thread.run(Thread.java:619) The query (below) can be expected to return a number of records SELECT * FROM Customer WHERE ID=?; the param is set to 1 If I use instead a SelectStatement results are returned so the query itself is not at fault. I have retrieved the code for the v2_4 tag to identify the root cause for the NPE and create a patch. This bug report includes a patch against trunk as the issue is also in trunk. The root cause is due to: org.apache.jmeter.protocol.jdbc.sampler.JDBCSampler.sample(Entry e) The code path for PreparedStatements types starting on line 204 has in it a call to org.hsqldb.jdbc.JDBCPreparedStatement.executeUpdate() which returns a ResultSet. The side effect of the call is to set the JDBCPreparedStatement.currentResultSet field member to null. JDBCSampler does not keep the ResultSet reference. Instead it is discarded. The call on the next line (208) String sb = resultSetsToString(pstmt,true,null) again tries to get the ResultSet on line 267. This causes a NullPointerException because the JDBCPreparedStatement.currentResultSet field was set to null earlier. Looking at the code path for a CALLABLE statement type (line 190) shows better handling for queries that return ResultSet. The two lines 207,208 replaced with boolean hasResultSet = pstmt.execute(); String sb = resultSetsToString(pstmt,hasResultSet,null); fixes the defect. Regards, Jeremy Whiting Red Hat</description>
    <commit commitTime="2011-04-17 08:26:40" id="3a847c7"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/net/AprEndpoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="51095" reportTime="2011-04-20 12:51:05">
    <summary>NPE in AprEndpoint.java</summary>
    <description/>
    <commit commitTime="2011-04-24 07:06:40" id="75d28d4"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/net/AprEndpoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="51136" reportTime="2011-04-29 16:18:31">
    <summary>Allow to set the context name through Tomcat's embeded class before adding it to the host</summary>
    <description>org.apache.catalina.startup.Tomcat creates contexts and add them to the host directly. It would be nice if we could set the name of the context before adding it to the host. I'm including a patch that overloads the methods "addWebapp" and "addContext" to take that name as a parameter.</description>
    <commit commitTime="2011-05-04 17:06:40" id="2dc54c4"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/Tomcat.java</file>
    </fixedFiles>
  </bug>
  <bug id="51119" reportTime="2011-04-26 05:29:40">
    <summary>extras - JmxRemoteLifecycleListener does not support JAAS based authentication and authorisation</summary>
    <description>(Also true in Tomcat 7) The JmxRemoteLifecycleListener does not support JAAS based authentication. That is, when authentication is required, it only supports file based authentication.</description>
    <commit commitTime="2011-05-05 04:13:20" id="2ffa0f7"/>
    <fixedFiles>
      <file>java/org/apache/catalina/mbeans/JmxRemoteLifecycleListener.java</file>
    </fixedFiles>
  </bug>
  <bug id="51124" reportTime="2011-04-27 06:31:47">
    <summary>ArrayIndexOutOfBoundsException after setting org.apache.jasper.runtime.BodyContentImpl.LIMIT_BUFFER=true</summary>
    <description>First of all, I know that there has been a bug regarding a similar problem before and that it was fixed. But currently this bugs occurs even with tomcat version 6.0.32. We have a problem with the tomcat runnign with the parameter org.apache.jasper.runtime.BodyContentImpl.LIMIT_BUFFER=true. After the tomcat has just started, everything is fine but after one or two days a lot of ArrayIndexOutOfBoundsException occur on random pages of the application. Tomcats started without this parameter don't seem to have that problem. Unfortunately we weren't able reproduce the bug locally, It appears only on our production system. Could there be a concurrency problem, that only shows if a lot it going on on the platform? I can provide two small stackstraces that can show the classes where the problem occurs: 1. Caused by: java.lang.ArrayIndexOutOfBoundsException at org.apache.jasper.runtime.BodyContentImpl.write(Unknown Source) at java.io.PrintWriter.write(PrintWriter.java:382) at org.apache.jasper.runtime.JspWriterImpl.flushBuffer(Unknown Source) at org.apache.jasper.runtime.PageContextImpl.release(Unknown Source) at org.apache.jasper.runtime.JspFactoryImpl.internalReleasePageContext(Unknown Source) at org.apache.jasper.runtime.JspFactoryImpl.releasePageContext(Unknown Source) at org.apache.jsp.members.lists.short_.incomingShortList_jsp._jspService(incomingShortList_jsp.java:796) at org.apache.jasper.runtime.HttpJspBase.service(Unknown Source) at javax.servlet.http.HttpServlet.service(Unknown Source) 2. Caused by: java.lang.ArrayIndexOutOfBoundsException at java.lang.String.getChars(String.java:854) at org.apache.jasper.runtime.BodyContentImpl.write(Unknown Source) at org.apache.jasper.runtime.BodyContentImpl.write(Unknown Source) at org.apache.jasper.runtime.BodyContentImpl.print(Unknown Source) at org.apache.taglibs.standard.tag.common.fmt.MessageSupport.doEndTag(MessageSupport.java:203) at org.apache.jsp.members.profiles.profile_jsp._jspx_meth_fmt_005fmessage_005f2(profile_jsp.java:4897) at org.apache.jsp.members.profiles.profile_jsp._jspService(profile_jsp.java:481) at org.apache.jasper.runtime.HttpJspBase.service(Unknown Source) at javax.servlet.http.HttpServlet.service(Unknown Source)</description>
    <commit commitTime="2011-05-05 04:13:20" id="2cdbcd5"/>
    <fixedFiles>
      <file>java/org/apache/jasper/runtime/BodyContentImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="51099" reportTime="2011-04-21 05:11:31">
    <summary>SPNEGO loginConfigName does not work</summary>
    <description>As reported by fhanik on the dev list: 2. com.sun.security.jgss.krb5.accept is not configurable While the authenticator has the attribute loginConfigName, there seems to be a place in the code where it omits this entry. renaming this entry in jaas.conf and setting the loginConfigName will fail to validate a ticket The problem code is here: gssContext = manager.createContext(manager.createCredential(null, GSSCredential.DEFAULT_LIFETIME, new Oid("1.3.6.1.5.5.2"), GSSCredential.ACCEPT_ONLY)); should look like final GSSManager manager = GSSManager.getInstance(); final PrivilegedExceptionAction&lt;GSSCredential&gt; action = new PrivilegedExceptionAction&lt;GSSCredential&gt;() { public GSSCredential run() throws GSSException { return manager.createCredential(null, GSSCredential.DEFAULT_LIFETIME, new Oid("1.3.6.1.5.5.2"), GSSCredential.ACCEPT_ONLY); } }; gssContext = manager.createContext(Subject.doAs(lc.getSubject(), action));|| best Filip</description>
    <commit commitTime="2011-05-05 07:00:00" id="343a609"/>
    <fixedFiles>
      <file>java/org/apache/catalina/authenticator/SpnegoAuthenticator.java</file>
    </fixedFiles>
  </bug>
  <bug id="50950" reportTime="2011-03-20 13:28:18">
    <summary>NotSerializableException: org.apache.catalina.realm.GenericPrincipal</summary>
    <description/>
    <commit commitTime="2011-05-05 20:53:20" id="0559491"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/session/DeltaSession.java</file>
    </fixedFiles>
  </bug>
  <bug id="51154" reportTime="2011-05-05 19:33:18">
    <summary>Spurious @deprecated tags in ServletContext</summary>
    <description/>
    <commit commitTime="2011-05-06 16:20:00" id="01e1850"/>
    <fixedFiles>
      <file>java/javax/servlet/ServletContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="51155" reportTime="2011-05-05 19:36:28">
    <summary>Missing @deprecated comments</summary>
    <description/>
    <commit commitTime="2011-05-06 16:20:00" id="f477068"/>
    <fixedFiles>
      <file>java/javax/servlet/jsp/el/ELException.java</file>
      <file>java/javax/servlet/jsp/el/ELParseException.java</file>
      <file>java/javax/servlet/jsp/el/Expression.java</file>
      <file>java/javax/servlet/jsp/el/ExpressionEvaluator.java</file>
      <file>java/javax/servlet/jsp/el/FunctionMapper.java</file>
      <file>java/javax/servlet/jsp/el/VariableResolver.java</file>
    </fixedFiles>
  </bug>
  <bug id="51156" reportTime="2011-05-06 00:30:54">
    <summary>"Expire sessions" button not visible for context configured in server.xml</summary>
    <description>If app is configured in server.xml like this: {code} &lt;Host name="www.myapp.pl" appBase="/usr/lib/tomcat/webapps" unpackWARs="false" autoDeploy="false" xmlValidation="false" xmlNamespaceAware="false" &gt; &lt;Context docBase="/var/www/myapp" path="" cacheMaxSize="5120" cacheTTL="60000" cachingAllowed="true" &gt; &lt;/Context&gt; &lt;Context path="/manager" privileged="true" docBase="/usr/lib/tomcat/webapps/manager"&gt; &lt;/Context&gt; &lt;/Host&gt; {code} In Tomcat Manager, on the application list, there is a button "Expire sessions" available only for "/manager" application. There is no button "Expire sessions" for "/" path. I think bug is in HTMLManagerServlet.java in this part: {code} if (context.getPath().equals(this.context.getPath())) { writer.print(MessageFormat.format( MANAGER_APP_ROW_BUTTON_SECTION, args)); } else if (context.getAvailable() &amp;&amp; isDeployed) { writer.print(MessageFormat.format( STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args)); } else if (context.getAvailable() &amp;&amp; !isDeployed) { writer.print(MessageFormat.format( STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args)); } else if (!context.getAvailable() &amp;&amp; isDeployed) { writer.print(MessageFormat.format( STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION, args)); } else { writer.print(MessageFormat.format( STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION, args)); } {code}</description>
    <commit commitTime="2011-05-06 16:20:00" id="de7f0e1"/>
    <fixedFiles>
      <file>java/org/apache/catalina/manager/HTMLManagerServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="51208" reportTime="2011-05-17 09:14:29">
    <summary>SVN TRUNK : JDBC interceptor options are not taken into account</summary>
    <description/>
    <commit commitTime="2011-05-17 21:46:40" id="2bb247a"/>
    <fixedFiles>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java</file>
    </fixedFiles>
  </bug>
  <bug id="51212" reportTime="2011-05-17 16:25:52">
    <summary>QueryStats has synchornisation issues</summary>
    <description/>
    <commit commitTime="2011-05-19 01:33:20" id="b24b17c"/>
    <fixedFiles>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java</file>
    </fixedFiles>
  </bug>
  <bug id="51220" reportTime="2011-05-18 15:42:54">
    <summary>Add system property that makes it possible for jsp pages with the extends page directive to take advantage of tag pooling</summary>
    <description/>
    <commit commitTime="2011-05-19 18:13:20" id="c46e56c"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Generator.java</file>
    </fixedFiles>
  </bug>
  <bug id="51229" reportTime="2011-05-19 06:55:54">
    <summary>Some async examples are not work correctly</summary>
    <description/>
    <commit commitTime="2011-05-19 18:13:20" id="55d8b72"/>
    <fixedFiles>
      <file>webapps/examples/WEB-INF/classes/async/Async0.java</file>
    </fixedFiles>
  </bug>
  <bug id="35054" reportTime="2005-05-25 10:03:08">
    <summary>warn if appBase is not existing as a File or directory</summary>
    <description>otherwise, it may very hard to find what is wrong</description>
    <commit commitTime="2011-05-21 03:33:20" id="9bb6e4f"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/HostConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="51185" reportTime="2011-05-11 10:21:44">
    <summary>Performance : DataSourceProxy#createPool should use more fine grained synchronisation</summary>
    <description/>
    <commit commitTime="2011-05-21 06:20:00" id="4bdd8d0"/>
    <fixedFiles>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java</file>
    </fixedFiles>
  </bug>
  <bug id="27122" reportTime="2004-02-20 21:09:17">
    <summary>IE plugins cannot access components through Tomcat 5 over SSL</summary>
    <description>SSL seems to be failing when the Content-Type header is set to "image/svg+xml". I've only seen this failure when SSL was running on a Solaris machine. (uname -a: SunOS [hostname removed] 5.8 Generic_108528-18 sun4u sparc SUNW,Ultra-60) When attempted on Windows, we were unable to duplicate the error. This reliably fails when attempted on this specific Solaris machine. If I get a chance, I'll try to create a test-case and see if I can reproduce this on other Solaris machines. Unfortunately, this was a show-stopper for a release that's being made today so I'm pressed for time. Basically, what happens is that we're using a JSP page to create an SVG file. Because of this, we have to set the Content-Type header to "image/svg+xml". When the MIME type is set to this value, the page fails to load in Internet Explorer 6 (SP1) with a message of "connection failed" or something similar. When an attempt was made in Opera, Opera responded by crashing. Mozilla successfully downloaded the file, though. However, when resetting the MIME type in the page to "text/plain" all three browsers can access the page without failure. By back-revving Tomcat to version 4.1.29, we were able to resolve this issue and access the page in all three browsers. I'll try and create a test-case later today and verify that it isn't just our SVG JSP that's failing but any that creates SVG but I'm currently pressed for time - sorry.</description>
    <commit commitTime="2011-05-23 05:33:20" id="4161179"/>
    <fixedFiles>
      <file>java/org/apache/catalina/authenticator/AuthenticatorBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="51226" reportTime="2011-05-19 06:26:15">
    <summary>[Patch] to add FindLeaks ant task</summary>
    <description>There is no ant task for FindLeaks.</description>
    <commit commitTime="2011-05-24 23:13:20" id="1cd5e7b"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ant/FindLeaksTask.java</file>
      <file>java/org/apache/catalina/manager/HTMLManagerServlet.java</file>
      <file>java/org/apache/catalina/manager/ManagerServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="51277" reportTime="2011-05-27 12:04:07">
    <summary>NPE during the form authentication when form-login-config is missed</summary>
    <description/>
    <commit commitTime="2011-05-31 21:53:20" id="5b0919c"/>
    <fixedFiles>
      <file>java/org/apache/catalina/authenticator/FormAuthenticator.java</file>
    </fixedFiles>
  </bug>
  <bug id="51251" reportTime="2011-05-24 01:28:35">
    <summary>Patch to add version parameter to ant task</summary>
    <description/>
    <commit commitTime="2011-06-04 06:26:40" id="d19daf5"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ant/AbstractCatalinaCommandTask.java</file>
      <file>java/org/apache/catalina/ant/ReloadTask.java</file>
      <file>java/org/apache/catalina/ant/SessionsTask.java</file>
      <file>java/org/apache/catalina/ant/StartTask.java</file>
      <file>java/org/apache/catalina/ant/StopTask.java</file>
      <file>java/org/apache/catalina/ant/UndeployTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="51324" reportTime="2011-06-05 05:17:12">
    <summary>When OutputBuffer.doFlush gets Exception, doFlush gets stuck to true</summary>
    <description/>
    <commit commitTime="2011-06-07 23:20:00" id="1bbbdb2"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/OutputBuffer.java</file>
    </fixedFiles>
  </bug>
  <bug id="51340" reportTime="2011-06-08 13:37:25">
    <summary>Intermittent java.lang.IllegalArgumentException: &lt;session-config&gt; element is limited to 1 occurrence</summary>
    <description/>
    <commit commitTime="2011-06-09 00:20:00" id="1fe28a6"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="51348" reportTime="2011-06-09 08:53:41">
    <summary>Potential NullPointerException in org.apache.catalina.servlets.WebdavServlet at line 1336</summary>
    <description>A WebDAV LOCK_REFRESH request may cause a NullPointerException because of an (IMHO) wrong check at line 1332 in WebdavServlet.java 1056763 2011-01-08 18:56:57Z markt. I suggest line 1332 should be: ... if (toRenew != null) { ...</description>
    <commit commitTime="2011-06-10 04:06:40" id="71b18c8"/>
    <fixedFiles>
      <file>java/org/apache/catalina/servlets/WebdavServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="51306" reportTime="2011-06-01 12:21:28">
    <summary>NPE in DeltaRequest.writeExternal(DeltaRequest.java:267) when handling remote session expiration</summary>
    <description>Occasionally we got errors like following: ====== 2011-05-30 03:40:17,697 ERROR [pool-1-thread-2] (org.apache.catalina.ha.session.DeltaManager) Manager [localhost#]: Unable to receive message through TCP channel java.lang.NullPointerException at java.io.ObjectOutputStream$BlockDataOutputStream.getUTFLength(ObjectOutputStream.java:2106) at java.io.ObjectOutputStream$BlockDataOutputStream.writeUTF(ObjectOutputStream.java:1977) at java.io.ObjectOutputStream.writeUTF(ObjectOutputStream.java:849) at org.apache.catalina.ha.session.DeltaRequest.writeExternal(DeltaRequest.java:267) at org.apache.catalina.ha.session.DeltaRequest.serialize(DeltaRequest.java:287) at org.apache.catalina.ha.session.DeltaManager.serializeDeltaRequest(DeltaManager.java:716) at org.apache.catalina.ha.session.DeltaManager.requestCompleted(DeltaManager.java:1224) at org.apache.catalina.ha.session.DeltaSession.expire(DeltaSession.java:403) at org.apache.catalina.ha.session.DeltaManager.handleSESSION_EXPIRED(DeltaManager.java:1546) at org.apache.catalina.ha.session.DeltaManager.messageReceived(DeltaManager.java:1452) at org.apache.catalina.ha.session.DeltaManager.messageDataReceived(DeltaManager.java:1173) at org.apache.catalina.ha.session.ClusterSessionListener.messageReceived(ClusterSessionListener.java:92) at org.apache.catalina.ha.tcp.SimpleTcpCluster.messageReceived(SimpleTcpCluster.java:901) at org.apache.catalina.ha.tcp.SimpleTcpCluster.messageReceived(SimpleTcpCluster.java:882) at org.apache.catalina.tribes.group.GroupChannel.messageReceived(GroupChannel.java:269) at org.apache.catalina.tribes.group.ChannelInterceptorBase.messageReceived(ChannelInterceptorBase.java:79) at org.apache.catalina.tribes.group.interceptors.TcpFailureDetector.messageReceived(TcpFailureDetector.java:110) at org.apache.catalina.tribes.group.ChannelInterceptorBase.messageReceived(ChannelInterceptorBase.java:79) at org.apache.catalina.tribes.group.ChannelInterceptorBase.messageReceived(ChannelInterceptorBase.java:79) at org.apache.catalina.tribes.group.ChannelCoordinator.messageReceived(ChannelCoordinator.java:241) at org.apache.catalina.tribes.transport.ReceiverBase.messageDataReceived(ReceiverBase.java:225) at org.apache.catalina.tribes.transport.nio.NioReplicationTask.drainChannel(NioReplicationTask.java:188) at org.apache.catalina.tribes.transport.nio.NioReplicationTask.run(NioReplicationTask.java:91) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:662) It looks like the functionality of Tomcat is not affected by this. The NPE comes from trying to write null sessionId, but why does Tomcat try to send something from handling received authoritative SESSION_EXPIRED message?</description>
    <commit commitTime="2011-06-13 18:13:20" id="4e5571f"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/session/DeltaManager.java</file>
      <file>java/org/apache/catalina/ha/session/DeltaSession.java</file>
    </fixedFiles>
  </bug>
  <bug id="43538" reportTime="2007-10-02 14:42:39">
    <summary>[patch] Show the hostname and IP address in the manager webapp</summary>
    <description>We have an environment with a couple of load-balanced Tomcats fronted by httpd. If someone accesses the manager application through the load-balancer, they will not know which of the load-balanced Tomcats they end up at. In these situations, and others as well, it would be nice if the manager could tell the hostname and IP address of the machine it is running on.</description>
    <commit commitTime="2011-06-16 07:20:00" id="2b8e6cf"/>
    <fixedFiles>
      <file>java/org/apache/catalina/manager/Constants.java</file>
      <file>java/org/apache/catalina/manager/HTMLManagerServlet.java</file>
      <file>java/org/apache/catalina/manager/StatusManagerServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="48956" reportTime="2010-03-22 11:48:29">
    <summary>SSI regular expressions not working</summary>
    <description/>
    <commit commitTime="2011-06-16 07:20:00" id="874048a"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ssi/ExpressionParseTree.java</file>
    </fixedFiles>
  </bug>
  <bug id="51386" reportTime="2011-06-16 14:12:27">
    <summary>@HandlingType not correctly handled at server startup leads to incorrect classes set passed to initializers</summary>
    <description/>
    <commit commitTime="2011-06-17 00:00:00" id="9f8b983"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
      <file>test/org/apache/catalina/startup/TestContextConfigAnnotation.java</file>
    </fixedFiles>
  </bug>
  <bug id="49165" reportTime="2010-04-21 14:20:08">
    <summary>Enhancement - Allow %{TIME_FORMAT}t As Configuration for AccessLogValve</summary>
    <description>AccessLogValve.DateAndTimeElement() can currently be configured only with %t which output the date/time in Common Log Format. By adding the capability to configure with %{TIME_FORMAT}, one could override (at least) the timeFormatter property of the class ... or it could go further and allow overriding of all the [day, month, year, time]Formatter properties. Justification for enhancement: The log currenlty provide the ability to log processing time in millis (via %T), but an accurate log of the order in which requests are received cannot be determined without the capabilities of logging a a format with milliseconds using the %t element.</description>
    <commit commitTime="2011-06-19 18:40:00" id="7d6c439"/>
    <fixedFiles>
      <file>java/org/apache/catalina/valves/AccessLogValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="51396" reportTime="2011-06-20 17:02:09">
    <summary>Embedding class cannot launch a webapp with a jsp servlet</summary>
    <description/>
    <commit commitTime="2011-06-21 06:46:40" id="f75418b"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
      <file>test/org/apache/catalina/startup/TestContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="51403" reportTime="2011-06-21 13:13:00">
    <summary>Avoid NullPointerException in JULI FileHandler if formatter is misconfigured</summary>
    <description>If formatter assigned to org.apache.juli.FileHandler in logging.properties is misconfigured and fails to load, the FileHandler starts without formatter and fails with an NPE later. To reproduce: assign some bogus value to 1catalina.org.apache.juli.FileHandler.formatter When Tomcat starts, the following will be printed at the console: java.util.logging.ErrorManager: 4 java.lang.NullPointerException at org.apache.juli.FileHandler.openWriter(FileHandler.java:377) at org.apache.juli.FileHandler.&lt;init&gt;(FileHandler.java:99) at org.apache.juli.FileHandler.&lt;init&gt;(FileHandler.java:90) I think we can be more tolerant to this configuration error and fall back to the default formatter. I will commit a fix shortly.</description>
    <commit commitTime="2011-06-21 20:40:00" id="f2dd57b"/>
    <fixedFiles>
      <file>java/org/apache/juli/FileHandler.java</file>
    </fixedFiles>
  </bug>
  <bug id="51418" reportTime="2011-06-22 15:54:00">
    <summary>Allow more flexibility in adding webapps to org.apache.catalina.startup.Tomcat</summary>
    <description/>
    <commit commitTime="2011-06-23 03:13:20" id="f83c07e"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/Tomcat.java</file>
    </fixedFiles>
  </bug>
  <bug id="51436" reportTime="2011-06-27 09:56:45">
    <summary>ServletRequestListener fails to access request parameters when an Expect-Header is sent</summary>
    <description/>
    <commit commitTime="2011-06-29 00:53:20" id="6dffc54"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardContextValve.java</file>
      <file>java/org/apache/catalina/core/StandardWrapperValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="51447" reportTime="2011-06-28 11:15:18">
    <summary>Session type changes from Backup to Primary</summary>
    <description/>
    <commit commitTime="2011-06-29 00:53:20" id="3d85a85"/>
    <fixedFiles>
      <file>java/org/apache/catalina/manager/HTMLManagerServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="50353" reportTime="2010-11-27 17:45:41">
    <summary>Calling asyncContext.getResponse() returns null after async timeout</summary>
    <description>If the async thread calls asyncContext.getResponse() after the async timeout, it gets a null reference. In the following example, it leads to a NPE. The servlet spec is not very clear on the behavior to adopt after a timeout, but I don't think null should be returned. Maybe an IllegalStateException instead ? It seems to be the case if complete() is called after the timeout. package test; import java.io.IOException; import java.io.PrintWriter; import javax.servlet.AsyncContext; import javax.servlet.AsyncEvent; import javax.servlet.AsyncListener; import javax.servlet.ServletException; import javax.servlet.ServletResponse; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; /** * Servlet implementation class MyServlet */ @WebServlet(value = "/MyServlet", asyncSupported = true) public class MyServlet extends HttpServlet implements AsyncListener { private static final long serialVersionUID = 1L; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { final AsyncContext asyncContext = request.startAsync(request, response); asyncContext.addListener(this); asyncContext.setTimeout(10*1000); asyncContext.start(new Runnable() { @Override public void run() { System.out.println("Entering async thread"); try { Thread.sleep(20 * 1000); System.out.println("&lt;Asyncthread&gt; about to write response"); ServletResponse response2 = asyncContext.getResponse(); PrintWriter writer = response2.getWriter(); writer.write("Hello world"); System.out.println("&lt;Asyncthread&gt; about to complete"); asyncContext.complete(); } catch (Exception e) { e.printStackTrace(); } } }); } @Override public void onComplete(AsyncEvent evt) throws IOException { System.out.println("onComplete " + evt); } @Override public void onError(AsyncEvent evt) throws IOException { System.out.println("onError " + evt); } @Override public void onStartAsync(AsyncEvent evt) throws IOException { System.out.println("onStartAsync " + evt); } @Override public void onTimeout(AsyncEvent evt) throws IOException { System.out.println("onTimeout " + evt); evt.getAsyncContext().getResponse().getWriter().write("Timed out"); evt.getAsyncContext().complete(); } }</description>
    <commit commitTime="2011-06-29 00:53:20" id="d36c5d9"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/AsyncContextImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="51088" reportTime="2011-04-20 05:42:42">
    <summary>ArrayIndexOutOfBoundsException from org.apache.el.parser.JJTELParserState</summary>
    <description>I found the following ArrayIndexOutOfBoundsException in my logfile. It occurred directly after login into my webApp without any further user interaction. Unfortunately it is not reproducible at all. I am not sure whether Jasper is the right component. However the class JJTELParserState is in the jasper-el.jar. Environment: Tomcat 6.0.32 Facelets 1.1.14 Myfaces 1.2.9 SCHWERWIEGEND: Error Rendering View[/facelets/myview.xhtml] java.lang.ArrayIndexOutOfBoundsException: -1 at java.util.ArrayList.remove(ArrayList.java:390) at org.apache.el.parser.JJTELParserState.closeNodeScope(JJTELParserState.java:108) at org.apache.el.parser.ELParser.CompositeExpression(ELParser.java:74) at org.apache.el.lang.ExpressionBuilder.createNodeInternal(ExpressionBuilder.java:115) at org.apache.el.lang.ExpressionBuilder.build(ExpressionBuilder.java:172) at org.apache.el.lang.ExpressionBuilder.createValueExpression(ExpressionBuilder.java:216) at org.apache.el.ExpressionFactoryImpl.createValueExpression(ExpressionFactoryImpl.java:68) at com.sun.facelets.el.ELText$ELTextVariable.apply(ELText.java:161) at com.sun.facelets.compiler.AttributeInstruction.apply(AttributeInstruction.java:60) at com.sun.facelets.compiler.UIInstructionHandler.apply(UIInstructionHandler.java:95) at com.sun.facelets.tag.CompositeFaceletHandler.apply(CompositeFaceletHandler.java:47) at com.sun.facelets.tag.jstl.core.IfHandler.apply(IfHandler.java:54) at com.sun.facelets.tag.CompositeFaceletHandler.apply(CompositeFaceletHandler.java:47) at com.sun.facelets.tag.jsf.ComponentHandler.applyNextHandler(ComponentHandler.java:360) at com.sun.facelets.tag.jsf.ComponentHandler.apply(ComponentHandler.java:190) at com.sun.facelets.tag.CompositeFaceletHandler.apply(CompositeFaceletHandler.java:47) at com.sun.facelets.tag.jsf.ComponentHandler.applyNextHandler(ComponentHandler.java:360) at com.sun.facelets.tag.jsf.ComponentHandler.apply(ComponentHandler.java:190) at com.sun.facelets.tag.CompositeFaceletHandler.apply(CompositeFaceletHandler.java:47) at com.sun.facelets.tag.jsf.ComponentHandler.applyNextHandler(ComponentHandler.java:360) at org.apache.myfaces.custom.aliasbean.AliasBeansScopeTagHandler.applyNextHandler(AliasBeansScopeTagHandler.java:52) at com.sun.facelets.tag.jsf.ComponentHandler.apply(ComponentHandler.java:190) at com.sun.facelets.tag.CompositeFaceletHandler.apply(CompositeFaceletHandler.java:47) at com.sun.facelets.tag.ui.CompositionHandler.apply(CompositionHandler.java:124) at com.sun.facelets.compiler.NamespaceHandler.apply(NamespaceHandler.java:49) at com.sun.facelets.compiler.EncodingHandler.apply(EncodingHandler.java:39) at com.sun.facelets.impl.DefaultFacelet.include(DefaultFacelet.java:248) at com.sun.facelets.impl.DefaultFacelet.include(DefaultFacelet.java:294) at com.sun.facelets.impl.DefaultFacelet.include(DefaultFacelet.java:273) at com.sun.facelets.impl.DefaultFaceletContext.includeFacelet(DefaultFaceletContext.java:140) at com.sun.facelets.tag.ui.IncludeHandler.apply(IncludeHandler.java:66) at com.sun.facelets.tag.ui.DefineHandler.applyDefinition(DefineHandler.java:64) at com.sun.facelets.tag.ui.CompositionHandler.apply(CompositionHandler.java:136) at com.sun.facelets.impl.DefaultFaceletContext$TemplateManager.apply(DefaultFaceletContext.java:337) at com.sun.facelets.impl.DefaultFaceletContext.includeDefinition(DefaultFaceletContext.java:307) at com.sun.facelets.tag.ui.InsertHandler.apply(InsertHandler.java:68) at com.sun.facelets.tag.CompositeFaceletHandler.apply(CompositeFaceletHandler.java:47) at com.sun.facelets.tag.jsf.ComponentHandler.applyNextHandler(ComponentHandler.java:360) at com.sun.facelets.tag.jsf.ComponentHandler.apply(ComponentHandler.java:190) at com.sun.facelets.tag.CompositeFaceletHandler.apply(CompositeFaceletHandler.java:47) at com.sun.facelets.tag.jsf.ComponentHandler.applyNextHandler(ComponentHandler.java:360) at com.sun.facelets.tag.jsf.ComponentHandler.apply(ComponentHandler.java:190) at com.sun.facelets.tag.CompositeFaceletHandler.apply(CompositeFaceletHandler.java:47) at com.sun.facelets.tag.ui.CompositionHandler.apply(CompositionHandler.java:124) at com.sun.facelets.compiler.NamespaceHandler.apply(NamespaceHandler.java:49) at com.sun.facelets.compiler.EncodingHandler.apply(EncodingHandler.java:39) at com.sun.facelets.impl.DefaultFacelet.include(DefaultFacelet.java:248) at com.sun.facelets.impl.DefaultFacelet.include(DefaultFacelet.java:294) at com.sun.facelets.impl.DefaultFacelet.include(DefaultFacelet.java:273) at com.sun.facelets.impl.DefaultFaceletContext.includeFacelet(DefaultFaceletContext.java:140) at com.sun.facelets.tag.ui.CompositionHandler.apply(CompositionHandler.java:116) at com.sun.facelets.compiler.NamespaceHandler.apply(NamespaceHandler.java:49) at com.sun.facelets.compiler.EncodingHandler.apply(EncodingHandler.java:39) at com.sun.facelets.impl.DefaultFacelet.apply(DefaultFacelet.java:95) at com.sun.facelets.FaceletViewHandler.buildView(FaceletViewHandler.java:596) at com.sun.facelets.FaceletViewHandler.renderView(FaceletViewHandler.java:651) at org.ajax4jsf.application.ViewHandlerWrapper.renderView(ViewHandlerWrapper.java:100) at org.ajax4jsf.application.AjaxViewHandler.renderView(AjaxViewHandler.java:176) at org.apache.myfaces.lifecycle.RenderResponseExecutor.execute(RenderResponseExecutor.java:41) at org.apache.myfaces.lifecycle.LifecycleImpl.render(LifecycleImpl.java:140) at org.apache.myfaces.custom.ppr.PPRLifecycleWrapper.render(PPRLifecycleWrapper.java:84) at javax.faces.webapp.FacesServlet.service(FacesServlet.java:187) at com.foo..client.web.servlets.FacesServletWrapper.service(FacesServletWrapper.java:125) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.ajax4jsf.webapp.BaseXMLFilter.doXmlFilter(BaseXMLFilter.java:206) at org.ajax4jsf.webapp.BaseFilter.handleRequest(BaseFilter.java:290) at org.ajax4jsf.webapp.BaseFilter.processUploadsAndHandleRequest(BaseFilter.java:388) at org.ajax4jsf.webapp.BaseFilter.doFilter(BaseFilter.java:515) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.myfaces.webapp.filter.ExtensionsFilter.doFilter(ExtensionsFilter.java:392) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.foo..client.web.filters.LoginFilter.doFilter(LoginFilter.java:219) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.foo..client.web.filters.CacheFilter.doFilter(CacheFilter.java:110) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.foo..client.web.filters.EncodingFilter.doFilter(EncodingFilter.java:54) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.foo..client.web.filters.TimerFilter.doFilter(TimerFilter.java:80) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:470) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:298) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:859) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:588) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489) at java.lang.Thread.run(Thread.java:662)</description>
    <commit commitTime="2011-06-29 23:06:40" id="92af111"/>
    <fixedFiles>
      <file>java/org/apache/el/lang/ExpressionBuilder.java</file>
    </fixedFiles>
  </bug>
  <bug id="51453" reportTime="2011-06-30 14:10:50">
    <summary>Requests to open URL that include an Authorization header do not reach servlet</summary>
    <description>In Tomcat 7, I've noticed that a request to a URL that does not require authentication will get forwarded to the login page if the request contains an "Authorization" header. Our application expects these requests to be processed by the servlet. The servlet parses the Authorization header and takes appropriate action (possibly redirecting to the login page or allowing the request if the headers contain an acceptible token). This has worked in older versions of Tomcat. The relevant part of our web.xml looks like: &lt;security-constraint&gt; &lt;web-resource-collection&gt; &lt;web-resource-name&gt;open&lt;/web-resource-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;!-- several other url patterns --&gt; &lt;/web-resource-collection&gt; &lt;user-data-constraint&gt; &lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt; &lt;/user-data-constraint&gt; &lt;!-- Notice no auth-constraint element --&gt; &lt;/security-constraint&gt; I observed the behavior of org.apache.catalina.authenticator.AuthenticatorBase.invoke(), here's what I saw: The constraints variable contains a single constraint that matches the security constraint from our web.xml above. On line 520, authRequired is set to true because of the presence of the Authorization header. The authenticate() call on line 535 fails and redirects to the login page.</description>
    <commit commitTime="2011-07-01 00:06:40" id="df9bc17"/>
    <fixedFiles>
      <file>java/org/apache/catalina/authenticator/AuthenticatorBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="51466" reportTime="2011-07-02 14:09:02">
    <summary>typos in comments of HostManagerServlet</summary>
    <description/>
    <commit commitTime="2011-07-04 19:46:40" id="6020bf6"/>
    <fixedFiles>
      <file>java/org/apache/catalina/manager/host/HostManagerServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="51467" reportTime="2011-07-03 10:19:46">
    <summary>usage of method run instead of start to start a thread</summary>
    <description>In StandardContext method Thread#run is used. This is most probably a mistake, since a few lines below Thread#join is called to wait for the completion of the thread. So we could either remove the join and get rid of the thread by using just a runnable, or start the thread.</description>
    <commit commitTime="2011-07-04 19:46:40" id="eb98373"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="51473" reportTime="2011-07-05 05:37:09">
    <summary>SecurityConfig,set "package.definition" security property to "nullsun.,java.,..."</summary>
    <description/>
    <commit commitTime="2011-07-05 15:13:20" id="ec00abf"/>
    <fixedFiles>
      <file>java/org/apache/catalina/security/SecurityConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="51475" reportTime="2011-07-05 09:58:12">
    <summary>GzipInterceptor#decompress is not completly implemented</summary>
    <description/>
    <commit commitTime="2011-07-05 23:33:20" id="acc5619"/>
    <fixedFiles>
      <file>java/org/apache/catalina/tribes/group/interceptors/GzipInterceptor.java</file>
      <file>test/org/apache/catalina/tribes/group/interceptors/TestGzipInterceptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="51494" reportTime="2011-07-10 01:56:23">
    <summary>NPE in StandardContextValve.invoke() when a webapp is redeployed while a request is still being processed</summary>
    <description/>
    <commit commitTime="2011-07-11 21:13:20" id="3a95db4"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardContextValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="51477" reportTime="2011-07-05 16:53:25">
    <summary>Support all protocol combinations in SSLProtocol of APR Connector</summary>
    <description/>
    <commit commitTime="2011-07-12 00:00:00" id="6ee5a22"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/jni/Library.java</file>
      <file>java/org/apache/tomcat/util/net/AprEndpoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="46252" reportTime="2008-11-20 11:18:55">
    <summary>Tomcat access log doesn't support Unicode</summary>
    <description>AccessLogValve, which is responsible for handling the access log uses FileWriter (that doesn't support Unicode). I guess that instantiating the writer like this would solve the case: writer = new PrintWriter(new OutputStreamWriter(new FileOutputStream(pathname), "UTF-8"), true);</description>
    <commit commitTime="2011-07-12 00:00:00" id="871dabd"/>
    <fixedFiles>
      <file>java/org/apache/catalina/valves/AccessLogValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="51503" reportTime="2011-07-13 12:40:11">
    <summary>Additional error checking required for connector port attribute (e.g. for port="")</summary>
    <description>With 7.0.18 packaged as a candidate for release and finally unreleased, when I stop the Tomcat service (only 1 war deployed), the service takes a lot of time to stop and finally was killed by system. Having a look into the stderr log, I see it paused right after the folowing line : INFO: Stopping ProtocolHandler [http-apr-0] Then went into a slow loop and fill the log with these lines : 13 juil. 2011 14:30:30 org.apache.tomcat.util.net.AprEndpoint stopInternal ATTENTION: Acceptor thread [http-apr-0-Acceptor-0] failed to unlock. Forcing hard socket shutdown. 13 juil. 2011 14:30:31 org.apache.tomcat.util.net.AprEndpoint stopInternal ATTENTION: Acceptor thread [http-apr-0-Acceptor-0] failed to unlock. Forcing hard socket shutdown. 13 juil. 2011 14:30:32 org.apache.tomcat.util.net.AprEndpoint stopInternal ATTENTION: Acceptor thread [http-apr-0-Acceptor-0] failed to unlock. Forcing hard socket shutdown. etc. (about 30 times before it was killed) I think there was no such issue with 7.0.16.</description>
    <commit commitTime="2011-07-19 01:26:40" id="1e79993"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/Connector.java</file>
    </fixedFiles>
  </bug>
  <bug id="49595" reportTime="2010-07-15 06:34:41">
    <summary>Tomcat crashes in tcnative-1.dll frequently</summary>
    <description/>
    <commit commitTime="2011-07-19 15:20:00" id="a3f3379"/>
    <fixedFiles>
      <file>java/org/apache/coyote/ajp/AjpAprProcessor.java</file>
    </fixedFiles>
  </bug>
  <bug id="51509" reportTime="2011-07-14 14:54:22">
    <summary>Csrf Prevention Filter's LruCache is not thread save</summary>
    <description>The LruCache (org.apache.catalina.filters.CsrfPreventionFilter$LruCache) use by Csrf Prevention Filter is base on LinkedHashMap. From the LinkedHashMap Java Doc: Note that this implementation is not synchronized. If multiple threads access a linked hash map concurrently, and at least one of the threads modifies the map structurally, it must be synchronized externally. ... But the LruCache implementation does not synchronize the access to the map.</description>
    <commit commitTime="2011-07-20 02:26:40" id="400745e"/>
    <fixedFiles>
      <file>java/org/apache/catalina/filters/CsrfPreventionFilter.java</file>
      <file>test/org/apache/catalina/filters/TestCsrfPreventionFilter2.java</file>
    </fixedFiles>
  </bug>
  <bug id="51532" reportTime="2011-07-19 21:47:15">
    <summary>Performance Issue when retriving JAR files during TLD file parsing.</summary>
    <description/>
    <commit commitTime="2011-07-21 03:26:40" id="bcee77d"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Compiler.java</file>
    </fixedFiles>
  </bug>
  <bug id="51056" reportTime="2011-04-13 14:12:26">
    <summary>Disable / drop support for SSLv2</summary>
    <description/>
    <commit commitTime="2011-07-21 17:20:00" id="4d9fcc0"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/jni/SSL.java</file>
    </fixedFiles>
  </bug>
  <bug id="41709" reportTime="2007-02-26 17:43:51">
    <summary>When calling the API that relates to the buffer after the response is committed, ISE with no messages is thrown.</summary>
    <description>After the response is committed, following API throws IllegalStateException. It's O.K. but the message of the exception is not set. - HttpServletResponse#resetBuffer - HttpServletResponse#sendError - HttpServletResponse#sendRedirect - HttpServletResponse#setBufferSize To understand the bug of the application, it is hoped that the message is set like other exceptions.</description>
    <commit commitTime="2011-07-23 02:40:00" id="8baaa98"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/ResponseFacade.java</file>
    </fixedFiles>
  </bug>
  <bug id="51545" reportTime="2011-07-23 09:07:02">
    <summary>make threadname available in ExtendedAccessLogValve</summary>
    <description/>
    <commit commitTime="2011-07-26 16:46:40" id="00a1fdf"/>
    <fixedFiles>
      <file>java/org/apache/catalina/valves/ExtendedAccessLogValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="51555" reportTime="2011-07-25 21:40:38">
    <summary>An invalid Lifecycle transition ([before_stop]) for component in state [INITIALIZED]: MapperListener</summary>
    <description/>
    <commit commitTime="2011-07-26 16:46:40" id="95d67fe"/>
    <fixedFiles>
      <file>java/org/apache/catalina/Lifecycle.java</file>
      <file>java/org/apache/catalina/util/LifecycleBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="51557" reportTime="2011-07-26 06:12:43">
    <summary>Newline during a http header field name obscures next value</summary>
    <description/>
    <commit commitTime="2011-07-27 17:46:40" id="6200dd9"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/AbstractInputBuffer.java</file>
      <file>java/org/apache/coyote/http11/InternalAprInputBuffer.java</file>
      <file>java/org/apache/coyote/http11/InternalInputBuffer.java</file>
      <file>java/org/apache/coyote/http11/InternalNioInputBuffer.java</file>
      <file>test/org/apache/coyote/http11/TestInternalInputBuffer.java</file>
    </fixedFiles>
  </bug>
  <bug id="51586" reportTime="2011-07-29 19:25:49">
    <summary>ContextConfig.checkHandlesTypes() doesn't check for VerifyError when loading class</summary>
    <description>I've recently upgraded to Tomcat 7 and used to run with metadata-complete="true" in my web.xml. With Servlet 3 I decided I'd try some of the annotation features. When I turned off metadata-complete I got a VerifyError trying to load one of my classes. This class is meant to only work on Tomcat 6 so the fact Tomcat 7 cannot load this class is expected. What is not expected is that Tomcat 7 doesn't just ignore the error and continue scanning for annotations. Looking in ContextConfig.checkHandlesTypes() I checks for virtually every type of loading failure except VerifyError. Perhaps VerifyError should be added to this list? java.lang.VerifyError: class org.lds.stack.tomcat.decrypt.DecryptingStandardContext overrides final method start.()V at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClassCond(ClassLoader.java:631) at java.lang.ClassLoader.defineClass(ClassLoader.java:615) at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141) at java.net.URLClassLoader.defineClass(URLClassLoader.java:283) at java.net.URLClassLoader.access$000(URLClassLoader.java:58) at java.net.URLClassLoader$1.run(URLClassLoader.java:197) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(URLClassLoader.java:190) at java.lang.ClassLoader.loadClass(ClassLoader.java:306) at java.lang.ClassLoader.loadClass(ClassLoader.java:247) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:247) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1665) at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1523) at org.apache.catalina.startup.ContextConfig.checkHandlesTypes(ContextConfig.java:2006) at org.apache.catalina.startup.ContextConfig.processAnnotationsStream(ContextConfig.java:1969) at org.apache.catalina.startup.ContextConfig.processAnnotationsJar(ContextConfig.java:1858) at org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(ContextConfig.java:1826) at org.apache.catalina.startup.ContextConfig.processAnnotations(ContextConfig.java:1812) at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1306) at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:896) at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:322) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5103) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:812) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:787) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:607) at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:633) at org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:558) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:468) at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1322) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:311) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89) at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:379) at org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:324) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1041) at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:774) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1033) at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:291) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145) at org.apache.catalina.core.StandardService.startInternal(StandardService.java:443) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145) at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:727) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145) at org.apache.catalina.startup.Catalina.start(Catalina.java:621) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:322) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:450)</description>
    <commit commitTime="2011-08-01 00:33:20" id="0b340ac"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="51588" reportTime="2011-07-30 02:33:45">
    <summary>Change access modifiers in AccessLogValve to make it easier to extend</summary>
    <description>I'm adding some fields to a subclass of org.apache.catalina.valves.AccessLogValve but createLogElements() is the closest extension point available. Rather than reimplement the functionality there it would be preferable if both of the createAccessLogElement() methods were protected rather than private then it's a simple method of matching the char you want to use and falling back to super.createAccessLogElement().</description>
    <commit commitTime="2011-08-01 00:33:20" id="77213bb"/>
    <fixedFiles>
      <file>java/org/apache/catalina/valves/AccessLogValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="51614" reportTime="2011-08-04 11:19:47">
    <summary>PersistentManager loads session from Store and calls session.expire() twice.</summary>
    <description>To check whether session is loaded into memory, StoreBase#processExpires calls findSession(id). ===== ... if (manager.findSession(keys[i]) != null) { isLoaded = true; } ... ===== However, PersistentManager#findSession(id) loads session from Store when there is no session in memory. Because session loaded from Store is an invalid session PersistentManager logs errorlog, calls session.expire(), and deletes session from Store. As a result, findSession(id) returns null, and isLoaded becomes false. And, session.expire() is called again, and the session is deleted from Store. If manager is PersistentManager, it is necessary to call PersistentManagerBase#isLoaded(id). However, to avoid regression of r1033024, other managers call findSession(id). Best regards.</description>
    <commit commitTime="2011-08-04 20:13:20" id="29e9966"/>
    <fixedFiles>
      <file>java/org/apache/catalina/session/StoreBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="51610" reportTime="2011-08-04 04:28:49">
    <summary>Context fails to reload after an error in web.xml was corrected</summary>
    <description>With current trunk. Steps to reproduce: 1. Start Tomcat 7 2. Go to webapps/examples/WEB-INF/web.xml and uncomment &lt;filter-mapping&gt; for "Timing Filter" (line 75). 3. Wait several seconds. The examples webapp is reloaded, but fails to start. This happens because there is a typo. The &lt;filter-name&gt; value should be s/Timing Filter/Timing filter/. There is stack trace in the logs: [[[ 04.08.2011 8:09:39 org.apache.catalina.startup.HostConfig checkResources WARNING: Error during context [/examples] restart java.lang.IllegalArgumentException: Filter mapping specifies an unknown filter name Timing Filter at org.apache.catalina.core.StandardContext.validateFilterMap(StandardContext.java:2950) at org.apache.catalina.core.StandardContext.addFilterMap(StandardContext.java:2915) at org.apache.catalina.deploy.WebXml.configureContext(WebXml.java:1206) at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1343) at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:896) at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:322) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5103) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145) at org.apache.catalina.startup.HostConfig.checkResources(HostConfig.java:1279) at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1360) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:294) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89) at org.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1240) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1398) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1408) at org.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1387) at java.lang.Thread.run(Thread.java:662) ]]] 4. Go to web.xml and edit it once again. E.g. re-comment the mapping, or correct the typo. 5. Wait several seconds. Here is an issue: EXPECTED: The examples webapp should reload successfully. ACTUAL: Reload fails. The following is printed in the logs: 04.08.2011 8:09:59 org.apache.catalina.startup.HostConfig checkResources INFO: Reloading context [/examples] 04.08.2011 8:09:59 org.apache.catalina.util.LifecycleBase start INFO: The start() method was called on component [StandardEngine[Catalina].StandardHost[localhost].StandardContext[/examples]] after start() had already been called. The second call will be ignored. 6. Stop Tomcat. Here is the second issue: EXPECTED: Successful shutdown ACTUAL: [[[ 04.08.2011 8:14:10 org.apache.catalina.startup.Catalina stop SEVERE: Catalina.stop org.apache.catalina.LifecycleException: An invalid Lifecycle transition was attempted ([before_stop]) for component [StandardEngine[Catalina].StandardHost[localhost].StandardContext[/examples]] in state [STARTING_PREP] at org.apache.catalina.util.LifecycleBase.invalidTransition(LifecycleBase.java:387) at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:212) at org.apache.catalina.core.ContainerBase.stopInternal(ContainerBase.java:1072) at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:225) at org.apache.catalina.core.ContainerBase.stopInternal(ContainerBase.java:1072) at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:225) at org.apache.catalina.core.StandardService.stopInternal(StandardService.java:502) at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:225) at org.apache.catalina.core.StandardServer.stopInternal(StandardServer.java:748) at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:225) at org.apache.catalina.startup.Catalina.stop(Catalina.java:694) at org.apache.catalina.startup.Catalina$CatalinaShutdownHook.run(Catalina.java:847) ]]] This exception at shutdown happens only if examples webapp was correct when Tomcat started, but was broken afterwards. If it was already broken at startup time, nothing happens. 7. Here is the third issue: when the above happens the shutdown sequence is apparently aborted abnormally. EXPECTED: "INFO: Stopping ProtocolHandler ["http-bio-8080"]" etc. messages ACTUAL: There are no messages after the "SEVERE: Catalina.stop" one that I cited above.</description>
    <commit commitTime="2011-08-06 00:00:00" id="ed0588b"/>
    <fixedFiles>
      <file>java/org/apache/catalina/util/LifecycleBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="51615" reportTime="2011-08-04 19:14:11">
    <summary>Line 267 of "org.apache.tomcat.jdbc.pool.PooledConnection": double assignment typo</summary>
    <description>Nothing bad here, but my compiler lights up: connection = connection = driver.connect(driverURL, properties); Clearly, to be fixed.</description>
    <commit commitTime="2011-08-06 00:00:00" id="8c41e9c"/>
    <fixedFiles>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java</file>
    </fixedFiles>
  </bug>
  <bug id="51640" reportTime="2011-08-10 00:21:38">
    <summary>clearReferencesJdbc seems to be causing leaks with com.oracle.ojdbc5 driver</summary>
    <description/>
    <commit commitTime="2011-08-10 20:40:00" id="cd2fecd"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/JreMemoryLeakPreventionListener.java</file>
    </fixedFiles>
  </bug>
  <bug id="51641" reportTime="2011-08-10 03:37:44">
    <summary>Http11NioProcessor not correct release</summary>
    <description>org.apache.coyote.http11.Http11NioProtocol.Http11ConnectionHandler code segment: ================================== @Override public void release(SocketWrapper&lt;NioChannel&gt; socket) { Http11NioProcessor processor = connections.remove(socket); if (processor != null) { processor.recycle(); recycledProcessors.offer(processor); } } ================================== should be: ================================== @Override public void release(SocketWrapper&lt;NioChannel&gt; socket) { Http11NioProcessor processor = connections.remove(socket.getSocket()); if (processor != null) { processor.recycle(); recycledProcessors.offer(processor); } } ================================== type of connections is ConcurrentHashMap&lt;NioChannel, Http11NioProcessor&gt; , not ConcurrentHashMap&lt;SocketWrapper&lt;NioChannel&gt;, Http11NioProcessor&gt;.</description>
    <commit commitTime="2011-08-10 20:40:00" id="7ffca5b"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/Http11NioProtocol.java</file>
    </fixedFiles>
  </bug>
  <bug id="41673" reportTime="2007-02-21 17:37:02">
    <summary>Jasper output the message of compiling error using LF(\n) on ANY OS.</summary>
    <description>Jasper output the message of compiling error using LF(\n) on ANY OS. This cannot be correctly displayed with Windows notepad. I think the line feed code along OS would be better, though I know other text editor solves this.</description>
    <commit commitTime="2011-08-11 02:13:20" id="841e9fc"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/DefaultErrorHandler.java</file>
      <file>java/org/apache/jasper/compiler/ErrorDispatcher.java</file>
    </fixedFiles>
  </bug>
  <bug id="51650" reportTime="2011-08-11 17:03:48">
    <summary>possible nullpointer exception in RequestUtil.parseParameters</summary>
    <description/>
    <commit commitTime="2011-08-12 17:06:40" id="7562fc1"/>
    <fixedFiles>
      <file>java/org/apache/catalina/util/RequestUtil.java</file>
    </fixedFiles>
  </bug>
  <bug id="51654" reportTime="2011-08-12 10:36:54">
    <summary>NullPointerException in startup (org.apache.catalina.startup.HostConfig.filterAppPaths) due to missing app base</summary>
    <description>A hard-to-diagnose NullPointerException at startup which can be bettered with an appropriate error message: INFO: Starting Servlet Engine: Apache Tomcat/7.0.19 java.lang.NullPointerException at org.apache.catalina.startup.HostConfig.filterAppPaths(HostConfig.java:493) at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:466) at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1322) at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:311) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:89) Ok, what's this about? In "protected String[] filterAppPaths(String[] unfilteredAppPaths)" the exception is raised at for (String appPath : unfilteredAppPaths) Which means the "unfilteredAppPaths" passed in is null. filterAppPaths does not check for that (shouldn't there be an assertion at least) The problems comes from "deployApps()": protected void deployApps() { File appBase = appBase(); File configBase = configBase(); String[] filteredAppPaths = filterAppPaths(appBase.list()); &lt;---- // Deploy XML descriptors from configBase deployDescriptors(configBase, configBase.list()); // Deploy WARs, and loop if additional descriptors are found deployWARs(appBase, filteredAppPaths); // Deploy expanded folders deployDirectories(appBase, filteredAppPaths); } Where "appBase.list()" returns null. This must be because "appBase" does not actually denote a directory (A-HA!) Indeed, the server.xml points to a nonexisting appBase. Suggesting to add a check to "deployApps": protected void deployApps() { File appBase = appBase(); File configBase = configBase(); if (!appBase.exists() || appBase.list()==null) { throw new IllegalArgumentException("The appBase " + appBase + " does not exist or cannot be listed"); } String[] filteredAppPaths = filterAppPaths(appBase.list()); &lt;---- // Deploy XML descriptors from configBase deployDescriptors(configBase, configBase.list()); // Deploy WARs, and loop if additional descriptors are found deployWARs(appBase, filteredAppPaths); // Deploy expanded folders deployDirectories(appBase, filteredAppPaths); } This probably violates some I18N requirement though.</description>
    <commit commitTime="2011-08-16 01:40:00" id="c4d1631"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/HostConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="51658" reportTime="2011-08-13 11:10:19">
    <summary>Potential NPE in CoyoteAdapter.log</summary>
    <description/>
    <commit commitTime="2011-08-16 15:33:20" id="5d55842"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/CoyoteAdapter.java</file>
    </fixedFiles>
  </bug>
  <bug id="49683" reportTime="2010-08-01 15:40:53">
    <summary>Separate keep-alive and connection timeout with APR/native connector</summary>
    <description/>
    <commit commitTime="2011-08-17 02:40:00" id="bf4a544"/>
    <fixedFiles>
      <file>java/org/apache/coyote/ajp/AjpAprProtocol.java</file>
      <file>java/org/apache/coyote/http11/Http11AprProtocol.java</file>
      <file>java/org/apache/tomcat/util/net/AprEndpoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="51688" reportTime="2011-08-19 14:49:17">
    <summary>JreMemoryLeakPreventionListener should protect against AWT thread creation</summary>
    <description>Any webapp that calls java.awt.Toolkit.getDefaultToolkit will launch a new thread (AWT-Windows, AWT-XAWT, etc.) which will capture the ContextClassLoader, pinning the webapp in memory after an undeploy/redeploy. A simple addition to JreMemoryLeakPreventionListener can alleviate this condition.</description>
    <commit commitTime="2011-08-25 05:06:40" id="0cdbfa6"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/JreMemoryLeakPreventionListener.java</file>
    </fixedFiles>
  </bug>
  <bug id="51713" reportTime="2011-08-23 21:44:53">
    <summary>Bad Connector protocol causes NullPointerException when using Executor</summary>
    <description>Under the following configuration, an NPE is thrown because _setExecutor() calls con.getProtocolHandler().getClass() when the protocol handler is null. It would be nice to report a bad configuration instead of suffering an NPE. server.xml: &lt;Executor name="tomcatThreadPool" namePrefix="catalina-exec-" maxThreads="150" minSpareThreads="4"/&gt; &lt;Connector port="12345" redirectPort="443" protocol="HTTP" secure="true" scheme="https" proxyPort="80" URIEncoding="UTF-8" executor="tomcatThreadPool" /&gt; catalina.out: Aug 23, 2011 5:18:30 PM org.apache.catalina.connector.Connector &lt;init&gt; SEVERE: Protocol handler instantiation failed Aug 23, 2011 5:18:30 PM org.apache.tomcat.util.digester.Digester startElement SEVERE: Begin event threw exception java.lang.NullPointerException at org.apache.catalina.startup.ConnectorCreateRule._setExecutor(ConnectorCreateRule.java:69) at org.apache.catalina.startup.ConnectorCreateRule.begin(ConnectorCreateRule.java:63) at org.apache.tomcat.util.digester.Digester.startElement(Digester.java:1276) at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.startElement(AbstractSAXParser.java:501) at com.sun.org.apache.xerces.internal.parsers.AbstractXMLDocumentParser.emptyElement(AbstractXMLDocumentParser.java:179) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1343) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2755) at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:648) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:511) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:808) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737) at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:119) at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1205) at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:522) at org.apache.tomcat.util.digester.Digester.parse(Digester.java:1537) at org.apache.catalina.startup.Catalina.load(Catalina.java:555) at org.apache.catalina.startup.Catalina.load(Catalina.java:596) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.catalina.startup.Bootstrap.load(Bootstrap.java:281) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:449) Aug 23, 2011 5:18:30 PM org.apache.catalina.startup.Catalina load WARNING: Catalina.start using conf/server.xml: Error at (104, 66) : null Aug 23, 2011 5:18:30 PM org.apache.catalina.connector.Connector &lt;init&gt; SEVERE: Protocol handler instantiation failed Aug 23, 2011 5:18:30 PM org.apache.tomcat.util.digester.Digester startElement SEVERE: Begin event threw exception java.lang.NullPointerException at org.apache.catalina.startup.ConnectorCreateRule._setExecutor(ConnectorCreateRule.java:69) at org.apache.catalina.startup.ConnectorCreateRule.begin(ConnectorCreateRule.java:63) at org.apache.tomcat.util.digester.Digester.startElement(Digester.java:1276) at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.startElement(AbstractSAXParser.java:501) at com.sun.org.apache.xerces.internal.parsers.AbstractXMLDocumentParser.emptyElement(AbstractXMLDocumentParser.java:179) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1343) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2755) at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:648) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:511) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:808) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737) at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:119) at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1205) at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:522) at org.apache.tomcat.util.digester.Digester.parse(Digester.java:1537) at org.apache.catalina.startup.Catalina.load(Catalina.java:555) at org.apache.catalina.startup.Catalina.start(Catalina.java:609) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:322) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:450) Aug 23, 2011 5:18:31 PM org.apache.catalina.startup.Catalina load WARNING: Catalina.start using conf/server.xml: Error at (104, 66) : null Aug 23, 2011 5:18:31 PM org.apache.catalina.startup.Catalina start SEVERE: Cannot start server. Server instance is not configured.</description>
    <commit commitTime="2011-08-25 07:53:20" id="517fd9b"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/Connector.java</file>
    </fixedFiles>
  </bug>
  <bug id="51558" reportTime="2011-07-26 10:11:48">
    <summary>Tomcat Embedded: using tomcat.addWebapp always overrides programmatic context-settings with default values for the context at start of tomcat server</summary>
    <description>when i deploy an webapp with a tomcat server, i use the Function "tomcat.addWebapp". I looked into the code of this function and it makes the following call: ctx.addLifecycleListener(new DefaultWebXmlListener()); When i start tomcat, this DefaultWebXmlListener is activated automatically, and always does the following code, so the manager i set for my context gets overriden with this code: public static void initWebappDefaults(Context ctx) { ... // Sessions ctx.setManager( new StandardManager()); ctx.setSessionTimeout(30); ... } so when i set a StandardManager programatically, it gets overriden by this code. The workaround i used, is to unregister the DefaultWebXmlListener, and than add my own context.xml specific settings, like a custom manager for deactivating session persistance: Context warContext = tomcat.addWebapp(warContextPath, warLocation); LifecycleListener[] lclisteners = warContext.findLifecycleListeners(); LifecycleListener defaultWebXMLListener = null; for (int i=0; i &lt; lclisteners.length; i++){ if (lclisteners[i] instanceof DefaultWebXmlListener){ defaultWebXMLListener = lclisteners[i]; } } warContext.removeLifecycleListener(defaultWebXMLListener); ... StandardManager manager = new StandardManager(); manager.setPathname(null); // disable session persistance: //manager.setPathname("SESSIONS.ser"); warContext.setCookies(true); warContext.setCrossContext(true); warContext.setManager(manager); i think its a bug that using the "tomcat.addWebapp" method makes it impossible to set context.xml specific settings programmatically, because they always get overriden by default values at the tomcat start.</description>
    <commit commitTime="2011-08-26 22:46:40" id="25f02b4"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/Tomcat.java</file>
      <file>test/org/apache/catalina/startup/TestTomcat.java</file>
    </fixedFiles>
  </bug>
  <bug id="51704" reportTime="2011-08-22 13:17:27">
    <summary>Dubious use of mkdirs() return code in juli FileHandler</summary>
    <description/>
    <commit commitTime="2011-08-27 01:33:20" id="4587f13"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
      <file>java/org/apache/catalina/loader/WebappClassLoader.java</file>
      <file>java/org/apache/catalina/loader/WebappLoader.java</file>
      <file>java/org/apache/catalina/manager/ManagerServlet.java</file>
      <file>java/org/apache/catalina/manager/host/HostManagerServlet.java</file>
      <file>java/org/apache/catalina/servlets/CGIServlet.java</file>
      <file>java/org/apache/catalina/session/FileStore.java</file>
      <file>java/org/apache/catalina/startup/ExpandWar.java</file>
      <file>java/org/apache/catalina/startup/HostConfig.java</file>
      <file>java/org/apache/catalina/valves/AccessLogValve.java</file>
      <file>java/org/apache/jasper/JspCompilationContext.java</file>
      <file>java/org/apache/juli/FileHandler.java</file>
      <file>test/org/apache/catalina/connector/TestCoyoteAdapter.java</file>
      <file>test/org/apache/catalina/core/TestAsyncContextImpl.java</file>
      <file>test/org/apache/catalina/core/TestStandardContext.java</file>
      <file>test/org/apache/catalina/servlets/TestDefaultServlet.java</file>
      <file>test/org/apache/catalina/startup/TomcatBaseTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="51736" reportTime="2011-08-29 10:26:09">
    <summary>Make rpcTimeout configurable in BackupManager.</summary>
    <description>Default rpcTimeout that BackupManager sets to AbstractReplicatedMap is 15000 msec. This is not configurable. When receiving MapMessage.MSG_START (and after a new member is added), publishEntryInfo is called for all sessions where primary and backup node are not included. And, the backup node is set to the session. When only one Tomcat starts in cluster, publishEntryInfo will be called for all sessions. As a result, the RPC message has the possibility of the timeout. When acquiring session from restarting Tomcat, warning of "Unable to retrieve remote object for key:XXX" is logged. And the session cannot be continued. I make rpcTimeout configurable in BackupManager. Additionally, if RPC message timeouted in AbstractReplicatedMap#broadcast, add warning message. Best Regards.</description>
    <commit commitTime="2011-08-29 17:26:40" id="87a32d6"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/session/BackupManager.java</file>
      <file>java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java</file>
    </fixedFiles>
  </bug>
  <bug id="51712" reportTime="2011-08-23 20:55:25">
    <summary>Regression in cache-control headers for requests with security-constraints</summary>
    <description/>
    <commit commitTime="2011-08-29 23:00:00" id="196a8f5"/>
    <fixedFiles>
      <file>java/org/apache/catalina/authenticator/AuthenticatorBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="51739" reportTime="2011-08-29 13:47:09">
    <summary>If landingpage is a XHTML (JSF/CDI), nullpointer exception.</summary>
    <description/>
    <commit commitTime="2011-08-30 01:46:40" id="3513acc"/>
    <fixedFiles>
      <file>java/org/apache/catalina/authenticator/FormAuthenticator.java</file>
    </fixedFiles>
  </bug>
  <bug id="51698" reportTime="2011-08-20 07:54:08">
    <summary>ajp CPing/Forward-Request packet forgery, is a design decision? or a security vulnerability?</summary>
    <description/>
    <commit commitTime="2011-08-30 04:33:20" id="a2538ce"/>
    <fixedFiles>
      <file>java/org/apache/coyote/ajp/AbstractAjpProcessor.java</file>
      <file>java/org/apache/coyote/ajp/AjpAprProcessor.java</file>
      <file>java/org/apache/coyote/ajp/AjpNioProcessor.java</file>
      <file>java/org/apache/coyote/ajp/AjpProcessor.java</file>
    </fixedFiles>
  </bug>
  <bug id="51794" reportTime="2011-09-09 18:51:35">
    <summary>Race condition in NioEndpoint$Poller causes socket to not be read until selectorTimeout</summary>
    <description>I'm seeing an occasional race condition that happens between NioEndpoint$Poller#run and Http11NioProtocol finishing an event. What happens is that there is a race condition upon waking up the Selector that can cause a SelectionKey to not be marked with InterestOps.READ as soon as it could. The race is on Poller.wakeupCounter. These steps can occur which causes my SelectionKey to not have its interest ops reset soon and the Selector to not have wakeup() called on it. 1. Poller0 - Starts processing its run loop and calls events(). 2. Poller0 - Checks the wakeupCounter.get() &gt; 0 which evaluates to false (wakeupCounter is 0). 3. Worker1 - Finishes an event and calls in to Poller#addEvent 4. Worker1 - Enqueues the PollerEvent that will reset the interest ops. 5. Worker1 - Calls wakeupCounter.incrementAndGet to increment and get wakeupCounter to 1. This fails the check to call selector.wakeup(); 6. Poller0 - Calls wakeupCounter.set(-1) 7. Poller0 - Calls selector.select(selectorTimeout) and blocks for either the full time out or until another unrelated SelectionKey is polled. 8. Poller0 - Ultimately gets around to calling events() again which now resets the interest ops for the SelectionKey that was processed by Worker1. The simple fix for this is to change this code: if (wakeupCounter.get() &gt; 0) { //if we are here, means we have other stuff to do //do a non blocking select keyCount = selector.selectNow(); } else { wakeupCounter.set(-1); keyCount = selector.select(selectorTimeout); } to this if (wakeupCounter.getAndSet(-1) &gt; 0) { //if we are here, means we have other stuff to do //do a non blocking select keyCount = selector.selectNow(); } else { keyCount = selector.select(selectorTimeout); }</description>
    <commit commitTime="2011-09-14 22:20:00" id="58429a8"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/net/NioEndpoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="51811" reportTime="2011-09-14 14:57:22">
    <summary>SSL configuration property name illegal</summary>
    <description/>
    <commit commitTime="2011-09-18 20:46:40" id="9425437"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/AbstractHttp11JsseProtocol.java</file>
      <file>test/org/apache/tomcat/util/net/TestCustomSsl.java</file>
    </fixedFiles>
  </bug>
  <bug id="51580" reportTime="2011-07-28 22:41:57">
    <summary>Severe error deploying WAR application (ExpandWar error)</summary>
    <description/>
    <commit commitTime="2011-09-21 04:20:00" id="feff880"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ExpandWar.java</file>
    </fixedFiles>
  </bug>
  <bug id="51687" reportTime="2011-08-19 14:41:36">
    <summary>Improve JreMemoryLeakPreventionListener against leak caused by sun.java2d.Disposer</summary>
    <description>The sun.java2d.Disposer class, when loaded, starts an endless daemon thread that can inherit the WebappClassLoader as its context loader. This will cause a leak when the webapp is unloaded. It would be useful if JreMemoryLeakPreventionListener could load this class to prevent the leak.</description>
    <commit commitTime="2011-09-21 04:20:00" id="423fd89"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/JreMemoryLeakPreventionListener.java</file>
    </fixedFiles>
  </bug>
  <bug id="51852" reportTime="2011-09-20 19:16:07">
    <summary>BeanELResolver varargs handling is broken in multiple ways</summary>
    <description/>
    <commit commitTime="2011-09-21 21:00:00" id="bfabec5"/>
    <fixedFiles>
      <file>java/javax/el/BeanELResolver.java</file>
      <file>test/javax/el/TestBeanELResolverVarargsInvocation.java</file>
    </fixedFiles>
  </bug>
  <bug id="51860" reportTime="2011-09-21 10:03:38">
    <summary>HTTP/SSL with NIO won't work</summary>
    <description/>
    <commit commitTime="2011-09-21 21:00:00" id="66f2d5b"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/net/jsse/JSSEKeyManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="51887" reportTime="2011-09-24 14:09:54">
    <summary>Speedup sessionid generation when running testsuite</summary>
    <description/>
    <commit commitTime="2011-09-25 00:00:00" id="73a6e56"/>
    <fixedFiles>
      <file>test/org/apache/catalina/startup/FastNonSecureRandom.java</file>
      <file>test/org/apache/catalina/startup/TomcatBaseTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="51872" reportTime="2011-09-22 17:52:57">
    <summary>request.getRemoteAddr() sometimes returning IP address from the previous request</summary>
    <description>request.getRemoteAddr() sometimes returning IP address from the previous request. We have compared the IP address returned from the getRemoteHost() and from the headers with getRemoteAddr() and getRemoteAddr is returning wrong IP address. We believe that this may come from the "pooled" request objects where it is sometimes sees the previous value of the remote IP. The problem doesn't occur all the time. We are heavily relying on the getRemoteAddr to verify the remote client for some of our authentication. Can this be fixed? 2011-09-22 16:49:55,713 DEBUG [yjava.tomcat.valves.YahooConnectionValve] THREADID:1262 YahooConnectionValve invoked 2011-09-22 16:49:55,826 DEBUG [yjava.tomcat.valves.YahooConnectionValve] THREADID:1262 YahooConnectionValve request.getInfo(): org.apache.coyote.catalina.CoyoteRequest/1.0 2011-09-22 16:49:56,013 DEBUG [yjava.tomcat.valves.YahooConnectionValve] THREADID:1262 YahooConnectionValve request.getRemoteAddr(): 98.138.85.230 2011-09-22 16:49:56,014 DEBUG [yjava.tomcat.valves.YahooConnectionValve] THREADID:1262 YahooConnectionValve request.getRemoteHost(): web120016.mail.ne1.yahoo.com [][~]$ nslookup web120016.mail.ne1.yahoo.com Server: 10.72.226.8 Address: 10.72.226.8#53 Name: web120016.mail.ne1.yahoo.com Address: 98.138.85.143 2011-09-22 16:49:56,014 DEBUG [yjava.tomcat.valves.YahooConnectionValve] THREADID:1262 YahooConnectionValve request.getRequestedSessionId(): null 2011-09-22 16:49:56,015 DEBUG [yjava.tomcat.valves.YahooConnectionValve] THREADID:1262 YahooConnectionValve request.getHeader(): accept:*/* host:ls100.mail.vip.ne1.yahoo.com:4080 content-type:application/x-ypy yahoo-app-auth:v=1;a=yahoo.mail.acl.yca.lsg-prod;h=98.138.85.143;t=1319282225; content-length:574 2011-09-22 16:49:56,015 DEBUG [yjava.filter.address.RemoteIPTranslator] THREADID:1262 Got remote address '98.138.85.230' and port '46663'</description>
    <commit commitTime="2011-09-28 03:00:00" id="18792f4"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/CoyoteAdapter.java</file>
      <file>java/org/apache/coyote/ajp/AbstractAjpProcessor.java</file>
      <file>java/org/apache/coyote/ajp/AjpAprProcessor.java</file>
      <file>java/org/apache/coyote/ajp/AjpNioProcessor.java</file>
      <file>java/org/apache/coyote/ajp/AjpProcessor.java</file>
      <file>java/org/apache/coyote/http11/AbstractHttp11Processor.java</file>
    </fixedFiles>
  </bug>
  <bug id="51905" reportTime="2011-09-28 09:20:16">
    <summary>Infinite loop when shutting down AprEndpoint</summary>
    <description/>
    <commit commitTime="2011-09-28 16:53:20" id="136097e"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/net/AprEndpoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="51910" reportTime="2011-09-28 12:05:19">
    <summary>NPE in comet processing when shutting down Tomcat</summary>
    <description/>
    <commit commitTime="2011-10-01 22:40:00" id="a450d2c"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardWrapperValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="51630" reportTime="2011-08-07 02:34:08">
    <summary>java.lang.IllegalStateException: Calling [asyncComplete()]</summary>
    <description>example: webapps\examples\WEB-INF\classes\async\Async0.java log file: logs\localhost.2011-08-07.log ============================================= java.lang.IllegalStateException: Calling [asyncComplete()] is not valid for a request with Async state [DISPATCHED] at org.apache.coyote.AsyncStateMachine.asyncComplete(AsyncStateMachine.java:221) at org.apache.coyote.http11.Http11Processor.actionInternal(Http11Processor.java:525) at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:773) at org.apache.coyote.Request.action(Request.java:344) at org.apache.catalina.core.AsyncContextImpl.complete(AsyncContextImpl.java:89) at async.Async0.service(Async0.java:42) at javax.servlet.http.HttpServlet.service(HttpServlet.java:722) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:304) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:684) at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:593) at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:530) at org.apache.catalina.core.AsyncContextImpl$1.run(AsyncContextImpl.java:173) at org.apache.catalina.core.AsyncContextImpl.doInternalDispatch(AsyncContextImpl.java:314) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:462) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:164) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100) at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:851) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:296) at org.apache.coyote.http11.AbstractHttp11Processor.asyncDispatch(AbstractHttp11Processor.java:1220) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:511) at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:302) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)</description>
    <commit commitTime="2011-10-04 03:26:40" id="b080c7e"/>
    <fixedFiles>
      <file>webapps/examples/WEB-INF/classes/async/Async0.java</file>
    </fixedFiles>
  </bug>
  <bug id="51956" reportTime="2011-10-04 21:58:18">
    <summary>RemoteAddrFilter uses remote host (not address) in doFilterEvent</summary>
    <description>public void doFilterEvent(CometEvent event, CometFilterChain chain) throws IOException, ServletException { processCometEvent(event.getHttpServletRequest().getRemoteHost(), event, chain); } Use of getRemoteHost should be getRemoteAddr.</description>
    <commit commitTime="2011-10-05 07:13:20" id="d6d1c6f"/>
    <fixedFiles>
      <file>java/org/apache/catalina/filters/RemoteAddrFilter.java</file>
    </fixedFiles>
  </bug>
  <bug id="51952" reportTime="2011-10-04 15:36:57">
    <summary>IllegalStateException using CompressionFilter with Tomcat 7.0.21/22</summary>
    <description/>
    <commit commitTime="2011-10-08 04:40:00" id="3ab3757"/>
    <fixedFiles>
      <file>java/org/apache/catalina/Context.java</file>
      <file>java/org/apache/catalina/connector/Response.java</file>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="51972" reportTime="2011-10-05 21:31:50">
    <summary>sendRedirect does not support protocol relative URLs</summary>
    <description/>
    <commit commitTime="2011-10-10 20:33:20" id="e70797e"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/Response.java</file>
    </fixedFiles>
  </bug>
  <bug id="52009" reportTime="2011-10-11 08:06:49">
    <summary>NPE exception in org.apache.catalina.connector.CoyoteAdapter.service</summary>
    <description/>
    <commit commitTime="2011-10-15 06:06:40" id="b90c0a1"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/CoyoteAdapter.java</file>
      <file>test/org/apache/catalina/comet/TestCometProcessor.java</file>
    </fixedFiles>
  </bug>
  <bug id="52051" reportTime="2011-10-18 19:33:51">
    <summary>NullPointerException when Jasper tries to compile a directory</summary>
    <description/>
    <commit commitTime="2011-10-20 00:00:00" id="62ff013"/>
    <fixedFiles>
      <file>java/org/apache/jasper/JspCompilationContext.java</file>
      <file>java/org/apache/jasper/compiler/JspUtil.java</file>
    </fixedFiles>
  </bug>
  <bug id="52113" reportTime="2011-10-31 14:09:21">
    <summary>Tomcat reports missing context xml at wrong location on JMX deployment</summary>
    <description>Hello, I'm using Tomcat JMX interface to deploy apps as follows: 1) call MBeanFactory#createStandardContext, where MBeanFactory is "Catalina:type=MBeanFactory", with parameters: parent = "Catalina:type=Host,host=localhost", path = "/w1", docBase = &lt;my path to the app&gt; 2) call &lt;my app&gt;#start, where &lt;my app&gt; is "Catalina:j2eeType=WebModule,name=//localhost/w1,J2EEApplication=none,J2EEServer=none" As result, my app _is succesfully deployed (its context is available)_, but nevertheless I see the following exceptions in the server console (full stacktraces are skipped, to be attached next comment): 31 ???? 2011 14:05:53 org.apache.catalina.startup.ContextConfig processContextConfig SEVERE: Missing context.xml: file:/C:/&lt;my Tomcat base folder&gt;/conf/Catalina/localhost/w1.xml java.io.FileNotFoundException: C:\&lt;my Tomcat base folder&gt;\conf\Catalina\localhost\w1.xml 31 ???? 2011 14:05:53 org.apache.catalina.startup.ContextConfig processContextConfig SEVERE: Parse error in context.xml for /w1 java.io.FileNotFoundException: C:\&lt;my Tomcat base folder&gt;\conf\Catalina\localhost\w1.xml 31 ???? 2011 14:05:53 org.apache.catalina.startup.ContextConfig configureStart SEVERE: Marking this application unavailable due to previous error(s) 31 ???? 2011 14:05:53 org.apache.catalina.core.StandardContext startInternal SEVERE: Error getConfigured 31 ???? 2011 14:05:53 org.apache.catalina.core.StandardContext startInternal SEVERE: Context [/w1] startup failed due to previous errors The exceptions looks strange to me, since I don't understand why Tomcat searches for a context xml file during the jmx deploy. Do I do something wrong in the deployment workflow? Regards, Michael</description>
    <commit commitTime="2011-11-02 04:40:00" id="d7af36d"/>
    <fixedFiles>
      <file>java/org/apache/catalina/mbeans/MBeanFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="52156" reportTime="2011-11-08 18:59:53">
    <summary>ServletContext.getResource(path) doesn't accept ".." anymore</summary>
    <description/>
    <commit commitTime="2011-11-09 06:06:40" id="b7f5c7e"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ApplicationContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="50570" reportTime="2011-01-11 12:27:44">
    <summary>Allow explicit use of FIPS mode in APR lifecycle listener</summary>
    <description/>
    <commit commitTime="2011-11-10 04:20:00" id="c2001ce"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/AprLifecycleListener.java</file>
      <file>java/org/apache/tomcat/jni/SSL.java</file>
    </fixedFiles>
  </bug>
  <bug id="52173" reportTime="2011-11-13 14:59:57">
    <summary>Add a drop of additional clarification to doc on the delegate setting of the WebappClassLoader</summary>
    <description/>
    <commit commitTime="2011-11-15 06:33:20" id="574af73"/>
    <fixedFiles>
      <file>java/org/apache/catalina/loader/WebappClassLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="52028" reportTime="2011-10-14 12:27:22">
    <summary>Embeded Tomcat using a Connector with a random port (port 0)</summary>
    <description/>
    <commit commitTime="2011-11-29 06:40:00" id="63f708a"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/Connector.java</file>
      <file>java/org/apache/coyote/AbstractProtocol.java</file>
      <file>java/org/apache/tomcat/util/net/AbstractEndpoint.java</file>
      <file>java/org/apache/tomcat/util/net/AprEndpoint.java</file>
      <file>java/org/apache/tomcat/util/net/JIoEndpoint.java</file>
      <file>java/org/apache/tomcat/util/net/NioEndpoint.java</file>
      <file>test/org/apache/catalina/authenticator/TestFormAuthenticator.java</file>
      <file>test/org/apache/catalina/connector/TestConnector.java</file>
      <file>test/org/apache/catalina/connector/TestRequest.java</file>
      <file>test/org/apache/catalina/core/TestStandardContext.java</file>
      <file>test/org/apache/catalina/core/TestSwallowAbortedUploads.java</file>
      <file>test/org/apache/catalina/filters/TestExpiresFilter.java</file>
      <file>test/org/apache/catalina/filters/TestRemoteIpFilter.java</file>
      <file>test/org/apache/catalina/mbeans/TestRegistration.java</file>
      <file>test/org/apache/catalina/servlets/TestDefaultServlet.java</file>
      <file>test/org/apache/catalina/startup/SimpleHttpClient.java</file>
      <file>test/org/apache/catalina/startup/TomcatBaseTest.java</file>
      <file>test/org/apache/coyote/http11/TestAbstractHttp11Processor.java</file>
      <file>test/org/apache/coyote/http11/TestInternalInputBuffer.java</file>
      <file>test/org/apache/coyote/http11/filters/TestChunkedInputFilter.java</file>
      <file>test/org/apache/tomcat/util/http/TestCookiesAllowEquals.java</file>
      <file>test/org/apache/tomcat/util/http/TestCookiesAllowHttpSeps.java</file>
      <file>test/org/apache/tomcat/util/http/TestCookiesAllowNameOnly.java</file>
      <file>test/org/apache/tomcat/util/http/TestCookiesDisallowEquals.java</file>
      <file>test/org/apache/tomcat/util/net/TestXxxEndpoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="52208" reportTime="2011-11-18 10:37:32">
    <summary>NullPointerException in tribes.transport.nio.NioReceiver.listen() in test run</summary>
    <description/>
    <commit commitTime="2011-12-09 05:33:20" id="9403e4f"/>
    <fixedFiles>
      <file>java/org/apache/catalina/tribes/transport/nio/NioReceiver.java</file>
    </fixedFiles>
  </bug>
  <bug id="52293" reportTime="2011-12-06 18:54:27">
    <summary>antiResourceLocking and unpackWARs</summary>
    <description/>
    <commit commitTime="2011-12-22 04:40:00" id="33e48db"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="52213" reportTime="2011-11-18 23:29:32">
    <summary>Field "org.apache.catalina.tribes.transport.bio.util.FastQueue.enabled" should be volatile.</summary>
    <description/>
    <commit commitTime="2011-12-24 03:53:20" id="d69fb8e"/>
    <fixedFiles>
      <file>java/org/apache/catalina/tribes/transport/bio/util/FastQueue.java</file>
    </fixedFiles>
  </bug>
  <bug id="52354" reportTime="2011-12-18 23:04:53">
    <summary>Protect concurrent accesses to field "org.apache.catalina.tribes.transport.bio.util.FastQueue.inRemove"</summary>
    <description/>
    <commit commitTime="2011-12-24 03:53:20" id="8983419"/>
    <fixedFiles>
      <file>java/org/apache/catalina/tribes/transport/bio/util/FastQueue.java</file>
    </fixedFiles>
  </bug>
  <bug id="52356" reportTime="2011-12-18 23:41:25">
    <summary>Prevent potential data races on "org.apache.catalina.tribes.transport.bio.util.FastQueue.size".</summary>
    <description/>
    <commit commitTime="2011-12-24 06:40:00" id="6f3cafe"/>
    <fixedFiles>
      <file>java/org/apache/catalina/tribes/transport/bio/util/FastQueue.java</file>
    </fixedFiles>
  </bug>
  <bug id="52384" reportTime="2011-12-24 18:16:23">
    <summary>URL parameter without value should be parsed successfully when logging level = DEBUG</summary>
    <description/>
    <commit commitTime="2011-12-26 08:40:00" id="34b011b"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/http/Parameters.java</file>
    </fixedFiles>
  </bug>
  <bug id="52303" reportTime="2011-12-08 09:35:59">
    <summary>NonLoginAuthenticator does not honour session timeout with SingleSignOn Valve</summary>
    <description/>
    <commit commitTime="2011-12-28 05:06:40" id="8b6d341"/>
    <fixedFiles>
      <file>java/org/apache/catalina/authenticator/NonLoginAuthenticator.java</file>
    </fixedFiles>
  </bug>
  <bug id="52316" reportTime="2011-12-09 22:23:47">
    <summary>AccessLog does not log size for files sent with sendfile</summary>
    <description/>
    <commit commitTime="2011-12-29 06:06:40" id="9f52382"/>
    <fixedFiles>
      <file>java/org/apache/catalina/valves/AccessLogValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="52326" reportTime="2011-12-13 18:47:41">
    <summary>Lower log level for failed class loading</summary>
    <description/>
    <commit commitTime="2011-12-30 04:20:00" id="addd522"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="52387" reportTime="2011-12-27 01:48:16">
    <summary>org.catalina.tomcat.startup.Tomcat#silence method doesn't use the host where we add the applications</summary>
    <description/>
    <commit commitTime="2011-12-31 19:13:20" id="3787242"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/Tomcat.java</file>
    </fixedFiles>
  </bug>
  <bug id="52328" reportTime="2011-12-14 11:03:38">
    <summary>Massive garbage production observed when using the response writer</summary>
    <description>In our application we used to use Tomcat 5, by writing our content directly to the response writer in our servlet: Writer w = response.getWriter(); w.append(...) We have regularly measured performance of our application under stress with multiple simultaneous requests per second. We recently upgraded to Tomcat 7, and immediately observed a performance degradation of 10% on the request roundtrip on the same machine and the same tests, compared to our application deployed on Tomcat 5. Profiling with JProfiler showed that we got massive amount of transient objects {{java.nio.HeapCharBuffer}} produced - 400Mb+ within a few minutes. The way we are writing the response is by multiple statements of {{append}} of small strings or single chars, which used to work properly. For experiment, we wrapped the response writer with a {{BufferedWriter}} with a buffer of 64k. This brought our application's performance back to normal. We see this as either a: - anti-pattern usage since Tomcat 6/7, in which case please provide some documentation about that. - bug in the C2BConverter that is applied per every call to the CoyoteWriter write methods, which generates the garbage buffers per every call. We know that the response stream has a 8k buffer by default. Nevertheless, this buffer comes after the encoding step and as such it is too late to help with the garbage. Perhaps Tomcat can buffer before it encodes? Still, so much transient objects for just a pattern of eligible use of the servlet API seems a bug to me.</description>
    <commit commitTime="2012-01-11 05:13:20" id="9c7ec4c"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/OutputBuffer.java</file>
    </fixedFiles>
  </bug>
  <bug id="52245" reportTime="2011-11-25 15:13:41">
    <summary>Add detection of EL Jar to WebappClassLoader</summary>
    <description>The EL API is not currently detected by the code in WebappClassLoader. Applications containing el-api.jar will not start. (patch to follow).</description>
    <commit commitTime="2012-01-13 04:26:40" id="ee2a461"/>
    <fixedFiles>
      <file>java/org/apache/catalina/loader/WebappClassLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="52440" reportTime="2012-01-09 09:11:20">
    <summary>Wrong getValueReference behaviour with Facelets parameter expressions</summary>
    <description>ValueExpression method getValueReference should return base object and property. But it returns null if ValueExpression is Facelets parameter. Example: someVar = #{concreteObject.property} ValueExpression for #{someVar} return null from method getValueReference (guess because it is simple expression #{someVar}), but logicaly it should return parent expressions ValueReference (need hierachical ValueReference lookup). I made workaround with Java Reflect API in my code and it illustrates problem: ELContext elContext = FacesContext.getCurrentInstance().getELContext(); ValueReference reference = exp.getValueReference(elContext); if (reference == null &amp;&amp; exp instanceof TagValueExpressionUEL) { ValueExpressionImpl origExp = (ValueExpressionImpl) ((TagValueExpressionUEL) exp).getWrapped(); // TODO: JR: find better way to get base and property. ! Code is not portable because uses Tomcat EL implementation details. ! Field field = ReflectionUtils.findField(origExp.getClass(), EL_IMPL_VAR_PROPERTY); field.setAccessible(true); VariableMapper varMapper = (VariableMapper) ReflectionUtils.getField(field, origExp); field = ReflectionUtils.findField(origExp.getClass(), EL_IMPL_NODE_PROPERTY); field.setAccessible(true); SimpleNode node = (SimpleNode) ReflectionUtils.getField(field, origExp); if (varMapper != null &amp;&amp; node != null) { ValueExpression parentExp = varMapper.resolveVariable(node.getImage()); if (parentExp != null) { try { reference = parentExp.getValueReference(elContext); if (reference == null) { reference = getValueReference(parentExp); } } catch (PropertyNotFoundException e) { LOG.warn("Property not found: " + e.getMessage()); } } } }</description>
    <commit commitTime="2012-01-13 04:26:40" id="f277b14"/>
    <fixedFiles>
      <file>java/org/apache/el/parser/AstIdentifier.java</file>
      <file>test/org/apache/el/TestValueExpressionImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="52443" reportTime="2012-01-09 16:43:35">
    <summary>Tomcat#defaultRealm shares Realm instance between web applications, resulting in INFO log message from lifecycle</summary>
    <description/>
    <commit commitTime="2012-01-13 04:26:40" id="c38ed95"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/Tomcat.java</file>
      <file>test/org/apache/catalina/mbeans/TestRegistration.java</file>
    </fixedFiles>
  </bug>
  <bug id="52445" reportTime="2012-01-10 03:25:21">
    <summary>Methodexpression with arguments fails on nested properties</summary>
    <description/>
    <commit commitTime="2012-01-14 05:26:40" id="3c8f40f"/>
    <fixedFiles>
      <file>java/org/apache/el/parser/AstValue.java</file>
      <file>test/org/apache/el/TestMethodExpressionImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="52461" reportTime="2012-01-12 20:34:28">
    <summary>java.lang.IllegalArgumentException: URI scheme is not "file" is thrown in ContextConfig.getDefaultWebXmlFragment</summary>
    <description/>
    <commit commitTime="2012-01-14 05:26:40" id="53615e5"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="38216" reportTime="2006-01-10 18:01:22">
    <summary>Extend Jmxproxy to allow call of MBean Operations</summary>
    <description>Currently one can only query Beans or set/get Attributes of them. It would be good if a certain operation of a MBean could be called by the Jmxproxy Servlet.</description>
    <commit commitTime="2012-01-16 04:40:00" id="bd478e5"/>
    <fixedFiles>
      <file>java/org/apache/catalina/manager/JMXProxyServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="52480" reportTime="2012-01-18 00:28:00">
    <summary>TC7 + AntCompiler problems with whitespace in pathname</summary>
    <description/>
    <commit commitTime="2012-01-18 20:33:20" id="b553519"/>
    <fixedFiles>
      <file>java/org/apache/catalina/loader/WebappLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="52511" reportTime="2012-01-23 21:02:08">
    <summary>Exception logged in annotation scanning for web apps without /WEB-INF/classes</summary>
    <description/>
    <commit commitTime="2012-01-28 05:33:20" id="3277494"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="52543" reportTime="2012-01-27 11:18:09">
    <summary>Exception</summary>
    <description>SEVERE: Error finishing response java.lang.ArrayIndexOutOfBoundsException at java.lang.System.arraycopy(Native Method) at org.apache.coyote.http11.AbstractOutputBuffer.write(AbstractOutputBuffer.java:495) at org.apache.coyote.http11.AbstractOutputBuffer.sendStatus(AbstractOutputBuffer.java:337) at org.apache.coyote.http11.AbstractHttp11Processor.prepareResponse(AbstractHttp11Processor.java:1418) at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:756) at org.apache.coyote.Response.action(Response.java:168) at org.apache.coyote.http11.AbstractOutputBuffer.endRequest(AbstractOutputBuffer.java:310) at org.apache.coyote.http11.InternalOutputBuffer.endRequest(InternalOutputBuffer.java:158) at org.apache.coyote.http11.AbstractHttp11Processor.endRequest(AbstractHttp11Processor.java:1586) at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1022) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:579) at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:307) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) at java.lang.Thread.run(Thread.java:722) big application i dont know why its happens may be due to the fact that twice as add some cookie</description>
    <commit commitTime="2012-01-29 03:46:40" id="ee0562d"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/AbstractOutputBuffer.java</file>
    </fixedFiles>
  </bug>
  <bug id="52547" reportTime="2012-01-27 19:43:42">
    <summary>incorrect byeswritten log after completed async request under http1.0</summary>
    <description/>
    <commit commitTime="2012-01-29 03:46:40" id="f2edc92"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/AbstractOutputBuffer.java</file>
    </fixedFiles>
  </bug>
  <bug id="52444" reportTime="2012-01-09 17:11:12">
    <summary>Classloading-based ServletContainerInitializer @HandlesTypes processing can result in long startup times</summary>
    <description>See 52326 for background, noting particularly the following: "As long as SCI processing involves expensive classloading, larger applications will suffer from long startup times and thus be encouraged to "shut off" this functionality via metadata-complete='true'." This issue, then, is intended to address classloading-based approach to @HandlesTypes processing by replacing it with something faster and generally less problematic. ASM would be one way to get it done.</description>
    <commit commitTime="2012-01-30 18:40:00" id="f4896de"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
      <file>java/org/apache/tomcat/util/bcel/classfile/JavaClass.java</file>
      <file>test/org/apache/catalina/startup/TestContextConfigAnnotation.java</file>
    </fixedFiles>
  </bug>
  <bug id="52587" reportTime="2012-02-02 20:00:01">
    <summary>NPE in authenticator when no realm/resource is defined</summary>
    <description>When no Realm is available to authenticate against, an NPE is thrown. STR: 1. Start with a stock 7.0.25 and modify server.xml: 2. Comment-out &lt;Resource&gt; in &lt;GlobalNamingResources&gt; 3. Comment-out &lt;Realm&gt; in &lt;Engine&gt; 4. Deploy manager app and try to log in java.lang.NullPointerException org.apache.catalina.realm.RealmBase.authenticate(RealmBase.java:340) org.apache.catalina.authenticator.BasicAuthenticator.authenticate(BasicAuthenticator.java:158) org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:544) org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98) org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407) org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:987) org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:579) org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1600) java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) java.lang.Thread.run(Thread.java:680) Clearly, this is a pathological setup, but it might be nice to get a decent error message instead of an NPE.</description>
    <commit commitTime="2012-02-06 03:26:40" id="49a52cb"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardEngine.java</file>
    </fixedFiles>
  </bug>
  <bug id="52577" reportTime="2012-02-02 07:45:44">
    <summary>Response output written in filter can be truncated</summary>
    <description>Due to changes 1229726, 1229727 and 1229728 output written to response in the filter can be truncated up to 8192 bytes. Consider the following scenario: - you have a filter that invoke getWriter() before chain.doFilter(request, responseWrapper) - responseWrapper overrides getWriter() method and returns some buffered writer, not the real one - during execution of chain.doFilter there is a forward Before the forward ApplicationDispather calls resetBuffer on response, which in turn calls reset() on OutputBuffer, which sets gotEnc field to false. This field is initialized in the setConverter() method which is called from response.getWriter(), but since our wrapperResponse overrides getWriter(), OutputBuffer.setConverter() never called and OutputBuffer still has gotEnc = false. Response's close() and flushBuffer() methods call OutputBuffer's flush(), but since gotEnc == false, conv.flushBuffer() is not called: if (gotEnc &amp;&amp; conv != null) { conv.flushBuffer(); } A workaround for us is to implement getWriter() method in responseWrapper like this: public Writer getWriter() { Writer originalWriter = originalResponse.getWriter();//save for future processing return ourWriter; } Maybe you should change flushing to something like that: if (conv != null) { conv.flushBuffer(); } because you invoke conv.convert() without any checks in the write*() methods and it seems like conv is never null.</description>
    <commit commitTime="2012-02-06 06:13:20" id="2fd117b"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/OutputBuffer.java</file>
      <file>java/org/apache/catalina/connector/Response.java</file>
      <file>test/org/apache/catalina/connector/TestOutputBuffer.java</file>
    </fixedFiles>
  </bug>
  <bug id="52586" reportTime="2012-02-02 18:49:59">
    <summary>When requests are forwarded, the request attribute javax.servlet.forward.path_info is assigned an incorrect value.</summary>
    <description>As per the servlet spec, the values for: javax.servlet.forward.request_uri javax.servlet.forward.context javax.servlet.forward.servlet_path javax.servlet.forward.path_info javax.servlet.forward.query_string MUST be set to the values from the very first servlet that serviced the current request. However, it seems that Tomcat is populating path_info with the value of the LAST path_info serviced in the request (i.e. the final servlet that serviced the request). It's possible the other value assignments are afflicted by similar defects, I've not explicitly tested for this. Because of this issue, it's impossible to correctly reconstruct the original request's URI piecemeal by concatenating context+servlet_path+path_info+?+query_string, since path_info will contain the path to another servlet and thus this concatenation will produce a probably invalid URI target. Therefore, creating "click here to retry" links is impossible without workaround code. The critical issue here is the deviation from the servlet spec, which spells out the behavior of those attributes.</description>
    <commit commitTime="2012-02-06 06:13:20" id="660513c"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardHostValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="52591" reportTime="2012-02-03 14:43:28">
    <summary>UnsupportedOperationException logged when fetching BasicDataSource 'loginTimeout'</summary>
    <description>With a BasicDataSource configured (using a &lt;Resource&gt;), simply list the available MBeans and this exception will be emitted to stdout: SEVERE: Error getting attribute Catalina:type=DataSource,context=/context,host=localhost,class=javax.sql.DataSource,name="jdbc/myDataSource" loginTimeout javax.management.RuntimeOperationsException: Exception invoking method loginTimeout at org.apache.tomcat.util.modeler.BaseModelMBean.getAttribute(BaseModelMBean.java:197) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(DefaultMBeanServerInterceptor.java:666) at com.sun.jmx.mbeanserver.JmxMBeanServer.getAttribute(JmxMBeanServer.java:638) at org.apache.catalina.mbeans.MBeanDumper.dumpBeans(MBeanDumper.java:81) at org.apache.catalina.manager.JMXProxyServlet.listBeans(JMXProxyServlet.java:166) at org.apache.catalina.manager.JMXProxyServlet.doGet(JMXProxyServlet.java:121) at javax.servlet.http.HttpServlet.service(HttpServlet.java:621) [...] Caused by: java.lang.UnsupportedOperationException: Not supported by BasicDataSource at org.apache.tomcat.dbcp.dbcp.BasicDataSource.getLoginTimeout(BasicDataSource.java:1083) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) This exception does not cause the request to fail, but definitely puts an ugly stack trace in catalina.out. It might be better to catch UnsupportedOperationException and emit a one-line error message -- one that isn't SEVERE.</description>
    <commit commitTime="2012-02-08 22:06:40" id="fbf9166"/>
    <fixedFiles>
      <file>java/org/apache/catalina/mbeans/MBeanDumper.java</file>
    </fixedFiles>
  </bug>
  <bug id="52606" reportTime="2012-02-05 18:10:19">
    <summary>FORM authentication POST replay broken for AJP</summary>
    <description/>
    <commit commitTime="2012-02-09 00:53:20" id="6f766be"/>
    <fixedFiles>
      <file>java/org/apache/coyote/ajp/AbstractAjpProcessor.java</file>
    </fixedFiles>
  </bug>
  <bug id="52607" reportTime="2012-02-05 22:19:35">
    <summary>It is not well defined how "Dependencies on extensions" mechanism can be used in Tomcat</summary>
    <description/>
    <commit commitTime="2012-02-09 06:26:40" id="4b6d583"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardServer.java</file>
      <file>java/org/apache/catalina/util/ExtensionValidator.java</file>
    </fixedFiles>
  </bug>
  <bug id="52666" reportTime="2012-02-14 12:55:34">
    <summary>EL should coerce String to Integer in equals operation</summary>
    <description/>
    <commit commitTime="2012-02-15 23:33:20" id="bf9bf39"/>
    <fixedFiles>
      <file>java/org/apache/el/lang/ELSupport.java</file>
      <file>test/org/apache/el/lang/TestELSupport.java</file>
    </fixedFiles>
  </bug>
  <bug id="52669" reportTime="2012-02-14 21:39:46">
    <summary>Annotation processing, in WEB-INF/classes, for Servlets/Listeners/Filters is skipped when the web app is not extracted, classes do not have packages and for some embedded scenarios</summary>
    <description/>
    <commit commitTime="2012-02-16 05:06:40" id="34b1a7e"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="52671" reportTime="2012-02-15 11:47:03">
    <summary>NIO Connector: Exception invoking method readBufSize / writeBufSize in the JMX Proxy Servlet</summary>
    <description/>
    <commit commitTime="2012-02-16 05:06:40" id="3fe64a5"/>
    <fixedFiles>
      <file>java/org/apache/catalina/mbeans/MBeanDumper.java</file>
    </fixedFiles>
  </bug>
  <bug id="52758" reportTime="2012-02-24 04:21:56">
    <summary>Jasper illegally implements org.eclipse.jdt.internal.compiler.env.ICompilationUnit from Eclipse</summary>
    <description/>
    <commit commitTime="2012-02-24 18:40:00" id="2e7f5ab"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/JDTCompiler.java</file>
    </fixedFiles>
  </bug>
  <bug id="52760" reportTime="2012-02-24 13:35:39">
    <summary>Mime type for javascript incorrect in documentation</summary>
    <description/>
    <commit commitTime="2012-02-26 20:40:00" id="833e6b1"/>
    <fixedFiles>
      <file>java/org/apache/catalina/filters/ExpiresFilter.java</file>
    </fixedFiles>
  </bug>
  <bug id="52804" reportTime="2012-03-01 17:18:03">
    <summary>Make PoolProperties implement Cloneable.</summary>
    <description>It would be very useful to have the PoolProperties class implement the java.lang.Cloneable interface. We have many databases that share the same schema, username, password, configuration etc but differ only in their URL. Implementing a routing datasource based on something like org.springframework.jdbc.datasource.AbstractDataSource can then just clone a PoolProperties object and set the one or two properties that differ in the clone. In a spring project the properties that are common across all the datasources are only supplied once.</description>
    <commit commitTime="2012-03-02 03:26:40" id="55baca6"/>
    <fixedFiles>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java</file>
    </fixedFiles>
  </bug>
  <bug id="52724" reportTime="2012-02-21 10:35:32">
    <summary>An incomplete fix for the resource leak bugs in Catalina.java</summary>
    <description/>
    <commit commitTime="2012-03-06 04:40:00" id="7c51f61"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/Catalina.java</file>
    </fixedFiles>
  </bug>
  <bug id="52725" reportTime="2012-02-21 11:28:46">
    <summary>org.apache.jasper.compiler.JspUtil#getTagHandlerClassName() does not use org.apache.jasper.Constants.TAG_FILE_PACKAGE_NAME</summary>
    <description>In the class org.apache.jasper.compiler.JspUtil, its method public static String getTagHandlerClassName(String path, String urn, ErrorDispatcher err) throws JasperException { ... } uses the string constants directly like "org.apache.jsp.tag.web.", "org.apache.jsp.tag.meta.". But you know there is TAG_FILE_PACKAGE_NAME field in the class org.apache.jasper.Constants. The code should be adjusted like below : Constants.TAG_FILE_PACKAGE_NAME + ".web" Constants.TAG_FILE_PACKAGE_NAME + ".meta"</description>
    <commit commitTime="2012-03-06 04:40:00" id="bf0287e"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/JspUtil.java</file>
    </fixedFiles>
  </bug>
  <bug id="52726" reportTime="2012-02-21 11:50:36">
    <summary>An incomplete fix for the resource leak bug in MemoryUserDatabase.java</summary>
    <description/>
    <commit commitTime="2012-03-07 05:40:00" id="a30ce07"/>
    <fixedFiles>
      <file>java/org/apache/catalina/users/MemoryUserDatabase.java</file>
    </fixedFiles>
  </bug>
  <bug id="52727" reportTime="2012-02-21 11:58:35">
    <summary>An incomplete fix for the resource leak bug in HostConfig.java</summary>
    <description/>
    <commit commitTime="2012-03-07 05:40:00" id="8293a6e"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/HostConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="52729" reportTime="2012-02-21 12:01:25">
    <summary>An incomplete fix for the resource leak bug in CometConnectionManagerValve.java</summary>
    <description/>
    <commit commitTime="2012-03-07 05:40:00" id="683d5c1"/>
    <fixedFiles>
      <file>java/org/apache/catalina/valves/CometConnectionManagerValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="52731" reportTime="2012-02-21 12:16:28">
    <summary>An incomplete fix for the resource leak bug in JDTCompiler.java</summary>
    <description/>
    <commit commitTime="2012-03-07 05:40:00" id="2b1d195"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/JDTCompiler.java</file>
    </fixedFiles>
  </bug>
  <bug id="52732" reportTime="2012-02-21 12:22:44">
    <summary>An incomplete fix for the resource leak bug in ExpressionFactory.java</summary>
    <description/>
    <commit commitTime="2012-03-07 05:40:00" id="6399c83"/>
    <fixedFiles>
      <file>java/javax/el/ExpressionFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="52846" reportTime="2012-03-07 08:40:46">
    <summary>Programmatic login using UserDatabaseRealm returns 403 error.</summary>
    <description>IMHO,HttpServletRequest#login does not need to define a &lt;login-config&gt;. NonLoginAuthenticator is used when &lt;login-config&gt; is not specified in HttpServletRequest#login. When UserDatabaseRealm is used, not GenericPrincipal but Memory User is set to a session. In AuthenticatorBase#invoke, principal registered into a session is set to a request. Because MemoryUser is set to a request as principal, RealmBase#hasRole always returns false. As a result, 403 error is returned.</description>
    <commit commitTime="2012-03-07 16:46:40" id="a01418d"/>
    <fixedFiles>
      <file>java/org/apache/catalina/authenticator/NonLoginAuthenticator.java</file>
    </fixedFiles>
  </bug>
  <bug id="52767" reportTime="2012-02-25 14:32:33">
    <summary>Potential Bug or Inconsistency in JDBCRealm.java and JDBCAccessLogValve.java</summary>
    <description>This is Ken Cheung, a Computer Science M.Phil. student. I observed some code clones in Tomcat and found inconsistent code: /tomcat/trunk/java/org/apache/catalina/realm/JDBCRealm.java 676 if (driver == null) { 677 try { 678 Class&lt;?&gt; clazz = Class.forName(driverName); 679 driver = (Driver) clazz.newInstance(); 680 } catch (Throwable e) { 681 ExceptionUtils.handleThrowable(e); 682 throw new SQLException(e.getMessage(), e); 683 } 684 } 685 686 // Open a new connection 687 Properties props = new Properties(); 688 if (connectionName != null) 689 props.put("user", connectionName); 690 if (connectionPassword != null) 691 props.put("password", connectionPassword); 692 dbConnection = driver.connect(connectionURL, props); /tomcat/trunk/java/org/apache/catalina/valves/JDBCAccessLogValve.java 566 if (driver == null) { 567 try { 568 Class&lt;?&gt; clazz = Class.forName(driverName); 569 driver = (Driver) clazz.newInstance(); 570 } catch (Throwable e) { 571 ExceptionUtils.handleThrowable(e); 572 throw new SQLException(e.getMessage(), e); 573 } 574 } 575 576 // Open a new connection 577 Properties props = new Properties(); 578 props.put("autoReconnect", "true"); 579 if (connectionName != null) { 580 props.put("user", connectionName); 581 } 582 if (connectionPassword != null) { 583 props.put("password", connectionPassword); 584 } 585 conn = driver.connect(connectionURL, props); Quick description of the inconsistency Two code snippets are very similar code, but as you see, in JDBCRealm.java does not use "props.put("autoReconnect", "true")" while JDBCAccessLogValve.java has. We thought it could be a potential bug or inconsistency. Hope this helps.</description>
    <commit commitTime="2012-03-07 22:20:00" id="1f4663d"/>
    <fixedFiles>
      <file>java/org/apache/catalina/valves/JDBCAccessLogValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="52770" reportTime="2012-02-25 15:04:31">
    <summary>Potential Bug or Inconsistency in NioBlockingSelector.java</summary>
    <description>This is Ken Cheung, a Computer Science M.Phil. student. I observed some code clones in Tomcat and found inconsistent code: /tomcat/trunk/java/org/apache/tomcat/util/net/NioBlockingSelector.java 103 try { 104 if ( att.getWriteLatch()==null || att.getWriteLatch().getCount()==0) att.startWriteLatch(1); 105 poller.add(att,SelectionKey.OP_WRITE,reference); 106 att.awaitWriteLatch(writeTimeout,TimeUnit.MILLISECONDS); 107 }catch (InterruptedException ignore) { 108 Thread.interrupted(); 109 } 110 if ( att.getWriteLatch()!=null &amp;&amp; att.getWriteLatch().getCount()&gt; 0) { 111 //we got interrupted, but we haven't received notification from the poller. 112 keycount = 0; 113 }else { 114 //latch countdown has happened 115 keycount = 1; 116 att.resetWriteLatch(); 117 } 118 119 if (writeTimeout &gt; 0 &amp;&amp; (keycount == 0)) 120 timedout = (System.currentTimeMillis() - time) &gt;= writeTimeout; /tomcat/trunk/java/org/apache/tomcat/util/net/NioBlockingSelector.java 164 try { 165 if ( att.getReadLatch()==null || att.getReadLatch().getCount()==0) att.startReadLatch(1); 166 poller.add(att,SelectionKey.OP_READ, reference); 167 if (readTimeout &lt; 0) { 168 att.awaitReadLatch(Long.MAX_VALUE, TimeUnit.MILLISECONDS); 169 } else { 170 att.awaitReadLatch(readTimeout, TimeUnit.MILLISECONDS); 171 } 172 }catch (InterruptedException ignore) { 173 Thread.interrupted(); 174 } 175 if ( att.getReadLatch()!=null &amp;&amp; att.getReadLatch().getCount()&gt; 0) { 176 //we got interrupted, but we haven't received notification from the poller. 177 keycount = 0; 178 }else { 179 //latch countdown has happened 180 keycount = 1; 181 att.resetReadLatch(); 182 } 183 if (readTimeout &gt;= 0 &amp;&amp; (keycount == 0)) 184 timedout = (System.currentTimeMillis() - time) &gt;= readTimeout; Quick description of the inconsistency Two code snippets are very similar code, but as you see, the first code does not check "if (readTimeout &lt; 0)" while the second code has the checker. We thought it could be a potential bug or inconsistency. Hope this helps.</description>
    <commit commitTime="2012-03-07 22:20:00" id="4f75b2d"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/net/NioBlockingSelector.java</file>
    </fixedFiles>
  </bug>
  <bug id="52772" reportTime="2012-02-26 07:41:43">
    <summary>JspC : checking uriRoot option validness</summary>
    <description>In org.apache.jasper.JspC#execute() method, if uriRoot is not null, it scans all jsp files under uriRoot, and then checks if uriRoot is a directory. It should be more desirable to check if uriRoot is a directory or not first and then scanning it. Here are my suggestion. if (uriRoot == null) { throw new JasperException( Localizer.getMessage("jsp.error.jspc.no_uriroot")); } File uriRootF = new File(uriRoot); if (!uriRootF.exists() || !uriRootF.isDirectory()) { throw new JasperException( Localizer.getMessage("jsp.error.jspc.uriroot_not_dir")); } if( context==null ) { initServletContext(); } // No explicit pages, we'll process all .jsp in the webapp if (pages.size() == 0) { scanFiles(uriRootF); }</description>
    <commit commitTime="2012-03-07 22:20:00" id="35958df"/>
    <fixedFiles>
      <file>java/org/apache/jasper/JspC.java</file>
    </fixedFiles>
  </bug>
  <bug id="52792" reportTime="2012-02-28 20:30:12">
    <summary>Incomplete error message when lookup a resource that is not bound in the naming</summary>
    <description/>
    <commit commitTime="2012-03-08 03:53:20" id="7cec4ff"/>
    <fixedFiles>
      <file>java/org/apache/naming/NamingContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="52719" reportTime="2012-02-21 09:37:53">
    <summary>An incomplete fix for the resource leak bug in WebappClassLoader.java</summary>
    <description/>
    <commit commitTime="2012-03-08 06:40:00" id="78c02a7"/>
    <fixedFiles>
      <file>java/org/apache/catalina/loader/WebappClassLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="52500" reportTime="2012-01-23 13:02:04">
    <summary>Improve client certificate authentication</summary>
    <description/>
    <commit commitTime="2012-03-09 02:06:40" id="401c703"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/RealmBase.java</file>
      <file>java/org/apache/catalina/realm/X509SubjectDnRetriever.java</file>
      <file>java/org/apache/catalina/realm/X509UsernameRetriever.java</file>
    </fixedFiles>
  </bug>
  <bug id="52776" reportTime="2012-02-27 00:46:22">
    <summary>Generator's JspFragment.invoke implementation does not reset ELContext[JspContext.class]</summary>
    <description>If a developer captures a JspFragment themselves and calls invoke on it, the JspContext.class attribute in the enclosing pageContext's ELContext is set by the generated JspFragment subclass, but not reset to its original value afterwards. Therefore after invoking a JspContext any EL expressions will be searching the wrong jspContext for attribute values. org.apache.jasper.compiler.Generator is responsible for creating the JspFragment subclass to represent the compiled fragment. The generatePostamble() method emits generated code to set the JspContext attribute in the ELContext: out.printil("this.jspContext.getELContext().putContext(javax.servlet.jsp.JspContext.class,this.jspContext);"); However it doesn't later put back the original value. If you are using the &lt;jsp:invoke&gt; tag to invoke the fragment (which is undoubtedly what most people are doing) then the code generated by visit(Node.InvokeAction n) in Generator explicitly restores the EL context: out.printil("jspContext.getELContext().putContext(javax.servlet.jsp.JspContext.class,getJspContext());"); However if you call invoke(Writer) on the JspFragment yourself you don't get that tidy up code. I suggest the resolution is to have the JspFragment.invoke method tidy up after itself. It "puts" the change to the JspContext.class attribute so it should also re"put" it. Then there shouldn't be any need to restore the EL context in the generated &lt;jsp:invoke&gt; code. I have tested this solution successfully.</description>
    <commit commitTime="2012-03-09 18:46:40" id="faf26da"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Generator.java</file>
    </fixedFiles>
  </bug>
  <bug id="52850" reportTime="2012-03-07 14:57:15">
    <summary>Various miscellaneous fixes to Tomcat Memory Leak Detection code</summary>
    <description>Problem Description - ---------------------- Tomcat memory leak detection has the following issues - Most of the detection and fixing code has been tested ONLY on Sun JVMs. A lot of the reflection based code does not work with the IBM JDK. - Tests in tomcat7.source\test\org\apache\catalina\loader do not seem to run successfully and are incomplete for all the protection that Tomcat provides for classloader memory leaks. - For some categories of threadlocal memory leaks the key and value are not displayed correctly in the warning messages; particularly ones dealing with indirect references to threadlocals - org.apache.catalina.loader.WebappClassLoader.loadedByThisOrChild(Object) incorrectly traverses the object classloader hierarchy instead of the current (this) classloader hierarchy Problem Conclusion - -------------------- - After extensive testing with the IBM JDKs, I have cleaned up and sanitized some of the reflection code to stop executors, timers, threads etc on the IBM JDK - Added new tests for detecting threadlocal leaks and thread leaks - Better ThreadLocal leak reporting with corrected loadedByThisOrChild method and addition of expungeStaleEntries method - Make code more resilient in certain leak detection scenarios.</description>
    <commit commitTime="2012-03-10 03:06:40" id="adbf442"/>
    <fixedFiles>
      <file>java/org/apache/catalina/loader/WebappClassLoader.java</file>
      <file>test/org/apache/catalina/loader/TestWebappClassLoaderExecutorMemoryLeak.java</file>
      <file>test/org/apache/catalina/loader/TestWebappClassLoaderThreadLocalMemoryLeak.java</file>
    </fixedFiles>
  </bug>
  <bug id="52723" reportTime="2012-02-21 10:22:02">
    <summary>An incomplete fix for the resource leak bugs in StandardManager.java</summary>
    <description/>
    <commit commitTime="2012-03-10 05:53:20" id="9f8c8d6"/>
    <fixedFiles>
      <file>java/org/apache/catalina/session/StandardManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="52926" reportTime="2012-03-16 08:19:25">
    <summary>NPE in processSocket</summary>
    <description>We have sporadic issues triggering 502 proxy errors using the NIO connector behind Nginx, caused by dropped connections/end of streams in Tomcat. The Tomcat log shows: SEVERE: Error allocating socket processor java.lang.NullPointerException at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:721) at org.apache.tomcat.util.net.NioEndpoint$Poller.cancelledKey(NioEndpoint.java:1048) at org.apache.tomcat.util.net.NioEndpoint$Poller.timeout(NioEndpoint.java:1392) at org.apache.tomcat.util.net.NioEndpoint$Poller.run(NioEndpoint.java:1174) at java.lang.Thread.run(Thread.java:662) Looking at the code in processSocket I see the line in NioEndpoint(721): attachment.setCometNotify(false); //will get reset upon next reg Attachment is fetched in line 720: KeyAttachment attachment = (KeyAttachment)socket.getAttachment(false); Looking at socket.getAttachement() method I see that this method is indeed capable of returning null, but no null-check for this is done (although it is in multiple other locations, so it seems inconsistent).</description>
    <commit commitTime="2012-03-20 18:40:00" id="dcb8808"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/net/NioEndpoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="51237" reportTime="2011-05-20 22:01:35">
    <summary>SlowQueryReport interceptor does not log anything</summary>
    <description/>
    <commit commitTime="2012-03-20 21:26:40" id="0eb38b8"/>
    <fixedFiles>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java</file>
    </fixedFiles>
  </bug>
  <bug id="51893" reportTime="2011-09-26 14:49:49">
    <summary>JMX notification/Exception for empty/exhausted connection pool</summary>
    <description>Currently, if there is an error getting a connection from the pool, a generic SQLException is thrown. The only way to determine if the problem is a result of the connection pool being exhausted is to catch the SQLException and parse the message (i.e. look for "Pool empty" in ex.getMessage()). Would like to see the following: 1) A subclass of SQLException thrown in the case of an empty pool 2) A JMX notification sent in the case of an empty pool (e.g. [POOL EXHAUSTED])</description>
    <commit commitTime="2012-03-21 00:13:20" id="9d687eb"/>
    <fixedFiles>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolExhaustedException.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java</file>
    </fixedFiles>
  </bug>
  <bug id="50860" reportTime="2011-03-03 06:51:14">
    <summary>In case of invalid or empty slqQuery connection are always invalidated without usefull information</summary>
    <description>The code is (in PooledConnection.java#validate(int validateAction,String sql) ) Statement stmt = null; try { stmt = connection.createStatement(); stmt.execute(query); stmt.close(); this.lastValidated = now; return true; } catch (Exception ignore) { if (log.isDebugEnabled()) log.debug("Unable to validate object:",ignore); if (stmt!=null) try { stmt.close();} catch (Exception ignore2){/*NOOP*/} } return false; So in the case of null or invalid query (connection is always invalidated : seems normal :-) ). But without any usefull message (except if you use debug : but seems complicated in a production env). So IMHO adding a log.warning in case of null query could be usefull.</description>
    <commit commitTime="2012-03-21 00:13:20" id="e092870"/>
    <fixedFiles>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java</file>
    </fixedFiles>
  </bug>
  <bug id="52839" reportTime="2012-03-06 16:12:53">
    <summary>New unit test for DigestAuthenticator and SingleSignOn</summary>
    <description/>
    <commit commitTime="2012-03-21 05:46:40" id="c0f1bb9"/>
    <fixedFiles>
      <file>test/org/apache/catalina/authenticator/TestSSOnonLoginAndDigestAuthenticator.java</file>
    </fixedFiles>
  </bug>
  <bug id="52957" reportTime="2012-03-21 12:47:49">
    <summary>ClassCastException while removing Valve</summary>
    <description/>
    <commit commitTime="2012-03-22 23:26:40" id="d5cee34"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardPipeline.java</file>
    </fixedFiles>
  </bug>
  <bug id="52066" reportTime="2011-10-20 19:28:24">
    <summary>ConnectionPool.borrowConnection swallows interrupt state.</summary>
    <description>In this code snippet starting on line 6.15 of ConnectionPool.java version 7.0.22 try { //retrieve an existing connection con = idle.poll(timetowait, TimeUnit.MILLISECONDS); } catch (InterruptedException ex) { Thread.interrupted();//clear the flag, and bail out SQLException sx = new SQLException("Pool wait interrupted."); sx.initCause(ex); throw sx; } finally { waitcount.decrementAndGet(); } The line marked '//clear the flag, and bail out' is wrong, because after that there is no way for calling code to find out that the thread has been interrupted. The correct behavior should be Thread.currentThread( ).interrupt( ); Here is the excerpt from the Biran Goetz's "Java Concurrency in Practice" chapter 5.4. &lt;!START QUOTATION&gt; For library code there are basically two choices: -- Propagate the InterruptedException. This is often the most sensible policy if you can get away with it -- just propagate the InterruptedException to your caller. This could involve not catching InterruptedException, or catching it and throwing it again after performing some brief activity-specific cleanup. -- Restore the interrupt. Sometimes you cannot throw InterruptedException, for instance when your code is part of a Runnable. In these situations, you must catch InterruptedException and restore the interrupted status by calling interrupt on the current thread, so that code higher up the call stack can see that an interrupt was issued. &lt;!END QUOTATION&gt; In the case of borrowConnection, #1 is not really a choice, as it is running in the confines of JDBC interface. But it can definitely restore the interrupt status of the thread.</description>
    <commit commitTime="2012-03-28 01:40:00" id="fe16ac2"/>
    <fixedFiles>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java</file>
    </fixedFiles>
  </bug>
  <bug id="52833" reportTime="2012-03-05 23:28:06">
    <summary>NPE with 7.0.26</summary>
    <description>Upgrading the maven plugin 7.0.26, the goal which runs tomcat with a conf dir (not the embed version) generate the following NPE Log: at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:236) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:141) at org.apache.catalina.startup.Catalina.start(Catalina.java:645) at org.apache.tomcat.maven.plugin.tomcat7.run.AbstractRunMojo.startContainer(AbstractRunMojo.java:679) at org.apache.tomcat.maven.plugin.tomcat7.run.AbstractRunMojo.execute(AbstractRunMojo.java:365) at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153) at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84) at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59) at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183) at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161) at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320) at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156) at org.apache.maven.cli.MavenCli.execute(MavenCli.java:544) at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:197) at org.apache.maven.cli.MavenCli.main(MavenCli.java:141) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290) at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230) at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409) at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)</description>
    <commit commitTime="2012-03-28 01:40:00" id="6a8e480"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardServer.java</file>
    </fixedFiles>
  </bug>
  <bug id="52974" reportTime="2012-03-22 20:43:20">
    <summary>NameNotFoundException is thrown when field/method is annotated with @Resource annotation</summary>
    <description/>
    <commit commitTime="2012-03-28 04:26:40" id="67a926c"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/WebAnnotationSet.java</file>
    </fixedFiles>
  </bug>
  <bug id="53001" reportTime="2012-03-29 09:41:39">
    <summary>Behaviour of ResourceBundleELResolver</summary>
    <description/>
    <commit commitTime="2012-03-31 01:53:20" id="1aced29"/>
    <fixedFiles>
      <file>test/javax/el/TestResourceBundleELResolver.java</file>
    </fixedFiles>
  </bug>
  <bug id="52998" reportTime="2012-03-28 21:16:03">
    <summary>Performance issue with ExpressionFactory.newInstance()</summary>
    <description/>
    <commit commitTime="2012-03-31 04:40:00" id="7da5fa9"/>
    <fixedFiles>
      <file>java/javax/el/ExpressionFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="50864" reportTime="2011-03-03 11:15:31">
    <summary>Reconfigure pool on the fly using JMX</summary>
    <description/>
    <commit commitTime="2012-04-11 01:46:40" id="518662f"/>
    <fixedFiles>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java</file>
    </fixedFiles>
  </bug>
  <bug id="53056" reportTime="2012-04-10 20:58:50">
    <summary>Add APR version number to tcnative version INFO log message</summary>
    <description>When tcnative starts, it emits information like this to catalina.out: pr 10, 2012 4:54:55 PM org.apache.catalina.core.AprLifecycleListener init INFO: Loaded APR based Apache Tomcat Native library 1.1.23. Apr 10, 2012 4:54:55 PM org.apache.catalina.core.AprLifecycleListener init INFO: APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true]. It would be nice if the APR version in use could also be displayed as well as the tcnative version. Maybe the OpenSSL version, too.</description>
    <commit commitTime="2012-04-11 04:33:20" id="df88ecb"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/AprLifecycleListener.java</file>
    </fixedFiles>
  </bug>
  <bug id="53087" reportTime="2012-04-17 05:44:46">
    <summary>BackupManager does not replicate session access time.</summary>
    <description/>
    <commit commitTime="2012-04-17 13:20:00" id="48b9153"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/session/DeltaSession.java</file>
      <file>java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java</file>
      <file>java/org/apache/catalina/tribes/tipis/ReplicatedMapEntry.java</file>
    </fixedFiles>
  </bug>
  <bug id="53063" reportTime="2012-04-11 13:14:14">
    <summary>Inconsistency in documentation regarding Connector's maxConnections property</summary>
    <description/>
    <commit commitTime="2012-05-11 04:00:00" id="be365e5"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/net/AbstractEndpoint.java</file>
      <file>java/org/apache/tomcat/util/net/JIoEndpoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="53254" reportTime="2012-05-17 17:59:28">
    <summary>Support for purging connection pool</summary>
    <description>It is a common function of a connection pool to support "purging" the pool of all current connections and getting all fresh connections. Oracle UCP and Websphere pools are two such examples. It would be great if this pool supported such an operation as well. It would be useful if the operation were exposed through JMX too.</description>
    <commit commitTime="2012-05-19 00:53:20" id="f170929"/>
    <fixedFiles>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPoolMBean.java</file>
      <file>modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/PoolPurgeTest.java</file>
    </fixedFiles>
  </bug>
  <bug id="53090" reportTime="2012-04-17 08:07:14">
    <summary>Servlet superclass injection targets are ignored</summary>
    <description/>
    <commit commitTime="2012-05-29 05:20:00" id="de1f763"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/DefaultInstanceManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="53081" reportTime="2012-04-13 21:46:53">
    <summary>WebappClassLoader causes java.lang.OutOfMemoryError in findResourceInternal()</summary>
    <description/>
    <commit commitTime="2012-05-29 22:00:00" id="5d12129"/>
    <fixedFiles>
      <file>java/org/apache/catalina/loader/WebappClassLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="53180" reportTime="2012-05-02 20:27:25">
    <summary>DefaultInstanceManager#populateAnnotationsCache - incomplete check is used when validating for a setter method</summary>
    <description/>
    <commit commitTime="2012-05-29 22:00:00" id="39c8e18"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/DefaultInstanceManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="53322" reportTime="2012-05-30 01:22:25">
    <summary>Odd decapitalization when inferring JavaBean property from setter name for an injection target</summary>
    <description/>
    <commit commitTime="2012-05-30 09:06:40" id="13100e9"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/DefaultInstanceManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="53169" reportTime="2012-05-01 09:35:06">
    <summary>[patch] don't do chunking with Connection: close</summary>
    <description/>
    <commit commitTime="2012-05-30 23:00:00" id="280beac"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/AbstractHttp11Processor.java</file>
      <file>test/org/apache/coyote/http11/TestAbstractHttp11Processor.java</file>
    </fixedFiles>
  </bug>
  <bug id="53342" reportTime="2012-06-01 09:34:18">
    <summary>If starting immediately after Tomcat stop fail, BindException will throw.</summary>
    <description>e.g. When Context#stop throw LifecycleException, the main thread stops, but startStopThreads of Host/Engine will remain for a while. Because, startStopThreads is not a demon thread. As a result, even if a main thread stops, Acceptor Threads of 8080/8009 is not stopped. keepAliveTime for 10 seconds is set up now. === startStopExecutor = new ThreadPoolExecutor( getStartStopThreadsInternal(), getStartStopThreadsInternal(), 10, TimeUnit.SECONDS, startStopQueue); === Therefore, in order to avoid BindException, the waiting for 10 seconds is required. I think that I need to make startStopThreads into a demon thread. Best Regards.</description>
    <commit commitTime="2012-06-01 16:40:00" id="84342f5"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ContainerBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="53301" reportTime="2012-05-26 21:36:56">
    <summary>Servlet init method called twice with embedded Tomcat</summary>
    <description>When using embedded Tomcat, the servlet init method is called twice by the container. This has been seen with an Apache DirectMemory unit test. I have checked with a normal Tomcat launched by the Tomcat Maven plugin (mvn tomcat7:run) and in this case, the init method is correctly called once.</description>
    <commit commitTime="2012-06-01 19:26:40" id="6ce3128"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/Tomcat.java</file>
      <file>test/org/apache/catalina/startup/TestTomcat.java</file>
    </fixedFiles>
  </bug>
  <bug id="53337" reportTime="2012-05-31 17:06:36">
    <summary>IllegalStateException when trying to render a JSP after startAsync</summary>
    <description/>
    <commit commitTime="2012-06-04 00:13:20" id="c6b691d"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ApplicationDispatcher.java</file>
      <file>test/org/apache/catalina/core/TestAsyncContextImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="53008" reportTime="2012-03-30 12:21:42">
    <summary>New test case for Basic Authenticator</summary>
    <description/>
    <commit commitTime="2012-06-04 00:13:20" id="a1c6165"/>
    <fixedFiles>
      <file>test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java</file>
    </fixedFiles>
  </bug>
  <bug id="53354" reportTime="2012-06-03 19:16:25">
    <summary>&lt;filter-mapping&gt; doesn't find the @WebFilter(filterName)</summary>
    <description>As it's not possible to specify the invocation order in a @WebFilter, users are forced to explicitly specify &lt;filter-mapping&gt; in web.xml. This works in combination with a @WebFilter(filterName) in Glassfish and JBoss AS as follows: @WebFilter(filterName="filter1") public class Filter1 implements Filter {} @WebFilter(filterName="filter2") public class Filter2 implements Filter {} with &lt;filter-mapping&gt; &lt;filter-name&gt;filter1&lt;/filter-name&gt; &lt;url-pattern&gt;/url1/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;filter2&lt;/filter-name&gt; &lt;url-pattern&gt;/url2/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; However it fails in Tomcat 7.0.27 with the following confusing exception (the &lt;url-pattern&gt; *is* been set) Caused by: java.lang.IllegalArgumentException: Filter mapping must specify either a &lt;url-pattern&gt; or a &lt;servlet-name&gt; at org.apache.catalina.core.StandardContext.validateFilterMap(StandardContext.java:3009) at org.apache.catalina.core.StandardContext.addFilterMap(StandardContext.java:2968) at org.apache.catalina.deploy.WebXml.configureContext(WebXml.java:1207) at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1294) at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:855) at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:345) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5161) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) ... 7 more</description>
    <commit commitTime="2012-06-04 05:46:40" id="b82c47e"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="53230" reportTime="2012-05-14 17:09:13">
    <summary>Allow custom error mapping when Manager's maxActiveSessions is exceeded</summary>
    <description/>
    <commit commitTime="2012-06-06 05:00:00" id="ea77dfb"/>
    <fixedFiles>
      <file>java/org/apache/catalina/session/ManagerBase.java</file>
      <file>java/org/apache/catalina/session/TooManyActiveSessionsException.java</file>
    </fixedFiles>
  </bug>
  <bug id="53367" reportTime="2012-06-06 01:01:10">
    <summary>Database failure may cause pool to hang</summary>
    <description>during the con.connect(); call in the method protected PooledConnection borrowConnection(long now, PooledConnection con, String username, String password) in ConnectionPool.java There is no counting down the size of the pool. This means, if a connection failure happens here, the pool size remains the same. This means that 'size' will show the pool as full, but in reality the pool is empty</description>
    <commit commitTime="2012-06-06 07:46:40" id="1412935"/>
    <fixedFiles>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java</file>
    </fixedFiles>
  </bug>
  <bug id="53032" reportTime="2012-04-03 21:41:35">
    <summary>Ant Jasper task fails to run when using XML namespaces; no output; no errors</summary>
    <description/>
    <commit commitTime="2012-06-06 07:46:40" id="957d33b"/>
    <fixedFiles>
      <file>java/org/apache/jasper/JspC.java</file>
    </fixedFiles>
  </bug>
  <bug id="53374" reportTime="2012-06-06 20:56:47">
    <summary>DataSourceFactory does not support commitOnReturn property</summary>
    <description>DataSourceFactory does not support commitOnReturn property. DataSourceFactory.ALL_PROPERTIES and DataSourceFactory.parsePoolProperties() omit commitOnReturn property.</description>
    <commit commitTime="2012-06-08 20:53:20" id="0290e57"/>
    <fixedFiles>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="52955" reportTime="2012-03-21 07:55:31">
    <summary>Add a ThreadFactory implementation to the ExecutorService used to deploy applications</summary>
    <description/>
    <commit commitTime="2012-06-09 21:53:20" id="d73c07a"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ContainerBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="53266" reportTime="2012-05-20 14:32:34">
    <summary>ServletContainerInitializer will crash catalina if dependcy is not present.</summary>
    <description>When using a ServletContainerInitializer with a HandlesTypes annotation if any of the classes specified in the HandlesTypes annotation are not available due to a missing jar file catalina will crash with a "java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy". Caused by: java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy at sun.reflect.annotation.AnnotationParser.parseClassArray(AnnotationParser.java:653) at sun.reflect.annotation.AnnotationParser.parseArray(AnnotationParser.java:460) at sun.reflect.annotation.AnnotationParser.parseMemberValue(AnnotationParser.java:286) at sun.reflect.annotation.AnnotationParser.parseAnnotation(AnnotationParser.java:222) at sun.reflect.annotation.AnnotationParser.parseAnnotations2(AnnotationParser.java:69) at sun.reflect.annotation.AnnotationParser.parseAnnotations(AnnotationParser.java:52) at java.lang.Class.initAnnotationsIfNecessary(Class.java:3070) at java.lang.Class.getAnnotation(Class.java:3029) at org.apache.catalina.startup.ContextConfig.processServletContainerInitializers(ContextConfig.java:1546) at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1222) at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:855) at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:345) at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5161) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) ... 7 more Line where exception is thrown: "HandlesTypes ht = sci.getClass().getAnnotation(HandlesTypes.class);"</description>
    <commit commitTime="2012-06-12 05:26:40" id="37e8c59"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="53398" reportTime="2012-06-11 16:39:14">
    <summary>Incorrect tag on XML response when calling 'manager/status?XML=true'</summary>
    <description/>
    <commit commitTime="2012-06-12 05:26:40" id="2bf1556"/>
    <fixedFiles>
      <file>java/org/apache/catalina/manager/StatusTransformer.java</file>
    </fixedFiles>
  </bug>
  <bug id="52954" reportTime="2012-03-21 06:53:16">
    <summary>Allowing for broken android HTTP DIGEST support</summary>
    <description/>
    <commit commitTime="2012-06-12 22:06:40" id="bf41254"/>
    <fixedFiles>
      <file>java/org/apache/catalina/authenticator/DigestAuthenticator.java</file>
    </fixedFiles>
  </bug>
  <bug id="53406" reportTime="2012-06-13 03:51:40">
    <summary>Stack overflow in connector</summary>
    <description>found against trunk on Jun 18, 2012 SEVERE: java.lang.StackOverflowError at org.apache.catalina.core.StandardContextValve.event(StandardContextValve.java:128) at org.apache.catalina.valves.ValveBase.event(ValveBase.java:204) at org.apache.catalina.core.StandardHostValve.event(StandardHostValve.java:223) at org.apache.catalina.valves.ValveBase.event(ValveBase.java:204) at org.apache.catalina.valves.ValveBase.event(ValveBase.java:204) at org.apache.catalina.core.StandardEngineValve.event(StandardEngineValve.java:110) at org.apache.catalina.connector.CoyoteAdapter.event(CoyoteAdapter.java:209) at org.apache.coyote.http11.Http11NioProcessor.event(Http11NioProcessor.java:124) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:569) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1653) at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:730) at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:1008) at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:999) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.longPoll(Http11NioProtocol.java:277) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:596) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1653) at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:730) at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:1008) at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:999) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.longPoll(Http11NioProtocol.java:277) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:596) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1653) at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:730) at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:1008) at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:999) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.longPoll(Http11NioProtocol.java:277) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:596) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1653) at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:730) at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:1008) at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:999) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.longPoll(Http11NioProtocol.java:277) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:596) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1653) at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:730) at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:1008) at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:999) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.longPoll(Http11NioProtocol.java:277) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:596) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1653) at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:730) at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:1008) at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:999) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.longPoll(Http11NioProtocol.java:277) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:596) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1653) at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:730) at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:1008) at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:999) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.longPoll(Http11NioProtocol.java:277) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:596) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1653) at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:730) at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:1008) at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:999) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.longPoll(Http11NioProtocol.java:277) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:596) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1653) at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:730) at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:1008) at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:999) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.longPoll(Http11NioProtocol.java:277) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:596) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1653) at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:730) at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:1008) at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:999) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.longPoll(Http11NioProtocol.java:277) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:596) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1653) at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:730) at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:1008) at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:999) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.longPoll(Http11NioProtocol.java:277) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:596) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1653) at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:730) at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:1008) at org.apache.tomcat.util.net.NioEndpoint$Poller.add(NioEndpoint.java:999) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.longPoll(Http11NioProtocol.java:277) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:596) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)</description>
    <commit commitTime="2012-06-13 23:06:40" id="ce24a10"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/Http11AprProcessor.java</file>
      <file>java/org/apache/coyote/http11/Http11NioProcessor.java</file>
    </fixedFiles>
  </bug>
  <bug id="53450" reportTime="2012-06-21 18:22:10">
    <summary>Deployment of an application with 'ROOT' context hangs forever</summary>
    <description>Hi, The scenario is the following: - I have running Tomcat 7.0.28 - I deploy an application with 'ROOT' context - The deployment hangs forever. When taking a tread dump, the following is suspicious: "localhost-startStop-2" daemon prio=6 tid=0x0000000006607800 nid=0x2560 waiting on condition [0x0000000009ebf000] java.lang.Thread.State: WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for &lt;0x00000007d80f0108&gt; (a java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158) at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:811) at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:842) at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1178) at java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.lock(ReentrantReadWriteLock.java:807) at org.apache.catalina.core.ContainerBase.removeContainerListener(ContainerBase.java:1071) at org.apache.catalina.core.StandardEngine$AccessLogListener.uninstall(StandardEngine.java:463) at org.apache.catalina.core.StandardEngine$AccessLogListener.containerEvent(StandardEngine.java:505) at org.apache.catalina.core.ContainerBase.fireContainerEvent(ContainerBase.java:1431) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:907) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:875) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:618) at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1100) at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1618) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:662) As you can see - A read lock is acquired at org.apache.catalina.core.ContainerBase.fireContainerEvent(ContainerBase.java:1425) - Then every listener is invoked to process the container event - Then AccessLogListener is invoked org.apache.catalina.core.StandardEngine$AccessLogListener.uninstall(StandardEngine.java:463) - The latter causes a call for a write lock org.apache.catalina.core.ContainerBase.removeContainerListener(ContainerBase.java:1071) - Unfortunately in the ReentrantReadWriteLock it is stated that upgrade from read to write lock is not possible "Reentrancy also allows downgrading from the write lock to a read lock, by acquiring the write lock, then the read lock and then releasing the write lock. However, upgrading from a read lock to the write lock is not possible." Regards Violeta Georgieva</description>
    <commit commitTime="2012-06-22 04:20:00" id="91a13d2"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ContainerBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="53421" reportTime="2012-06-15 13:54:17">
    <summary>BeanELResolver's inner class BeanProperty throws incorrect message while PropertyNotFound</summary>
    <description>BeanELResolver's inner class BeanProperty(line: 264) has two methods (write, read) that will throw PropertyNotFoundException. And there current implementation are wrong: throw new PropertyNotFoundException(message(ctx, "propertyNotWritable", new Object[] { type.getName(), descriptor.getName() })); it should use owner.getName() instead of type.getName() because the assembled message will be: Property '[descriptor.getName()]' not readable on type [type.getName()] Here the descriptor.getName() means the property name, type.getName() means the property type's name and the owner.getName() means the property owner - bean's type name. Of course we developer would prefer to receive a message that tells us which bean type doesn't contain such property because this is a PropertyNotFoundException.</description>
    <commit commitTime="2012-06-23 22:00:00" id="8a13b39"/>
    <fixedFiles>
      <file>java/javax/el/BeanELResolver.java</file>
      <file>test/javax/el/TestBeanELResolver.java</file>
    </fixedFiles>
  </bug>
  <bug id="53430" reportTime="2012-06-17 10:16:07">
    <summary>JVM crash at startup if TC-Native version is too old</summary>
    <description/>
    <commit commitTime="2012-06-25 21:13:20" id="553259c"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/Connector.java</file>
      <file>java/org/apache/coyote/AbstractProtocol.java</file>
      <file>java/org/apache/coyote/ProtocolHandler.java</file>
      <file>java/org/apache/coyote/ajp/AjpAprProtocol.java</file>
      <file>java/org/apache/coyote/http11/Http11AprProtocol.java</file>
    </fixedFiles>
  </bug>
  <bug id="53445" reportTime="2012-06-20 19:20:53">
    <summary>Support consistent Jmx object naming strategy across managed resources</summary>
    <description>Tomcat JDBC Pool Versions tested: 7.0.27 &amp; 7.0.28 More of an inquiry. Let me preface by saying we have recently adopted this pool and are very pleased so far. Currently, Jmx managed resources like ConnectionPool and SlowQueryReportJmx are registered under the same domain (i.e. tomcat.jdbc). Some users may want to employ an alternate object naming strategy. With DataSource#createObjectName it is relatively easy to change the ConnectionPool ObjectName (i.e. subclass). However, with SlowQueryReportJmx, due to a static getObjectName method, it requires overriding additional methods which is less desirable. It appears that ConnectionPool has a constant POOL_JMX_TYPE_PREFIX. SlowQueryReportJmx appears to use this but DataSource does not? Is there any reason that the SlowQueryReportJmx#getObjectName method is static? What about registering an object naming strategy with the pool that the various components would use, facilitating consistency? This would mitigate the need to override just to alter the ObjectName. Reference: Spring MBean exporters and their ObjectNamingStrategy interface. Thanks.</description>
    <commit commitTime="2012-06-27 03:46:40" id="4e010fc"/>
    <fixedFiles>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSource.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReportJmx.java</file>
      <file>modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/TestSlowQueryReport.java</file>
    </fixedFiles>
  </bug>
  <bug id="53460" reportTime="2012-06-23 14:02:41">
    <summary>Use error handling when TooManyActiveSessionsException happens in JSP</summary>
    <description/>
    <commit commitTime="2012-06-27 03:46:40" id="294c52b"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Generator.java</file>
      <file>java/org/apache/jasper/runtime/JspFactoryImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="53416" reportTime="2012-06-14 13:37:06">
    <summary>Two datasources with the same name in different web applications results in javax.management.InstanceAlreadyExistsException</summary>
    <description>Deploy two different web applications onto Tomcat. Each web application has a resource that: * uses the Use Tomcat JDBC Connection Pool * has an identical name to the other one &lt;Resource name="jdbc/collision" factory="org.apache.tomcat.jdbc.pool.DataSourceFactory" ... /&gt; When starting the server you get a non fatal error in the logs InstanceAlreadyExistsException. Both applications appear to still work OK ERROR org.apache.tomcat.jdbc.pool.DataSource - Unable to register JDBC pool with JMX javax.management.InstanceAlreadyExistsException: tomcat.jdbc:name="jdbc/soscvuk",context=/,type=ConnectionPool,host=localhost,class=org.apache.tomcat.jdbc.pool. DataSource at com.sun.jmx.mbeanserver.Repository.addMBean(Repository.java:453) ~[na:1.6.0_32] at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.internal_addObject(DefaultMBeanServerInterceptor.java:1484) [na:1.6.0_32] at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:963) [na:1.6.0_32] at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:917) [na:1.6.0_32] at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:312) [na:1.6.0_32] at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:482) [na:1.6.0_32] at org.apache.tomcat.jdbc.pool.DataSource.registerJmx(DataSource.java:135) [tomcat-jdbc.jar:na] at org.apache.tomcat.jdbc.pool.DataSource.preRegister(DataSource.java:102) [tomcat-jdbc.jar:na] at org.apache.tomcat.util.modeler.BaseModelMBean.preRegister(BaseModelMBean.java:1132) [tomcat-coyote.jar:7.0.27] at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.preRegisterInvoke(DefaultMBeanServerInterceptor.java:1010) [na:1.6.0_32] at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:938) [na:1.6.0_32] at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:917) [na:1.6.0_32] at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:312) [na:1.6.0_32] at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:482) [na:1.6.0_32] at org.apache.tomcat.util.modeler.Registry.registerComponent(Registry.java:742) [tomcat-coyote.jar:7.0.27] at org.apache.catalina.core.NamingContextListener.addResource(NamingContextListener.java:1062) [catalina.jar:7.0.27] at org.apache.catalina.core.NamingContextListener.createNamingContext(NamingContextListener.java:671) [catalina.jar:7.0.27] at org.apache.catalina.core.NamingContextListener.lifecycleEvent(NamingContextListener.java:270) [catalina.jar:7.0.27] at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) [catalina.jar:7.0.27] at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90) [catalina.jar:7.0.27] at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5161) [catalina.jar:7.0.27] at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) [catalina.jar:7.0.27] at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:895) [catalina.jar:7.0.27] at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:871) [catalina.jar:7.0.27] at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:615) [catalina.jar:7.0.27] at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:649) [catalina.jar:7.0.27] at org.apache.catalina.startup.HostConfig$DeployDescriptor.run(HostConfig.java:1585) [catalina.jar:7.0.27] at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) [na:1.6.0_32] at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) [na:1.6.0_32] at java.util.concurrent.FutureTask.run(FutureTask.java:138) [na:1.6.0_32] at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [na:1.6.0_32] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [na:1.6.0_32] at java.lang.Thread.run(Thread.java:662) [na:1.6.0_32]</description>
    <commit commitTime="2012-06-28 02:00:00" id="ff9a272"/>
    <fixedFiles>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSource.java</file>
    </fixedFiles>
  </bug>
  <bug id="53467" reportTime="2012-06-25 21:56:46">
    <summary>7.0.28 will no longer accept our jsp filenames</summary>
    <description/>
    <commit commitTime="2012-06-28 02:00:00" id="4de4325"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ApplicationContext.java</file>
      <file>test/org/apache/catalina/core/TestApplicationContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="45995" reportTime="2008-10-13 04:32:38">
    <summary>RFE - MIME type extension not case sensitive</summary>
    <description>Hi, On the dev-tomcat list I described in the topic "Byte Serving and PDFs with the DefaultServlet" an issue that I had with Tomcat to serve PDFs. Analysing the answers I could find that the matter was related to the case of the file extension. Today Tomcat is case sensitive for MIME type extensions. So the solution for me was enter two MIME specifications on the web.xml file. One is for "pdf" and another one for "PDF". This way I would like to ask for and request for enhancement to make Tomcat be able to, due a setup on configuration file, consider or not case for MIME type extensions. Regards, Vitor</description>
    <commit commitTime="2012-07-02 17:06:40" id="f8e173b"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="53498" reportTime="2012-07-02 21:19:45">
    <summary>Atomicity violation bugs because of misusing concurrent collections</summary>
    <description/>
    <commit commitTime="2012-07-05 06:13:20" id="4aef8e3"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ApplicationContext.java</file>
      <file>java/org/apache/catalina/ha/context/ReplicatedContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="53513" reportTime="2012-07-05 21:56:22">
    <summary>Race condition / out of order operation in session replication at node startup</summary>
    <description>My configuration: 2 nodes running Tomcat 7.0.26 Using a custom session manager, which extends the DeltaManager My startInternal() method first calls super.startInternal(), then performs a few additional initializations. I reviewed the code of DeltaManager.startInternal(), and it calls getAllClusterSessions() which in turn calls waitForSendAllSessions(), which requires either getStateTransfered() to return true, or a timeout. So by this, I should be able to trust that as the second node starts, the initial sync up of all session data from the first node has completed prior to the startInternal() method exiting (and thus prior to my initializations). This is, however, not the case! I can confirm this by repeatedly logging the value of findSessions().length during my inializations, and see that number going up! There appears to be a race condition between the processing of the message containing the actual session data &amp; the "transfer complete" message. After tracing this through a little further, I see the stateTransfered is set to true in the handleALL_SESSION_TRANSFERCOMPLETE() callback method. And that callback is being called PRIOR to the session data itself even being received! Here is the debug logging output (slightly scrubbed) which shows this out of order messaging: Jul 5, 2012 4:20:41 PM org.apache.catalina.ha.session.DeltaManager getAllClusterSessions INFO: Manager [wwwtest#], requesting session state from org.apache.catalina.tribes.membership.MemberImpl[...]. This operation will timeout if no session state has been received within 60 seconds. Jul 5, 2012 4:20:41 PM org.apache.catalina.ha.session.DeltaManager messageReceived FINE: Manager [wwwtest#]: Received SessionMessage of type=(SESSION-STATE-TRANSFERED) from [org.apache.catalina.tribes.membership.MemberImpl[...] Jul 5, 2012 4:20:41 PM org.apache.catalina.ha.session.DeltaManager handleALL_SESSION_TRANSFERCOMPLETE FINE: Manager [wwwtest#] received from node [[B@6789b939:4,000] session state transfered. Jul 5, 2012 4:20:41 PM org.apache.catalina.ha.session.DeltaManager messageReceived FINE: Manager [wwwtest#]: Received SessionMessage of type=(ALL-SESSION-DATA) from [org.apache.catalina.tribes.membership.MemberImpl[...] Jul 5, 2012 4:20:41 PM org.apache.catalina.ha.session.DeltaManager handleALL_SESSION_DATA FINE: Manager [wwwtest#]: received session state data</description>
    <commit commitTime="2012-07-09 18:33:20" id="4c03dff"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java</file>
    </fixedFiles>
  </bug>
  <bug id="53523" reportTime="2012-07-09 11:21:38">
    <summary>rollbackOnReturn/commitOnReturn does not work without defaultAutoCommit=false</summary>
    <description>Hi, The properties rollbackOnReturn and commitOnReturn, which are critical for cleaning up connections after they are used and returned to the pool, does not work when the defaultAutoCommit property is not set or when it is set to true. The code segment at ConnectionPool class has this, protected boolean terminateTransaction(PooledConnection con) { try { if (con.getPoolProperties().getDefaultAutoCommit()==Boolean.FALSE) { .... The full logic is wrapped in that first if statement, and as I see, that is not correct. Because, the actual default auto commit value when we don't set this property can either be autoCommit true or false, which depends on the database driver. And also, even when we have a default setting provided, the user has the freedom to change the autoCommit flag to either true or false at the beginning when they get the connection from the pool. So we should not be reading the pool properties in this place, but just check the current live connection's autoCommit value and act accordingly. So I suppose the fix should be to simply remove the outer if statement. Cheers, Anjana.</description>
    <commit commitTime="2012-07-10 02:53:20" id="f54bb45"/>
    <fixedFiles>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java</file>
    </fixedFiles>
  </bug>
  <bug id="53526" reportTime="2012-07-09 20:08:39">
    <summary>.ConnectionPool.terminateTransaction unsafe == check of Boolean</summary>
    <description>The method ConnectionPool.terminateTransaction(PooledConnection con) uses == to check the value of a Boolean, viz: if (con.getPoolProperties().getDefaultAutoCommit()==Boolean.FALSE) { This is not 100% safe - if the user sets the property as follows: String value; // e.g. derived from property file ... setDefaultAutoCommit(new Boolean(value)); then the condition will never be true, even if value="false". Although it is better to use Boolean.valueOf(value), which would not have the same problem, the code ought to work regardless.</description>
    <commit commitTime="2012-07-10 22:20:00" id="eac6366"/>
    <fixedFiles>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java</file>
    </fixedFiles>
  </bug>
  <bug id="53529" reportTime="2012-07-10 11:27:42">
    <summary>Call interrupt() after InterruptedException instead interrupted()</summary>
    <description>In class: org\apache\catalina\tribes\group\GroupChannel.java line 692 org\apache\catalina\tribes\group\interceptors\NonBlockingCoordinator.java line 228 org\apache\catalina\tribes\group\interceptors\TcpPingInterceptor.java line 173 org\apache\catalina\tribes\membership\McastServiceImpl.java line 542 org\apache\juli\AsyncFileHandler.java line 124 line 146 org\apache\tomcat\util\net\AprEndpoint.java line 640 org\apache\tomcat\util\net\NioBlockingSelector.java line 112 line 177 org\apache\tomcat\util\threads\ThreadPoolExecutor.java line 187 Affect 7.0.29 (and previous release) but affect also Tomcat 6.</description>
    <commit commitTime="2012-07-28 07:00:00" id="3ea8285"/>
    <fixedFiles>
      <file>java/org/apache/catalina/tribes/group/GroupChannel.java</file>
      <file>java/org/apache/catalina/tribes/group/interceptors/NonBlockingCoordinator.java</file>
      <file>java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java</file>
      <file>java/org/apache/catalina/tribes/membership/McastServiceImpl.java</file>
      <file>java/org/apache/juli/AsyncFileHandler.java</file>
      <file>java/org/apache/tomcat/util/net/AprEndpoint.java</file>
      <file>java/org/apache/tomcat/util/net/NioBlockingSelector.java</file>
      <file>java/org/apache/tomcat/util/threads/ThreadPoolExecutor.java</file>
    </fixedFiles>
  </bug>
  <bug id="53469" reportTime="2012-06-26 12:45:09">
    <summary>possible bug in Response.normalize(CharChunk cc)</summary>
    <description>The Response.normalize(CharChunk cc) introduced in 7.0.28 introduced a bug. See Bug ID 53062 The URL that is being encoded is: ../../resources/org.apache.wicket.markup.html.WicketEventReference/wicket-event.js?w:lm=1340711670 which causes a IllegalArgumentException in this method java.lang.IllegalArgumentException at org.apache.catalina.connector.Response.normalize(Response.java:1799) at org.apache.catalina.connector.Response.toAbsolute(Response.java:1732) at org.apache.catalina.connector.Response.encodeURL(Response.java:1242) at org.apache.catalina.connector.ResponseFacade.encodeURL(ResponseFacade.java:406) at org.apache.wicket.protocol.http.WebResponse.encodeURL(WebResponse.java:149) at org.apache.wicket.protocol.http.request.WebRequestCodingStrategy.encode(WebRequestCodingStrategy.java:387) Running the same application in tomcat 7.0.27 and 6.0.18 works without issue</description>
    <commit commitTime="2012-07-30 03:26:40" id="9a80d06"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/Response.java</file>
      <file>test/org/apache/catalina/connector/TestResponse.java</file>
    </fixedFiles>
  </bug>
  <bug id="53535" reportTime="2012-07-11 10:29:10">
    <summary>Out of memory while performing ContextConfig.webConfig</summary>
    <description/>
    <commit commitTime="2012-07-30 06:13:20" id="7db08d3"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="53606" reportTime="2012-07-26 16:15:05">
    <summary>NullPointerException in TcpPingInterceptor</summary>
    <description>start(int) method initializes failureDetector (resp. staticMembers) only if TcpFailureDetector (resp. StaticMembershipInterceptor) was found in channel interceptors stack. Without TcpFailureDetector (resp. StaticMembershipInterceptor), futur calls to sendPing() will fail because failureDetector (resp. staticMembers) wasn't initialized at least to new WeakReference&lt;StaticMembershipInterceptor&gt;(null). Fix: v1) initializes weak references containers: Replace: WeakReference&lt;TcpFailureDetector&gt; failureDetector = null; WeakReference&lt;StaticMembershipInterceptor&gt; staticMembers = null; for: WeakReference&lt;TcpFailureDetector&gt; failureDetector = new WeakReference&lt;TcpFailureDetector&gt;(); WeakReference&lt;StaticMembershipInterceptor&gt; staticMembers = new WeakReference&lt;StaticMembershipInterceptor&gt;(); v2) checks field before dereferencing it: sendPing becomes: protected void sendPing() { if (failureDetector!=null &amp;&amp; failureDetector.get()!=null) { //we have a reference to the failure detector //piggy back on that dude failureDetector.get().checkMembers(true); }else { if (staticOnly &amp;&amp; staticMembers!=null &amp;&amp; staticMembers.get()!=null) { sendPingMessage(staticMembers.get().getMembers()); } else { sendPingMessage(getMembers()); } } } affect also tomcat 6 regards fred arnoud</description>
    <commit commitTime="2012-07-30 06:13:20" id="eb9f94e"/>
    <fixedFiles>
      <file>java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="53607" reportTime="2012-07-26 18:33:54">
    <summary>No message set for PING: TcpPingInterceptor fail with NullPointerException in ChannelData.getDataPackageLength()</summary>
    <description>I added data.setMessage(new XByteBuffer(TCP_PING_DATA, false)); to TcpPingInterceptor send ping message function by: protected void sendPingMessage(Member[] members) { if ( members == null || members.length == 0 ) return; ChannelData data = new ChannelData(true);//generates a unique Id data.setAddress(getLocalMember(false)); data.setTimestamp(System.currentTimeMillis()); data.setOptions(getOptionFlag()); data.setMessage(new XByteBuffer(TCP_PING_DATA, false)); try { super.sendMessage(members, data, null); }catch (ChannelException x) { log.warn("Unable to send TCP ping.",x); } } error also for Tomcat 6 regards fred</description>
    <commit commitTime="2012-07-31 15:33:20" id="57b56f2"/>
    <fixedFiles>
      <file>java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java</file>
    </fixedFiles>
  </bug>
  <bug id="53481" reportTime="2012-06-28 14:27:30">
    <summary>Support SSL_OP_CIPHER_SERVER_PREFERENCE / SSLHonorCipherOrder</summary>
    <description/>
    <commit commitTime="2012-08-10 00:33:20" id="82e5dce"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/Http11AprProtocol.java</file>
      <file>java/org/apache/tomcat/util/net/AprEndpoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="53545" reportTime="2012-07-13 07:53:20">
    <summary>jsp:forward action to static resources causes IllegalStateException when inside classic custom tag</summary>
    <description/>
    <commit commitTime="2012-08-11 18:13:20" id="5a6b27b"/>
    <fixedFiles>
      <file>java/org/apache/jasper/runtime/PageContextImpl.java</file>
      <file>test/org/apache/jasper/runtime/TestPageContextImpl.java</file>
      <file>test/org/apache/tomcat/unittest/tags/Bug53545.java</file>
    </fixedFiles>
  </bug>
  <bug id="53574" reportTime="2012-07-20 09:35:23">
    <summary>metadata-complete="true" and servlet defined as jsp not working</summary>
    <description>We have a servlet defined as &lt;servlet&gt; &lt;servlet-name&gt;VersionInfoServlet&lt;/servlet-name&gt; &lt;jsp-file&gt;/WEB-INF/svnrevision.jsp&lt;/jsp-file&gt; &lt;/servlet&gt; and mapped as &lt;servlet-mapping&gt; &lt;servlet-name&gt;VersionInfoServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/svnrevision&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; It worked fine. Then we changed metadata-complete to "true", and from now on we receive INFO: Marking servlet VersionInfoServlet as unavailable lip 20, 2012 11:05:36 AM org.apache.catalina.core.StandardWrapperValve invoke SEVERE: Allocate exception for servlet VersionInfoServlet javax.servlet.ServletException: No servlet class has been specified for servlet VersionInfoServlet at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1130) at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:857) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:136) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:168) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407) at org.apache.coyote.ajp.AjpNioProcessor.process(AjpNioProcessor.java:184) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:585) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1653) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) at java.lang.Thread.run(Thread.java:722)</description>
    <commit commitTime="2012-08-12 02:33:20" id="f9b0182"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
      <file>test/org/apache/catalina/startup/TestContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="53700" reportTime="2012-08-12 11:17:07">
    <summary>InternalNioOutputBuffer unused (debug?) code</summary>
    <description>The class InternalNioOutputBuffer includes the field: int total = 0; This is currently defined at line 227, which is between the Javadoc and method body to which the Javadoc applies, i.e. private synchronized int writeToSocket. This invalidates the method Javadoc. The field is used to keep a running total of bytes written by the method; however the field is not actually referenced - the System.out.println statement is commented out. The field and associated code shcould probably be deleted. If the field is to be kept, it should be private, and it should probably be changed to long, and of course should be moved so it does not invalidate the method Javadoc.</description>
    <commit commitTime="2012-08-15 02:46:40" id="a2ca744"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/InternalNioOutputBuffer.java</file>
    </fixedFiles>
  </bug>
  <bug id="53701" reportTime="2012-08-12 12:25:04">
    <summary>Javadoc fixes</summary>
    <description/>
    <commit commitTime="2012-08-15 02:46:40" id="2a3b42d"/>
    <fixedFiles>
      <file>java/javax/servlet/ServletInputStream.java</file>
      <file>java/javax/servlet/ServletOutputStream.java</file>
      <file>java/javax/servlet/jsp/JspException.java</file>
      <file>java/org/apache/catalina/Executor.java</file>
      <file>java/org/apache/catalina/Manager.java</file>
      <file>java/org/apache/catalina/tribes/ErrorHandler.java</file>
      <file>java/org/apache/naming/SelectorContext.java</file>
      <file>java/org/apache/tomcat/util/http/fileupload/FileItem.java</file>
      <file>webapps/examples/WEB-INF/classes/compressionFilters/CompressionResponseStream.java</file>
    </fixedFiles>
  </bug>
  <bug id="53624" reportTime="2012-07-30 19:07:39">
    <summary>sendRedirect doesn't work after a dispatch through the AsyncContext</summary>
    <description/>
    <commit commitTime="2012-08-15 05:33:20" id="e37b01e"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ApplicationDispatcher.java</file>
    </fixedFiles>
  </bug>
  <bug id="53654" reportTime="2012-08-05 14:47:43">
    <summary>JSP file is always recompiled for using file based TLD URL</summary>
    <description>Now, in Jasper codes, it only supports jar URL and relative URL, that may be enough for common web applications. While, it is possible that the third-party uses other protocol URL, like file: protocol based URL. So, the JSP files will be always recompiled for each access for the target page. The codes are located in Compiler.isOutDated() method. Is it possible to provide more generic handlering for the URL ?</description>
    <commit commitTime="2012-08-16 01:00:00" id="1efc23d"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Compiler.java</file>
    </fixedFiles>
  </bug>
  <bug id="53697" reportTime="2012-08-11 08:33:54">
    <summary>java.lang.NullPointerException at org.apache.coyote.http11.Http11AprProcessor.actionInternal(Http11AprProcessor.java:277)</summary>
    <description>I hit tomcat with ~20 different urls in ~2 seconds, test some functionality, wait ~3 minutes, then do it again and I always get this exception and then I get (intermitent) connection interrupted messages in the browser. Here's the full trace: Aug 10, 2012 6:33:14 PM org.apache.catalina.connector.CoyoteAdapter event SEVERE: null Aug 10, 2012 6:33:14 PM org.apache.catalina.connector.CoyoteAdapter event java.lang.NullPointerException at org.apache.coyote.http11.Http11AprProcessor.actionInternal(Http11AprProcessor.java:277) at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:846) at org.apache.coyote.Response.action(Response.java:172) at org.apache.catalina.connector.CoyoteAdapter.event(CoyoteAdapter.java:229) at org.apache.coyote.http11.Http11AprProcessor.event(Http11AprProcessor.java:133) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:581) at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:1770) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) at java.lang.Thread.run(Thread.java:722) Aug 10, 2012 6:33:14 PM org.apache.coyote.http11.Http11AprProcessor event SEVERE: Error processing request java.lang.NullPointerException at org.apache.coyote.http11.Http11AprProcessor.actionInternal(Http11AprProcessor.java:277) at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:846) at org.apache.coyote.Request.action(Request.java:346) at org.apache.catalina.connector.Request.getRemoteAddr(Request.java:1281) at org.apache.catalina.connector.Request.getRemoteHost(Request.java:1296) at org.apache.catalina.valves.AccessLogValve$HostElement.addElement(AccessLogValve.java:1327) at org.apache.catalina.valves.AccessLogValve.log(AccessLogValve.java:953) at org.apache.catalina.core.AccessLogAdapter.log(AccessLogAdapter.java:51) at org.apache.catalina.core.ContainerBase.logAccess(ContainerBase.java:1263) at org.apache.catalina.core.ContainerBase.logAccess(ContainerBase.java:1270) at org.apache.catalina.connector.CoyoteAdapter.event(CoyoteAdapter.java:250) at org.apache.coyote.http11.Http11AprProcessor.event(Http11AprProcessor.java:133) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:581) at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:1770) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) at java.lang.Thread.run(Thread.java:722) Additional information: - hp Proliant DL360 with two 3ghz processors - CentOS 6.3 - One app runs websockets under bleading edge Atmosphere and Grails - the 20 urls come from chrome and firefox, simulatneously</description>
    <commit commitTime="2012-08-16 06:33:20" id="6c13431"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/AbstractHttp11Processor.java</file>
      <file>java/org/apache/coyote/http11/Http11NioProcessor.java</file>
    </fixedFiles>
  </bug>
  <bug id="53758" reportTime="2012-08-21 19:59:03">
    <summary>Dynamic Filter Registration mapping logic inverted</summary>
    <description>In the class org.apache.catalina.core.ApplicationFilterRegistration, the methods addMappingForServletNames and addMappingForUrlPatterns have inverted logic on how to register the filter to the context. If the parameter isMatchAfter is passed as true, the filter is placed in the context using the addFilterMapBefore method. if (isMatchAfter) { context.addFilterMapBefore(filterMap); } else { context.addFilterMap(filterMap); } The logic should ultimate be (in both methods): if (!isMatchAfter) { context.addFilterMapBefore(filterMap); } else { context.addFilterMap(filterMap); } or if (isMatchAfter) { context.addFilterMap(filterMap); } else { context.addFilterMapBefore(filterMap); } svn rev on trunk is 1375614</description>
    <commit commitTime="2012-08-27 06:26:40" id="8f169e4"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ApplicationFilterRegistration.java</file>
    </fixedFiles>
  </bug>
  <bug id="53783" reportTime="2012-08-27 13:32:16">
    <summary>Static resources and jsp files under WEB-INF/lib/*.jar!/META-INF/resources are not found</summary>
    <description/>
    <commit commitTime="2012-08-28 01:53:20" id="6b934d8"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="42181" reportTime="2007-04-21 22:48:21">
    <summary>ArrayIndexOutOfBoundsException in parseChunkHeader</summary>
    <description>Apr 22, 2007 11:53:32 AM org.apache.coyote.http11.Http11Processor process SEVERE: Error finishing request java.lang.ArrayIndexOutOfBoundsException: -28 at org.apache.coyote.http11.filters.ChunkedInputFilter.parseChunkHeader(ChunkedInputFilter.java:256) at org.apache.coyote.http11.filters.ChunkedInputFilter.doRead(ChunkedInputFilter.java:129) at org.apache.coyote.http11.filters.ChunkedInputFilter.end(ChunkedInputFilter.java:179) at org.apache.coyote.http11.InternalInputBuffer.endRequest(InternalInputBuffer.java:368) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:894) at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:664) at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527) at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684) at java.lang.Thread.run(Thread.java:595)</description>
    <commit commitTime="2012-08-28 07:26:40" id="cd05aa1"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/filters/ChunkedInputFilter.java</file>
      <file>java/org/apache/tomcat/util/buf/HexUtils.java</file>
      <file>test/org/apache/tomcat/util/buf/TestHexUtils.java</file>
    </fixedFiles>
  </bug>
  <bug id="53793" reportTime="2012-08-28 21:50:21">
    <summary>Change webapp links in Manager to point to /appname/ instead of /appname</summary>
    <description>The first column of the table that lists Web Applications in Tomcat Manager webapp contains links to those applications, e.g. &lt;a href="/examples"&gt;/examples&lt;/a&gt; When the link is clicked and browser navigates to "/examples", it results in 302 redirect to "/examples/". It would be better to change that link to point directly to "/examples/". &lt;a href="/examples/"&gt;/examples&lt;/a&gt; I am changing the link address only, but not the text on it. That is because the "Path" of the web application displayed in that column (and used in Manager commands elsewhere) does not have the additional '/'.</description>
    <commit commitTime="2012-08-29 05:40:00" id="fcc3d65"/>
    <fixedFiles>
      <file>java/org/apache/catalina/manager/HTMLManagerServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="53801" reportTime="2012-08-30 09:14:42">
    <summary>Nondeterministic behaviour of security constraints</summary>
    <description/>
    <commit commitTime="2012-08-31 07:40:00" id="95d7a0f"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/RealmBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="53713" reportTime="2012-08-14 06:28:58">
    <summary>Performance tuning solution for JspReader</summary>
    <description/>
    <commit commitTime="2012-09-06 05:20:00" id="5fccf68"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/JspReader.java</file>
      <file>java/org/apache/jasper/compiler/Mark.java</file>
    </fixedFiles>
  </bug>
  <bug id="52777" reportTime="2012-02-27 03:30:27">
    <summary>Automatically shut down old versions in parallel deployment</summary>
    <description>Under parallel deployment, when an older version in an application has zero sessions, shut it down automatically to release tomcat and JVM resources. Christopher Schultz suggested these approaches might be possible (on the Tomcat user list): 1. Modify the parallel deployment code to register an MBean NotificationListener that filters for useful events (such as expiring session notifications on the outgoing webapp). 2. When the listener receives a notification, check the current state (e.g. session count=0; or, I suppose you could make this a part of your filter in step #1). If session count = 0, start a new thread that stops the outgoing webapp and de-registers the listener. Or. 1. Install a SessionEventListener that counts-down the sessions (you'll have to get the count from JMX, I suppose) until they equal 0, then starts a new thread that ... etc. Or. 1. Install a Timer thread that polls at intervals (1 minute?) to see if all the sessions are dead and then starts a thread ... etc. The first idea seems the cleanest, though Tomcat might not actually fire MBean events for things like session count changing.</description>
    <commit commitTime="2012-09-09 05:33:20" id="97cefcc"/>
    <fixedFiles>
      <file>java/org/apache/catalina/Host.java</file>
      <file>java/org/apache/catalina/core/StandardHost.java</file>
      <file>java/org/apache/catalina/startup/HostConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="53863" reportTime="2012-09-13 03:44:28">
    <summary>Unable to override default servlet when using Tomcat in embedded mode</summary>
    <description>An implementation of ServletContainerInitializer can't add a mapping to "/" because the default servlet is loaded first, as first reported in 51278: public final class SampleServletContainerInitializer implements ServletContainerInitializer { public void onStartup(final Set&lt;Class&lt;?&gt;&gt; c, final ServletContext ctx) throws ServletException { final XmlWebApplicationContext appCtx = new XmlWebApplicationContext(); appCtx.setConfigLocation("/WEB-INF/DispatcherServlet-servlet.xml"); final ServletRegistration.Dynamic dispatcher = ctx.addServlet("DispatcherServlet", new DispatcherServlet(appCtx)); dispatcher.setLoadOnStartup(1); final Set&lt;String&gt; conflictSet = dispatcher.addMapping("/"); for (final String conflict : conflictSet) out.println(conflict); // prints "/" } } A test case follows attached.</description>
    <commit commitTime="2012-09-17 02:26:40" id="7f6f99e"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/Tomcat.java</file>
    </fixedFiles>
  </bug>
  <bug id="53986" reportTime="2012-10-09 18:40:08">
    <summary>Comment end tag preceded directly by a dash causes JSP fail compilation</summary>
    <description/>
    <commit commitTime="2012-10-10 22:40:00" id="88d8dd5"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/JspReader.java</file>
      <file>test/org/apache/jasper/compiler/TestJspReader.java</file>
    </fixedFiles>
  </bug>
  <bug id="53993" reportTime="2012-10-11 19:56:38">
    <summary>NPE in AccessLogValve</summary>
    <description>During a load test of tomcat 7.0.30, we occasionally see NPEs from the AccessLogValve. Some of the requests that are being executed as part of the load test call HttpSession.invalidate. I mention this because the code in question appears to be susceptible to multithreaded manipulation of the session. I think the fix should be as simple as a check for null on the return value of request.getSessionInternal. Of course, our access log pattern includes logging the session id. java.lang.NullPointerException org.apache.catalina.valves.AccessLogValve$SessionIdElement.addElement(AccessLogValve.java:1733) org.apache.catalina.valves.AccessLogValve.log(AccessLogValve.java:955) org.apache.catalina.core.AccessLogAdapter.log(AccessLogAdapter.java:51) org.apache.catalina.core.StandardEngine.logAccess(StandardEngine.java:332) org.apache.catalina.core.ContainerBase.logAccess(ContainerBase.java:1270) org.apache.catalina.core.ContainerBase.logAccess(ContainerBase.java:1270) org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:441) org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1002) org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:585) org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:312) java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) java.lang.Thread.run(Thread.java:722) existing code for convenience: protected static class SessionIdElement implements AccessLogElement { @Override public void addElement(StringBuilder buf, Date date, Request request, Response response, long time) { if (request != null) { if (request.getSession(false) != null) { buf.append(request.getSessionInternal(false) // LINE 1733 .getIdInternal()); } else { buf.append('-'); } } else { buf.append('-'); } } } possible fix: ... if (request.getSession(false) != null) { Session internalSession = request.getSessionInternal(false); if (internalSession != null) { buf.append(internalSession.getIdInternal()); } else { buf.append('-'); } } else { buf.append('-'); }</description>
    <commit commitTime="2012-10-13 22:53:20" id="39c4270"/>
    <fixedFiles>
      <file>java/org/apache/catalina/valves/AccessLogValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="54010" reportTime="2012-10-16 02:20:47">
    <summary>Suggestion for code improvement (avoiding potential bug)</summary>
    <description>In connectors/jk/java/org/apache/jk/common/HandlerRequest.java coyote.Request's schemeMB is assigned in 2 places. 1st place: 400 boolean isSSL = msg.getByte() != 0; 401 if( isSSL ) { 402 // XXX req.setSecure( true ); 403 req.scheme().setString("https"); 404 } 2nd place: 518 case AjpConstants.SC_A_SSL_CERT : 519 req.scheme().setString( "https" ); and similar assignments for SC_A_SSL_CIPHER and SC_A_SSL_SESSION cases below. It seems they do not make sense because the packet's 8-bit field is designated for telling whether it's SSL or not. So the 1st place is enough. Adding the 2nd place may pose potential bug in that a packet with the 8-bit SSL field being 0 and suffixes of SC_A_SSL_* key-value pairs can later incorrect trigger a wrong redirection message pointing to a https location. A simple correction is to honor the 8-bit SSL-field in packet and delete the 3 lines of 2nd place assigning "https". Even though the chances of such spurious packet is low, but it's best we can have threat-free, semantic-correct tomcat code. The same lines of code remain in 6.0 and 7.0. But maybe I misunderstand the code, in which case please kindly point out. Thanks.</description>
    <commit commitTime="2012-10-23 07:53:20" id="9f04094"/>
    <fixedFiles>
      <file>java/org/apache/coyote/ajp/AbstractAjpProcessor.java</file>
    </fixedFiles>
  </bug>
  <bug id="54012" reportTime="2012-10-16 09:01:56">
    <summary>No "pageContext" in tag files' generated java code when using code generation by JSTL tagplugin "Set"</summary>
    <description/>
    <commit commitTime="2012-10-25 21:00:00" id="a0ff3f9"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Compiler.java</file>
      <file>java/org/apache/jasper/compiler/PageInfo.java</file>
      <file>java/org/apache/jasper/compiler/TagPluginManager.java</file>
      <file>java/org/apache/jasper/compiler/tagplugin/TagPluginContext.java</file>
      <file>java/org/apache/jasper/tagplugins/jstl/core/Set.java</file>
    </fixedFiles>
  </bug>
  <bug id="54017" reportTime="2012-10-17 08:47:42">
    <summary>new String instance is generated for constant string in Generator.convertString</summary>
    <description>If the target class is "Object.class", the generator generates "new String(" + quoted + ")"; as attribute value for Tag Handler. How about using quoted directly same as when the target class is "Object.class"? Creating a String instance will cause some overhead from memory allocation and hash code recaluation when it is used as a key on HashMap. Here is the detail code, /* * @param c The target class to which to coerce the given string @param * s The string value @param attrName The name of the attribute whose * value is being supplied @param propEditorClass The property editor * for the given attribute @param isNamedAttribute true if the given * attribute is a named attribute (that is, specified using the * jsp:attribute standard action), and false otherwise */ private String convertString(Class&lt;?&gt; c, String s, String attrName, Class&lt;?&gt; propEditorClass, boolean isNamedAttribute) { String quoted = s; if (!isNamedAttribute) { quoted = quote(s); } if (propEditorClass != null) { String className = c.getCanonicalName(); return "(" + className + ")org.apache.jasper.runtime.JspRuntimeLibrary.getValueFromBeanInfoPropertyEditor(" + className + ".class, \"" + attrName + "\", " + quoted + ", " + propEditorClass.getCanonicalName() + ".class)"; } else if (c == String.class) { return quoted; } else if (c == boolean.class) { return JspUtil.coerceToPrimitiveBoolean(s, isNamedAttribute); } else if (c == Boolean.class) { return JspUtil.coerceToBoolean(s, isNamedAttribute); } else if (c == byte.class) { return JspUtil.coerceToPrimitiveByte(s, isNamedAttribute); } else if (c == Byte.class) { return JspUtil.coerceToByte(s, isNamedAttribute); } else if (c == char.class) { return JspUtil.coerceToChar(s, isNamedAttribute); } else if (c == Character.class) { return JspUtil.coerceToCharacter(s, isNamedAttribute); } else if (c == double.class) { return JspUtil.coerceToPrimitiveDouble(s, isNamedAttribute); } else if (c == Double.class) { return JspUtil.coerceToDouble(s, isNamedAttribute); } else if (c == float.class) { return JspUtil.coerceToPrimitiveFloat(s, isNamedAttribute); } else if (c == Float.class) { return JspUtil.coerceToFloat(s, isNamedAttribute); } else if (c == int.class) { return JspUtil.coerceToInt(s, isNamedAttribute); } else if (c == Integer.class) { return JspUtil.coerceToInteger(s, isNamedAttribute); } else if (c == short.class) { return JspUtil.coerceToPrimitiveShort(s, isNamedAttribute); } else if (c == Short.class) { return JspUtil.coerceToShort(s, isNamedAttribute); } else if (c == long.class) { return JspUtil.coerceToPrimitiveLong(s, isNamedAttribute); } else if (c == Long.class) { return JspUtil.coerceToLong(s, isNamedAttribute); } else if (c == Object.class) { return "new String(" + quoted + ")"; } else { String className = c.getCanonicalName(); return "(" + className + ")org.apache.jasper.runtime.JspRuntimeLibrary.getValueFromPropertyEditorManager(" + className + ".class, \"" + attrName + "\", " + quoted + ")"; } }</description>
    <commit commitTime="2012-10-25 21:00:00" id="095a403"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Generator.java</file>
    </fixedFiles>
  </bug>
  <bug id="54045" reportTime="2012-10-23 16:03:53">
    <summary>ReplicatedMap don't like TcpFailureDetector in static configuration</summary>
    <description>Tribes stack using: * TcpPingInterceptor * TcpFailureDetector * MessageDispatchInterceptor * StaticMembershipInterceptor Do not work well in static cluster. First side (ie one thread): * call to TcpFailureDetector.heartbeat() * call to checkMembers(false) * call to performBasicCheck() in synchronized(membership) * in performBasicCheck, for a missing static node: * add "missing" member to membership with membership.memberAlive(m) * HERE THE SECOND THREAD HAVE SOME TIME TO WORK * check it with memberAlive(m) * remove it since if it doesn't exist Second side (ie another thread): * some call to channel.getMembers() like what the done by AbstractReplicatedMap * this call will call the TcpFailureDetector.getMembers() * this one could return a wrong value since it can contains unavailable nodes Note: * synchronize on membership isn't use by TcpFailureDetector in getMember(), getMembers(), hasMembers(), neither in Membership equivalent method (maybe because it's too heavy to lock every thread while the TcpFailureDetector check if node are alive). It must not be an issue for AbstractReplicatedMap since with or without TcpFailureDetector a node could disapear while replicated map try to use it. But ReplicatedMap use always Channel.SEND_OPTIONS_DEFAULT where the value is Channel.SEND_OPTIONS_USE_ACK. So a message sent to a missing node will fail with an exception. Personnaly I override TcpFailureDetector.heartbeat() to avoid performBasicCheck() if I use a static configuration (TcpPingInterceptor call performForcedCheck()). But this doesn't fix ReplicatedMap issue. Better fix could avoid adding missing member to membership list: * Add a method like memberAlive(MemberImpl) to Membership without side effect (add the member) * in TcpFailureDetector.performBasicCheck(): check this new method before adding the node This doesn't fix the AbstractReplicatedMap issue which work always with acknoledge from other nodes. Same code for Tomcat 6. best regards F.Arnoud</description>
    <commit commitTime="2012-10-25 21:00:00" id="d2b41b5"/>
    <fixedFiles>
      <file>java/org/apache/catalina/tribes/group/interceptors/TcpFailureDetector.java</file>
    </fixedFiles>
  </bug>
  <bug id="54022" reportTime="2012-10-17 18:18:23">
    <summary>CometEvent.END event is not sent on a suspended socket disconnect when running with Tomcat Native (tcnative-1.dll) on Windows Vista / Windows Server 2008 or newer.</summary>
    <description/>
    <commit commitTime="2012-10-26 05:20:00" id="874c332"/>
    <fixedFiles>
      <file>java/org/apache/coyote/AbstractProtocol.java</file>
    </fixedFiles>
  </bug>
  <bug id="54054" reportTime="2012-10-26 07:24:33">
    <summary>2 CGIServlet's with different Parameter passShellEnvironment</summary>
    <description/>
    <commit commitTime="2012-10-27 03:33:20" id="05fe671"/>
    <fixedFiles>
      <file>java/org/apache/catalina/servlets/CGIServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="54067" reportTime="2012-10-29 17:23:09">
    <summary>Upgrade Response with Transfer-Encoding: chunked invalid</summary>
    <description/>
    <commit commitTime="2012-10-30 03:46:40" id="9308b3f"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/AbstractHttp11Processor.java</file>
    </fixedFiles>
  </bug>
  <bug id="54076" reportTime="2012-10-30 13:49:27">
    <summary>SPNEGO authenticator's stateless-ness incompatible with stateful clients</summary>
    <description/>
    <commit commitTime="2012-11-04 06:00:00" id="9f65875"/>
    <fixedFiles>
      <file>java/org/apache/catalina/authenticator/SpnegoAuthenticator.java</file>
    </fixedFiles>
  </bug>
  <bug id="54096" reportTime="2012-11-04 18:43:14">
    <summary>env-entry rejects legal types</summary>
    <description>In servlet 3.0 the type in an env-entry can be any type which has a public constructor taking a single String (or character) as an argument. Tomcat only accepts a fixed list of types (see NamingContextListener from line 813). This is legal in web.xml but not accepted by tomcat: &lt;env-entry&gt; &lt;env-entry-name&gt;location&lt;/env-entry-name&gt; &lt;env-entry-type&gt;java.io.File&lt;/env-entry-type&gt; &lt;env-entry-value&gt;/var/lib/tomcat&lt;/env-entry-value&gt; &lt;/env-entry&gt;</description>
    <commit commitTime="2012-11-10 03:40:00" id="48314f9"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/NamingContextListener.java</file>
      <file>test/org/apache/catalina/core/TestNamingContextListener.java</file>
    </fixedFiles>
  </bug>
  <bug id="54115" reportTime="2012-11-07 17:10:11">
    <summary>Minor enhancements to HttpClient test helper class</summary>
    <description/>
    <commit commitTime="2012-11-12 08:26:40" id="8f53c89"/>
    <fixedFiles>
      <file>test/org/apache/catalina/startup/SimpleHttpClient.java</file>
    </fixedFiles>
  </bug>
  <bug id="54123" reportTime="2012-11-09 10:30:48">
    <summary>servlet 3.0 spec violation in async timeout processing</summary>
    <description/>
    <commit commitTime="2012-11-12 08:26:40" id="14637ef"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/AsyncContextImpl.java</file>
      <file>java/org/apache/catalina/core/StandardHostValve.java</file>
      <file>java/org/apache/coyote/AsyncStateMachine.java</file>
      <file>test/org/apache/catalina/core/TestAsyncContextImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="54124" reportTime="2012-11-09 10:42:29">
    <summary>wrong javax.servlet.async.request_uri information and javax.servlet.async.path_info is missing</summary>
    <description>As it is clearly shown that org.apache.catalina.core.AsyncContextImpl.dispatch(ServletContext, String) @Override public void dispatch(ServletContext context, String path) { if (log.isDebugEnabled()) { logDebug("dispatch "); } check(); if (request.getAttribute(ASYNC_REQUEST_URI)==null) { request.setAttribute(ASYNC_REQUEST_URI, request.getRequestURI()+"?"+request.getQueryString()); request.setAttribute(ASYNC_CONTEXT_PATH, request.getContextPath()); request.setAttribute(ASYNC_SERVLET_PATH, request.getServletPath()); request.setAttribute(ASYNC_QUERY_STRING, request.getQueryString()); } .... } the value of ASYNC_REQUEST_URI is not the same as request.getRequestURI(). They must be equal to each other as defined by Servlet 3.0, 9.7.2 Dispatched Request Parameters. And ASYNC_PATH_INFO is missing.</description>
    <commit commitTime="2012-11-12 08:26:40" id="76f84eb"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/AsyncContextImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="54087" reportTime="2012-11-01 16:10:42">
    <summary>HTTP Connector incorrectly throws Exception on Invalid If-Modified-Since Header</summary>
    <description/>
    <commit commitTime="2012-11-12 19:33:20" id="810732d"/>
    <fixedFiles>
      <file>java/javax/servlet/http/HttpServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="54141" reportTime="2012-11-13 01:55:35">
    <summary>Configuration does not allow Realms to be nested more than 2 levels deep</summary>
    <description/>
    <commit commitTime="2012-11-13 23:20:00" id="2ed3d7d"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/RealmRuleSet.java</file>
    </fixedFiles>
  </bug>
  <bug id="54143" reportTime="2012-11-13 22:39:44">
    <summary>Add display of PermGen memory pool usage to the Status page of the Manager webapp</summary>
    <description/>
    <commit commitTime="2012-11-14 07:40:00" id="9998c80"/>
    <fixedFiles>
      <file>java/org/apache/catalina/manager/StatusTransformer.java</file>
    </fixedFiles>
  </bug>
  <bug id="54144" reportTime="2012-11-14 08:38:29">
    <summary>Processing of java.io.Reader in "Out" tagplugin</summary>
    <description/>
    <commit commitTime="2012-11-17 07:53:20" id="7c4a841"/>
    <fixedFiles>
      <file>java/org/apache/jasper/tagplugins/jstl/Util.java</file>
      <file>java/org/apache/jasper/tagplugins/jstl/core/Out.java</file>
      <file>test/org/apache/jasper/tagplugins/jstl/core/TestOut.java</file>
    </fixedFiles>
  </bug>
  <bug id="54198" reportTime="2012-11-23 22:33:12">
    <summary>Improve HttpServletResponse#sendError(int) JavaDoc description</summary>
    <description>This methods calls sendError(int, null) internally. Thus generating a HTML page without a message. This is not mentioned in the docs. One could assume that the response will be empty. One could duplicate the first paragraph of the sendError(int,String) method and alter it to "The server defaults to creating the response to look like an HTML-formatted server error page with any specific message, setting the content type to "text/html",..." further "If an error-page declaration has been made for the web application corresponding to the status code passed in, it will be served back." (Might need improvement in this case, I am not a native speaker). Moreover, I would add "This method is effectively the same as calling sendError(int, null)". Plus add @see #sendError(int,String). Though the JavaDocs seems to be a verbatim copy of Oracle's Servlet API, it does not reveal this information explicitly. Should I provide a patch if that doc is available in svn.apache.org?</description>
    <commit commitTime="2012-11-26 19:40:00" id="3c13e90"/>
    <fixedFiles>
      <file>java/javax/servlet/http/HttpServletResponse.java</file>
    </fixedFiles>
  </bug>
  <bug id="54207" reportTime="2012-11-26 02:10:22">
    <summary>javaURLContextFactory javadoc refers to defunct package names in initial context properties</summary>
    <description>Javadoc for org.apache.naming.java.javaURLContextFactory: /** * Context factory for the "java:" namespace. * &lt;p&gt; * &lt;b&gt;Important note&lt;/b&gt; : This factory MUST be associated with the "java" URL * prefix, which can be done by either : * &lt;ul&gt; * &lt;li&gt;Adding a * java.naming.factory.url.pkgs=org.apache.catalina.util.naming property * to the JNDI properties file&lt;/li&gt; * &lt;li&gt;Setting an environment variable named Context.URL_PKG_PREFIXES with * its value including the org.apache.catalina.util.naming package name. * More detail about this can be found in the JNDI documentation : * {@link javax.naming.spi.NamingManager#getURLContext(java.lang.String, java.util.Hashtable)}.&lt;/li&gt; * &lt;/ul&gt; * * @author Remy Maucherat * @version $Id$ */ org.apache.catalina.util.naming is a very old package name. The correct name for both TC6 and TC7 is org.apache.naming .</description>
    <commit commitTime="2012-11-26 19:40:00" id="d6b4740"/>
    <fixedFiles>
      <file>java/org/apache/naming/java/javaURLContextFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="54217" reportTime="2012-11-28 10:35:43">
    <summary>JDBC connection pool runs out of connections when Context reload=true is enabled in Tomcat</summary>
    <description/>
    <commit commitTime="2012-12-03 21:06:40" id="a81538d"/>
    <fixedFiles>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java</file>
    </fixedFiles>
  </bug>
  <bug id="54220" reportTime="2012-11-28 20:19:49">
    <summary>ErrorReportValve invoked on non-error responses too</summary>
    <description/>
    <commit commitTime="2012-12-03 21:06:40" id="a2d1441"/>
    <fixedFiles>
      <file>java/org/apache/catalina/valves/ErrorReportValve.java</file>
      <file>test/org/apache/catalina/valves/TestErrorReportValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="54150" reportTime="2012-11-15 18:38:29">
    <summary>SlowQueryReportJmx mbean deregistration failure due to NPE - properties not set during pool close callback</summary>
    <description>Found while debugging version 7.0.29 I found that our SlowQueryReportJmx mbean was not being deregistered during webapp shutdown. I tracked this down to a NPE. The interceptor properties are not being set (as is done in setupConnection) prior to the pool close callback. ConnectionPool.close(boolean) poolClosed callback produces NPE in SlowQueryReportJmx. {code} PoolProperties.InterceptorDefinition[] proxies = getPoolProperties().getJdbcInterceptorsAsArray(); for (int i=0; i&lt;proxies.length; i++) { try { proxies[i].getInterceptorClass().newInstance().poolClosed(this); }catch (Exception x) { log.debug("Unable to inform interceptor of pool closure.",x); } } ... {code} NPE in SlowQueryReportJmx - null.containsKey {code} public ObjectName getObjectName(Class&lt;?&gt; clazz, String poolName) throws MalformedObjectNameException { ... NPE if (getProperties().containsKey(objectNameAttribute)) { ... {code} Sounds reasonable to set properties any time you need to instantiate interceptors. As is done in ConnectionPool.init(PoolConfiguration) {code} JdbcInterceptor interceptor = proxies[i].getInterceptorClass().newInstance(); interceptor.setProperties(proxies[i].getProperties()); interceptor.poolStarted(this); {code}</description>
    <commit commitTime="2012-12-04 13:46:40" id="b021a22"/>
    <fixedFiles>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java</file>
    </fixedFiles>
  </bug>
  <bug id="54194" reportTime="2012-11-23 14:35:58">
    <summary>NPE in DataSource.registerJmx() although DataSource is created with setJmxEnabled(false)</summary>
    <description/>
    <commit commitTime="2012-12-04 13:46:40" id="1c61fb1"/>
    <fixedFiles>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSource.java</file>
    </fixedFiles>
  </bug>
  <bug id="54241" reportTime="2012-12-04 07:53:25">
    <summary>NPE in BodyContentImpl</summary>
    <description/>
    <commit commitTime="2013-01-02 23:20:00" id="ffc4525"/>
    <fixedFiles>
      <file>java/org/apache/jasper/runtime/JspWriterImpl.java</file>
      <file>test/org/apache/jasper/runtime/TestJspWriterImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="54247" reportTime="2012-12-05 10:00:36">
    <summary>Exception in JmxRemoteLifecycleListener.destroyServer</summary>
    <description/>
    <commit commitTime="2013-01-03 04:53:20" id="29c4a0e"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/Bootstrap.java</file>
    </fixedFiles>
  </bug>
  <bug id="54256" reportTime="2012-12-06 20:44:32">
    <summary>Enhance Exception reporting on JAR file error</summary>
    <description>(I posted this to the mailing list on Oct 28, 2011, but didn't end up creating a report on it until now. I have the same error with Tomcat 7.) PROBLEM DESCRIPTION: I have an exception (appended below), and I think it would be nice to have more information about what is going on. If I had more context, it would help me find the cause of my problem much more quickly. For example, if the exception indicated what the file/resource that was having the problem was, it would speed up troubleshooting immensely. HOW TO REPRODUCE: In a JAR file contained in WAR file's WEB-INF/lib folder: Change the MANIFEST.MF file in the JAR file. Put in a line with ONLY "Class-Path:". Note there is no space after the period, which is what causes the error. During load of the application, the exception which I have appended at the end of this message will show up. SUGGESTED IMPROVEMENT: My suggestion would be to modify ExtensionValidator.validateApplication(...), around line 195. This is the location that actually knows about what the resource is. It would be nice if the IOException was caught, and information about the Resource was added to the exception, probably by wrapping the exception. Because I have not gone through the overhead of getting a version of Tomcat running from source, these changes have not been compiled and tested, but I think the suggestion is relatively straight-forward. Here are the suggested code changes: First code change - move the definition of "resource" outside of the try/catch: // Locate the Manifests for all bundled JARs Resource resource = null; // ADDED NamingEnumeration&lt;Binding&gt; ne = null; Second code change - make the existing declaration of "resource" just an assignment: resource = (Resource) obj; // MODIFIED inputStream = resource.streamContent(); Manifest jmanifest = getManifest(inputStream); Third code change: add a catch clause and re-throw: } catch (NamingException nex) { // Jump out of the check for this application because it // has no resources } catch (IOException ioex) { // ADDED throw new IOException("validation problem in " + resource.toString(), ioex); // ADDED } finally { The problem is that the resource may not have a proper toString(). I would suggest changing FileDirContext:898 (inner class=FileResource) to have a toString method, something along the lines of: public String toString() { // ADDED return file == null ? "null" : file.toString(); // ADDED } // ADDED Note: about this, in the original email thread, Konstantin Kolinko said: "Not sure about FileResource.toString(), but adding a catch for IOException looks like doable." Finally, here's the exception: 28-Oct-2011 11:03:03 AM org.apache.catalina.core.StandardContext startInternal SEVERE: Error in dependencyCheck java.io.IOException: invalid header field at java.util.jar.Attributes.read(Attributes.java:410) at java.util.jar.Manifest.read(Manifest.java:199) at java.util.jar.JarInputStream.&lt;init&gt;(JarInputStream.java:83) at java.util.jar.JarInputStream.&lt;init&gt;(JarInputStream.java:60) at org.apache.catalina.util.ExtensionValidator.getManifest(ExtensionValidator.java:394) at org.apache.catalina.util.ExtensionValidator.validateApplication(ExtensionValidator.java:195) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5037) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1033) at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:774) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1033) at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:291) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.StandardService.startInternal(StandardService.java:443) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:727) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:148) at org.apache.catalina.startup.Catalina.start(Catalina.java:621) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:616) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:322) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:450) (And if only java.util.jar.Attributes.read reported WHICH attribute had the problem, we'd really be in business.)</description>
    <commit commitTime="2013-01-03 04:53:20" id="0ae2f34"/>
    <fixedFiles>
      <file>java/org/apache/catalina/util/ExtensionValidator.java</file>
    </fixedFiles>
  </bug>
  <bug id="54260" reportTime="2012-12-07 17:58:25">
    <summary>JSP unloading - NullPointerException when using ".tag" files</summary>
    <description/>
    <commit commitTime="2013-01-03 21:33:20" id="94da507"/>
    <fixedFiles>
      <file>java/org/apache/jasper/util/FastRemovalDequeue.java</file>
    </fixedFiles>
  </bug>
  <bug id="54370" reportTime="2013-01-03 14:20:38">
    <summary>NPE mapping method in EL</summary>
    <description/>
    <commit commitTime="2013-01-04 00:20:00" id="5361e86"/>
    <fixedFiles>
      <file>java/org/apache/el/util/ReflectionUtil.java</file>
      <file>test/org/apache/el/util/TestReflectionUtil.java</file>
      <file>test/org/apache/el/util/Tester.java</file>
    </fixedFiles>
  </bug>
  <bug id="54248" reportTime="2012-12-05 11:56:08">
    <summary>Retrieving content that contains a BOM via request.getReader() issue</summary>
    <description>If a request contains Content that includes the BOM - in my case Content-Type: application/xml; charset-utf-16 - and the content has a BOM (FF FE), when fetched utilizing the BufferedReader from getReader() - the first request serviced on the AJP thread works correctly (encoded correctly, only characters fetched), however, any subsequent request on the thread which includes the BOM has the BOM being delivered to the application. It appears via review of the Tomcat code, that the recycle() method in B2CConverter simply ensures the socket's data has been completely flushed and the underlying InputStream doesn't get reset (don't really know if there is a way to do this without re-instantiating it) to ensure subsequent requests BOM is consumed. I proved this as a test by adding a call to reset() within the recycle() method which re-instantiates the underlying InputStreams and the problem resolved itself. I've temporarily resolved the issue in my application code by using request.getInputStream() and using request.getCharacterEncoding() and encoding the content inside my application.</description>
    <commit commitTime="2013-01-08 07:06:40" id="f7fc27a"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/buf/B2CConverter.java</file>
      <file>test/org/apache/tomcat/util/buf/TestB2CConverter.java</file>
    </fixedFiles>
  </bug>
  <bug id="54380" reportTime="2013-01-07 12:37:27">
    <summary>In MapperListener.lifecycleEvent(..): check state of parent before calling registerWrapper()</summary>
    <description/>
    <commit commitTime="2013-01-08 15:26:40" id="3a9990b"/>
    <fixedFiles>
      <file>java/org/apache/catalina/mapper/MapperListener.java</file>
    </fixedFiles>
  </bug>
  <bug id="54377" reportTime="2013-01-05 23:52:37">
    <summary>RemoteIpFilter does not correctly set request attributes for AccessLog</summary>
    <description>In RemoteIpFilter class, there is code that publishes the new request attributes to AccessLog (see below). 821 if (requestAttributesEnabled) { 822 request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE, 823 request.getRemoteAddr()); 824 request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE, 825 request.getRemoteHost()); 826 request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE, 827 request.getProtocol()); 828 request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE, 829 Integer.valueOf(request.getServerPort())); 830 } The problem is that the source values should come from xRequest, e.g. xRequest.getRemoteAddr() and xRequest.getRemoteHost(), etc. As it is written above, RemoteIpFilter simply republishes the current values, and AccessLog therefore does not display the correct values.</description>
    <commit commitTime="2013-01-09 05:20:00" id="95e6056"/>
    <fixedFiles>
      <file>java/org/apache/catalina/filters/RemoteIpFilter.java</file>
      <file>test/org/apache/catalina/filters/TestRemoteIpFilter.java</file>
      <file>test/org/apache/catalina/valves/TestRemoteIpValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="54382" reportTime="2013-01-07 23:56:21">
    <summary>Nullpointer Exception after activating SSI and loading of any html-file with a specific comment</summary>
    <description>1. Activate SSI on Tomcat and restart Tomcat 2. create an any html-file with a comment like this "&lt;!--#--&gt;" 3. put this html-file to the webapp folder of tomcat 4. when you now go to the html file via tomcat, you will get an Nullpointer Exception. The SSIServlet.class and other necessary SSI-classes cannot be found</description>
    <commit commitTime="2013-01-09 05:20:00" id="d83a5e5"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ssi/SSIProcessor.java</file>
    </fixedFiles>
  </bug>
  <bug id="54406" reportTime="2013-01-10 21:09:19">
    <summary>NIO and BIO connectors handle unsupported SSL ciphers and sslEnabledProtocols differently</summary>
    <description>The NIO and BIO connectors share (most of) a JSSE based SSLImplementation, but differ in their handling of the ciphers and sslEnabledProtocols attributes. The NIO connector sets the configured values for both attributes directly on the SSLEngine, which will fail immediately if any of them are unsupported. This makes creating a portable/superset collection of ciphers impossible - i.e. IBM JDKs do not support many of the cipher suite names used by JSSE and vice versa (usually TLS_ vs SSL_ prefixes differ) and the supported options differ between Java 6/7 etc. The BIO connector attempts to filter the specified values down to those supported by the SSL implementation, but has issues as well: if none of the specified ciphers/protocols are supported it will silently use the defaults of the SSL implementation, which can lead to unexpectedly (and unwittingly) insecure configurations. I propose to: - modify the NIO connector to use the same logic as the BIO connector to filter requested ciphers/protocols to supported values (by placing these operations on the SSLUtil interface). - modify the ciphers/protocols filtering logic to treat an explicit list of unsupported options as setting no supported ciphers/protocols and warn when this is done (it will also fail visibly with errors if SSL connections are attempted).</description>
    <commit commitTime="2013-01-14 04:46:40" id="9f657ac"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/net/NioEndpoint.java</file>
      <file>java/org/apache/tomcat/util/net/SSLUtil.java</file>
      <file>java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="54438" reportTime="2013-01-16 21:14:31">
    <summary>Bug fix 52953 introduces NullPointerException in RealmBase.java line 409 when user not found in JDBC</summary>
    <description/>
    <commit commitTime="2013-01-17 21:40:00" id="c8d5d88"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/RealmBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="54440" reportTime="2013-01-17 03:29:19">
    <summary>TagPluginManager.init() throws NPE when used in Ant &lt;jasper&gt; task</summary>
    <description/>
    <commit commitTime="2013-01-17 21:40:00" id="297b26a"/>
    <fixedFiles>
      <file>java/org/apache/jasper/JspC.java</file>
      <file>java/org/apache/jasper/servlet/JspCServletContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="54324" reportTime="2012-12-18 21:51:15">
    <summary>Support is required to disable TLS compression to prevent against CRIME attacks</summary>
    <description/>
    <commit commitTime="2013-01-18 03:13:20" id="ab44514"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/Http11AprProtocol.java</file>
      <file>java/org/apache/tomcat/jni/SSL.java</file>
      <file>java/org/apache/tomcat/util/net/AprEndpoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="54450" reportTime="2013-01-18 18:18:08">
    <summary>Injection fails when part of the servlet properties uses @Resource and the other uses 'injection-target'</summary>
    <description>Hi, I have a servlet with: - annotated properties - and injection-target declarations in web.xml When I try to request this servlet I receive: javax.naming.NameNotFoundException: Name [envEntry1] is not bound in this Context. Unable to find [envEntry1]. at org.apache.naming.NamingContext.lookup(NamingContext.java:820) at org.apache.naming.NamingContext.lookup(NamingContext.java:154) at org.apache.naming.NamingContext.lookup(NamingContext.java:831) at org.apache.naming.NamingContext.lookup(NamingContext.java:168) at org.apache.catalina.core.DefaultInstanceManager.lookupMethodResource(DefaultInstanceManager.java:622) at org.apache.catalina.core.DefaultInstanceManager.processAnnotations(DefaultInstanceManager.java:466) at org.apache.catalina.core.DefaultInstanceManager.newInstance(DefaultInstanceManager.java:157) at org.apache.catalina.core.DefaultInstanceManager.newInstance(DefaultInstanceManager.java:138) at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1137) at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:858) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:136) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407) at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1004) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:589) at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:310) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:680) The problem is that when the application uses 'injection-target' declarations in org.apache.catalina.core.DefaultInstanceManager.populateAnnotationsCache(Class&lt;?&gt;, Map&lt;String, String&gt;) only the first setter method is evaluated and the rest are skipped. I would like to propose a patch and test case. I'm looking forward to your comments. Regards Violeta</description>
    <commit commitTime="2013-01-23 19:20:00" id="ac78456"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/DefaultInstanceManager.java</file>
      <file>test/org/apache/catalina/startup/TestContextConfig.java</file>
      <file>test/org/apache/catalina/startup/TesterServletWithAnnotations.java</file>
    </fixedFiles>
  </bug>
  <bug id="54458" reportTime="2013-01-21 21:56:02">
    <summary>DataSourceRealm should provide more info on SQLException</summary>
    <description>The getPassword() method of the DataSourceRealm does not log enough information when it encounters an SQL error. The catch block is: } catch(SQLException e) { containerLog.error( sm.getString("dataSourceRealm.getPassword.exception", username)); } finally { it would be really helpful to have some details of what the SQLException is. I am getting this intermittently, and have resorted to subclassing getPassword() in an attempt to figure out what is going wrong.</description>
    <commit commitTime="2013-01-24 00:53:20" id="07a930d"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/DataSourceRealm.java</file>
    </fixedFiles>
  </bug>
  <bug id="54466" reportTime="2013-01-22 09:07:46">
    <summary>No file name information in detail error when compiling the java file generated from a tag file</summary>
    <description/>
    <commit commitTime="2013-01-24 03:40:00" id="d7f744c"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/DefaultErrorHandler.java</file>
    </fixedFiles>
  </bug>
  <bug id="54476" reportTime="2013-01-23 20:05:14">
    <summary>incorrect param specification in javadoc ...tribes.group.GroupChannel send methods</summary>
    <description>* @param destination Member[] - destination.length &gt; 1 I believe this should be: * @param destination Member[] - destination.length &gt; 0</description>
    <commit commitTime="2013-01-24 17:33:20" id="6647531"/>
    <fixedFiles>
      <file>java/org/apache/catalina/tribes/group/GroupChannel.java</file>
    </fixedFiles>
  </bug>
  <bug id="53869" reportTime="2012-09-13 13:56:24">
    <summary>Performance tuning solution to resolve too many cascaded JspContextWrapper issue</summary>
    <description/>
    <commit commitTime="2013-01-25 21:20:00" id="ce55f25"/>
    <fixedFiles>
      <file>java/org/apache/jasper/runtime/JspContextWrapper.java</file>
    </fixedFiles>
  </bug>
  <bug id="54496" reportTime="2013-01-25 18:34:53">
    <summary>..tribes.membership.MemberImpl.toString() might be better using .getClass().getName()</summary>
    <description>public String toString() { StringBuilder buf = new StringBuilder("org.apache.catalina.tribes.membership.MemberImpl["); Might be better to use .getClass().getName() to cover StaticMember and any other sub-classes that might arise.</description>
    <commit commitTime="2013-01-29 00:20:00" id="e1e4e4e"/>
    <fixedFiles>
      <file>java/org/apache/catalina/tribes/membership/MemberImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="54497" reportTime="2013-01-25 23:16:17">
    <summary>RuntimeException in WebappClassLoader.checkThreadLocalMapForLeaks() causes LifecycleException</summary>
    <description>Observed this when testing Tomcat trunk at r1438747, at WinXP 32-bit, JDK 7u11. (running TestWsWebSocketContainer with APR, Tomcat-Native 1.1.26 RC) There occurred an NPE in WebappClassLoader.checkThreadLocalMapForLeaks(). It was uncaught and caused LifecycleException and ultimately a failure to stop Tomcat. =============== In stderr: SEVERE: A child container failed during stop java.util.concurrent.ExecutionException: org.apache.catalina.LifecycleException: Failed to stop component [StandardEngine[Tomcat].StandardHost[localhost].StandardContext[]] at java.util.concurrent.FutureTask$Sync.innerGet(FutureTask.java:252) at java.util.concurrent.FutureTask.get(FutureTask.java:111) at org.apache.catalina.core.ContainerBase.stopInternal(ContainerBase.java:974) at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232) at org.apache.catalina.core.ContainerBase$StopChild.call(ContainerBase.java:1404) at org.apache.catalina.core.ContainerBase$StopChild.call(ContainerBase.java:1393) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334) at java.util.concurrent.FutureTask.run(FutureTask.java:166) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) at java.lang.Thread.run(Thread.java:722) Caused by: org.apache.catalina.LifecycleException: Failed to stop component [StandardEngine[Tomcat].StandardHost[localhost].StandardContext[]] at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:236) ... 7 more Caused by: org.apache.catalina.LifecycleException: Failed to stop component [WebappLoader[]] at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:236) at org.apache.catalina.core.StandardContext.stopInternal(StandardContext.java:5365) at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232) ... 7 more Caused by: java.lang.NullPointerException at sun.reflect.UnsafeFieldAccessorImpl.ensureObj(UnsafeFieldAccessorImpl.java:54) at sun.reflect.UnsafeObjectFieldAccessorImpl.get(UnsafeObjectFieldAccessorImpl.java:36) at java.lang.reflect.Field.get(Field.java:372) at org.apache.catalina.loader.WebappClassLoader.checkThreadLocalMapForLeaks(WebappClassLoader.java:2247) at org.apache.catalina.loader.WebappClassLoader.checkThreadLocalsForLeaks(WebappClassLoader.java:2188) at org.apache.catalina.loader.WebappClassLoader.clearReferences(WebappClassLoader.java:1731) at org.apache.catalina.loader.WebappClassLoader.stop(WebappClassLoader.java:1641) at org.apache.catalina.loader.WebappLoader.stopInternal(WebappLoader.java:491) at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232) ... 9 more =============== In testcase: Testcase: testSmallTextBufferClientTextMessage took 2,328 sec Caused an ERROR Failed to stop component [StandardServer[-1]] org.apache.catalina.LifecycleException: Failed to stop component [StandardServer[-1]] at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:236) at org.apache.catalina.startup.Tomcat.stop(Tomcat.java:336) at org.apache.catalina.startup.TomcatBaseTest.tearDown(TomcatBaseTest.java:163) Caused by: org.apache.catalina.LifecycleException: Failed to stop component [StandardService[Tomcat]] at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:236) at org.apache.catalina.core.StandardServer.stopInternal(StandardServer.java:766) at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232) Caused by: org.apache.catalina.LifecycleException: Failed to stop component [StandardEngine[Tomcat]] at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:236) at org.apache.catalina.core.StandardService.stopInternal(StandardService.java:501) at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232) Caused by: org.apache.catalina.LifecycleException: A child container failed during stop at org.apache.catalina.core.ContainerBase.stopInternal(ContainerBase.java:981) at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232) =============== Thoughts: 1. We should catch throwables in those checkFor**Leaks methods. It should not cause a "failed to stop component" failure. 2. In that method there are many calls to "table[j]". The array member should be evaluated only once, so that it does not become null unexpectedly.</description>
    <commit commitTime="2013-02-01 20:00:00" id="ea16bda"/>
    <fixedFiles>
      <file>java/org/apache/catalina/loader/WebappClassLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="54513" reportTime="2013-01-31 23:15:59">
    <summary>NullPointerException in AprEndpoint$Poller.run</summary>
    <description>Trunk at r1441188, running the test suite with APR connector, Native 1.1.26 Windows 32-bit with JDK 7u11. I encountered the following when running org.apache.catalina.loader.TestVirtualContext test On second re-run of the test the same issue happened, so it is as if there is something specific here. I have not encountered the issue with the rest of testsuite yet. [[[ Feb 01, 2013 2:07:26 AM org.apache.tomcat.util.net.AprEndpoint$Poller run WARNING: Unexpected poller error java.lang.NullPointerException at org.apache.tomcat.util.net.AprEndpoint$AprSocketWrapper.access$200(AprEndpoint.java:2198) at org.apache.tomcat.util.net.AprEndpoint$Poller.run(AprEndpoint.java:1632) at java.lang.Thread.run(Thread.java:722) ]]] The code at AprEndpoint$Poller.run(AprEndpoint.java:1632) is 1628 for (int n = 0; n &lt; rv; n++) { 1629 timeouts.remove(desc[n*2+1]); 1630 AprSocketWrapper wrapper = connections.get( 1631 Long.valueOf(desc[n*2+1])); 1632 wrapper.pollerFlags = wrapper.pollerFlags &amp; ~((int) desc[n*2]); I suspect that "wrapper" is null here. The above code is specific to Tomcat trunk and is not present in 7.0.x. When this happened, the test hung for 15 minutes (1000 secs) waiting on a socket read. When time out passed, it continued to run all the other tests. [[[ Testcase: testAdditionalWebInfClassesPaths took 1 006,735 sec Caused an ERROR Read timed out java.net.SocketTimeoutException: Read timed out at java.net.SocketInputStream.socketRead0(Native Method) at java.net.SocketInputStream.read(SocketInputStream.java:150) at java.net.SocketInputStream.read(SocketInputStream.java:121) at java.io.BufferedInputStream.fill(BufferedInputStream.java:235) at java.io.BufferedInputStream.read1(BufferedInputStream.java:275) at java.io.BufferedInputStream.read(BufferedInputStream.java:334) at sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:633) at sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:579) at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1322) at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:468) at org.apache.catalina.startup.TomcatBaseTest.methodUrl(TomcatBaseTest.java:247) at org.apache.catalina.startup.TomcatBaseTest.getUrl(TomcatBaseTest.java:219) at org.apache.catalina.startup.TomcatBaseTest.getUrl(TomcatBaseTest.java:213) at org.apache.catalina.startup.TomcatBaseTest.getUrl(TomcatBaseTest.java:202) at org.apache.catalina.loader.TestVirtualContext.assertPageContains(TestVirtualContext.java:326) at org.apache.catalina.loader.TestVirtualContext.assertPageContains(TestVirtualContext.java:320) at org.apache.catalina.loader.TestVirtualContext.testAdditionalWebInfClassesPaths(TestVirtualContext.java:311) ]]]</description>
    <commit commitTime="2013-02-03 05:20:00" id="bbb13f6"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/net/AprEndpoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="54521" reportTime="2013-02-04 10:54:16">
    <summary>DigestAuthenticator: nonceCountValid() fails in case of simultaneous asynchronous requests of the same client</summary>
    <description>Concerned components: org.apache.catalina.authenticator.DigestAuthenticator org.apache.catalina.authenticator.DigestAuthenticator.NonceInfo Scenario: A multithreaded client sends two requests within one millisecond. The DigestAuthenticator creates for each request a nonce as well as a NonceInfo instance. The two nonces are equal, as they were created within the same millisecond. When writing data into the cache (method generateNonce()), the second NonceInfo instance overwrites the first one (same key!). Problem: The two client threads then send a second request with a digest authentication header. In both requests, nc (nonce count) is equal 1, as the nonce has been newly created. In the NonceInfo of the first request, array seen is set to true for index ((nonceCount + offset) % seen.length). In the second request the same NonceInfo instance is used, as the instance is retrieved from map nonces using nonce as a key, that is, in both requests the same key is used. Consequently, method nonceCountValid() returns false, as seen[(nonceCount + offset) % seen.length)] has already been set to true. Therefore the authentication fails, although the client has sent a valid digest authentication header. Conclusion: Working with multi-threaded clients with many requests, digest authentication does not function reliably.</description>
    <commit commitTime="2013-02-07 17:40:00" id="b68bbb8"/>
    <fixedFiles>
      <file>java/org/apache/catalina/authenticator/DigestAuthenticator.java</file>
      <file>test/org/apache/catalina/authenticator/TestDigestAuthenticator.java</file>
    </fixedFiles>
  </bug>
  <bug id="54534" reportTime="2013-02-06 19:14:48">
    <summary>JMX connection may load servlet with invalid ClassLoader</summary>
    <description/>
    <commit commitTime="2013-02-07 17:40:00" id="a993d7c"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardWrapper.java</file>
    </fixedFiles>
  </bug>
  <bug id="54456" reportTime="2013-01-21 16:45:51">
    <summary>ChunkedInputFilter returning EOF when client closes connection without sending end chunk</summary>
    <description/>
    <commit commitTime="2013-02-07 20:26:40" id="cc2f8db"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/filters/ChunkedInputFilter.java</file>
    </fixedFiles>
  </bug>
  <bug id="54239" reportTime="2012-12-04 06:56:18">
    <summary>Extensible EL Interpreter</summary>
    <description/>
    <commit commitTime="2013-02-12 22:40:00" id="f8ac6a0"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/ELInterpreter.java</file>
      <file>java/org/apache/jasper/compiler/ELInterpreterFactory.java</file>
      <file>java/org/apache/jasper/compiler/Generator.java</file>
      <file>test/org/apache/jasper/compiler/TestELInterpreterFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="54536" reportTime="2013-02-07 12:33:41">
    <summary>ErrorReportValve doesn't respect HttpServletResponse.sendError(int sc, String msg)</summary>
    <description/>
    <commit commitTime="2013-02-13 04:13:20" id="ef9ed07"/>
    <fixedFiles>
      <file>java/org/apache/catalina/valves/ErrorReportValve.java</file>
      <file>test/org/apache/catalina/valves/TestErrorReportValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="54203" reportTime="2012-11-25 09:02:17">
    <summary>Part class missing documentation</summary>
    <description/>
    <commit commitTime="2013-02-13 18:06:40" id="81eaf63"/>
    <fixedFiles>
      <file>java/javax/servlet/http/Part.java</file>
    </fixedFiles>
  </bug>
  <bug id="54602" reportTime="2013-02-22 20:06:36">
    <summary>B2CConverter character decode underflow leaves bytes in buffer</summary>
    <description>If a request contains a uri that ends in a multi byte character which is missing a byte the extra bytes are left in a buffer which is reused by a future request. The problem comes from two different things: 1) If B2CConverter tries to convert a ByteChunk which ends in a character underflow it does not convert that last character and it is left in a buffer in B2CConver. 2) The B2CConverter in org.apache.catalina.connector.Request is not recycled with the rest of the objects. It looks like this is done intentionally based on the comment above it's declaration. The issue with B2CConverter can be demonstrated with the code below, which is a simplification of what is done inside of CoyoteAdapter.convertURI(): &lt;code&gt; B2CConverter conv = new B2CConverter("UTF-8"); ByteChunk bc = new ByteChunk(); CharChunk cc = new CharChunk(); byte[] bytes = { 0x61, 0x62, 0x63, 0x64, -8, -69, -73, -77 }; bc.append(bytes, 0, bytes.length); cc.allocate(bc.getLength(), -1); conv.convert(bc, cc, cc.getBuffer().length - cc.getEnd()); System.out.println(cc); cc.recycle(); bc.recycle(); bc.append(bytes, 0, bytes.length); cc.allocate(bc.getLength(), -1); conv.convert(bc, cc, cc.getBuffer().length - cc.getEnd()); System.out.println(cc); &lt;/code&gt; If the B2CConverter was recycled with everything else in Request this would prevent a previous request from corrupting the next request but it doesn't fix the issue that a character is dropped from the initial decode. I tried playing with B2CConverter and the only way I could get the convert to get everything was by ignoring the limit argument and reading to the end of the stream. It looks like tomcat8 is moving in this direction with the move to NIO, however I tried playing with the latest B2CConverter and was still seeing issues with the given byte sequence.</description>
    <commit commitTime="2013-02-23 05:53:20" id="b2f0e7c"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/CoyoteAdapter.java</file>
    </fixedFiles>
  </bug>
  <bug id="54585" reportTime="2013-02-19 20:50:13">
    <summary>WebappLoader doesn't honor delegate attr while constructing jsp_classpath</summary>
    <description>If custom WebappClassLoader is created with delegate=true then parent-first classloading model is used. Everything works here as expected. However jsp_classpath is always constructed in the following manner: customWebappClassLoader.urls;parent.urls;parent...parent.urls Whereas it is expected to me that if delegate=true then parent's urls should come first.</description>
    <commit commitTime="2013-02-28 08:06:40" id="9ad4904"/>
    <fixedFiles>
      <file>java/org/apache/catalina/loader/WebappLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="54638" reportTime="2013-03-05 12:29:57">
    <summary>/manager/status?XML=true</summary>
    <description>Hi all, in /manager/status?XML=true, informations about memory pools are incorrect. for every row all the values (initial,committed,maximum,used) are the same: Memory Pools Name:Eden Space Type:Heap memory Initial:143130624 Committed:143130624 Maximum:143130624 Used:143130624 Name:Survivor Space Type:Heap memory Initial:17891328 Committed:17891328 Maximum:17891328 Used:17891328 Name:Tenured Gen Type:Heap memory Initial:357957632 Committed:357957632 Maximum:357957632 Used:357957632 Name:Code Cache Type:Non-heap memory Initial:163840 Committed:8421376 Maximum:33554432 Used:163840 Name:Perm Gen Type:Non-heap memory Initial:12582912 Committed:23330816 Maximum:67108864 Used:12582912 Name:Perm Gen [shared-ro] Type:Non-heap memory Initial:10485760 Committed:10485760 Maximum:10485760 Used:10485760 Name:Perm Gen [shared-rw] Type:Non-heap memory Initial:12582912 Committed:12582912 Maximum:12582912 Used:12582912 Instead in the gui page values are correct.</description>
    <commit commitTime="2013-03-06 08:33:20" id="78b3c10"/>
    <fixedFiles>
      <file>java/org/apache/catalina/manager/StatusTransformer.java</file>
    </fixedFiles>
  </bug>
  <bug id="54624" reportTime="2013-02-28 21:44:55">
    <summary>Form authenticator hangs on re-authentication of POST request behind mod_proxy_ajp</summary>
    <description>Setup: Tomcat AJP connector behind mod_proxy_ajp, form-based authentication. When session expires and a POST request is submitted, Tomcat shows login form, user logs in, authenticator tries to restore the original POST request. Doing that, it tries to swallow the AJP message body before replacing the body of the request with the original POST request body. It tries to read the first 4 bytes of the AJP message (the message length) and blocks forever waiting for those 4 bytes.</description>
    <commit commitTime="2013-03-07 04:00:00" id="c9e056c"/>
    <fixedFiles>
      <file>java/org/apache/catalina/authenticator/FormAuthenticator.java</file>
    </fixedFiles>
  </bug>
  <bug id="54690" reportTime="2013-03-13 17:07:20">
    <summary>HTTPS BIO/NIO connector does not enable TLS 1.1 and TLS 1.2 by default</summary>
    <description/>
    <commit commitTime="2013-03-14 22:06:40" id="fedf189"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="54660" reportTime="2013-03-10 07:09:11">
    <summary>AccessLogValve fileDateFormat can not be changed through JMX</summary>
    <description>When an AccessLogValve is added to a catalina host with the JMX addVale() operation on the Host object name, the valve will start with the default fileDateFormat. Changing the attribute on the valve through it's JMX object name has no effect because the valve is already started. Executing a rotate() operation on the valve does also have no effect. Steps to Reproduce: - Start tomcat server - Add Host using JMX - Add valve to Host using JMX - Set valve attribute fileDateFormat to something else than yyyy-MM-dd, for example yy-MM Actual Results: The access log file format will include the default fileDateFormat of yyyy-MM-dd Expected Results: The access log file format with yy-MM, as from the example.</description>
    <commit commitTime="2013-03-15 00:53:20" id="2a03ca6"/>
    <fixedFiles>
      <file>java/org/apache/catalina/valves/AccessLogValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="54658" reportTime="2013-03-09 21:46:36">
    <summary>Implement Part#getSubmittedFileName from SERVLET_SPEC-57</summary>
    <description/>
    <commit commitTime="2013-03-15 03:40:00" id="ca205c1"/>
    <fixedFiles>
      <file>java/javax/servlet/http/Part.java</file>
      <file>java/org/apache/catalina/connector/Request.java</file>
      <file>java/org/apache/catalina/core/ApplicationPart.java</file>
      <file>java/org/apache/catalina/manager/HTMLManagerServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="54702" reportTime="2013-03-15 08:53:36">
    <summary>File descriptor leak at web.xml loading</summary>
    <description>Hello I think I've found a file descriptor leak in file /tomcat/trunk/java/org/apache/catalina/startup/ContextConfig.java (method getGlobalWebXmlSource). A stream is from file "web.xml" is not closed. private WebXml getDefaultWebXmlFragment() { ... 1284 InputSource globalWebXml = getGlobalWebXmlSource(); ... 1337 // Parse global web.xml if present 1338 if (globalWebXml == null) { 1339 // This is unusual enough to log 1340 log.info(sm.getString("contextConfig.defaultMissing")); 1341 } else { 1342 parseWebXml(globalWebXml, webXmlDefaultFragment, false); 1343 } Here is the full stack trace [java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:109)] [org.apache.catalina.startup.ContextConfig.getWebXmlSource(ContextConfig.java:1837)] [org.apache.catalina.startup.ContextConfig.getGlobalWebXmlSource(ContextConfig.java:1744)] [org.apache.catalina.startup.ContextConfig.getDefaultWebXmlFragment(ContextConfig.java:1417)] [org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1253)] [org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:878)] [org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:369)] [org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)] [org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)] [org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5173)] [org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)] [org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)] [org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)] [org.apache.catalina.core.StandardHost.addChild(StandardHost.java:633)] [org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:977)] [org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:542)] [org.apache.catalina.startup.HostConfig.check(HostConfig.java:1462)] [sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)] [sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)] [sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)] [java.lang.reflect.Method.invoke(Method.java:597)] [org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:301)] [com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:836)] [com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:761)] [org.apache.catalina.manager.ManagerServlet.check(ManagerServlet.java:1445)] [org.apache.catalina.manager.HTMLManagerServlet.upload(HTMLManagerServlet.java:301)] [org.apache.catalina.manager.HTMLManagerServlet.doPost(HTMLManagerServlet.java:208)] [javax.servlet.http.HttpServlet.service(HttpServlet.java:647)] [javax.servlet.http.HttpServlet.service(HttpServlet.java:728)] [org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)] [org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)] [org.apache.catalina.filters.CsrfPreventionFilter.doFilter(CsrfPreventionFilter.java:213)] [org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)] [org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)] [org.apache.catalina.filters.SetCharacterEncodingFilter.doFilter(SetCharacterEncodingFilter.java:108)] [org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)] [org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)] [org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222)] [org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123)] [org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:581)] [org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)] [org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99)] [org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:931)] [org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)] [org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407)] [org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1004)] [org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:589)] [org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:1822)] [java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)] [java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)] [java.lang.Thread.run(Thread.java:662)]</description>
    <commit commitTime="2013-03-15 23:06:40" id="7c88af9"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="54631" reportTime="2013-03-04 05:03:35">
    <summary>@PathParam is not working with @OnMessage</summary>
    <description>I have defined server end-point as: @ServerEndpoint(value = "/ws/{mid}/{rid}/{uid}") When using @PathParam with @OnMessage, values are null. Other annotations like @OnOpen and @OnClose print values specified in URL. @OnMessage public void onTextMessage(@PathParam("mid") Long mid, @PathParam("rid") Integer rid, @PathParam("uid") Long uid, Session session, String message, boolean pair) { log.debug("[TEXT]" + " : " + mid + " : " + rid + " : " + uid + message + " : " + session.getRequestURI()); }</description>
    <commit commitTime="2013-03-16 04:40:00" id="7fd7279"/>
    <fixedFiles>
      <file>test/org/apache/tomcat/websocket/pojo/TestPojoMethodMapping.java</file>
    </fixedFiles>
  </bug>
  <bug id="54712" reportTime="2013-03-17 12:54:09">
    <summary>Prefer Locale.ENGLISH over Locale.US for case conversion</summary>
    <description/>
    <commit commitTime="2013-03-17 22:20:00" id="dc16474"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/Connector.java</file>
      <file>java/org/apache/tomcat/util/buf/B2CConverter.java</file>
      <file>java/org/apache/tomcat/util/http/parser/HttpParser.java</file>
      <file>java/org/apache/tomcat/util/http/parser/MediaType.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java</file>
      <file>test/org/apache/catalina/startup/SimpleHttpClient.java</file>
    </fixedFiles>
  </bug>
  <bug id="54709" reportTime="2013-03-17 08:54:31">
    <summary>Official schemes for WebSocket are "ws"/"wss"; WsWebSocketContainer only allows "http"/"https"</summary>
    <description/>
    <commit commitTime="2013-03-18 03:53:20" id="ad148dd"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/websocket/WsWebSocketContainer.java</file>
      <file>test/org/apache/tomcat/websocket/TestWsRemoteEndpoint.java</file>
      <file>test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java</file>
      <file>test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java</file>
      <file>test/org/apache/tomcat/websocket/pojo/TestPojoMethodMapping.java</file>
    </fixedFiles>
  </bug>
  <bug id="54710" reportTime="2013-03-17 09:59:10">
    <summary>Java WebSocket specification says @OnMessage methods can have InputStream/Reader parameters; @OnClose can have CloseReason parameters</summary>
    <description/>
    <commit commitTime="2013-03-19 04:53:20" id="06800eb"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/websocket/pojo/PojoEndpointBase.java</file>
      <file>java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerBase.java</file>
      <file>java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerPartialBase.java</file>
      <file>java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerPartialBinary.java</file>
      <file>java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerPartialText.java</file>
      <file>java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeBase.java</file>
      <file>java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeBinary.java</file>
      <file>java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholePong.java</file>
      <file>java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeText.java</file>
      <file>java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java</file>
    </fixedFiles>
  </bug>
  <bug id="54721" reportTime="2013-03-18 22:01:43">
    <summary>RemoteEndpoint blocks indefinitely if sendObject called with BinaryStream of TextStream encoders</summary>
    <description/>
    <commit commitTime="2013-03-19 21:33:20" id="80ef59a"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="54724" reportTime="2013-03-19 13:22:56">
    <summary>WsSession does not throw IllegalStateException if closed when methods on it are called</summary>
    <description>Spec JavaDoc says: "Once the session is closed, it is no longer valid for use by applications. Calling any of its methods once the session has been closed will result in an IllegalStateException being thrown. Developers should retrieve any information from the session during the Endpoint.onClose(Session, CloseReason) method." Of course, the rules of Closeable also apply here, and calling Session#close(...) more than once should have no effect subsequent times. There are actually three problems here: 1) None of the methods throw IllegalStateException if the session is closed. Instead, they return things (like the basic remote, for example), and some methods in the endpoint implementation will not notice concurrent exceptions from the socket and then block forever waiting four the Countdown to clear. 2) The Session#state is never actually changed to State.CLOSED unless Session#onClose is called. However, Session#onClose is never actually called that I can find (though I will look harder before I make changes). 3) Even in Session#onClose, the state is incorrectly changed to State.CLOSED BEFORE Endpoint#onClose is called, when it should be changed AFTER. I'm working on a patch for this.</description>
    <commit commitTime="2013-03-20 03:06:40" id="12f89ff"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/websocket/WsSession.java</file>
      <file>test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java</file>
    </fixedFiles>
  </bug>
  <bug id="54599" reportTime="2013-02-22 16:37:23">
    <summary>DataSource password is exposed to applications via toString method</summary>
    <description>On the server side, create a DataSource using "org.apache.tomcat.jdbc.pool.DataSourceFactory". Ex: &lt;Resource auth="Container" description="" name="jdbc/testTomcatJdbc" factory="org.apache.tomcat.jdbc.pool.DataSourceFactory" type="javax.sql.DataSource" username="sa" password="super-secret" driverClassName="org.h2.Driver" url="jdbc:h2:mem:test" minIdle="1" initialSize="1" /&gt; In a web application, create a JSP file, add the following: &lt;%@ page import="javax.naming.*" session="false" %&gt; &lt;!DOCTYPE HTML&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Display Password!&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;toString for Tomcat JDBC&lt;/h1&gt; &lt;% dataSource = (javax.sql.DataSource) ctx.lookup("java:/comp/env/jdbc/testTomcatJdbc"); out.println("&lt;p&gt;" + dataSource.toString() + "&lt;/p&gt;"); %&gt; &lt;/body&gt; &lt;/html&gt; Access the JSP in your browser. The output from toString on the DataSource will display the password that was configured in the &lt;Resource/&gt; tag. Example Output: toString for Tomcat JDBC org.apache.tomcat.jdbc.pool.DataSource@75cae120{ConnectionPool[defaultAutoCommit=null; defaultReadOnly=null; defaultTransactionIsolation=-1; defaultCatalog=null; driverClassName=org.h2.Driver; maxActive=100; maxIdle=100; minIdle=1; initialSize=1; maxWait=30000; testOnBorrow=false; testOnReturn=false; timeBetweenEvictionRunsMillis=5000; numTestsPerEvictionRun=0; minEvictableIdleTimeMillis=60000; testWhileIdle=false; testOnConnect=false; password=super-secret; url=jdbc:h2:mem:test; username=sa; validationQuery=null; validatorClassName=null; validationInterval=30000; accessToUnderlyingConnectionAllowed=true; removeAbandoned=false; removeAbandonedTimeout=60; logAbandoned=false; connectionProperties=null; initSQL=null; jdbcInterceptors=null; jmxEnabled=true; fairQueue=true; useEquals=true; abandonWhenPercentageFull=0; maxAge=0; useLock=false; dataSource=null; dataSourceJNDI=null; suspectTimeout=0; alternateUsernameAllowed=false; commitOnReturn=false; rollbackOnReturn=false; useDisposableConnectionFacade=true; logValidationErrors=false; propagateInterruptState=false; }</description>
    <commit commitTime="2013-03-22 16:13:20" id="8445d9a"/>
    <fixedFiles>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java</file>
    </fixedFiles>
  </bug>
  <bug id="54732" reportTime="2013-03-20 16:09:31">
    <summary>StatementCache interceptor does not forward calls to Statement.close() which causes memory leaks</summary>
    <description/>
    <commit commitTime="2013-03-22 21:46:40" id="8cf47b4"/>
    <fixedFiles>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCache.java</file>
      <file>modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCounterInterceptor.java</file>
      <file>modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/TestStatementCache.java</file>
    </fixedFiles>
  </bug>
  <bug id="54748" reportTime="2013-03-25 09:23:09">
    <summary>IOException in echo WebSocket example</summary>
    <description>The IOException "New frame received after a close control frame" is raised after pressing Disconnect. The exception can be detected by adding an onError method to EchoEndpoint.</description>
    <commit commitTime="2013-03-26 06:20:00" id="cf0c064"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/websocket/WsFrameBase.java</file>
      <file>java/org/apache/tomcat/websocket/WsFrameClient.java</file>
      <file>java/org/apache/tomcat/websocket/server/WsFrameServer.java</file>
    </fixedFiles>
  </bug>
  <bug id="54851" reportTime="2013-04-16 08:47:44">
    <summary>Folder without web-fragment.xml should not impact the status of distributable</summary>
    <description/>
    <commit commitTime="2013-04-16 21:46:40" id="e97e158"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="54822" reportTime="2013-04-10 07:13:22">
    <summary>URL with Query String can't work over SPDY</summary>
    <description/>
    <commit commitTime="2013-04-19 22:00:00" id="3da2133"/>
    <fixedFiles>
      <file>java/org/apache/coyote/spdy/SpdyProcessor.java</file>
    </fixedFiles>
  </bug>
  <bug id="54792" reportTime="2013-04-02 20:54:28">
    <summary>IllegalStateException with chat sample</summary>
    <description>This looks related to 54659 and 54724 but possibly a new issue. To reproduce, open the chat sample page, send a message or two, and then close the browser tab. The following exception appears in the log and it doesn't seem to step from anything done in the application: java.lang.IllegalStateException: The WebSocket session has been closed and no method (apart from close()) may be called on a closed session at org.apache.tomcat.websocket.WsSession.checkState(WsSession.java:516) at org.apache.tomcat.websocket.WsSession.getMessageHandlers(WsSession.java:191) at org.apache.tomcat.websocket.pojo.PojoEndpointBase.onClose(PojoEndpointBase.java:113) at org.apache.tomcat.websocket.WsSession.fireEndpointOnClose(WsSession.java:392) at org.apache.tomcat.websocket.WsSession.onClose(WsSession.java:370) at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.close(WsHttpUpgradeHandler.java:166) at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.access$200(WsHttpUpgradeHandler.java:44) at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler$WsReadListener.onDataAvailable(WsHttpUpgradeHandler.java:192) at org.apache.coyote.http11.upgrade.AbstractServletInputStream.onDataAvailable(AbstractServletInputStream.java:169) at org.apache.coyote.http11.upgrade.AbstractProcessor.upgradeDispatch(AbstractProcessor.java:94) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:618) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1581) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1537) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) at java.lang.Thread.run(Thread.java:722)</description>
    <commit commitTime="2013-04-23 23:13:20" id="e26d61d"/>
    <fixedFiles>
      <file>webapps/examples/WEB-INF/classes/websocket/chat/ChatAnnotation.java</file>
    </fixedFiles>
  </bug>
  <bug id="54800" reportTime="2013-04-04 21:47:00">
    <summary>Possible thread/memory leak with use of WebSocketContainer</summary>
    <description>Whenever WebSocketContainer is used to connect to a server endpoint, the following message appears when Tomcat shuts down: SEVERE: The web application [/websocket-test] appears to have started a thread named [Thread-4] but has failed to stop it. This is very likely to create a memory leak. The message is repeated for 6 different threads. I don't have proof this is caused by the use of WebSocketContainer but the messages don't appear when it isn't used. The Endpoint used to connect is very simple. It sends a message when the session is opened to the EchoEndpoint on the server side, and prints the response and closes when the message is echoed back.</description>
    <commit commitTime="2013-04-23 23:13:20" id="d2630df"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/websocket/WsWebSocketContainer.java</file>
    </fixedFiles>
  </bug>
  <bug id="54708" reportTime="2013-03-15 22:22:13">
    <summary>Use base file name ("ROOT") as the work directory for the default webapp instead of "_"</summary>
    <description/>
    <commit commitTime="2013-04-24 04:46:40" id="59a0676"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="54781" reportTime="2013-04-01 19:32:18">
    <summary>NPE in WsServerContainer if there is no matching path</summary>
    <description/>
    <commit commitTime="2013-04-24 04:46:40" id="67ed3e7"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/websocket/server/WsFilter.java</file>
      <file>java/org/apache/tomcat/websocket/server/WsServerContainer.java</file>
    </fixedFiles>
  </bug>
  <bug id="54178" reportTime="2012-11-21 08:22:00">
    <summary>[CVE-2013-2071] runtime exception in onComplete of AsyncListener, will make org.apache.catalina.connector.Request not recycled (orginally reported MESSAGE POST to tomcat, but it called doGet)</summary>
    <description>one HTTP request use POST method, but in tomcat it calls doGet() what is really strage. as I only tested in 7.0.23, and 7.0.32. in 7.0.32, 7.0.32 is more reproduceable than 7.0.23. I know it must be a very strange issue, as tomcat has so many release. I can't believe it if I didn't see it with my own eyes. so I attache the image.</description>
    <commit commitTime="2013-04-24 18:40:00" id="4171baf"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/AsyncContextImpl.java</file>
      <file>test/org/apache/catalina/core/TestAsyncContextImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="54801" reportTime="2013-04-04 22:24:00">
    <summary>EL-like expressions in jsp:scriptlet break compilation of JSP XML documents</summary>
    <description/>
    <commit commitTime="2013-04-25 22:26:40" id="1631be1"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/JspDocumentParser.java</file>
      <file>test/org/apache/jasper/compiler/TestJspDocumentParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="54888" reportTime="2013-04-24 16:49:45">
    <summary>TagPlugin "ForEach" doesn't support CSV items</summary>
    <description/>
    <commit commitTime="2013-04-29 20:53:20" id="d440ae2"/>
    <fixedFiles>
      <file>java/org/apache/jasper/tagplugins/jstl/core/ForEach.java</file>
      <file>test/org/apache/jasper/tagplugins/jstl/core/TestForEach.java</file>
    </fixedFiles>
  </bug>
  <bug id="54926" reportTime="2013-05-04 01:23:20">
    <summary>WsFilter performs handshake validation even if it doesn't have a mapped endpoint</summary>
    <description>WsFilter performs several validations on WebSocket requests before checking if there is a registered Endpoint. I think the check for registered Endponts (and delegation to the next Filter) should take place first and the filter should do no further processing if there is mapped Endpoint for that URL. For example a SockJS protocol test send a POST request with a connection and upgrade headers but no ws version header and expects back a 405 (invalid HTTP method) where WsFilter sends 426 even though it has no Endpoint mapped at that URL.</description>
    <commit commitTime="2013-05-04 17:33:20" id="2df191f"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/websocket/server/WsFilter.java</file>
    </fixedFiles>
  </bug>
  <bug id="54906" reportTime="2013-04-29 19:25:04">
    <summary>WebappClassLoader.loadedByThisOrChild can throw ConcurrentModificationException</summary>
    <description/>
    <commit commitTime="2013-05-05 04:40:00" id="c06707c"/>
    <fixedFiles>
      <file>java/org/apache/catalina/loader/WebappClassLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="54703" reportTime="2013-03-15 14:09:19">
    <summary>Nullpointer exception in HttpParser.parseMediaType</summary>
    <description>input for parseMediaType() is ---------- multipart/signed; protocol="application/pkcs7-signature"; micalg=sha-256; boundary="----=_Part_121_929034657.1363355797756" ---------- exception trace java.lang.NullPointerException at org.apache.tomcat.util.http.parser.HttpParser.parseMediaType(HttpParser.java:215) at org.apache.tomcat.util.http.parser.MediaTypeCache.parse(MediaTypeCache.java:54) at org.apache.catalina.connector.Response.setContentType(Response.java:806) at org.apache.catalina.connector.Response.checkSpecialHeader(Response.java:1119) at org.apache.catalina.connector.Response.setHeader(Response.java:1446) at org.apache.catalina.connector.ResponseFacade.setHeader(ResponseFacade.java:535)</description>
    <commit commitTime="2013-05-07 23:20:00" id="7aeab0e"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/http/parser/HttpParser.java</file>
      <file>test/org/apache/tomcat/util/http/parser/TestMediaType.java</file>
    </fixedFiles>
  </bug>
  <bug id="54974" reportTime="2013-05-15 08:23:39">
    <summary>SessionCookieConfig.setXXX methods must throw IllegalStateException when invoked after initialization phase</summary>
    <description>According to Servlet 3.0 javadoc javax.servlet.SessionCookieConfig setter methods must throw IllegalStateException when invoked after initialization phase setComment(String) setDomain(String) setHttpOnly(boolean) setMaxAge(int) setName(String) setPath(String) setSecure(boolean) " Throws: java.lang.IllegalStateException - if the ServletContext from which this SessionCookieConfig was acquired has already been initialized "</description>
    <commit commitTime="2013-05-15 17:26:40" id="41462ca"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ApplicationContext.java</file>
      <file>java/org/apache/catalina/core/ApplicationSessionCookieConfig.java</file>
      <file>test/org/apache/catalina/core/TestApplicationSessionCookieConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="54981" reportTime="2013-05-16 08:02:36">
    <summary>ServletContext.getJspConfigDescriptor() should return null when there is no jsp configuration</summary>
    <description>According to Servlet 3.0 javadoc ServletContext.getJspConfigDescriptor() must return NULL when there is no jsp configuration: " Returns: the &lt;jsp-config&gt; related configuration that was aggregated from the web.xml and web-fragment.xml descriptor files of the web application represented by this ServletContext, or null if no such configuration exists "</description>
    <commit commitTime="2013-05-16 15:40:00" id="aabef09"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ApplicationContext.java</file>
      <file>test/org/apache/catalina/core/TestApplicationContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="54955" reportTime="2013-05-13 03:50:12">
    <summary>Mapping to application context root returns 404 after reload</summary>
    <description/>
    <commit commitTime="2013-05-21 04:00:00" id="cdbf6b0"/>
    <fixedFiles>
      <file>java/org/apache/catalina/mapper/Mapper.java</file>
    </fixedFiles>
  </bug>
  <bug id="54928" reportTime="2013-05-04 12:41:30">
    <summary>IllegalStateException: Calling [asyncError()] is not valid for a request with Async state [COMPLETING]</summary>
    <description>In an async scenario (request.startAsync), when the client goes away, trying to write to the response raises an IOException. If I then call asyncContext.complete() in order to finalize and clean up the request, soon after the following exception occurs: java.lang.IllegalStateException: Calling [asyncError()] is not valid for a request with Async state [COMPLETING] at org.apache.coyote.AsyncStateMachine.asyncError(AsyncStateMachine.java:304) at org.apache.coyote.http11.AbstractHttp11Processor.action(AbstractHttp11Processor.java:793) at org.apache.coyote.Request.action(Request.java:373) at org.apache.catalina.core.AsyncContextImpl.setErrorState(AsyncContextImpl.java:441) at org.apache.catalina.connector.CoyoteAdapter.asyncDispatch(CoyoteAdapter.java:312) at org.apache.coyote.http11.AbstractHttp11Processor.asyncDispatch(AbstractHttp11Processor.java:1509) at org.apache.coyote.http11.Http11NioProcessor.asyncDispatch(Http11NioProcessor.java:221) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:619) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1581) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1540) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) at java.lang.Thread.run(Thread.java:722) It looks like an attempt to maybe to send an error event to AsyncListener's but asyncContext.complete has already been called. Is calling asyncContext.complete() a reasonable way to handle an IOException from the response in order to finalize the request and release any resorces associated with it?</description>
    <commit commitTime="2013-05-24 20:53:20" id="3960b22"/>
    <fixedFiles>
      <file>test/org/apache/catalina/connector/TestCoyoteAdapter.java</file>
    </fixedFiles>
  </bug>
  <bug id="54984" reportTime="2013-05-16 11:15:20">
    <summary>multipart/form-data is not always read with correct encoding</summary>
    <description>The bug occurs when form data is posted as multipart/form-data and using Servlet 3 API to get posted files. In a servlet, if we set the encoding: request.setCharacterEncoding("UTF-8"); Then invoke: request.getParts() And then invoke: String text = request.getParameter("sometextfield"); UTF-8 characters in the text have been garbled. Order of method calls are significant, if a getParameter is called before getParts, the correct encoding will be used. However, the order which you invoke the methods should not matter.</description>
    <commit commitTime="2013-05-25 02:26:40" id="7558546"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/Request.java</file>
      <file>test/org/apache/catalina/connector/TestRequest.java</file>
    </fixedFiles>
  </bug>
  <bug id="55019" reportTime="2013-05-27 12:55:28">
    <summary>&lt;jsp:include page="blabla" flush="true"/&gt; failed to compile under security manager</summary>
    <description/>
    <commit commitTime="2013-05-27 23:53:20" id="76a7098"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/AbstractOutputBuffer.java</file>
    </fixedFiles>
  </bug>
  <bug id="54944" reportTime="2013-05-09 14:33:23">
    <summary>Enhancements to TestFormAuthenticator</summary>
    <description/>
    <commit commitTime="2013-05-28 19:20:00" id="0de078e"/>
    <fixedFiles>
      <file>test/org/apache/catalina/authenticator/TestFormAuthenticator.java</file>
    </fixedFiles>
  </bug>
  <bug id="54947" reportTime="2013-05-09 20:27:01">
    <summary>Http11NioProtocol generates HTTP 505 responses on valid requests if request is split across multiple packets</summary>
    <description>If an HTTP request is broken up across multiple packets *and* the first packet contains a GET request up to "\r" AND the "\n" terminating the first line of the request is included in the next packet Tomcat incorrectly throws an HTTP "505 Version Not Supported" response. This is with the Http11NioProtocol connector only - the default HTTP/1.1 connector does not exhibit this problem. An example request: Packet 1: GET / HTTP/1.1\r Packet 2: \nHost: localhost\r\n Packet 3: Connection: Close\r\n\r\n Response: HTTP/1.1 505 HTTP Version Not Supported Server: Apache-Coyote/1.1 Date: Thu, 09 May 2013 20:23:58 GMT Connection: close The following Python program reproduces the problem for me in both Tomcat 6.0.37 and Tomcat 7.0.39: """ #!/usr/bin/python import socket import time s = socket.socket() s.connect(("localhost",8080)) s.sendall("GET / HTTP/1.1\r") time.sleep(1.5) # make sure the above goes out in its own packet s.sendall("\nHost: localhost\r\n") s.sendall("Connection: close\r\n\r\n") print s.makefile().read() """ Moving the "\n" to from the second sendall to the end of the first sendall causes Tomcat to respond correctly.</description>
    <commit commitTime="2013-05-28 19:20:00" id="f763975"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/InternalNioInputBuffer.java</file>
      <file>test/org/apache/catalina/startup/SimpleHttpClient.java</file>
      <file>test/org/apache/coyote/http11/TestInternalInputBuffer.java</file>
    </fixedFiles>
  </bug>
  <bug id="54961" reportTime="2013-05-14 02:56:42">
    <summary>Make "compress" configurable in SpdyProxyProtocol</summary>
    <description/>
    <commit commitTime="2013-05-28 19:20:00" id="c25112b"/>
    <fixedFiles>
      <file>java/org/apache/coyote/spdy/SpdyProxyProtocol.java</file>
    </fixedFiles>
  </bug>
  <bug id="54963" reportTime="2013-05-14 06:50:20">
    <summary>Concurrent issue of Spdy/NetSupportSocket</summary>
    <description/>
    <commit commitTime="2013-05-28 19:20:00" id="6272fca"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/spdy/NetSupportSocket.java</file>
    </fixedFiles>
  </bug>
  <bug id="54964" reportTime="2013-05-14 06:57:34">
    <summary>Class loading issue of "TagPlugin" in TagPluginManager</summary>
    <description/>
    <commit commitTime="2013-05-28 19:20:00" id="65ab66e"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/TagPluginManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="54971" reportTime="2013-05-15 02:16:03">
    <summary>javax.servlet.http.Part.write(String fileName) is not properly implemented</summary>
    <description>1. fileName parameter / relative vs absolute filaName parameter specification in &lt;1&gt;&lt;JSR-000315 Java Servlet 3.0 Final Release javadocs&gt; is different from the &lt;2&gt;&lt;javax API tomcat refers to&gt;. &lt;1&gt; &lt;JSR-000315 Java Servlet 3.0 Final Release javadocs&gt; Parameters:fileName - the name of the file to which the stream will be written. The file is created relative to the location as specified in the MultipartConfig &lt;2&gt; javax. API tomcat refers to * @param fileName The location into which the uploaded part should be * stored. Relative locations are relative to {@link * javax.servlet.MultipartConfigElement#getLocation()} Tomcat is implemented as specified in &lt;2&gt; so that it can process "absolute path", but it should only accept "relative path" as specified in &lt;1&gt; &lt;JSR-000315 Java Servlet 3.0 Final Release javadocs&gt; 2. If MultiPartConfig.location is not set, write( String relative path ) throws FileNotFound Exception. A default location needs to be set in order to avoid such exception. example) os: windows8 part.write("/test"); java.io.IOException: java.io.FileNotFoundException: \test (Access is denied) at org.apache.catalina.core.ApplicationPart.write(ApplicationPart.java:123) at servlet.multipart.MultipleUploadServlet.doPost(MultipleUploadServlet.java:76) at javax.servlet.http.HttpServlet.service(HttpServlet.java:647) at javax.servlet.http.HttpServlet.service(HttpServlet.java:728) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99) at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:947) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408) at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1009) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:589) at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:312) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918) at java.lang.Thread.run(Thread.java:662)</description>
    <commit commitTime="2013-05-28 22:06:40" id="cccd0ac"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/Request.java</file>
      <file>java/org/apache/catalina/core/ApplicationPart.java</file>
    </fixedFiles>
  </bug>
  <bug id="54997" reportTime="2013-05-21 07:22:32">
    <summary>SSL Handshake implementation in AsycnChannelWrapperSecure does not handle SSLEngineResult.Status.BUFFER_UNDERFLOW and SSLEngineResult.Status.BUFFER_OVERFLOW states</summary>
    <description/>
    <commit commitTime="2013-05-29 17:33:20" id="6c6b25c"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/websocket/AsyncChannelWrapperSecure.java</file>
    </fixedFiles>
  </bug>
  <bug id="54999" reportTime="2013-05-21 19:50:48">
    <summary>JSESSIONIDSSO not re-created upon re-authentication on the same request - logout() and login(username,password)</summary>
    <description>In testing I found that the JSESSIONIDSSO was not re-created upon re-authentication via logout() and login(username,password) in the same request. The problem stemmed from the REQ_SSOID_NOTE that was was not reset upon request.logout(), whereas the documentation indicates that a logout() from any web-app should logout() from all web-apps. When the REQ_SSOID_NOTE is not removed upon logout(), a subsequent login(username,password) on the same request will re-create a JSESSIONID for the current web-app but fails to re-create a JSESSIONIDSSO since the REQ_SSO_ID_NOTE still lingers on the request. AuthenticatorBase.java adjustment for logout(request) that removes the REQ_SSOID_NOTE so that a subsequent login(username,password) will work on the same request: @Override public void logout(Request request) throws ServletException { register(request, request.getResponse(), null, null, null, null); request.removeNote(Constants.REQ_SSOID_NOTE); } I'll upload a diff-patch against the trunk and for 7.0.40.</description>
    <commit commitTime="2013-05-30 21:20:00" id="6d789fe"/>
    <fixedFiles>
      <file>java/org/apache/catalina/authenticator/AuthenticatorBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="55035" reportTime="2013-05-31 16:05:20">
    <summary>Deploy ROOT webapp with version through text manager using Ant</summary>
    <description>Currently Ant "deploy" task does not support separate parameter "version" and, thanks to URLEncoder, there is no workaround for that. But for apps with not empty context it's possible to define version using ##, like setting path to "/someContext#someVersion". For apps with empty context we receive error: Case #1: &lt;deploy url="{tomcat.manager}/text" username="${username}", password="${password}" path="/ROOT##12345" war="${pathtowar}" /&gt; Result: Failed to deploy application at context path /ROOT##12345 Case #1: &lt;deploy url="{tomcat.manager}/text" username="${username}", password="${password}" path="/##12345" war="${pathtowar}" /&gt; Result: Failed to deploy application at context path /##12345</description>
    <commit commitTime="2013-06-04 04:06:40" id="712a351"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ant/DeployTask.java</file>
    </fixedFiles>
  </bug>
  <bug id="55046" reportTime="2013-06-02 00:48:49">
    <summary>CORS Filter</summary>
    <description/>
    <commit commitTime="2013-06-04 18:00:00" id="72edec7"/>
    <fixedFiles>
      <file>java/org/apache/catalina/filters/CorsFilter.java</file>
      <file>test/org/apache/catalina/filters/TestCorsFilter.java</file>
      <file>test/org/apache/catalina/filters/TesterFilterChain.java</file>
      <file>test/org/apache/catalina/filters/TesterFilterConfigs.java</file>
      <file>test/org/apache/catalina/filters/TesterHttpServletRequest.java</file>
      <file>test/org/apache/catalina/filters/TesterHttpServletResponse.java</file>
      <file>test/org/apache/catalina/filters/TesterServletContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="55052" reportTime="2013-06-03 13:08:20">
    <summary>[JULI] Make ClassLoaderLogManager.getProperty() to try unprefixed property if prefixed one does not exist</summary>
    <description/>
    <commit commitTime="2013-06-04 20:46:40" id="99562d3"/>
    <fixedFiles>
      <file>java/org/apache/juli/ClassLoaderLogManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="55073" reportTime="2013-06-07 14:23:24">
    <summary>wasted work in ValidateVisitor.isExpression()</summary>
    <description/>
    <commit commitTime="2013-06-18 15:20:00" id="3e2ceee"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Validator.java</file>
    </fixedFiles>
  </bug>
  <bug id="55108" reportTime="2013-06-17 18:12:00">
    <summary>Wasted work in "AbstractReplicatedMap.excludeFromSet"</summary>
    <description/>
    <commit commitTime="2013-06-18 15:20:00" id="4979721"/>
    <fixedFiles>
      <file>java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java</file>
    </fixedFiles>
  </bug>
  <bug id="55109" reportTime="2013-06-17 18:24:46">
    <summary>Wasted work in "WebdavServlet.isLocked"</summary>
    <description/>
    <commit commitTime="2013-06-18 15:20:00" id="82bccd2"/>
    <fixedFiles>
      <file>java/org/apache/catalina/servlets/WebdavServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="55110" reportTime="2013-06-17 18:37:18">
    <summary>Wasted work in "TestNonLoginAndBasicAuthenticator.doTestBasic"</summary>
    <description/>
    <commit commitTime="2013-06-18 15:20:00" id="c48a2ed"/>
    <fixedFiles>
      <file>test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java</file>
      <file>test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java</file>
    </fixedFiles>
  </bug>
  <bug id="53987" reportTime="2012-10-09 19:02:28">
    <summary>Log uncovered HTTP methods in combined security constraints</summary>
    <description>It is usually an error (and a security hole) if security constraints are defined for some but not all HTTP methods for a given URL. If such a situation is detected on web application start, log it.</description>
    <commit commitTime="2013-06-20 06:13:20" id="f78c1a4"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="54745" reportTime="2013-03-22 23:07:06">
    <summary>Tomcat JarScanning does not work when Tomcat started with Java Web Start</summary>
    <description/>
    <commit commitTime="2013-06-20 22:53:20" id="c7c30b6"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/scan/StandardJarScanner.java</file>
    </fixedFiles>
  </bug>
  <bug id="55101" reportTime="2013-06-15 15:01:40">
    <summary>BasicAuthenticator parser and associated unit tests</summary>
    <description/>
    <commit commitTime="2013-06-21 04:26:40" id="c4a50f5"/>
    <fixedFiles>
      <file>java/org/apache/catalina/authenticator/BasicAuthenticator.java</file>
      <file>test/org/apache/catalina/authenticator/TestBasicAuthParser.java</file>
      <file>test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java</file>
    </fixedFiles>
  </bug>
  <bug id="55126" reportTime="2013-06-21 13:16:22">
    <summary>IAE is thrown during deployment of ServerEndPoint having multiple text decoders</summary>
    <description/>
    <commit commitTime="2013-06-22 05:26:40" id="366ddff"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java</file>
    </fixedFiles>
  </bug>
  <bug id="55127" reportTime="2013-06-22 06:04:48">
    <summary>Encoders init and destroy methods are never called</summary>
    <description/>
    <commit commitTime="2013-06-22 22:06:40" id="93bcdde"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java</file>
      <file>java/org/apache/tomcat/websocket/WsRemoteEndpointImplClient.java</file>
      <file>java/org/apache/tomcat/websocket/WsSession.java</file>
      <file>java/org/apache/tomcat/websocket/WsWebSocketContainer.java</file>
      <file>java/org/apache/tomcat/websocket/server/WsHttpUpgradeHandler.java</file>
      <file>java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java</file>
      <file>test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java</file>
    </fixedFiles>
  </bug>
  <bug id="55102" reportTime="2013-06-15 17:09:47">
    <summary>Add ability to report time taken to prepare response</summary>
    <description/>
    <commit commitTime="2013-06-24 04:40:00" id="7aea9cb"/>
    <fixedFiles>
      <file>java/org/apache/catalina/valves/AccessLogValve.java</file>
      <file>java/org/apache/coyote/Response.java</file>
    </fixedFiles>
  </bug>
  <bug id="55125" reportTime="2013-06-21 11:23:54">
    <summary>Tomcat does not shut down if LifecycleListener throws an exception</summary>
    <description/>
    <commit commitTime="2013-06-24 04:40:00" id="3a36a8f"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardService.java</file>
      <file>java/org/apache/catalina/startup/Catalina.java</file>
    </fixedFiles>
  </bug>
  <bug id="55151" reportTime="2013-06-27 18:00:57">
    <summary>Fix in MsgByte encoder and decoder TestEncodingDecoding websocket test</summary>
    <description/>
    <commit commitTime="2013-06-28 03:06:40" id="d71136a"/>
    <fixedFiles>
      <file>test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java</file>
    </fixedFiles>
  </bug>
  <bug id="55017" reportTime="2013-05-24 14:50:10">
    <summary>Ability to configure RMI bind address</summary>
    <description/>
    <commit commitTime="2013-07-01 17:13:20" id="45f59bb"/>
    <fixedFiles>
      <file>java/org/apache/catalina/mbeans/JmxRemoteLifecycleListener.java</file>
    </fixedFiles>
  </bug>
  <bug id="55158" reportTime="2013-06-29 18:55:30">
    <summary>Wasted work in AttributeNamesEnumerator constructor</summary>
    <description/>
    <commit commitTime="2013-07-01 20:00:00" id="ca956bd"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ApplicationHttpRequest.java</file>
    </fixedFiles>
  </bug>
  <bug id="55159" reportTime="2013-06-29 19:12:03">
    <summary>Wasted work in ErrorReportValve.getPartialServletStackTrace</summary>
    <description/>
    <commit commitTime="2013-07-01 20:00:00" id="b7cad6b"/>
    <fixedFiles>
      <file>java/org/apache/catalina/valves/ErrorReportValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="53777" reportTime="2012-08-24 13:50:52">
    <summary>Ability to bundle JAAS Configuration in Webappp</summary>
    <description/>
    <commit commitTime="2013-07-01 22:46:40" id="6871d4c"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/JAASRealm.java</file>
    </fixedFiles>
  </bug>
  <bug id="55160" reportTime="2013-06-29 21:35:09">
    <summary>NIO connectionUploadTimeout can't work</summary>
    <description>when i configure disableUploadTimeout="false" and connectionTimeout="20000" ,connectionUploadTimeout="30000" . I found the connectionUploadTimeout doesn't work, because the code in internalNioInputBuffer.readSocket(): ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ try { NioEndpoint.KeyAttachment att = (NioEndpoint.KeyAttachment)socket.getAttachment(false); if ( att == null ) throw new IOException("Key must be cancelled."); nRead = pool.read(socket.getBufHandler().getReadBuffer(),socket,selector,att.getTimeout()); } catch ( EOFException eof ) { nRead = -1; } finally { if ( selector != null ) pool.put(selector); } ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ att.getTimeout() is the connectionTimeout ,not the connectionUploadTimeout. so , in NioBlockingSelector.read(), the readTimeout is connectionTimeout</description>
    <commit commitTime="2013-07-01 22:46:40" id="9a01f2d"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/InternalNioInputBuffer.java</file>
    </fixedFiles>
  </bug>
  <bug id="55177" reportTime="2013-07-01 19:49:21">
    <summary>connectionTimeout=-1 causes high CPU</summary>
    <description/>
    <commit commitTime="2013-07-02 04:20:00" id="df6cee7"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/Http11Processor.java</file>
    </fixedFiles>
  </bug>
  <bug id="55179" reportTime="2013-07-01 20:54:45">
    <summary>Incorrect Parameter Name in RemoteIpValve Examples</summary>
    <description/>
    <commit commitTime="2013-07-02 04:20:00" id="21f0a5c"/>
    <fixedFiles>
      <file>java/org/apache/catalina/valves/RemoteIpValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="55174" reportTime="2013-07-01 12:14:30">
    <summary>[jsr 356][websocket] MessageHandler never gets notified again after it throws exception</summary>
    <description>I have a test which adds a MessageHandler which gets notified on text messages. If its implementation method onMessage(String text) throws some exception (e.g. runtime exception), this MessageHandler will never ever be notified again for any new text messages received by the session. I suppose this happens because the exception actually kills the underlying thread in which the notification has happened. I think the client side implementation shall be more robust and expect and be prepared for exceptions coming from calls to user code.</description>
    <commit commitTime="2013-07-02 07:06:40" id="ddd73d0"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/websocket/WsFrameBase.java</file>
    </fixedFiles>
  </bug>
  <bug id="55180" reportTime="2013-07-02 00:01:40">
    <summary>connectionTimeout="-1" causes timeout can't be negative</summary>
    <description>I configured server.xml like this: connectionTimeout="-1" disableUploadTimeout="false" connectionUploadTimeout="200" (maybe it is stupid to configure like this,if connectionTimeout=-1,can i make disableUploadTimeout=false?). It will cause : java.lang.IllegalArgumentException: timeout can't be negative at sun.nio.ch.SocketAdaptor.setSoTimeout(SocketAdaptor.java:361) at org.apache.coyote.http11.Http11NioProcessor.setSocketTimeout(Http11NioProcessor.java:251) ...... because of : if (!disableUploadTimeout) { //endpoint.getSoTimeout()=-1. setSocketTimeout(endpoint.getSoTimeout()); } ~~~~~~~~~~~~~~~~~~~~~~~~~ another thing: if i configure connectionTimeout="0". in NioBlockingSelector.read(ByteBuffer buf, NioChannel socket, long readTimeout),readTimeout = 0, in case socket.read(buf) == 0, it make timeout=true. if (readTimeout &gt;= 0 &amp;&amp; (keycount == 0)) timedout = (System.currentTimeMillis() - time) &gt;= readTimeout; then throw the SocketTimeoutException(). thank you.</description>
    <commit commitTime="2013-07-02 15:26:40" id="4da2de0"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/AbstractHttp11Processor.java</file>
    </fixedFiles>
  </bug>
  <bug id="55181" reportTime="2013-07-02 08:01:55">
    <summary>Ping and Pong messages should have identical application data</summary>
    <description/>
    <commit commitTime="2013-07-02 15:26:40" id="19c0bd3"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/websocket/WsPongMessage.java</file>
      <file>test/org/apache/tomcat/websocket/TestWsPingPongMessages.java</file>
    </fixedFiles>
  </bug>
  <bug id="55165" reportTime="2013-06-30 19:49:03">
    <summary>subprotocols not available with annotated serverendpoint</summary>
    <description/>
    <commit commitTime="2013-07-02 18:13:20" id="b069c78"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/websocket/server/WsServerContainer.java</file>
    </fixedFiles>
  </bug>
  <bug id="55183" reportTime="2013-07-02 12:04:47">
    <summary>Missing WS Protocol Header in session negotiatedHeaders</summary>
    <description/>
    <commit commitTime="2013-07-02 23:46:40" id="a634d85"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/websocket/Constants.java</file>
      <file>java/org/apache/tomcat/websocket/WsWebSocketContainer.java</file>
      <file>test/org/apache/tomcat/websocket/TestWsSubprotocols.java</file>
    </fixedFiles>
  </bug>
  <bug id="55184" reportTime="2013-07-02 13:14:35">
    <summary>NPE in PojoMethodMapping getMessageHandler</summary>
    <description/>
    <commit commitTime="2013-07-02 23:46:40" id="a267dbf"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java</file>
    </fixedFiles>
  </bug>
  <bug id="55186" reportTime="2013-07-03 00:54:24">
    <summary>useIPVHosts=true , incorrect to get Request.localName</summary>
    <description/>
    <commit commitTime="2013-07-05 21:13:20" id="2eb065f"/>
    <fixedFiles>
      <file>java/org/apache/coyote/Request.java</file>
    </fixedFiles>
  </bug>
  <bug id="55200" reportTime="2013-07-05 14:27:48">
    <summary>[websocket] Problem writing many subsequent binary messages</summary>
    <description>I see sometimes failing connections due to IOException (see below). This happens when trying to send thousands of binary messages (1024 bytes each) without any delay between the subsequent messages. Having look at the code in AsyncChannelWrapperSecure$WriteTask.run(219), I think it is not correct to assume that if not all of the bytes in the buffer are written, this shall produce IOException. I think in this case, there shall be an attempt to write the rest of the bytes in a cycle. Here one exception I got during the test: Exception is :java.io.IOException: java.util.concurrent.ExecutionException: java.io.IOException: Only wrote [460] of [1,098] bytes at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:204) at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendBytes(WsRemoteEndpointImplBase.java:113) at org.apache.tomcat.websocket.WsRemoteEndpointBasic.sendBinary(WsRemoteEndpointBasic.java:43) at WebsocketsTestManager$TestThread.run(WebsocketsTestManager.java:271) Caused by: java.util.concurrent.ExecutionException: java.io.IOException: Only wrote [460] of [1,098] bytes at org.apache.tomcat.websocket.WsRemoteEndpointImplBase$FutureToSendHandler.get(WsRemoteEndpointImplBase.java:729) at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:202) ... 3 more Caused by: java.io.IOException: Only wrote [460] of [1,098] bytes at org.apache.tomcat.websocket.AsyncChannelWrapperSecure$WriteTask.run(AsyncChannelWrapperSecure.java:220) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:789)</description>
    <commit commitTime="2013-07-06 00:00:00" id="00e4f3f"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/websocket/AsyncChannelWrapperSecure.java</file>
    </fixedFiles>
  </bug>
  <bug id="55210" reportTime="2013-07-07 21:44:14">
    <summary>SEVERE: The ServletContentInitializer [# Licensed to the Apache Software Foundation (ASF) under one or more] could not be created</summary>
    <description/>
    <commit commitTime="2013-07-08 15:53:20" id="b932ace"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="55166" reportTime="2013-06-30 20:03:24">
    <summary>schemaLocation references between servlet and jsp XSDs are invalid</summary>
    <description>The javax/servlet/resources package does not contain the JSP specification XSDs. These are referenced from the web-app or web-common xsds and define elements like &lt;jsp-config&gt;.</description>
    <commit commitTime="2013-07-08 18:40:00" id="f554475"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/Constants.java</file>
    </fixedFiles>
  </bug>
  <bug id="55217" reportTime="2013-07-09 07:09:00">
    <summary>Common EntityResolver that can be used by Catalina and Jasper</summary>
    <description>Duplicate functionality exists in both SchemaResolver and ParserUtils.MyEntityResolver. There's also a basic version in Digester.</description>
    <commit commitTime="2013-07-09 16:53:20" id="5344de0"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/descriptor/LocalResolver.java</file>
      <file>java/org/apache/tomcat/util/descriptor/XmlIdentifiers.java</file>
      <file>test/org/apache/tomcat/util/descriptor/TestLocalResolver.java</file>
    </fixedFiles>
  </bug>
  <bug id="55218" reportTime="2013-07-09 07:27:23">
    <summary>Upgrade Digester to be based on DefaultHandler2 and use LexicalHandler to detect publicId</summary>
    <description>Digester uses SAX2 features but is still based the SAX1 DefaultHandler. By upgrading to DefaultHandler2 it would be able to handle baseURIs when resolving entities and would have a default implementation of a LexicalHandler. Using LexicalHandler would allow it to respond directly to the startDTD event that reports the DOCTYPE (if present) so that it would not need to infer that from the first attempt to resolve an entity.</description>
    <commit commitTime="2013-07-09 16:53:20" id="aa7896b"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
      <file>java/org/apache/tomcat/util/descriptor/web/WebXml.java</file>
      <file>java/org/apache/tomcat/util/digester/Digester.java</file>
      <file>test/javax/servlet/resources/TestSchemaValidation.java</file>
      <file>test/org/apache/tomcat/util/descriptor/web/TestWebXml.java</file>
    </fixedFiles>
  </bug>
  <bug id="55231" reportTime="2013-07-10 04:10:10">
    <summary>NPE and incorrect version detection in JspC</summary>
    <description>JspC's JspConfig now reads version and jsp-config information from the ServletContext. It uses getMajorVersion() which returns the maximum version supported by the container. It should use getEffectiveVersion() to use the version of the web application. ServletContext.getJspConfigDescriptor() can return null if there is no &lt;jsp-config&gt; in the web.xml. JspConfig does not allow for this and will throw a NPE e.g. if there is no web.xml in the application.</description>
    <commit commitTime="2013-07-10 20:40:00" id="c8376e8"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/JspConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="55207" reportTime="2013-07-07 01:11:30">
    <summary>In XML syntax, jsp:text does not error on sub-elements from other namespaces</summary>
    <description/>
    <commit commitTime="2013-07-11 02:13:20" id="6c54031"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/JspDocumentParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="55228" reportTime="2013-07-10 00:35:33">
    <summary>AbstractHttp11Processor overwrites Date header, even when set by application</summary>
    <description/>
    <commit commitTime="2013-07-12 00:26:40" id="95ee699"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/AbstractHttp11Processor.java</file>
    </fixedFiles>
  </bug>
  <bug id="55238" reportTime="2013-07-11 08:11:07">
    <summary>[websocket] NPE in clearHandler(WsRemoteEndpointImplServer.java:156)</summary>
    <description/>
    <commit commitTime="2013-07-12 00:26:40" id="4758796"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java</file>
    </fixedFiles>
  </bug>
  <bug id="55240" reportTime="2013-07-11 11:54:55">
    <summary>[websocket] SOE in NioEndpoint</summary>
    <description/>
    <commit commitTime="2013-07-12 03:13:20" id="68f6f6f"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/upgrade/AbstractProcessor.java</file>
      <file>java/org/apache/coyote/http11/upgrade/AprProcessor.java</file>
      <file>java/org/apache/coyote/http11/upgrade/BioProcessor.java</file>
      <file>java/org/apache/coyote/http11/upgrade/NioProcessor.java</file>
      <file>java/org/apache/tomcat/util/net/NioEndpoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="55244" reportTime="2013-07-12 02:01:45">
    <summary>JspC throws ClassNotFoundException from Digester</summary>
    <description/>
    <commit commitTime="2013-07-12 17:06:40" id="8d6537d"/>
    <fixedFiles>
      <file>java/org/apache/jasper/servlet/JspCServletContext.java</file>
      <file>java/org/apache/tomcat/util/descriptor/web/WebXmlParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="55245" reportTime="2013-07-12 02:05:02">
    <summary>Add test cases for JspC</summary>
    <description>The test suite should include tests for the JspC Ant task</description>
    <commit commitTime="2013-07-12 17:06:40" id="c0c5017"/>
    <fixedFiles>
      <file>test/org/apache/jasper/TestJspC.java</file>
    </fixedFiles>
  </bug>
  <bug id="55250" reportTime="2013-07-12 03:37:02">
    <summary>JspC does not initialize tldLocationsCache resulting in NPE</summary>
    <description>Change in how ServletContext was created missed initialization of tldLocationsCache</description>
    <commit commitTime="2013-07-12 17:06:40" id="186a782"/>
    <fixedFiles>
      <file>java/org/apache/jasper/JspC.java</file>
    </fixedFiles>
  </bug>
  <bug id="55259" reportTime="2013-07-13 04:34:34">
    <summary>Unnecessary work in JspConfig</summary>
    <description>JspProperty is the same for all url patterns in a group; the current code creates a new one each iteration</description>
    <commit commitTime="2013-07-14 05:13:20" id="c6a45a6"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/JspConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="55262" reportTime="2013-07-14 01:44:18">
    <summary>Duplicate preludes and codas in same &lt;jsp-property-group&gt; are ignored</summary>
    <description>If a &lt;jsp-property-group&gt; contains multiple &lt;include-prelude&gt; elements that happen to refer to the same file only one include is performed. The same applies to codas. This happens because WebXml stores these in a LinkedHashSet rather than a List. When multiple &lt;jsp-property-group&gt;s are combined, JspConfig uses a Vector and so preserves duplicates as required by the JSP spec. I have a test case demonstrating this but before committing a fix I would like confirmation that WebXml's behaviour is incorrect.</description>
    <commit commitTime="2013-07-21 03:53:20" id="85f611e"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/descriptor/web/JspPropertyGroup.java</file>
      <file>test/org/apache/jasper/compiler/TestCompiler.java</file>
      <file>test/org/apache/jasper/servlet/TestJspCServletContext.java</file>
      <file>test/org/apache/tomcat/util/descriptor/web/TestJspPropertyGroup.java</file>
    </fixedFiles>
  </bug>
  <bug id="55291" reportTime="2013-07-22 13:33:53">
    <summary>Bug in WsServerContainer leading to NPE</summary>
    <description/>
    <commit commitTime="2013-07-22 21:33:20" id="ab6f21d"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/websocket/server/WsServerContainer.java</file>
    </fixedFiles>
  </bug>
  <bug id="55267" reportTime="2013-07-15 11:38:25">
    <summary>NIO thread locked</summary>
    <description>Did some load test and thread got stuck, see dump. Basically I just simulate 100 users that connect and disconnect.</description>
    <commit commitTime="2013-07-23 22:33:20" id="11bf498"/>
    <fixedFiles>
      <file>java/org/apache/coyote/ajp/AjpNioProcessor.java</file>
      <file>java/org/apache/coyote/http11/InternalNioOutputBuffer.java</file>
      <file>java/org/apache/coyote/http11/upgrade/NioServletOutputStream.java</file>
      <file>java/org/apache/tomcat/util/net/NioEndpoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="55287" reportTime="2013-07-21 20:44:47">
    <summary>ServletContainerInitializer in parent classloader may not be found</summary>
    <description>To include the JasperInitializer in the test environment I added an entry in testclasses/META-INF/services. This is not picked up when the parent classloader is searched because this path is a directory not a JAR file. It would be picked up if the "scanAllDirectories" extension was enabled but that should not be necessary if the search is to be semantically equivalent to j.u.ServiceLoader (which does locate it).</description>
    <commit commitTime="2013-07-29 06:20:00" id="6e514c0"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
      <file>java/org/apache/catalina/startup/WebappServiceLoader.java</file>
      <file>test/org/apache/catalina/startup/TestWebappServiceLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="55309" reportTime="2013-07-26 04:38:23">
    <summary>Concurrent issue of TagPluginManager</summary>
    <description/>
    <commit commitTime="2013-07-30 04:33:20" id="11c05b7"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/TagPluginManager.java</file>
    </fixedFiles>
  </bug>
  <bug id="55312" reportTime="2013-07-26 15:37:46">
    <summary>No SCI scan in embedded Tomcat</summary>
    <description>I like the fact that SCI scanning is off by default in a Tomcat embedded instance, but I'd lik eto be able to switch it on. It might even be possible already, but the API is non-obvious. Maybe a method in Tomcat or associated friendly helper? Would also be nice in Tomcat 7.</description>
    <commit commitTime="2013-07-31 22:13:20" id="7540e90"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/scan/StandardJarScanner.java</file>
    </fixedFiles>
  </bug>
  <bug id="55316" reportTime="2013-07-27 11:07:08">
    <summary>Ugly error log when WS client disconnects unexpectedly</summary>
    <description>When a WS browser client disconnects unexpectedly (e.g. in the SNake sample if the user just closes the browser or loads another page) you get ugle ERROR logs in the Tomcat server. E.g. 2013-07-27 12:04:34.424 ERROR 31847 --- [nio-8080-exec-7] org.apache.tomcat.websocket.WsSession : Failed to send close message to remote endpoint java.io.IOException: java.util.concurrent.ExecutionException: java.io.EOFException at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:221) at org.apache.tomcat.websocket.WsSession.sendCloseMessage(WsSession.java:466) at org.apache.tomcat.websocket.WsSession.onClose(WsSession.java:430) at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.close(WsHttpUpgradeHandler.java:172) at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.access$200(WsHttpUpgradeHandler.java:45) at org.apache.tomcat.websocket.server.WsHttpUpgradeHandler$WsReadListener.onDataAvailable(WsHttpUpgradeHandler.java:198) at org.apache.coyote.http11.upgrade.AbstractServletInputStream.onDataAvailable(AbstractServletInputStream.java:169) at org.apache.coyote.http11.upgrade.AbstractProcessor.upgradeDispatch(AbstractProcessor.java:95) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:630) at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1585) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1543) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:724) Caused by: java.util.concurrent.ExecutionException: java.io.EOFException at org.apache.tomcat.websocket.WsRemoteEndpointImplBase$FutureToSendHandler.get(WsRemoteEndpointImplBase.java:779) at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:217) ... 14 common frames omitted Caused by: java.io.EOFException: null at org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.doClose(WsRemoteEndpointImplServer.java:126) at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.close(WsRemoteEndpointImplBase.java:531) at org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.onWritePossible(WsRemoteEndpointImplServer.java:107) at org.apache.tomcat.websocket.server.WsRemoteEndpointImplServer.doWrite(WsRemoteEndpointImplServer.java:71) at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.writeMessagePart(WsRemoteEndpointImplBase.java:353) at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessage(WsRemoteEndpointImplBase.java:254) at org.apache.tomcat.websocket.WsRemoteEndpointImplBase.startMessageBlock(WsRemoteEndpointImplBase.java:211) ... 14 common frames omitted Presumably this is expected to be relatively normal, so I'd expect a lot less noise (and no ERROR) in the log?</description>
    <commit commitTime="2013-07-31 22:13:20" id="d370084"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/websocket/WsSession.java</file>
    </fixedFiles>
  </bug>
  <bug id="55333" reportTime="2013-07-31 17:44:41">
    <summary>JDBCRealm Digest authentication Flow is not working throws Function sequence error</summary>
    <description>Issue: Digest authentication flow is not working Error Thrown : Function sequence error PackageName: org.apache.catalina.realm ClassName : JDBCRealm MethodName: String getPassword(String username) Snapshot from above mentioned method =================================== stmt = credentials(dbConnection, username); rs = stmt.executeQuery(); // Due to this connection commit, resultset is nullified dbConnection.commit(); // While executing this statement it throws Function sequence error if (rs.next()) { dbCredentials = rs.getString(1); } =================================== Above explanation has been validate by placing 7.0.41 catalina.jar where the above changes are not there due to fix of 55071 bug Below snapshot is the error observed while trying for Digest authentication ========================================================================== Jul 31, 2013 3:43:40 PM org.apache.catalina.realm.JDBCRealm getPassword SEVERE: Exception performing authentication java.sql.SQLException: [TimesTen][TimesTen 11.2.2.5.0 ODBC Driver]Function sequence error at com.timesten.jdbc.JdbcOdbc.createSQLException(JdbcOdbc.java:3238) at com.timesten.jdbc.JdbcOdbc.standardError(JdbcOdbc.java:3387) at com.timesten.jdbc.JdbcOdbc.SQLFetch(JdbcOdbc.java:921) at com.timesten.jdbc.JdbcOdbcResultSet.next(JdbcOdbcResultSet.java:409) at org.apache.catalina.realm.JDBCRealm.getPassword(JDBCRealm.java:558) at org.apache.catalina.realm.RealmBase.getDigest(RealmBase.java:1189) at org.apache.catalina.realm.RealmBase.authenticate(RealmBase.java:409) at com.kodiak.digest.authentication.KnDigestAuthenticator$KnDigestInfo.authenticate(KnDigestAuthenticator.java:733) at com.kodiak.digest.authentication.KnDigestAuthenticator.authenticate(KnDigestAuthenticator.java:275) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:574) at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:953) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408) at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1023) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:589) at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:312) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:724) Jul 31, 2013 3:43:40 PM org.apache.catalina.realm.JDBCRealm getPassword SEVERE: Exception performing authentication java.sql.SQLException: [TimesTen][TimesTen 11.2.2.5.0 ODBC Driver]Function sequence error at com.timesten.jdbc.JdbcOdbc.createSQLException(JdbcOdbc.java:3238) at com.timesten.jdbc.JdbcOdbc.standardError(JdbcOdbc.java:3387) at com.timesten.jdbc.JdbcOdbc.SQLFetch(JdbcOdbc.java:921) at com.timesten.jdbc.JdbcOdbcResultSet.next(JdbcOdbcResultSet.java:409) at org.apache.catalina.realm.JDBCRealm.getPassword(JDBCRealm.java:558) at org.apache.catalina.realm.RealmBase.getDigest(RealmBase.java:1189) at org.apache.catalina.realm.RealmBase.authenticate(RealmBase.java:409) "localhost.2013-07-31.log" 50L, 3800C Cheers, Mahaaboob</description>
    <commit commitTime="2013-08-01 17:40:00" id="6cd42af"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/JDBCRealm.java</file>
    </fixedFiles>
  </bug>
  <bug id="55345" reportTime="2013-08-02 11:52:04">
    <summary>Webresources class AbstractResourceSet throws exception upon callong ServletContext.getRealPath("")</summary>
    <description>As described on user list: Tomcat 8, unlike Tomcat 7.0.42, throws IllegalArgumentException upon calling ServletContext.getRealPath(""). It seems that TC8 expects that argument provided to getRealPath is non-empty string. I believe that ServletContext.getRealPath should allow empty string as argument. -Ognjen Stack trace: [ERROR] java.lang.IllegalArgumentException java.lang.IllegalArgumentException at org.apache.catalina.webresources.AbstractResourceSet.checkPath(AbstractResourceSet.java:39) at org.apache.catalina.webresources.DirResourceSet.getResource(DirResourceSet.java:91) at org.apache.catalina.webresources.StandardRoot.getResourceInternal(StandardRoot.java:176) at org.apache.catalina.webresources.CachedResource.validate(CachedResource.java:62) at org.apache.catalina.webresources.Cache.getResource(Cache.java:78) at org.apache.catalina.webresources.StandardRoot.getResource(StandardRoot.java:163) at org.apache.catalina.core.StandardContext.getRealPath(StandardContext.java:4528) at org.apache.catalina.core.ApplicationContext.getRealPath(ApplicationContext.java:398) at org.apache.catalina.core.ApplicationContextFacade.getRealPath(ApplicationContextFacade.java:335) at org.apache.axis2.deployment.WarBasedAxisConfigurator.&lt;init&gt;(WarBasedAxisConfigurator.java:103) at org.apache.axis2.transport.http.AxisServlet.initConfigContext(AxisServlet.java:584) at org.apache.axis2.transport.http.AxisServlet.init(AxisServlet.java:454) at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1235) at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1148) at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:1044) at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:5025) at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5322) at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:726) at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:702) at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:698) at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:968) at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1742) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334) at java.util.concurrent.FutureTask.run(FutureTask.java:166) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:724)</description>
    <commit commitTime="2013-08-03 03:00:00" id="aa15bac"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/StandardContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="52092" reportTime="2011-10-26 11:49:26">
    <summary>Please make AsyncFileHandler and OneLineFormatter the default for logging.properties</summary>
    <description>Apache Tomcat 7 has created some very important enhancements to logging, and we should exploit them. Please make the org.apache.juli.AsyncFileHandler and org.apache.juli.OneLineFormatter the defaults for shipped conf/logging.properties. These enhancements have been vetted with over 20 releases of Apache Tomcat, let's give them some first class status.</description>
    <commit commitTime="2013-08-08 05:13:20" id="7d0408e"/>
    <fixedFiles>
      <file>java/org/apache/juli/FileHandler.java</file>
    </fixedFiles>
  </bug>
  <bug id="55404" reportTime="2013-08-12 13:09:52">
    <summary>ContextConfig#validateSecurityRoles emits three info log messages which contain a warning</summary>
    <description/>
    <commit commitTime="2013-08-12 23:06:40" id="df02b95"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
    </fixedFiles>
  </bug>
  <bug id="55400" reportTime="2013-08-10 20:20:50">
    <summary>WsFilter not compatible with async sample applications</summary>
    <description/>
    <commit commitTime="2013-08-14 19:33:20" id="3490f73"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/websocket/server/WsServerContainer.java</file>
    </fixedFiles>
  </bug>
  <bug id="55357" reportTime="2013-08-05 15:15:18">
    <summary>Cannot deserialize session when it contains Externalizable objects (using PersistentManager)</summary>
    <description>I'm using PersistentManager with JDBCStore to store sessions in my database. But in my webapplication, there is an object in my session which is an instance of org.apache.el.MethodExpressionImpl. This class implements the Externalizable interface but in this readExternal method it uses org.apache.el.util.ReflectionUtil.forName(String) which use Thread.currentThread().getContextClassLoader() as its ClassLoader. It seems to be incorrect because this method return a StandardClassLoader which cannot find my classes in WEB-INF/lib directory of my webapp. Is it the problem of the MethodExpressionImpl class which use this method or the JDBCStore which does not set the thread contextClassLoader as the WebappClassLoader ? Here is the stacktrace : SEVERE: Error processing request java.lang.IllegalStateException: Erreur lors de la deserialisation de la session 1634C328D27A31CB9FC4D52392FDB05F: {1} at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:713) at org.apache.catalina.session.PersistentManagerBase.findSession(PersistentManagerBase.java:503) at org.apache.catalina.connector.Request.isRequestedSessionIdValid(Request.java:2391) at org.apache.catalina.connector.CoyoteAdapter.parseSessionCookiesId(CoyoteAdapter.java:954) at org.apache.catalina.connector.CoyoteAdapter.postParseRequest(CoyoteAdapter.java:688) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:402) at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1002) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:585) at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:312) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:722) Caused by: java.lang.ClassNotFoundException: javax.faces.event.ActionEvent at java.net.URLClassLoader$1.run(URLClassLoader.java:366) at java.net.URLClassLoader$1.run(URLClassLoader.java:355) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(URLClassLoader.java:354) at java.lang.ClassLoader.loadClass(ClassLoader.java:423) at java.lang.ClassLoader.loadClass(ClassLoader.java:356) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:266) at org.apache.el.util.ReflectionUtil.forName(ReflectionUtil.java:62) at org.apache.el.util.ReflectionUtil.toTypeArray(ReflectionUtil.java:88) at org.apache.el.MethodExpressionImpl.readExternal(MethodExpressionImpl.java:290) at java.io.ObjectInputStream.readExternalData(ObjectInputStream.java:1835) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1794) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1348) at java.io.ObjectInputStream.readObject(ObjectInputStream.java:370) at com.sun.facelets.el.TagMethodExpression.readExternal(TagMethodExpression.java:101) at java.io.ObjectInputStream.readExternalData(ObjectInputStream.java:1835) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1794) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1348) at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1704) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342) at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1989) at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1913) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1796) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1348) at java.io.ObjectInputStream.readObject(ObjectInputStream.java:370) at java.util.ArrayList.readObject(ArrayList.java:733) at sun.reflect.GeneratedMethodAccessor90.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:601) at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1004) at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1891) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1796) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1348) at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1704) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342) at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1704) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342) at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1704) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342) at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1704) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342) at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1704) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342) at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1704) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342) at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1704) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342) at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1704) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342) at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1704) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342) at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1704) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342) at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1704) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342) at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1704) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342) at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1704) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342) at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1989) at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1913) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1796) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1348) at java.io.ObjectInputStream.readObject(ObjectInputStream.java:370) at java.util.HashMap.readObject(HashMap.java:1155) at sun.reflect.GeneratedMethodAccessor89.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:601) at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1004) at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1891) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1796) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1348) at java.io.ObjectInputStream.readObject(ObjectInputStream.java:370) at java.util.HashMap.readObject(HashMap.java:1155) at sun.reflect.GeneratedMethodAccessor89.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:601) at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1004) at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1891) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1796) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1348) at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1989) at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:499) at org.ajax4jsf.application.AjaxStateHolder.readObject(AjaxStateHolder.java:204) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:601) at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1004) at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1891) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1796) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1348) at java.io.ObjectInputStream.readObject(ObjectInputStream.java:370) at org.apache.catalina.session.StandardSession.readObject(StandardSession.java:1595) at org.apache.catalina.session.StandardSession.readObjectData(StandardSession.java:1060) at org.apache.catalina.session.JDBCStore.load(JDBCStore.java:657) at org.apache.catalina.session.PersistentManagerBase.swapIn(PersistentManagerBase.java:707) ... 11 more</description>
    <commit commitTime="2013-08-15 23:20:00" id="e19e794"/>
    <fixedFiles>
      <file>java/org/apache/catalina/session/FileStore.java</file>
      <file>java/org/apache/catalina/session/JDBCStore.java</file>
    </fixedFiles>
  </bug>
  <bug id="55354" reportTime="2013-08-05 02:53:29">
    <summary>JNDIRealm.getPrincipal(context,username,gssCredential) corrupts realm context</summary>
    <description>The getPrincipal(context,username,gssCredential) method in JNDIRealm is designed to allow delegated credentials to be applied to the directory server connection as part of SPNEGO authentication. This is done by manipulation of a number of the directory context's environment parameters. However, as currently implemented, these environment parameters are forcibly cleared after the getUser() call regardless of whether the values were even changed (i.e. if isUseDelegatedCredential() returned false). If the container realm is defined to use GSSAPI authentication, only the first SPNEGO authentication request will succeed. All subsequent requests will fail with this exception: javax.naming.NamingException: [LDAP: error code 1 - 000004DC: LdapErr: DSID-0C0906DC, comment: In order to perform this operation a successful bind must be completed on the connection., data 0, v1db0 The exception is due to the Context.SECURITY_AUTHENTICATION being cleared by getPrincipal() - resulting in a attempted "simple" bind with no username/password (i.e. anonymous). A workaround is to ensure that the connectionName and connectionPassword parameters are specified in the realm definition - however, if one is using GSSAPI - this shouldn't be necessary and certainly defeats the purpose of using GSSAPI in the first place. The code should preserve pre-existing environment parameters in the context before changing them, then restore those values afterwards - rather than just clearing the settings completely.</description>
    <commit commitTime="2013-08-16 04:53:20" id="135e2c4"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/JNDIRealm.java</file>
    </fixedFiles>
  </bug>
  <bug id="55434" reportTime="2013-08-16 17:31:48">
    <summary>The path /foo/a/a/bar causes IllegalArgumentException when WsServerContainer creates UriTemplate</summary>
    <description>WsFilter calls WsServerContainer.findMapping("/foo/a/a/bar"), which in turn calls new UriTemplate(path). If the path contains repeated segments, it causes the following code in the UriTemplate constructor to throw an exception: Segment old = this.segments.put(segment, new Segment(index, segment)); if (old != null) { throw new IllegalArgumentException( sm.getString("uriTemplate.duplicateName", segment)); } This would be valid if the duplicates were URI variable names but not when their plain path segments.</description>
    <commit commitTime="2013-08-19 02:20:00" id="98ee5b4"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/websocket/server/UriTemplate.java</file>
      <file>test/org/apache/tomcat/websocket/server/TestUriTemplate.java</file>
    </fixedFiles>
  </bug>
  <bug id="55438" reportTime="2013-08-16 18:51:10">
    <summary>Non Blocking API's onAllDataRead being called twice</summary>
    <description/>
    <commit commitTime="2013-08-19 21:46:40" id="7f6ea48"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/InputBuffer.java</file>
      <file>java/org/apache/catalina/connector/Request.java</file>
      <file>java/org/apache/coyote/Request.java</file>
      <file>test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java</file>
    </fixedFiles>
  </bug>
  <bug id="55442" reportTime="2013-08-17 13:39:06">
    <summary>EL Constructor throws exception</summary>
    <description>In the EL 3.0 Spec, section 1.22.3 "Constructor Reference" states "A class name reference, followed by arguments in parenthesis, such as "Boolean(true)" denotes the invocation of the constructor of the class with the supplied arguments." This leads me to believe that the following test should work: @Test public void testImport03() { ELProcessor processor = new ELProcessor(); Object result = processor.getValue("Integer('1000')", Integer.class); Assert.assertEquals(Integer.valueOf(1000), result); } Unfortunately, this fails with the following error. javax.el.ELException: Function ':Integer' not found at org.apache.el.parser.AstFunction.getValue(AstFunction.java:136) at org.apache.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:188) at javax.el.ELProcessor.getValue(ELProcessor.java:45) at org.apache.el.parser.TestAstIdentifier.testImport03(TestAstIdentifier.java:53) ... Thanks</description>
    <commit commitTime="2013-08-20 17:13:20" id="ab70f07"/>
    <fixedFiles>
      <file>java/org/apache/el/parser/AstFunction.java</file>
      <file>test/org/apache/el/parser/TestAstFunction.java</file>
    </fixedFiles>
  </bug>
  <bug id="55454" reportTime="2013-08-20 09:30:09">
    <summary>NullPointerException caused by invalid contentType, e.g. trailing semicolon</summary>
    <description>possible related to 53353 When having an invalid contenttype like: &lt;jsp:directive.page language="java" contentType="text/html;"/&gt; (note the trailing ";") Tomcat throws a NullPointerException like this: java.lang.NullPointerException org.apache.tomcat.util.http.parser.HttpParser.parseMediaType(HttpParser.java:217) org.apache.tomcat.util.http.parser.MediaTypeCache.parse(MediaTypeCache.java:54) org.apache.catalina.connector.Response.setContentType(Response.java:805) org.apache.catalina.connector.ResponseFacade.setContentType(ResponseFacade.java:245) javax.servlet.ServletResponseWrapper.setContentType(ServletResponseWrapper.java:123) After removing the extra ";" or entering a charset like this: &lt;jsp:directive.page language="java" contentType="text/html; charset=UTF-8"/&gt; it works as expected. My desired behaviour would be: Don't crash with a NPE. Other Tomcat versions seem to handly this different.</description>
    <commit commitTime="2013-08-20 22:46:40" id="8b03dcf"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/http/parser/HttpParser.java</file>
      <file>test/org/apache/tomcat/util/http/parser/TestMediaType.java</file>
    </fixedFiles>
  </bug>
  <bug id="55469" reportTime="2013-08-22 20:05:22">
    <summary>Missing HTML closing tags in Manager application</summary>
    <description/>
    <commit commitTime="2013-08-23 14:40:00" id="9a22360"/>
    <fixedFiles>
      <file>java/org/apache/catalina/manager/HTMLManagerServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="51526" reportTime="2011-07-18 23:08:06">
    <summary>Process web application context config with embedded Tomcat.addWebApp(...)</summary>
    <description>It would be nice if org.apache.catalina.startup.Tomcat.addWebApp(...) would process the web application's META-INF/context.xml if found. The current implementation skips META-INF/context.xml loading, and does not appear to offer any hook to enable it--the StandardContext is instantiated and initialized with a null configFile in the single call to addWebApp(...).</description>
    <commit commitTime="2013-08-28 03:00:00" id="058f044"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/Tomcat.java</file>
      <file>test/org/apache/catalina/startup/TestTomcat.java</file>
    </fixedFiles>
  </bug>
  <bug id="55453" reportTime="2013-08-20 04:48:03">
    <summary>AJP send Body with Status 304</summary>
    <description/>
    <commit commitTime="2013-08-28 19:40:00" id="6d99103"/>
    <fixedFiles>
      <file>java/org/apache/coyote/ajp/AbstractAjpProcessor.java</file>
      <file>test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java</file>
    </fixedFiles>
  </bug>
  <bug id="55494" reportTime="2013-08-28 12:54:09">
    <summary>JNDIRealm throws exception after timeout / Connection reset</summary>
    <description/>
    <commit commitTime="2013-08-28 22:26:40" id="7e74aee"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/JNDIRealm.java</file>
    </fixedFiles>
  </bug>
  <bug id="55500" reportTime="2013-08-29 12:21:17">
    <summary>AsyncListener.onTimeout is not called via AJP AjpNioProtocol connector</summary>
    <description>The AsyncListener.onTimeout is not called, when timeout occurs, when traffic routed via AJP connector configured with AjpNioProtocol protocol.</description>
    <commit commitTime="2013-09-03 17:20:00" id="cf1e104"/>
    <fixedFiles>
      <file>java/org/apache/coyote/ajp/AbstractAjpProcessor.java</file>
      <file>java/org/apache/coyote/ajp/AjpAprProcessor.java</file>
      <file>java/org/apache/coyote/ajp/AjpNioProcessor.java</file>
      <file>java/org/apache/coyote/ajp/AjpProcessor.java</file>
    </fixedFiles>
  </bug>
  <bug id="55342" reportTime="2013-08-02 05:54:35">
    <summary>Lost interruption</summary>
    <description>org.apache.tomcat.jdbc.pool.ConnectionPool#close should not call Thread.interrupted() because interrupt was already reset by code that thrown InterruptedException. } catch (InterruptedException ex) { if (getPoolProperties().getPropagateInterruptState()) { Thread.currentThread().interrupt(); - } else { - Thread.interrupted(); } }</description>
    <commit commitTime="2013-09-04 10:00:00" id="41225cd"/>
    <fixedFiles>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java</file>
    </fixedFiles>
  </bug>
  <bug id="55343" reportTime="2013-08-02 06:05:03">
    <summary>Add flag to ignore exceptions while creating initial pool</summary>
    <description>I want my initial pool to be of some size i.e. not empty AND start even if it fails to create all or some of connections. If pool fails to create initial connections for some reason it just throws exceptions. To workaround that I have to set initial pool size to 0. It can be handy to add a flag to ignore (just log them) exceptions that occur while creating initial connections.</description>
    <commit commitTime="2013-09-04 15:33:20" id="4aa42d7"/>
    <fixedFiles>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java</file>
    </fixedFiles>
  </bug>
  <bug id="55527" reportTime="2013-09-05 09:05:01">
    <summary>JSSESocketFactory conditionally converts alias to lower case; condition is unwise</summary>
    <description>JSSESocketFactory conditionally converts the alias to lower case. The condition is coded as follows: private static final String defaultKeystoreType = "JKS"; ... if (JSSESocketFactory.defaultKeystoreType.equals(keystoreType)) { alias = alias.toLowerCase(Locale.ENGLISH); } If the intention is to downcase only JKS store aliases, then the comparison should be made with "JKS", not a constant that happens to contain "JKS" at present. Using a specific comparator would both clarify the code and protect against a possible change to the default (albeit very unlikely).</description>
    <commit commitTime="2013-09-05 19:20:00" id="f126b5a"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="55521" reportTime="2013-09-04 10:24:05">
    <summary>Race Condition in HttpSession#invalidate() / HttpServletRequest#getSession(boolean)</summary>
    <description/>
    <commit commitTime="2013-09-06 00:53:20" id="262c069"/>
    <fixedFiles>
      <file>java/org/apache/catalina/ha/session/DeltaSession.java</file>
      <file>java/org/apache/catalina/session/StandardSession.java</file>
    </fixedFiles>
  </bug>
  <bug id="54693" reportTime="2013-03-13 20:04:20">
    <summary>Add a validationQueryTimeout property</summary>
    <description/>
    <commit commitTime="2013-09-09 17:46:40" id="b022c57"/>
    <fixedFiles>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java</file>
      <file>modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java</file>
      <file>modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/TestValidationQueryTimeout.java</file>
    </fixedFiles>
  </bug>
  <bug id="55552" reportTime="2013-09-12 06:19:31">
    <summary>Potential NullPointerException in compiled JSPs if expected EL result is of primitive type</summary>
    <description/>
    <commit commitTime="2013-09-12 18:00:00" id="66932c4"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/JspUtil.java</file>
    </fixedFiles>
  </bug>
  <bug id="52558" reportTime="2012-01-30 10:46:47">
    <summary>CometConnectionManagerValve is adding non-serializable Request[] to Session</summary>
    <description>CometConnectionManagerValve is adding HttpServletRequest[] to HttpSession which is preventing the Session being serialized in a Clustered setup. We're resolving this locally using a serializable ConnectionList class with a transient Request[] i.e. public class ConnectionList implements Serializable { transient Request[] connectionList = null; ConnectionList(Request[] connectionList){ this.connectionList = connectionList; } public Request[] get(){ return connectionList; } }</description>
    <commit commitTime="2013-09-12 18:00:00" id="b284611"/>
    <fixedFiles>
      <file>java/org/apache/catalina/valves/CometConnectionManagerValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="46727" reportTime="2009-02-17 15:01:26">
    <summary>DefaultServlet - serving multiple encodings</summary>
    <description/>
    <commit commitTime="2013-09-18 21:13:20" id="f74257e"/>
    <fixedFiles>
      <file>java/org/apache/catalina/servlets/DefaultServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="55570" reportTime="2013-09-19 12:48:43">
    <summary>SpnegoAuthenticator: Resource file is missing placeholders for exceptions.</summary>
    <description>In java/org/apache/catalina/authenticator/SpnegoAuthenticator.java problems are logged with an exception. The exception does not show up in the logging. The exception only shows up if I hack java/org/apache/catalina/authenticator/LocalStrings.properties in catalina.jar, and add a placeholder. REPRODUCE: - Configure SP-NEGO with Kerberos. - Mess up your principal in com.sun.security.jgss.krb5.accept in jaas.config. - Try to login. - See that you get something like: FINE [org.apache.catalina.authenticator.SpnegoAuthenticator authenticate] Failed to validate client supplied ticket FIX: In java/org/apache/catalina/authenticator/LocalStrings.properties please add [{0}] to the following lines: spnegoAuthenticator.ticketValidateFail=Failed to validate client supplied ticket spnegoAuthenticator.serviceLoginFail=Unable to login as the service principal In SpnegoAuthenticator.java you can verify that exceptions are indeed passed to the log. VALIDATE: - Reproduce again - See that you now get Failed to validate client supplied ticket [GSSException: Failure unspecified at GSS-API level (Mechanism level: Invalid argument (400) - Cannot find key of appropriate type to decrypt AP REP - RC4 with HMAC)] The exception is not super-helpful, but at least it's something.</description>
    <commit commitTime="2013-09-19 22:13:20" id="910d4d9"/>
    <fixedFiles>
      <file>java/org/apache/catalina/authenticator/SpnegoAuthenticator.java</file>
    </fixedFiles>
  </bug>
  <bug id="55582" reportTime="2013-09-22 10:00:36">
    <summary>Concurrent issue of TagFileProcessor</summary>
    <description/>
    <commit commitTime="2013-09-23 20:40:00" id="f627cc8"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/TagFileProcessor.java</file>
    </fixedFiles>
  </bug>
  <bug id="55576" reportTime="2013-09-20 21:14:32">
    <summary>Order of ServletRequest parameters is not preserved</summary>
    <description>The ServletRequest interface provides two methods to iterate through request parameters: Enumeration&lt;String&gt; getParameterNames(), and Map&lt;String, String[]&gt; getParameterMap() Unfortunately, the underlying implementation in Tomcat is a HashMap, which fails to preserve the order of parameters as they are specified in the request. An alternate implementation should be used to preserve request order. LinkedHashMap, for example, is capable of preserving insertion order. The Servlet Specification (v3.0) speaks only to the relative ordering of query string data and post body data. However, section 17.13.3 of the HTML specification (v4.01) titled "Processing form data", clearly states that "control names/values are listed in the order they appear in the document." Therefore, I do not see a valid interpretation of either specification to rationalize Tomcat's implementation. To receive a request with an ordered list of parameters and represent them in an implementation that is guaranteed not to preserve this order is difficult to rationalize.</description>
    <commit commitTime="2013-09-24 05:00:00" id="90556a9"/>
    <fixedFiles>
      <file>java/org/apache/catalina/util/ParameterMap.java</file>
      <file>java/org/apache/tomcat/util/http/Parameters.java</file>
    </fixedFiles>
  </bug>
  <bug id="55317" reportTime="2013-07-28 07:17:28">
    <summary>Facilitate weaving by allowing ClassFileTransformer to be added to WebppClassLoader</summary>
    <description/>
    <commit commitTime="2013-09-27 08:00:00" id="dd0cba7"/>
    <fixedFiles>
      <file>java/org/apache/catalina/loader/WebappClassLoader.java</file>
      <file>java/org/apache/tomcat/InstrumentableClassLoader.java</file>
      <file>test/org/apache/catalina/loader/TestWebappClassLoaderWeaving.java</file>
      <file>test/org/apache/catalina/loader/TesterNeverWeavedClass.java</file>
      <file>test/org/apache/catalina/loader/TesterUnweavedClass.java</file>
    </fixedFiles>
  </bug>
  <bug id="55629" reportTime="2013-10-05 16:38:36">
    <summary>StatusManagerServlet does not remove JMX notification listener</summary>
    <description>StatusManagerServlet.destroy should call mBeanServer.removeNotificationListener because init method call mBeanServer.addNotificationListener.</description>
    <commit commitTime="2013-10-07 15:13:20" id="95faaec"/>
    <fixedFiles>
      <file>java/org/apache/catalina/manager/StatusManagerServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="55630" reportTime="2013-10-05 16:51:34">
    <summary>clean way to avoid setURLStreamHandlerFactory call</summary>
    <description>A current method is to set WebappLoader.first via reflection (because private). I think the setURLStreamHandlerFactory should be move to Catalina.start ('first' static field can be move in Catalina). So we could have a static method in Catalina to prevent setURLStreamHandlerFactory call while first starting.</description>
    <commit commitTime="2013-10-08 02:20:00" id="bd56eea"/>
    <fixedFiles>
      <file>java/org/apache/catalina/webresources/TomcatURLStreamHandlerFactory.java</file>
    </fixedFiles>
  </bug>
  <bug id="55642" reportTime="2013-10-09 13:02:21">
    <summary>TagPluginManager isConstantAttribute broken</summary>
    <description>Function isConstantAttribute in TagPluginManager seems to be be broken. For value "order.status" it returns false. And for value "${order.state.name}" it returns true. According to javadoc it should be exact opposite. Problem seems to be in Node.isLiteral function. "el!= null" should probably be "el== null" But this function is being used elsewhere. /** * @return true if the attribute is specified and its value is a * translation-time constant. */ public boolean TagPluginManager.isConstantAttribute(String attribute){ Node.JspAttribute attr = getNodeAttribute(attribute); if (attr == null) return false; return attr.isLiteral(); } /** * @return true if the value is a string literal known at translation * time. */ public boolean isLiteral() { return !expression &amp;&amp; (el != null) &amp;&amp; !namedAttribute; }</description>
    <commit commitTime="2013-10-09 22:46:40" id="af49b44"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/Node.java</file>
      <file>test/org/apache/jasper/compiler/TestNode.java</file>
    </fixedFiles>
  </bug>
  <bug id="55251" reportTime="2013-07-12 03:50:46">
    <summary>JspC fails silently if directory for generated web.xml does not exist</summary>
    <description>If the file specified for webXml (via call to setWebXml) cannot be created (for example if the directory does not exist), then JspC fails silently.</description>
    <commit commitTime="2013-10-10 21:00:00" id="06d8338"/>
    <fixedFiles>
      <file>java/org/apache/jasper/JspC.java</file>
    </fixedFiles>
  </bug>
  <bug id="54095" reportTime="2012-11-03 20:49:45">
    <summary>[patch] support gzipped versions of static resources by DefaultServlet</summary>
    <description/>
    <commit commitTime="2013-10-11 05:20:00" id="f0101d0"/>
    <fixedFiles>
      <file>java/org/apache/catalina/servlets/DefaultServlet.java</file>
      <file>test/org/apache/catalina/servlets/TestDefaultServlet.java</file>
    </fixedFiles>
  </bug>
  <bug id="55656" reportTime="2013-10-16 09:56:54">
    <summary>Server ClassLoader not used for Server creation</summary>
    <description/>
    <commit commitTime="2013-10-17 22:26:40" id="86ec1f4"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/Catalina.java</file>
    </fixedFiles>
  </bug>
  <bug id="55664" reportTime="2013-10-17 19:01:26">
    <summary>[websocket] NPE in Util$DecoderMatch during application start</summary>
    <description/>
    <commit commitTime="2013-10-18 15:06:40" id="4e4a24a"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/websocket/Util.java</file>
      <file>test/org/apache/tomcat/websocket/TestUtil.java</file>
      <file>test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java</file>
    </fixedFiles>
  </bug>
  <bug id="55681" reportTime="2013-10-20 17:37:21">
    <summary>JSR-356 message handling: NULL pointer being thrown when DecodeException is caught in PojoMessageHandlerWholeBase&lt;T&gt;.onMessage</summary>
    <description>I am testing what happens when Encode/Decode Exceptions occur during JSR-356 communication. In our case, we do NOT use annotation, but we "extend Endpoint" and "implement Whole&lt;ThingworxMessage&gt;". I was forcing a DecodeException to occur - expecting to my onError to be called with the actual DecodeException. Instead, I got a Null. Stepping the following code in Tomcat: in onMessage, the ((WsSession)session) is NULL. As a result, the actual DecodeException (cause) is lost. // Can this message be decoded? Object payload; try { payload = decode(message); } catch (DecodeException de) { ((WsSession) session).getLocal().onError(session, de); return; } Tracing this further up the stack, I found that Util.getMessageHandlers is initializing it and passing NULL in for the session: if (decoderMatch.getTextDecoders().size() &gt; 0) { MessageHandlerResult result = new MessageHandlerResult( new PojoMessageHandlerWholeText(listener, m, null, endpointConfig, decoderMatch.getTextDecoders(), new Object[1], 0, false, -1, -1), MessageHandlerResultType.TEXT); results.add(result); } Please let me know if I can provide any more details. -bob</description>
    <commit commitTime="2013-10-21 04:13:20" id="514cefb"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/websocket/Util.java</file>
      <file>java/org/apache/tomcat/websocket/WsSession.java</file>
    </fixedFiles>
  </bug>
  <bug id="55691" reportTime="2013-10-22 23:05:42">
    <summary>javax.el.ArrayELResolver.setValue not supporting arrays of primitives</summary>
    <description>was working in tomcat 6.0.20 ERROR javax.faces.context.ExceptionHandlerWrapper - javax.faces.component.UpdateModelException: java.lang.ClassCastException: Unable to add an object of type [java.lang.Integer] to an array of objects of type [int] java.lang.ClassCastException: Unable to add an object of type [java.lang.Integer] to an array of objects of type [int] at javax.el.ArrayELResolver.setValue(ArrayELResolver.java:94) at com.sun.faces.el.DemuxCompositeELResolver._setValue(DemuxCompositeELResolver.java:255) at com.sun.faces.el.DemuxCompositeELResolver.setValue(DemuxCompositeELResolver.java:281) at org.apache.el.parser.AstValue.setValue(AstValue.java:158) at org.apache.el.ValueExpressionImpl.setValue(ValueExpressionImpl.java:249) at com.sun.faces.facelets.el.TagValueExpression.setValue(TagValueExpression.java:131) at javax.faces.component.UIInput.updateModel(UIInput.java:818) at javax.faces.component.UIInput.processUpdates(UIInput.java:735) at javax.faces.component.UIData.iterate(UIData.java:2001) at javax.faces.component.UIData.processUpdates(UIData.java:1253) at javax.faces.component.UIComponentBase.processUpdates(UIComponentBase.java:1242) at javax.faces.component.UIForm.processUpdates(UIForm.java:281) at javax.faces.component.UIComponentBase.processUpdates(UIComponentBase.java:1242) at javax.faces.component.UIComponentBase.processUpdates(UIComponentBase.java:1242) at javax.faces.component.UIViewRoot.processUpdates(UIViewRoot.java:1231) at com.sun.faces.lifecycle.UpdateModelValuesPhase.execute(UpdateModelValuesPhase.java:78) at com.sun.faces.lifecycle.Phase.doPhase(Phase.java:101) at com.sun.faces.lifecycle.LifecycleImpl.execute(LifecycleImpl.java:118) at javax.faces.webapp.FacesServlet.service(FacesServlet.java:593) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)</description>
    <commit commitTime="2013-10-29 03:53:20" id="b82c0c6"/>
    <fixedFiles>
      <file>java/javax/el/ArrayELResolver.java</file>
      <file>java/javax/el/Util.java</file>
      <file>test/javax/el/TestArrayELResolver.java</file>
    </fixedFiles>
  </bug>
  <bug id="55684" reportTime="2013-10-21 16:30:04">
    <summary>WebappClassLoader.getThread want an access to root ThreadGroup</summary>
    <description>Tomcat may not have all permissions granted. The method WebappClassLoader.getThread try to access the root ThreadGroup in order to list all threads. You should either manage SecurityException or avoid to access the parent ThreadGroup of the thread which start Tomcat.</description>
    <commit commitTime="2013-10-29 17:46:40" id="d244284"/>
    <fixedFiles>
      <file>java/org/apache/catalina/loader/WebappClassLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="55702" reportTime="2013-10-25 10:03:35">
    <summary>TLD cannot be loaded if CATALINA_HOME contains spaces</summary>
    <description>A web application containing an own TLD within its WEB-INF directory fails to render a JSP page referencing that TLD if Tomcat it installed into a directory with spaces in the path, such as "C:\Program Files\...". After moving the entire Tomcat installation directory to a path without spaces (such as "C:\1\Tomcat8"), the application can render that same JSP page. Following stacktrace is printed. Note the %20 in the file path org.apache.jasper.JasperException: /jsp/layouts/standard.jsp (line: 7, column: 69) File "file:/C:/Program%20Files/Apache/Tomcat-8.0.0-RC5/webapps/mywebapp/WEB-INF/tlds/mywebapp-tags.tld" not found org.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:42) org.apache.jasper.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.java:276) org.apache.jasper.compiler.ErrorDispatcher.jspError(ErrorDispatcher.java:92) org.apache.jasper.compiler.TagLibraryInfoImpl.&lt;init&gt;(TagLibraryInfoImpl.java:166) org.apache.jasper.compiler.Parser.parseTaglibDirective(Parser.java:410) org.apache.jasper.compiler.Parser.parseDirective(Parser.java:476) org.apache.jasper.compiler.Parser.parseElements(Parser.java:1451) org.apache.jasper.compiler.Parser.parse(Parser.java:138) org.apache.jasper.compiler.ParserController.doParse(ParserController.java:242) org.apache.jasper.compiler.ParserController.parse(ParserController.java:102) org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:198) org.apache.jasper.compiler.Compiler.compile(Compiler.java:373) org.apache.jasper.compiler.Compiler.compile(Compiler.java:353) org.apache.jasper.compiler.Compiler.compile(Compiler.java:340) org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:606) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:357) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:403) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:347) javax.servlet.http.HttpServlet.service(HttpServlet.java:728) Java version used: Oracle JDK 7 Update 45 (64 Bit) Active Tomcat connector: ["http-nio-8080"]</description>
    <commit commitTime="2013-10-29 20:33:20" id="ad50e54"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/TagLibraryInfoImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="55715" reportTime="2013-10-28 15:34:56">
    <summary>RemoteEndpoint.Async#sendText(String, SendHandler) can cause StackOverflowErrors and contradicts Oracle's JavaDoc</summary>
    <description/>
    <commit commitTime="2013-10-30 18:46:40" id="3f316f1"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/websocket/server/Constants.java</file>
      <file>java/org/apache/tomcat/websocket/server/WsContextListener.java</file>
      <file>java/org/apache/tomcat/websocket/server/WsHttpUpgradeHandler.java</file>
      <file>java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java</file>
      <file>java/org/apache/tomcat/websocket/server/WsServerContainer.java</file>
      <file>java/org/apache/tomcat/websocket/server/WsWriteTimeout.java</file>
    </fixedFiles>
  </bug>
  <bug id="55749" reportTime="2013-11-06 12:32:17">
    <summary>Disabling SSLEngine in AprLifecycleListener leads to misleading error message at startup when SSL Connector is delcared</summary>
    <description>Put a &lt;Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="off" /&gt; in you server.xml. Put the APR connector some weeks later in your server.xml: &lt;Connector protocol="org.apache.coyote.http11.Http11AprProtocol" port="@HTTPS_PORT@" connectionTimeout="20000" maxHttpHeaderSize="24576" maxThreads="250" URIEncoding="UTF-8" bufferSize="4096" scheme="https" secure="true" SSLEnabled="true" SSLProtocol="TLSv1" SSLCipherSuite="HIGH:!ADH" SSLCertificateFile="@SSL_CERT_FILE@" SSLCertificateKeyFile="@SSL_CERT_KEY_FILE@" SSLPassword="@SSL_PASSWORD@" /&gt; Start your Tomcat and receive following confusing message: Nov 06, 2013 1:30:39 PM org.apache.coyote.http11.Http11AprProtocol start SEVERE: Error starting endpoint java.lang.Exception: Socket bind failed: [226] Adresse bereits im Zugriff at org.apache.tomcat.util.net.AprEndpoint.init(AprEndpoint.java:671) at org.apache.tomcat.util.net.AprEndpoint.start(AprEndpoint.java:851) at org.apache.coyote.http11.Http11AprProtocol.start(Http11AprProtocol.java:139) at org.apache.catalina.connector.Connector.start(Connector.java:1196) at org.apache.catalina.core.StandardService.start(StandardService.java:540) at org.apache.catalina.core.StandardServer.start(StandardServer.java:754) at org.apache.catalina.startup.Catalina.start(Catalina.java:595) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:289) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:414) Nov 06, 2013 1:30:39 PM org.apache.catalina.core.StandardService start SEVERE: Failed to start connector [Connector[HTTP/1.1-8444]] LifecycleException: service.getName(): "Catalina"; Protocol handler start failed: java.lang.Exception: Socket bind failed: [226] Adresse bereits im Zugriff at org.apache.catalina.connector.Connector.start(Connector.java:1203) at org.apache.catalina.core.StandardService.start(StandardService.java:540) at org.apache.catalina.core.StandardServer.start(StandardServer.java:754) at org.apache.catalina.startup.Catalina.start(Catalina.java:595) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:289) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:414) This is of course not correct. The port IS availble but the SSL engine has been turned off. There should be a check at stratup which says that this is an illegal state.</description>
    <commit commitTime="2013-11-11 03:00:00" id="014cf1c"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/net/AprEndpoint.java</file>
    </fixedFiles>
  </bug>
  <bug id="55760" reportTime="2013-11-08 11:48:18">
    <summary>Tomcat SPNEGO authenticator incompatible with IBM JDK in case of Keytab based initiate and accept authentication</summary>
    <description/>
    <commit commitTime="2013-11-11 16:53:20" id="0a4e847"/>
    <fixedFiles>
      <file>java/org/apache/catalina/authenticator/SpnegoAuthenticator.java</file>
    </fixedFiles>
  </bug>
  <bug id="55772" reportTime="2013-11-13 04:45:21">
    <summary>Flushing AsyncContext response writer after ClientAbortException (BrokenPipe) causes request state to leak</summary>
    <description/>
    <commit commitTime="2013-11-15 20:53:20" id="cb62f86"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/CoyoteAdapter.java</file>
      <file>java/org/apache/coyote/ActionCode.java</file>
      <file>java/org/apache/coyote/ajp/AbstractAjpProcessor.java</file>
      <file>java/org/apache/coyote/http11/AbstractHttp11Processor.java</file>
      <file>java/org/apache/coyote/spdy/SpdyProcessor.java</file>
      <file>test/org/apache/coyote/http11/TestAbstractHttp11Processor.java</file>
    </fixedFiles>
  </bug>
  <bug id="55776" reportTime="2013-11-14 06:14:50">
    <summary>if path include relative char, eg: ../, classloader will not find zhe file</summary>
    <description>I use ibatis in my project, config file path include '..', tomcat can not find the file, command line show: Could not find resource ../ibatis/code/sendType.xml</description>
    <commit commitTime="2013-11-15 23:40:00" id="a1ad6ce"/>
    <fixedFiles>
      <file>java/org/apache/catalina/webresources/StandardRoot.java</file>
    </fixedFiles>
  </bug>
  <bug id="55778" reportTime="2013-11-14 14:51:16">
    <summary>JNDIRealm: Authentication with GSSAPI to LDAP with SSL connection causes an exception</summary>
    <description>Whenever i try to authenticate with GSSAPI to a LDAP server with a SSL connection (ldaps), the following exception is thrown: javax.naming.ServiceUnavailableException: myserver.at:636; socket closed; remaining name 'dc=example,dc=org' at com.sun.jndi.ldap.Connection.readReply(Connection.java:452) at com.sun.jndi.ldap.LdapClient.getSearchReply(LdapClient.java:631) at com.sun.jndi.ldap.LdapClient.search(LdapClient.java:554) at com.sun.jndi.ldap.LdapCtx.doSearch(LdapCtx.java:1985) at com.sun.jndi.ldap.LdapCtx.searchAux(LdapCtx.java:1847) at com.sun.jndi.ldap.LdapCtx.c_search(LdapCtx.java:1772) ... Steps to reproduce: 1. Configure the valve org.apache.catalina.authenticator.SpnegoAuthenticator in the server.xml with storeDelegatedCredential="true". 2. Configure the realm org.apache.catalina.realm.JNDIRealm in the server.xml with an SSL connection url (e.g. ldaps://myserver.at:636) 3. Configure an auth-method with SPNEGO, security-constraints and security-roles in the web.xml 4. Add required keystores to the jdk for the ldaps connection. 5. Try to authenticate I debugged into the JNDIRealm and figured out, that changing line 2082 from "context.addToEnvironment("javax.security.sasl.qop", "auth-conf");" to "context.addToEnvironment("javax.security.sasl.qop", "auth");" would solve the problem. I also tested the fix with a new written JNDIRealm. But i'm not sure, if this fix causes other security issues.</description>
    <commit commitTime="2013-11-16 02:26:40" id="27806aa"/>
    <fixedFiles>
      <file>java/org/apache/catalina/realm/JNDIRealm.java</file>
    </fixedFiles>
  </bug>
  <bug id="55798" reportTime="2013-11-19 23:03:23">
    <summary>Enabling Manager App - process and description is inadequate</summary>
    <description/>
    <commit commitTime="2013-11-20 17:33:20" id="13c6551"/>
    <fixedFiles>
      <file>java/org/apache/catalina/users/MemoryUserDatabase.java</file>
    </fixedFiles>
  </bug>
  <bug id="55804" reportTime="2013-11-20 19:23:11">
    <summary>SPNEGOAUTHENTICATOR - GSSCredential does not get renewed after RemainingLifeTime is less than zero</summary>
    <description>In SpnegoAuthenticator, we check for request.getUserPrincipal() if it returns a prinicpal we do not do a fresh authentication. This happens even when the GSSCredential returned by GenericPrincipal has remainingLife time less than zero. This causes issues in delegating the credential as the credential is not valid any more. Can we add additional check to reauthenticate when the credental has expired and put GSSCredential in the same session?</description>
    <commit commitTime="2013-11-30 02:33:20" id="8f67335"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/Request.java</file>
    </fixedFiles>
  </bug>
  <bug id="55837" reportTime="2013-12-03 08:03:13">
    <summary>ServletContext.getRealPath() returns null</summary>
    <description>[code] String path = servletContext.getRealPath('/test'); if no file or folder named '/test' exist in webroot then path return null but int tomcat 5\6\7, it will return the correct value , ex /data/oschina/webapp/test</description>
    <commit commitTime="2013-12-05 02:00:00" id="a63bf3a"/>
    <fixedFiles>
      <file>java/org/apache/catalina/webresources/DirResourceSet.java</file>
      <file>java/org/apache/catalina/webresources/EmptyResource.java</file>
      <file>java/org/apache/catalina/webresources/StandardRoot.java</file>
      <file>test/org/apache/catalina/webresources/AbstractTestResourceSet.java</file>
    </fixedFiles>
  </bug>
  <bug id="55842" reportTime="2013-12-04 15:56:09">
    <summary>response.setBufferSize() does not seem to work properly</summary>
    <description>I found a problem with setting the buffer size for the ServletResponse. If I call 'response.setBufferSize(1,000,000);' and send about 20,000 characters, the response will be chunked even though it should not. The response is sent in several chunks and contains the 'Transfer-Encoding: chunked' response header. In my understanding in this case the response should be fully buffered on the server and then sent as a whole containing the Content-Length-header. This causes a problem in my application because I want to use a larger buffer to be able to redirect to an error page if an error occurs during rendering the response. I was able to reproduce this on Tomcat 7.0.39, 7.0.40, 7.0.42, 7.0.47. Tomcat 7.0.37 works fine and as expected. This is easily reproducable by using a JSP as follows: &lt;% response.setBufferSize(1000*1000); for (int i = 0; i &lt; 100; i++) { for (int j = 0; j &lt; 100; j++) { response.getWriter().write("X"); } response.getWriter().write("&lt;br /&gt;"); } %&gt;</description>
    <commit commitTime="2013-12-06 19:40:00" id="f4970a7"/>
    <fixedFiles>
      <file>java/org/apache/catalina/connector/OutputBuffer.java</file>
      <file>java/org/apache/tomcat/util/buf/ByteChunk.java</file>
    </fixedFiles>
  </bug>
  <bug id="55851" reportTime="2013-12-06 08:56:41">
    <summary>Tomcat SPNEGO authenticator incompatible with IBM JDK: Accept Security Context needs to be wrapped around a Privileged Action in order for server side authentication</summary>
    <description/>
    <commit commitTime="2013-12-07 04:00:00" id="bba9747"/>
    <fixedFiles>
      <file>java/org/apache/catalina/authenticator/SpnegoAuthenticator.java</file>
    </fixedFiles>
  </bug>
  <bug id="55801" reportTime="2013-11-20 09:57:24">
    <summary>Add ability to provide custom SSLContext for websocket client</summary>
    <description/>
    <commit commitTime="2013-12-08 05:00:00" id="ef3f56e"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/websocket/WsWebSocketContainer.java</file>
    </fixedFiles>
  </bug>
  <bug id="55811" reportTime="2013-11-22 14:45:40">
    <summary>Do not parse web-fragment.xml files when empty absolute-ordering</summary>
    <description/>
    <commit commitTime="2013-12-08 05:00:00" id="f4da7dc"/>
    <fixedFiles>
      <file>java/org/apache/catalina/startup/ContextConfig.java</file>
      <file>java/org/apache/jasper/servlet/JspCServletContext.java</file>
      <file>java/org/apache/tomcat/util/descriptor/web/FragmentJarScannerCallback.java</file>
    </fixedFiles>
  </bug>
  <bug id="55820" reportTime="2013-11-27 15:53:07">
    <summary>Add 172.16/12 range to default internal proxies</summary>
    <description/>
    <commit commitTime="2013-12-09 17:06:40" id="c1be72f"/>
    <fixedFiles>
      <file>java/org/apache/catalina/filters/RemoteIpFilter.java</file>
      <file>java/org/apache/catalina/valves/RemoteIpValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="55884" reportTime="2013-12-14 17:03:59">
    <summary>JSPs no longer compile in Java 8</summary>
    <description/>
    <commit commitTime="2013-12-17 00:06:40" id="8a5179c"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/JspRuntimeContext.java</file>
    </fixedFiles>
  </bug>
  <bug id="55905" reportTime="2013-12-18 14:30:15">
    <summary>Error message unhelpful when web.xml references a tld file that doesn't exist</summary>
    <description/>
    <commit commitTime="2013-12-19 02:06:40" id="bcb9c58"/>
    <fixedFiles>
      <file>java/org/apache/jasper/servlet/TldScanner.java</file>
    </fixedFiles>
  </bug>
  <bug id="55939" reportTime="2013-12-29 19:40:03">
    <summary>Seeing issues with non-blocking io when writing lots of data</summary>
    <description/>
    <commit commitTime="2013-12-31 03:00:00" id="411e4cc"/>
    <fixedFiles>
      <file>java/org/apache/coyote/Response.java</file>
    </fixedFiles>
  </bug>
  <bug id="55937" reportTime="2013-12-27 15:41:22">
    <summary>Tomcat auto deployer not working for ROOT applications</summary>
    <description/>
    <commit commitTime="2014-01-09 20:20:00" id="346e264"/>
    <fixedFiles>
      <file>java/org/apache/catalina/util/ContextName.java</file>
      <file>test/org/apache/catalina/util/TestContextName.java</file>
    </fixedFiles>
  </bug>
  <bug id="55958" reportTime="2014-01-06 09:28:12">
    <summary>Tomcat tries to deploy dir as zip archive even when it is a directory if the name ends with .war</summary>
    <description>Webapp deployment fails if the dirname ends with .war because it is automatically considered as zip archive.</description>
    <commit commitTime="2014-01-09 23:06:40" id="5964a52"/>
    <fixedFiles>
      <file>java/org/apache/catalina/core/ContainerBase.java</file>
      <file>java/org/apache/catalina/ha/deploy/FarmWarDeployer.java</file>
      <file>java/org/apache/catalina/manager/HTMLManagerServlet.java</file>
      <file>java/org/apache/catalina/mbeans/MBeanUtils.java</file>
      <file>java/org/apache/catalina/startup/FailedContext.java</file>
      <file>java/org/apache/catalina/startup/HostConfig.java</file>
      <file>java/org/apache/catalina/storeconfig/StandardContextSF.java</file>
      <file>java/org/apache/catalina/util/ContextName.java</file>
      <file>test/org/apache/catalina/startup/TestHostConfigAutomaticDeployment.java</file>
      <file>test/org/apache/catalina/util/TestContextName.java</file>
    </fixedFiles>
  </bug>
  <bug id="55960" reportTime="2014-01-06 14:47:05">
    <summary>TestSSOnonLoginAndBasicAuthenticator is flawed and incomplete</summary>
    <description/>
    <commit commitTime="2014-01-09 23:06:40" id="ad129f8"/>
    <fixedFiles>
      <file>test/org/apache/catalina/authenticator/TestSSOnonLoginAndBasicAuthenticator.java</file>
      <file>test/org/apache/catalina/startup/TesterServletEncodeUrl.java</file>
    </fixedFiles>
  </bug>
  <bug id="55970" reportTime="2014-01-07 18:13:45">
    <summary>A reloadable context is reloaded repeatedly if WEB-INF/lib contains non-jar files</summary>
    <description/>
    <commit commitTime="2014-01-09 23:06:40" id="5594699"/>
    <fixedFiles>
      <file>java/org/apache/catalina/loader/WebappClassLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="55974" reportTime="2014-01-07 22:59:05">
    <summary>Honor the order when reporting XML parsing errors and warnings in XmlErrorHandler class</summary>
    <description/>
    <commit commitTime="2014-01-09 23:06:40" id="328adb1"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/descriptor/XmlErrorHandler.java</file>
    </fixedFiles>
  </bug>
  <bug id="55976" reportTime="2014-01-08 09:52:04">
    <summary>Broken response from NIO connector in Tomcat 7.0.50</summary>
    <description/>
    <commit commitTime="2014-01-10 04:40:00" id="d423ae2"/>
    <fixedFiles>
      <file>java/org/apache/coyote/http11/Http11NioProcessor.java</file>
    </fixedFiles>
  </bug>
  <bug id="55978" reportTime="2014-01-08 10:37:25">
    <summary>Initial call to onWritePossible() not made by container when using HTTP upgrade</summary>
    <description>When using a WriteListener and non-blocking IO with the Servlet async API, the container makes the first call to onWritePossible() as per the spec. When using a WriteListener and non-blocking IO with the Servlet HTTP upgrade API the container does not make the initial call to onWritePossible(). When fixing this bug it is worth checking the initial call to onDataAvailable() as well.</description>
    <commit commitTime="2014-01-10 18:33:20" id="bd24edc"/>
    <fixedFiles>
      <file>java/org/apache/coyote/AbstractProtocol.java</file>
      <file>java/org/apache/coyote/http11/upgrade/AbstractProcessor.java</file>
      <file>java/org/apache/coyote/http11/upgrade/AbstractServletOutputStream.java</file>
      <file>java/org/apache/coyote/http11/upgrade/AprServletOutputStream.java</file>
      <file>java/org/apache/coyote/http11/upgrade/BioServletOutputStream.java</file>
      <file>java/org/apache/coyote/http11/upgrade/NioServletOutputStream.java</file>
      <file>test/org/apache/coyote/http11/upgrade/TestUpgrade.java</file>
    </fixedFiles>
  </bug>
  <bug id="55893" reportTime="2013-12-16 21:24:37">
    <summary>Split AccessLogValve and extract the formatting logic in an AbstractAccessLogValve</summary>
    <description/>
    <commit commitTime="2014-01-10 21:20:00" id="92ce68a"/>
    <fixedFiles>
      <file>java/org/apache/catalina/valves/AbstractAccessLogValve.java</file>
      <file>java/org/apache/catalina/valves/AccessLogValve.java</file>
    </fixedFiles>
  </bug>
  <bug id="55995" reportTime="2014-01-13 05:55:30">
    <summary>java.lang.NullPointerException at org.apache.jasper.servlet.JspCServletContext.getResource(JspCServletContext.java:344)</summary>
    <description>Null pointer exception when running JSPC from a Shell Script. JspCServletContext.java:344 /** * Return a URL object of a resource that is mapped to the * specified context-relative path. * * @param path Context-relative path of the desired resource * * @exception MalformedURLException if the resource path is * not properly formed */ @Override public URL getResource(String path) throws MalformedURLException { if (!path.startsWith("/")) throw new MalformedURLException("Path '" + path + "' does not start with '/'"); TldCache.java:124 private long[] getLastModified(TldResourcePath tldResourcePath) { long[] result = new long[2]; result[0] = -1; result[1] = -1; try { URL url = servletContext.getResource(tldResourcePath.getWebappPath()); /usr/java/jdk1.7.0_45/bin/java -classpath :/home/tomcat/apache-tomcat-8.0.0-RC10/lib/catalina-storeconfig.jar:/home/tomcat/apache-tomcat-8.0.0-RC10/lib/tomcat-websocket.jar:/home/tomcat/apache-tomcat-8.0.0-RC10/lib/tomcat-i18n-es.jar:/home/tomcat/apache-tomcat-8.0.0-RC10/lib/catalina-tribes.jar:/home/tomcat/apache-tomcat-8.0.0-RC10/lib/catalina-ha.jar:/home/tomcat/apache-tomcat-8.0.0-RC10/lib/tomcat-i18n-ja.jar:/home/tomcat/apache-tomcat-8.0.0-RC10/lib/jsp-api.jar:/home/tomcat/apache-tomcat-8.0.0-RC10/lib/tomcat-util.jar:/home/tomcat/apache-tomcat-8.0.0-RC10/lib/tomcat-jni.jar:/home/tomcat/apache-tomcat-8.0.0-RC10/lib/jasper.jar:/home/tomcat/apache-tomcat-8.0.0-RC10/lib/websocket-api.jar:/home/tomcat/apache-tomcat-8.0.0-RC10/lib/ecj-4.3.1.jar:/home/tomcat/apache-tomcat-8.0.0-RC10/lib/tomcat-i18n-fr.jar:/home/tomcat/apache-tomcat-8.0.0-RC10/lib/tomcat-api.jar:/home/tomcat/apache-tomcat-8.0.0-RC10/lib/tomcat-coyote.jar:/home/tomcat/apache-tomcat-8.0.0-RC10/lib/servlet-api.jar:/home/tomcat/apache-tomcat-8.0.0-RC10/lib/jasper-el.jar:/home/tomcat/apache-tomcat-8.0.0-RC10/lib/catalina.jar:/home/tomcat/apache-tomcat-8.0.0-RC10/lib/tomcat-dbcp.jar:/home/tomcat/apache-tomcat-8.0.0-RC10/lib/tomcat-jdbc.jar:/home/tomcat/apache-tomcat-8.0.0-RC10/lib/annotations-api.jar:/home/tomcat/apache-tomcat-8.0.0-RC10/lib/tomcat-util-scan.jar:/home/tomcat/apache-tomcat-8.0.0-RC10/lib/catalina-ant.jar:/home/tomcat/apache-tomcat-8.0.0-RC10/lib/el-api.jar:/home/tomcat/apache-tomcat-8.0.0-RC10/lib/tomcat-spdy.jar:/home/tomcat/apache-tomcat-8.0.0-RC10/bin/tomcat-juli.jar:/home/tomcat/apache-tomcat-8.0.0-RC10/bin/bootstrap.jar:/home/tomcat/apache-tomcat-8.0.0-RC10/bin/commons-daemon.jar:/home/tomcat/apache-tomcat-8.0.0-RC10/webapps/examples/WEB-INF/lib/jstl.jar:/home/tomcat/apache-tomcat-8.0.0-RC10/webapps/examples/WEB-INF/lib/standard.jar:/home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/lib/ant-1.6.5.jar org.apache.jasper.JspC -d /home/java/source/HEAD/work/tomcat80 -v -l -uriroot /home/java/source/HEAD/work/jsp_compile_shared /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/dialog/qbAxesDlg.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/dialog/qbManualGecodingDlg.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/fmtdlg.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/index.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/joindlg.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/producer.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/simplefilter.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/selectvaluedlg.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/binddowsTestView.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/variableeditordlg.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/filterprompteditor.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/ajax_response.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/fontdlg.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/join_fields.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/tree_component.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/waiting_banner.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/folderblock/BID_FolderBlockInit.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/folderblock/BID_FolderBlockBoot.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/BID_EmptyContent.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/xml/BID_UrlProperties.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/xml/BID_IBFSpathToHrefs.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/xml/BID_xmlresponse.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/xml/BID_statusResponse.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/favorites/BID_favorites_tree.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/favorites/BID_FavoritesBlockBoot.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/favorites/BID_FavoritesBlockInit.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/favorites/BID_favorites_tree_boot.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/favorites/BID_listToXML.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/index.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/views/BID_InternalPage.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/views/BID_SearchTree_Boot.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/views/BID_SATree_Boot.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/views/BID_BiFrame.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/views/BID_initView.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/views/BID_ShowToolbar.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/views/BID_ExternalPage.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/views/BID_SATreeBiFrame.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/views/BID_initBindows.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/views/BID_SearchTreeBiFrame.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/recents/BID_recents_tree_boot.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/recents/BID_recents_tree.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/recents/BID_listToXML.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/error.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/groups/BID_listToXML.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/search/BID_searchListToXML.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/search/BID_listToXML.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/tree/BID_MrPropertiesToXML.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/tree/BID_flatListToXML.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/tree/BID_PlainText.jsp /home/java/source/HEAD/work/jsp_compile_shared/WEB-INF/jsp/bid/tree/BID_listToXML.jsp 2&gt;&amp;1 Exception in thread "main" java.lang.NullPointerException at org.apache.jasper.servlet.JspCServletContext.getResource(JspCServletContext.java:344) at org.apache.jasper.compiler.TldCache.getLastModified(TldCache.java:124) at org.apache.jasper.compiler.TldCache.&lt;init&gt;(TldCache.java:70) at org.apache.jasper.JspC.initServletContext(JspC.java:1468) at org.apache.jasper.JspC.execute(JspC.java:1321) at org.apache.jasper.JspC.main(JspC.java:269)</description>
    <commit commitTime="2014-01-14 19:46:40" id="5e6b884"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/TldCache.java</file>
    </fixedFiles>
  </bug>
  <bug id="55996" reportTime="2014-01-13 06:12:37">
    <summary>Async context does not timeout with HTTP NIO connector</summary>
    <description/>
    <commit commitTime="2014-01-15 01:20:00" id="553ad39"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/util/net/SocketWrapper.java</file>
    </fixedFiles>
  </bug>
  <bug id="56010" reportTime="2014-01-15 03:34:23">
    <summary>JspFactory.getPageContext with JspWriter.DEFAULT_BUFFER throws IllegalArgumentException</summary>
    <description/>
    <commit commitTime="2014-01-16 21:46:40" id="48650dd"/>
    <fixedFiles>
      <file>java/org/apache/jasper/runtime/PageContextImpl.java</file>
      <file>test/org/apache/jasper/runtime/TestPageContextImpl.java</file>
    </fixedFiles>
  </bug>
  <bug id="56025" reportTime="2014-01-17 08:23:30">
    <summary>Order of invocation of method of ServerEndpointConfig.Configurator</summary>
    <description/>
    <commit commitTime="2014-01-17 20:00:00" id="11b1e83"/>
    <fixedFiles>
      <file>java/org/apache/tomcat/websocket/server/UpgradeUtil.java</file>
    </fixedFiles>
  </bug>
  <bug id="55943" reportTime="2014-01-01 10:02:46">
    <summary>Provide a way prevent looking at the System classloader before the webapp classloaders</summary>
    <description/>
    <commit commitTime="2014-01-17 22:46:40" id="f28800c"/>
    <fixedFiles>
      <file>java/org/apache/catalina/loader/WebappClassLoader.java</file>
    </fixedFiles>
  </bug>
  <bug id="56029" reportTime="2014-01-18 12:42:47">
    <summary>Ternary operator doesn't work as expected inside attributes in jspx pages</summary>
    <description/>
    <commit commitTime="2014-01-19 02:33:20" id="b430e29"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/ELParser.java</file>
      <file>test/org/apache/jasper/compiler/TestELParser.java</file>
    </fixedFiles>
  </bug>
  <bug id="56012" reportTime="2014-01-15 07:30:17">
    <summary>wrong import statement generation while using the extends attribute of the page directive</summary>
    <description/>
    <commit commitTime="2014-01-19 05:20:00" id="42056be"/>
    <fixedFiles>
      <file>java/org/apache/jasper/compiler/PageInfo.java</file>
      <file>java/org/apache/jasper/compiler/Validator.java</file>
    </fixedFiles>
  </bug>
</BugReportRepository>
